run python3 -m src.experiments     --process_data     --data_dir data/spider     --db_dir data/spider/database     --dataset_name spider     --question_split          --question_only               --denormalize_sql               --table_shuffling     --use_lstm_encoder     --use_meta_data_encoding          --sql_consistency_check          --use_picklist     --anchor_text_match_threshold 0.85               --top_k_picklist_matches 2     --process_sql_in_execution_order               --num_random_tables_added 0                         --save_best_model_only     --schema_augmentation_factor 1          --data_augmentation_factor 1          --vocab_min_freq 0     --text_vocab_min_freq 0     --program_vocab_min_freq 0     --num_values_per_field 0     --max_in_seq_len 512     --max_out_seq_len 60     --model bridge     --num_steps 100000     --curriculum_interval 0     --num_peek_steps 1000     --num_accumulation_steps 2     --train_batch_size 8     --dev_batch_size 8     --encoder_input_dim 1024     --encoder_hidden_dim 400     --decoder_input_dim 400     --num_rnn_layers 1     --num_const_attn_layers 0     --emb_dropout_rate 0.3     --pretrained_lm_dropout_rate 0     --rnn_layer_dropout_rate 0     --rnn_weight_dropout_rate 0     --cross_attn_dropout_rate 0     --cross_attn_num_heads 8     --res_input_dropout_rate 0.2     --res_layer_dropout_rate 0     --ff_input_dropout_rate 0.4     --ff_hidden_dropout_rate 0.0     --pretrained_transformer bert-large-uncased          --bert_finetune_rate 0.00006     --learning_rate 0.0005     --learning_rate_scheduler inverse-square     --trans_learning_rate_scheduler inverse-square     --warmup_init_lr 0.0005     --warmup_init_ft_lr 0.00003     --num_warmup_steps 4000     --grad_norm 0.3     --decoding_algorithm beam-search     --beam_size 16     --bs_alpha 1.05     --gpu 0     
2022-01-24 13:28:54.070854: I tensorflow/stream_executor/platform/default/dso_loader.cc:53] Successfully opened dynamic library libcudart.so.11.0
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00, 33.78it/s]
  0%|          | 0/100 [00:00<?, ?it/s]  6%|▌         | 6/100 [00:00<00:01, 57.38it/s]  8%|▊         | 8/100 [00:02<00:28,  3.19it/s] 10%|█         | 10/100 [00:02<00:24,  3.64it/s] 12%|█▏        | 12/100 [00:02<00:20,  4.21it/s] 21%|██        | 21/100 [00:02<00:13,  5.89it/s] 25%|██▌       | 25/100 [00:03<00:10,  7.03it/s] 28%|██▊       | 28/100 [00:03<00:08,  8.09it/s] 32%|███▏      | 32/100 [00:04<00:09,  7.54it/s] 34%|███▍      | 34/100 [00:04<00:07,  8.70it/s] 36%|███▌      | 36/100 [00:04<00:09,  7.01it/s]167 schema graphs loaded
1 train examples loaded
100 dev examples loaded
Warning: file data/spider/fine-tune.json not found.
5398 parsed SQL queries loaded
* text vocab size = 30522
* program vocab size = 99

processing 1 examples from train...
--------------------
text:  what is the biggest city in wyoming
sql:  SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  "wyoming" ) AND state_name  =  "wyoming"
ground truth values:  [('city.state_name', 'wyoming'), ('city.state_name', 'wyoming')]
matched values OrderedDict()
--------------------
********** train Data Statistics ***********
OOV observed in 0/1 examples
Denormalization skipped for 0/1 examples
Schema truncated for 0/1 examples
Token restored for 1/1 examples
+ text sizes
# text tokens (avg) = 7.0
# text tokens (min) = 7
# text tokens (max) = 7
+ input sizes
input size (avg) = 105.0
input size (min) = 105 
input size (max) = 105
+ program sizes
# program tokens (avg) = 30.0	# program whole field tokens = 30.0 (avg)	
# program tokens (min) = 30	# program whole field tokens = 30 (min)	
# program tokens (max) = 30	# program whole field tokens = 30 (max)	
max pointer span size = 1
---  value extraction performance ---
micro precision = 0.0
micro recall = 0.0
micro F1 = 0.0
processing 100 examples from dev...
Picklist: Return the names of conductors that do not have the nationality "USA"., conductor, Nationality, [USA]
Picklist: How many flights depart from 'APG'?, airports, AirportCode, [APG]
Picklist: How many flights depart from 'APG'?, flights, SourceAirport, [ APG]
Picklist: How many flights depart from 'APG'?, flights, DestAirport, [ APG]
--------------------
text:  How many flights depart from 'APG'?
sql:  SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  "APG"
ground truth values:  [('flights.SourceAirport', 'APG')]
matched values OrderedDict([(21, ('airports.AirportCode', 'APG')), (44, ('flights.SourceAirport', ' APG')), (50, ('flights.DestAirport', ' APG'))])
--------------------
Picklist: What is the zip code of the address in the city Port Chelsea?, Addresses, city, [Port Chelsea]
--------------------
text:  What are the names of the singers who are not French citizens?
sql:  SELECT Name FROM singer WHERE Citizenship != "France"
ground truth values:  [('singer.Citizenship', 'France')]
matched values OrderedDict()
--------------------
Picklist: What are flight numbers of flights departing from Airport "APG"?, airports, AirportCode, [APG]
Picklist: What are flight numbers of flights departing from Airport "APG"?, flights, SourceAirport, [ APG]
Picklist: What are flight numbers of flights departing from Airport "APG"?, flights, DestAirport, [ APG]
--------------------
text:  What are flight numbers of flights departing from Airport "APG"?
sql:  SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"
ground truth values:  [('flights.SourceAirport', 'APG')]
matched values OrderedDict([(21, ('airports.AirportCode', 'APG')), (44, ('flights.SourceAirport', ' APG')), (50, ('flights.DestAirport', ' APG'))])
--------------------
Picklist: Count the number of templates of the type CV., Ref_Template_Types, Template_Type_Code, [CV]
Picklist: Count the number of templates of the type CV., Ref_Template_Types, Template_Type_Description, [CV]
Picklist: Count the number of templates of the type CV., Templates, Template_Type_Code, [CV]
--------------------
text:  Count the number of templates of the type CV.
sql:  SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"
ground truth values:  [('Templates.Template_Type_Code', 'CV')]
matched values OrderedDict([(10, ('Ref_Template_Types.Template_Type_Code', 'CV')), (16, ('Ref_Template_Types.Template_Type_Description', 'CV')), (31, ('Templates.Template_Type_Code', 'CV'))])
--------------------
Picklist: What are the Package Options of the TV Channels whose series names are Sky Radio?, TV_Channel, series_name, [Sky Radio]
Picklist: What are the Package Options of the TV Channels whose series names are Sky Radio?, TV_Channel, Package_Option, [Option]
--------------------
text:  What are the Package Options of the TV Channels whose series names are Sky Radio?
sql:  SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio"
ground truth values:  [('TV_Channel.series_name', 'Sky Radio')]
matched values OrderedDict([(10, ('TV_Channel.series_name', 'Sky Radio')), (38, ('TV_Channel.Package_Option', 'Option'))])
--------------------
Picklist: What is the phone number of the man with the first name Timmothy and the last name Ward?, Students, first_name, [Timmothy]
Picklist: What is the phone number of the man with the first name Timmothy and the last name Ward?, Students, last_name, [Ward]
Picklist: What are the ids of templates with template type code PP or PPT?, Ref_Template_Types, Template_Type_Code, [PPT]
Picklist: What are the ids of templates with template type code PP or PPT?, Ref_Template_Types, Template_Type_Code, [PP]
Picklist: What are the ids of templates with template type code PP or PPT?, Templates, Template_Type_Code, [PPT]
Picklist: What are the ids of templates with template type code PP or PPT?, Templates, Template_Type_Code, [PP]
--------------------
text:  What are the ids of templates with template type code PP or PPT?
sql:  SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
ground truth values:  [('Templates.Template_Type_Code', 'PP'), ('Templates.Template_Type_Code', 'PPT')]
matched values OrderedDict([(10, ('Ref_Template_Types.Template_Type_Code', 'PPT')), (13, ('Ref_Template_Types.Template_Type_Code', 'PP')), (32, ('Templates.Template_Type_Code', 'PPT')), (35, ('Templates.Template_Type_Code', 'PP'))])
--------------------
Picklist: What are flight numbers of flights arriving at City "Aberdeen"?, airports, City, [Aberdeen ]
--------------------
text:  What are flight numbers of flights arriving at City "Aberdeen"?
sql:  SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
ground truth values:  [('airports.City', 'Aberdeen')]
matched values OrderedDict([(18, ('airports.City', 'Aberdeen '))])
--------------------
Picklist: What is the number of makers of care in France?, countries, CountryName, [france]
Picklist: Give the mean GNP and total population of nations which are considered US territory., country, GovernmentForm, [US Territory]
Picklist: Give the mean GNP and total population of nations which are considered US territory., country, Code2, [US]
--------------------
text:  Give the mean GNP and total population of nations which are considered US territory.
sql:  SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"
ground truth values:  [('country.GovernmentForm', 'US Territory')]
matched values OrderedDict([(61, ('country.GovernmentForm', 'US Territory')), (73, ('country.Code2', 'US'))])
--------------------
Picklist: How many official languages are spoken in Afghanistan?, country, Name, [Afghanistan]
--------------------
text:  How many official languages are spoken in Afghanistan?
sql:  SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"
ground truth values:  [('country.Name', 'Afghanistan'), ('countrylanguage.IsOfficial', 'T')]
matched values OrderedDict([(30, ('country.Name', 'Afghanistan'))])
--------------------
Picklist: What is the TV Channel of TV series with Episode "A Love of a Lifetime"? List the TV Channel's series name., TV_series, Episode, [A Love of a Lifetime]
Picklist: How many continents speak Chinese?, countrylanguage, Language, [Chinese]
Picklist: Show all paragraph texts for the document "Customer reviews"., Documents, Document_Name, [Customer reviews]
Picklist: Return the number of flights departing from Aberdeen., airports, City, [Aberdeen ]
--------------------
text:  Return the number of flights departing from Aberdeen.
sql:  SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
ground truth values:   42%|████▏     | 42/100 [00:05<00:07,  8.28it/s] 44%|████▍     | 44/100 [00:05<00:06,  8.58it/s] 49%|████▉     | 49/100 [00:05<00:04, 11.37it/s] 56%|█████▌    | 56/100 [00:05<00:02, 15.05it/s] 62%|██████▏   | 62/100 [00:05<00:01, 19.17it/s] 69%|██████▉   | 69/100 [00:05<00:01, 24.38it/s] 74%|███████▍  | 74/100 [00:06<00:02, 12.88it/s] 78%|███████▊  | 78/100 [00:07<00:02,  9.90it/s] 81%|████████  | 81/100 [00:07<00:01, 10.19it/s] 86%|████████▌ | 86/100 [00:07<00:01, 13.30it/s] 90%|█████████ | 90/100 [00:07<00:00, 16.19it/s] 94%|█████████▍| 94/100 [00:07<00:00, 19.10it/s] 98%|█████████▊| 98/100 [00:08<00:00, 16.74it/s]100%|██████████| 100/100 [00:08<00:00, 11.57it/s]
[('airports.City', 'Aberdeen')]
matched values OrderedDict([(18, ('airports.City', 'Aberdeen '))])
--------------------
Picklist: Count the number of paragraphs in the document named 'Summer Show'., Documents, Document_Name, [Summer Show]
Picklist: Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name., Owners, state, [Virginia]
Picklist: Return the number of United Airlines flights leaving from AHD Airport., airlines, Airline, [United Airlines]
Picklist: Return the number of United Airlines flights leaving from AHD Airport., airports, AirportCode, [AHD]
Picklist: Return the number of United Airlines flights leaving from AHD Airport., flights, SourceAirport, [ AHD]
Picklist: Return the number of United Airlines flights leaving from AHD Airport., flights, DestAirport, [ AHD]
--------------------
text:  Return the number of United Airlines flights leaving from AHD Airport.
sql:  SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"
ground truth values:  [('airlines.Airline', 'United Airlines'), ('flights.SourceAirport', 'AHD')]
matched values OrderedDict([(10, ('airlines.Airline', 'United Airlines')), (24, ('airports.AirportCode', 'AHD')), (47, ('flights.SourceAirport', ' AHD')), (53, ('flights.DestAirport', ' AHD'))])
--------------------
Picklist: List the airport code and name in the city of Anthony., airports, City, [Anthony ]
Picklist: List the airport code and name in the city of Anthony., airports, AirportName, [Anthony ]
--------------------
text:  List the airport code and name in the city of Anthony.
sql:  SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  "Anthony"
ground truth values:  [('airports.City', 'Anthony')]
matched values OrderedDict([(18, ('airports.City', 'Anthony ')), (26, ('airports.AirportName', 'Anthony '))])
--------------------
Picklist: Return the number of likes that the high schooler named Kyle has., Highschooler, name, [Kyle]
Picklist: Return the names of the contestants whose names contain the substring 'Al' ., AREA_CODE_STATE, state, [AL]
--------------------
text:  Return the names of the contestants whose names contain the substring 'Al' .
sql:  select contestant_name from contestants where contestant_name like "%al%"
ground truth values:  []
matched values OrderedDict([(11, ('AREA_CODE_STATE.state', 'AL'))])
--------------------
Picklist: What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?, battle, bulgarian_commander, [Kaloyan]
Picklist: What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?, battle, latin_commander, [Baldwin I]
Picklist: Find the first names of owners living in Virginia and the names of dogs they own., Owners, state, [Virginia]
Picklist: Return the maximum and minimum shares for performances that do not have the type "Live final"., performance, Type, [Live final]
Picklist: Which languages are spoken by only one country in republic governments?, country, GovernmentForm, [Republic]
Picklist: What are the country codes for countries that do not speak English?, countrylanguage, Language, [English]
Picklist: What are the regions that use English or Dutch?, countrylanguage, Language, [English]
Picklist: What are the regions that use English or Dutch?, countrylanguage, Language, [Dutch]
Picklist: find the id of tv channels that do not play any cartoon directed by Ben Jones., Cartoon, Directed_by, [Ben Jones]
Picklist: Find the name, population and expected life length of asian country with the largest area?, country, Continent, [Asia]
Picklist: Show the document id with paragraph text 'Brazil' and 'Ireland'., Paragraphs, Paragraph_Text, [Ireland]
Picklist: Show the document id with paragraph text 'Brazil' and 'Ireland'., Paragraphs, Paragraph_Text, [Brazil]
Picklist: Find the first name and age of students who have a dog but do not have a cat as a pet., Pets, PetType, [dog]
Picklist: Find the first name and age of students who have a dog but do not have a cat as a pet., Pets, PetType, [cat]
Picklist: Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?, car_makers, FullName, [General Motors]
Picklist: List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta', ship, name, [HMS Atalanta]
Picklist: List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta', ship, name, [Lettice]
Picklist: Which African countries have a smaller population than that of any country in Asia?, country, Continent, [Asia]
Picklist: Which African countries have a smaller population than that of any country in Asia?, country, Continent, [Africa]
********** dev Data Statistics ***********
OOV observed in 0/100 examples
Denormalization skipped for 0/100 examples
Schema truncated for 0/100 examples
Token restored for 100/100 examples
+ text sizes
# text tokens (avg) = 14.96
# text tokens (min) = 6
# text tokens (max) = 34
+ input sizes
input size (avg) = 98.47
input size (min) = 44 
input size (max) = 257
+ program sizes
# program tokens (avg) = 18.76	# program whole field tokens = 18.76 (avg)	
# program tokens (min) = 8	# program whole field tokens = 8 (min)	
# program tokens (max) = 54	# program whole field tokens = 54 (max)	
max pointer span size = 0
---  value extraction performance ---
micro precision = 0.9008333333333333
micro recall = 0.93
micro F1 = 0.905
Processed data dumped to data/spider/spider.bridge.question-split.ppl-0.85.2.dn.eo.bert.pkl
