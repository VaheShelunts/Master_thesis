run python3 -m src.experiments     --process_data     --data_dir data/spider     --db_dir data/spider/database     --dataset_name spider     --question_split          --question_only               --denormalize_sql               --table_shuffling     --use_lstm_encoder     --use_meta_data_encoding          --sql_consistency_check          --use_picklist     --anchor_text_match_threshold 0.85               --top_k_picklist_matches 2     --process_sql_in_execution_order               --num_random_tables_added 0                         --save_best_model_only     --schema_augmentation_factor 1          --data_augmentation_factor 1          --vocab_min_freq 0     --text_vocab_min_freq 0     --program_vocab_min_freq 0     --num_values_per_field 0     --max_in_seq_len 512     --max_out_seq_len 60     --model bridge     --num_steps 100000     --curriculum_interval 0     --num_peek_steps 1000     --num_accumulation_steps 2     --train_batch_size 8     --dev_batch_size 8     --encoder_input_dim 1024     --encoder_hidden_dim 400     --decoder_input_dim 400     --num_rnn_layers 1     --num_const_attn_layers 0     --emb_dropout_rate 0.3     --pretrained_lm_dropout_rate 0     --rnn_layer_dropout_rate 0     --rnn_weight_dropout_rate 0     --cross_attn_dropout_rate 0     --cross_attn_num_heads 8     --res_input_dropout_rate 0.2     --res_layer_dropout_rate 0     --ff_input_dropout_rate 0.4     --ff_hidden_dropout_rate 0.0     --pretrained_transformer bert-large-uncased          --bert_finetune_rate 0.00006     --learning_rate 0.0005     --learning_rate_scheduler inverse-square     --trans_learning_rate_scheduler inverse-square     --warmup_init_lr 0.0005     --warmup_init_ft_lr 0.00003     --num_warmup_steps 4000     --grad_norm 0.3     --decoding_algorithm beam-search     --beam_size 16     --bs_alpha 1.05     --gpu 0     
2022-01-19 10:38:00.074003: I tensorflow/stream_executor/platform/default/dso_loader.cc:53] Successfully opened dynamic library libcudart.so.11.0
  0%|          | 0/8943 [00:00<?, ?it/s]  0%|          | 9/8943 [00:00<01:45, 84.47it/s]  0%|          | 16/8943 [00:00<01:54, 78.26it/s]  0%|          | 30/8943 [00:00<01:39, 90.00it/s]  0%|          | 39/8943 [00:00<01:42, 87.12it/s]  1%|          | 47/8943 [00:01<05:03, 29.32it/s]  1%|          | 54/8943 [00:01<04:11, 35.31it/s]  1%|          | 60/8943 [00:01<03:43, 39.80it/s]  1%|          | 67/8943 [00:01<03:15, 45.46it/s]  1%|          | 74/8943 [00:01<03:09, 46.92it/s]  1%|          | 80/8943 [00:01<03:04, 48.08it/s]  1%|          | 86/8943 [00:01<03:05, 47.87it/s]  1%|          | 92/8943 [00:01<03:00, 49.08it/s]  1%|          | 99/8943 [00:02<02:44, 53.88it/s]  1%|          | 105/8943 [00:02<02:43, 54.04it/s]167 schema graphs loaded
8943 train examples loaded
750 dev examples loaded
Warning: file data/spider/fine-tune.json not found.
5398 parsed SQL queries loaded
* text vocab size = 30522
* program vocab size = 99

processing 8943 examples from train...
Picklist: List the name, born state and age of the heads of departments ordered by age., department, Name, [State]
--------------------
text:  List the name, born state and age of the heads of departments ordered by age.
sql:  SELECT name ,  born_state ,  age FROM head ORDER BY age
ground truth values:  []
matched values OrderedDict([(9, ('department.Name', 'State'))])
--------------------
Picklist: What are the names of the heads who are born outside the California state?, department, Name, [State]
Picklist: What are the names of the heads who are born outside the California state?, head, born_state, [California]
--------------------
text:  What are the names of the heads who are born outside the California state?
sql:  SELECT name FROM head WHERE born_state != 'California'
ground truth values:  [('head.born_state', 'California')]
matched values OrderedDict([(9, ('department.Name', 'State')), (33, ('head.born_state', 'California'))])
--------------------
Picklist: What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?, department, Name, [State]
Picklist: What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?, head, born_state, [Alabama]
--------------------
text:  What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?
sql:  SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'
ground truth values:  [('head.born_state', 'Alabama')]
matched values OrderedDict([(9, ('department.Name', 'State')), (33, ('head.born_state', 'Alabama'))])
--------------------
Picklist: Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?, management, temporary_acting, [Yes]
--------------------
text:  What are the distinct ages of the heads who are acting?
sql:  SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'
ground truth values:  [('management.temporary_acting', 'Yes')]
matched values OrderedDict()
--------------------
Picklist: List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born., department, Name, [Homeland Security]
Picklist: List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born., department, Name, [Treasury]
Picklist: What are the hosts of competitions whose theme is not "Aliens"?, farm_competition, Theme, [Aliens]
Picklist: Return the hosts of competitions for which the theme is not Aliens?, farm_competition, Theme, [Aliens]
Picklist: Show the census ranking of cities whose status are not "Village"., city, Status, [Village]
Picklist: What are the census rankings of cities that do not have the status "Village"?, city, Status, [Village]
Picklist: How many students attend course English?, Courses, course_name, [English]
Picklist: How many students attend course English?, Courses, course_description, [English]
--------------------
text:  How many students attend course English?
sql:  SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "English"
ground truth values:  [('Courses.course_name', 'English')]
matched values OrderedDict([(68, ('Courses.course_name', 'English')), (73, ('Courses.course_description', 'English'))])
--------------------
Picklist: How many students are attending English courses?, Courses, course_name, [English]
Picklist: How many students are attending English courses?, Courses, course_description, [English]
--------------------
text:  How many students are attending English courses?
sql:  SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "English"
ground truth values:  [('Courses.course_name', 'English')]
matched values OrderedDict([(68, ('Courses.course_name', 'English')), (73, ('Courses.course_description', 'English'))])
--------------------
Picklist: Find id of the candidate whose email is stanley.monahan@example.org?, People, email_address, [stanley.monahan@example.org]
Picklist: What is the id of the candidate whose email is stanley.monahan@example.org?, People, email_address, [stanley.monahan@example.org]
Picklist: Find id of candidates whose assessment code is "Pass"?, Candidate_Assessments, asessment_outcome_code, [Pass]
Picklist: What are the ids of the candidates that have an outcome code of Pass?, Candidate_Assessments, asessment_outcome_code, [Pass]
Picklist: Find the cell mobile number of the candidates whose assessment code is "Fail"?, Candidate_Assessments, asessment_outcome_code, [Fail]
Picklist: What are the cell phone numbers of the candidates that received an assessment code of "Fail"?, Candidate_Assessments, asessment_outcome_code, [Fail]
Picklist: List the id of students who registered course statistics in the order of registration date., Courses, course_name, [statistics]
Picklist: List the id of students who registered course statistics in the order of registration date., Courses, course_description, [statistics]
--------------------
text:  List the id of students who registered course statistics in the order of registration date.
sql:  SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "statistics" ORDER BY T2.registration_date
ground truth values:  [('Courses.course_name', 'statistics')]
matched values OrderedDict([(68, ('Courses.course_name', 'statistics')), (73, ('Courses.course_description', 'statistics'))])
--------------------
Picklist: What are the ids of the students who registered course statistics by order of registration date?, Courses, course_name, [statistics]
Picklist: What are the ids of the students who registered course statistics by order of registration date?, Courses, course_description, [statistics]
--------------------
text:  What are the ids of the students who registered course statistics by order of registration date?
sql:  SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "statistics" ORDER BY T2.registration_date
ground truth values:  [('Courses.course_name', 'statistics')]
matched values OrderedDict([(68, ('Courses.course_name', 'statistics')), (73, ('Courses.course_description', 'statistics'))])
--------------------
Picklist: List the id of students who attended  statistics courses in the order of attendance date., Courses, course_name, [statistics]
Picklist: List the id of students who attended  statistics courses in the order of attendance date., Courses, course_description, [statistics]
--------------------
text:  List the id of students who attended  statistics courses in the order of attendance date.
sql:  SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "statistics" ORDER BY T2.date_of_attendance
ground truth values:  [('Courses.course_name', 'statistics')]
matched values OrderedDict([(68, ('Courses.course_name', 'statistics')), (73, ('Courses.course_description', 'statistics'))])
--------------------
Picklist: What are the ids of the students who attended courses in the statistics department in order of attendance date., Courses, course_name, [statistics]
Picklist: What are the ids of the students who attended courses in the statistics department in order of attendance date., Courses, course_description, [statistics]
--------------------
text:  What are the ids of the students who attended courses in the statistics department in order of attendance date.
sql:    1%|          | 111/8943 [00:03<12:39, 11.62it/s]  1%|▏         | 116/8943 [00:04<19:18,  7.62it/s]  1%|▏         | 120/8943 [00:05<24:00,  6.12it/s]  1%|▏         | 123/8943 [00:06<26:30,  5.55it/s]  1%|▏         | 125/8943 [00:06<29:57,  4.91it/s]  1%|▏         | 127/8943 [00:07<29:08,  5.04it/s]  1%|▏         | 129/8943 [00:07<29:29,  4.98it/s]  1%|▏         | 130/8943 [00:07<29:07,  5.04it/s]  1%|▏         | 131/8943 [00:08<28:09,  5.22it/s]  1%|▏         | 132/8943 [00:08<30:47,  4.77it/s]  1%|▏         | 133/8943 [00:08<33:12,  4.42it/s]  1%|▏         | 134/8943 [00:08<36:42,  4.00it/s]  2%|▏         | 135/8943 [00:09<38:37,  3.80it/s]  2%|▏         | 136/8943 [00:09<36:46,  3.99it/s]  2%|▏         | 137/8943 [00:09<36:10,  4.06it/s]  2%|▏         | 138/8943 [00:09<36:56,  3.97it/s]  2%|▏         | 139/8943 [00:10<39:17,  3.74it/s]  2%|▏         | 140/8943 [00:10<39:37,  3.70it/s]  2%|▏         | 141/8943 [00:10<41:26,  3.54it/s]  2%|▏         | 142/8943 [00:11<44:01,  3.33it/s]  2%|▏         | 143/8943 [00:11<45:06,  3.25it/s]  2%|▏         | 144/8943 [00:11<47:45,  3.07it/s]  2%|▏         | 145/8943 [00:12<50:20,  2.91it/s]  2%|▏         | 146/8943 [00:12<47:00,  3.12it/s]  2%|▏         | 147/8943 [00:12<43:50,  3.34it/s]  2%|▏         | 148/8943 [00:12<42:15,  3.47it/s]  2%|▏         | 149/8943 [00:13<40:21,  3.63it/s]  2%|▏         | 150/8943 [00:13<40:02,  3.66it/s]  2%|▏         | 151/8943 [00:13<38:34,  3.80it/s]  2%|▏         | 152/8943 [00:14<40:14,  3.64it/s]  2%|▏         | 153/8943 [00:14<41:44,  3.51it/s]  2%|▏         | 154/8943 [00:14<38:49,  3.77it/s]  2%|▏         | 155/8943 [00:14<42:27,  3.45it/s]  2%|▏         | 156/8943 [00:15<43:44,  3.35it/s]  2%|▏         | 157/8943 [00:15<43:53,  3.34it/s]  2%|▏         | 158/8943 [00:15<41:36,  3.52it/s]  2%|▏         | 159/8943 [00:16<40:34,  3.61it/s]  2%|▏         | 160/8943 [00:16<41:28,  3.53it/s]  2%|▏         | 161/8943 [00:16<44:36,  3.28it/s]  2%|▏         | 162/8943 [00:16<40:37,  3.60it/s]  2%|▏         | 163/8943 [00:17<38:51,  3.77it/s]  2%|▏         | 164/8943 [00:17<38:50,  3.77it/s]  2%|▏         | 165/8943 [00:17<38:58,  3.75it/s]  2%|▏         | 166/8943 [00:17<37:28,  3.90it/s]  2%|▏         | 167/8943 [00:18<34:43,  4.21it/s]  2%|▏         | 168/8943 [00:18<35:40,  4.10it/s]  2%|▏         | 169/8943 [00:18<36:38,  3.99it/s]  2%|▏         | 170/8943 [00:18<39:05,  3.74it/s]  2%|▏         | 171/8943 [00:20<1:24:03,  1.74it/s]  2%|▏         | 172/8943 [00:20<1:14:03,  1.97it/s]  2%|▏         | 173/8943 [00:20<1:07:08,  2.18it/s]  2%|▏         | 174/8943 [00:21<58:03,  2.52it/s]    2%|▏         | 175/8943 [00:21<52:20,  2.79it/s]  2%|▏         | 176/8943 [00:21<50:01,  2.92it/s]  2%|▏         | 177/8943 [00:22<48:27,  3.01it/s]  2%|▏         | 178/8943 [00:22<47:11,  3.10it/s]  2%|▏         | 179/8943 [00:22<46:49,  3.12it/s]  2%|▏         | 180/8943 [00:22<44:46,  3.26it/s]  2%|▏         | 181/8943 [00:23<45:15,  3.23it/s]  2%|▏         | 182/8943 [00:23<43:18,  3.37it/s]  2%|▏         | 183/8943 [00:23<42:52,  3.40it/s]  2%|▏         | 184/8943 [00:24<41:13,  3.54it/s]  2%|▏         | 185/8943 [00:24<40:10,  3.63it/s]  2%|▏         | 186/8943 [00:24<40:39,  3.59it/s]  2%|▏         | 187/8943 [00:24<40:30,  3.60it/s]  2%|▏         | 188/8943 [00:25<38:49,  3.76it/s]  2%|▏         | 189/8943 [00:25<38:34,  3.78it/s]  2%|▏         | 190/8943 [00:25<40:03,  3.64it/s]  2%|▏         | 191/8943 [00:26<40:51,  3.57it/s]  2%|▏         | 192/8943 [00:26<41:25,  3.52it/s]  2%|▏         | 193/8943 [00:26<41:28,  3.52it/s]  2%|▏         | 194/8943 [00:26<41:22,  3.52it/s]  2%|▏         | 195/8943 [00:27<41:47,  3.49it/s]  2%|▏         | 196/8943 [00:27<40:14,  3.62it/s]  2%|▏         | 197/8943 [00:27<40:36,  3.59it/s]  2%|▏         | 198/8943 [00:28<42:25,  3.44it/s]  2%|▏         | 199/8943 [00:28<44:17,  3.29it/s]  2%|▏         | 200/8943 [00:28<43:05,  3.38it/s]  2%|▏         | 201/8943 [00:28<42:08,  3.46it/s]  2%|▏         | 202/8943 [00:29<44:36,  3.27it/s]  2%|▏         | 203/8943 [00:29<42:34,  3.42it/s]  2%|▏         | 204/8943 [00:29<43:11,  3.37it/s]  2%|▏         | 205/8943 [00:30<44:12,  3.29it/s]  2%|▏         | 206/8943 [00:30<45:37,  3.19it/s]  2%|▏         | 207/8943 [00:30<47:30,  3.07it/s]  2%|▏         | 208/8943 [00:31<50:14,  2.90it/s]  2%|▏         | 209/8943 [00:31<49:33,  2.94it/s]  2%|▏         | 210/8943 [00:31<46:10,  3.15it/s]  2%|▏         | 211/8943 [00:32<44:51,  3.24it/s]  2%|▏         | 212/8943 [00:32<42:20,  3.44it/s]  2%|▏         | 213/8943 [00:32<40:50,  3.56it/s]  3%|▎         | 224/8943 [00:32<28:57,  5.02it/s]  3%|▎         | 234/8943 [00:32<20:42,  7.01it/s]  3%|▎         | 247/8943 [00:32<14:50,  9.77it/s]  3%|▎         | 255/8943 [00:33<10:57, 13.21it/s]  3%|▎         | 264/8943 [00:33<08:11, 17.65it/s]SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "statistics" ORDER BY T2.date_of_attendance
ground truth values:  [('Courses.course_name', 'statistics')]
matched values OrderedDict([(68, ('Courses.course_name', 'statistics')), (73, ('Courses.course_description', 'statistics'))])
--------------------
Picklist: What is the average latitude and longitude of stations located in San Jose city?, station, city, [San Jose]
Picklist: What is the average latitude and longitude in San Jose?, station, city, [San Jose]
Picklist: How many stations does Mountain View city has?, station, city, [Mountain View]
Picklist: How many stations are in Mountain View?, station, city, [Mountain View]
Picklist: What are the ids of stations that are located in San Francisco and have average bike availability above 10., station, city, [San Francisco]
Picklist: What are the ids of the stations in San Francisco that normally have more than 10 bikes available?, station, city, [San Francisco]
Picklist: What is the average bike availability in stations that are not located in Palo Alto?, station, city, [Palo Alto]
Picklist: What is the average bike availablility for stations not in Palo Alto?, station, city, [Palo Alto]
Picklist: Count the number of trips that did not end in San Francisco city., station, city, [San Francisco]
Picklist: How many trips did not end in San Francisco?, station, city, [San Francisco]
Picklist: In zip code 94107, on which day neither Fog nor Rain was not observed?, weather, events, [rain]
Picklist: In zip code 94107, on which day neither Fog nor Rain was not observed?, weather, events, [Fog]
--------------------
text:  On which day has it neither been foggy nor rained in the zip code of 94107?
sql:  SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != "Fog" AND EVENTS != "Rain"
ground truth values:  [('weather.events', 'Fog'), ('weather.events', 'Rain')]
matched values OrderedDict()
--------------------
Picklist: What are names of stations that have average bike availability above 10 and are not located in San Jose city?, station, city, [San Jose]
Picklist: What are the names of all stations that have more than 10 bikes available and are not located in San Jose?, station, city, [San Jose]
Picklist: What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?, station, city, [Palo Alto]
Picklist: What are the names of the stations that are located in Palo Alto but have never been the ending point of the trips, station, city, [Palo Alto]
Picklist: How many trips started from Mountain View city and ended at Palo Alto city?, station, city, [Mountain View]
Picklist: How many trips started from Mountain View city and ended at Palo Alto city?, station, city, [Palo Alto]
Picklist: How many trips stated from  a station in Mountain View and ended at one in Palo Alto?, station, city, [Mountain View]
Picklist: How many trips stated from  a station in Mountain View and ended at one in Palo Alto?, station, city, [Palo Alto]
Picklist: What are the titles of the books whose writer is not "Elaine Lee"?, book, Writer, [Elaine Lee]
Picklist: Show the prices of publications whose publisher is either "Person" or "Wiley", publication, Publisher, [Wiley]
--------------------
text:  Show the prices of publications whose publisher is either "Person" or "Wiley"
sql:  SELECT Price FROM publication WHERE Publisher  =  "Person" OR Publisher  =  "Wiley"
ground truth values:  [('publication.Publisher', 'Person'), ('publication.Publisher', 'Wiley')]
matched values OrderedDict([(12, ('publication.Publisher', 'Wiley'))])
--------------------
Picklist: What are the names of musicals with nominee "Bob Fosse"?, musical, Nominee, [Bob Fosse]
Picklist: Return the names of musicals who have the nominee Bob Fosse., musical, Nominee, [Bob Fosse]
Picklist: What are the distinct nominees of the musicals with the award that is not "Tony Award"?, musical, Award, [Tony Award]
Picklist: Return the different nominees of musicals that have an award that is not the Tony Award., musical, Award, [Tony Award]
Picklist: Show names of actors that have appeared in musical with name "The Phantom of the Opera"., musical, Name, [The Phantom of the Opera]
Picklist: What are the names of actors who have been in the musical titled The Phantom of the Opera?, musical, Name, [The Phantom of the Opera]
Picklist: Show different nominees and the number of musicals they have been nominated., musical, Result, [Nominated]
--------------------
text:  Show different nominees and the number of musicals they have been nominated.
sql:  SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee
ground truth values:  []
matched values OrderedDict([(19, ('musical.Result', 'Nominated'))])
--------------------
Picklist: How many musicals has each nominee been nominated for?, musical, Result, [Nominated]
--------------------
text:  How many musicals has each nominee been nominated for?
sql:  SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee
ground truth values:  []
matched values OrderedDict([(19, ('musical.Result', 'Nominated'))])
--------------------
Picklist: Please show the nominee who has been nominated the greatest number of times., musical, Result, [Nominated]
--------------------
text:  Please show the nominee who has been nominated the greatest number of times.
sql:  SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(19, ('musical.Result', 'Nominated'))])
--------------------
Picklist: Who is the nominee who has been nominated for the most musicals?, musical, Result, [Nominated]
--------------------
text:  Who is the nominee who has been nominated for the most musicals?
sql:  SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(19, ('musical.Result', 'Nominated'))])
--------------------
Picklist: List the nominees that have been nominated more than two musicals., musical, Result, [Nominated]
--------------------
text:  List the nominees that have been nominated more than two musicals.
sql:  SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2
ground truth values:  []
matched values OrderedDict([(19, ('musical.Result', 'Nominated'))])
--------------------
Picklist: Who are the nominees who have been nominated more than two times?, musical, Result, [Nominated]
--------------------
text:  Who are the nominees who have been nominated more than two times?
sql:  SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2
ground truth values:  []
matched values OrderedDict([(19, ('musical.Result', 'Nominated'))])
--------------------
Picklist: Show the nominees that have nominated musicals for both "Tony Award" and "Drama Desk Award"., musical, Award, [Drama Desk Award]
Picklist: Show the nominees that have nominated musicals for both "Tony Award" and "Drama Desk Award"., musical, Award, [Tony Award]
Picklist: Show the nominees that have nominated musicals for both "Tony Award" and "Drama Desk Award"., musical, Result, [Nominated]
--------------------
text:  Show the nominees that have nominated musicals for both "Tony Award" and "Drama Desk Award".
sql:  SELECT Nominee FROM musical WHERE Award  =  "Tony Award" INTERSECT SELECT Nominee FROM musical WHERE Award  =  "Drama Desk Award"
ground truth values:  [('musical.Award', 'Tony Award'), ('musical.Award', 'Drama Desk Award')]
matched values OrderedDict([(13, ('musical.Award', 'Drama Desk Award')), (17, ('musical.Award', 'Tony Award')), (26, ('musical.Result', 'Nominated'))])
--------------------
Picklist: Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award?, musical, Award, [Drama Desk Award]
Picklist: Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award?, musical, Award, [Tony Award]
Picklist: Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award?, musical, Result, [Nominated]
--------------------
text:    3%|▎         | 272/8943 [00:34<12:59, 11.12it/s]  3%|▎         | 285/8943 [00:34<09:27, 15.27it/s]  3%|▎         | 293/8943 [00:34<07:22, 19.56it/s]  3%|▎         | 302/8943 [00:34<05:39, 25.44it/s]  3%|▎         | 311/8943 [00:34<04:29, 32.01it/s]  4%|▎         | 319/8943 [00:35<03:51, 37.26it/s]  4%|▎         | 328/8943 [00:35<03:13, 44.48it/s]  4%|▍         | 336/8943 [00:35<02:58, 48.12it/s]  4%|▍         | 348/8943 [00:35<02:28, 57.85it/s]  4%|▍         | 357/8943 [00:35<02:15, 63.28it/s]  4%|▍         | 368/8943 [00:35<02:00, 70.88it/s]  4%|▍         | 377/8943 [00:35<01:54, 74.80it/s]  4%|▍         | 387/8943 [00:35<01:45, 80.91it/s]Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award?
sql:  SELECT Nominee FROM musical WHERE Award  =  "Tony Award" INTERSECT SELECT Nominee FROM musical WHERE Award  =  "Drama Desk Award"
ground truth values:  [('musical.Award', 'Tony Award'), ('musical.Award', 'Drama Desk Award')]
matched values OrderedDict([(13, ('musical.Award', 'Drama Desk Award')), (17, ('musical.Award', 'Tony Award')), (26, ('musical.Result', 'Nominated'))])
--------------------
Picklist: Show the musical nominee with award "Bob Fosse" or "Cleavant Derricks"., musical, Nominee, [Cleavant Derricks]
Picklist: Show the musical nominee with award "Bob Fosse" or "Cleavant Derricks"., musical, Nominee, [Bob Fosse]
--------------------
text:  Show the musical nominee with award "Bob Fosse" or "Cleavant Derricks".
sql:  SELECT Nominee FROM musical WHERE Award  =  "Tony Award" OR Award  =  "Cleavant Derricks"
ground truth values:  [('musical.Award', 'Tony Award'), ('musical.Award', 'Cleavant Derricks')]
matched values OrderedDict([(17, ('musical.Nominee', 'Cleavant Derricks')), (23, ('musical.Nominee', 'Bob Fosse'))])
--------------------
Picklist: Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?, musical, Nominee, [Cleavant Derricks]
Picklist: Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?, musical, Nominee, [Bob Fosse]
Picklist: Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?, musical, Result, [Nominated]
--------------------
text:  Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?
sql:  SELECT Nominee FROM musical WHERE Award  =  "Tony Award" OR Award  =  "Cleavant Derricks"
ground truth values:  [('musical.Award', 'Tony Award'), ('musical.Award', 'Cleavant Derricks')]
matched values OrderedDict([(17, ('musical.Nominee', 'Cleavant Derricks')), (23, ('musical.Nominee', 'Bob Fosse')), (30, ('musical.Result', 'Nominated'))])
--------------------
Picklist: Find the emails of the user named "Mary"., user_profiles, name, [Mary]
Picklist: What is the partition id of the user named "Iron Man"., user_profiles, name, [Iron Man]
Picklist: Find the names of the users whose number of followers is greater than that of the user named "Tyler Swift"., user_profiles, name, [Tyler Swift]
Picklist: Find the id of users who are followed by Mary and Susan., user_profiles, name, [Mary]
Picklist: Find the id of users who are followed by Mary and Susan., user_profiles, name, [Susan]
Picklist: Find the id of users who are followed by Mary or Susan., user_profiles, name, [Mary]
Picklist: Find the id of users who are followed by Mary or Susan., user_profiles, name, [Susan]
Picklist: What is the attribute data type of the attribute with name "Green"?, Attribute_Definitions, attribute_name, [Green]
Picklist: Find the attribute data type for the attribute named "Green"., Attribute_Definitions, attribute_name, [Green]
Picklist: What is the product with the highest height? Give me the catalog entry name., Catalog_Structure, catalog_level_name, [Product]
--------------------
text:  What is the product with the highest height? Give me the catalog entry name.
sql:  SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(50, ('Catalog_Structure.catalog_level_name', 'Product'))])
--------------------
Picklist: Find the name of the product that has the smallest capacity., Catalog_Structure, catalog_level_name, [Product]
--------------------
text:  Find the name of the product that has the smallest capacity.
sql:  SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1
ground truth values:  []
matched values OrderedDict([(50, ('Catalog_Structure.catalog_level_name', 'Product'))])
--------------------
Picklist: Which catalog contents have a product stock number that starts from "2"? Show the catalog entry names., Catalog_Structure, catalog_level_name, [Product]
--------------------
text:  Which catalog contents have a product stock number that starts from "2"? Show the catalog entry names.
sql:  SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE "2%"
ground truth values:  []
matched values OrderedDict([(50, ('Catalog_Structure.catalog_level_name', 'Product'))])
--------------------
Picklist: Show the id and salary of Mark Young., employee, name, [Mark Young]
Picklist: What is the id and salary of the employee named Mark Young?, employee, name, [Mark Young]
Picklist: Show all flight number from Los Angeles., flight, origin, [Los Angeles]
Picklist: Show all flight number from Los Angeles., flight, destination, [Los Angeles]
--------------------
text:  Show all flight number from Los Angeles.
sql:  SELECT flno FROM Flight WHERE origin  =  "Los Angeles"
ground truth values:  [('flight.origin', 'Los Angeles')]
matched values OrderedDict([(9, ('flight.origin', 'Los Angeles')), (14, ('flight.destination', 'Los Angeles'))])
--------------------
Picklist: What are the numbers of all flights coming from Los Angeles?, flight, origin, [Los Angeles]
Picklist: What are the numbers of all flights coming from Los Angeles?, flight, destination, [Los Angeles]
--------------------
text:  What are the numbers of all flights coming from Los Angeles?
sql:  SELECT flno FROM Flight WHERE origin  =  "Los Angeles"
ground truth values:  [('flight.origin', 'Los Angeles')]
matched values OrderedDict([(9, ('flight.origin', 'Los Angeles')), (14, ('flight.destination', 'Los Angeles'))])
--------------------
Picklist: Show origins of all flights with destination Honolulu., flight, destination, [Honolulu]
Picklist: What are the origins of all flights that are headed to Honolulu?, flight, destination, [Honolulu]
Picklist: Show me the departure date and arrival date for all flights from Los Angeles to Honolulu., flight, origin, [Los Angeles]
Picklist: Show me the departure date and arrival date for all flights from Los Angeles to Honolulu., flight, destination, [Los Angeles]
Picklist: Show me the departure date and arrival date for all flights from Los Angeles to Honolulu., flight, destination, [Honolulu]
--------------------
text:  Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.
sql:  SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  "Los Angeles" AND destination  =  "Honolulu"
ground truth values:  [('flight.origin', 'Los Angeles'), ('flight.destination', 'Honolulu')]
matched values OrderedDict([(9, ('flight.origin', 'Los Angeles')), (14, ('flight.destination', 'Los Angeles')), (17, ('flight.destination', 'Honolulu'))])
--------------------
Picklist: What are the departure and arrival dates of all flights from LA to Honolulu?, flight, destination, [Honolulu]
--------------------
text:  What are the departure and arrival dates of all flights from LA to Honolulu?
sql:  SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  "Los Angeles" AND destination  =  "Honolulu"
ground truth values:  [('flight.origin', 'Los Angeles'), ('flight.destination', 'Honolulu')]
matched values OrderedDict([(11, ('flight.destination', 'Honolulu'))])
--------------------
Picklist: What is the average price for flights from Los Angeles to Honolulu., flight, origin, [Los Angeles]
Picklist: What is the average price for flights from Los Angeles to Honolulu., flight, destination, [Los Angeles]
Picklist: What is the average price for flights from Los Angeles to Honolulu., flight, destination, [Honolulu]
--------------------
text:  What is the average price for flights from Los Angeles to Honolulu.
sql:  SELECT avg(price) FROM Flight WHERE origin  =  "Los Angeles" AND destination  =  "Honolulu"
ground truth values:  [('flight.origin', 'Los Angeles'), ('flight.destination', 'Honolulu')]
matched values OrderedDict([(9, ('flight.origin', 'Los Angeles')), (14, ('flight.destination', 'Los Angeles')), (17, ('flight.destination', 'Honolulu'))])
--------------------
  4%|▍         | 397/8943 [00:36<01:51, 76.45it/s]  5%|▍         | 406/8943 [00:36<01:47, 79.58it/s]  5%|▍         | 415/8943 [00:37<08:09, 17.42it/s]  5%|▍         | 424/8943 [00:37<06:15, 22.70it/s]  5%|▍         | 431/8943 [00:37<05:37, 25.20it/s]  5%|▍         | 437/8943 [00:38<04:47, 29.62it/s]  5%|▍         | 446/8943 [00:38<03:50, 36.94it/s]  5%|▌         | 456/8943 [00:38<03:06, 45.49it/s]  5%|▌         | 470/8943 [00:38<02:29, 56.72it/s]  5%|▌         | 480/8943 [00:38<02:10, 64.65it/s]  5%|▌         | 490/8943 [00:38<02:00, 70.18it/s]  6%|▌         | 502/8943 [00:38<01:47, 78.62it/s]Picklist: What is the average price for flights from LA to Honolulu?, flight, destination, [Honolulu]
--------------------
text:  What is the average price for flights from LA to Honolulu?
sql:  SELECT avg(price) FROM Flight WHERE origin  =  "Los Angeles" AND destination  =  "Honolulu"
ground truth values:  [('flight.origin', 'Los Angeles'), ('flight.destination', 'Honolulu')]
matched values OrderedDict([(11, ('flight.destination', 'Honolulu'))])
--------------------
Picklist: What is the average distance and average price for flights from Los Angeles., flight, origin, [Los Angeles]
Picklist: What is the average distance and average price for flights from Los Angeles., flight, destination, [Los Angeles]
--------------------
text:  What is the average distance and average price for flights from Los Angeles.
sql:  SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  "Los Angeles"
ground truth values:  [('flight.origin', 'Los Angeles')]
matched values OrderedDict([(9, ('flight.origin', 'Los Angeles')), (14, ('flight.destination', 'Los Angeles'))])
--------------------
--------------------
text:  What is the average distance and price for all flights from LA?
sql:  SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  "Los Angeles"
ground truth values:  [('flight.origin', 'Los Angeles')]
matched values OrderedDict()
--------------------
Picklist: Show all flight numbers with aircraft Airbus A340-300., aircraft, name, [Airbus A340-300]
Picklist: What are the flight numbers for the aircraft Airbus A340-300?, aircraft, name, [Airbus A340-300]
Picklist: Show names for all aircrafts of which John Williams has certificates., employee, name, [John Williams]
Picklist: What are the names of all aircrafts that John Williams have certificates to be able to fly?, employee, name, [John Williams]
Picklist: Show names for all employees who have certificate of Boeing 737-800., aircraft, name, [Boeing 737-800]
Picklist: What are the names of all employees who have a certificate to fly Boeing 737-800?, aircraft, name, [Boeing 737-800]
Picklist: Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300., aircraft, name, [Airbus A340-300]
Picklist: Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300., aircraft, name, [Boeing 737-800]
Picklist: What are the names of all employees who can fly both the Boeing 737-800 and the Airbus A340-300?, aircraft, name, [Airbus A340-300]
Picklist: What are the names of all employees who can fly both the Boeing 737-800 and the Airbus A340-300?, aircraft, name, [Boeing 737-800]
Picklist: Show names for all employees who do not have certificate of Boeing 737-800., aircraft, name, [Boeing 737-800]
--------------------
text:  What are the names of all employees who are not certified to fly Boeing 737-800s?
sql:  SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  "Boeing 737-800"
ground truth values:  [('aircraft.name', 'Boeing 737-800')]
matched values OrderedDict()
--------------------
Picklist: Show all allergies with type food., Allergy_Type, AllergyType, [food]
Picklist: What are all the different food allergies?, Allergy_Type, AllergyType, [food]
Picklist: What is the type of allergy Cat?, Allergy_Type, Allergy, [Cat]
Picklist: What is the type of allergy Cat?, Has_Allergy, Allergy, [Cat]
--------------------
text:  What is the type of allergy Cat?
sql:  SELECT allergytype FROM Allergy_type WHERE allergy  =  "Cat"
ground truth values:  [('Allergy_Type.Allergy', 'Cat')]
matched values OrderedDict([(10, ('Allergy_Type.Allergy', 'Cat')), (26, ('Has_Allergy.Allergy', 'Cat'))])
--------------------
Picklist: What is allergy type of a cat allergy?, Allergy_Type, Allergy, [Cat]
Picklist: What is allergy type of a cat allergy?, Has_Allergy, Allergy, [Cat]
--------------------
text:  What is allergy type of a cat allergy?
sql:  SELECT allergytype FROM Allergy_type WHERE allergy  =  "Cat"
ground truth values:  [('Allergy_Type.Allergy', 'Cat')]
matched values OrderedDict([(10, ('Allergy_Type.Allergy', 'Cat')), (26, ('Has_Allergy.Allergy', 'Cat'))])
--------------------
Picklist: How many allergies have type animal?, Allergy_Type, AllergyType, [animal]
Picklist: How many animal type allergies exist?, Allergy_Type, AllergyType, [animal]
--------------------
text:  Show first name, last name, age for all female students. Their sex is F.
sql:  SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'
ground truth values:  [('Student.Sex', 'F')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the full names and ages for all female students whose sex is F?
sql:  SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'
ground truth values:  [('Student.Sex', 'F')]
matched values OrderedDict()
--------------------
--------------------
text:  Show student ids for all male students.
sql:  SELECT StuID FROM Student WHERE Sex  =  'M'
ground truth values:  [('Student.Sex', 'M')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the student ids for all male students?
sql:  SELECT StuID FROM Student WHERE Sex  =  'M'
ground truth values:  [('Student.Sex', 'M')]
matched values OrderedDict()
--------------------
Picklist: Which city does the student whose last name is "Kim" live in?, Student, LName, [Kim]
Picklist: Give the city that the student whose family name is Kim lives in., Student, LName, [Kim]
Picklist: How many students live in HKG or CHI?, Student, city_code, [CHI]
Picklist: How many students live in HKG or CHI?, Student, city_code, [HKG]
Picklist: Give the number of students living in either HKG or CHI., Student, city_code, [CHI]
Picklist: Give the number of students living in either HKG or CHI., Student, city_code, [HKG]
Picklist: How many students have cat allergies?, Allergy_Type, Allergy, [Cat]
Picklist: How many students have cat allergies?, Has_Allergy, Allergy, [Cat]
--------------------
text:  How many students have cat allergies?
sql:  SELECT count(*) FROM Has_allergy WHERE Allergy  =  "Cat"
ground truth values:  [('Has_Allergy.Allergy', 'Cat')]
matched values OrderedDict([(10, ('Allergy_Type.Allergy', 'Cat')), (26, ('Has_Allergy.Allergy', 'Cat'))])
--------------------
Picklist: How many students are affected by cat allergies?, Allergy_Type, Allergy, [Cat]
Picklist: How many students are affected by cat allergies?, Has_Allergy, Allergy, [Cat]
--------------------
text:  How many students are affected by cat allergies?
sql:  SELECT count(*) FROM Has_allergy WHERE Allergy  =  "Cat"
ground truth values:  [('Has_Allergy.Allergy', 'Cat')]
matched values OrderedDict([(10, ('Allergy_Type.Allergy', 'Cat')), (26, ('Has_Allergy.Allergy', 'Cat'))])
--------------------
Picklist: How many female students have milk or egg allergies?, Allergy_Type, Allergy, [Milk]
Picklist: How many female students have milk or egg allergies?, Has_Allergy, Allergy, [Milk]
Picklist: How many female students have milk or egg allergies?, Has_Allergy, Allergy, [Eggs]
--------------------
text:  How many female students have milk or egg allergies?
sql:  SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  "F" AND T1.allergy  =  "Milk" OR T1.allergy  =  "Eggs"
ground truth values:  [('Student.Sex', 'F'), ('Has_Allergy.Allergy', 'Milk'), ('Has_Allergy.Allergy', 'Eggs')]
matched values OrderedDict([(10, ('Allergy_Type.Allergy', 'Milk')), (26, ('Has_Allergy.Allergy', 'Milk')), (28, ('Has_Allergy.Allergy', 'Eggs'))])
--------------------
Picklist: How many students who are female are allergic to milk or eggs?, Allergy_Type, Allergy, [Milk]
Picklist: How many students who are female are allergic to milk or eggs?, Allergy_Type, Allergy, [Eggs]
Picklist: How many students who are female are allergic to milk or eggs?, Has_Allergy, Allergy, [Milk]
Picklist: How many students who are female are allergic to milk or eggs?, Has_Allergy, Allergy, [Eggs]
--------------------
text:    6%|▌         | 512/8943 [00:38<01:51, 75.82it/s]  6%|▌         | 521/8943 [00:38<01:56, 72.30it/s]  6%|▌         | 530/8943 [00:39<02:34, 54.42it/s]How many students who are female are allergic to milk or eggs?
sql:  SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  "F" AND T1.allergy  =  "Milk" OR T1.allergy  =  "Eggs"
ground truth values:  [('Student.Sex', 'F'), ('Has_Allergy.Allergy', 'Milk'), ('Has_Allergy.Allergy', 'Eggs')]
matched values OrderedDict([(10, ('Allergy_Type.Allergy', 'Milk')), (12, ('Allergy_Type.Allergy', 'Eggs')), (28, ('Has_Allergy.Allergy', 'Milk')), (30, ('Has_Allergy.Allergy', 'Eggs'))])
--------------------
Picklist: How many students have a food allergy?, Allergy_Type, AllergyType, [food]
Picklist: How many students are affected by food related allergies?, Allergy_Type, AllergyType, [food]
Picklist: Find the last name and age of the student who has allergy to both milk and cat., Allergy_Type, Allergy, [Milk]
Picklist: Find the last name and age of the student who has allergy to both milk and cat., Allergy_Type, Allergy, [Cat]
Picklist: Find the last name and age of the student who has allergy to both milk and cat., Has_Allergy, Allergy, [Milk]
Picklist: Find the last name and age of the student who has allergy to both milk and cat., Has_Allergy, Allergy, [Cat]
--------------------
text:  Find the last name and age of the student who has allergy to both milk and cat.
sql:  SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  "Milk" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  "Cat")
ground truth values:  [('Has_Allergy.Allergy', 'Milk'), ('Has_Allergy.Allergy', 'Cat')]
matched values OrderedDict([(10, ('Allergy_Type.Allergy', 'Milk')), (12, ('Allergy_Type.Allergy', 'Cat')), (28, ('Has_Allergy.Allergy', 'Milk')), (30, ('Has_Allergy.Allergy', 'Cat'))])
--------------------
Picklist: What are the last names and ages of the students who are allergic to milk and cat?, Allergy_Type, Allergy, [Milk]
Picklist: What are the last names and ages of the students who are allergic to milk and cat?, Allergy_Type, Allergy, [Cat]
Picklist: What are the last names and ages of the students who are allergic to milk and cat?, Has_Allergy, Allergy, [Milk]
Picklist: What are the last names and ages of the students who are allergic to milk and cat?, Has_Allergy, Allergy, [Cat]
--------------------
text:  What are the last names and ages of the students who are allergic to milk and cat?
sql:  SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  "Milk" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  "Cat")
ground truth values:  [('Has_Allergy.Allergy', 'Milk'), ('Has_Allergy.Allergy', 'Cat')]
matched values OrderedDict([(10, ('Allergy_Type.Allergy', 'Milk')), (12, ('Allergy_Type.Allergy', 'Cat')), (28, ('Has_Allergy.Allergy', 'Milk')), (30, ('Has_Allergy.Allergy', 'Cat'))])
--------------------
Picklist: What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies., Student, Fname, [Lisa]
Picklist: What are the allergies the girl named Lisa has? And what are the types of them? Order the result by allergy names., Student, Fname, [Lisa]
Picklist: Find the first name and gender of the student who has allergy to milk but not cat., Allergy_Type, Allergy, [Milk]
Picklist: Find the first name and gender of the student who has allergy to milk but not cat., Allergy_Type, Allergy, [Cat]
Picklist: Find the first name and gender of the student who has allergy to milk but not cat., Has_Allergy, Allergy, [Milk]
Picklist: Find the first name and gender of the student who has allergy to milk but not cat., Has_Allergy, Allergy, [Cat]
--------------------
text:  Find the first name and gender of the student who has allergy to milk but not cat.
sql:  SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  "Milk" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  "Cat")
ground truth values:  [('Has_Allergy.Allergy', 'Milk'), ('Has_Allergy.Allergy', 'Cat')]
matched values OrderedDict([(10, ('Allergy_Type.Allergy', 'Milk')), (12, ('Allergy_Type.Allergy', 'Cat')), (28, ('Has_Allergy.Allergy', 'Milk')), (30, ('Has_Allergy.Allergy', 'Cat'))])
--------------------
Picklist: What are the first name and gender of the students who have allergy to milk but can put up with cats?, Allergy_Type, Allergy, [Milk]
Picklist: What are the first name and gender of the students who have allergy to milk but can put up with cats?, Has_Allergy, Allergy, [Milk]
Picklist: What are the first name and gender of the students who have allergy to milk but can put up with cats?, Has_Allergy, Allergy, [Cat]
--------------------
text:  What are the first name and gender of the students who have allergy to milk but can put up with cats?
sql:  SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  "Milk" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  "Cat")
ground truth values:  [('Has_Allergy.Allergy', 'Milk'), ('Has_Allergy.Allergy', 'Cat')]
matched values OrderedDict([(10, ('Allergy_Type.Allergy', 'Milk')), (26, ('Has_Allergy.Allergy', 'Milk')), (28, ('Has_Allergy.Allergy', 'Cat'))])
--------------------
Picklist: Find the average age of the students who have allergies with food and animal types., Allergy_Type, AllergyType, [animal]
Picklist: Find the average age of the students who have allergies with food and animal types., Allergy_Type, AllergyType, [food]
Picklist: How old are the students with allergies to food and animal types on average?, Allergy_Type, AllergyType, [animal]
Picklist: How old are the students with allergies to food and animal types on average?, Allergy_Type, AllergyType, [food]
Picklist: List the first and last name of the students who do not have any food type allergy., Allergy_Type, AllergyType, [food]
Picklist: What is the full name of each student who is not allergic to any type of food., Allergy_Type, AllergyType, [food]
Picklist: Find the number of male (sex is 'M') students who have some food type allery., Allergy_Type, AllergyType, [food]
--------------------
text:  Find the number of male (sex is 'M') students who have some food type allery.
sql:  SELECT count(*) FROM Student WHERE sex  =  "M" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  "food")
ground truth values:  [('Student.Sex', 'M'), ('Allergy_Type.AllergyType', 'food')]
matched values OrderedDict([(14, ('Allergy_Type.AllergyType', 'food'))])
--------------------
Picklist: How many male students (sex is 'M') are allergic to any type of food?, Allergy_Type, AllergyType, [food]
--------------------
text:  How many male students (sex is 'M') are allergic to any type of food?
sql:  SELECT count(*) FROM Student WHERE sex  =  "M" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  "food")
ground truth values:  [('Student.Sex', 'M'), ('Allergy_Type.AllergyType', 'food')]
matched values OrderedDict([(14, ('Allergy_Type.AllergyType', 'food'))])
--------------------
Picklist: Find the different first names and cities of the students who have allergy to milk or cat., Allergy_Type, Allergy, [Milk]
Picklist: Find the different first names and cities of the students who have allergy to milk or cat., Allergy_Type, Allergy, [Cat]
Picklist: Find the different first names and cities of the students who have allergy to milk or cat., Has_Allergy, Allergy, [Milk]
Picklist: Find the different first names and cities of the students who have allergy to milk or cat., Has_Allergy, Allergy, [Cat]
--------------------
text:  Find the different first names and cities of the students who have allergy to milk or cat.
sql:  SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  "Milk" OR T2.Allergy  =  "Cat"
ground truth values:  [('Has_Allergy.Allergy', 'Milk'), ('Has_Allergy.Allergy', 'Cat')]
matched values   6%|▌         | 537/8943 [00:39<02:52, 48.64it/s]  6%|▌         | 543/8943 [00:40<13:02, 10.73it/s]  6%|▌         | 548/8943 [00:44<36:13,  3.86it/s]  6%|▌         | 552/8943 [00:45<34:20,  4.07it/s]  6%|▌         | 555/8943 [00:45<31:05,  4.50it/s]  6%|▌         | 557/8943 [00:45<30:23,  4.60it/s]  6%|▋         | 559/8943 [00:46<30:52,  4.53it/s]  6%|▋         | 561/8943 [00:46<29:55,  4.67it/s]  6%|▋         | 562/8943 [00:46<27:42,  5.04it/s]  6%|▋         | 563/8943 [00:47<26:10,  5.33it/s]  6%|▋         | 564/8943 [00:47<26:04,  5.36it/s]  6%|▋         | 565/8943 [00:47<25:02,  5.57it/s]  6%|▋         | 566/8943 [00:47<25:00,  5.58it/s]  6%|▋         | 567/8943 [00:47<24:16,  5.75it/s]  6%|▋         | 568/8943 [00:48<25:31,  5.47it/s]OrderedDict([(10, ('Allergy_Type.Allergy', 'Milk')), (12, ('Allergy_Type.Allergy', 'Cat')), (28, ('Has_Allergy.Allergy', 'Milk')), (30, ('Has_Allergy.Allergy', 'Cat'))])
--------------------
Picklist: What are the distinct first names and cities of the students who have allergy either to milk or to cat?, Allergy_Type, Allergy, [Milk]
Picklist: What are the distinct first names and cities of the students who have allergy either to milk or to cat?, Allergy_Type, Allergy, [Cat]
Picklist: What are the distinct first names and cities of the students who have allergy either to milk or to cat?, Has_Allergy, Allergy, [Milk]
Picklist: What are the distinct first names and cities of the students who have allergy either to milk or to cat?, Has_Allergy, Allergy, [Cat]
--------------------
text:  What are the distinct first names and cities of the students who have allergy either to milk or to cat?
sql:  SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  "Milk" OR T2.Allergy  =  "Cat"
ground truth values:  [('Has_Allergy.Allergy', 'Milk'), ('Has_Allergy.Allergy', 'Cat')]
matched values OrderedDict([(10, ('Allergy_Type.Allergy', 'Milk')), (12, ('Allergy_Type.Allergy', 'Cat')), (28, ('Has_Allergy.Allergy', 'Milk')), (30, ('Has_Allergy.Allergy', 'Cat'))])
--------------------
Picklist: Find the number of students who are older than 18 and do not have allergy to either food or animal., Allergy_Type, AllergyType, [animal]
Picklist: Find the number of students who are older than 18 and do not have allergy to either food or animal., Allergy_Type, AllergyType, [food]
Picklist: How many students are over 18 and do not have allergy to food type or animal type?, Allergy_Type, AllergyType, [animal]
Picklist: How many students are over 18 and do not have allergy to food type or animal type?, Allergy_Type, AllergyType, [food]
Picklist: Find the first name and major of the students who are not allegry to soy., Allergy_Type, Allergy, [Soy]
Picklist: Find the first name and major of the students who are not allegry to soy., Has_Allergy, Allergy, [Soy]
--------------------
text:  Find the first name and major of the students who are not allegry to soy.
sql:  SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  "Soy")
ground truth values:  [('Has_Allergy.Allergy', 'Soy')]
matched values OrderedDict([(10, ('Allergy_Type.Allergy', 'Soy')), (26, ('Has_Allergy.Allergy', 'Soy'))])
--------------------
Picklist: What are the first name and major of the students who are able to consume soy?, Allergy_Type, Allergy, [Soy]
Picklist: What are the first name and major of the students who are able to consume soy?, Has_Allergy, Allergy, [Soy]
--------------------
text:  What are the first name and major of the students who are able to consume soy?
sql:  SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  "Soy")
ground truth values:  [('Has_Allergy.Allergy', 'Soy')]
matched values OrderedDict([(10, ('Allergy_Type.Allergy', 'Soy')), (26, ('Has_Allergy.Allergy', 'Soy'))])
--------------------
Picklist: List total amount of  invoice from Chicago, IL., customers, city, [Chicago]
Picklist: List total amount of  invoice from Chicago, IL., customers, state, [IL]
Picklist: List total amount of  invoice from Chicago, IL., invoices, billing_city, [Chicago]
Picklist: List total amount of  invoice from Chicago, IL., invoices, billing_state, [IL]
--------------------
text:  List total amount of  invoice from Chicago, IL.
sql:  SELECT sum(total) FROM invoices WHERE billing_city  =  "Chicago" AND billing_state  =  "IL"
ground truth values:  [('invoices.billing_city', 'Chicago'), ('invoices.billing_state', 'IL')]
matched values OrderedDict([(81, ('customers.city', 'Chicago')), (85, ('customers.state', 'IL')), (129, ('invoices.billing_city', 'Chicago')), (134, ('invoices.billing_state', 'IL'))])
--------------------
Picklist: What are the total amount of money in the invoices billed from Chicago, Illinois?, customers, city, [Chicago]
Picklist: What are the total amount of money in the invoices billed from Chicago, Illinois?, invoices, billing_city, [Chicago]
Picklist: What are the total amount of money in the invoices billed from Chicago, Illinois?, tracks, name, [Money]
--------------------
text:  What are the total amount of money in the invoices billed from Chicago, Illinois?
sql:  SELECT sum(total) FROM invoices WHERE billing_city  =  "Chicago" AND billing_state  =  "IL"
ground truth values:  [('invoices.billing_city', 'Chicago'), ('invoices.billing_state', 'IL')]
matched values OrderedDict([(81, ('customers.city', 'Chicago')), (127, ('invoices.billing_city', 'Chicago')), (154, ('tracks.name', 'Money'))])
--------------------
Picklist: List the number of invoices from Chicago, IL., customers, city, [Chicago]
Picklist: List the number of invoices from Chicago, IL., customers, state, [IL]
Picklist: List the number of invoices from Chicago, IL., invoices, billing_city, [Chicago]
Picklist: List the number of invoices from Chicago, IL., invoices, billing_state, [IL]
--------------------
text:  List the number of invoices from Chicago, IL.
sql:  SELECT COUNT(*) FROM invoices WHERE billing_city  =  "Chicago" AND billing_state  =  "IL"
ground truth values:  [('invoices.billing_city', 'Chicago'), ('invoices.billing_state', 'IL')]
matched values OrderedDict([(81, ('customers.city', 'Chicago')), (85, ('customers.state', 'IL')), (129, ('invoices.billing_city', 'Chicago')), (134, ('invoices.billing_state', 'IL'))])
--------------------
Picklist: How many invoices were billed from Chicago, IL?, customers, city, [Chicago]
Picklist: How many invoices were billed from Chicago, IL?, invoices, billing_city, [Chicago]
--------------------
text:  How many invoices were billed from Chicago, IL?
sql:  SELECT COUNT(*) FROM invoices WHERE billing_city  =  "Chicago" AND billing_state  =  "IL"
ground truth values:  [('invoices.billing_city', 'Chicago'), ('invoices.billing_state', 'IL')]
matched values OrderedDict([(81, ('customers.city', 'Chicago')), (127, ('invoices.billing_city', 'Chicago'))])
--------------------
--------------------
text:  List the number of invoices from the US, grouped by state.
sql:  SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  "USA" GROUP BY billing_state
ground truth values:  [('invoices.billing_country', 'USA')]
matched values OrderedDict()
--------------------
--------------------
text:  How many invoices were billed from each state?
sql:  SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  "USA" GROUP BY billing_state
ground truth values:  [('invoices.billing_country', 'USA')]
matched values OrderedDict()
--------------------
--------------------
text:  List the state in the US with the most invoices.
sql:  SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  "USA" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1
ground truth values:  [('invoices.billing_country', 'USA')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the states with the most invoices?
sql:  SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  "USA" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1
ground truth values:  [('invoices.billing_country', 'USA')]
matched values OrderedDict()
--------------------
--------------------
text:  List the number of invoices and the invoice total from California.
sql:  SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  "CA"
ground truth values:  [('invoices.billing_state', 'CA')]
matched values OrderedDict()
--------------------
Picklist: What is the number of invoices and total money billed in them from CA?, customers, state, [CA]
Picklist: What is the number of invoices and total money billed in them from CA?, invoices, billing_state, [CA]
Picklist: What is the number of invoices and total money billed in them from CA?, tracks, name, [Money]
--------------------
text:  What is the number of invoices and total money billed in them from CA?
sql:   6%|▋         | 569/8943 [00:48<26:41,  5.23it/s]  6%|▋         | 570/8943 [00:48<23:39,  5.90it/s]  6%|▋         | 571/8943 [00:48<23:52,  5.84it/s]  6%|▋         | 572/8943 [00:48<22:56,  6.08it/s]  6%|▋         | 573/8943 [00:48<22:27,  6.21it/s]  6%|▋         | 574/8943 [00:48<22:30,  6.20it/s]  6%|▋         | 575/8943 [00:49<23:25,  5.95it/s]  6%|▋         | 576/8943 [00:49<23:20,  5.97it/s]  6%|▋         | 577/8943 [00:49<24:54,  5.60it/s]  6%|▋         | 578/8943 [00:49<23:31,  5.93it/s]  6%|▋         | 579/8943 [00:49<23:14,  6.00it/s]  6%|▋         | 580/8943 [00:49<22:03,  6.32it/s]  6%|▋         | 581/8943 [00:50<21:25,  6.51it/s]  7%|▋         | 582/8943 [00:50<21:15,  6.56it/s]  7%|▋         | 583/8943 [00:50<21:07,  6.60it/s]  7%|▋         | 584/8943 [00:50<24:04,  5.79it/s]  7%|▋         | 585/8943 [00:50<27:37,  5.04it/s]  7%|▋         | 586/8943 [00:51<26:14,  5.31it/s]  7%|▋         | 587/8943 [00:51<26:19,  5.29it/s]  7%|▋         | 588/8943 [00:51<26:28,  5.26it/s]  7%|▋         | 589/8943 [00:51<28:42,  4.85it/s]  7%|▋         | 590/8943 [00:51<28:24,  4.90it/s]  7%|▋         | 591/8943 [00:52<29:46,  4.67it/s]  7%|▋         | 592/8943 [00:52<27:44,  5.02it/s]  7%|▋         | 593/8943 [00:52<24:59,  5.57it/s]  7%|▋         | 594/8943 [00:52<26:34,  5.24it/s]  7%|▋         | 595/8943 [00:52<27:13,  5.11it/s]  7%|▋         | 596/8943 [00:53<25:19,  5.49it/s] SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  "CA"
ground truth values:  [('invoices.billing_state', 'CA')]
matched values OrderedDict([(83, ('customers.state', 'CA')), (130, ('invoices.billing_state', 'CA')), (154, ('tracks.name', 'Money'))])
--------------------
Picklist: List Aerosmith's albums., artists, name, [Aerosmith]
Picklist: What are the titles of all the Aerosmith albums?, artists, name, [Aerosmith]
Picklist: How many albums does Billy Cobham has?, artists, name, [Billy Cobham]
Picklist: How many albums does Billy Cobham has?, tracks, composer, [Billy Cobham]
--------------------
text:  How many albums does Billy Cobham has?
sql:  SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = "Billy Cobham"
ground truth values:  [('artists.name', 'Billy Cobham')]
matched values OrderedDict([(11, ('artists.name', 'Billy Cobham')), (166, ('tracks.composer', 'Billy Cobham'))])
--------------------
Picklist: How many albums has Billy Cobam released?, artists, name, [Billy Cobham]
Picklist: How many albums has Billy Cobam released?, tracks, composer, [Billy Cobham]
--------------------
text:  How many albums has Billy Cobam released?
sql:  SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = "Billy Cobham"
ground truth values:  [('artists.name', 'Billy Cobham')]
matched values OrderedDict([(11, ('artists.name', 'Billy Cobham')), (166, ('tracks.composer', 'Billy Cobham'))])
--------------------
Picklist: Eduardo Martins is a customer at which company?, customers, first_name, [Eduardo]
Picklist: Eduardo Martins is a customer at which company?, customers, last_name, [Martins]
Picklist: What is the company where Eduardo Martins is a customer?, customers, first_name, [Eduardo]
Picklist: What is the company where Eduardo Martins is a customer?, customers, last_name, [Martins]
Picklist: What is Astrid Gruber's email and phone number?, customers, first_name, [Astrid]
Picklist: What is Astrid Gruber's email and phone number?, customers, last_name, [Gruber]
Picklist: What is the email and phone number of Astrid Gruber the customer?, customers, first_name, [Astrid]
Picklist: What is the email and phone number of Astrid Gruber the customer?, customers, last_name, [Gruber]
Picklist: How many customers live in Prague city?, customers, city, [Prague]
Picklist: How many customers live in Prague city?, invoices, billing_city, [Prague]
--------------------
text:  How many customers live in Prague city?
sql:  SELECT count(*) FROM customers WHERE city = "Prague"
ground truth values:  [('customers.city', 'Prague')]
matched values OrderedDict([(81, ('customers.city', 'Prague')), (127, ('invoices.billing_city', 'Prague'))])
--------------------
Picklist: How many customers live in the city of Prague?, customers, city, [Prague]
Picklist: How many customers live in the city of Prague?, invoices, billing_city, [Prague]
--------------------
text:  How many customers live in the city of Prague?
sql:  SELECT count(*) FROM customers WHERE city = "Prague"
ground truth values:  [('customers.city', 'Prague')]
matched values OrderedDict([(81, ('customers.city', 'Prague')), (127, ('invoices.billing_city', 'Prague'))])
--------------------
Picklist: How many customers in state of CA?, customers, state, [CA]
Picklist: How many customers in state of CA?, invoices, billing_state, [CA]
--------------------
text:  How many customers in state of CA?
sql:  SELECT count(*) FROM customers WHERE state = "CA"
ground truth values:  [('customers.state', 'CA')]
matched values OrderedDict([(83, ('customers.state', 'CA')), (130, ('invoices.billing_state', 'CA'))])
--------------------
--------------------
text:  How many customers are from California?
sql:  SELECT count(*) FROM customers WHERE state = "CA"
ground truth values:  [('customers.state', 'CA')]
matched values OrderedDict()
--------------------
Picklist: What country does Roberto Almeida live?, customers, first_name, [Roberto]
Picklist: What country does Roberto Almeida live?, customers, last_name, [Almeida]
Picklist: In which country does Roberto Almeida?, customers, first_name, [Roberto]
Picklist: In which country does Roberto Almeida?, customers, last_name, [Almeida]
Picklist: How many customers does Steve Johnson support?, employees, last_name, [Johnson]
Picklist: How many customers does Steve Johnson support?, employees, first_name, [Steve]
Picklist: How many customers does Steve Johnson support?, customers, first_name, [Steve]
--------------------
text:  How many customers does Steve Johnson support?
sql:  SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = "Steve" AND T1.last_name = "Johnson"
ground truth values:  [('employees.first_name', 'Steve'), ('employees.last_name', 'Johnson')]
matched values OrderedDict([(33, ('employees.last_name', 'Johnson')), (38, ('employees.first_name', 'Steve')), (76, ('customers.first_name', 'Steve'))])
--------------------
Picklist: What is the count of customers that Steve Johnson supports?, employees, last_name, [Johnson]
Picklist: What is the count of customers that Steve Johnson supports?, employees, first_name, [Steve]
Picklist: What is the count of customers that Steve Johnson supports?, customers, first_name, [Steve]
--------------------
text:  What is the count of customers that Steve Johnson supports?
sql:  SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = "Steve" AND T1.last_name = "Johnson"
ground truth values:  [('employees.first_name', 'Steve'), ('employees.last_name', 'Johnson')]
matched values OrderedDict([(33, ('employees.last_name', 'Johnson')), (38, ('employees.first_name', 'Steve')), (76, ('customers.first_name', 'Steve'))])
--------------------
Picklist: What is the title, phone and hire date of Nancy Edwards?, employees, last_name, [Edwards]
Picklist: What is the title, phone and hire date of Nancy Edwards?, employees, first_name, [Nancy]
Picklist: What is the title, phone number and hire date for the employee named Nancy Edwards?, employees, last_name, [Edwards]
Picklist: What is the title, phone number and hire date for the employee named Nancy Edwards?, employees, first_name, [Nancy]
Picklist: find the full name of employees who report to Nancy Edwards?, employees, last_name, [Edwards]
Picklist: find the full name of employees who report to Nancy Edwards?, employees, first_name, [Nancy]
Picklist: What is the first and last name of the employee who reports to Nancy Edwards?, employees, last_name, [Edwards]
Picklist: What is the first and last name of the employee who reports to Nancy Edwards?, employees, first_name, [Nancy]
Picklist: What is the address of employee Nancy Edwards?, employees, last_name, [Edwards]
Picklist: What is the address of employee Nancy Edwards?, employees, first_name, [Nancy]
Picklist: What is Nancy Edwards's address?, employees, last_name, [Edwards]
Picklist: What is Nancy Edwards's address?, employees, first_name, [Nancy]
Picklist: How many employees are living in Canada?, employees, country, [Canada]
Picklist: How many employees are living in Canada?, customers, country, [Canada]
Picklist: How many employees are living in Canada?, invoices, billing_country, [Canada]
--------------------
text:  How many employees are living in Canada?
sql:  SELECT count(*) FROM employees WHERE country = "Canada"
ground truth values:  [('employees.country', 'Canada')]
matched values OrderedDict([(55, ('employees.country', 'Canada')), (87, ('customers.country', 'Canada')), (135, ('invoices.billing_country', 'Canada'))])
--------------------
Picklist: How many employees live in Canada?, employees, country, [Canada]
Picklist: How many employees live in Canada?, customers, country, [Canada]
Picklist: How many employees live in Canada?, invoices, billing_country, [Canada]
--------------------
text:  How many employees live in Canada?
sql:  SELECT count(*) FROM employees WHERE country = "Canada"
ground truth values:  [('employees.country', 'Canada')]
matched values   7%|▋         | 597/8943 [00:53<23:29,  5.92it/s]  7%|▋         | 598/8943 [00:53<23:08,  6.01it/s]  7%|▋         | 599/8943 [00:53<23:06,  6.02it/s]  7%|▋         | 600/8943 [00:53<25:52,  5.37it/s]  7%|▋         | 601/8943 [00:53<25:28,  5.46it/s]  7%|▋         | 602/8943 [00:54<27:56,  4.97it/s]  7%|▋         | 603/8943 [00:54<28:43,  4.84it/s]  7%|▋         | 604/8943 [00:54<28:25,  4.89it/s]  7%|▋         | 605/8943 [00:54<27:24,  5.07it/s]  7%|▋         | 606/8943 [00:55<32:37,  4.26it/s]  7%|▋         | 607/8943 [00:55<33:50,  4.11it/s]  7%|▋         | 608/8943 [00:55<30:05,  4.62it/s]  7%|▋         | 609/8943 [00:55<28:51,  4.81it/s]  7%|▋         | 610/8943 [00:55<28:11,  4.93it/s]  7%|▋         | 611/8943 [00:55<26:04,  5.32it/s]  7%|▋         | 612/8943 [00:56<22:52,  6.07it/s]  7%|▋         | 613/8943 [00:56<22:18,  6.22it/s]  7%|▋         | 614/8943 [00:56<20:50,  6.66it/s]  7%|▋         | 615/8943 [00:56<21:13,  6.54it/s]  7%|▋         | 616/8943 [00:56<20:10,  6.88it/s]  7%|▋         | 617/8943 [00:56<20:09,  6.88it/s]  7%|▋         | 618/8943 [00:56<20:46,  6.68it/s]  7%|▋         | 619/8943 [00:57<22:20,  6.21it/s]  7%|▋         | 620/8943 [00:57<21:55,  6.33it/s]  7%|▋         | 621/8943 [00:57<22:01,  6.30it/s]  7%|▋         | 622/8943 [00:57<22:39,  6.12it/s]  7%|▋         | 623/8943 [00:57<23:15,  5.96it/s]  7%|▋         | 624/8943 [00:58<24:35,  5.64it/s]  7%|▋         | 625/8943 [00:58<25:54,  5.35it/s]  7%|▋         | 626/8943 [00:58<25:13,  5.50it/s]  7%|▋         | 627/8943 [00:58<26:33,  5.22it/s]  7%|▋         | 628/8943 [00:58<26:55,  5.15it/s]  7%|▋         | 629/8943 [00:59<27:18,  5.07it/s]  7%|▋         | 630/8943 [00:59<29:45,  4.66it/s]  7%|▋         | 631/8943 [00:59<30:35,  4.53it/s]  7%|▋         | 632/8943 [00:59<31:32,  4.39it/s]  7%|▋         | 633/8943 [01:00<33:19,  4.16it/s]  7%|▋         | 634/8943 [01:00<31:49,  4.35it/s]  7%|▋         | 635/8943 [01:00<31:27,  4.40it/s]  7%|▋         | 636/8943 [01:00<30:00,  4.61it/s]  7%|▋         | 637/8943 [01:00<30:03,  4.61it/s]  7%|▋         | 638/8943 [01:01<29:53,  4.63it/s]  7%|▋         | 639/8943 [01:01<29:39,  4.67it/s]OrderedDict([(55, ('employees.country', 'Canada')), (87, ('customers.country', 'Canada')), (135, ('invoices.billing_country', 'Canada'))])
--------------------
Picklist: What is employee Nancy Edwards's phone number?, employees, last_name, [Edwards]
Picklist: What is employee Nancy Edwards's phone number?, employees, first_name, [Nancy]
Picklist: What is the the phone number of Nancy Edwards?, employees, last_name, [Edwards]
Picklist: What is the the phone number of Nancy Edwards?, employees, first_name, [Nancy]
Picklist: Find the number of employees whose title is IT Staff from each city?, employees, title, [IT Staff]
Picklist: How many employees who are IT staff are from each city?, employees, title, [IT Staff]
Picklist: How many orders does Lucas Mancini has?, customers, first_name, [Lucas]
Picklist: How many orders does Lucas Mancini has?, customers, last_name, [Mancini]
Picklist: How many orders does Luca Mancini have in his invoices?, customers, last_name, [Mancini]
--------------------
text:  How many orders does Luca Mancini have in his invoices?
sql:  SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = "Lucas" AND T1.last_name = "Mancini"
ground truth values:  [('customers.first_name', 'Lucas'), ('customers.last_name', 'Mancini')]
matched values OrderedDict([(75, ('customers.last_name', 'Mancini'))])
--------------------
Picklist: What is the total amount of money spent by Lucas Mancini?, customers, first_name, [Lucas]
Picklist: What is the total amount of money spent by Lucas Mancini?, customers, last_name, [Mancini]
Picklist: What is the total amount of money spent by Lucas Mancini?, tracks, name, [Money]
--------------------
text:  What is the total amount of money spent by Lucas Mancini?
sql:  SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = "Lucas" AND T1.last_name = "Mancini"
ground truth values:  [('customers.first_name', 'Lucas'), ('customers.last_name', 'Mancini')]
matched values OrderedDict([(72, ('customers.first_name', 'Lucas')), (77, ('customers.last_name', 'Mancini')), (155, ('tracks.name', 'Money'))])
--------------------
Picklist: How much money did Lucas Mancini spend?, customers, first_name, [Lucas]
Picklist: How much money did Lucas Mancini spend?, customers, last_name, [Mancini]
Picklist: How much money did Lucas Mancini spend?, tracks, name, [Money]
--------------------
text:  How much money did Lucas Mancini spend?
sql:  SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = "Lucas" AND T1.last_name = "Mancini"
ground truth values:  [('customers.first_name', 'Lucas'), ('customers.last_name', 'Mancini')]
matched values OrderedDict([(72, ('customers.first_name', 'Lucas')), (77, ('customers.last_name', 'Mancini')), (155, ('tracks.name', 'Money'))])
--------------------
Picklist: Who is the composer of track Fast As a Shark?, tracks, name, [Fast As a Shark]
Picklist: What is the composer who created the track "Fast As a Shark"?, tracks, name, [Fast As a Shark]
Picklist: How long does track Fast As a Shark has?, tracks, name, [Fast As a Shark]
Picklist: How many milliseconds long is Fast As a Shark?, tracks, name, [Fast As a Shark]
Picklist: What is the name of tracks whose genre is Rock?, genres, name, [Rock]
Picklist: What is the name of all tracks in the Rock genre?, genres, name, [Rock]
Picklist: What is title of album which track Balls to the Wall belongs to?, albums, title, [Balls to the Wall]
Picklist: What is title of album which track Balls to the Wall belongs to?, tracks, name, [Balls to the Wall]
--------------------
text:  What is title of album which track Balls to the Wall belongs to?
sql:  SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = "Balls to the Wall"
ground truth values:  [('tracks.name', 'Balls to the Wall')]
matched values OrderedDict([(23, ('albums.title', 'Balls to the Wall')), (155, ('tracks.name', 'Balls to the Wall'))])
--------------------
--------------------
text:  What is the name of the album that has the track Ball to the Wall?
sql:  SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = "Balls to the Wall"
ground truth values:  [('tracks.name', 'Balls to the Wall')]
matched values OrderedDict()
--------------------
Picklist: List name of all tracks in Balls to the Wall., albums, title, [Balls to the Wall]
Picklist: List name of all tracks in Balls to the Wall., tracks, name, [Balls to the Wall]
--------------------
text:  List name of all tracks in Balls to the Wall.
sql:  SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = "Balls to the Wall"
ground truth values:  [('albums.title', 'Balls to the Wall')]
matched values OrderedDict([(23, ('albums.title', 'Balls to the Wall')), (155, ('tracks.name', 'Balls to the Wall'))])
--------------------
Picklist: What is the name of all tracks in the album named Balls to the Wall?, albums, title, [Balls to the Wall]
Picklist: What is the name of all tracks in the album named Balls to the Wall?, tracks, name, [Balls to the Wall]
--------------------
text:  What is the name of all tracks in the album named Balls to the Wall?
sql:  SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = "Balls to the Wall"
ground truth values:  [('albums.title', 'Balls to the Wall')]
matched values OrderedDict([(23, ('albums.title', 'Balls to the Wall')), (155, ('tracks.name', 'Balls to the Wall'))])
--------------------
Picklist: List the name of tracks belongs to genre Rock and whose media type is MPEG audio file., genres, name, [Rock]
Picklist: List the name of tracks belongs to genre Rock and whose media type is MPEG audio file., media_types, name, [MPEG audio file]
Picklist: What are the names of all Rock tracks that are stored on MPEG audio files?, genres, name, [Rock]
--------------------
text:  What are the names of all Rock tracks that are stored on MPEG audio files?
sql:  SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = "Rock" AND T3.name = "MPEG audio file"
ground truth values:  [('genres.name', 'Rock'), ('media_types.name', 'MPEG audio file')]
matched values OrderedDict([(105, ('genres.name', 'Rock'))])
--------------------
Picklist: List the name of tracks belongs to genre Rock or media type is MPEG audio file., genres, name, [Rock]
Picklist: List the name of tracks belongs to genre Rock or media type is MPEG audio file., media_types, name, [MPEG audio file]
Picklist: What are the names of all tracks that belong to the Rock genre and whose media type is MPEG?, genres, name, [Rock]
Picklist: What are the names of all tracks that belong to the Rock genre and whose media type is MPEG?, tracks, name, [Belong]
--------------------
text:  What are the names of all tracks that belong to the Rock genre and whose media type is MPEG?
sql:  SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = "Rock" OR T3.name = "MPEG audio file"
ground truth values:  [('genres.name', 'Rock'), ('media_types.name', 'MPEG audio file')]
matched values OrderedDict([(105, ('genres.name', 'Rock')), (152, ('tracks.name', 'Belong'))])
--------------------
Picklist: List the name of tracks belongs to genre Rock or genre Jazz., genres, name, [Rock]
Picklist: List the name of tracks belongs to genre Rock or genre Jazz., genres, name, [Jazz]
Picklist: What are the names of the tracks that are Rock or Jazz songs?, genres, name, [Rock]
Picklist: What are the names of the tracks that are Rock or Jazz songs?, genres, name, [Jazz]
Picklist: List the name of all tracks in the playlists of Movies., playlists, name, [Movies]
Picklist: What are the names of all tracks that are on playlists titled Movies?, playlists, name, [Movies]
Picklist: List all tracks bought by customer Daan Peeters., customers, first_name, [Daan]
  7%|▋         | 640/8943 [01:01<28:22,  4.88it/s]  7%|▋         | 641/8943 [01:01<27:29,  5.03it/s]  7%|▋         | 642/8943 [01:01<25:23,  5.45it/s]  7%|▋         | 643/8943 [01:01<25:10,  5.49it/s]  7%|▋         | 644/8943 [01:02<27:50,  4.97it/s]  7%|▋         | 645/8943 [01:02<31:04,  4.45it/s]  7%|▋         | 646/8943 [01:02<31:08,  4.44it/s]  7%|▋         | 647/8943 [01:02<32:35,  4.24it/s]  7%|▋         | 648/8943 [01:03<28:37,  4.83it/s]  7%|▋         | 649/8943 [01:03<25:59,  5.32it/s]  7%|▋         | 660/8943 [01:03<18:36,  7.42it/s]  7%|▋         | 666/8943 [01:03<13:45, 10.02it/s]  8%|▊         | 674/8943 [01:03<10:10, 13.54it/s]  8%|▊         | 680/8943 [01:03<07:51, 17.51it/s]  8%|▊         | 686/8943 [01:03<06:14, 22.07it/s]  8%|▊         | 695/8943 [01:03<04:51, 28.31it/s]  8%|▊         | 702/8943 [01:04<04:00, 34.31it/s]  8%|▊         | 709/8943 [01:06<17:40,  7.77it/s]  8%|▊         | 715/8943 [01:06<13:06, 10.46it/s]  8%|▊         | 720/8943 [01:06<10:01, 13.68it/s]  8%|▊         | 728/8943 [01:06<07:36, 17.98it/s]  8%|▊         | 739/8943 [01:07<05:44, 23.83it/s]  8%|▊         | 747/8943 [01:07<04:35, 29.79it/s]  8%|▊         | 757/8943 [01:07<03:36, 37.73it/s]  9%|▊         | 770/8943 [01:07<02:50, 47.89it/s]  9%|▊         | 780/8943 [01:07<02:30, 54.18it/s]  9%|▉         | 789/8943 [01:07<02:26, 55.85it/s]  9%|▉         | 798/8943 [01:07<02:10, 62.57it/s]  9%|▉         | 808/8943 [01:07<02:37, 51.77it/s]  9%|▉         | 815/8943 [01:09<08:45, 15.48it/s]Picklist: List all tracks bought by customer Daan Peeters., customers, last_name, [Peeters]
Picklist: What are the tracks that Dean Peeters bought?, customers, last_name, [Peeters]
--------------------
text:  What are the tracks that Dean Peeters bought?
sql:  SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = "Daan" AND T4.last_name = "Peeters"
ground truth values:  [('customers.first_name', 'Daan'), ('customers.last_name', 'Peeters')]
matched values OrderedDict([(75, ('customers.last_name', 'Peeters'))])
--------------------
Picklist: How much is the track Fast As a Shark?, tracks, name, [Fast As a Shark]
Picklist: What is the unit price of the tune "Fast As a Shark"?, tracks, name, [Fast As a Shark]
Picklist: Find the name of tracks which are in Movies playlist but not in music playlist., playlists, name, [Movies]
Picklist: Find the name of tracks which are in Movies playlist but not in music playlist., playlists, name, [Music]
Picklist: What are the names of all tracks that are on the Movies playlist but not in the music playlist?, playlists, name, [Movies]
Picklist: What are the names of all tracks that are on the Movies playlist but not in the music playlist?, playlists, name, [Music]
Picklist: Find the name of tracks which are in both Movies and music playlists., playlists, name, [Movies]
Picklist: Find the name of tracks which are in both Movies and music playlists., playlists, name, [Music]
Picklist: What are the names of all the tracks that are in both the Movies and music playlists?, playlists, name, [Movies]
Picklist: What are the names of all the tracks that are in both the Movies and music playlists?, playlists, name, [Music]
Picklist: What is the average sales of the journals that have an editor whose work type is 'Photo'?, journal_committee, Work_Type, [Photo]
Picklist: How many accounts does the customer with first name Art and last name Turcotte have?, Customers, customer_first_name, [Art]
Picklist: How many accounts does the customer with first name Art and last name Turcotte have?, Customers, customer_last_name, [Turcotte]
Picklist: Return the number of accounts that the customer with the first name Art and last name Turcotte has., Customers, customer_first_name, [Art]
Picklist: Return the number of accounts that the customer with the first name Art and last name Turcotte has., Customers, customer_last_name, [Turcotte]
Picklist: What is the phone and email for customer with first name Aniyah and last name Feest?, Customers, customer_first_name, [Aniyah]
Picklist: What is the phone and email for customer with first name Aniyah and last name Feest?, Customers, customer_last_name, [Feest]
Picklist: Return the phone and email of the customer with the first name Aniyah and last name Feest., Customers, customer_first_name, [Aniyah]
Picklist: Return the phone and email of the customer with the first name Aniyah and last name Feest., Customers, customer_last_name, [Feest]
Picklist: How many cards does customer Art Turcotte have?, Customers, customer_first_name, [Art]
Picklist: How many cards does customer Art Turcotte have?, Customers, customer_last_name, [Turcotte]
Picklist: Count the number of cards the customer with the first name Art and last name Turcotte has., Customers, customer_first_name, [Art]
Picklist: Count the number of cards the customer with the first name Art and last name Turcotte has., Customers, customer_last_name, [Turcotte]
Picklist: How many debit cards do we have?, Customers_Cards, card_type_code, [Debit]
Picklist: Count the number of customer cards of the type Debit., Customers_Cards, card_type_code, [Debit]
Picklist: How many credit cards does customer Blanche Huels have?, Customers, customer_first_name, [Blanche]
Picklist: How many credit cards does customer Blanche Huels have?, Customers, customer_last_name, [Huels]
Picklist: How many credit cards does customer Blanche Huels have?, Customers_Cards, card_type_code, [Credit]
Picklist: Count the number of credit cards that the customer with first name Blanche and last name Huels has., Customers, customer_first_name, [Blanche]
Picklist: Count the number of credit cards that the customer with first name Blanche and last name Huels has., Customers, customer_last_name, [Huels]
Picklist: Count the number of credit cards that the customer with first name Blanche and last name Huels has., Customers_Cards, card_type_code, [Credit]
Picklist: Show the customer ids and firstname without a credit card., Customers_Cards, card_type_code, [Credit]
Picklist: What are the ids and first names of customers who do not hold a credit card?, Customers_Cards, card_type_code, [Credit]
Picklist: What are the names for tracks without a race in class 'GT'., race, Class, [GT]
Picklist: Give the names of tracks that do not have a race in the class 'GT'., race, Class, [GT]
Picklist: How many members have the black membership card?, member, Membership_card, [Black]
Picklist: Give me the names of members whose address is in Harford or Waterbury., member, Address, [Waterbury]
--------------------
text:  Give me the names of members whose address is in Harford or Waterbury.
sql:  SELECT name FROM member WHERE address  =  'Harford' OR address  =  'Waterbury'
ground truth values:  [('member.Address', 'Harford'), ('member.Address', 'Waterbury')]
matched values OrderedDict([(41, ('member.Address', 'Waterbury'))])
--------------------
Picklist: Find the ids and names of members who are under age 30 or with black membership card., member, Membership_card, [Black]
Picklist: What is the membership card held by both members living in Hartford and ones living in Waterbury address?, member, Address, [Hartford]
Picklist: What is the membership card held by both members living in Hartford and ones living in Waterbury address?, member, Address, [Waterbury]
Picklist: How many members are not living in Hartford?, member, Address, [Hartford]
Picklist: Which address do not have any member with the black membership card?, member, Membership_card, [Black]
Picklist: What are the id and address of the shops which have a happy hour in May?, happy_hour, Month, [May]
Picklist: List the names of all music genres., Playlist, Name, [Music]
--------------------
text:  List the names of all music genres.
sql:  SELECT Name FROM GENRE
ground truth values:  []
matched values OrderedDict([(178, ('Playlist.Name', 'Music'))])
--------------------
Picklist: What are the names of different music genres?, Playlist, Name, [Music]
--------------------
text:  What are the names of different music genres?
sql:  SELECT Name FROM GENRE
ground truth values:  []
matched values OrderedDict([(178, ('Playlist.Name', 'Music'))])
--------------------
Picklist: Find all the customer information in state NY., Customer, State, [NY]
Picklist: Find all the customer information in state NY., Invoice, BillingState, [NY]
--------------------
text:  Find all the customer information in state NY.
sql:  SELECT * FROM CUSTOMER WHERE State  =  "NY"
ground truth values:  [('Customer.State', 'NY')]
matched values OrderedDict([(38, ('Customer.State', 'NY')), (129, ('Invoice.BillingState', 'NY'))])
--------------------
Picklist: What is all the customer information for customers in NY state?, Customer, State, [NY]
Picklist: What is all the customer information for customers in NY state?, Invoice, BillingState, [NY]
--------------------
text:  What is all the customer information for customers in NY state?
sql:  SELECT * FROM CUSTOMER WHERE State  =  "NY"
ground truth values:  [('Customer.State', 'NY')]
matched values OrderedDict([(38, ('Customer.State', 'NY')), (129, ('Invoice.BillingState', 'NY'))])
--------------------
Picklist: What are the first names and last names of the employees who live in Calgary city., Employee, City, [Calgary]
Picklist: Find the full names of employees living in the city of Calgary., Employee, City, [Calgary]
Picklist: Find the title of all the albums of the artist "AC/DC"., Artist, Name, [AC/DC]
  9%|▉         | 820/8943 [01:10<13:35,  9.97it/s]  9%|▉         | 824/8943 [01:10<16:42,  8.10it/s]  9%|▉         | 827/8943 [01:11<19:07,  7.07it/s]  9%|▉         | 830/8943 [01:11<20:44,  6.52it/s]  9%|▉         | 832/8943 [01:12<21:52,  6.18it/s]  9%|▉         | 834/8943 [01:12<23:11,  5.83it/s]  9%|▉         | 836/8943 [01:13<24:57,  5.42it/s]  9%|▉         | 837/8943 [01:13<25:56,  5.21it/s]  9%|▉         | 838/8943 [01:13<25:14,  5.35it/s]  9%|▉         | 839/8943 [01:13<26:41,  5.06it/s]  9%|▉         | 840/8943 [01:13<28:43,  4.70it/s]  9%|▉         | 841/8943 [01:14<30:11,  4.47it/s]  9%|▉         | 842/8943 [01:14<27:03,  4.99it/s]  9%|▉         | 843/8943 [01:14<26:39,  5.07it/s]  9%|▉         | 844/8943 [01:14<27:01,  4.99it/s]  9%|▉         | 845/8943 [01:14<25:20,  5.32it/s]  9%|▉         | 846/8943 [01:15<27:45,  4.86it/s]  9%|▉         | 847/8943 [01:15<27:47,  4.86it/s]  9%|▉         | 848/8943 [01:15<26:53,  5.02it/s]  9%|▉         | 849/8943 [01:15<27:14,  4.95it/s] 10%|▉         | 850/8943 [01:15<29:11,  4.62it/s] 10%|▉         | 851/8943 [01:16<29:37,  4.55it/s] 10%|▉         | 852/8943 [01:16<29:59,  4.50it/s] 10%|▉         | 853/8943 [01:16<30:44,  4.39it/s] 10%|▉         | 854/8943 [01:16<28:29,  4.73it/s] 10%|▉         | 855/8943 [01:17<27:13,  4.95it/s] 10%|▉         | 856/8943 [01:17<29:33,  4.56it/s] 10%|▉         | 857/8943 [01:17<31:20,  4.30it/s] 10%|▉         | 858/8943 [01:17<31:34,  4.27it/s] 10%|▉         | 859/8943 [01:18<31:03,  4.34it/s] 10%|▉         | 860/8943 [01:18<31:06,  4.33it/s] 10%|▉         | 861/8943 [01:18<31:49,  4.23it/s] 10%|▉         | 862/8943 [01:18<31:08,  4.32it/s]Picklist: Find the title of all the albums of the artist "AC/DC"., Track, Composer, [AC/DC]
--------------------
text:  Find the title of all the albums of the artist "AC/DC".
sql:  SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  "AC/DC"
ground truth values:  [('Artist.Name', 'AC/DC')]
matched values OrderedDict([(19, ('Artist.Name', 'AC/DC')), (212, ('Track.Composer', 'AC/DC'))])
--------------------
Picklist: What are the titles of albums by the artist "AC/DC"?, Artist, Name, [AC/DC]
Picklist: What are the titles of albums by the artist "AC/DC"?, Track, Composer, [AC/DC]
--------------------
text:  What are the titles of albums by the artist "AC/DC"?
sql:  SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  "AC/DC"
ground truth values:  [('Artist.Name', 'AC/DC')]
matched values OrderedDict([(19, ('Artist.Name', 'AC/DC')), (212, ('Track.Composer', 'AC/DC'))])
--------------------
Picklist: Hom many albums does the artist "Metallica" have?, Artist, Name, [Metallica]
Picklist: Hom many albums does the artist "Metallica" have?, Track, Composer, [Metallica]
--------------------
text:  Hom many albums does the artist "Metallica" have?
sql:  SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  "Metallica"
ground truth values:  [('Artist.Name', 'Metallica')]
matched values OrderedDict([(19, ('Artist.Name', 'Metallica')), (211, ('Track.Composer', 'Metallica'))])
--------------------
Picklist: Find the number of albums by the artist "Metallica"., Artist, Name, [Metallica]
Picklist: Find the number of albums by the artist "Metallica"., Track, Composer, [Metallica]
--------------------
text:  Find the number of albums by the artist "Metallica".
sql:  SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  "Metallica"
ground truth values:  [('Artist.Name', 'Metallica')]
matched values OrderedDict([(19, ('Artist.Name', 'Metallica')), (211, ('Track.Composer', 'Metallica'))])
--------------------
Picklist: Which artist does the album "Balls to the Wall" belong to?, Album, Title, [Balls to the Wall]
Picklist: Which artist does the album "Balls to the Wall" belong to?, Track, Name, [Balls to the Wall]
Picklist: Which artist does the album "Balls to the Wall" belong to?, Track, Name, [Belong]
--------------------
text:  Which artist does the album "Balls to the Wall" belong to?
sql:  SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  "Balls to the Wall"
ground truth values:  [('Album.Title', 'Balls to the Wall')]
matched values OrderedDict([(9, ('Album.Title', 'Balls to the Wall')), (201, ('Track.Name', 'Balls to the Wall')), (206, ('Track.Name', 'Belong'))])
--------------------
Picklist: Find the name of the artist who made the album "Balls to the Wall"., Album, Title, [Balls to the Wall]
Picklist: Find the name of the artist who made the album "Balls to the Wall"., Track, Name, [Balls to the Wall]
--------------------
text:  Find the name of the artist who made the album "Balls to the Wall".
sql:  SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  "Balls to the Wall"
ground truth values:  [('Album.Title', 'Balls to the Wall')]
matched values OrderedDict([(9, ('Album.Title', 'Balls to the Wall')), (201, ('Track.Name', 'Balls to the Wall'))])
--------------------
Picklist: How many tracks belong to rock genre?, Genre, Name, [Rock]
Picklist: How many tracks belong to rock genre?, Track, Name, [Belong]
--------------------
text:  How many tracks belong to rock genre?
sql:  SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  "Rock"
ground truth values:  [('Genre.Name', 'Rock')]
matched values OrderedDict([(101, ('Genre.Name', 'Rock')), (198, ('Track.Name', 'Belong'))])
--------------------
Picklist: Count the number of tracks that are part of the rock genre., Genre, Name, [Rock]
Picklist: What is the average unit price of tracks that belong to Jazz genre?, Genre, Name, [Jazz]
Picklist: What is the average unit price of tracks that belong to Jazz genre?, Track, Name, [Belong]
--------------------
text:  What is the average unit price of tracks that belong to Jazz genre?
sql:  SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  "Jazz"
ground truth values:  [('Genre.Name', 'Jazz')]
matched values OrderedDict([(101, ('Genre.Name', 'Jazz')), (198, ('Track.Name', 'Belong'))])
--------------------
Picklist: Find the average unit price of jazz tracks., Genre, Name, [Jazz]
Picklist: What is the first name and last name of the customer that has email "luisg@embraer.com.br"?, Customer, Email, [luisg@embraer.com.br]
Picklist: Find the full name of the customer with the email "luisg@embraer.com.br"., Customer, Email, [luisg@embraer.com.br]
Picklist: What is the first name and last name employee helps the customer with first name Leonie?, Customer, FirstName, [Leonie]
Picklist: Find the full names of employees who help customers with the first name Leonie., Customer, FirstName, [Leonie]
Picklist: Find all invoice dates corresponding to customers with first name Astrid and last name Gruber., Customer, FirstName, [Astrid]
Picklist: Find all invoice dates corresponding to customers with first name Astrid and last name Gruber., Customer, LastName, [Gruber]
Picklist: What are the invoice dates for customers with the first name Astrid and the last name Gruber?, Customer, FirstName, [Astrid]
Picklist: What are the invoice dates for customers with the first name Astrid and the last name Gruber?, Customer, LastName, [Gruber]
Picklist: Find the first names of all customers that live in Brazil and have an invoice., Customer, Country, [Brazil]
Picklist: Find the first names of all customers that live in Brazil and have an invoice., Invoice, BillingCountry, [Brazil]
--------------------
text:  Find the first names of all customers that live in Brazil and have an invoice.
sql:  SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  "Brazil"
ground truth values:  [('Customer.Country', 'Brazil')]
matched values OrderedDict([(40, ('Customer.Country', 'Brazil')), (132, ('Invoice.BillingCountry', 'Brazil'))])
--------------------
Picklist: What are the different first names for customers from Brazil who have also had an invoice?, Customer, Country, [Brazil]
Picklist: What are the different first names for customers from Brazil who have also had an invoice?, Invoice, BillingCountry, [Brazil]
--------------------
text:  What are the different first names for customers from Brazil who have also had an invoice?
sql:  SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  "Brazil"
ground truth values:  [('Customer.Country', 'Brazil')]
matched values OrderedDict([(40, ('Customer.Country', 'Brazil')), (132, ('Invoice.BillingCountry', 'Brazil'))])
--------------------
Picklist: Find the address of all customers that live in Germany and have invoice., Customer, Country, [Germany]
Picklist: Find the address of all customers that live in Germany and have invoice., Invoice, BillingCountry, [Germany]
--------------------
text:  Find the address of all customers that live in Germany and have invoice.
sql:  SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  "Germany"
ground truth values:  [('Customer.Country', 'Germany')]
matched values OrderedDict([(40, ('Customer.Country', 'Germany')), (132, ('Invoice.BillingCountry', 'Germany'))])
--------------------
Picklist: What are the addresses of customers living in Germany who have had an invoice?, Customer, Country, [Germany]
Picklist: What are the addresses of customers living in Germany who have had an invoice?, Invoice, BillingCountry, [Germany]
--------------------
text:  What are the addresses of customers living in Germany who have had an invoice?
sql:   10%|▉         | 863/8943 [01:18<31:02,  4.34it/s] 10%|▉         | 864/8943 [01:19<27:35,  4.88it/s] 10%|▉         | 865/8943 [01:19<25:29,  5.28it/s] 10%|▉         | 866/8943 [01:19<25:10,  5.35it/s] 10%|▉         | 867/8943 [01:19<26:07,  5.15it/s] 10%|▉         | 868/8943 [01:19<28:34,  4.71it/s] 10%|▉         | 869/8943 [01:20<27:54,  4.82it/s] 10%|▉         | 870/8943 [01:20<29:41,  4.53it/s] 10%|▉         | 871/8943 [01:20<30:50,  4.36it/s] 10%|▉         | 872/8943 [01:20<30:34,  4.40it/s] 10%|▉         | 873/8943 [01:21<30:01,  4.48it/s] 10%|▉         | 874/8943 [01:21<27:51,  4.83it/s] 10%|▉         | 875/8943 [01:21<26:22,  5.10it/s] 10%|▉         | 876/8943 [01:21<29:10,  4.61it/s] 10%|▉         | 877/8943 [01:21<30:56,  4.35it/s] 10%|▉         | 878/8943 [01:22<28:58,  4.64it/s] 10%|▉         | 879/8943 [01:22<28:27,  4.72it/s] 10%|▉         | 880/8943 [01:22<26:36,  5.05it/s] 10%|▉         | 881/8943 [01:22<26:11,  5.13it/s] 10%|▉         | 882/8943 [01:22<27:32,  4.88it/s] 10%|▉         | 883/8943 [01:23<27:07,  4.95it/s] 10%|▉         | 884/8943 [01:23<26:22,  5.09it/s] 10%|▉         | 885/8943 [01:23<27:35,  4.87it/s] 10%|▉         | 886/8943 [01:23<25:45,  5.21it/s] 10%|▉         | 887/8943 [01:23<23:43,  5.66it/s] 10%|▉         | 888/8943 [01:23<22:29,  5.97it/s] 10%|▉         | 889/8943 [01:24<23:10,  5.79it/s] 10%|▉         | 890/8943 [01:24<26:22,  5.09it/s] 10%|▉         | 891/8943 [01:24<28:29,  4.71it/s]SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  "Germany"
ground truth values:  [('Customer.Country', 'Germany')]
matched values OrderedDict([(40, ('Customer.Country', 'Germany')), (132, ('Invoice.BillingCountry', 'Germany'))])
--------------------
Picklist: List the phone numbers of all employees., Track, Name, [Numbers]
--------------------
text:  List the phone numbers of all employees.
sql:  SELECT Phone FROM EMPLOYEE
ground truth values:  []
matched values OrderedDict([(196, ('Track.Name', 'Numbers'))])
--------------------
Picklist: What are the phone numbers for each employee?, Track, Name, [Numbers]
--------------------
text:  What are the phone numbers for each employee?
sql:  SELECT Phone FROM EMPLOYEE
ground truth values:  []
matched values OrderedDict([(196, ('Track.Name', 'Numbers'))])
--------------------
Picklist: How many tracks are in the AAC audio file media type?, MediaType, Name, [AAC audio file]
Picklist: Count the number of tracks that are of the media type "AAC audio file"., MediaType, Name, [AAC audio file]
Picklist: What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?, Album, Title, [Pop]
Picklist: What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?, Genre, Name, [Latin]
Picklist: What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?, Genre, Name, [Pop]
Picklist: What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?, Track, Name, [Belong]
--------------------
text:  What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?
sql:  SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  "Latin" OR T1.Name  =  "Pop"
ground truth values:  [('Genre.Name', 'Latin'), ('Genre.Name', 'Pop')]
matched values OrderedDict([(9, ('Album.Title', 'Pop')), (103, ('Genre.Name', 'Latin')), (105, ('Genre.Name', 'Pop')), (202, ('Track.Name', 'Belong'))])
--------------------
Picklist: Find the average millisecond length of Latin and Pop tracks., Album, Title, [Pop]
Picklist: Find the average millisecond length of Latin and Pop tracks., Genre, Name, [Latin]
Picklist: Find the average millisecond length of Latin and Pop tracks., Genre, Name, [Pop]
--------------------
text:  Find the average millisecond length of Latin and Pop tracks.
sql:  SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  "Latin" OR T1.Name  =  "Pop"
ground truth values:  [('Genre.Name', 'Latin'), ('Genre.Name', 'Pop')]
matched values OrderedDict([(9, ('Album.Title', 'Pop')), (103, ('Genre.Name', 'Latin')), (105, ('Genre.Name', 'Pop'))])
--------------------
Picklist: Please show the employee first names and ids of employees who serve at least 10 customers., Track, Name, [Please]
--------------------
text:  Please show the employee first names and ids of employees who serve at least 10 customers.
sql:  SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10
ground truth values:  []
matched values OrderedDict([(196, ('Track.Name', 'Please'))])
--------------------
Picklist: Please show the employee last names that serves no more than 20 customers., Track, Name, [Please]
--------------------
text:  Please show the employee last names that serves no more than 20 customers.
sql:  SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20
ground truth values:  []
matched values OrderedDict([(196, ('Track.Name', 'Please'))])
--------------------
Picklist: Please list all album titles in alphabetical order., Track, Name, [Please]
--------------------
text:  Please list all album titles in alphabetical order.
sql:  SELECT Title FROM ALBUM ORDER BY Title
ground truth values:  []
matched values OrderedDict([(196, ('Track.Name', 'Please'))])
--------------------
Picklist: Please list the name and id of all artists that have at least 3 albums in alphabetical order., Track, Name, [Please]
--------------------
text:  Please list the name and id of all artists that have at least 3 albums in alphabetical order.
sql:  SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name
ground truth values:  []
matched values OrderedDict([(196, ('Track.Name', 'Please'))])
--------------------
Picklist: What is the average unit price of rock tracks?, Genre, Name, [Rock]
Picklist: Find the average unit price of tracks from the Rock genre., Genre, Name, [Rock]
Picklist: What are the duration of the longest and shortest pop tracks in milliseconds?, Album, Title, [Pop]
Picklist: What are the duration of the longest and shortest pop tracks in milliseconds?, Genre, Name, [Pop]
--------------------
text:  What are the duration of the longest and shortest pop tracks in milliseconds?
sql:  SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  "Pop"
ground truth values:  [('Genre.Name', 'Pop')]
matched values OrderedDict([(9, ('Album.Title', 'Pop')), (103, ('Genre.Name', 'Pop'))])
--------------------
Picklist: Find the maximum and minimum millisecond lengths of pop tracks., Album, Title, [Pop]
Picklist: Find the maximum and minimum millisecond lengths of pop tracks., Genre, Name, [Pop]
--------------------
text:  Find the maximum and minimum millisecond lengths of pop tracks.
sql:  SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  "Pop"
ground truth values:  [('Genre.Name', 'Pop')]
matched values OrderedDict([(9, ('Album.Title', 'Pop')), (103, ('Genre.Name', 'Pop'))])
--------------------
Picklist: What are the birth dates of employees living in Edmonton?, Customer, City, [Edmonton]
Picklist: What are the birth dates of employees living in Edmonton?, Employee, City, [Edmonton]
Picklist: What are the birth dates of employees living in Edmonton?, Invoice, BillingCity, [Edmonton]
--------------------
text:  What are the birth dates of employees living in Edmonton?
sql:  SELECT BirthDate FROM EMPLOYEE WHERE City  =  "Edmonton"
ground truth values:  [('Employee.City', 'Edmonton')]
matched values OrderedDict([(36, ('Customer.City', 'Edmonton')), (82, ('Employee.City', 'Edmonton')), (128, ('Invoice.BillingCity', 'Edmonton'))])
--------------------
Picklist: Find the birth dates corresponding to employees who live in the city of Edmonton., Customer, City, [Edmonton]
Picklist: Find the birth dates corresponding to employees who live in the city of Edmonton., Employee, City, [Edmonton]
Picklist: Find the birth dates corresponding to employees who live in the city of Edmonton., Invoice, BillingCity, [Edmonton]
--------------------
text:  Find the birth dates corresponding to employees who live in the city of Edmonton.
sql:  SELECT BirthDate FROM EMPLOYEE WHERE City  =  "Edmonton"
ground truth values:  [('Employee.City', 'Edmonton')]
matched values OrderedDict([(36, ('Customer.City', 'Edmonton')), (82, ('Employee.City', 'Edmonton')), (128, ('Invoice.BillingCity', 'Edmonton'))])
--------------------
Picklist: What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?, Genre, Name, [Reggae]
Picklist: What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?, Genre, Name, [Rock]
Picklist: Find the titles of albums that contain tracks of both the Reggae and Rock genres., Genre, Name, [Reggae]
Picklist: Find the titles of albums that contain tracks of both the Reggae and Rock genres., Genre, Name, [Rock]
Picklist: What are the customer phone numbers under the policy "Life Insurance"?, Available_Policies, policy_type_code, [Life Insurance]
 10%|█         | 900/8943 [01:24<20:24,  6.57it/s] 10%|█         | 907/8943 [01:24<14:52,  9.01it/s] 10%|█         | 913/8943 [01:24<11:08, 12.01it/s] 10%|█         | 920/8943 [01:25<08:24, 15.91it/s] 10%|█         | 926/8943 [01:25<07:01, 19.02it/s] 10%|█         | 936/8943 [01:25<05:20, 25.00it/s] 11%|█         | 947/8943 [01:25<04:06, 32.48it/s] 11%|█         | 955/8943 [01:28<18:01,  7.39it/s] 11%|█         | 963/8943 [01:28<13:07, 10.13it/s] 11%|█         | 969/8943 [01:28<10:05, 13.16it/s]Picklist: What are the phone numbers of customers using the policy with the code "Life Insurance"?, Available_Policies, policy_type_code, [Life Insurance]
Picklist: How many policies are listed for the customer named "Dayana Robel"?, Customers, Customer_name, [Dayana Robel]
Picklist: Count the total number of policies used by the customer named "Dayana Robel"., Customers, Customer_name, [Dayana Robel]
Picklist: What are all the policy types of the customer named "Dayana Robel"?, Customers, Customer_name, [Dayana Robel]
Picklist: Tell me the types of the policy used by the customer named "Dayana Robel"., Customers, Customer_name, [Dayana Robel]
Picklist: Find the names of customers who have used either the service "Close a policy" or the service "Upgrade a policy"., Services, Service_name, [Upgrade a policy]
Picklist: Find the names of customers who have used either the service "Close a policy" or the service "Upgrade a policy"., Services, Service_name, [Close a policy]
Picklist: Which customers have used the service named "Close a policy" or "Upgrade a policy"? Give me the customer names., Services, Service_name, [Upgrade a policy]
Picklist: Which customers have used the service named "Close a policy" or "Upgrade a policy"? Give me the customer names., Services, Service_name, [Close a policy]
Picklist: Find the names of customers who have used both the service "Close a policy" and the service "New policy application"., Services, Service_name, [New policy application]
Picklist: Find the names of customers who have used both the service "Close a policy" and the service "New policy application"., Services, Service_name, [Close a policy]
Picklist: Which customers have used both the service named "Close a policy" and the service named "Upgrade a policy"? Give me the customer names., Services, Service_name, [Upgrade a policy]
Picklist: Which customers have used both the service named "Close a policy" and the service named "Upgrade a policy"? Give me the customer names., Services, Service_name, [Close a policy]
--------------------
text:  Which customers have used both the service named "Close a policy" and the service named "Upgrade a policy"? Give me the customer names.
sql:  SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  "Close a policy" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  "New policy application"
ground truth values:  [('Services.Service_name', 'Close a policy'), ('Services.Service_name', 'New policy application')]
matched values OrderedDict([(18, ('Services.Service_name', 'Upgrade a policy')), (22, ('Services.Service_name', 'Close a policy'))])
--------------------
Picklist: What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?, enzyme, Location, [Cytosol]
Picklist: What is the product, chromosome, and porphyria of the enzymes located at 'Cytosol'?, enzyme, Location, [Cytosol]
Picklist: What are the names of enzymes who does not produce 'Heme'?, enzyme, Product, [Heme]
Picklist: What are the names of enzymes whose product is not 'Heme'?, enzyme, Product, [Heme]
Picklist: What are the names and trade names of the medicines which has 'Yes' value in the FDA record?, medicine, FDA_approved, [Yes]
--------------------
text:  What are the names and trade names of the medcines that are FDA approved?
sql:  SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'
ground truth values:  [('medicine.FDA_approved', 'Yes')]
matched values OrderedDict()
--------------------
Picklist: What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?, medicine, name, [Amisulpride]
Picklist: What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?, medicine_enzyme_interaction, interaction_type, [inhibitor]
Picklist: What are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors?, medicine, name, [Amisulpride]
Picklist: What are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors?, medicine_enzyme_interaction, interaction_type, [inhibitor]
--------------------
text:  What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?
sql:  SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1
ground truth values:  [('medicine_enzyme_interaction.interaction_type', 'activitor')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the id and name of the enzyme that can interact with the most medicines as an activator?
sql:  SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1
ground truth values:  [('medicine_enzyme_interaction.interaction_type', 'activitor')]
matched values OrderedDict()
--------------------
Picklist: What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?, medicine, name, [Aripiprazole]
Picklist: What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?, enzyme, name, [ALA synthase]
Picklist: What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?, medicine, name, [Aripiprazole]
Picklist: What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?, enzyme, name, [ALA synthase]
Picklist: How many medicines have the FDA approval status 'No' ?, medicine, FDA_approved, [No]
--------------------
text:  How many medicines were not approved by the FDA?
sql:  SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'
ground truth values:  [('medicine.FDA_approved', 'No')]
matched values OrderedDict()
--------------------
Picklist: What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?, medicine_enzyme_interaction, interaction_type, [inhibitor]
Picklist: What are the different names, locations, and products of the enzymes that are capable inhibitor interactions?, medicine_enzyme_interaction, interaction_type, [inhibitor]
Picklist: List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes., medicine_enzyme_interaction, interaction_type, [activitor]
Picklist: List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes., medicine_enzyme_interaction, interaction_type, [inhibitor]
Picklist: What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes?, medicine_enzyme_interaction, interaction_type, [activitor]
Picklist: What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes?, medicine_enzyme_interaction, interaction_type, [inhibitor]
Picklist: Show the medicine names and trade names that cannot interact with the enzyme with product 'Heme'., enzyme, Product, [Heme]
--------------------
text:  Show the medicine names and trade names that cannot interact with the enzyme with product 'Heme'.
sql:  SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'
ground truth values:  [('enzyme.Product', 'Protoporphyrinogen IX')]
matched values OrderedDict([(24, ('enzyme.Product', 'Heme'))])
--------------------
Picklist: What are the medicine and trade names that cannot interact with the enzyme with the product 'Heme'?, enzyme, Product, [Heme]
--------------------
text:   11%|█         | 976/8943 [01:28<07:38, 17.39it/s] 11%|█         | 986/8943 [01:28<05:45, 23.06it/s] 11%|█         | 994/8943 [01:28<04:35, 28.82it/s] 11%|█         | 1004/8943 [01:29<03:38, 36.30it/s] 11%|█▏        | 1013/8943 [01:29<02:59, 44.17it/s] 11%|█▏        | 1024/8943 [01:29<02:30, 52.75it/s] 12%|█▏        | 1033/8943 [01:29<02:25, 54.36it/s] 12%|█▏        | 1041/8943 [01:29<02:28, 53.11it/s] 12%|█▏        | 1051/8943 [01:29<02:08, 61.55it/s] 12%|█▏        | 1060/8943 [01:29<01:56, 67.80it/s] 12%|█▏        | 1069/8943 [01:29<01:52, 69.84it/s] 12%|█▏        | 1077/8943 [01:30<01:52, 70.14it/s] 12%|█▏        | 1085/8943 [01:30<02:07, 61.51it/s]What are the medicine and trade names that cannot interact with the enzyme with the product 'Heme'?
sql:  SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'
ground truth values:  [('enzyme.Product', 'Protoporphyrinogen IX')]
matched values OrderedDict([(24, ('enzyme.Product', 'Heme'))])
--------------------
Picklist: List all public schools and their locations., university, Affiliation, [Public]
Picklist: What are the public schools and what are their locations?, university, Affiliation, [Public]
Picklist: Find the founded year of the newest non public school., university, Affiliation, [Public]
Picklist: What is the founded year of the non public school that was founded most recently?, university, Affiliation, [Public]
Picklist: Find the location and all games score of the school that has Clemson as its team name., basketball_match, Team_Name, [Clemson]
Picklist: What are the all games score and location of the school called Clemson?, basketball_match, Team_Name, [Clemson]
Picklist: Find the schools that were either founded after 1850 or public., university, Affiliation, [Public]
Picklist: What are the schools that were either founded before 1850 or are public?, university, Affiliation, [Public]
Picklist: What are the chip model and screen mode of the phone with hardware model name "LG-P760"?, phone, Hardware_Model_name, [LG-P760]
Picklist: How many phone hardware models are produced by the company named "Nokia Corporation"?, phone, Company_name, [Nokia Corporation]
Picklist: What is maximum and minimum RAM size of phone produced by company named "Nokia Corporation"?, phone, Company_name, [Nokia Corporation]
Picklist: What is the average ROM size of phones produced by the company named "Nokia Corporation"?, phone, Company_name, [Nokia Corporation]
Picklist: Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name., phone, Accreditation_type, [Full]
--------------------
text:  Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.
sql:  SELECT Hardware_Model_name ,  Company_name FROM phone WHERE Accreditation_type LIKE 'Full'
ground truth values:  []
matched values OrderedDict([(60, ('phone.Accreditation_type', 'Full'))])
--------------------
Picklist: Find the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is "LG-P760"., phone, Hardware_Model_name, [LG-P760]
Picklist: List the hardware model name and company name for the phone whose screen mode type is "Graphics.", screen_mode, Type, [Graphics]
Picklist: What are the wifi and screen mode type of the hardware model named "LG-P760"?, phone, Hardware_Model_name, [LG-P760]
Picklist: List the hardware model name for the phones that have screen mode type "Text" or RAM size greater than 32., screen_mode, Type, [Text]
Picklist: List the hardware model name for the phones that were produced by "Nokia Corporation" or whose screen mode type is "Graphics.", screen_mode, Type, [Graphics]
Picklist: List the hardware model name for the phones that were produced by "Nokia Corporation" or whose screen mode type is "Graphics.", phone, Company_name, [Nokia Corporation]
Picklist: List the hardware model name for the phons that were produced by "Nokia Corporation" but whose screen mode type is not Text., screen_mode, Type, [Text]
Picklist: List the hardware model name for the phons that were produced by "Nokia Corporation" but whose screen mode type is not Text., phone, Company_name, [Nokia Corporation]
--------------------
text:  How many models do not have the wifi function?
sql:  SELECT count(*) FROM chip_model WHERE wifi  =  'No'
ground truth values:  [('chip_model.WiFi', 'No')]
matched values OrderedDict()
--------------------
--------------------
text:  Count the number of chip model that do not have wifi.
sql:  SELECT count(*) FROM chip_model WHERE wifi  =  'No'
ground truth values:  [('chip_model.WiFi', 'No')]
matched values OrderedDict()
--------------------
Picklist: Find the names of the chip models that are not used by any phone with full accreditation type., phone, Accreditation_type, [Full]
Picklist: Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types., phone, Accreditation_type, [Provisional]
Picklist: Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types., phone, Accreditation_type, [Full]
Picklist: Show all official native languages that contain the word "English"., country, Official_native_language, [English]
--------------------
text:  Show all official native languages that contain the word "English".
sql:  SELECT Official_native_language FROM country WHERE Official_native_language LIKE "%English%"
ground truth values:  []
matched values OrderedDict([(16, ('country.Official_native_language', 'English'))])
--------------------
Picklist: What are the official native languages that contain the string "English"., country, Official_native_language, [English]
--------------------
text:  What are the official native languages that contain the string "English".
sql:  SELECT Official_native_language FROM country WHERE Official_native_language LIKE "%English%"
ground truth values:  []
matched values OrderedDict([(16, ('country.Official_native_language', 'English'))])
--------------------
Picklist: Show the players from college UCLA., match_season, College, [UCLA]
Picklist: Who are the players from UCLA?, match_season, College, [UCLA]
Picklist: Show the distinct position of players from college UCLA or Duke., match_season, College, [UCLA]
Picklist: Show the distinct position of players from college UCLA or Duke., match_season, College, [Duke]
Picklist: What are the different positions of players from UCLA or Duke colleges?, match_season, College, [UCLA]
Picklist: What are the different positions of players from UCLA or Duke colleges?, match_season, College, [Duke]
Picklist: Show the draft pick numbers and draft classes of players whose positions are defenders., match_season, Position, [Defender]
Picklist: What are the draft pick numbers and draft classes for players who play the Defender position?, match_season, Position, [Defender]
Picklist: Which players are from Indonesia?, country, Country_name, [Indonesia]
Picklist: Who are the players from Indonesia?, country, Country_name, [Indonesia]
Picklist: What are the distinct positions of the players from a country whose capital is Dublin?, country, Capital, [Dublin]
Picklist: Give the different positions of players who play for the country with the capital Dublin., country, Capital, [Dublin]
Picklist: What are the official languages of the countries of players from Maryland or Duke college?, match_season, College, [Maryland]
Picklist: What are the official languages of the countries of players from Maryland or Duke college?, match_season, College, [Duke]
Picklist: Return the official native languages of countries who have players from Maryland or Duke colleges., match_season, College, [Maryland]
Picklist: Return the official native languages of countries who have players from Maryland or Duke colleges., match_season, College, [Duke]
Picklist: How many distinct official languages are there among countries of players whose positions are defenders., match_season, Position, [Defender]
Picklist: Count the number of different official languages corresponding to countries that players who play Defender are from., match_season, Position, [Defender]
Picklist: Show the positions of the players from the team with name "Ryley Goldner"., team, Name, [Ryley Goldner]
Picklist: Return the positions of players on the team Ryley Goldner., team, Name, [Ryley Goldner]
Picklist: How many distinct colleges are associated with players from the team with name "Columbus Crew"., team, Name, [Columbus Crew]
 12%|█▏        | 1092/8943 [01:30<02:09, 60.57it/s] 12%|█▏        | 1100/8943 [01:30<02:01, 64.65it/s] 12%|█▏        | 1107/8943 [01:30<02:05, 62.47it/s] 12%|█▏        | 1114/8943 [01:30<02:03, 63.45it/s] 13%|█▎        | 1126/8943 [01:30<01:47, 72.55it/s] 13%|█▎        | 1134/8943 [01:30<01:45, 73.78it/s] 13%|█▎        | 1142/8943 [01:30<01:43, 75.27it/s] 13%|█▎        | 1150/8943 [01:31<01:45, 73.71it/s] 13%|█▎        | 1160/8943 [01:31<01:37, 79.95it/s] 13%|█▎        | 1169/8943 [01:31<01:35, 81.61it/s] 13%|█▎        | 1181/8943 [01:31<01:28, 87.82it/s] 13%|█▎        | 1191/8943 [01:31<01:29, 86.20it/s] 13%|█▎        | 1201/8943 [01:31<01:28, 87.03it/s] 14%|█▎        | 1210/8943 [01:31<01:34, 82.23it/s] 14%|█▎        | 1219/8943 [01:31<01:37, 78.83it/s]Picklist: Count the number of different colleges that players who play for Columbus Crew are from., team, Name, [Columbus Crew]
Picklist: Show the players and years played for players from team "Columbus Crew"., team, Name, [Columbus Crew]
Picklist: What are the players who played for Columbus Crew, and how many years did each play for?, team, Name, [Columbus Crew]
Picklist: What are the names of countries that have both players with position forward and players with position defender?, match_season, Position, [Defender]
Picklist: What are the names of countries that have both players with position forward and players with position defender?, match_season, Position, [Forward]
Picklist: Return the names of countries that have players that play the Forward position, as well as players who play the Defender position., match_season, Position, [Defender]
Picklist: Return the names of countries that have players that play the Forward position, as well as players who play the Defender position., match_season, Position, [Forward]
Picklist: Which college have both players with position midfielder and players with position defender?, match_season, Position, [Midfielder]
Picklist: Which college have both players with position midfielder and players with position defender?, match_season, Position, [Defender]
Picklist: Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position., match_season, Position, [Midfielder]
Picklist: Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position., match_season, Position, [Defender]
Picklist: List the names of climbers whose country is not Switzerland., climber, Country, [Switzerland]
Picklist: What are the names of climbers who are not from the country of Switzerland?, climber, Country, [Switzerland]
Picklist: What is the maximum point for climbers whose country is United Kingdom?, climber, Country, [United Kingdom]
Picklist: Return the maximum number of points for climbers from the United Kingdom., climber, Country, [United Kingdom]
Picklist: Show the distinct names of mountains climbed by climbers from country "West Germany"., climber, Country, [West Germany]
Picklist: What are the different names of mountains ascended by climbers from the country of West Germany?, climber, Country, [West Germany]
Picklist: Show the times used by climbers to climb mountains in Country Uganda., mountain, Country, [Uganda]
Picklist: What are the times used by climbers who climbed mountains in the country of Uganda?, mountain, Country, [Uganda]
Picklist: What are the names of representatives whose party is not "Republican"?, representative, Party, [Republican]
Picklist: What are the life spans of representatives from New York state or Indiana state?, representative, State, [Indiana]
Picklist: What are the life spans of representatives from New York state or Indiana state?, representative, State, [New York]
Picklist: What is the average number of votes of representatives from party "Republican"?, representative, Party, [Republican]
Picklist: Show the parties that have both representatives in New York state and representatives in Pennsylvania state., representative, State, [Pennsylvania]
Picklist: Show the parties that have both representatives in New York state and representatives in Pennsylvania state., representative, State, [New York]
Picklist: Show the short names of the buildings managed by "Emma"., Apartment_Buildings, building_manager, [Emma]
Picklist: Which buildings does "Emma" manage? Give me the short names of the buildings., Apartment_Buildings, building_manager, [Emma]
Picklist: Show the addresses and phones of all the buildings managed by "Brenden"., Apartment_Buildings, building_manager, [Brenden]
Picklist: What are the address and phone number of the buildings managed by "Brenden"?, Apartment_Buildings, building_manager, [Brenden]
Picklist: What is the average number of rooms of apartments with type code "Studio"?, Apartment_Buildings, building_description, [Studio]
Picklist: What is the average number of rooms of apartments with type code "Studio"?, Apartments, apt_type_code, [Studio]
--------------------
text:  What is the average number of rooms of apartments with type code "Studio"?
sql:  SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  "Studio"
ground truth values:  [('Apartments.apt_type_code', 'Studio')]
matched values OrderedDict([(19, ('Apartment_Buildings.building_description', 'Studio')), (42, ('Apartments.apt_type_code', 'Studio'))])
--------------------
Picklist: Find the average room count of the apartments that have the "Studio" type code., Apartment_Buildings, building_description, [Studio]
Picklist: Find the average room count of the apartments that have the "Studio" type code., Apartments, apt_type_code, [Studio]
--------------------
text:  Find the average room count of the apartments that have the "Studio" type code.
sql:  SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  "Studio"
ground truth values:  [('Apartments.apt_type_code', 'Studio')]
matched values OrderedDict([(19, ('Apartment_Buildings.building_description', 'Studio')), (42, ('Apartments.apt_type_code', 'Studio'))])
--------------------
Picklist: Return the apartment numbers of the apartments with type code "Flat"., Apartment_Buildings, building_description, [Flat]
Picklist: Return the apartment numbers of the apartments with type code "Flat"., Apartments, apt_type_code, [Flat]
--------------------
text:  Return the apartment numbers of the apartments with type code "Flat".
sql:  SELECT apt_number FROM Apartments WHERE apt_type_code  =  "Flat"
ground truth values:  [('Apartments.apt_type_code', 'Flat')]
matched values OrderedDict([(19, ('Apartment_Buildings.building_description', 'Flat')), (42, ('Apartments.apt_type_code', 'Flat'))])
--------------------
Picklist: Which apartments have type code "Flat"? Give me their apartment numbers., Apartment_Buildings, building_description, [Flat]
Picklist: Which apartments have type code "Flat"? Give me their apartment numbers., Apartments, apt_type_code, [Flat]
--------------------
text:  Which apartments have type code "Flat"? Give me their apartment numbers.
sql:  SELECT apt_number FROM Apartments WHERE apt_type_code  =  "Flat"
ground truth values:  [('Apartments.apt_type_code', 'Flat')]
matched values OrderedDict([(19, ('Apartment_Buildings.building_description', 'Flat')), (42, ('Apartments.apt_type_code', 'Flat'))])
--------------------
Picklist: Return the date of birth for all the guests with gender code "Male"., Guests, gender_code, [Male]
Picklist: What are dates of birth of all the guests whose gender is "Male"?, Guests, gender_code, [Male]
Picklist: What are the booking start and end dates of the apartments with type code "Duplex"?, Apartment_Buildings, building_description, [Duplex]
Picklist: What are the booking start and end dates of the apartments with type code "Duplex"?, Apartments, apt_type_code, [Duplex]
--------------------
text:  What are the booking start and end dates of the apartments with type code "Duplex"?
sql:  SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  "Duplex"
ground truth values:  [('Apartments.apt_type_code', 'Duplex')]
matched values OrderedDict([(19, ('Apartment_Buildings.building_description', 'Duplex')), (43, ('Apartments.apt_type_code', 'Duplex'))])
--------------------
Picklist: Return the booking start date and end date for the apartments that have type code "Duplex"., Apartment_Buildings, building_description, [Duplex]
Picklist: Return the booking start date and end date for the apartments that have type code "Duplex"., Apartments, apt_type_code, [Duplex]
--------------------
text:  Return the booking start date and end date for the apartments that have type code "Duplex".
sql:  SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  "Duplex"
ground truth values:   14%|█▎        | 1228/8943 [01:32<01:58, 65.35it/s] 14%|█▍        | 1236/8943 [01:32<02:14, 57.45it/s] 14%|█▍        | 1243/8943 [01:32<02:25, 53.03it/s] 14%|█▍        | 1249/8943 [01:32<02:29, 51.40it/s] 14%|█▍        | 1256/8943 [01:32<02:18, 55.64it/s] 14%|█▍        | 1262/8943 [01:36<24:00,  5.33it/s] 14%|█▍        | 1268/8943 [01:36<17:27,  7.32it/s] 14%|█▍        | 1273/8943 [01:36<13:15,  9.65it/s] 14%|█▍        | 1280/8943 [01:36<09:51, 12.96it/s] 14%|█▍        | 1286/8943 [01:36<07:39, 16.68it/s] 14%|█▍        | 1292/8943 [01:36<06:06, 20.85it/s] 15%|█▍        | 1298/8943 [01:43<47:09,  2.70it/s] 15%|█▍        | 1302/8943 [01:45<53:04,  2.40it/s][('Apartments.apt_type_code', 'Duplex')]
matched values OrderedDict([(19, ('Apartment_Buildings.building_description', 'Duplex')), (43, ('Apartments.apt_type_code', 'Duplex'))])
--------------------
Picklist: What is the booking status code of the apartment with apartment number "Suite 634"?, Apartments, apt_number, [Suite 634]
Picklist: What is the booking status code of the apartment with apartment number "Suite 634"?, Apartments, apt_number, [Suite 693]
--------------------
text:  What is the booking status code of the apartment with apartment number "Suite 634"?
sql:  SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  "Suite 634"
ground truth values:  [('Apartments.apt_number', 'Suite 634')]
matched values OrderedDict([(43, ('Apartments.apt_number', 'Suite 634')), (47, ('Apartments.apt_number', 'Suite 693'))])
--------------------
Picklist: Tell me the booking status code for the apartment with number "Suite 634"., Apartments, apt_number, [Suite 634]
Picklist: Tell me the booking status code for the apartment with number "Suite 634"., Apartments, apt_number, [Suite 693]
--------------------
text:  Tell me the booking status code for the apartment with number "Suite 634".
sql:  SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  "Suite 634"
ground truth values:  [('Apartments.apt_number', 'Suite 634')]
matched values OrderedDict([(43, ('Apartments.apt_number', 'Suite 634')), (47, ('Apartments.apt_number', 'Suite 693'))])
--------------------
Picklist: Show the distinct apartment numbers of the apartments that have bookings with status code "Confirmed"., Apartment_Bookings, booking_status_code, [Confirmed]
Picklist: Which apartments have bookings with status code "Confirmed"? Return their apartment numbers., Apartment_Bookings, booking_status_code, [Confirmed]
Picklist: Show the average room count of the apartments that have booking status code "Provisional"., Apartment_Bookings, booking_status_code, [Provisional]
Picklist: What is the average room count of the apartments whose booking status code is "Provisional"?, Apartment_Bookings, booking_status_code, [Provisional]
Picklist: Show the start dates and end dates of all the apartment bookings made by guests with gender code "Female"., Guests, gender_code, [Female]
Picklist: What are the start date and end date of the apartment bookings made by female guests (gender code "Female")?, Guests, gender_code, [Female]
Picklist: Show the first names and last names of all the guests that have apartment bookings with status code "Confirmed"., Apartment_Bookings, booking_status_code, [Confirmed]
Picklist: Which guests have apartment bookings with status code "Confirmed"? Return their first names and last names., Apartment_Bookings, booking_status_code, [Confirmed]
Picklist: Show the total number of rooms of all apartments with facility code "Gym"., Apartment_Facilities, facility_code, [Gym]
Picklist: Find the total number of rooms in the apartments that have facility code "Gym"., Apartment_Facilities, facility_code, [Gym]
Picklist: Show the total number of rooms of the apartments in the building with short name "Columbus Square"., Apartment_Buildings, building_short_name, [Columbus Square]
Picklist: Show the total number of rooms of the apartments in the building with short name "Columbus Square"., Apartment_Buildings, building_full_name, [Columbus Square]
--------------------
text:  Show the total number of rooms of the apartments in the building with short name "Columbus Square".
sql:  SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  "Columbus Square"
ground truth values:  [('Apartment_Buildings.building_short_name', 'Columbus Square')]
matched values OrderedDict([(12, ('Apartment_Buildings.building_short_name', 'Columbus Square')), (19, ('Apartment_Buildings.building_full_name', 'Columbus Square'))])
--------------------
Picklist: How many rooms in total are there in the apartments in the building with short name "Columbus Square"?, Apartment_Buildings, building_short_name, [Columbus Square]
Picklist: How many rooms in total are there in the apartments in the building with short name "Columbus Square"?, Apartment_Buildings, building_full_name, [Columbus Square]
--------------------
text:  How many rooms in total are there in the apartments in the building with short name "Columbus Square"?
sql:  SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  "Columbus Square"
ground truth values:  [('Apartment_Buildings.building_short_name', 'Columbus Square')]
matched values OrderedDict([(12, ('Apartment_Buildings.building_short_name', 'Columbus Square')), (19, ('Apartment_Buildings.building_full_name', 'Columbus Square'))])
--------------------
Picklist: Show the apartment type codes and apartment numbers in the buildings managed by "Kyle"., Apartment_Buildings, building_manager, [Kyle]
Picklist: What apartment type codes and apartment numbers do the buildings managed by "Kyle" have?, Apartment_Buildings, building_manager, [Kyle]
Picklist: Show the apartment numbers of apartments with bookings that have status code both "Provisional" and "Confirmed", Apartment_Bookings, booking_status_code, [Provisional]
Picklist: Show the apartment numbers of apartments with bookings that have status code both "Provisional" and "Confirmed", Apartment_Bookings, booking_status_code, [Confirmed]
Picklist: Which apartments have bookings with both status codes "Provisional" and "Confirmed"? Give me the apartment numbers., Apartment_Bookings, booking_status_code, [Provisional]
Picklist: Which apartments have bookings with both status codes "Provisional" and "Confirmed"? Give me the apartment numbers., Apartment_Bookings, booking_status_code, [Confirmed]
Picklist: What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?, injury_accident, Injury, [Knee problem]
Picklist: What is the season of the game which causes the player 'Walter Samuel' to get injured?, injury_accident, Player, [Walter Samuel]
Picklist: In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?, injury_accident, Injury, [Foot injury]
Picklist: In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?, injury_accident, Injury, [Knee problem]
Picklist: List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured., injury_accident, Player, [Thiago Motta]
Picklist: List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured., injury_accident, Player, [Walter Samuel]
Picklist: How many leagues are there in England?, Country, name, [England]
--------------------
text:  List the names of all players who have a crossing score higher than 90 and prefer their right foot.
sql:  SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing  >  90 AND T2.preferred_foot  =  "right"
ground truth values:  [('Player_Attributes.preferred_foot', 'right')]
matched values OrderedDict()
--------------------
--------------------
text:  List the names of all left-footed players who have overall rating between 85 and 90.
sql:  SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot  =  "left" AND T2.overall_rating  >=  85 AND T2.overall_rating  <=  90
ground truth values:  [('Player_Attributes.preferred_foot', 'left')]
matched values OrderedDict()
--------------------
--------------------
text:  List all of the ids for left-footed players with a height between 180cm and 190cm.
sql:   15%|█▍        | 1305/8943 [01:47<59:32,  2.14it/s] 15%|█▍        | 1307/8943 [01:48<59:14,  2.15it/s] 15%|█▍        | 1317/8943 [01:48<41:47,  3.04it/s] 15%|█▍        | 1323/8943 [01:48<31:39,  4.01it/s] 15%|█▍        | 1327/8943 [01:49<27:31,  4.61it/s] 15%|█▍        | 1330/8943 [01:49<26:39,  4.76it/s] 15%|█▍        | 1332/8943 [01:50<24:58,  5.08it/s] 15%|█▍        | 1334/8943 [01:50<23:38,  5.37it/s] 15%|█▍        | 1336/8943 [01:50<20:41,  6.13it/s] 15%|█▍        | 1338/8943 [01:50<18:16,  6.93it/s] 15%|█▍        | 1340/8943 [01:51<16:47,  7.54it/s] 15%|█▌        | 1342/8943 [01:51<16:20,  7.75it/s] 15%|█▌        | 1343/8943 [01:51<16:16,  7.78it/s] 15%|█▌        | 1344/8943 [01:51<16:14,  7.79it/s] 15%|█▌        | 1345/8943 [01:51<18:18,  6.91it/s] 15%|█▌        | 1346/8943 [01:52<19:56,  6.35it/s] 15%|█▌        | 1347/8943 [01:52<18:24,  6.87it/s] 15%|█▌        | 1348/8943 [01:52<17:16,  7.32it/s] 15%|█▌        | 1349/8943 [01:52<17:17,  7.32it/s] 15%|█▌        | 1350/8943 [01:52<16:42,  7.57it/s] 15%|█▌        | 1351/8943 [01:52<16:16,  7.78it/s] 15%|█▌        | 1352/8943 [01:52<16:25,  7.70it/s]SELECT player_api_id FROM Player WHERE height  >=  180 AND height  <=  190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot  =  "left"
ground truth values:  [('Player_Attributes.preferred_foot', 'left')]
matched values OrderedDict()
--------------------
Picklist: Show the attendances of the performances at location "TD Garden" or "Bell Centre", performance, Location, [Bell Centre]
Picklist: Show the attendances of the performances at location "TD Garden" or "Bell Centre", performance, Location, [TD Garden]
Picklist: Show the dates of performances with attending members whose roles are "Violin"., member, Role, [Violin]
Picklist: Count the number of rooms that are not in the Lamberton building., classroom, building, [Lamberton]
Picklist: Count the number of rooms that are not in the Lamberton building., department, building, [Lamberton]
Picklist: Count the number of rooms that are not in the Lamberton building., section, building, [Lamberton]
--------------------
text:  Count the number of rooms that are not in the Lamberton building.
sql:  SELECT count(*) FROM classroom WHERE building != 'Lamberton'
ground truth values:  [('classroom.building', 'Lamberton')]
matched values OrderedDict([(6, ('classroom.building', 'Lamberton')), (21, ('department.building', 'Lamberton')), (63, ('section.building', 'Lamberton'))])
--------------------
Picklist: How many classrooms are not in Lamberton?, classroom, building, [Lamberton]
Picklist: How many classrooms are not in Lamberton?, department, building, [Lamberton]
Picklist: How many classrooms are not in Lamberton?, section, building, [Lamberton]
--------------------
text:  How many classrooms are not in Lamberton?
sql:  SELECT count(*) FROM classroom WHERE building != 'Lamberton'
ground truth values:  [('classroom.building', 'Lamberton')]
matched values OrderedDict([(6, ('classroom.building', 'Lamberton')), (21, ('department.building', 'Lamberton')), (63, ('section.building', 'Lamberton'))])
--------------------
Picklist: What is the name of the student who has the highest total credits in the History department., department, dept_name, [History]
Picklist: What is the name of the student who has the highest total credits in the History department., course, dept_name, [History]
Picklist: What is the name of the student who has the highest total credits in the History department., student, dept_name, [History]
--------------------
text:  What is the name of the student who has the highest total credits in the History department.
sql:  SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1
ground truth values:  [('student.dept_name', 'History')]
matched values OrderedDict([(16, ('department.dept_name', 'History')), (32, ('course.dept_name', 'History')), (91, ('student.dept_name', 'History'))])
--------------------
Picklist: Give the name of the student in the History department with the most credits., department, dept_name, [History]
Picklist: Give the name of the student in the History department with the most credits., course, dept_name, [History]
Picklist: Give the name of the student in the History department with the most credits., student, dept_name, [History]
--------------------
text:  Give the name of the student in the History department with the most credits.
sql:  SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1
ground truth values:  [('student.dept_name', 'History')]
matched values OrderedDict([(16, ('department.dept_name', 'History')), (32, ('course.dept_name', 'History')), (91, ('student.dept_name', 'History'))])
--------------------
Picklist: How many rooms does the Lamberton building have?, classroom, building, [Lamberton]
Picklist: How many rooms does the Lamberton building have?, department, building, [Lamberton]
Picklist: How many rooms does the Lamberton building have?, section, building, [Lamberton]
--------------------
text:  How many rooms does the Lamberton building have?
sql:  SELECT count(*) FROM classroom WHERE building  =  'Lamberton'
ground truth values:  [('classroom.building', 'Lamberton')]
matched values OrderedDict([(6, ('classroom.building', 'Lamberton')), (21, ('department.building', 'Lamberton')), (63, ('section.building', 'Lamberton'))])
--------------------
Picklist: Count the number of classrooms in Lamberton., classroom, building, [Lamberton]
Picklist: Count the number of classrooms in Lamberton., department, building, [Lamberton]
Picklist: Count the number of classrooms in Lamberton., section, building, [Lamberton]
--------------------
text:  Count the number of classrooms in Lamberton.
sql:  SELECT count(*) FROM classroom WHERE building  =  'Lamberton'
ground truth values:  [('classroom.building', 'Lamberton')]
matched values OrderedDict([(6, ('classroom.building', 'Lamberton')), (21, ('department.building', 'Lamberton')), (63, ('section.building', 'Lamberton'))])
--------------------
Picklist: How many different courses offered by Physics department?, department, dept_name, [Physics]
Picklist: How many different courses offered by Physics department?, course, dept_name, [Physics]
Picklist: How many different courses offered by Physics department?, instructor, dept_name, [Physics]
Picklist: How many different courses offered by Physics department?, student, dept_name, [Physics]
--------------------
text:  How many different courses offered by Physics department?
sql:  SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'
ground truth values:  [('course.dept_name', 'Physics')]
matched values OrderedDict([(16, ('department.dept_name', 'Physics')), (32, ('course.dept_name', 'Physics')), (45, ('instructor.dept_name', 'Physics')), (93, ('student.dept_name', 'Physics'))])
--------------------
Picklist: Count the number of courses in the Physics department., department, dept_name, [Physics]
Picklist: Count the number of courses in the Physics department., course, dept_name, [Physics]
Picklist: Count the number of courses in the Physics department., instructor, dept_name, [Physics]
Picklist: Count the number of courses in the Physics department., student, dept_name, [Physics]
--------------------
text:  Count the number of courses in the Physics department.
sql:  SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'
ground truth values:  [('course.dept_name', 'Physics')]
matched values OrderedDict([(16, ('department.dept_name', 'Physics')), (32, ('course.dept_name', 'Physics')), (45, ('instructor.dept_name', 'Physics')), (93, ('student.dept_name', 'Physics'))])
--------------------
Picklist: Find the total budgets of the Marketing or Finance department., department, dept_name, [Marketing]
Picklist: Find the total budgets of the Marketing or Finance department., department, dept_name, [Finance]
Picklist: Find the total budgets of the Marketing or Finance department., course, dept_name, [Marketing]
Picklist: Find the total budgets of the Marketing or Finance department., course, dept_name, [Finance]
Picklist: Find the total budgets of the Marketing or Finance department., instructor, dept_name, [Marketing]
Picklist: Find the total budgets of the Marketing or Finance department., instructor, dept_name, [Finance]
Picklist: Find the total budgets of the Marketing or Finance department., student, name, [Finance]
Picklist: Find the total budgets of the Marketing or Finance department., student, dept_name, [Marketing]
Picklist: Find the total budgets of the Marketing or Finance department., student, dept_name, [Finance]
--------------------
text:  Find the total budgets of the Marketing or Finance department.
sql:  SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'
ground truth values:  [('department.dept_name', 'Marketing'), ('department.dept_name', 'Finance')]
matched values  15%|█▌        | 1353/8943 [01:52<16:30,  7.66it/s] 15%|█▌        | 1354/8943 [01:53<16:54,  7.48it/s] 15%|█▌        | 1355/8943 [01:53<17:24,  7.27it/s] 15%|█▌        | 1356/8943 [01:53<18:19,  6.90it/s] 15%|█▌        | 1357/8943 [01:53<19:23,  6.52it/s] 15%|█▌        | 1358/8943 [01:53<19:28,  6.49it/s] 15%|█▌        | 1359/8943 [01:53<19:57,  6.33it/s] 15%|█▌        | 1360/8943 [01:54<20:07,  6.28it/s] 15%|█▌        | 1361/8943 [01:54<20:52,  6.06it/s] 15%|█▌        | 1362/8943 [01:54<20:27,  6.17it/s] 15%|█▌        | 1363/8943 [01:54<20:44,  6.09it/s]OrderedDict([(16, ('department.dept_name', 'Marketing')), (18, ('department.dept_name', 'Finance')), (34, ('course.dept_name', 'Marketing')), (36, ('course.dept_name', 'Finance')), (49, ('instructor.dept_name', 'Marketing')), (51, ('instructor.dept_name', 'Finance')), (96, ('student.name', 'Finance')), (101, ('student.dept_name', 'Marketing')), (103, ('student.dept_name', 'Finance'))])
--------------------
Picklist: What is the sum of budgets of the Marketing and Finance departments?, department, dept_name, [Marketing]
Picklist: What is the sum of budgets of the Marketing and Finance departments?, department, dept_name, [Finance]
Picklist: What is the sum of budgets of the Marketing and Finance departments?, course, dept_name, [Marketing]
Picklist: What is the sum of budgets of the Marketing and Finance departments?, course, dept_name, [Finance]
Picklist: What is the sum of budgets of the Marketing and Finance departments?, instructor, dept_name, [Marketing]
Picklist: What is the sum of budgets of the Marketing and Finance departments?, instructor, dept_name, [Finance]
Picklist: What is the sum of budgets of the Marketing and Finance departments?, student, name, [Finance]
Picklist: What is the sum of budgets of the Marketing and Finance departments?, student, dept_name, [Marketing]
Picklist: What is the sum of budgets of the Marketing and Finance departments?, student, dept_name, [Finance]
--------------------
text:  What is the sum of budgets of the Marketing and Finance departments?
sql:  SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'
ground truth values:  [('department.dept_name', 'Marketing'), ('department.dept_name', 'Finance')]
matched values OrderedDict([(16, ('department.dept_name', 'Marketing')), (18, ('department.dept_name', 'Finance')), (34, ('course.dept_name', 'Marketing')), (36, ('course.dept_name', 'Finance')), (49, ('instructor.dept_name', 'Marketing')), (51, ('instructor.dept_name', 'Finance')), (96, ('student.name', 'Finance')), (101, ('student.dept_name', 'Marketing')), (103, ('student.dept_name', 'Finance'))])
--------------------
Picklist: How many rooms whose capacity is less than 50 does the Lamberton building have?, classroom, building, [Lamberton]
Picklist: How many rooms whose capacity is less than 50 does the Lamberton building have?, department, building, [Lamberton]
Picklist: How many rooms whose capacity is less than 50 does the Lamberton building have?, section, building, [Lamberton]
--------------------
text:  How many rooms whose capacity is less than 50 does the Lamberton building have?
sql:  SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50
ground truth values:  [('classroom.building', 'Lamberton')]
matched values OrderedDict([(6, ('classroom.building', 'Lamberton')), (21, ('department.building', 'Lamberton')), (63, ('section.building', 'Lamberton'))])
--------------------
Picklist: Count the number of rooms in Lamberton with capacity lower than 50., classroom, building, [Lamberton]
Picklist: Count the number of rooms in Lamberton with capacity lower than 50., department, building, [Lamberton]
Picklist: Count the number of rooms in Lamberton with capacity lower than 50., section, building, [Lamberton]
--------------------
text:  Count the number of rooms in Lamberton with capacity lower than 50.
sql:  SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50
ground truth values:  [('classroom.building', 'Lamberton')]
matched values OrderedDict([(6, ('classroom.building', 'Lamberton')), (21, ('department.building', 'Lamberton')), (63, ('section.building', 'Lamberton'))])
--------------------
Picklist: what is the name of the instructor who is in Statistics department and earns the lowest salary?, department, dept_name, [Statistics]
Picklist: what is the name of the instructor who is in Statistics department and earns the lowest salary?, course, dept_name, [Statistics]
Picklist: what is the name of the instructor who is in Statistics department and earns the lowest salary?, instructor, dept_name, [Statistics]
Picklist: what is the name of the instructor who is in Statistics department and earns the lowest salary?, student, dept_name, [Statistics]
--------------------
text:  what is the name of the instructor who is in Statistics department and earns the lowest salary?
sql:  SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1
ground truth values:  [('instructor.dept_name', 'Statistics')]
matched values OrderedDict([(16, ('department.dept_name', 'Statistics')), (32, ('course.dept_name', 'Statistics')), (45, ('instructor.dept_name', 'Statistics')), (93, ('student.dept_name', 'Statistics'))])
--------------------
Picklist: Give the name of the lowest earning instructor in the Statistics department., department, dept_name, [Statistics]
Picklist: Give the name of the lowest earning instructor in the Statistics department., course, dept_name, [Statistics]
Picklist: Give the name of the lowest earning instructor in the Statistics department., instructor, dept_name, [Statistics]
Picklist: Give the name of the lowest earning instructor in the Statistics department., student, dept_name, [Statistics]
--------------------
text:  Give the name of the lowest earning instructor in the Statistics department.
sql:  SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1
ground truth values:  [('instructor.dept_name', 'Statistics')]
matched values OrderedDict([(16, ('department.dept_name', 'Statistics')), (32, ('course.dept_name', 'Statistics')), (45, ('instructor.dept_name', 'Statistics')), (93, ('student.dept_name', 'Statistics'))])
--------------------
Picklist: Find the title of course that is provided by both Statistics and Psychology departments., department, dept_name, [Psychology]
Picklist: Find the title of course that is provided by both Statistics and Psychology departments., department, dept_name, [Statistics]
Picklist: Find the title of course that is provided by both Statistics and Psychology departments., course, dept_name, [Psychology]
Picklist: Find the title of course that is provided by both Statistics and Psychology departments., course, dept_name, [Statistics]
Picklist: Find the title of course that is provided by both Statistics and Psychology departments., instructor, dept_name, [Statistics]
Picklist: Find the title of course that is provided by both Statistics and Psychology departments., instructor, dept_name, [Psychology]
Picklist: Find the title of course that is provided by both Statistics and Psychology departments., student, dept_name, [Psychology]
Picklist: Find the title of course that is provided by both Statistics and Psychology departments., student, dept_name, [Statistics]
--------------------
text:  Find the title of course that is provided by both Statistics and Psychology departments.
sql:  SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'
ground truth values:  [('course.dept_name', 'Statistics'), ('course.dept_name', 'Psychology')]
matched values OrderedDict([(16, ('department.dept_name', 'Psychology')), (18, ('department.dept_name', 'Statistics')), (34, ('course.dept_name', 'Psychology')), (36, ('course.dept_name', 'Statistics')), (49, ('instructor.dept_name', 'Statistics')), (51, ('instructor.dept_name', 'Psychology')), (99, ('student.dept_name', 'Psychology')), (101, ('student.dept_name', 'Statistics'))])
--------------------
Picklist: What is the title of a course that is listed in both the Statistics and Psychology departments?, department, dept_name, [Psychology]
Picklist: What is the title of a course that is listed in both the Statistics and Psychology departments?, department, dept_name, [Statistics]
Picklist: What is the title of a course that is listed in both the Statistics and Psychology departments?, course, dept_name, [Psychology]
Picklist: What is the title of a course that is listed in both the Statistics and Psychology departments?, course, dept_name, [Statistics]
 15%|█▌        | 1364/8943 [01:54<21:23,  5.90it/s] 15%|█▌        | 1365/8943 [01:54<21:17,  5.93it/s] 15%|█▌        | 1366/8943 [01:55<22:00,  5.74it/s] 15%|█▌        | 1367/8943 [01:55<22:24,  5.64it/s] 15%|█▌        | 1368/8943 [01:55<23:13,  5.43it/s] 15%|█▌        | 1369/8943 [01:55<23:10,  5.45it/s] 15%|█▌        | 1370/8943 [01:55<22:31,  5.60it/s] 15%|█▌        | 1371/8943 [01:55<22:03,  5.72it/s] 15%|█▌        | 1372/8943 [01:56<20:45,  6.08it/s] 15%|█▌        | 1373/8943 [01:56<20:00,  6.30it/s] 15%|█▌        | 1374/8943 [01:56<18:53,  6.68it/s] 15%|█▌        | 1375/8943 [01:56<18:30,  6.82it/s] 15%|█▌        | 1376/8943 [01:56<18:07,  6.96it/s] 15%|█▌        | 1377/8943 [01:56<16:32,  7.62it/s] 15%|█▌        | 1378/8943 [01:56<16:17,  7.74it/s] 15%|█▌        | 1379/8943 [01:57<17:44,  7.10it/s] 15%|█▌        | 1380/8943 [01:57<18:13,  6.92it/s] 15%|█▌        | 1381/8943 [01:57<17:00,  7.41it/s] 15%|█▌        | 1382/8943 [01:57<16:06,  7.82it/s] 15%|█▌        | 1383/8943 [01:57<17:09,  7.34it/s] 15%|█▌        | 1384/8943 [01:57<18:01,  6.99it/s] 15%|█▌        | 1385/8943 [01:57<19:44,  6.38it/s] 15%|█▌        | 1386/8943 [01:58<21:28,  5.87it/s] 16%|█▌        | 1387/8943 [01:58<22:07,  5.69it/s] 16%|█▌        | 1388/8943 [01:58<23:22,  5.39it/s] 16%|█▌        | 1389/8943 [01:58<21:55,  5.74it/s] 16%|█▌        | 1390/8943 [01:58<20:51,  6.04it/s] 16%|█▌        | 1391/8943 [01:58<19:49,  6.35it/s] 16%|█▌        | 1392/8943 [01:59<19:08,  6.57it/s] 16%|█▌        | 1393/8943 [01:59<19:25,  6.48it/s] 16%|█▌        | 1394/8943 [01:59<19:07,  6.58it/s] 16%|█▌        | 1395/8943 [01:59<18:44,  6.71it/s] 16%|█▌        | 1396/8943 [01:59<18:33,  6.78it/s] 16%|█▌        | 1397/8943 [01:59<18:33,  6.78it/s] 16%|█▌        | 1398/8943 [01:59<18:43,  6.71it/s] 16%|█▌        | 1399/8943 [02:00<18:22,  6.84it/s] 16%|█▌        | 1400/8943 [02:00<17:28,  7.20it/s] 16%|█▌        | 1401/8943 [02:00<19:57,  6.30it/s] 16%|█▌        | 1402/8943 [02:00<20:44,  6.06it/s] 16%|█▌        | 1403/8943 [02:00<19:41,  6.38it/s] 16%|█▌        | 1404/8943 [02:00<18:37,  6.75it/s] 16%|█▌        | 1405/8943 [02:01<17:48,  7.06it/s] 16%|█▌        | 1406/8943 [02:01<16:40,  7.53it/s] 16%|█▌        | 1407/8943 [02:01<17:08,  7.33it/s] 16%|█▌        | 1408/8943 [02:01<16:42,  7.52it/s] 16%|█▌        | 1409/8943 [02:01<16:53,  7.43it/s] 16%|█▌        | 1410/8943 [02:01<16:51,  7.45it/s] 16%|█▌        | 1411/8943 [02:01<16:14,  7.73it/s] 16%|█▌        | 1412/8943 [02:01<15:19,  8.19it/s] 16%|█▌        | 1413/8943 [02:02<16:48,  7.46it/s] 16%|█▌        | 1414/8943 [02:02<16:19,  7.68it/s]Picklist: What is the title of a course that is listed in both the Statistics and Psychology departments?, instructor, dept_name, [Statistics]
Picklist: What is the title of a course that is listed in both the Statistics and Psychology departments?, instructor, dept_name, [Psychology]
Picklist: What is the title of a course that is listed in both the Statistics and Psychology departments?, student, dept_name, [Psychology]
Picklist: What is the title of a course that is listed in both the Statistics and Psychology departments?, student, dept_name, [Statistics]
--------------------
text:  What is the title of a course that is listed in both the Statistics and Psychology departments?
sql:  SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'
ground truth values:  [('course.dept_name', 'Statistics'), ('course.dept_name', 'Psychology')]
matched values OrderedDict([(16, ('department.dept_name', 'Psychology')), (18, ('department.dept_name', 'Statistics')), (34, ('course.dept_name', 'Psychology')), (36, ('course.dept_name', 'Statistics')), (49, ('instructor.dept_name', 'Statistics')), (51, ('instructor.dept_name', 'Psychology')), (99, ('student.dept_name', 'Psychology')), (101, ('student.dept_name', 'Statistics'))])
--------------------
Picklist: Find the title of course that is provided by Statistics but not Psychology departments., department, dept_name, [Psychology]
Picklist: Find the title of course that is provided by Statistics but not Psychology departments., department, dept_name, [Statistics]
Picklist: Find the title of course that is provided by Statistics but not Psychology departments., course, dept_name, [Psychology]
Picklist: Find the title of course that is provided by Statistics but not Psychology departments., course, dept_name, [Statistics]
Picklist: Find the title of course that is provided by Statistics but not Psychology departments., instructor, dept_name, [Statistics]
Picklist: Find the title of course that is provided by Statistics but not Psychology departments., instructor, dept_name, [Psychology]
Picklist: Find the title of course that is provided by Statistics but not Psychology departments., student, dept_name, [Psychology]
Picklist: Find the title of course that is provided by Statistics but not Psychology departments., student, dept_name, [Statistics]
--------------------
text:  Find the title of course that is provided by Statistics but not Psychology departments.
sql:  SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'
ground truth values:  [('course.dept_name', 'Statistics'), ('course.dept_name', 'Psychology')]
matched values OrderedDict([(16, ('department.dept_name', 'Psychology')), (18, ('department.dept_name', 'Statistics')), (34, ('course.dept_name', 'Psychology')), (36, ('course.dept_name', 'Statistics')), (49, ('instructor.dept_name', 'Statistics')), (51, ('instructor.dept_name', 'Psychology')), (99, ('student.dept_name', 'Psychology')), (101, ('student.dept_name', 'Statistics'))])
--------------------
Picklist: What are the titles of courses that are in the Statistics department but not the Psychology department?, department, dept_name, [Psychology]
Picklist: What are the titles of courses that are in the Statistics department but not the Psychology department?, department, dept_name, [Statistics]
Picklist: What are the titles of courses that are in the Statistics department but not the Psychology department?, course, dept_name, [Psychology]
Picklist: What are the titles of courses that are in the Statistics department but not the Psychology department?, course, dept_name, [Statistics]
Picklist: What are the titles of courses that are in the Statistics department but not the Psychology department?, instructor, dept_name, [Statistics]
Picklist: What are the titles of courses that are in the Statistics department but not the Psychology department?, instructor, dept_name, [Psychology]
Picklist: What are the titles of courses that are in the Statistics department but not the Psychology department?, student, dept_name, [Psychology]
Picklist: What are the titles of courses that are in the Statistics department but not the Psychology department?, student, dept_name, [Statistics]
--------------------
text:  What are the titles of courses that are in the Statistics department but not the Psychology department?
sql:  SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'
ground truth values:  [('course.dept_name', 'Statistics'), ('course.dept_name', 'Psychology')]
matched values OrderedDict([(16, ('department.dept_name', 'Psychology')), (18, ('department.dept_name', 'Statistics')), (34, ('course.dept_name', 'Psychology')), (36, ('course.dept_name', 'Statistics')), (49, ('instructor.dept_name', 'Statistics')), (51, ('instructor.dept_name', 'Psychology')), (99, ('student.dept_name', 'Psychology')), (101, ('student.dept_name', 'Statistics'))])
--------------------
Picklist: Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010., section, semester, [Spring]
Picklist: Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010., section, semester, [Fall]
Picklist: Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010., teaches, semester, [Spring]
Picklist: Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010., teaches, semester, [Fall]
Picklist: Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010., student, name, [Fall]
Picklist: Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010., takes, semester, [Spring]
Picklist: Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010., takes, semester, [Fall]
--------------------
text:  Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010.
sql:  SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010
ground truth values:  [('teaches.semester', 'Fall'), ('teaches.semester', 'Spring')]
matched values OrderedDict([(53, ('section.semester', 'Spring')), (55, ('section.semester', 'Fall')), (80, ('teaches.semester', 'Spring')), (82, ('teaches.semester', 'Fall')), (92, ('student.name', 'Fall')), (113, ('takes.semester', 'Spring')), (115, ('takes.semester', 'Fall'))])
--------------------
Picklist: What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010?, section, semester, [Spring]
Picklist: What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010?, section, semester, [Fall]
Picklist: What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010?, teaches, semester, [Spring]
Picklist: What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010?, teaches, semester, [Fall]
Picklist: What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010?, student, name, [Fall]
Picklist: What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010?, takes, semester, [Spring]
Picklist: What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010?, takes, semester, [Fall]
--------------------
text:  What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010?
sql:  SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010
ground truth values:  [('teaches.semester', 'Fall'), ('teaches.semester', 'Spring')]
matched values OrderedDict([(53, ('section.semester', 'Spring')), (55, ('section.semester', 'Fall')), (80, ('teaches.semester', 'Spring')), (82, ('teaches.semester', 'Fall')), (92, ('student.name', 'Fall')), (113, ('takes.semester', 'Spring')), (115, ('takes.semester', 'Fall'))])
--------------------
 16%|█▌        | 1415/8943 [02:02<17:38,  7.11it/s] 16%|█▌        | 1416/8943 [02:02<17:58,  6.98it/s] 16%|█▌        | 1417/8943 [02:02<20:02,  6.26it/s] 16%|█▌        | 1418/8943 [02:02<20:52,  6.01it/s] 16%|█▌        | 1419/8943 [02:03<19:27,  6.45it/s] 16%|█▌        | 1420/8943 [02:03<17:57,  6.98it/s] 16%|█▌        | 1422/8943 [02:03<15:00,  8.35it/s] 16%|█▌        | 1423/8943 [02:03<16:26,  7.62it/s] 16%|█▌        | 1424/8943 [02:03<17:11,  7.29it/s] 16%|█▌        | 1425/8943 [02:03<18:02,  6.95it/s] 16%|█▌        | 1426/8943 [02:03<18:31,  6.76it/s] 16%|█▌        | 1427/8943 [02:04<19:50,  6.31it/s]Picklist: What is the id of the instructor who advises of all students from History department?, department, dept_name, [History]
Picklist: What is the id of the instructor who advises of all students from History department?, course, dept_name, [History]
Picklist: What is the id of the instructor who advises of all students from History department?, student, dept_name, [History]
--------------------
text:  What is the id of the instructor who advises of all students from History department?
sql:  SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'
ground truth values:  [('student.dept_name', 'History')]
matched values OrderedDict([(16, ('department.dept_name', 'History')), (32, ('course.dept_name', 'History')), (91, ('student.dept_name', 'History'))])
--------------------
Picklist: Give id of the instructor who advises students in the History department., department, dept_name, [History]
Picklist: Give id of the instructor who advises students in the History department., course, dept_name, [History]
Picklist: Give id of the instructor who advises students in the History department., student, dept_name, [History]
--------------------
text:  Give id of the instructor who advises students in the History department.
sql:  SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'
ground truth values:  [('student.dept_name', 'History')]
matched values OrderedDict([(16, ('department.dept_name', 'History')), (32, ('course.dept_name', 'History')), (91, ('student.dept_name', 'History'))])
--------------------
Picklist: Find the name and salary of the instructors who are advisors of any student from History department?, department, dept_name, [History]
Picklist: Find the name and salary of the instructors who are advisors of any student from History department?, course, dept_name, [History]
Picklist: Find the name and salary of the instructors who are advisors of any student from History department?, student, dept_name, [History]
--------------------
text:  Find the name and salary of the instructors who are advisors of any student from History department?
sql:  SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'
ground truth values:  [('student.dept_name', 'History')]
matched values OrderedDict([(16, ('department.dept_name', 'History')), (32, ('course.dept_name', 'History')), (91, ('student.dept_name', 'History'))])
--------------------
Picklist: What are the names and salaries of instructors who advises students in the History department?, department, dept_name, [History]
Picklist: What are the names and salaries of instructors who advises students in the History department?, course, dept_name, [History]
Picklist: What are the names and salaries of instructors who advises students in the History department?, student, dept_name, [History]
--------------------
text:  What are the names and salaries of instructors who advises students in the History department?
sql:  SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'
ground truth values:  [('student.dept_name', 'History')]
matched values OrderedDict([(16, ('department.dept_name', 'History')), (32, ('course.dept_name', 'History')), (91, ('student.dept_name', 'History'))])
--------------------
Picklist: What is the title of the prerequisite class of International Finance course?, department, dept_name, [Finance]
Picklist: What is the title of the prerequisite class of International Finance course?, course, title, [International Finance]
Picklist: What is the title of the prerequisite class of International Finance course?, course, dept_name, [Finance]
Picklist: What is the title of the prerequisite class of International Finance course?, instructor, dept_name, [Finance]
Picklist: What is the title of the prerequisite class of International Finance course?, student, name, [Finance]
Picklist: What is the title of the prerequisite class of International Finance course?, student, dept_name, [Finance]
--------------------
text:  What is the title of the prerequisite class of International Finance course?
sql:  SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')
ground truth values:  [('course.title', 'International Finance')]
matched values OrderedDict([(16, ('department.dept_name', 'Finance')), (29, ('course.title', 'International Finance')), (35, ('course.dept_name', 'Finance')), (48, ('instructor.dept_name', 'Finance')), (93, ('student.name', 'Finance')), (98, ('student.dept_name', 'Finance'))])
--------------------
Picklist: Give the title of the prerequisite to the course International Finance., department, dept_name, [Finance]
Picklist: Give the title of the prerequisite to the course International Finance., course, title, [International Finance]
Picklist: Give the title of the prerequisite to the course International Finance., course, dept_name, [Finance]
Picklist: Give the title of the prerequisite to the course International Finance., instructor, dept_name, [Finance]
Picklist: Give the title of the prerequisite to the course International Finance., student, name, [Finance]
Picklist: Give the title of the prerequisite to the course International Finance., student, dept_name, [Finance]
--------------------
text:  Give the title of the prerequisite to the course International Finance.
sql:  SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')
ground truth values:  [('course.title', 'International Finance')]
matched values OrderedDict([(16, ('department.dept_name', 'Finance')), (29, ('course.title', 'International Finance')), (35, ('course.dept_name', 'Finance')), (48, ('instructor.dept_name', 'Finance')), (93, ('student.name', 'Finance')), (98, ('student.dept_name', 'Finance'))])
--------------------
Picklist: Find the title of course whose prerequisite is course Differential Geometry., course, title, [Differential Geometry]
Picklist: What is the title of the course with Differential Geometry as a prerequisite?, course, title, [Differential Geometry]
Picklist: Find the names of students who have taken any course in the fall semester of year 2003., section, semester, [Fall]
Picklist: Find the names of students who have taken any course in the fall semester of year 2003., teaches, semester, [Fall]
Picklist: Find the names of students who have taken any course in the fall semester of year 2003., student, name, [Fall]
Picklist: Find the names of students who have taken any course in the fall semester of year 2003., takes, semester, [Fall]
--------------------
text:  Find the names of students who have taken any course in the fall semester of year 2003.
sql:  SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)
ground truth values:  [('takes.semester', 'Fall')]
matched values OrderedDict([(53, ('section.semester', 'Fall')), (78, ('teaches.semester', 'Fall')), (88, ('student.name', 'Fall')), (109, ('takes.semester', 'Fall'))])
--------------------
Picklist: What are the names of students who took a course in the Fall of 2003?, section, semester, [Fall]
Picklist: What are the names of students who took a course in the Fall of 2003?, teaches, semester, [Fall]
Picklist: What are the names of students who took a course in the Fall of 2003?, student, name, [Fall]
Picklist: What are the names of students who took a course in the Fall of 2003?, takes, semester, [Fall]
--------------------
text:  What are the names of students who took a course in the Fall of 2003?
sql:  SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)
ground truth values:  [('takes.semester', 'Fall')]
matched values  16%|█▌        | 1428/8943 [02:04<19:53,  6.29it/s] 16%|█▌        | 1429/8943 [02:04<22:07,  5.66it/s] 16%|█▌        | 1430/8943 [02:04<21:50,  5.73it/s] 16%|█▌        | 1431/8943 [02:04<21:00,  5.96it/s] 16%|█▌        | 1432/8943 [02:04<20:24,  6.13it/s] 16%|█▌        | 1433/8943 [02:05<21:17,  5.88it/s] 16%|█▌        | 1434/8943 [02:05<21:33,  5.80it/s] 16%|█▌        | 1435/8943 [02:05<23:52,  5.24it/s] 16%|█▌        | 1436/8943 [02:05<24:39,  5.07it/s] 16%|█▌        | 1437/8943 [02:05<22:53,  5.46it/s]OrderedDict([(53, ('section.semester', 'Fall')), (78, ('teaches.semester', 'Fall')), (88, ('student.name', 'Fall')), (109, ('takes.semester', 'Fall'))])
--------------------
Picklist: What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?, classroom, building, [Chandler]
Picklist: What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?, department, building, [Chandler]
Picklist: What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?, section, semester, [Fall]
Picklist: What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?, section, building, [Chandler]
Picklist: What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?, teaches, semester, [Fall]
Picklist: What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?, student, name, [Fall]
Picklist: What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?, takes, semester, [Fall]
--------------------
text:  What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?
sql:  SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010
ground truth values:  [('section.building', 'Chandler'), ('section.semester', 'Fall')]
matched values OrderedDict([(6, ('classroom.building', 'Chandler')), (20, ('department.building', 'Chandler')), (57, ('section.semester', 'Fall')), (63, ('section.building', 'Chandler')), (84, ('teaches.semester', 'Fall')), (94, ('student.name', 'Fall')), (115, ('takes.semester', 'Fall'))])
--------------------
Picklist: Give the title of the course offered in Chandler during the Fall of 2010., classroom, building, [Chandler]
Picklist: Give the title of the course offered in Chandler during the Fall of 2010., department, building, [Chandler]
Picklist: Give the title of the course offered in Chandler during the Fall of 2010., section, semester, [Fall]
Picklist: Give the title of the course offered in Chandler during the Fall of 2010., section, building, [Chandler]
Picklist: Give the title of the course offered in Chandler during the Fall of 2010., teaches, semester, [Fall]
Picklist: Give the title of the course offered in Chandler during the Fall of 2010., student, name, [Fall]
Picklist: Give the title of the course offered in Chandler during the Fall of 2010., takes, semester, [Fall]
--------------------
text:  Give the title of the course offered in Chandler during the Fall of 2010.
sql:  SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010
ground truth values:  [('section.building', 'Chandler'), ('section.semester', 'Fall')]
matched values OrderedDict([(6, ('classroom.building', 'Chandler')), (20, ('department.building', 'Chandler')), (57, ('section.semester', 'Fall')), (63, ('section.building', 'Chandler')), (84, ('teaches.semester', 'Fall')), (94, ('student.name', 'Fall')), (115, ('takes.semester', 'Fall'))])
--------------------
--------------------
text:  Find the name of the instructors who taught C Programming course before.
sql:  SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'
ground truth values:  [('course.title', 'C Programming')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the names of instructors who have taught C Programming courses?
sql:  SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'
ground truth values:  [('course.title', 'C Programming')]
matched values OrderedDict()
--------------------
Picklist: Find the name and salary of instructors who are advisors of the students from the Math department., department, dept_name, [Math]
Picklist: Find the name and salary of instructors who are advisors of the students from the Math department., course, dept_name, [Math]
Picklist: Find the name and salary of instructors who are advisors of the students from the Math department., student, dept_name, [Math]
--------------------
text:  Find the name and salary of instructors who are advisors of the students from the Math department.
sql:  SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'
ground truth values:  [('student.dept_name', 'Math')]
matched values OrderedDict([(16, ('department.dept_name', 'Math')), (32, ('course.dept_name', 'Math')), (91, ('student.dept_name', 'Math'))])
--------------------
Picklist: What are the names and salaries of instructors who advise students in the Math department?, department, dept_name, [Math]
Picklist: What are the names and salaries of instructors who advise students in the Math department?, course, dept_name, [Math]
Picklist: What are the names and salaries of instructors who advise students in the Math department?, student, dept_name, [Math]
--------------------
text:  What are the names and salaries of instructors who advise students in the Math department?
sql:  SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'
ground truth values:  [('student.dept_name', 'Math')]
matched values OrderedDict([(16, ('department.dept_name', 'Math')), (32, ('course.dept_name', 'Math')), (91, ('student.dept_name', 'Math'))])
--------------------
Picklist: Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit., department, dept_name, [Math]
Picklist: Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit., course, dept_name, [Math]
Picklist: Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit., student, dept_name, [Math]
--------------------
text:  Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit.
sql:  SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred
ground truth values:  [('student.dept_name', 'Math')]
matched values OrderedDict([(16, ('department.dept_name', 'Math')), (32, ('course.dept_name', 'Math')), (91, ('student.dept_name', 'Math'))])
--------------------
Picklist: What are the names of all instructors who advise students in the math depart sorted by total credits of the student., department, dept_name, [Math]
Picklist: What are the names of all instructors who advise students in the math depart sorted by total credits of the student., course, dept_name, [Math]
Picklist: What are the names of all instructors who advise students in the math depart sorted by total credits of the student., student, dept_name, [Math]
--------------------
text:  What are the names of all instructors who advise students in the math depart sorted by total credits of the student.
sql:  SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred
ground truth values:  [('student.dept_name', 'Math')]
matched values OrderedDict([(16, ('department.dept_name', 'Math')), (32, ('course.dept_name', 'Math')), (91, ('student.dept_name', 'Math'))])
--------------------
Picklist: What is the course title of the prerequisite of course Mobile Computing?, course, title, [Mobile Computing]
 16%|█▌        | 1438/8943 [02:06<21:56,  5.70it/s] 16%|█▌        | 1439/8943 [02:06<22:50,  5.47it/s] 16%|█▌        | 1440/8943 [02:06<23:08,  5.40it/s] 16%|█▌        | 1441/8943 [02:06<20:59,  5.95it/s] 16%|█▌        | 1442/8943 [02:06<19:06,  6.54it/s] 16%|█▌        | 1443/8943 [02:06<17:57,  6.96it/s] 16%|█▌        | 1444/8943 [02:06<16:51,  7.41it/s] 16%|█▌        | 1445/8943 [02:07<17:48,  7.02it/s] 16%|█▌        | 1446/8943 [02:07<17:59,  6.94it/s] 16%|█▌        | 1447/8943 [02:07<18:35,  6.72it/s] 16%|█▌        | 1448/8943 [02:07<17:50,  7.00it/s] 16%|█▌        | 1449/8943 [02:07<19:44,  6.32it/s] 16%|█▌        | 1450/8943 [02:07<20:49,  6.00it/s] 16%|█▌        | 1451/8943 [02:08<22:30,  5.55it/s] 16%|█▌        | 1452/8943 [02:08<23:09,  5.39it/s] 16%|█▌        | 1453/8943 [02:08<22:14,  5.61it/s] 16%|█▋        | 1454/8943 [02:08<21:13,  5.88it/s] 16%|█▋        | 1455/8943 [02:08<21:20,  5.85it/s] 16%|█▋        | 1456/8943 [02:08<20:06,  6.20it/s] 16%|█▋        | 1457/8943 [02:09<21:55,  5.69it/s] 16%|█▋        | 1458/8943 [02:09<22:35,  5.52it/s] 16%|█▋        | 1459/8943 [02:09<24:01,  5.19it/s]Picklist: What is the title of the course that is a prerequisite for Mobile Computing?, course, title, [Mobile Computing]
Picklist: Find the names of instructors who didn't each any courses in any Spring semester., section, semester, [Spring]
Picklist: Find the names of instructors who didn't each any courses in any Spring semester., teaches, semester, [Spring]
Picklist: Find the names of instructors who didn't each any courses in any Spring semester., takes, semester, [Spring]
--------------------
text:  Find the names of instructors who didn't each any courses in any Spring semester.
sql:  SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')
ground truth values:  [('teaches.semester', 'Spring')]
matched values OrderedDict([(53, ('section.semester', 'Spring')), (78, ('teaches.semester', 'Spring')), (107, ('takes.semester', 'Spring'))])
--------------------
Picklist: What are the names of instructors who didn't teach courses in the Spring?, section, semester, [Spring]
Picklist: What are the names of instructors who didn't teach courses in the Spring?, teaches, semester, [Spring]
Picklist: What are the names of instructors who didn't teach courses in the Spring?, takes, semester, [Spring]
--------------------
text:  What are the names of instructors who didn't teach courses in the Spring?
sql:  SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')
ground truth values:  [('teaches.semester', 'Spring')]
matched values OrderedDict([(53, ('section.semester', 'Spring')), (78, ('teaches.semester', 'Spring')), (107, ('takes.semester', 'Spring'))])
--------------------
Picklist: Find the name of students who didn't take any course from Biology department., department, dept_name, [Biology]
Picklist: Find the name of students who didn't take any course from Biology department., course, dept_name, [Biology]
Picklist: Find the name of students who didn't take any course from Biology department., instructor, dept_name, [Biology]
Picklist: Find the name of students who didn't take any course from Biology department., student, dept_name, [Biology]
--------------------
text:  Find the name of students who didn't take any course from Biology department.
sql:  SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')
ground truth values:  [('course.dept_name', 'Biology')]
matched values OrderedDict([(16, ('department.dept_name', 'Biology')), (32, ('course.dept_name', 'Biology')), (45, ('instructor.dept_name', 'Biology')), (93, ('student.dept_name', 'Biology'))])
--------------------
Picklist: What are the names of students who haven't taken any Biology courses?, department, dept_name, [Biology]
Picklist: What are the names of students who haven't taken any Biology courses?, course, dept_name, [Biology]
Picklist: What are the names of students who haven't taken any Biology courses?, instructor, dept_name, [Biology]
Picklist: What are the names of students who haven't taken any Biology courses?, student, dept_name, [Biology]
--------------------
text:  What are the names of students who haven't taken any Biology courses?
sql:  SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')
ground truth values:  [('course.dept_name', 'Biology')]
matched values OrderedDict([(16, ('department.dept_name', 'Biology')), (32, ('course.dept_name', 'Biology')), (45, ('instructor.dept_name', 'Biology')), (93, ('student.dept_name', 'Biology'))])
--------------------
Picklist: Find the name of students who have taken the prerequisite course of the course with title International Finance., department, dept_name, [Finance]
Picklist: Find the name of students who have taken the prerequisite course of the course with title International Finance., course, title, [International Finance]
Picklist: Find the name of students who have taken the prerequisite course of the course with title International Finance., course, dept_name, [Finance]
Picklist: Find the name of students who have taken the prerequisite course of the course with title International Finance., instructor, dept_name, [Finance]
Picklist: Find the name of students who have taken the prerequisite course of the course with title International Finance., student, name, [Finance]
Picklist: Find the name of students who have taken the prerequisite course of the course with title International Finance., student, dept_name, [Finance]
--------------------
text:  Find the name of students who have taken the prerequisite course of the course with title International Finance.
sql:  SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')
ground truth values:  [('course.title', 'International Finance')]
matched values OrderedDict([(16, ('department.dept_name', 'Finance')), (29, ('course.title', 'International Finance')), (35, ('course.dept_name', 'Finance')), (48, ('instructor.dept_name', 'Finance')), (93, ('student.name', 'Finance')), (98, ('student.dept_name', 'Finance'))])
--------------------
Picklist: What are the names of students who have taken the prerequisite for the course International Finance?, department, dept_name, [Finance]
Picklist: What are the names of students who have taken the prerequisite for the course International Finance?, course, title, [International Finance]
Picklist: What are the names of students who have taken the prerequisite for the course International Finance?, course, dept_name, [Finance]
Picklist: What are the names of students who have taken the prerequisite for the course International Finance?, instructor, dept_name, [Finance]
Picklist: What are the names of students who have taken the prerequisite for the course International Finance?, student, name, [Finance]
Picklist: What are the names of students who have taken the prerequisite for the course International Finance?, student, dept_name, [Finance]
--------------------
text:  What are the names of students who have taken the prerequisite for the course International Finance?
sql:  SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')
ground truth values:  [('course.title', 'International Finance')]
matched values OrderedDict([(16, ('department.dept_name', 'Finance')), (29, ('course.title', 'International Finance')), (35, ('course.dept_name', 'Finance')), (48, ('instructor.dept_name', 'Finance')), (93, ('student.name', 'Finance')), (98, ('student.dept_name', 'Finance'))])
--------------------
Picklist: Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department., department, dept_name, [Physics]
Picklist: Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department., course, dept_name, [Physics]
Picklist: Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department., instructor, dept_name, [Physics]
Picklist: Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department., student, dept_name, [Physics]
--------------------
text:  Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department.
sql:  SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')
ground truth values:  [('instructor.dept_name', 'Physics')]
matched values OrderedDict([(16, ('department.dept_name', 'Physics')), (32, ('course.dept_name', 'Physics')), (45, ('instructor.dept_name', 'Physics')), (93, ('student.dept_name', 'Physics'))])
--------------------
 16%|█▋        | 1460/8943 [02:09<25:08,  4.96it/s] 16%|█▋        | 1461/8943 [02:09<23:40,  5.27it/s] 16%|█▋        | 1462/8943 [02:10<21:57,  5.68it/s] 16%|█▋        | 1463/8943 [02:10<23:30,  5.30it/s] 16%|█▋        | 1464/8943 [02:10<24:39,  5.06it/s] 16%|█▋        | 1465/8943 [02:10<22:14,  5.60it/s] 16%|█▋        | 1466/8943 [02:10<20:45,  6.01it/s] 16%|█▋        | 1467/8943 [02:10<20:43,  6.01it/s] 16%|█▋        | 1468/8943 [02:11<21:19,  5.84it/s] 16%|█▋        | 1469/8943 [02:11<20:51,  5.97it/s] 16%|█▋        | 1470/8943 [02:11<21:35,  5.77it/s] 16%|█▋        | 1471/8943 [02:11<22:09,  5.62it/s] 16%|█▋        | 1472/8943 [02:11<22:14,  5.60it/s] 16%|█▋        | 1473/8943 [02:11<20:56,  5.95it/s] 16%|█▋        | 1474/8943 [02:12<19:47,  6.29it/s] 16%|█▋        | 1475/8943 [02:12<18:45,  6.64it/s] 17%|█▋        | 1476/8943 [02:12<17:52,  6.96it/s]Picklist: What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department?, department, dept_name, [Physics]
Picklist: What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department?, course, dept_name, [Physics]
Picklist: What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department?, instructor, dept_name, [Physics]
Picklist: What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department?, student, dept_name, [Physics]
--------------------
text:  What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department?
sql:  SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')
ground truth values:  [('instructor.dept_name', 'Physics')]
matched values OrderedDict([(16, ('department.dept_name', 'Physics')), (32, ('course.dept_name', 'Physics')), (45, ('instructor.dept_name', 'Physics')), (93, ('student.dept_name', 'Physics'))])
--------------------
Picklist: Find the name of students who took some course offered by Statistics department., department, dept_name, [Statistics]
Picklist: Find the name of students who took some course offered by Statistics department., course, dept_name, [Statistics]
Picklist: Find the name of students who took some course offered by Statistics department., instructor, dept_name, [Statistics]
Picklist: Find the name of students who took some course offered by Statistics department., student, dept_name, [Statistics]
--------------------
text:  Find the name of students who took some course offered by Statistics department.
sql:  SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'
ground truth values:  [('course.dept_name', 'Statistics')]
matched values OrderedDict([(16, ('department.dept_name', 'Statistics')), (32, ('course.dept_name', 'Statistics')), (45, ('instructor.dept_name', 'Statistics')), (93, ('student.dept_name', 'Statistics'))])
--------------------
Picklist: What are the names of students who have taken Statistics courses?, department, dept_name, [Statistics]
Picklist: What are the names of students who have taken Statistics courses?, course, dept_name, [Statistics]
Picklist: What are the names of students who have taken Statistics courses?, instructor, dept_name, [Statistics]
Picklist: What are the names of students who have taken Statistics courses?, student, dept_name, [Statistics]
--------------------
text:  What are the names of students who have taken Statistics courses?
sql:  SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'
ground truth values:  [('course.dept_name', 'Statistics')]
matched values OrderedDict([(16, ('department.dept_name', 'Statistics')), (32, ('course.dept_name', 'Statistics')), (45, ('instructor.dept_name', 'Statistics')), (93, ('student.dept_name', 'Statistics'))])
--------------------
Picklist: Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles., department, dept_name, [Psychology]
Picklist: Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles., course, dept_name, [Psychology]
Picklist: Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles., instructor, dept_name, [Psychology]
Picklist: Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles., student, dept_name, [Psychology]
--------------------
text:  Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles.
sql:  SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title
ground truth values:  [('course.dept_name', 'Psychology')]
matched values OrderedDict([(16, ('department.dept_name', 'Psychology')), (32, ('course.dept_name', 'Psychology')), (45, ('instructor.dept_name', 'Psychology')), (93, ('student.dept_name', 'Psychology'))])
--------------------
Picklist: What are the building, room number, semester and year of courses in the Psychology department, sorted using course title?, department, dept_name, [Psychology]
Picklist: What are the building, room number, semester and year of courses in the Psychology department, sorted using course title?, course, dept_name, [Psychology]
Picklist: What are the building, room number, semester and year of courses in the Psychology department, sorted using course title?, instructor, dept_name, [Psychology]
Picklist: What are the building, room number, semester and year of courses in the Psychology department, sorted using course title?, student, dept_name, [Psychology]
--------------------
text:  What are the building, room number, semester and year of courses in the Psychology department, sorted using course title?
sql:  SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title
ground truth values:  [('course.dept_name', 'Psychology')]
matched values OrderedDict([(16, ('department.dept_name', 'Psychology')), (32, ('course.dept_name', 'Psychology')), (45, ('instructor.dept_name', 'Psychology')), (93, ('student.dept_name', 'Psychology'))])
--------------------
--------------------
text:  Find the names of all instructors in computer science department
sql:  SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'
ground truth values:  [('instructor.dept_name', 'Comp. Sci.')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the names of all instructors in the Comp. Sci. department?
sql:  SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'
ground truth values:  [('instructor.dept_name', 'Comp. Sci.')]
matched values OrderedDict()
--------------------
--------------------
text:  Find the names of all instructors in Comp. Sci. department with salary > 80000.
sql:  SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000
ground truth values:  [('instructor.dept_name', 'Comp. Sci.')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the names of the instructors in the Comp. Sci. department who earn more than 80000?
sql:  SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000
ground truth values:  [('instructor.dept_name', 'Comp. Sci.')]
matched values OrderedDict()
--------------------
--------------------
text:  Find the names of all instructors in the Art department who have taught some course and the course_id.
sql:  SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'
ground truth values:  [('instructor.dept_name', 'Art')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the names of Art instructors who have taught a course, and the corresponding course id?
sql:  SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'
ground truth values:  [('instructor.dept_name', 'Art')]
matched values OrderedDict()
--------------------
Picklist: Find courses that ran in Fall 2009 or in Spring 2010., section, semester, [Spring]
Picklist: Find courses that ran in Fall 2009 or in Spring 2010., section, semester, [Fall]
Picklist: Find courses that ran in Fall 2009 or in Spring 2010., teaches, semester, [Spring]
Picklist: Find courses that ran in Fall 2009 or in Spring 2010., teaches, semester, [Fall]
 17%|█▋        | 1477/8943 [02:12<18:02,  6.90it/s] 17%|█▋        | 1478/8943 [02:12<19:03,  6.53it/s] 17%|█▋        | 1479/8943 [02:12<18:56,  6.57it/s] 17%|█▋        | 1480/8943 [02:13<20:31,  6.06it/s] 17%|█▋        | 1481/8943 [02:13<20:09,  6.17it/s] 17%|█▋        | 1482/8943 [02:13<20:52,  5.96it/s] 17%|█▋        | 1483/8943 [02:13<20:42,  6.00it/s] 17%|█▋        | 1484/8943 [02:13<20:48,  5.97it/s]Picklist: Find courses that ran in Fall 2009 or in Spring 2010., student, name, [Fall]
Picklist: Find courses that ran in Fall 2009 or in Spring 2010., takes, semester, [Spring]
Picklist: Find courses that ran in Fall 2009 or in Spring 2010., takes, semester, [Fall]
--------------------
text:  Find courses that ran in Fall 2009 or in Spring 2010.
sql:  SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010
ground truth values:  [('section.semester', 'Fall'), ('section.semester', 'Spring')]
matched values OrderedDict([(53, ('section.semester', 'Spring')), (55, ('section.semester', 'Fall')), (80, ('teaches.semester', 'Spring')), (82, ('teaches.semester', 'Fall')), (92, ('student.name', 'Fall')), (113, ('takes.semester', 'Spring')), (115, ('takes.semester', 'Fall'))])
--------------------
Picklist: What are the ids for courses in the Fall of 2009 or the Spring of 2010?, section, semester, [Spring]
Picklist: What are the ids for courses in the Fall of 2009 or the Spring of 2010?, section, semester, [Fall]
Picklist: What are the ids for courses in the Fall of 2009 or the Spring of 2010?, teaches, semester, [Spring]
Picklist: What are the ids for courses in the Fall of 2009 or the Spring of 2010?, teaches, semester, [Fall]
Picklist: What are the ids for courses in the Fall of 2009 or the Spring of 2010?, student, name, [Fall]
Picklist: What are the ids for courses in the Fall of 2009 or the Spring of 2010?, takes, semester, [Spring]
Picklist: What are the ids for courses in the Fall of 2009 or the Spring of 2010?, takes, semester, [Fall]
--------------------
text:  What are the ids for courses in the Fall of 2009 or the Spring of 2010?
sql:  SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010
ground truth values:  [('section.semester', 'Fall'), ('section.semester', 'Spring')]
matched values OrderedDict([(53, ('section.semester', 'Spring')), (55, ('section.semester', 'Fall')), (80, ('teaches.semester', 'Spring')), (82, ('teaches.semester', 'Fall')), (92, ('student.name', 'Fall')), (113, ('takes.semester', 'Spring')), (115, ('takes.semester', 'Fall'))])
--------------------
Picklist: Find courses that ran in Fall 2009 and in Spring 2010., section, semester, [Spring]
Picklist: Find courses that ran in Fall 2009 and in Spring 2010., section, semester, [Fall]
Picklist: Find courses that ran in Fall 2009 and in Spring 2010., teaches, semester, [Spring]
Picklist: Find courses that ran in Fall 2009 and in Spring 2010., teaches, semester, [Fall]
Picklist: Find courses that ran in Fall 2009 and in Spring 2010., student, name, [Fall]
Picklist: Find courses that ran in Fall 2009 and in Spring 2010., takes, semester, [Spring]
Picklist: Find courses that ran in Fall 2009 and in Spring 2010., takes, semester, [Fall]
--------------------
text:  Find courses that ran in Fall 2009 and in Spring 2010.
sql:  SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010
ground truth values:  [('section.semester', 'Fall'), ('section.semester', 'Spring')]
matched values OrderedDict([(53, ('section.semester', 'Spring')), (55, ('section.semester', 'Fall')), (80, ('teaches.semester', 'Spring')), (82, ('teaches.semester', 'Fall')), (92, ('student.name', 'Fall')), (113, ('takes.semester', 'Spring')), (115, ('takes.semester', 'Fall'))])
--------------------
Picklist: What are the ids for courses that were offered in both Fall of 2009 and Spring of 2010?, section, semester, [Spring]
Picklist: What are the ids for courses that were offered in both Fall of 2009 and Spring of 2010?, section, semester, [Fall]
Picklist: What are the ids for courses that were offered in both Fall of 2009 and Spring of 2010?, teaches, semester, [Spring]
Picklist: What are the ids for courses that were offered in both Fall of 2009 and Spring of 2010?, teaches, semester, [Fall]
Picklist: What are the ids for courses that were offered in both Fall of 2009 and Spring of 2010?, student, name, [Fall]
Picklist: What are the ids for courses that were offered in both Fall of 2009 and Spring of 2010?, takes, semester, [Spring]
Picklist: What are the ids for courses that were offered in both Fall of 2009 and Spring of 2010?, takes, semester, [Fall]
--------------------
text:  What are the ids for courses that were offered in both Fall of 2009 and Spring of 2010?
sql:  SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010
ground truth values:  [('section.semester', 'Fall'), ('section.semester', 'Spring')]
matched values OrderedDict([(53, ('section.semester', 'Spring')), (55, ('section.semester', 'Fall')), (80, ('teaches.semester', 'Spring')), (82, ('teaches.semester', 'Fall')), (92, ('student.name', 'Fall')), (113, ('takes.semester', 'Spring')), (115, ('takes.semester', 'Fall'))])
--------------------
Picklist: Find courses that ran in Fall 2009 but not in Spring 2010., section, semester, [Spring]
Picklist: Find courses that ran in Fall 2009 but not in Spring 2010., section, semester, [Fall]
Picklist: Find courses that ran in Fall 2009 but not in Spring 2010., teaches, semester, [Spring]
Picklist: Find courses that ran in Fall 2009 but not in Spring 2010., teaches, semester, [Fall]
Picklist: Find courses that ran in Fall 2009 but not in Spring 2010., student, name, [Fall]
Picklist: Find courses that ran in Fall 2009 but not in Spring 2010., takes, semester, [Spring]
Picklist: Find courses that ran in Fall 2009 but not in Spring 2010., takes, semester, [Fall]
--------------------
text:  Find courses that ran in Fall 2009 but not in Spring 2010.
sql:  SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010
ground truth values:  [('section.semester', 'Fall'), ('section.semester', 'Spring')]
matched values OrderedDict([(53, ('section.semester', 'Spring')), (55, ('section.semester', 'Fall')), (80, ('teaches.semester', 'Spring')), (82, ('teaches.semester', 'Fall')), (92, ('student.name', 'Fall')), (113, ('takes.semester', 'Spring')), (115, ('takes.semester', 'Fall'))])
--------------------
Picklist: What are the ids of courses offered in Fall of 2009 but not in Spring of 2010?, section, semester, [Spring]
Picklist: What are the ids of courses offered in Fall of 2009 but not in Spring of 2010?, section, semester, [Fall]
Picklist: What are the ids of courses offered in Fall of 2009 but not in Spring of 2010?, teaches, semester, [Spring]
Picklist: What are the ids of courses offered in Fall of 2009 but not in Spring of 2010?, teaches, semester, [Fall]
Picklist: What are the ids of courses offered in Fall of 2009 but not in Spring of 2010?, student, name, [Fall]
Picklist: What are the ids of courses offered in Fall of 2009 but not in Spring of 2010?, takes, semester, [Spring]
Picklist: What are the ids of courses offered in Fall of 2009 but not in Spring of 2010?, takes, semester, [Fall]
--------------------
text:  What are the ids of courses offered in Fall of 2009 but not in Spring of 2010?
sql:  SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010
ground truth values:  [('section.semester', 'Fall'), ('section.semester', 'Spring')]
matched values OrderedDict([(53, ('section.semester', 'Spring')), (55, ('section.semester', 'Fall')), (80, ('teaches.semester', 'Spring')), (82, ('teaches.semester', 'Fall')), (92, ('student.name', 'Fall')), (113, ('takes.semester', 'Spring')), (115, ('takes.semester', 'Fall'))])
--------------------
Picklist: Find the total number of instructors who teach a course in the Spring 2010 semester., section, semester, [Spring]
Picklist: Find the total number of instructors who teach a course in the Spring 2010 semester., teaches, semester, [Spring]
 17%|█▋        | 1485/8943 [02:13<21:06,  5.89it/s] 17%|█▋        | 1486/8943 [02:14<20:02,  6.20it/s] 17%|█▋        | 1487/8943 [02:14<21:21,  5.82it/s] 17%|█▋        | 1488/8943 [02:14<21:59,  5.65it/s] 17%|█▋        | 1489/8943 [02:14<23:10,  5.36it/s] 17%|█▋        | 1490/8943 [02:14<23:20,  5.32it/s] 17%|█▋        | 1491/8943 [02:15<24:05,  5.16it/s] 17%|█▋        | 1492/8943 [02:15<24:18,  5.11it/s] 17%|█▋        | 1503/8943 [02:15<17:24,  7.13it/s] 17%|█▋        | 1510/8943 [02:15<12:43,  9.73it/s] 17%|█▋        | 1518/8943 [02:15<09:25, 13.12it/s] 17%|█▋        | 1524/8943 [02:15<07:27, 16.59it/s] 17%|█▋        | 1532/8943 [02:15<05:42, 21.61it/s]Picklist: Find the total number of instructors who teach a course in the Spring 2010 semester., takes, semester, [Spring]
--------------------
text:  Find the total number of instructors who teach a course in the Spring 2010 semester.
sql:  SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010
ground truth values:  [('teaches.semester', 'Spring')]
matched values OrderedDict([(53, ('section.semester', 'Spring')), (78, ('teaches.semester', 'Spring')), (107, ('takes.semester', 'Spring'))])
--------------------
Picklist: How many instructors teach a course in the Spring of 2010?, section, semester, [Spring]
Picklist: How many instructors teach a course in the Spring of 2010?, teaches, semester, [Spring]
Picklist: How many instructors teach a course in the Spring of 2010?, takes, semester, [Spring]
--------------------
text:  How many instructors teach a course in the Spring of 2010?
sql:  SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010
ground truth values:  [('teaches.semester', 'Spring')]
matched values OrderedDict([(53, ('section.semester', 'Spring')), (78, ('teaches.semester', 'Spring')), (107, ('takes.semester', 'Spring'))])
--------------------
Picklist: Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department., department, dept_name, [Biology]
Picklist: Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department., course, dept_name, [Biology]
Picklist: Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department., instructor, dept_name, [Biology]
Picklist: Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department., student, dept_name, [Biology]
--------------------
text:  Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department.
sql:  SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')
ground truth values:  [('instructor.dept_name', 'Biology')]
matched values OrderedDict([(16, ('department.dept_name', 'Biology')), (32, ('course.dept_name', 'Biology')), (45, ('instructor.dept_name', 'Biology')), (93, ('student.dept_name', 'Biology'))])
--------------------
Picklist: What are the names of instructors who earn more than at least one instructor from the Biology department?, department, dept_name, [Biology]
Picklist: What are the names of instructors who earn more than at least one instructor from the Biology department?, course, dept_name, [Biology]
Picklist: What are the names of instructors who earn more than at least one instructor from the Biology department?, instructor, dept_name, [Biology]
Picklist: What are the names of instructors who earn more than at least one instructor from the Biology department?, student, dept_name, [Biology]
--------------------
text:  What are the names of instructors who earn more than at least one instructor from the Biology department?
sql:  SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')
ground truth values:  [('instructor.dept_name', 'Biology')]
matched values OrderedDict([(16, ('department.dept_name', 'Biology')), (32, ('course.dept_name', 'Biology')), (45, ('instructor.dept_name', 'Biology')), (93, ('student.dept_name', 'Biology'))])
--------------------
Picklist: Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department., department, dept_name, [Biology]
Picklist: Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department., course, dept_name, [Biology]
Picklist: Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department., instructor, dept_name, [Biology]
Picklist: Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department., student, dept_name, [Biology]
--------------------
text:  Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department.
sql:  SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')
ground truth values:  [('instructor.dept_name', 'Biology')]
matched values OrderedDict([(16, ('department.dept_name', 'Biology')), (32, ('course.dept_name', 'Biology')), (45, ('instructor.dept_name', 'Biology')), (93, ('student.dept_name', 'Biology'))])
--------------------
Picklist: What are the names of all instructors with a higher salary than any of the instructors in the Biology department?, department, dept_name, [Biology]
Picklist: What are the names of all instructors with a higher salary than any of the instructors in the Biology department?, course, dept_name, [Biology]
Picklist: What are the names of all instructors with a higher salary than any of the instructors in the Biology department?, instructor, dept_name, [Biology]
Picklist: What are the names of all instructors with a higher salary than any of the instructors in the Biology department?, student, dept_name, [Biology]
--------------------
text:  What are the names of all instructors with a higher salary than any of the instructors in the Biology department?
sql:  SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')
ground truth values:  [('instructor.dept_name', 'Biology')]
matched values OrderedDict([(16, ('department.dept_name', 'Biology')), (32, ('course.dept_name', 'Biology')), (45, ('instructor.dept_name', 'Biology')), (93, ('student.dept_name', 'Biology'))])
--------------------
Picklist: Find all the policy type codes associated with the customer "Dayana Robel", Customers, Customer_Details, [Dayana Robel]
Picklist: What are the type codes of the policies used by the customer "Dayana Robel"?, Customers, Customer_Details, [Dayana Robel]
Picklist: Find the total amount claimed in the most recently created document., Claims_Documents, Document_Type_Code, [Document]
--------------------
text:  Find the total amount claimed in the most recently created document.
sql:  SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)
ground truth values:  []
matched values OrderedDict([(80, ('Claims_Documents.Document_Type_Code', 'Document'))])
--------------------
Picklist: How much amount in total were claimed in the most recently created document?, Claims_Documents, Document_Type_Code, [Document]
--------------------
text:  How much amount in total were claimed in the most recently created document?
sql:  SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)
ground truth values:  []
matched values OrderedDict([(80, ('Claims_Documents.Document_Type_Code', 'Document'))])
--------------------
Picklist: Find the names of the customers who have an deputy policy., Policies, Policy_Type_Code, [Deputy]
Picklist: Which customers have an insurance policy with the type code "Deputy"? Give me the customer details., Policies, Policy_Type_Code, [Deputy]
Picklist: Find the names of customers who either have an deputy policy or uniformed policy., Policies, Policy_Type_Code, [Uniformed]
Picklist: Find the names of customers who either have an deputy policy or uniformed policy., Policies, Policy_Type_Code, [Deputy]
--------------------
text:  Find the names of customers who either have an deputy policy or uniformed policy.
sql:  SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  "Deputy" OR t1.policy_type_code  =  "Uniform"
ground truth values:   17%|█▋        | 1539/8943 [02:15<04:33, 27.03it/s] 17%|█▋        | 1547/8943 [02:16<03:42, 33.21it/s] 17%|█▋        | 1554/8943 [02:16<03:09, 39.02it/s] 17%|█▋        | 1561/8943 [02:16<03:04, 40.00it/s] 18%|█▊        | 1568/8943 [02:16<02:47, 44.00it/s] 18%|█▊        | 1574/8943 [02:16<02:43, 45.11it/s] 18%|█▊        | 1583/8943 [02:16<02:20, 52.23it/s] 18%|█▊        | 1590/8943 [02:16<02:15, 54.14it/s] 18%|█▊        | 1597/8943 [02:16<02:11, 55.84it/s] 18%|█▊        | 1604/8943 [02:17<02:04, 59.09it/s] 18%|█▊        | 1611/8943 [02:21<26:22,  4.63it/s] 18%|█▊        | 1616/8943 [02:21<19:16,  6.34it/s] 18%|█▊        | 1623/8943 [02:22<14:07,  8.63it/s] 18%|█▊        | 1631/8943 [02:22<10:21, 11.76it/s] 18%|█▊        | 1640/8943 [02:22<07:40, 15.84it/s] 18%|█▊        | 1647/8943 [02:22<06:04, 20.03it/s] 19%|█▊        | 1659/8943 [02:22<04:33, 26.64it/s] 19%|█▊        | 1669/8943 [02:22<03:34, 33.98it/s] 19%|█▉        | 1678/8943 [02:22<03:01, 40.11it/s] 19%|█▉        | 1686/8943 [02:22<02:51, 42.36it/s] 19%|█▉        | 1696/8943 [02:22<02:21, 51.06it/s] 19%|█▉        | 1704/8943 [02:23<02:13, 54.21it/s] 19%|█▉        | 1712/8943 [02:23<02:04, 57.87it/s] 19%|█▉        | 1722/8943 [02:23<01:50, 65.50it/s] 19%|█▉        | 1730/8943 [02:23<01:48, 66.76it/s] 19%|█▉        | 1738/8943 [02:23<01:48, 66.62it/s] 20%|█▉        | 1750/8943 [02:23<01:33, 76.53it/s] 20%|█▉        | 1759/8943 [02:23<01:31, 78.87it/s] 20%|█▉        | 1768/8943 [02:23<01:33, 76.62it/s] 20%|█▉        | 1777/8943 [02:23<01:32, 77.71it/s] 20%|██        | 1790/8943 [02:24<01:22, 86.81it/s] 20%|██        | 1800/8943 [02:24<01:40, 70.79it/s] 20%|██        | 1808/8943 [02:24<01:48, 65.91it/s] 20%|██        | 1816/8943 [02:24<01:54, 62.22it/s] 20%|██        | 1823/8943 [02:24<02:03, 57.86it/s] 20%|██        | 1831/8943 [02:24<01:54, 62.32it/s] 21%|██        | 1838/8943 [02:24<01:54, 62.13it/s] 21%|██        | 1845/8943 [02:25<01:59, 59.23it/s][('Policies.Policy_Type_Code', 'Deputy'), ('Policies.Policy_Type_Code', 'Uniform')]
matched values OrderedDict([(30, ('Policies.Policy_Type_Code', 'Uniformed')), (32, ('Policies.Policy_Type_Code', 'Deputy'))])
--------------------
Picklist: Which customers have an insurance policy with the type code "Deputy" or "Uniform"? Return the customer details., Policies, Policy_Type_Code, [Deputy]
Picklist: Which customers have an insurance policy with the type code "Deputy" or "Uniform"? Return the customer details., Policies, Policy_Type_Code, [Uniformed]
--------------------
text:  Which customers have an insurance policy with the type code "Deputy" or "Uniform"? Return the customer details.
sql:  SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  "Deputy" OR t1.policy_type_code  =  "Uniform"
ground truth values:  [('Policies.Policy_Type_Code', 'Deputy'), ('Policies.Policy_Type_Code', 'Uniform')]
matched values OrderedDict([(30, ('Policies.Policy_Type_Code', 'Deputy')), (32, ('Policies.Policy_Type_Code', 'Uniformed'))])
--------------------
Picklist: What is the description of the claim status "Open"?, Claims_Processing_Stages, Claim_Status_Name, [Open]
Picklist: Find the description of the claim status "Open"., Claims_Processing_Stages, Claim_Status_Name, [Open]
Picklist: Show the id, the account name, and other account details for all accounts by the customer with first name 'Meaghan'., Customers, customer_first_name, [Meaghan]
Picklist: What are the ids, names, dates of opening, and other details for accounts corresponding to the customer with the first name "Meaghan"?, Customers, customer_first_name, [Meaghan]
Picklist: Show the account name and other account detail for all accounts by the customer with first name Meaghan and last name Keeling., Customers, customer_first_name, [Meaghan]
Picklist: Show the account name and other account detail for all accounts by the customer with first name Meaghan and last name Keeling., Customers, customer_last_name, [Keeling]
Picklist: What are the names and other details for accounts corresponding to the customer named Meaghan Keeling?, Customers, customer_first_name, [Meaghan]
Picklist: What are the names and other details for accounts corresponding to the customer named Meaghan Keeling?, Customers, customer_last_name, [Keeling]
--------------------
text:  How many female people are older than 30 in our record?
sql:  SELECT count(*) FROM people WHERE is_male  =  'F' AND age  >  30
ground truth values:  [('people.Is_Male', 'F')]
matched values OrderedDict()
--------------------
--------------------
text:  Show the name and age for all male people who don't have a wedding.
sql:  SELECT name ,  age FROM people WHERE is_male  =  'T' AND people_id NOT IN (SELECT male_id FROM wedding)
ground truth values:  [('people.Is_Male', 'T')]
matched values OrderedDict()
--------------------
Picklist: Show the names for all females from Canada having a wedding in year 2016., people, Country, [Canada]
--------------------
text:  Show the names for all females from Canada having a wedding in year 2016.
sql:  SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  2016 AND T2.is_male  =  'F' AND T2.country  =  'Canada'
ground truth values:  [('people.Is_Male', 'F'), ('people.Country', 'Canada')]
matched values OrderedDict([(11, ('people.Country', 'Canada'))])
--------------------
Picklist: Show all artist names and the year joined who are not from United States., artist, Country, [United States]
Picklist: What are the names and year of joining for artists that do not have the country "United States"?, artist, Country, [United States]
Picklist: What is the average and minimum age of all artists from United States., artist, Country, [United States]
Picklist: Return the average and minimum ages across artists from the United States., artist, Country, [United States]
Picklist: Find the id of the item whose title is "orange"., item, title, [orange]
Picklist: List the name and residence for players whose occupation is not "Researcher"., player, Occupation, [Researcher]
Picklist: Show the names of sponsors of players whose residence is either "Brandon" or "Birtle"., player, Residence, [Brandon]
Picklist: Show the names of sponsors of players whose residence is either "Brandon" or "Birtle"., player, Residence, [Birtle]
--------------------
text:  Show the residences that have both a player of gender "M" and a player of gender "F".
sql:  SELECT Residence FROM player WHERE gender  =  "M" INTERSECT SELECT Residence FROM player WHERE gender  =  "F"
ground truth values:  [('player.Gender', 'M'), ('player.Gender', 'F')]
matched values OrderedDict()
--------------------
Picklist: What are the names of gymnasts whose hometown is not "Santo Domingo"?, people, Hometown, [Santo Domingo]
Picklist: Return the names of gymnasts who did not grow up in Santo Domingo., people, Hometown, [Santo Domingo]
--------------------
text:  Find the total savings balance of all accounts except the account with name ‘Brown'.
sql:  SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'
ground truth values:  [('ACCOUNTS.name', 'Brown')]
matched values OrderedDict()
--------------------
Picklist: What is the total balance of savings accounts not belonging to someone with the name Brown?, ACCOUNTS, name, [Brown]
Picklist: Find the checking balance and saving balance in the Brown's account., ACCOUNTS, name, [Brown]
Picklist: What are the checking and savings balances in accounts belonging to Brown?, ACCOUNTS, name, [Brown]
Picklist: What is the id and market share of the browser Safari?, browser, name, [Safari]
Picklist: What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?, Web_client_accelerator, Connection, [Broadband]
Picklist: What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?, Web_client_accelerator, name, [CProxy]
Picklist: When did the web accelerator 'CACHEbox' and browser 'Internet Explorer' become compatible?, Web_client_accelerator, name, [CACHEbox]
Picklist: When did the web accelerator 'CACHEbox' and browser 'Internet Explorer' become compatible?, browser, name, [Internet Explorer]
Picklist: List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'., Web_client_accelerator, name, [Fasterfox]
Picklist: List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'., Web_client_accelerator, name, [CACHEbox]
--------------------
text:  Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'.
sql:  SELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT T1.name ,  T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.name  =  'Opera'
ground truth values:  [('browser.name', 'Opera')]
matched values OrderedDict()
--------------------
Picklist: Which accelerator name contains substring "Opera"?, browser, name, [Opera]
--------------------
text:  Which accelerator name contains substring "Opera"?
sql:  SELECT name FROM web_client_accelerator WHERE name LIKE "%Opera%"
ground truth values:  []
matched values OrderedDict([(23, ('browser.name', 'Opera'))])
--------------------
--------------------
text:  What are the distinct reigns of wrestlers whose location is not "Tokyo,Japan" ?
sql:  SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != "Tokyo , Japan"
ground truth values:  [('wrestler.Location', 'Tokyo , Japan')]
matched values OrderedDict()
--------------------
--------------------
text:  Give the different reigns of wrestlers who are not located in Tokyo, Japan.
sql:  SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != "Tokyo , Japan"
ground truth values:  [('wrestler.Location', 'Tokyo , Japan')]
matched values OrderedDict()
--------------------
 21%|██        | 1856/8943 [02:25<01:43, 68.69it/s] 21%|██        | 1864/8943 [02:25<01:43, 68.07it/s] 21%|██        | 1875/8943 [02:25<01:33, 75.97it/s] 21%|██        | 1884/8943 [02:25<01:32, 76.00it/s] 21%|██        | 1895/8943 [02:25<01:25, 82.42it/s] 21%|██▏       | 1904/8943 [02:25<01:31, 76.73it/s] 21%|██▏       | 1913/8943 [02:25<01:39, 70.35it/s] 21%|██▏       | 1921/8943 [02:26<01:42, 68.53it/s] 22%|██▏       | 1929/8943 [02:26<01:48, 64.41it/s] 22%|██▏       | 1940/8943 [02:26<01:37, 72.16it/s] 22%|██▏       | 1950/8943 [02:26<01:29, 78.26it/s] 22%|██▏       | 1959/8943 [02:26<01:34, 74.08it/s] 22%|██▏       | 1967/8943 [02:26<01:46, 65.73it/s] 22%|██▏       | 1975/8943 [02:26<01:41, 68.82it/s] 22%|██▏       | 1983/8943 [02:26<01:39, 70.27it/s] 22%|██▏       | 1991/8943 [02:27<01:39, 69.93it/s] 22%|██▏       | 2001/8943 [02:27<01:30, 76.48it/s] 22%|██▏       | 2012/8943 [02:27<01:23, 82.51it/s] 23%|██▎       | 2021/8943 [02:27<01:24, 82.24it/s] 23%|██▎       | 2030/8943 [02:27<01:30, 76.11it/s] 23%|██▎       | 2038/8943 [02:27<01:37, 71.18it/s] 23%|██▎       | 2048/8943 [02:27<01:29, 77.16it/s] 23%|██▎       | 2057/8943 [02:27<01:25, 80.07it/s] 23%|██▎       | 2066/8943 [02:33<21:58,  5.22it/s] 23%|██▎       | 2074/8943 [02:33<15:48,  7.24it/s] 23%|██▎       | 2081/8943 [02:33<11:34,  9.88it/s]Picklist: What are the elimination moves of wrestlers whose team is "Team Orton"?, Elimination, Team, [Team Orton]
Picklist: What are the elimination moves of wrestlers whose team is "Team Orton"?, Elimination, Eliminated_By, [Orton]
--------------------
text:  What are the elimination moves of wrestlers whose team is "Team Orton"?
sql:  SELECT Elimination_Move FROM Elimination WHERE Team  =  "Team Orton"
ground truth values:  [('Elimination.Team', 'Team Orton')]
matched values OrderedDict([(28, ('Elimination.Team', 'Team Orton')), (34, ('Elimination.Eliminated_By', 'Orton'))])
--------------------
Picklist: Return the elimination movies of wrestlers on Team Orton., Elimination, Team, [Team Orton]
Picklist: Return the elimination movies of wrestlers on Team Orton., Elimination, Eliminated_By, [Orton]
--------------------
text:  Return the elimination movies of wrestlers on Team Orton.
sql:  SELECT Elimination_Move FROM Elimination WHERE Team  =  "Team Orton"
ground truth values:  [('Elimination.Team', 'Team Orton')]
matched values OrderedDict([(28, ('Elimination.Team', 'Team Orton')), (34, ('Elimination.Eliminated_By', 'Orton'))])
--------------------
Picklist: Show the teams that have both wrestlers eliminated by "Orton" and wrestlers eliminated by "Benjamin"., Elimination, Eliminated_By, [Benjamin]
Picklist: Show the teams that have both wrestlers eliminated by "Orton" and wrestlers eliminated by "Benjamin"., Elimination, Eliminated_By, [Orton]
Picklist: What are the teams that have both wrestlers eliminated by Orton and wrestlers eliminated by Benjamin?, Elimination, Eliminated_By, [Benjamin]
Picklist: What are the teams that have both wrestlers eliminated by Orton and wrestlers eliminated by Benjamin?, Elimination, Eliminated_By, [Orton]
Picklist: Show the times of elimination by "Punk" or "Orton"., Elimination, Eliminated_By, [Punk]
Picklist: Show the times of elimination by "Punk" or "Orton"., Elimination, Eliminated_By, [Orton]
Picklist: What are the times of elimination for any instances in which the elimination was done by Punk or Orton?, Elimination, Eliminated_By, [Punk]
Picklist: What are the times of elimination for any instances in which the elimination was done by Punk or Orton?, Elimination, Eliminated_By, [Orton]
Picklist: How many donors have endowment for school named "Glenn"?, School, School_name, [Glenn]
Picklist: Show the names of donors who donated to both school "Glenn" and "Triton.", School, School_name, [Triton]
Picklist: Show the names of donors who donated to both school "Glenn" and "Triton.", School, School_name, [Glenn]
Picklist: What is the total budget amount for school "Glenn" in all years?, School, School_name, [Glenn]
Picklist: Show the names and locations of institutions that are founded after 1990 and have the type "Private"., Institution, Type, [Private]
Picklist: How many proteins are associated with an institution founded after 1880 or an institution with type "Private"?, Institution, Type, [Private]
Picklist: Are the customers holding coupons with amount 500 bad or good?, Customers, good_or_bad_customer, [good]
Picklist: Are the customers holding coupons with amount 500 bad or good?, Customers, good_or_bad_customer, [bad]
--------------------
text:  Are the customers holding coupons with amount 500 bad or good?
sql:  SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.coupon_amount  =  500
ground truth values:  []
matched values OrderedDict([(31, ('Customers.good_or_bad_customer', 'good')), (33, ('Customers.good_or_bad_customer', 'bad'))])
--------------------
Picklist: What are the start date and end date of the booking that has booked the product named 'Book collection A'?, Products_for_Hire, product_name, [Book collection A]
Picklist: What are the first name, last name, and gender of all the good customers? Order by their last name., Customers, good_or_bad_customer, [good]
Picklist: What are the coupon amount of the coupons owned by both good and bad customers?, Customers, good_or_bad_customer, [good]
Picklist: What are the coupon amount of the coupons owned by both good and bad customers?, Customers, good_or_bad_customer, [bad]
Picklist: What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check', Payments, payment_type_code, [Check]
Picklist: What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20?, Products_for_Hire, product_type_code, [Cutlery]
Picklist: Show the names of phones with carrier either "Sprint" or "TMobile"., phone, Carrier, [TMobile]
Picklist: Show the names of phones with carrier either "Sprint" or "TMobile"., phone, Carrier, [Sprint]
Picklist: Show the company name and the main industry for all companies whose headquarters are not from USA., company, Headquarters, [USA]
--------------------
text:  What are the companies and main industries of all companies that are not headquartered in the United States?
sql:  SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'
ground truth values:  [('company.Headquarters', 'USA')]
matched values OrderedDict()
--------------------
Picklist: Show headquarters with at least two companies in the banking industry., company, Main_Industry, [Banking]
Picklist: What are the headquarters with at least two companies in the banking industry?, company, Main_Industry, [Banking]
Picklist: Show all headquarters with both a company in banking industry and a company in Oil and gas., company, Main_Industry, [Oil and gas]
Picklist: Show all headquarters with both a company in banking industry and a company in Oil and gas., company, Main_Industry, [Banking]
Picklist: What are the headquarters that have both a company in the banking and 'oil and gas' industries?, company, Main_Industry, [Oil and gas]
Picklist: What are the headquarters that have both a company in the banking and 'oil and gas' industries?, company, Main_Industry, [Banking]
Picklist: Show all headquarters without a company in banking industry., company, Main_Industry, [Banking]
Picklist: What are the headquarters without companies that are in the banking industry?, company, Main_Industry, [Banking]
Picklist: Show the manager name for gas stations belonging to the ExxonMobil company., company, Company, [ExxonMobil]
Picklist: What are the names of the managers for gas stations that are operated by the ExxonMobil company?, company, Company, [ExxonMobil]
Picklist: find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion., company, Main_Industry, [Banking]
Picklist: What is the rank, company, and market value of every comapny in the banking industry ordered by sales and profits?, company, Main_Industry, [Banking]
Picklist: Show all ministers who do not belong to Progress Party., party, Party_name, [Progress Party]
Picklist: Which ministers are not a part of the Progress Party?, party, Party_name, [Progress Party]
Picklist: Show member names that are not in the Progress Party., party, Party_name, [Progress Party]
Picklist: Which member names corresponding to members who are not in the Progress Party?, party, Party_name, [Progress Party]
Picklist: How many Annual Meeting events happened in the United Kingdom region?, region, Region_name, [United Kingdom]
--------------------
text:  How many Annual Meeting events happened in the United Kingdom region?
sql:  SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  "United Kingdom" AND t3.Event_Name  =  "Annaual Meeting"
ground truth values:  [('region.Region_name', 'United Kingdom'), ('party_events.Event_Name', 'Annaual Meeting')]
matched values OrderedDict([(10, ('region.Region_name', 'United Kingdom'))])
--------------------
Picklist: Count the number of Annual Meeting events that took place in the region of the United Kingdom., region, Region_name, [United Kingdom]
--------------------
text:   23%|██▎       | 2088/8943 [02:33<08:35, 13.30it/s] 23%|██▎       | 2095/8943 [02:33<06:32, 17.45it/s] 24%|██▎       | 2104/8943 [02:33<04:58, 22.91it/s] 24%|██▎       | 2112/8943 [02:33<03:55, 28.98it/s] 24%|██▎       | 2120/8943 [02:34<03:17, 34.59it/s]Count the number of Annual Meeting events that took place in the region of the United Kingdom.
sql:  SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  "United Kingdom" AND t3.Event_Name  =  "Annaual Meeting"
ground truth values:  [('region.Region_name', 'United Kingdom'), ('party_events.Event_Name', 'Annaual Meeting')]
matched values OrderedDict([(10, ('region.Region_name', 'United Kingdom'))])
--------------------
Picklist: Show the names of pilots from team "Bradley" or "Fordham"., pilot, Team, [Bradley]
Picklist: Show the names of pilots from team "Bradley" or "Fordham"., pilot, Team, [Fordham]
Picklist: What is the description of document status code 'working'?, Ref_Document_Status, document_status_code, [working]
Picklist: What is the description of document status code 'working'?, Documents, document_status_code, [working]
--------------------
text:  What is the description of document status code 'working'?
sql:  SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = "working"
ground truth values:  [('Ref_Document_Status.document_status_code', 'working')]
matched values OrderedDict([(38, ('Ref_Document_Status.document_status_code', 'working')), (69, ('Documents.document_status_code', 'working'))])
--------------------
Picklist: What is the description of document type 'Paper'?, Ref_Document_Types, document_type_code, [Paper]
Picklist: What is the description of document type 'Paper'?, Documents, document_type_code, [Paper]
--------------------
text:  What is the description of document type 'Paper'?
sql:  SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = "Paper"
ground truth values:  [('Ref_Document_Types.document_type_code', 'Paper')]
matched values OrderedDict([(10, ('Ref_Document_Types.document_type_code', 'Paper')), (73, ('Documents.document_type_code', 'Paper'))])
--------------------
Picklist: What is the shipping agent code of shipping agent UPS?, Ref_Shipping_Agents, shipping_agent_name, [UPS]
Picklist: What is the description of role code ED?, Roles, role_code, [ED]
Picklist: What is the description of role code ED?, Employees, role_code, [ED]
--------------------
text:  What is the description of role code ED?
sql:  SELECT role_description FROM ROLES WHERE role_code = "ED"
ground truth values:  [('Roles.role_code', 'ED')]
matched values OrderedDict([(19, ('Roles.role_code', 'ED')), (94, ('Employees.role_code', 'ED'))])
--------------------
Picklist: What is the role of the employee named Koby?, Employees, employee_name, [Koby]
Picklist: How many documents have the status code done?, Ref_Document_Status, document_status_code, [done]
Picklist: How many documents have the status code done?, Documents, document_status_code, [done]
--------------------
text:  How many documents have the status code done?
sql:  SELECT count(*) FROM Documents WHERE document_status_code = "done"
ground truth values:  [('Documents.document_status_code', 'done')]
matched values OrderedDict([(38, ('Ref_Document_Status.document_status_code', 'done')), (69, ('Documents.document_status_code', 'done'))])
--------------------
Picklist: List the document ids for any documents with the status code done and the type code paper., Ref_Document_Types, document_type_code, [Paper]
Picklist: List the document ids for any documents with the status code done and the type code paper., Ref_Document_Status, document_status_code, [done]
Picklist: List the document ids for any documents with the status code done and the type code paper., Documents, document_status_code, [done]
Picklist: List the document ids for any documents with the status code done and the type code paper., Documents, document_type_code, [Paper]
--------------------
text:  List the document ids for any documents with the status code done and the type code paper.
sql:  SELECT document_id FROM Documents WHERE document_status_code = "done" AND document_type_code = "Paper"
ground truth values:  [('Documents.document_status_code', 'done'), ('Documents.document_type_code', 'Paper')]
matched values OrderedDict([(10, ('Ref_Document_Types.document_type_code', 'Paper')), (40, ('Ref_Document_Status.document_status_code', 'done')), (71, ('Documents.document_status_code', 'done')), (77, ('Documents.document_type_code', 'Paper'))])
--------------------
Picklist: How many documents were shipped by USPS?, Ref_Shipping_Agents, shipping_agent_name, [USPS]
Picklist: What address was the document with id 4 mailed to?, Ref_Document_Status, document_status_description, [mailed]
--------------------
text:  What address was the document with id 4 mailed to?
sql:  SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4
ground truth values:  []
matched values OrderedDict([(42, ('Ref_Document_Status.document_status_description', 'mailed'))])
--------------------
Picklist: List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS., Ref_Document_Types, document_type_code, [Paper]
Picklist: List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS., Ref_Document_Status, document_status_code, [done]
Picklist: List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS., Ref_Shipping_Agents, shipping_agent_name, [USPS]
Picklist: List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS., Documents, document_status_code, [done]
Picklist: List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS., Documents, document_type_code, [Paper]
--------------------
text:  List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS.
sql:  SELECT document_id FROM Documents WHERE document_status_code  =  "done" AND document_type_code = "Paper" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = "USPS"
ground truth values:  [('Documents.document_status_code', 'done'), ('Documents.document_type_code', 'Paper'), ('Ref_Shipping_Agents.shipping_agent_name', 'USPS')]
matched values OrderedDict([(10, ('Ref_Document_Types.document_type_code', 'Paper')), (40, ('Ref_Document_Status.document_status_code', 'done')), (58, ('Ref_Shipping_Agents.shipping_agent_name', 'USPS')), (74, ('Documents.document_status_code', 'done')), (80, ('Documents.document_type_code', 'Paper'))])
--------------------
Picklist: List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS., Ref_Document_Types, document_type_code, [Paper]
Picklist: List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS., Ref_Document_Status, document_status_code, [done]
Picklist: List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS., Ref_Shipping_Agents, shipping_agent_name, [USPS]
Picklist: List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS., Documents, document_status_code, [done]
Picklist: List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS., Documents, document_type_code, [Paper]
--------------------
text:  List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS.
sql:   24%|██▍       | 2127/8943 [02:34<02:57, 38.51it/s] 24%|██▍       | 2134/8943 [02:34<02:33, 44.36it/s] 24%|██▍       | 2141/8943 [02:34<02:16, 49.79it/s] 24%|██▍       | 2150/8943 [02:34<01:59, 57.02it/s]SELECT document_id FROM Documents WHERE document_status_code  =  "done" AND document_type_code = "Paper" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = "USPS"
ground truth values:  [('Documents.document_status_code', 'done'), ('Documents.document_type_code', 'Paper'), ('Ref_Shipping_Agents.shipping_agent_name', 'USPS')]
matched values OrderedDict([(10, ('Ref_Document_Types.document_type_code', 'Paper')), (40, ('Ref_Document_Status.document_status_code', 'done')), (58, ('Ref_Shipping_Agents.shipping_agent_name', 'USPS')), (74, ('Documents.document_status_code', 'done')), (80, ('Documents.document_type_code', 'Paper'))])
--------------------
Picklist: find all dependent names who have a spouse relation with some employee., dependent, Relationship, [Spouse]
--------------------
text:  how many female dependents are there?
sql:  SELECT count(*) FROM dependent WHERE sex  =  'F'
ground truth values:  [('dependent.Sex', 'F')]
matched values OrderedDict()
--------------------
Picklist: Find the names of departments that are located in Houston., project, Plocation, [Houston]
Picklist: Find the names of departments that are located in Houston., dept_locations, Dlocation, [Houston]
--------------------
text:  Find the names of departments that are located in Houston.
sql:  SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber  =  t2.dnumber WHERE t2.dlocation  =  'Houston'
ground truth values:  [('dept_locations.Dlocation', 'Houston')]
matched values OrderedDict([(71, ('project.Plocation', 'Houston')), (101, ('dept_locations.Dlocation', 'Houston'))])
--------------------
Picklist: what are the event details of the services that have the type code 'Marriage'?, Services, Service_Type_Code, [Marriage]
Picklist: What are the ids and details of events that have more than one participants?, Participants, Participant_Type_Code, [Participant]
--------------------
text:  What are the ids and details of events that have more than one participants?
sql:  SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1
ground truth values:  []
matched values OrderedDict([(20, ('Participants.Participant_Type_Code', 'Participant'))])
--------------------
Picklist: How many events have each participants attended? List the participant id, type and the number., Participants, Participant_Type_Code, [Participant]
--------------------
text:  How many events have each participants attended? List the participant id, type and the number.
sql:  SELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID
ground truth values:  []
matched values OrderedDict([(20, ('Participants.Participant_Type_Code', 'Participant'))])
--------------------
Picklist: What are all the the participant ids, type code and details?, Participants, Participant_Type_Code, [Participant]
--------------------
text:  What are all the the participant ids, type code and details?
sql:  SELECT Participant_ID ,  Participant_Type_Code ,  Participant_Details FROM  Participants
ground truth values:  []
matched values OrderedDict([(20, ('Participants.Participant_Type_Code', 'Participant'))])
--------------------
Picklist: How many participants belong to the type 'Organizer'?, Participants, Participant_Type_Code, [Organizer]
Picklist: How many participants belong to the type 'Organizer'?, Participants, Participant_Type_Code, [Participant]
--------------------
text:  How many participants belong to the type 'Organizer'?
sql:  SELECT count(*) FROM participants WHERE participant_type_code  =  'Organizer'
ground truth values:  [('Participants.Participant_Type_Code', 'Organizer')]
matched values OrderedDict([(20, ('Participants.Participant_Type_Code', 'Organizer')), (22, ('Participants.Participant_Type_Code', 'Participant'))])
--------------------
Picklist: How many events had participants whose details had the substring 'Dr.', Participants, Participant_Type_Code, [Participant]
--------------------
text:  How many events had participants whose details had the substring 'Dr.'
sql:  SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'
ground truth values:  []
matched values OrderedDict([(20, ('Participants.Participant_Type_Code', 'Participant'))])
--------------------
Picklist: What is the most common participant type?, Participants, Participant_Type_Code, [Participant]
--------------------
text:  What is the most common participant type?
sql:  SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(20, ('Participants.Participant_Type_Code', 'Participant'))])
--------------------
Picklist: Which service id and type has the least number of participants?, Participants, Participant_Type_Code, [Participant]
--------------------
text:  Which service id and type has the least number of participants?
sql:  SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1
ground truth values:  []
matched values OrderedDict([(20, ('Participants.Participant_Type_Code', 'Participant'))])
--------------------
Picklist: What is the id of the event with the most participants?, Participants, Participant_Type_Code, [Participant]
--------------------
text:  What is the id of the event with the most participants?
sql:  SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(20, ('Participants.Participant_Type_Code', 'Participant'))])
--------------------
Picklist: Which events id does not have any participant with detail 'Kenyatta Kuhn'?, Participants, Participant_Type_Code, [Participant]
Picklist: Which events id does not have any participant with detail 'Kenyatta Kuhn'?, Participants, Participant_Details, [Kenyatta Kuhn]
--------------------
text:  Which events id does not have any participant with detail 'Kenyatta Kuhn'?
sql:  SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'
ground truth values:  [('Participants.Participant_Details', 'Kenyatta Kuhn')]
matched values OrderedDict([(20, ('Participants.Participant_Type_Code', 'Participant')), (25, ('Participants.Participant_Details', 'Kenyatta Kuhn'))])
--------------------
--------------------
text:  Which services type had both successful and failure event details?
sql:  SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Success' INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Fail'
ground truth values:  [('Events.Event_Details', 'Success'), ('Events.Event_Details', 'Fail')]
matched values OrderedDict()
--------------------
Picklist: How many events did not have any participants?, Participants, Participant_Type_Code, [Participant]
--------------------
text:  How many events did not have any participants?
sql:  SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)
ground truth values:  []
matched values OrderedDict([(20, ('Participants.Participant_Type_Code', 'Participant'))])
--------------------
Picklist: What are all the distinct participant ids who attended any events?, Participants, Participant_Type_Code, [Participant]
--------------------
text:   24%|██▍       | 2158/8943 [02:37<15:29,  7.30it/s] 24%|██▍       | 2164/8943 [02:42<37:59,  2.97it/s] 24%|██▍       | 2168/8943 [02:45<52:06,  2.17it/s]What are all the distinct participant ids who attended any events?
sql:  SELECT count(DISTINCT participant_id) FROM participants_in_Events
ground truth values:  []
matched values OrderedDict([(20, ('Participants.Participant_Type_Code', 'Participant'))])
--------------------
Picklist: What is the name of the race held most recently?, constructors, constructorRef, [rae]
--------------------
text:  What is the name of the race held most recently?
sql:  SELECT name FROM races ORDER BY date DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(96, ('constructors.constructorRef', 'rae'))])
--------------------
Picklist: What is the name of the race that occurred most recently?, constructors, constructorRef, [rae]
--------------------
text:  What is the name of the race that occurred most recently?
sql:  SELECT name FROM races ORDER BY date DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(96, ('constructors.constructorRef', 'rae'))])
--------------------
Picklist: What is the name and date of the most recent race?, constructors, constructorRef, [rae]
--------------------
text:  What is the name and date of the most recent race?
sql:  SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(96, ('constructors.constructorRef', 'rae'))])
--------------------
Picklist: What is the name and date of the race that occurred most recently?, constructors, constructorRef, [rae]
--------------------
text:  What is the name and date of the race that occurred most recently?
sql:  SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(96, ('constructors.constructorRef', 'rae'))])
--------------------
Picklist: What are the unique names of all race held between 2014 and 2017?, constructors, constructorRef, [rae]
--------------------
text:  What are the unique names of all race held between 2014 and 2017?
sql:  SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017
ground truth values:  []
matched values OrderedDict([(96, ('constructors.constructorRef', 'rae'))])
--------------------
Picklist: List the forename and surname of all distinct drivers who once had laptime less than 93000 milliseconds?, drivers, driverRef, [driver]
--------------------
text:  List the forename and surname of all distinct drivers who once had laptime less than 93000 milliseconds?
sql:  SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver'))])
--------------------
Picklist: What are the forenames and surnames of all unique drivers who had a lap time of less than 93000 milliseconds?, drivers, driverRef, [driver]
--------------------
text:  What are the forenames and surnames of all unique drivers who had a lap time of less than 93000 milliseconds?
sql:  SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver'))])
--------------------
Picklist: Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?, drivers, driverRef, [driver]
--------------------
text:  Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?
sql:  SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver'))])
--------------------
Picklist: What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds?, drivers, driverRef, [driver]
Picklist: What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds?, drivers, surname, [Driver]
Picklist: What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds?, status, status, [Differential]
--------------------
text:  What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds?
sql:  SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver')), (65, ('drivers.surname', 'Driver')), (82, ('status.status', 'Differential'))])
--------------------
Picklist: What are the forename and surname of the driver who has the smallest laptime?, drivers, driverRef, [driver]
Picklist: What are the forename and surname of the driver who has the smallest laptime?, drivers, surname, [Driver]
--------------------
text:  What are the forename and surname of the driver who has the smallest laptime?
sql:  SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver')), (65, ('drivers.surname', 'Driver'))])
--------------------
Picklist: What is the forename and surname of the driver with the shortest laptime?, drivers, driverRef, [driver]
Picklist: What is the forename and surname of the driver with the shortest laptime?, drivers, surname, [Driver]
--------------------
text:  What is the forename and surname of the driver with the shortest laptime?
sql:  SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver')), (65, ('drivers.surname', 'Driver'))])
--------------------
Picklist: What is the id and family name of the driver who has the longest laptime?, drivers, driverRef, [driver]
Picklist: What is the id and family name of the driver who has the longest laptime?, drivers, surname, [Driver]
--------------------
text:  What is the id and family name of the driver who has the longest laptime?
sql:  SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver')), (65, ('drivers.surname', 'Driver'))])
--------------------
Picklist: What is the id and last name of the driver with the longest laptime?, drivers, driverRef, [driver]
Picklist: What is the id and last name of the driver with the longest laptime?, drivers, surname, [Driver]
--------------------
text:  What is the id and last name of the driver with the longest laptime?
sql:  SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver')), (65, ('drivers.surname', 'Driver'))])
--------------------
Picklist: What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice?, drivers, driverRef, [driver]
Picklist: What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice?, drivers, surname, [Driver]
--------------------
text:  What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice?
sql:  SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver')), (65, ('drivers.surname', 'Driver'))])
--------------------
Picklist: What is the id, first name, and last name of the driver who was in the first position for laptime at least twice?, drivers, driverRef, [driver]
 24%|██▍       | 2171/8943 [02:48<1:03:49,  1.77it/s] 24%|██▍       | 2173/8943 [02:49<1:09:10,  1.63it/s] 24%|██▍       | 2175/8943 [02:50<1:08:52,  1.64it/s] 24%|██▍       | 2176/8943 [02:51<1:13:36,  1.53it/s] 24%|██▍       | 2177/8943 [02:52<1:16:16,  1.48it/s] 24%|██▍       | 2178/8943 [02:52<1:14:53,  1.51it/s]Picklist: What is the id, first name, and last name of the driver who was in the first position for laptime at least twice?, drivers, surname, [Driver]
--------------------
text:  What is the id, first name, and last name of the driver who was in the first position for laptime at least twice?
sql:  SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver')), (65, ('drivers.surname', 'Driver'))])
--------------------
Picklist: How many drivers participated in the race Australian Grand Prix held in 2009?, circuits, country, [Australia]
Picklist: How many drivers participated in the race Australian Grand Prix held in 2009?, races, name, [Australian Grand Prix]
Picklist: How many drivers participated in the race Australian Grand Prix held in 2009?, drivers, driverRef, [driver]
Picklist: How many drivers participated in the race Australian Grand Prix held in 2009?, drivers, nationality, [Australian]
Picklist: How many drivers participated in the race Australian Grand Prix held in 2009?, constructors, constructorRef, [rae]
Picklist: How many drivers participated in the race Australian Grand Prix held in 2009?, constructors, nationality, [Australian]
--------------------
text:  How many drivers participated in the race Australian Grand Prix held in 2009?
sql:  SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = "Australian Grand Prix" AND YEAR = 2009
ground truth values:  [('races.name', 'Australian Grand Prix')]
matched values OrderedDict([(16, ('circuits.country', 'Australia')), (41, ('races.name', 'Australian Grand Prix')), (60, ('drivers.driverRef', 'driver')), (76, ('drivers.nationality', 'Australian')), (106, ('constructors.constructorRef', 'rae')), (112, ('constructors.nationality', 'Australian'))])
--------------------
Picklist: How many drivers were in the Australian Grand Prix held in 2009?, circuits, country, [Australia]
Picklist: How many drivers were in the Australian Grand Prix held in 2009?, races, name, [Australian Grand Prix]
Picklist: How many drivers were in the Australian Grand Prix held in 2009?, drivers, driverRef, [driver]
Picklist: How many drivers were in the Australian Grand Prix held in 2009?, drivers, nationality, [Australian]
Picklist: How many drivers were in the Australian Grand Prix held in 2009?, constructors, nationality, [Australian]
--------------------
text:  How many drivers were in the Australian Grand Prix held in 2009?
sql:  SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = "Australian Grand Prix" AND YEAR = 2009
ground truth values:  [('races.name', 'Australian Grand Prix')]
matched values OrderedDict([(16, ('circuits.country', 'Australia')), (41, ('races.name', 'Australian Grand Prix')), (60, ('drivers.driverRef', 'driver')), (76, ('drivers.nationality', 'Australian')), (110, ('constructors.nationality', 'Australian'))])
--------------------
Picklist: How many drivers did not participate in the races held in 2009?, drivers, driverRef, [driver]
--------------------
text:  How many drivers did not participate in the races held in 2009?
sql:  SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver'))])
--------------------
Picklist: How many drivers did not race in 2009?, drivers, driverRef, [driver]
Picklist: How many drivers did not race in 2009?, constructors, constructorRef, [rae]
--------------------
text:  How many drivers did not race in 2009?
sql:  SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver')), (98, ('constructors.constructorRef', 'rae'))])
--------------------
Picklist: Give me a list of names and years of races that had any driver whose forename is Lewis?, drivers, driverRef, [driver]
Picklist: Give me a list of names and years of races that had any driver whose forename is Lewis?, drivers, driverRef, [lewis]
Picklist: Give me a list of names and years of races that had any driver whose forename is Lewis?, drivers, forename, [Lewis]
Picklist: Give me a list of names and years of races that had any driver whose forename is Lewis?, drivers, surname, [Driver]
Picklist: Give me a list of names and years of races that had any driver whose forename is Lewis?, drivers, surname, [Lewis]
--------------------
text:  Give me a list of names and years of races that had any driver whose forename is Lewis?
sql:  SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = "Lewis"
ground truth values:  [('drivers.forename', 'Lewis')]
matched values OrderedDict([(54, ('drivers.driverRef', 'driver')), (56, ('drivers.driverRef', 'lewis')), (65, ('drivers.forename', 'Lewis')), (69, ('drivers.surname', 'Driver')), (71, ('drivers.surname', 'Lewis'))])
--------------------
Picklist: What are the names and years of all races that had a driver with the last name Lewis?, drivers, driverRef, [driver]
Picklist: What are the names and years of all races that had a driver with the last name Lewis?, drivers, driverRef, [lewis]
Picklist: What are the names and years of all races that had a driver with the last name Lewis?, drivers, forename, [Lewis]
Picklist: What are the names and years of all races that had a driver with the last name Lewis?, drivers, surname, [Driver]
Picklist: What are the names and years of all races that had a driver with the last name Lewis?, drivers, surname, [Lewis]
--------------------
text:  What are the names and years of all races that had a driver with the last name Lewis?
sql:  SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = "Lewis"
ground truth values:  [('drivers.forename', 'Lewis')]
matched values OrderedDict([(54, ('drivers.driverRef', 'driver')), (56, ('drivers.driverRef', 'lewis')), (65, ('drivers.forename', 'Lewis')), (69, ('drivers.surname', 'Driver')), (71, ('drivers.surname', 'Lewis'))])
--------------------
Picklist: Find the forename and surname of drivers whose nationality is German?, circuits, country, [Germany]
Picklist: Find the forename and surname of drivers whose nationality is German?, drivers, driverRef, [driver]
Picklist: Find the forename and surname of drivers whose nationality is German?, drivers, nationality, [German]
Picklist: Find the forename and surname of drivers whose nationality is German?, constructors, nationality, [German]
--------------------
text:  Find the forename and surname of drivers whose nationality is German?
sql:  SELECT forename ,  surname FROM drivers WHERE nationality = "German"
ground truth values:  [('drivers.nationality', 'German')]
matched values OrderedDict([(16, ('circuits.country', 'Germany')), (56, ('drivers.driverRef', 'driver')), (72, ('drivers.nationality', 'German')), (106, ('constructors.nationality', 'German'))])
--------------------
Picklist: What is the first and last name of all the German drivers?, circuits, country, [Germany]
Picklist: What is the first and last name of all the German drivers?, drivers, driverRef, [driver]
Picklist: What is the first and last name of all the German drivers?, drivers, nationality, [German]
Picklist: What is the first and last name of all the German drivers?, constructors, nationality, [German]
--------------------
text:  What is the first and last name of all the German drivers?
sql:  SELECT forename ,  surname FROM drivers WHERE nationality = "German"
ground truth values:  [('drivers.nationality', 'German')]
matched values OrderedDict([(16, ('circuits.country', 'Germany')), (56, ('drivers.driverRef', 'driver')), (72, ('drivers.nationality', 'German')), (106, ('constructors.nationality', 'German'))])
 24%|██▍       | 2179/8943 [02:53<1:11:48,  1.57it/s] 24%|██▍       | 2180/8943 [02:54<1:27:34,  1.29it/s] 24%|██▍       | 2181/8943 [02:55<1:34:55,  1.19it/s] 24%|██▍       | 2182/8943 [02:56<1:45:19,  1.07it/s]--------------------
Picklist: Find the id and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix?, circuits, country, [Australia]
Picklist: Find the id and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix?, races, name, [Australian Grand Prix]
Picklist: Find the id and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix?, races, name, [Chinese Grand Prix]
Picklist: Find the id and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix?, drivers, driverRef, [driver]
Picklist: Find the id and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix?, drivers, nationality, [Australian]
Picklist: Find the id and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix?, constructors, nationality, [Australian]
--------------------
text:  Find the id and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix?
sql:  SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = "Australian Grand Prix" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = "Chinese Grand Prix"
ground truth values:  [('races.name', 'Australian Grand Prix'), ('races.name', 'Chinese Grand Prix')]
matched values OrderedDict([(16, ('circuits.country', 'Australia')), (41, ('races.name', 'Australian Grand Prix')), (45, ('races.name', 'Chinese Grand Prix')), (64, ('drivers.driverRef', 'driver')), (80, ('drivers.nationality', 'Australian')), (114, ('constructors.nationality', 'Australian'))])
--------------------
Picklist: What is the id and first name of all the drivers who participated in the Australian Grand Prix and the Chinese Grand Prix?, circuits, country, [Australia]
Picklist: What is the id and first name of all the drivers who participated in the Australian Grand Prix and the Chinese Grand Prix?, races, name, [Australian Grand Prix]
Picklist: What is the id and first name of all the drivers who participated in the Australian Grand Prix and the Chinese Grand Prix?, races, name, [Chinese Grand Prix]
Picklist: What is the id and first name of all the drivers who participated in the Australian Grand Prix and the Chinese Grand Prix?, drivers, driverRef, [driver]
Picklist: What is the id and first name of all the drivers who participated in the Australian Grand Prix and the Chinese Grand Prix?, drivers, nationality, [Australian]
Picklist: What is the id and first name of all the drivers who participated in the Australian Grand Prix and the Chinese Grand Prix?, constructors, nationality, [Australian]
--------------------
text:  What is the id and first name of all the drivers who participated in the Australian Grand Prix and the Chinese Grand Prix?
sql:  SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = "Australian Grand Prix" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = "Chinese Grand Prix"
ground truth values:  [('races.name', 'Australian Grand Prix'), ('races.name', 'Chinese Grand Prix')]
matched values OrderedDict([(16, ('circuits.country', 'Australia')), (41, ('races.name', 'Australian Grand Prix')), (45, ('races.name', 'Chinese Grand Prix')), (64, ('drivers.driverRef', 'driver')), (80, ('drivers.nationality', 'Australian')), (114, ('constructors.nationality', 'Australian'))])
--------------------
Picklist: What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix?, circuits, country, [Australia]
Picklist: What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix?, races, name, [Australian Grand Prix]
Picklist: What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix?, races, name, [Chinese Grand Prix]
Picklist: What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix?, drivers, driverRef, [driver]
Picklist: What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix?, drivers, nationality, [Australian]
Picklist: What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix?, constructors, nationality, [Australian]
--------------------
text:  What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix?
sql:  SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = "Australian Grand Prix" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = "Chinese Grand Prix"
ground truth values:  [('races.name', 'Australian Grand Prix'), ('races.name', 'Chinese Grand Prix')]
matched values OrderedDict([(16, ('circuits.country', 'Australia')), (41, ('races.name', 'Australian Grand Prix')), (45, ('races.name', 'Chinese Grand Prix')), (64, ('drivers.driverRef', 'driver')), (80, ('drivers.nationality', 'Australian')), (114, ('constructors.nationality', 'Australian'))])
--------------------
Picklist: What are the first and last names of all drivers who participated in the Australian Grand Prix but not the Chinese Grand Prix?, circuits, country, [Australia]
Picklist: What are the first and last names of all drivers who participated in the Australian Grand Prix but not the Chinese Grand Prix?, races, name, [Australian Grand Prix]
Picklist: What are the first and last names of all drivers who participated in the Australian Grand Prix but not the Chinese Grand Prix?, races, name, [Chinese Grand Prix]
Picklist: What are the first and last names of all drivers who participated in the Australian Grand Prix but not the Chinese Grand Prix?, drivers, driverRef, [driver]
Picklist: What are the first and last names of all drivers who participated in the Australian Grand Prix but not the Chinese Grand Prix?, drivers, nationality, [Australian]
Picklist: What are the first and last names of all drivers who participated in the Australian Grand Prix but not the Chinese Grand Prix?, constructors, nationality, [Australian]
--------------------
text:  What are the first and last names of all drivers who participated in the Australian Grand Prix but not the Chinese Grand Prix?
sql:  SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = "Australian Grand Prix" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = "Chinese Grand Prix"
ground truth values:  [('races.name', 'Australian Grand Prix'), ('races.name', 'Chinese Grand Prix')]
matched values  24%|██▍       | 2183/8943 [02:57<1:47:33,  1.05it/s] 24%|██▍       | 2184/8943 [02:58<1:42:23,  1.10it/s] 24%|██▍       | 2185/8943 [02:59<1:38:18,  1.15it/s] 24%|██▍       | 2186/8943 [03:00<1:42:51,  1.09it/s] 24%|██▍       | 2187/8943 [03:01<1:47:19,  1.05it/s] 24%|██▍       | 2188/8943 [03:01<1:35:39,  1.18it/s] 24%|██▍       | 2189/8943 [03:02<1:27:01,  1.29it/s] 24%|██▍       | 2190/8943 [03:03<1:18:57,  1.43it/s] 24%|██▍       | 2191/8943 [03:03<1:12:50,  1.54it/s] 25%|██▍       | 2192/8943 [03:04<1:21:07,  1.39it/s] 25%|██▍       | 2193/8943 [03:05<1:18:39,  1.43it/s] 25%|██▍       | 2194/8943 [03:05<1:22:36,  1.36it/s] 25%|██▍       | 2195/8943 [03:06<1:19:15,  1.42it/s] 25%|██▍       | 2196/8943 [03:07<1:35:09,  1.18it/s] 25%|██▍       | 2197/8943 [03:08<1:40:26,  1.12it/s] 25%|██▍       | 2198/8943 [03:09<1:45:57,  1.06it/s] 25%|██▍       | 2199/8943 [03:10<1:51:31,  1.01it/s] 25%|██▍       | 2200/8943 [03:11<1:38:29,  1.14it/s]OrderedDict([(16, ('circuits.country', 'Australia')), (41, ('races.name', 'Australian Grand Prix')), (45, ('races.name', 'Chinese Grand Prix')), (64, ('drivers.driverRef', 'driver')), (80, ('drivers.nationality', 'Australian')), (114, ('constructors.nationality', 'Australian'))])
--------------------
Picklist: Find all the forenames of distinct drivers who was in position 1 as standing and won?, drivers, driverRef, [driver]
--------------------
text:  Find all the forenames of distinct drivers who was in position 1 as standing and won?
sql:  SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver'))])
--------------------
Picklist: What are all the different first names of the drivers who are in position as standing and won?, drivers, driverRef, [driver]
Picklist: What are all the different first names of the drivers who are in position as standing and won?, status, status, [Differential]
--------------------
text:  What are all the different first names of the drivers who are in position as standing and won?
sql:  SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver')), (80, ('status.status', 'Differential'))])
--------------------
Picklist: Find all the forenames of distinct drivers who won in position 1 as driver standing and had more than 20 points?, drivers, driverRef, [driver]
--------------------
text:  Find all the forenames of distinct drivers who won in position 1 as driver standing and had more than 20 points?
sql:  SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver'))])
--------------------
Picklist: What are the first names of the different drivers who won in position 1 as driver standing and had more than 20 points?, drivers, driverRef, [driver]
Picklist: What are the first names of the different drivers who won in position 1 as driver standing and had more than 20 points?, status, status, [Differential]
--------------------
text:  What are the first names of the different drivers who won in position 1 as driver standing and had more than 20 points?
sql:  SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver')), (80, ('status.status', 'Differential'))])
--------------------
Picklist: What are the numbers of constructors for different nationalities?, status, status, [Differential]
--------------------
text:  What are the numbers of constructors for different nationalities?
sql:  SELECT count(*) ,  nationality FROM constructors GROUP BY nationality
ground truth values:  []
matched values OrderedDict([(78, ('status.status', 'Differential'))])
--------------------
Picklist: For each nationality, how many different constructors are there?, status, status, [Differential]
--------------------
text:  For each nationality, how many different constructors are there?
sql:  SELECT count(*) ,  nationality FROM constructors GROUP BY nationality
ground truth values:  []
matched values OrderedDict([(78, ('status.status', 'Differential'))])
--------------------
Picklist: What are the names of races that were held after 2017 and the circuits were in the country of Spain?, circuits, country, [Spain]
Picklist: What are the names of the races held after 2017 in Spain?, circuits, country, [Spain]
Picklist: What are the unique names of races that held after 2000 and the circuits were in Spain?, circuits, country, [Spain]
Picklist: What are the names of all races held after 2000 in Spain?, circuits, country, [Spain]
Picklist: Find the distinct driver id and the stop number of all drivers that have a shorter pit stop duration than some drivers in the race with id 841., drivers, driverRef, [driver]
Picklist: Find the distinct driver id and the stop number of all drivers that have a shorter pit stop duration than some drivers in the race with id 841., drivers, surname, [Driver]
--------------------
text:  Find the distinct driver id and the stop number of all drivers that have a shorter pit stop duration than some drivers in the race with id 841.
sql:  SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver')), (65, ('drivers.surname', 'Driver'))])
--------------------
Picklist: What is the id and stop number for each driver that has a shorter pit stop than the driver in the race with id 841?, drivers, driverRef, [driver]
Picklist: What is the id and stop number for each driver that has a shorter pit stop than the driver in the race with id 841?, drivers, surname, [Driver]
Picklist: What is the id and stop number for each driver that has a shorter pit stop than the driver in the race with id 841?, constructors, constructorRef, [rae]
--------------------
text:  What is the id and stop number for each driver that has a shorter pit stop than the driver in the race with id 841?
sql:  SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver')), (65, ('drivers.surname', 'Driver')), (100, ('constructors.constructorRef', 'rae'))])
--------------------
Picklist: Find the distinct driver id of all drivers that have a longer stop duration than some drivers in the race whose id is 841?, drivers, driverRef, [driver]
Picklist: Find the distinct driver id of all drivers that have a longer stop duration than some drivers in the race whose id is 841?, drivers, surname, [Driver]
--------------------
text:  Find the distinct driver id of all drivers that have a longer stop duration than some drivers in the race whose id is 841?
sql:  SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver')), (65, ('drivers.surname', 'Driver'))])
--------------------
Picklist: What are the different ids and stop durations of all the drivers whose stop lasted longer than the driver in the race with the id 841?, drivers, driverRef, [driver]
Picklist: What are the different ids and stop durations of all the drivers whose stop lasted longer than the driver in the race with the id 841?, status, status, [Differential]
--------------------
text:  What are the different ids and stop durations of all the drivers whose stop lasted longer than the driver in the race with the id 841?
sql:  SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver')), (80, ('status.status', 'Differential'))])
--------------------
Picklist: List the forenames of all distinct drivers in alphabetical order?, drivers, driverRef, [driver]
--------------------
text:  List the forenames of all distinct drivers in alphabetical order?
sql:  SELECT DISTINCT forename FROM drivers ORDER BY forename ASC
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver'))])
--------------------
Picklist: What are the first names of all the different drivers in alphabetical order?, drivers, driverRef, [driver]
Picklist: What are the first names of all the different drivers in alphabetical order?, status, status, [Differential]
--------------------
text:  What are the first names of all the different drivers in alphabetical order?
sql:   25%|██▍       | 2201/8943 [03:12<1:31:38,  1.23it/s] 25%|██▍       | 2202/8943 [03:12<1:25:29,  1.31it/s] 25%|██▍       | 2203/8943 [03:13<1:22:18,  1.36it/s] 25%|██▍       | 2204/8943 [03:14<1:19:06,  1.42it/s] 25%|██▍       | 2205/8943 [03:14<1:18:10,  1.44it/s] 25%|██▍       | 2206/8943 [03:15<1:18:48,  1.42it/s] 25%|██▍       | 2207/8943 [03:16<1:22:05,  1.37it/s] 25%|██▍       | 2208/8943 [03:17<1:31:48,  1.22it/s] 25%|██▍       | 2209/8943 [03:18<1:41:01,  1.11it/s] 25%|██▍       | 2210/8943 [03:19<1:44:15,  1.08it/s] 25%|██▍       | 2211/8943 [03:20<1:46:42,  1.05it/s] 25%|██▍       | 2212/8943 [03:21<1:43:13,  1.09it/s] 25%|██▍       | 2214/8943 [03:21<1:22:32,  1.36it/s] 25%|██▍       | 2215/8943 [03:22<1:19:33,  1.41it/s]SELECT DISTINCT forename FROM drivers ORDER BY forename ASC
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver')), (80, ('status.status', 'Differential'))])
--------------------
Picklist: What are the different names of all the races in reverse alphabetical order?, status, status, [Differential]
--------------------
text:  What are the different names of all the races in reverse alphabetical order?
sql:  SELECT DISTINCT name FROM races ORDER BY name DESC
ground truth values:  []
matched values OrderedDict([(78, ('status.status', 'Differential'))])
--------------------
Picklist: What are the names of races held after 12:00:00 or before 09:00:00?, races, time, [12:00:00]
Picklist: What are the names of races held after 12:00:00 or before 09:00:00?, races, time, [09:00:00]
Picklist: What are the names of all races that occurred after 12:00:00 or before 09:00:00?, races, time, [12:00:00]
Picklist: What are the names of all races that occurred after 12:00:00 or before 09:00:00?, races, time, [09:00:00]
Picklist: What are the drivers' first, last names and id who had more than 8 pit stops or participated in more than 5 race results?, drivers, driverRef, [driver]
Picklist: What are the drivers' first, last names and id who had more than 8 pit stops or participated in more than 5 race results?, constructors, constructorRef, [rae]
--------------------
text:  What are the drivers' first, last names and id who had more than 8 pit stops or participated in more than 5 race results?
sql:  SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver')), (98, ('constructors.constructorRef', 'rae'))])
--------------------
Picklist: What are the drivers' first names,last names, and ids for all those that had more than 8 stops or participated in more than 5 races?, drivers, driverRef, [driver]
--------------------
text:  What are the drivers' first names,last names, and ids for all those that had more than 8 stops or participated in more than 5 races?
sql:  SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver'))])
--------------------
Picklist: What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results?, drivers, driverRef, [driver]
Picklist: What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results?, constructors, constructorRef, [rae]
--------------------
text:  What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results?
sql:  SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver')), (98, ('constructors.constructorRef', 'rae'))])
--------------------
Picklist: What are the last names and ids of all drivers who had 11 pit stops and participated in more than 5 races?, drivers, driverRef, [driver]
--------------------
text:  What are the last names and ids of all drivers who had 11 pit stops and participated in more than 5 races?
sql:  SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver'))])
--------------------
Picklist: What is the id and last name of the driver who participated in the most races after 2010?, drivers, driverRef, [driver]
Picklist: What is the id and last name of the driver who participated in the most races after 2010?, drivers, surname, [Driver]
--------------------
text:  What is the id and last name of the driver who participated in the most races after 2010?
sql:  SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver')), (65, ('drivers.surname', 'Driver'))])
--------------------
Picklist: What is the id and last name of the driver who participated in the most races after 2010?, drivers, driverRef, [driver]
Picklist: What is the id and last name of the driver who participated in the most races after 2010?, drivers, surname, [Driver]
--------------------
text:  What is the id and last name of the driver who participated in the most races after 2010?
sql:  SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver')), (65, ('drivers.surname', 'Driver'))])
--------------------
Picklist: What are the names of circuits that belong to UK or Malaysia?, circuits, country, [Malaysia]
Picklist: What are the names of circuits that belong to UK or Malaysia?, circuits, country, [UK]
Picklist: What are the names of circuits that belong to UK or Malaysia?, drivers, nationality, [Malaysian]
Picklist: What are the names of circuits that belong to UK or Malaysia?, constructors, nationality, [Malaysian]
--------------------
text:  What are the names of circuits that belong to UK or Malaysia?
sql:  SELECT name FROM circuits WHERE country = "UK" OR country = "Malaysia"
ground truth values:  [('circuits.country', 'UK'), ('circuits.country', 'Malaysia')]
matched values OrderedDict([(16, ('circuits.country', 'Malaysia')), (18, ('circuits.country', 'UK')), (72, ('drivers.nationality', 'Malaysian')), (106, ('constructors.nationality', 'Malaysian'))])
--------------------
Picklist: What are the names of all the circuits that are in the UK or Malaysia?, circuits, country, [Malaysia]
Picklist: What are the names of all the circuits that are in the UK or Malaysia?, circuits, country, [UK]
Picklist: What are the names of all the circuits that are in the UK or Malaysia?, drivers, nationality, [Malaysian]
Picklist: What are the names of all the circuits that are in the UK or Malaysia?, constructors, nationality, [Malaysian]
--------------------
text:  What are the names of all the circuits that are in the UK or Malaysia?
sql:  SELECT name FROM circuits WHERE country = "UK" OR country = "Malaysia"
ground truth values:  [('circuits.country', 'UK'), ('circuits.country', 'Malaysia')]
matched values OrderedDict([(16, ('circuits.country', 'Malaysia')), (18, ('circuits.country', 'UK')), (72, ('drivers.nationality', 'Malaysian')), (106, ('constructors.nationality', 'Malaysian'))])
--------------------
Picklist: Find the id and location of circuits that belong to France or Belgium?, circuits, country, [Belgium]
Picklist: Find the id and location of circuits that belong to France or Belgium?, circuits, country, [France]
Picklist: Find the id and location of circuits that belong to France or Belgium?, constructors, nationality, [Belgium]
--------------------
text:  Find the id and location of circuits that belong to France or Belgium?
sql:   25%|██▍       | 2216/8943 [03:23<1:17:24,  1.45it/s] 25%|██▍       | 2217/8943 [03:23<1:15:33,  1.48it/s] 25%|██▍       | 2218/8943 [03:24<1:18:46,  1.42it/s] 25%|██▍       | 2219/8943 [03:25<1:21:31,  1.37it/s] 25%|██▍       | 2220/8943 [03:26<1:23:10,  1.35it/s] 25%|██▍       | 2221/8943 [03:26<1:22:36,  1.36it/s] 25%|██▍       | 2222/8943 [03:27<1:23:58,  1.33it/s] 25%|██▍       | 2223/8943 [03:28<1:22:49,  1.35it/s] 25%|██▍       | 2224/8943 [03:29<1:28:29,  1.27it/s]SELECT circuitid ,  LOCATION FROM circuits WHERE country = "France" OR country = "Belgium"
ground truth values:  [('circuits.country', 'France'), ('circuits.country', 'Belgium')]
matched values OrderedDict([(16, ('circuits.country', 'Belgium')), (18, ('circuits.country', 'France')), (104, ('constructors.nationality', 'Belgium'))])
--------------------
Picklist: What are the ids and locations of all circuits in France or Belgium?, circuits, country, [Belgium]
Picklist: What are the ids and locations of all circuits in France or Belgium?, circuits, country, [France]
Picklist: What are the ids and locations of all circuits in France or Belgium?, constructors, nationality, [Belgium]
--------------------
text:  What are the ids and locations of all circuits in France or Belgium?
sql:  SELECT circuitid ,  LOCATION FROM circuits WHERE country = "France" OR country = "Belgium"
ground truth values:  [('circuits.country', 'France'), ('circuits.country', 'Belgium')]
matched values OrderedDict([(16, ('circuits.country', 'Belgium')), (18, ('circuits.country', 'France')), (104, ('constructors.nationality', 'Belgium'))])
--------------------
Picklist: Find the names of Japanese constructors that have once earned more than 5 points?, drivers, nationality, [Japanese]
Picklist: Find the names of Japanese constructors that have once earned more than 5 points?, constructors, nationality, [Japanese]
--------------------
text:  Find the names of Japanese constructors that have once earned more than 5 points?
sql:  SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = "Japanese" AND T2.points > 5
ground truth values:  [('constructors.nationality', 'Japanese')]
matched values OrderedDict([(68, ('drivers.nationality', 'Japanese')), (102, ('constructors.nationality', 'Japanese'))])
--------------------
Picklist: What are the names of all the Japanese constructors that have earned more than 5 points?, drivers, nationality, [Japanese]
Picklist: What are the names of all the Japanese constructors that have earned more than 5 points?, constructors, nationality, [Japanese]
--------------------
text:  What are the names of all the Japanese constructors that have earned more than 5 points?
sql:  SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = "Japanese" AND T2.points > 5
ground truth values:  [('constructors.nationality', 'Japanese')]
matched values OrderedDict([(68, ('drivers.nationality', 'Japanese')), (102, ('constructors.nationality', 'Japanese'))])
--------------------
Picklist: What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?, circuits, circuitRef, [monaco]
Picklist: What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?, circuits, country, [Monaco]
Picklist: What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?, races, name, [Monaco Grand Prix]
Picklist: What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?, drivers, driverRef, [speed]
Picklist: What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?, drivers, surname, [Speed]
--------------------
text:  What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?
sql:  SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = "Monaco Grand Prix"
ground truth values:  [('races.name', 'Monaco Grand Prix')]
matched values OrderedDict([(10, ('circuits.circuitRef', 'monaco')), (18, ('circuits.country', 'Monaco')), (43, ('races.name', 'Monaco Grand Prix')), (62, ('drivers.driverRef', 'speed')), (73, ('drivers.surname', 'Speed'))])
--------------------
Picklist: What is the average fastest lap speed for the Monaco Grand Prix in 2008?, circuits, circuitRef, [monaco]
Picklist: What is the average fastest lap speed for the Monaco Grand Prix in 2008?, circuits, country, [Monaco]
Picklist: What is the average fastest lap speed for the Monaco Grand Prix in 2008?, races, name, [Monaco Grand Prix]
Picklist: What is the average fastest lap speed for the Monaco Grand Prix in 2008?, drivers, driverRef, [speed]
Picklist: What is the average fastest lap speed for the Monaco Grand Prix in 2008?, drivers, surname, [Speed]
--------------------
text:  What is the average fastest lap speed for the Monaco Grand Prix in 2008?
sql:  SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = "Monaco Grand Prix"
ground truth values:  [('races.name', 'Monaco Grand Prix')]
matched values OrderedDict([(10, ('circuits.circuitRef', 'monaco')), (18, ('circuits.country', 'Monaco')), (43, ('races.name', 'Monaco Grand Prix')), (62, ('drivers.driverRef', 'speed')), (73, ('drivers.surname', 'Speed'))])
--------------------
Picklist: What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?, circuits, circuitRef, [monaco]
Picklist: What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?, circuits, country, [Monaco]
Picklist: What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?, races, name, [Monaco Grand Prix]
Picklist: What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?, drivers, driverRef, [speed]
Picklist: What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?, drivers, surname, [Speed]
Picklist: What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?, constructors, constructorRef, [rae]
--------------------
text:  What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?
sql:  SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = "Monaco Grand Prix"
ground truth values:  [('races.name', 'Monaco Grand Prix')]
matched values OrderedDict([(10, ('circuits.circuitRef', 'monaco')), (18, ('circuits.country', 'Monaco')), (43, ('races.name', 'Monaco Grand Prix')), (62, ('drivers.driverRef', 'speed')), (73, ('drivers.surname', 'Speed')), (108, ('constructors.constructorRef', 'rae'))])
--------------------
Picklist: What is the maximum fastest lap speed in the Monaco Grand Prix in 2008?, circuits, circuitRef, [monaco]
Picklist: What is the maximum fastest lap speed in the Monaco Grand Prix in 2008?, circuits, country, [Monaco]
Picklist: What is the maximum fastest lap speed in the Monaco Grand Prix in 2008?, races, name, [Monaco Grand Prix]
Picklist: What is the maximum fastest lap speed in the Monaco Grand Prix in 2008?, drivers, driverRef, [speed]
Picklist: What is the maximum fastest lap speed in the Monaco Grand Prix in 2008?, drivers, surname, [Speed]
--------------------
text:  What is the maximum fastest lap speed in the Monaco Grand Prix in 2008?
sql:  SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = "Monaco Grand Prix"
ground truth values:  [('races.name', 'Monaco Grand Prix')]
matched values OrderedDict([(10, ('circuits.circuitRef', 'monaco')), (18, ('circuits.country', 'Monaco')), (43, ('races.name', 'Monaco Grand Prix')), (62, ('drivers.driverRef', 'speed')), (73, ('drivers.surname', 'Speed'))])
--------------------
Picklist: What are the maximum fastest lap speed in races held after 2004 grouped by race name and ordered by year?, drivers, driverRef, [speed]
Picklist: What are the maximum fastest lap speed in races held after 2004 grouped by race name and ordered by year?, drivers, surname, [Speed]
--------------------
text:  What are the maximum fastest lap speed in races held after 2004 grouped by race name and ordered by year?
sql:  SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'speed')), (65, ('drivers.surname', 'Speed'))])
--------------------
 25%|██▍       | 2225/8943 [03:30<1:30:43,  1.23it/s] 25%|██▍       | 2226/8943 [03:31<1:34:36,  1.18it/s] 25%|██▍       | 2227/8943 [03:31<1:34:54,  1.18it/s] 25%|██▍       | 2228/8943 [03:32<1:34:04,  1.19it/s] 25%|██▍       | 2229/8943 [03:33<1:36:17,  1.16it/s] 25%|██▍       | 2230/8943 [03:34<1:37:04,  1.15it/s] 25%|██▍       | 2231/8943 [03:35<1:38:25,  1.14it/s] 25%|██▍       | 2232/8943 [03:36<1:32:38,  1.21it/s] 25%|██▍       | 2233/8943 [03:36<1:29:10,  1.25it/s] 25%|██▌       | 2244/8943 [03:36<1:02:38,  1.78it/s] 25%|██▌       | 2253/8943 [03:37<44:11,  2.52it/s]   25%|██▌       | 2259/8943 [03:37<31:30,  3.53it/s] 25%|██▌       | 2269/8943 [03:37<22:22,  4.97it/s] 25%|██▌       | 2280/8943 [03:37<15:57,  6.96it/s] 26%|██▌       | 2288/8943 [03:37<11:40,  9.50it/s] 26%|██▌       | 2298/8943 [03:37<08:32, 12.96it/s] 26%|██▌       | 2309/8943 [03:37<06:17, 17.57it/s] 26%|██▌       | 2318/8943 [03:37<04:50, 22.79it/s]Picklist: For each race name, What is the maximum fastest lap speed for races after 2004 ordered by year?, drivers, driverRef, [speed]
Picklist: For each race name, What is the maximum fastest lap speed for races after 2004 ordered by year?, drivers, surname, [Speed]
Picklist: For each race name, What is the maximum fastest lap speed for races after 2004 ordered by year?, constructors, constructorRef, [rae]
--------------------
text:  For each race name, What is the maximum fastest lap speed for races after 2004 ordered by year?
sql:  SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'speed')), (65, ('drivers.surname', 'Speed')), (100, ('constructors.constructorRef', 'rae'))])
--------------------
Picklist: What are the average fastest lap speed in races held after 2004 grouped by race name and ordered by year?, drivers, driverRef, [speed]
Picklist: What are the average fastest lap speed in races held after 2004 grouped by race name and ordered by year?, drivers, surname, [Speed]
--------------------
text:  What are the average fastest lap speed in races held after 2004 grouped by race name and ordered by year?
sql:  SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'speed')), (65, ('drivers.surname', 'Speed'))])
--------------------
Picklist: What is the average fastest lap speed for races held after 2004, for each race, ordered by year?, drivers, driverRef, [speed]
Picklist: What is the average fastest lap speed for races held after 2004, for each race, ordered by year?, drivers, surname, [Speed]
--------------------
text:  What is the average fastest lap speed for races held after 2004, for each race, ordered by year?
sql:  SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'speed')), (65, ('drivers.surname', 'Speed'))])
--------------------
Picklist: Find the id, forename and number of races of all drivers who have at least participated in two races?, drivers, driverRef, [driver]
--------------------
text:  Find the id, forename and number of races of all drivers who have at least participated in two races?
sql:  SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver'))])
--------------------
Picklist: What is the id, forename, and number of races for all drivers that have participated in at least 2 races?, drivers, driverRef, [driver]
--------------------
text:  What is the id, forename, and number of races for all drivers that have participated in at least 2 races?
sql:  SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver'))])
--------------------
Picklist: Find the driver id and number of races of all drivers who have at most participated in 30 races?, drivers, driverRef, [driver]
Picklist: Find the driver id and number of races of all drivers who have at most participated in 30 races?, drivers, surname, [Driver]
--------------------
text:  Find the driver id and number of races of all drivers who have at most participated in 30 races?
sql:  SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver')), (65, ('drivers.surname', 'Driver'))])
--------------------
Picklist: For each id of a driver who participated in at most 30 races, how many races did they participate in?, drivers, driverRef, [driver]
Picklist: For each id of a driver who participated in at most 30 races, how many races did they participate in?, drivers, surname, [Driver]
--------------------
text:  For each id of a driver who participated in at most 30 races, how many races did they participate in?
sql:  SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver')), (65, ('drivers.surname', 'Driver'))])
--------------------
Picklist: Find the id and surname of the driver who participated the most number of races?, drivers, driverRef, [driver]
Picklist: Find the id and surname of the driver who participated the most number of races?, drivers, surname, [Driver]
--------------------
text:  Find the id and surname of the driver who participated the most number of races?
sql:  SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver')), (65, ('drivers.surname', 'Driver'))])
--------------------
Picklist: What are the ids and last names of all drivers who participated in the most races?, drivers, driverRef, [driver]
--------------------
text:  What are the ids and last names of all drivers who participated in the most races?
sql:  SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(54, ('drivers.driverRef', 'driver'))])
--------------------
Picklist: List the name of technicians whose team is not "NYY"., technician, Team, [NYY]
Picklist: What is the name of the technician whose team is not 'NYY'?, technician, Team, [NYY]
Picklist: Show the starting years shared by technicians from team "CLE" and "CWS"., technician, Team, [CWS]
Picklist: Show the starting years shared by technicians from team "CLE" and "CWS"., technician, Team, [CLE]
Picklist: What are the starting years shared by the technicians from the team "CLE" or "CWS"?, technician, Team, [CWS]
Picklist: What are the starting years shared by the technicians from the team "CLE" or "CWS"?, technician, Team, [CLE]
Picklist: What are the names of entrepreneurs whose investor is not "Rachel Elnaugh"?, entrepreneur, Investor, [Rachel Elnaugh]
Picklist: Return the names of entrepreneurs do no not have the investor Rachel Elnaugh., entrepreneur, Investor, [Rachel Elnaugh]
Picklist: What are the dates of birth of entrepreneurs with investor "Simon Woodroffe" or "Peter Jones"?, entrepreneur, Investor, [Simon Woodroffe]
Picklist: What are the dates of birth of entrepreneurs with investor "Simon Woodroffe" or "Peter Jones"?, entrepreneur, Investor, [Peter Jones]
Picklist: Return the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones., entrepreneur, Investor, [Simon Woodroffe]
Picklist: Return the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones., entrepreneur, Investor, [Peter Jones]
Picklist: What are the names of perpetrators whose country is not "China"?, perpetrator, Country, [China]
Picklist: What are the names of perpetrators in country "China" or "Japan"?, perpetrator, Country, [China]
Picklist: What are the names of perpetrators in country "China" or "Japan"?, perpetrator, Country, [Japan]
 26%|██▌       | 2327/8943 [03:37<03:48, 28.98it/s] 26%|██▌       | 2336/8943 [03:38<03:13, 34.18it/s] 26%|██▌       | 2344/8943 [03:38<02:48, 39.26it/s]Picklist: Report the name of all campuses in Los Angeles county., Campuses, Location, [Los Angeles]
Picklist: Report the name of all campuses in Los Angeles county., Campuses, County, [Los Angeles]
--------------------
text:  Report the name of all campuses in Los Angeles county.
sql:  SELECT campus FROM campuses WHERE county  =  "Los Angeles"
ground truth values:  [('Campuses.County', 'Los Angeles')]
matched values OrderedDict([(10, ('Campuses.Location', 'Los Angeles')), (15, ('Campuses.County', 'Los Angeles'))])
--------------------
Picklist: What campuses are located in the county of Los Angeles?, Campuses, Location, [Los Angeles]
Picklist: What campuses are located in the county of Los Angeles?, Campuses, County, [Los Angeles]
--------------------
text:  What campuses are located in the county of Los Angeles?
sql:  SELECT campus FROM campuses WHERE county  =  "Los Angeles"
ground truth values:  [('Campuses.County', 'Los Angeles')]
matched values OrderedDict([(10, ('Campuses.Location', 'Los Angeles')), (15, ('Campuses.County', 'Los Angeles'))])
--------------------
Picklist: What are the names of all campuses located at Chico?, Campuses, Location, [Chico]
Picklist: What campuses are located in Chico?, Campuses, Location, [Chico]
Picklist: Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco., Campuses, Location, [Los Angeles]
Picklist: Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco., Campuses, Location, [San Francisco]
Picklist: Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco., Campuses, County, [San Francisco]
Picklist: Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco., Campuses, County, [Los Angeles]
--------------------
text:  Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco.
sql:  SELECT campus FROM campuses WHERE LOCATION  =  "Northridge" AND county  =  "Los Angeles" UNION SELECT campus FROM campuses WHERE LOCATION  =  "San Francisco" AND county  =  "San Francisco"
ground truth values:  [('Campuses.Location', 'Northridge'), ('Campuses.County', 'Los Angeles'), ('Campuses.Location', 'San Francisco'), ('Campuses.County', 'San Francisco')]
matched values OrderedDict([(10, ('Campuses.Location', 'Los Angeles')), (13, ('Campuses.Location', 'San Francisco')), (18, ('Campuses.County', 'San Francisco')), (21, ('Campuses.County', 'Los Angeles'))])
--------------------
Picklist: What campuses are located in Northridge, Los Angeles or in San Francisco, San Francisco?, Campuses, Location, [Los Angeles]
Picklist: What campuses are located in Northridge, Los Angeles or in San Francisco, San Francisco?, Campuses, Location, [San Francisco]
Picklist: What campuses are located in Northridge, Los Angeles or in San Francisco, San Francisco?, Campuses, County, [San Francisco]
Picklist: What campuses are located in Northridge, Los Angeles or in San Francisco, San Francisco?, Campuses, County, [Los Angeles]
--------------------
text:  What campuses are located in Northridge, Los Angeles or in San Francisco, San Francisco?
sql:  SELECT campus FROM campuses WHERE LOCATION  =  "Northridge" AND county  =  "Los Angeles" UNION SELECT campus FROM campuses WHERE LOCATION  =  "San Francisco" AND county  =  "San Francisco"
ground truth values:  [('Campuses.Location', 'Northridge'), ('Campuses.County', 'Los Angeles'), ('Campuses.Location', 'San Francisco'), ('Campuses.County', 'San Francisco')]
matched values OrderedDict([(10, ('Campuses.Location', 'Los Angeles')), (13, ('Campuses.Location', 'San Francisco')), (18, ('Campuses.County', 'San Francisco')), (21, ('Campuses.County', 'Los Angeles'))])
--------------------
Picklist: What is the campus fee of "San Jose State University" in year 1996?, Campuses, Campus, [San Jose State University]
Picklist: What is the campus fee of "San Jose State University" in year 1996?, Campuses, Location, [San Jose]
--------------------
text:  What is the campus fee of "San Jose State University" in year 1996?
sql:  SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  "San Jose State University" AND T2.year  =  1996
ground truth values:  [('Campuses.Campus', 'San Jose State University')]
matched values OrderedDict([(8, ('Campuses.Campus', 'San Jose State University')), (15, ('Campuses.Location', 'San Jose'))])
--------------------
Picklist: What is the campus fee for San Jose State University in 1996?, Campuses, Campus, [San Jose State University]
Picklist: What is the campus fee for San Jose State University in 1996?, Campuses, Location, [San Jose]
--------------------
text:  What is the campus fee for San Jose State University in 1996?
sql:  SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  "San Jose State University" AND T2.year  =  1996
ground truth values:  [('Campuses.Campus', 'San Jose State University')]
matched values OrderedDict([(8, ('Campuses.Campus', 'San Jose State University')), (15, ('Campuses.Location', 'San Jose'))])
--------------------
Picklist: What is the campus fee of "San Francisco State University" in year 1996?, Campuses, Campus, [San Francisco State University]
Picklist: What is the campus fee of "San Francisco State University" in year 1996?, Campuses, Location, [San Francisco]
Picklist: What is the campus fee of "San Francisco State University" in year 1996?, Campuses, County, [San Francisco]
--------------------
text:  What is the campus fee of "San Francisco State University" in year 1996?
sql:  SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  "San Francisco State University" AND T2.year  =  1996
ground truth values:  [('Campuses.Campus', 'San Francisco State University')]
matched values OrderedDict([(8, ('Campuses.Campus', 'San Francisco State University')), (15, ('Campuses.Location', 'San Francisco')), (20, ('Campuses.County', 'San Francisco'))])
--------------------
Picklist: What is the campus fee for San Francisco State University in 1996?, Campuses, Campus, [San Francisco State University]
Picklist: What is the campus fee for San Francisco State University in 1996?, Campuses, Location, [San Francisco]
Picklist: What is the campus fee for San Francisco State University in 1996?, Campuses, County, [San Francisco]
--------------------
text:  What is the campus fee for San Francisco State University in 1996?
sql:  SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  "San Francisco State University" AND T2.year  =  1996
ground truth values:  [('Campuses.Campus', 'San Francisco State University')]
matched values OrderedDict([(8, ('Campuses.Campus', 'San Francisco State University')), (15, ('Campuses.Location', 'San Francisco')), (20, ('Campuses.County', 'San Francisco'))])
--------------------
Picklist: Which university is in Los Angeles county and opened after 1950?, Campuses, Location, [Los Angeles]
Picklist: Which university is in Los Angeles county and opened after 1950?, Campuses, County, [Los Angeles]
--------------------
text:  Which university is in Los Angeles county and opened after 1950?
sql:  SELECT campus FROM campuses WHERE county  =  "Los Angeles" AND YEAR  >  1950
ground truth values:  [('Campuses.County', 'Los Angeles')]
matched values OrderedDict([(10, ('Campuses.Location', 'Los Angeles')), (15, ('Campuses.County', 'Los Angeles'))])
--------------------
Picklist: What campuses are located in Los Angeles county and opened after 1950?, Campuses, Location, [Los Angeles]
Picklist: What campuses are located in Los Angeles county and opened after 1950?, Campuses, County, [Los Angeles]
--------------------
text:  What campuses are located in Los Angeles county and opened after 1950?
sql:  SELECT campus FROM campuses WHERE county  =  "Los Angeles" AND YEAR  >  1950
ground truth values:  [('Campuses.County', 'Los Angeles')]
matched values OrderedDict([(10, ('Campuses.Location', 'Los Angeles')), (15, ('Campuses.County', 'Los Angeles'))])
 26%|██▋       | 2351/8943 [03:38<02:28, 44.44it/s] 26%|██▋       | 2358/8943 [03:38<02:17, 47.96it/s] 26%|██▋       | 2365/8943 [03:38<02:31, 43.56it/s] 27%|██▋       | 2371/8943 [03:38<02:19, 47.15it/s] 27%|██▋       | 2377/8943 [03:38<02:15, 48.43it/s]--------------------
Picklist: For each Orange county campus, report the number of degrees granted after 2000., Campuses, County, [Orange]
Picklist: What is the total number of degrees granted after 2000 for each Orange county campus?, Campuses, County, [Orange]
Picklist: Find the names of the campus which has more faculties in 2002 than every campus in Orange county., Campuses, County, [Orange]
Picklist: What are the names of the campus that have more faculties in 2002 than the maximum number in Orange county?, Campuses, County, [Orange]
Picklist: How many campuses are there in Los Angeles county?, Campuses, Location, [Los Angeles]
Picklist: How many campuses are there in Los Angeles county?, Campuses, County, [Los Angeles]
--------------------
text:  How many campuses are there in Los Angeles county?
sql:  SELECT count(*) FROM campuses WHERE county  =  "Los Angeles"
ground truth values:  [('Campuses.County', 'Los Angeles')]
matched values OrderedDict([(10, ('Campuses.Location', 'Los Angeles')), (15, ('Campuses.County', 'Los Angeles'))])
--------------------
--------------------
text:  How many campuses exist are in the county of LA?
sql:  SELECT count(*) FROM campuses WHERE county  =  "Los Angeles"
ground truth values:  [('Campuses.County', 'Los Angeles')]
matched values OrderedDict()
--------------------
Picklist: List the campuses in Los Angeles county., Campuses, Location, [Los Angeles]
Picklist: List the campuses in Los Angeles county., Campuses, County, [Los Angeles]
--------------------
text:  List the campuses in Los Angeles county.
sql:  SELECT campus FROM campuses WHERE county  =  "Los Angeles"
ground truth values:  [('Campuses.County', 'Los Angeles')]
matched values OrderedDict([(10, ('Campuses.Location', 'Los Angeles')), (15, ('Campuses.County', 'Los Angeles'))])
--------------------
Picklist: What campuses are in Los Angeles county?, Campuses, Location, [Los Angeles]
Picklist: What campuses are in Los Angeles county?, Campuses, County, [Los Angeles]
--------------------
text:  What campuses are in Los Angeles county?
sql:  SELECT campus FROM campuses WHERE county  =  "Los Angeles"
ground truth values:  [('Campuses.County', 'Los Angeles')]
matched values OrderedDict([(10, ('Campuses.Location', 'Los Angeles')), (15, ('Campuses.County', 'Los Angeles'))])
--------------------
Picklist: How many degrees were conferred in "San Jose State University" in 2000?, Campuses, Campus, [San Jose State University]
Picklist: How many degrees were conferred in "San Jose State University" in 2000?, Campuses, Location, [San Jose]
--------------------
text:  How many degrees were conferred in "San Jose State University" in 2000?
sql:  SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  "San Jose State University" AND t2.year  =  2000
ground truth values:  [('Campuses.Campus', 'San Jose State University')]
matched values OrderedDict([(8, ('Campuses.Campus', 'San Jose State University')), (15, ('Campuses.Location', 'San Jose'))])
--------------------
Picklist: How many degrees were conferred at San Jose State University in 2000?, Campuses, Campus, [San Jose State University]
Picklist: How many degrees were conferred at San Jose State University in 2000?, Campuses, Location, [San Jose]
--------------------
text:  How many degrees were conferred at San Jose State University in 2000?
sql:  SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  "San Jose State University" AND t2.year  =  2000
ground truth values:  [('Campuses.Campus', 'San Jose State University')]
matched values OrderedDict([(8, ('Campuses.Campus', 'San Jose State University')), (15, ('Campuses.Location', 'San Jose'))])
--------------------
Picklist: What are the degrees conferred in "San Francisco State University" in 2001., Campuses, Campus, [San Francisco State University]
Picklist: What are the degrees conferred in "San Francisco State University" in 2001., Campuses, Location, [San Francisco]
Picklist: What are the degrees conferred in "San Francisco State University" in 2001., Campuses, County, [San Francisco]
--------------------
text:  What are the degrees conferred in "San Francisco State University" in 2001.
sql:  SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  "San Francisco State University" AND t2.year  =  2001
ground truth values:  [('Campuses.Campus', 'San Francisco State University')]
matched values OrderedDict([(8, ('Campuses.Campus', 'San Francisco State University')), (15, ('Campuses.Location', 'San Francisco')), (20, ('Campuses.County', 'San Francisco'))])
--------------------
Picklist: What degrees were conferred in San Francisco State University in the year 2001?, Campuses, Campus, [San Francisco State University]
Picklist: What degrees were conferred in San Francisco State University in the year 2001?, Campuses, Location, [San Francisco]
Picklist: What degrees were conferred in San Francisco State University in the year 2001?, Campuses, County, [San Francisco]
--------------------
text:  What degrees were conferred in San Francisco State University in the year 2001?
sql:  SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  "San Francisco State University" AND t2.year  =  2001
ground truth values:  [('Campuses.Campus', 'San Francisco State University')]
matched values OrderedDict([(8, ('Campuses.Campus', 'San Francisco State University')), (15, ('Campuses.Location', 'San Francisco')), (20, ('Campuses.County', 'San Francisco'))])
--------------------
Picklist: What is the number of faculty lines in campus "Long Beach State University" in 2002?, Campuses, Campus, [Long Beach State University]
Picklist: What is the number of faculty lines in campus "Long Beach State University" in 2002?, Campuses, Location, [Long Beach]
--------------------
text:  What is the number of faculty lines in campus "Long Beach State University" in 2002?
sql:  SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  "Long Beach State University"
ground truth values:  [('Campuses.Campus', 'Long Beach State University')]
matched values OrderedDict([(8, ('Campuses.Campus', 'Long Beach State University')), (15, ('Campuses.Location', 'Long Beach'))])
--------------------
Picklist: What is the number of faculty at Long Beach State University in 2002?, Campuses, Campus, [Long Beach State University]
Picklist: What is the number of faculty at Long Beach State University in 2002?, Campuses, Location, [Long Beach]
--------------------
text:  What is the number of faculty at Long Beach State University in 2002?
sql:  SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  "Long Beach State University"
ground truth values:  [('Campuses.Campus', 'Long Beach State University')]
matched values OrderedDict([(8, ('Campuses.Campus', 'Long Beach State University')), (15, ('Campuses.Location', 'Long Beach'))])
--------------------
Picklist: How many faculty lines are there in "San Francisco State University" in year 2004?, Campuses, Campus, [San Francisco State University]
Picklist: How many faculty lines are there in "San Francisco State University" in year 2004?, Campuses, Location, [San Francisco]
Picklist: How many faculty lines are there in "San Francisco State University" in year 2004?, Campuses, County, [San Francisco]
--------------------
text:  How many faculty lines are there in "San Francisco State University" in year 2004?
sql:  SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  "San Francisco State University"
ground truth values:  [('Campuses.Campus', 'San Francisco State University')]
matched values OrderedDict([(8, ('Campuses.Campus', 'San Francisco State University')), (15, ('Campuses.Location', 'San Francisco')), (20, ('Campuses.County', 'San Francisco'))])
--------------------
Picklist: How many faculty lines are there at San Francisco State University in 2004?, Campuses, Campus, [San Francisco State University]
 27%|██▋       | 2383/8943 [03:39<02:31, 43.36it/s] 27%|██▋       | 2388/8943 [03:39<02:35, 42.23it/s] 27%|██▋       | 2394/8943 [03:39<02:22, 46.07it/s] 27%|██▋       | 2405/8943 [03:39<01:57, 55.74it/s] 27%|██▋       | 2415/8943 [03:39<01:44, 62.62it/s] 27%|██▋       | 2423/8943 [03:39<01:42, 63.79it/s]Picklist: How many faculty lines are there at San Francisco State University in 2004?, Campuses, Location, [San Francisco]
Picklist: How many faculty lines are there at San Francisco State University in 2004?, Campuses, County, [San Francisco]
--------------------
text:  How many faculty lines are there at San Francisco State University in 2004?
sql:  SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  "San Francisco State University"
ground truth values:  [('Campuses.Campus', 'San Francisco State University')]
matched values OrderedDict([(8, ('Campuses.Campus', 'San Francisco State University')), (15, ('Campuses.Location', 'San Francisco')), (20, ('Campuses.County', 'San Francisco'))])
--------------------
Picklist: How many undergraduates are there in "San Jose State University" in year 2004?, Campuses, Campus, [San Jose State University]
Picklist: How many undergraduates are there in "San Jose State University" in year 2004?, Campuses, Location, [San Jose]
--------------------
text:  How many undergraduates are there in "San Jose State University" in year 2004?
sql:  SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  "San Jose State University"
ground truth values:  [('Campuses.Campus', 'San Jose State University')]
matched values OrderedDict([(8, ('Campuses.Campus', 'San Jose State University')), (15, ('Campuses.Location', 'San Jose'))])
--------------------
Picklist: How many undergraduates are there at San Jose State, Campuses, Location, [San Jose]
--------------------
text:  How many undergraduates are there at San Jose State
sql:  SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  "San Jose State University"
ground truth values:  [('Campuses.Campus', 'San Jose State University')]
matched values OrderedDict([(10, ('Campuses.Location', 'San Jose'))])
--------------------
Picklist: What is the number of graduates in "San Francisco State University" in year 2004?, Campuses, Campus, [San Francisco State University]
Picklist: What is the number of graduates in "San Francisco State University" in year 2004?, Campuses, Location, [San Francisco]
Picklist: What is the number of graduates in "San Francisco State University" in year 2004?, Campuses, County, [San Francisco]
--------------------
text:  What is the number of graduates in "San Francisco State University" in year 2004?
sql:  SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  "San Francisco State University"
ground truth values:  [('Campuses.Campus', 'San Francisco State University')]
matched values OrderedDict([(8, ('Campuses.Campus', 'San Francisco State University')), (15, ('Campuses.Location', 'San Francisco')), (20, ('Campuses.County', 'San Francisco'))])
--------------------
Picklist: How many people graduated from San Francisco State University in 2004?, Campuses, Campus, [San Francisco State University]
Picklist: How many people graduated from San Francisco State University in 2004?, Campuses, Location, [San Francisco]
Picklist: How many people graduated from San Francisco State University in 2004?, Campuses, County, [San Francisco]
--------------------
text:  How many people graduated from San Francisco State University in 2004?
sql:  SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  "San Francisco State University"
ground truth values:  [('Campuses.Campus', 'San Francisco State University')]
matched values OrderedDict([(8, ('Campuses.Campus', 'San Francisco State University')), (15, ('Campuses.Location', 'San Francisco')), (20, ('Campuses.County', 'San Francisco'))])
--------------------
Picklist: What is the campus fee of "San Francisco State University" in year 2000?, Campuses, Campus, [San Francisco State University]
Picklist: What is the campus fee of "San Francisco State University" in year 2000?, Campuses, Location, [San Francisco]
Picklist: What is the campus fee of "San Francisco State University" in year 2000?, Campuses, County, [San Francisco]
--------------------
text:  What is the campus fee of "San Francisco State University" in year 2000?
sql:  SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  "San Francisco State University" AND t1.year  =  2000
ground truth values:  [('Campuses.Campus', 'San Francisco State University')]
matched values OrderedDict([(8, ('Campuses.Campus', 'San Francisco State University')), (15, ('Campuses.Location', 'San Francisco')), (20, ('Campuses.County', 'San Francisco'))])
--------------------
Picklist: In the year 2000, what is the campus fee for San Francisco State University?, Campuses, Campus, [San Francisco State University]
Picklist: In the year 2000, what is the campus fee for San Francisco State University?, Campuses, Location, [San Francisco]
Picklist: In the year 2000, what is the campus fee for San Francisco State University?, Campuses, County, [San Francisco]
--------------------
text:  In the year 2000, what is the campus fee for San Francisco State University?
sql:  SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  "San Francisco State University" AND t1.year  =  2000
ground truth values:  [('Campuses.Campus', 'San Francisco State University')]
matched values OrderedDict([(8, ('Campuses.Campus', 'San Francisco State University')), (15, ('Campuses.Location', 'San Francisco')), (20, ('Campuses.County', 'San Francisco'))])
--------------------
Picklist: Find the campus fee of "San Jose State University" in year 2000., Campuses, Campus, [San Jose State University]
Picklist: Find the campus fee of "San Jose State University" in year 2000., Campuses, Location, [San Jose]
--------------------
text:  Find the campus fee of "San Jose State University" in year 2000.
sql:  SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  "San Jose State University" AND t1.year  =  2000
ground truth values:  [('Campuses.Campus', 'San Jose State University')]
matched values OrderedDict([(8, ('Campuses.Campus', 'San Jose State University')), (15, ('Campuses.Location', 'San Jose'))])
--------------------
Picklist: What is the campus fee in the year 2000 for San Jose State University?, Campuses, Campus, [San Jose State University]
Picklist: What is the campus fee in the year 2000 for San Jose State University?, Campuses, Location, [San Jose]
--------------------
text:  What is the campus fee in the year 2000 for San Jose State University?
sql:  SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  "San Jose State University" AND t1.year  =  2000
ground truth values:  [('Campuses.Campus', 'San Jose State University')]
matched values OrderedDict([(8, ('Campuses.Campus', 'San Jose State University')), (15, ('Campuses.Location', 'San Jose'))])
--------------------
--------------------
text:  Find the average height and weight for all males (sex is M).
sql:  SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'
ground truth values:  [('people.Sex', 'M')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the average height and weight across males (sex is M)?
sql:  SELECT avg(height) ,  avg(weight) FROM people WHERE sex  =  'M'
ground truth values:  [('people.Sex', 'M')]
matched values OrderedDict()
--------------------
--------------------
text:  list all female (sex is F) candidate names in the alphabetical order.
sql:  SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name
ground truth values:  [('people.Sex', 'F')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the names of all female candidates in alphabetical order (sex is F)?
sql:   27%|██▋       | 2432/8943 [03:39<01:34, 68.93it/s] 27%|██▋       | 2445/8943 [03:39<01:21, 79.85it/s] 27%|██▋       | 2455/8943 [03:39<01:18, 82.68it/s] 28%|██▊       | 2465/8943 [03:40<01:20, 80.37it/s] 28%|██▊       | 2474/8943 [03:40<01:35, 67.43it/s] 28%|██▊       | 2482/8943 [03:40<01:42, 63.06it/s] 28%|██▊       | 2489/8943 [03:40<01:43, 62.60it/s] 28%|██▊       | 2497/8943 [03:40<01:37, 66.06it/s] 28%|██▊       | 2504/8943 [03:40<01:44, 61.57it/s] 28%|██▊       | 2511/8943 [03:40<01:47, 59.96it/s] 28%|██▊       | 2518/8943 [03:41<01:52, 56.93it/s] 28%|██▊       | 2526/8943 [03:41<01:47, 59.82it/s] 28%|██▊       | 2533/8943 [03:48<35:33,  3.00it/s] 28%|██▊       | 2546/8943 [03:48<25:05,  4.25it/s] 29%|██▊       | 2555/8943 [03:48<17:55,  5.94it/s] 29%|██▊       | 2563/8943 [03:48<12:55,  8.22it/s] 29%|██▊       | 2571/8943 [03:49<09:28, 11.20it/s]SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name
ground truth values:  [('people.Sex', 'F')]
matched values OrderedDict()
--------------------
Picklist: Find the titles of all movies directed by steven spielberg., Movie, director, [Steven Spielberg]
Picklist: What are the names of all movies directed by Steven Spielberg?, Movie, director, [Steven Spielberg]
Picklist: What is the name of the movie produced after 2000 and directed by James Cameron?, Movie, director, [James Cameron]
Picklist: What is the name of the movie produced after 2000 and directed by James Cameron?, Reviewer, name, [James Cameron]
--------------------
text:  What is the name of the movie produced after 2000 and directed by James Cameron?
sql:  SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000
ground truth values:  [('Movie.director', 'James Cameron')]
matched values OrderedDict([(13, ('Movie.director', 'James Cameron')), (23, ('Reviewer.name', 'James Cameron'))])
--------------------
Picklist: What are the titles of all movies that James Cameron directed after 2000?, Movie, director, [James Cameron]
Picklist: What are the titles of all movies that James Cameron directed after 2000?, Reviewer, name, [James Cameron]
--------------------
text:  What are the titles of all movies that James Cameron directed after 2000?
sql:  SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000
ground truth values:  [('Movie.director', 'James Cameron')]
matched values OrderedDict([(13, ('Movie.director', 'James Cameron')), (23, ('Reviewer.name', 'James Cameron'))])
--------------------
Picklist: Who is the director of movie Avatar?, Movie, title, [Avatar]
Picklist: Who directed Avatar?, Movie, title, [Avatar]
Picklist: What is the reviewer id of Daniel Lewis?, Reviewer, name, [Daniel Lewis]
Picklist: What is the id of the reviewer named Daniel Lewis?, Reviewer, name, [Daniel Lewis]
Picklist: What is the names of movies whose created year is after all movies directed by Steven Spielberg?, Movie, director, [Steven Spielberg]
Picklist: What are the names of all movies that were created after the most recent Steven Spielberg film?, Movie, director, [Steven Spielberg]
Picklist: What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron?, Movie, director, [James Cameron]
Picklist: What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron?, Reviewer, name, [James Cameron]
--------------------
text:  What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron?
sql:  SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  "James Cameron")
ground truth values:  [('Movie.director', 'James Cameron')]
matched values OrderedDict([(13, ('Movie.director', 'James Cameron')), (23, ('Reviewer.name', 'James Cameron'))])
--------------------
Picklist: What are the titles and directors of all movies that have a rating higher than the average James Cameron film rating?, Movie, director, [James Cameron]
Picklist: What are the titles and directors of all movies that have a rating higher than the average James Cameron film rating?, Reviewer, name, [James Cameron]
--------------------
text:  What are the titles and directors of all movies that have a rating higher than the average James Cameron film rating?
sql:  SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  "James Cameron")
ground truth values:  [('Movie.director', 'James Cameron')]
matched values OrderedDict([(13, ('Movie.director', 'James Cameron')), (23, ('Reviewer.name', 'James Cameron'))])
--------------------
Picklist: Find the names of all reviewers who rated Gone with the Wind., Movie, title, [Gone with the Wind]
Picklist: What are the names of all the different reviewers who rates Gone with the Wind?, Movie, title, [Gone with the Wind]
Picklist: Find the names of all directors whose movies are rated by Sarah Martinez., Reviewer, name, [Sarah Martinez]
Picklist: What are the names of all directors whose movies have been reviewed by Sarah Martinez?, Reviewer, name, [Sarah Martinez]
Picklist: Find the titles of all movies not reviewed by Chris Jackson., Reviewer, name, [Chris Jackson]
Picklist: What are the titles of all movies that were not reviewed by Chris Jackson?, Reviewer, name, [Chris Jackson]
Picklist: Find the average rating star for each movie that are not reviewed by Brittany Harris., Reviewer, name, [Brittany Harris]
Picklist: What is the average rating for each movie that has never been reviewed by Brittany Harris?, Reviewer, name, [Brittany Harris]
Picklist: What are the ids of the movies that are not reviewed by Brittany Harris., Reviewer, name, [Brittany Harris]
--------------------
text:  What are the ids of all moviest hat have not been reviewed by Britanny Harris?
sql:  SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  "Brittany Harris"
ground truth values:  [('Reviewer.name', 'Brittany Harris')]
matched values OrderedDict()
--------------------
Picklist: What are names of the movies that are either made after 2000 or reviewed by Brittany Harris?, Reviewer, name, [Brittany Harris]
Picklist: What are the names of all movies that were made after 2000 or reviewed by Brittany Harris?, Reviewer, name, [Brittany Harris]
Picklist: What are names of the movies that are either made before 1980 or directed by James Cameron?, Movie, director, [James Cameron]
Picklist: What are names of the movies that are either made before 1980 or directed by James Cameron?, Reviewer, name, [James Cameron]
--------------------
text:  What are names of the movies that are either made before 1980 or directed by James Cameron?
sql:  SELECT title FROM Movie WHERE director  =  "James Cameron" OR YEAR   <  1980
ground truth values:  [('Movie.director', 'James Cameron')]
matched values OrderedDict([(13, ('Movie.director', 'James Cameron')), (23, ('Reviewer.name', 'James Cameron'))])
--------------------
Picklist: What are the names of all movies made before 1980 or had James Cameron as the director?, Movie, director, [James Cameron]
Picklist: What are the names of all movies made before 1980 or had James Cameron as the director?, Reviewer, name, [James Cameron]
--------------------
text:  What are the names of all movies made before 1980 or had James Cameron as the director?
sql:  SELECT title FROM Movie WHERE director  =  "James Cameron" OR YEAR   <  1980
ground truth values:  [('Movie.director', 'James Cameron')]
matched values OrderedDict([(13, ('Movie.director', 'James Cameron')), (23, ('Reviewer.name', 'James Cameron'))])
--------------------
Picklist: List the distinct police forces of counties whose location is not on east side., county_public_safety, Location, [East]
Picklist: What are the different police forces of counties that are not located in the East?, county_public_safety, Location, [East]
Picklist: Show the police force shared by counties with location on the east and west., county_public_safety, Location, [East]
Picklist: Show the police force shared by counties with location on the east and west., county_public_safety, Location, [West]
Picklist: Which police forces operate in both counties that are located in the East and in the West?, county_public_safety, Location, [East]
Picklist: Which police forces operate in both counties that are located in the East and in the West?, county_public_safety, Location, [West]
Picklist: Find the names of all modern rooms with a base price below $160 and two beds., Rooms, decor, [modern]
Picklist: What are the names of modern rooms that have a base price lower than $160 and two beds., Rooms, decor, [modern]
 29%|██▉       | 2579/8943 [03:49<08:15, 12.85it/s] 29%|██▉       | 2585/8943 [03:49<07:29, 14.13it/s] 29%|██▉       | 2590/8943 [03:50<06:48, 15.54it/s] 29%|██▉       | 2594/8943 [03:50<06:18, 16.77it/s] 29%|██▉       | 2598/8943 [03:50<05:45, 18.35it/s] 29%|██▉       | 2602/8943 [03:50<05:24, 19.56it/s] 29%|██▉       | 2605/8943 [03:50<05:45, 18.33it/s] 29%|██▉       | 2608/8943 [03:50<05:15, 20.09it/s] 29%|██▉       | 2612/8943 [03:51<04:40, 22.55it/s] 29%|██▉       | 2615/8943 [03:51<04:35, 22.97it/s] 29%|██▉       | 2618/8943 [03:51<04:32, 23.22it/s] 29%|██▉       | 2621/8943 [03:51<04:34, 23.04it/s] 29%|██▉       | 2624/8943 [03:51<04:28, 23.50it/s] 29%|██▉       | 2627/8943 [03:51<04:26, 23.69it/s] 29%|██▉       | 2630/8943 [03:51<04:27, 23.58it/s] 29%|██▉       | 2633/8943 [03:51<04:13, 24.90it/s] 29%|██▉       | 2636/8943 [03:52<04:16, 24.54it/s] 30%|██▉       | 2639/8943 [03:52<04:18, 24.37it/s] 30%|██▉       | 2642/8943 [03:52<04:37, 22.69it/s] 30%|██▉       | 2645/8943 [03:52<04:42, 22.31it/s]Picklist: How many kids stay in the rooms reserved by ROY SWEAZY?, Reservations, LastName, [SWEAZY]
Picklist: How many kids stay in the rooms reserved by ROY SWEAZY?, Reservations, FirstName, [ROY]
Picklist: Find the number of kids staying in the rooms reserved by a person called ROY SWEAZ., Reservations, FirstName, [ROY]
--------------------
text:  Find the number of kids staying in the rooms reserved by a person called ROY SWEAZ.
sql:  SELECT kids FROM Reservations WHERE FirstName = "ROY" AND LastName  =  "SWEAZY"
ground truth values:  [('Reservations.FirstName', 'ROY'), ('Reservations.LastName', 'SWEAZY')]
matched values OrderedDict([(46, ('Reservations.FirstName', 'ROY'))])
--------------------
Picklist: How many times does ROY SWEAZY has reserved a room., Reservations, LastName, [SWEAZY]
Picklist: How many times does ROY SWEAZY has reserved a room., Reservations, FirstName, [ROY]
Picklist: Find the number of times ROY SWEAZY has reserved a room., Reservations, LastName, [SWEAZY]
Picklist: Find the number of times ROY SWEAZY has reserved a room., Reservations, FirstName, [ROY]
Picklist: How many adults stay in the room CONRAD SELBIG checked in on Oct 23, 2010?, Reservations, LastName, [CONRAD]
Picklist: How many adults stay in the room CONRAD SELBIG checked in on Oct 23, 2010?, Reservations, LastName, [SELBIG]
Picklist: How many adults stay in the room CONRAD SELBIG checked in on Oct 23, 2010?, Reservations, FirstName, [CONRAD]
--------------------
text:  How many adults stay in the room CONRAD SELBIG checked in on Oct 23, 2010?
sql:  SELECT Adults FROM Reservations WHERE CheckIn  =  "2010-10-23" AND FirstName  =  "CONRAD" AND LastName  =  "SELBIG"
ground truth values:  [('Reservations.CheckIn', '2010-10-23'), ('Reservations.FirstName', 'CONRAD'), ('Reservations.LastName', 'SELBIG')]
matched values OrderedDict([(43, ('Reservations.LastName', 'CONRAD')), (45, ('Reservations.LastName', 'SELBIG')), (52, ('Reservations.FirstName', 'CONRAD'))])
--------------------
Picklist: Find the number of adults for the room reserved and checked in by CONRAD SELBIG on Oct 23, 2010., Reservations, LastName, [CONRAD]
Picklist: Find the number of adults for the room reserved and checked in by CONRAD SELBIG on Oct 23, 2010., Reservations, LastName, [SELBIG]
Picklist: Find the number of adults for the room reserved and checked in by CONRAD SELBIG on Oct 23, 2010., Reservations, FirstName, [CONRAD]
--------------------
text:  Find the number of adults for the room reserved and checked in by CONRAD SELBIG on Oct 23, 2010.
sql:  SELECT Adults FROM Reservations WHERE CheckIn  =  "2010-10-23" AND FirstName  =  "CONRAD" AND LastName  =  "SELBIG"
ground truth values:  [('Reservations.CheckIn', '2010-10-23'), ('Reservations.FirstName', 'CONRAD'), ('Reservations.LastName', 'SELBIG')]
matched values OrderedDict([(43, ('Reservations.LastName', 'CONRAD')), (45, ('Reservations.LastName', 'SELBIG')), (52, ('Reservations.FirstName', 'CONRAD'))])
--------------------
Picklist: How many kids stay in the room DAMIEN TRACHSEL checked in on Sep 21, 2010?, Reservations, LastName, [TRACHSEL]
Picklist: How many kids stay in the room DAMIEN TRACHSEL checked in on Sep 21, 2010?, Reservations, FirstName, [DAMIEN]
--------------------
text:  How many kids stay in the room DAMIEN TRACHSEL checked in on Sep 21, 2010?
sql:  SELECT Kids FROM Reservations WHERE CheckIn  =  "2010-09-21" AND FirstName  =  "DAMIEN" AND LastName  =  "TRACHSEL"
ground truth values:  [('Reservations.CheckIn', '2010-09-21'), ('Reservations.FirstName', 'DAMIEN'), ('Reservations.LastName', 'TRACHSEL')]
matched values OrderedDict([(43, ('Reservations.LastName', 'TRACHSEL')), (50, ('Reservations.FirstName', 'DAMIEN'))])
--------------------
Picklist: Return the number of kids for the room reserved and checked in by DAMIEN TRACHSEL on  Sep 21, 2010., Reservations, LastName, [TRACHSEL]
Picklist: Return the number of kids for the room reserved and checked in by DAMIEN TRACHSEL on  Sep 21, 2010., Reservations, FirstName, [DAMIEN]
--------------------
text:  Return the number of kids for the room reserved and checked in by DAMIEN TRACHSEL on  Sep 21, 2010.
sql:  SELECT Kids FROM Reservations WHERE CheckIn  =  "2010-09-21" AND FirstName  =  "DAMIEN" AND LastName  =  "TRACHSEL"
ground truth values:  [('Reservations.CheckIn', '2010-09-21'), ('Reservations.FirstName', 'DAMIEN'), ('Reservations.LastName', 'TRACHSEL')]
matched values OrderedDict([(43, ('Reservations.LastName', 'TRACHSEL')), (50, ('Reservations.FirstName', 'DAMIEN'))])
--------------------
Picklist: How many king beds are there?, Rooms, bedType, [King]
Picklist: Find the total number of king beds available., Rooms, bedType, [King]
Picklist: List the names and decor of rooms that have a king bed. Sort the list by their price., Rooms, bedType, [King]
Picklist: What are the names and decor of rooms with a king bed? Sort them by their price, Rooms, bedType, [King]
Picklist: What is the decor of room Recluse and defiance?, Rooms, roomName, [Recluse and defiance]
Picklist: Return the decor of the room named "Recluse and defiance"., Rooms, roomName, [Recluse and defiance]
Picklist: What is the total number of people who could stay in the modern rooms in this inn?, Rooms, decor, [modern]
Picklist: How many people in total can stay in the modern rooms of this inn?, Rooms, decor, [modern]
Picklist: Find the number of rooms with a king bed., Rooms, bedType, [King]
Picklist: How many rooms have a king bed?, Rooms, bedType, [King]
Picklist: List the type of bed and name of all traditional rooms., Rooms, decor, [traditional]
Picklist: What are the bed type and name of all the rooms with traditional decor?, Rooms, decor, [traditional]
Picklist: Find the number of rooms with king bed for each decor type., Rooms, bedType, [King]
Picklist: How many rooms have king beds? Report the number for each decor type., Rooms, bedType, [King]
Picklist: List the name of rooms with king or queen bed., Rooms, bedType, [Queen]
Picklist: List the name of rooms with king or queen bed., Rooms, bedType, [King]
Picklist: List the name of rooms with king or queen bed., Reservations, FirstName, [QUEEN]
--------------------
text:  List the name of rooms with king or queen bed.
sql:  SELECT roomName FROM Rooms WHERE bedType  =  "King" OR bedType  =  "Queen"
ground truth values:  [('Rooms.bedType', 'King'), ('Rooms.bedType', 'Queen')]
matched values OrderedDict([(15, ('Rooms.bedType', 'Queen')), (17, ('Rooms.bedType', 'King')), (50, ('Reservations.FirstName', 'QUEEN'))])
--------------------
Picklist: What are the names of rooms that have either king or queen bed?, Rooms, bedType, [Queen]
Picklist: What are the names of rooms that have either king or queen bed?, Rooms, bedType, [King]
Picklist: What are the names of rooms that have either king or queen bed?, Reservations, FirstName, [QUEEN]
--------------------
text:  What are the names of rooms that have either king or queen bed?
sql:  SELECT roomName FROM Rooms WHERE bedType  =  "King" OR bedType  =  "Queen"
ground truth values:  [('Rooms.bedType', 'King'), ('Rooms.bedType', 'Queen')]
matched values OrderedDict([(15, ('Rooms.bedType', 'Queen')), (17, ('Rooms.bedType', 'King')), (50, ('Reservations.FirstName', 'QUEEN'))])
--------------------
Picklist: Find the name of rooms booked by some customers whose first name contains ROY., Reservations, FirstName, [ROY]
--------------------
text:  Find the name of rooms booked by some customers whose first name contains ROY.
sql:  SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'
ground truth values:  []
matched values OrderedDict([(46, ('Reservations.FirstName', 'ROY'))])
--------------------
Picklist: What are the name of rooms booked by customers whose first name has "ROY" in part?, Reservations, FirstName, [ROY]
--------------------
text:  What are the name of rooms booked by customers whose first name has "ROY" in part?
sql:  SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'
ground truth values:  []
matched values OrderedDict([(46, ('Reservations.FirstName', 'ROY'))])
 30%|██▉       | 2650/8943 [03:52<04:00, 26.14it/s] 30%|██▉       | 2660/8943 [03:52<03:07, 33.54it/s] 30%|██▉       | 2672/8943 [03:52<02:27, 42.50it/s] 30%|██▉       | 2680/8943 [03:52<02:08, 48.56it/s] 30%|███       | 2687/8943 [03:53<02:07, 49.21it/s] 30%|███       | 2700/8943 [03:53<01:44, 59.86it/s] 30%|███       | 2709/8943 [03:53<01:34, 65.84it/s] 30%|███       | 2718/8943 [03:53<01:30, 68.95it/s]--------------------
Picklist: what are the details of the cmi masters that have the cross reference code 'Tax'?, CMI_Cross_References, source_system_code, [Tax]
Picklist: What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code., CMI_Cross_References, source_system_code, [Tax]
--------------------
text:  What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.
sql:  SELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1
ground truth values:  []
matched values OrderedDict([(33, ('CMI_Cross_References.source_system_code', 'Tax'))])
--------------------
Picklist: How many business rates are related to each cmi cross reference? List cross reference id, master customer id and the n, CMI_Cross_References, source_system_code, [Business]
--------------------
text:  How many business rates are related to each cmi cross reference? List cross reference id, master customer id and the n
sql:  SELECT T2.cmi_cross_ref_id ,  T2.master_customer_id ,  count(*) FROM Business_Rates AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T2.cmi_cross_ref_id
ground truth values:  []
matched values OrderedDict([(33, ('CMI_Cross_References.source_system_code', 'Business'))])
--------------------
Picklist: What is the tax source system code related to the benefits and overpayments? List the code and the benifit id, order by benifit id., CMI_Cross_References, source_system_code, [Benefits]
Picklist: What is the tax source system code related to the benefits and overpayments? List the code and the benifit id, order by benifit id., CMI_Cross_References, source_system_code, [Tax]
--------------------
text:  What is the tax source system code related to the benefits and overpayments? List the code and the benifit id, order by benifit id.
sql:  SELECT T1.source_system_code ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id ORDER BY T2.council_tax_id
ground truth values:  []
matched values OrderedDict([(33, ('CMI_Cross_References.source_system_code', 'Benefits')), (35, ('CMI_Cross_References.source_system_code', 'Tax'))])
--------------------
Picklist: Wat is the tax source system code and master customer id of the taxes related to each parking fine id?, CMI_Cross_References, source_system_code, [Parking]
Picklist: Wat is the tax source system code and master customer id of the taxes related to each parking fine id?, CMI_Cross_References, source_system_code, [Tax]
--------------------
text:  Wat is the tax source system code and master customer id of the taxes related to each parking fine id?
sql:  SELECT T1.source_system_code ,  T1.master_customer_id ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id
ground truth values:  []
matched values OrderedDict([(33, ('CMI_Cross_References.source_system_code', 'Parking')), (35, ('CMI_Cross_References.source_system_code', 'Tax'))])
--------------------
Picklist: What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?, Customer_Master_Index, cmi_details, [Schmidt, Kertzmann and Lubowitz]
Picklist: What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?, CMI_Cross_References, source_system_code, [Tax]
--------------------
text:  What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?
sql:  SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id  =  T2.master_customer_id WHERE T3.cmi_details != 'Schmidt ,  Kertzmann and Lubowitz'
ground truth values:  [('Customer_Master_Index.cmi_details', 'Schmidt ,  Kertzmann and Lubowitz')]
matched values OrderedDict([(14, ('Customer_Master_Index.cmi_details', 'Schmidt, Kertzmann and Lubowitz')), (44, ('CMI_Cross_References.source_system_code', 'Tax'))])
--------------------
Picklist: What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'?, CMI_Cross_References, source_system_code, [Electoral]
Picklist: What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'?, CMI_Cross_References, source_system_code, [Tax]
Picklist: List the council tax ids and their related cmi cross references of all the parking fines., CMI_Cross_References, source_system_code, [Parking]
Picklist: List the council tax ids and their related cmi cross references of all the parking fines., CMI_Cross_References, source_system_code, [Tax]
--------------------
text:  List the council tax ids and their related cmi cross references of all the parking fines.
sql:  SELECT council_tax_id ,  cmi_cross_ref_id FROM parking_fines
ground truth values:  []
matched values OrderedDict([(33, ('CMI_Cross_References.source_system_code', 'Parking')), (35, ('CMI_Cross_References.source_system_code', 'Tax'))])
--------------------
Picklist: What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'?, Customer_Master_Index, cmi_details, [Gottlieb, Becker and Wyman]
--------------------
text:  What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'?
sql:  SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T1.cmi_details  =  'Gottlieb ,  Becker and Wyman'
ground truth values:  [('Customer_Master_Index.cmi_details', 'Gottlieb ,  Becker and Wyman')]
matched values OrderedDict([(14, ('Customer_Master_Index.cmi_details', 'Gottlieb, Becker and Wyman'))])
--------------------
Picklist: Which cmi cross reference id is not related to any parking taxes?, CMI_Cross_References, source_system_code, [Parking]
--------------------
text:  Which cmi cross reference id is not related to any parking taxes?
sql:  SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines
ground truth values:  []
matched values OrderedDict([(33, ('CMI_Cross_References.source_system_code', 'Parking'))])
--------------------
Picklist: Show the first year and last year of parties with theme "Spring" or "Teqnology"., party, Party_Theme, [Teqnology]
Picklist: Show the first year and last year of parties with theme "Spring" or "Teqnology"., party, Party_Theme, [Spring]
Picklist: What are the first year and last year of the parties whose theme is "Spring" or "Teqnology"?, party, Party_Theme, [Teqnology]
Picklist: What are the first year and last year of the parties whose theme is "Spring" or "Teqnology"?, party, Party_Theme, [Spring]
Picklist: Show names for all regions except for Denmark., region, Region_name, [Denmark]
Picklist: Return the names of all regions other than Denmark., region, Region_name, [Denmark]
Picklist: Show storm name with at least two regions and 10 cities affected., storm, Name, [Two]
--------------------
text:  Show storm name with at least two regions and 10 cities affected.
sql:  SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10
ground truth values:  []
matched values OrderedDict([(9, ('storm.Name', 'Two'))])
--------------------
 30%|███       | 2727/8943 [03:53<01:41, 61.08it/s] 31%|███       | 2735/8943 [03:53<01:50, 56.31it/s] 31%|███       | 2748/8943 [03:53<01:31, 67.57it/s] 31%|███       | 2760/8943 [03:53<01:21, 75.93it/s] 31%|███       | 2770/8943 [03:54<01:26, 71.15it/s] 31%|███       | 2779/8943 [03:54<01:29, 68.68it/s] 31%|███       | 2788/8943 [03:54<01:23, 73.48it/s] 31%|███▏      | 2796/8943 [03:54<01:21, 75.08it/s] 31%|███▏      | 2804/8943 [03:54<01:34, 65.28it/s] 31%|███▏      | 2813/8943 [03:54<01:27, 70.06it/s] 32%|███▏      | 2821/8943 [03:54<01:28, 69.42it/s] 32%|███▏      | 2829/8943 [03:54<01:24, 72.05it/s] 32%|███▏      | 2837/8943 [03:55<01:29, 68.59it/s]Picklist: What are the names of storms that both affected two or more regions and affected a total of 10 or more cities?, storm, Name, [Two]
--------------------
text:  What are the names of storms that both affected two or more regions and affected a total of 10 or more cities?
sql:  SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10
ground truth values:  []
matched values OrderedDict([(9, ('storm.Name', 'Two'))])
--------------------
Picklist: Show all storm names except for those with at least two affected regions., storm, Name, [Two]
--------------------
text:  Show all storm names except for those with at least two affected regions.
sql:  SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2
ground truth values:  []
matched values OrderedDict([(9, ('storm.Name', 'Two'))])
--------------------
Picklist: What are the names of storms that did not affect two or more regions?, storm, Name, [Two]
--------------------
text:  What are the names of storms that did not affect two or more regions?
sql:  SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2
ground truth values:  []
matched values OrderedDict([(9, ('storm.Name', 'Two'))])
--------------------
Picklist: Show all storm names affecting region "Denmark"., region, Region_name, [Denmark]
Picklist: What are the names of the storms that affected Denmark?, region, Region_name, [Denmark]
Picklist: Show the region name with at least two storms., storm, Name, [Two]
--------------------
text:  Show the region name with at least two storms.
sql:  SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2
ground truth values:  []
matched values OrderedDict([(9, ('storm.Name', 'Two'))])
--------------------
Picklist: What are the names of regions with two or more storms?, storm, Name, [Two]
--------------------
text:  What are the names of regions with two or more storms?
sql:  SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2
ground truth values:  []
matched values OrderedDict([(9, ('storm.Name', 'Two'))])
--------------------
Picklist: Find the name of the storm that affected both Afghanistan and Albania regions., region, Region_name, [Afghanistan]
Picklist: Find the name of the storm that affected both Afghanistan and Albania regions., region, Region_name, [Albania]
Picklist: What are the names of the storms that affected both the regions of Afghanistan and Albania?, region, Region_name, [Afghanistan]
Picklist: What are the names of the storms that affected both the regions of Afghanistan and Albania?, region, Region_name, [Albania]
Picklist: Show the zip code of the county with name "Howard"., county, County_name, [Howard]
Picklist: What is the zip code the county named "Howard" is located in?, county, County_name, [Howard]
Picklist: Show the lieutenant governor and comptroller from the democratic party., party, Party, [Democratic]
Picklist: Who are the lieutenant governor and comptroller from the democratic party?, party, Party, [Democratic]
Picklist: In which distinct years was the governor "Eliot Spitzer"?, party, Governor, [Eliot Spitzer]
Picklist: In which distinct years was the governor "Eliot Spitzer"?, party, Attorney_General, [Eliot Spitzer]
--------------------
text:  In which distinct years was the governor "Eliot Spitzer"?
sql:  SELECT DISTINCT YEAR FROM party WHERE Governor  =  "Eliot Spitzer"
ground truth values:  [('party.Governor', 'Eliot Spitzer')]
matched values OrderedDict([(26, ('party.Governor', 'Eliot Spitzer')), (40, ('party.Attorney_General', 'Eliot Spitzer'))])
--------------------
Picklist: Find the distinct years when the governor was named "Eliot Spitzer"., party, Governor, [Eliot Spitzer]
Picklist: Find the distinct years when the governor was named "Eliot Spitzer"., party, Attorney_General, [Eliot Spitzer]
--------------------
text:  Find the distinct years when the governor was named "Eliot Spitzer".
sql:  SELECT DISTINCT YEAR FROM party WHERE Governor  =  "Eliot Spitzer"
ground truth values:  [('party.Governor', 'Eliot Spitzer')]
matched values OrderedDict([(26, ('party.Governor', 'Eliot Spitzer')), (40, ('party.Attorney_General', 'Eliot Spitzer'))])
--------------------
Picklist: What are the names of the county that the delegates on "Appropriations" committee belong to?, election, Committee, [Appropriations]
Picklist: Which county do the delegates on "Appropriations" committee belong to? Give me the county names., election, Committee, [Appropriations]
Picklist: Return all the committees that have delegates from Democratic party., party, Party, [Democratic]
Picklist: Which committees have delegates from the Democratic party?, party, Party, [Democratic]
Picklist: What are the names of parties that have both delegates on "Appropriations" committee and, election, Committee, [Appropriations]
--------------------
text:  What are the names of parties that have both delegates on "Appropriations" committee and
sql:  SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  "Appropriations" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  "Economic Matters"
ground truth values:  [('election.Committee', 'Appropriations'), ('election.Committee', 'Economic Matters')]
matched values OrderedDict([(58, ('election.Committee', 'Appropriations'))])
--------------------
Picklist: Which parties have delegates in both the "Appropriations" committee and the "Economic Matters" committee?, election, Committee, [Economic Matters]
Picklist: Which parties have delegates in both the "Appropriations" committee and the "Economic Matters" committee?, election, Committee, [Appropriations]
Picklist: Which committees have delegates from both democratic party and liberal party?, party, Party, [Democratic]
Picklist: Which committees have delegates from both democratic party and liberal party?, party, Party, [Liberal]
Picklist: Find the committees that have delegates both from from the democratic party and the liberal party., party, Party, [Democratic]
Picklist: Find the committees that have delegates both from from the democratic party and the liberal party., party, Party, [Liberal]
Picklist: Show the names of journalists from "England" or "Wales"., journalist, Nationality, [England]
Picklist: Show the names of journalists from "England" or "Wales"., journalist, Nationality, [Wales]
Picklist: What is the address of the restaurant Subway?, Restaurant, ResName, [Subway]
Picklist: What is the rating of the restaurant Subway?, Restaurant, ResName, [Subway]
Picklist: What is the description of the restaurant type Sandwich?, Restaurant_Type, ResTypeName, [Sandwich]
Picklist: What is the age of student Linda Smith?, Student, LName, [Smith]
Picklist: What is the age of student Linda Smith?, Student, Fname, [Linda]
Picklist: What is the gender of the student Linda Smith?, Student, LName, [Smith]
Picklist: What is the gender of the student Linda Smith?, Student, Fname, [Linda]
Picklist: Which city does student Linda Smith live in?, Student, LName, [Smith]
Picklist: Which city does student Linda Smith live in?, Student, Fname, [Linda]
--------------------
text:  List all female students age is older than 18 who is not majoring in 600. List students' first name and last name.
sql:  SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major != 600 AND Sex = 'F'
ground truth values:  [('Student.Sex', 'F')]
matched values OrderedDict()
--------------------
Picklist: How many restaurant is the Sandwich type restaurant?, Restaurant_Type, ResTypeName, [Sandwich]
 32%|███▏      | 2845/8943 [03:55<01:45, 57.98it/s] 32%|███▏      | 2852/8943 [03:55<01:49, 55.41it/s] 32%|███▏      | 2858/8943 [03:55<01:51, 54.35it/s] 32%|███▏      | 2867/8943 [03:55<01:39, 61.28it/s] 32%|███▏      | 2874/8943 [03:55<01:57, 51.81it/s] 32%|███▏      | 2880/8943 [03:55<02:04, 48.61it/s] 32%|███▏      | 2886/8943 [03:56<02:08, 47.23it/s] 32%|███▏      | 2892/8943 [03:56<02:12, 45.72it/s]Picklist: How long does student Linda Smith spend on the restaurant in total?, Student, LName, [Smith]
Picklist: How long does student Linda Smith spend on the restaurant in total?, Student, Fname, [Linda]
Picklist: How many times has the student Linda Smith visited Subway?, Student, LName, [Smith]
Picklist: How many times has the student Linda Smith visited Subway?, Student, Fname, [Linda]
Picklist: How many times has the student Linda Smith visited Subway?, Restaurant, ResName, [Subway]
Picklist: When did Linda Smith visit Subway?, Student, LName, [Smith]
Picklist: When did Linda Smith visit Subway?, Student, Fname, [Linda]
Picklist: When did Linda Smith visit Subway?, Restaurant, ResName, [Subway]
Picklist: Find the ids of orders whose status is 'Success'., Actual_Orders, order_status_code, [Success]
Picklist: Find the names of customers who are not living in the state of California., Addresses, state_province_county, [California]
Picklist: List the names and emails of customers who payed by Visa card., Customers, payment_method, [Visa]
Picklist: Find the names and phone numbers of customers living in California state., Addresses, state_province_county, [California]
Picklist: What are the titles of papers published by "Jeremy Gibbons"?, Authors, lname, [Gibbons]
Picklist: What are the titles of papers published by "Jeremy Gibbons"?, Authors, fname, [Jeremy]
Picklist: Find the titles of all the papers written by "Jeremy Gibbons", Authors, lname, [Gibbons]
Picklist: Find the titles of all the papers written by "Jeremy Gibbons", Authors, fname, [Jeremy]
Picklist: Find all the papers published by "Aaron Turon"., Authors, lname, [Turon]
Picklist: Find all the papers published by "Aaron Turon"., Authors, fname, [Aaron]
Picklist: Find the titles of all the papers written by "Aaron Turon"., Authors, lname, [Turon]
Picklist: Find the titles of all the papers written by "Aaron Turon"., Authors, fname, [Aaron]
Picklist: How many papers have "Atsushi Ohori" published?, Authors, lname, [Ohori]
Picklist: How many papers have "Atsushi Ohori" published?, Authors, fname, [Atsushi]
Picklist: How many papers are "Atsushi Ohori" the author of?, Authors, lname, [Ohori]
Picklist: How many papers are "Atsushi Ohori" the author of?, Authors, fname, [Atsushi]
Picklist: What is the name of the institution that "Matthias Blume" belongs to?, Authors, lname, [Blume]
Picklist: What is the name of the institution that "Matthias Blume" belongs to?, Authors, fname, [Matthias]
Picklist: Which institution is the author "Matthias Blume" belong to? Give me the name of the institution., Authors, lname, [Blume]
Picklist: Which institution is the author "Matthias Blume" belong to? Give me the name of the institution., Authors, fname, [Matthias]
Picklist: Which institution does "Katsuhiro Ueno" belong to?, Authors, lname, [Ueno]
Picklist: Which institution does "Katsuhiro Ueno" belong to?, Authors, fname, [Katsuhiro]
Picklist: What is the name of the institution the author "Katsuhiro Ueno" belongs to?, Authors, lname, [Ueno]
Picklist: What is the name of the institution the author "Katsuhiro Ueno" belongs to?, Authors, fname, [Katsuhiro]
Picklist: Who belong to the institution "University of Oxford"? Show the first names and last names., Inst, name, [University of Oxford]
Picklist: Find the first names and last names of the authors whose institution affiliation is "University of Oxford"., Inst, name, [University of Oxford]
Picklist: Which authors belong to the institution "Google"? Show the first names and last names., Inst, name, [Google]
Picklist: Find the first names and last names of the authors whose institution affiliation is "Google"., Inst, name, [Google]
Picklist: What are the last names of the author of the paper titled "Binders Unbound"?, Papers, title, [Binders Unbound]
Picklist: Who is the author of the paper titled "Binders Unbound"? Give me the last name., Papers, title, [Binders Unbound]
Picklist: Find the first and last name of the author(s) who wrote the paper "Nameless, Painless"., Papers, title, [Nameless, Painless]
--------------------
text:  Find the first and last name of the author(s) who wrote the paper "Nameless, Painless".
sql:  SELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  "Nameless ,  Painless"
ground truth values:  [('Papers.title', 'Nameless ,  Painless')]
matched values OrderedDict([(29, ('Papers.title', 'Nameless, Painless'))])
--------------------
Picklist: What are the first and last name of the author who published the paper titled "Nameless, Painless"?, Papers, title, [Nameless, Painless]
--------------------
text:  What are the first and last name of the author who published the paper titled "Nameless, Painless"?
sql:  SELECT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title  =  "Nameless ,  Painless"
ground truth values:  [('Papers.title', 'Nameless ,  Painless')]
matched values OrderedDict([(29, ('Papers.title', 'Nameless, Painless'))])
--------------------
Picklist: What are the papers published under the institution "Indiana University"?, Inst, name, [Indiana University]
Picklist: List the titles of the papers whose authors are from the institution "Indiana University"., Inst, name, [Indiana University]
Picklist: Find all the papers published by the institution "Google"., Inst, name, [Google]
Picklist: Which papers were written by authors from the institution "Google"?, Inst, name, [Google]
--------------------
text:  How many papers are published by the institution "Tokohu University"?
sql:  SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  "Tokohu University"
ground truth values:  [('Inst.name', 'Tokohu University')]
matched values OrderedDict()
--------------------
--------------------
text:  Find the number of papers published by authors from the institution "Tokohu University".
sql:  SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  "Tokohu University"
ground truth values:  [('Inst.name', 'Tokohu University')]
matched values OrderedDict()
--------------------
Picklist: Find the number of papers published by the institution "University of Pennsylvania"., Inst, name, [University of Pennsylvania]
Picklist: How many papers are written by authors from the institution "University of Pennsylvania"?, Inst, name, [University of Pennsylvania]
Picklist: Find the papers which have "Olin Shivers" as an author., Authors, lname, [Shivers]
Picklist: Find the papers which have "Olin Shivers" as an author., Authors, fname, [Olin]
Picklist: Which papers did the author "Olin Shivers" write? Give me the paper titles., Authors, lname, [Shivers]
Picklist: Which papers did the author "Olin Shivers" write? Give me the paper titles., Authors, fname, [Olin]
Picklist: Which papers have "Stephanie Weirich" as an author?, Authors, lname, [Weirich]
Picklist: Which papers have "Stephanie Weirich" as an author?, Authors, fname, [Stephanie]
Picklist: Find the titles of the papers the author "Stephanie Weirich" wrote., Authors, lname, [Weirich]
Picklist: Find the titles of the papers the author "Stephanie Weirich" wrote., Authors, fname, [Stephanie]
Picklist: Which paper is published in an institution in "USA" and have "Turon" as its second author?, Inst, country, [USA]
Picklist: Which paper is published in an institution in "USA" and have "Turon" as its second author?, Authors, lname, [Turon]
Picklist: Find papers whose second author has last name "Turon" and is affiliated with an institution in the country "USA"., Inst, country, [USA]
Picklist: Find papers whose second author has last name "Turon" and is affiliated with an institution in the country "USA"., Authors, lname, [Turon]
 32%|███▏      | 2897/8943 [03:56<02:32, 39.67it/s] 32%|███▏      | 2902/8943 [03:56<02:32, 39.59it/s] 33%|███▎      | 2909/8943 [03:56<02:14, 44.74it/s] 33%|███▎      | 2915/8943 [03:56<02:07, 47.27it/s] 33%|███▎      | 2925/8943 [03:58<06:04, 16.49it/s] 33%|███▎      | 2929/8943 [04:02<37:12,  2.69it/s] 33%|███▎      | 2932/8943 [04:05<58:08,  1.72it/s] 33%|███▎      | 2934/8943 [04:08<1:26:08,  1.16it/s] 33%|███▎      | 2936/8943 [04:11<1:46:59,  1.07s/it] 33%|███▎      | 2937/8943 [04:13<1:48:10,  1.08s/it] 33%|███▎      | 2938/8943 [04:14<1:49:26,  1.09s/it] 33%|███▎      | 2939/8943 [04:15<2:10:09,  1.30s/it] 33%|███▎      | 2940/8943 [04:17<2:22:58,  1.43s/it] 33%|███▎      | 2941/8943 [04:18<2:06:53,  1.27s/it] 33%|███▎      | 2942/8943 [04:19<1:57:55,  1.18s/it] 33%|███▎      | 2943/8943 [04:20<1:51:47,  1.12s/it] 33%|███▎      | 2944/8943 [04:21<1:52:53,  1.13s/it] 33%|███▎      | 2945/8943 [04:23<2:24:42,  1.45s/it] 33%|███▎      | 2946/8943 [04:26<2:46:16,  1.66s/it] 33%|███▎      | 2947/8943 [04:27<2:28:08,  1.48s/it] 33%|███▎      | 2948/8943 [04:28<2:13:57,  1.34s/it] 33%|███▎      | 2949/8943 [04:29<2:09:28,  1.30s/it] 33%|███▎      | 2950/8943 [04:30<2:11:46,  1.32s/it] 33%|███▎      | 2951/8943 [04:32<2:19:55,  1.40s/it] 33%|███▎      | 2952/8943 [04:33<2:22:13,  1.42s/it] 33%|███▎      | 2953/8943 [04:35<2:28:25,  1.49s/it] 33%|███▎      | 2954/8943 [04:36<2:31:28,  1.52s/it] 33%|███▎      | 2955/8943 [04:38<2:40:15,  1.61s/it] 33%|███▎      | 2956/8943 [04:40<2:33:42,  1.54s/it] 33%|███▎      | 2957/8943 [04:40<2:12:23,  1.33s/it] 33%|███▎      | 2958/8943 [04:42<2:10:16,  1.31s/it] 33%|███▎      | 2959/8943 [04:43<2:00:25,  1.21s/it] 33%|███▎      | 2960/8943 [04:44<1:52:33,  1.13s/it] 33%|███▎      | 2961/8943 [04:46<2:16:49,  1.37s/it] 33%|███▎      | 2962/8943 [04:47<2:20:54,  1.41s/it] 33%|███▎      | 2963/8943 [04:48<2:10:17,  1.31s/it] 33%|███▎      | 2964/8943 [04:50<2:11:15,  1.32s/it] 33%|███▎      | 2965/8943 [04:51<2:17:24,  1.38s/it] 33%|███▎      | 2966/8943 [04:53<2:20:55,  1.41s/it] 33%|███▎      | 2967/8943 [04:54<2:18:07,  1.39s/it] 33%|███▎      | 2968/8943 [04:55<2:22:15,  1.43s/it] 33%|███▎      | 2969/8943 [04:57<2:28:51,  1.50s/it] 33%|███▎      | 2970/8943 [04:58<2:24:14,  1.45s/it] 33%|███▎      | 2971/8943 [04:59<2:09:14,  1.30s/it] 33%|███▎      | 2972/8943 [05:00<2:03:39,  1.24s/it] 33%|███▎      | 2973/8943 [05:02<2:00:05,  1.21s/it] 33%|███▎      | 2974/8943 [05:03<1:56:18,  1.17s/it] 33%|███▎      | 2975/8943 [05:03<1:46:26,  1.07s/it] 33%|███▎      | 2976/8943 [05:04<1:41:41,  1.02s/it] 33%|███▎      | 2977/8943 [05:06<1:51:59,  1.13s/it] 33%|███▎      | 2978/8943 [05:07<2:00:55,  1.22s/it] 33%|███▎      | 2979/8943 [05:08<2:03:22,  1.24s/it] 33%|███▎      | 2980/8943 [05:10<2:05:16,  1.26s/it] 33%|███▎      | 2981/8943 [05:11<1:51:57,  1.13s/it] 33%|███▎      | 2982/8943 [05:11<1:42:41,  1.03s/it] 33%|███▎      | 2983/8943 [05:12<1:43:01,  1.04s/it] 33%|███▎      | 2984/8943 [05:13<1:41:15,  1.02s/it] 33%|███▎      | 2985/8943 [05:15<1:49:41,  1.10s/it] 33%|███▎      | 2986/8943 [05:16<2:00:34,  1.21s/it] 33%|███▎      | 2987/8943 [05:17<1:56:51,  1.18s/it] 33%|███▎      | 2988/8943 [05:18<1:54:20,  1.15s/it] 33%|███▎      | 2989/8943 [05:19<1:47:00,  1.08s/it] 33%|███▎      | 2990/8943 [05:20<1:44:46,  1.06s/it] 33%|███▎      | 2991/8943 [05:22<1:55:02,  1.16s/it] 33%|███▎      | 2992/8943 [05:23<1:59:49,  1.21s/it] 33%|███▎      | 2993/8943 [05:25<2:29:10,  1.50s/it] 33%|███▎      | 2994/8943 [05:28<2:53:26,  1.75s/it] 33%|███▎      | 2995/8943 [05:29<2:45:49,  1.67s/it] 34%|███▎      | 2996/8943 [05:30<2:32:42,  1.54s/it] 34%|███▎      | 2997/8943 [05:32<2:45:30,  1.67s/it] 34%|███▎      | 2998/8943 [05:34<2:53:34,  1.75s/it] 34%|███▎      | 2999/8943 [05:35<2:28:38,  1.50s/it] 34%|███▎      | 3000/8943 [05:36<2:16:43,  1.38s/it] 34%|███▎      | 3001/8943 [05:37<2:02:45,  1.24s/it] 34%|███▎      | 3002/8943 [05:38<1:54:52,  1.16s/it] 34%|███▎      | 3003/8943 [05:39<1:55:45,  1.17s/it] 34%|███▎      | 3004/8943 [05:41<1:58:24,  1.20s/it]Picklist: Find the titles of papers whose first author is affiliated with an institution in the country "Japan" and has last name "Ohori"?, Inst, country, [Japan]
Picklist: Find the titles of papers whose first author is affiliated with an institution in the country "Japan" and has last name "Ohori"?, Authors, lname, [Ohori]
Picklist: Which papers' first author is affiliated with an institution in the country "Japan" and has last name "Ohori"? Give me the titles of the papers., Inst, country, [Japan]
Picklist: Which papers' first author is affiliated with an institution in the country "Japan" and has last name "Ohori"? Give me the titles of the papers., Authors, lname, [Ohori]
Picklist: What is the first name of the author with last name "Ueno"?, Authors, lname, [Ueno]
Picklist: Which authors have last name "Ueno"? List their first names., Authors, lname, [Ueno]
Picklist: Find the last name of the author with first name "Amal"., Authors, fname, [Amal]
Picklist: Which authors have first name "Amal"? List their last names., Authors, fname, [Amal]
Picklist: What is the phone number and postal code of the address 1031 Daugavpils Parkway?, address, address, [1031 Daugavpils Parkway]
Picklist: What is the phone number and postal code of the address 1031 Daugavpils Parkway?, address, district, [Daugavpils]
Picklist: What is the phone number and postal code of the address 1031 Daugavpils Parkway?, city, city, [Daugavpils]
--------------------
text:  What is the phone number and postal code of the address 1031 Daugavpils Parkway?
sql:  SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'
ground truth values:  [('address.address', '1031 Daugavpils Parkway')]
matched values OrderedDict([(23, ('address.address', '1031 Daugavpils Parkway')), (37, ('address.district', 'Daugavpils')), (71, ('city.city', 'Daugavpils'))])
--------------------
Picklist: Give the phone and postal code corresponding to the address '1031 Daugavpils Parkway'., address, address, [1031 Daugavpils Parkway]
Picklist: Give the phone and postal code corresponding to the address '1031 Daugavpils Parkway'., address, district, [Daugavpils]
Picklist: Give the phone and postal code corresponding to the address '1031 Daugavpils Parkway'., city, city, [Daugavpils]
--------------------
text:  Give the phone and postal code corresponding to the address '1031 Daugavpils Parkway'.
sql:  SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'
ground truth values:  [('address.address', '1031 Daugavpils Parkway')]
matched values OrderedDict([(23, ('address.address', '1031 Daugavpils Parkway')), (37, ('address.district', 'Daugavpils')), (71, ('city.city', 'Daugavpils'))])
--------------------
Picklist: How many addresses are in the district of California?, address, district, [California]
Picklist: Count the number of addressed in the California district., address, district, [California]
Picklist: How many cities are in Australia?, country, country, [Australia]
Picklist: Count the number of cities in Australia., country, country, [Australia]
--------------------
text:  Find all the payment dates for the payments with an amount larger than 10 and the payments handled by a staff person with the first name Elsa.
sql:  SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'
ground truth values:  [('staff.first_name', 'Elsa')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the payment dates for any payments that have an amount greater than 10 or were handled by a staff member with the first name Elsa?
sql:  SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'
ground truth values:  [('staff.first_name', 'Elsa')]
matched values OrderedDict()
--------------------
Picklist: Return the sum of all payment amounts., address, district, [Sumy]
Picklist: Return the sum of all payment amounts., city, city, [Sumy]
--------------------
text:  Return the sum of all payment amounts.
sql:  SELECT sum(amount) FROM payment
ground truth values:  []
matched values OrderedDict([(28, ('address.district', 'Sumy')), (59, ('city.city', 'Sumy'))])
--------------------
Picklist: What is the genre name of the film HUNGER ROOF?, film, title, [HUNGER ROOF]
Picklist: Return the name of the category to which the film 'HUNGER ROOF' belongs., film, title, [HUNGER ROOF]
--------------------
text:  What are all the movies rated as R? List the titles.
sql:  SELECT title FROM film WHERE rating  =  'R'
ground truth values:  [('film.rating', 'R')]
matched values OrderedDict()
--------------------
--------------------
text:  Return the titles of any movies with an R rating.
sql:  SELECT title FROM film WHERE rating  =  'R'
ground truth values:  [('film.rating', 'R')]
matched values OrderedDict()
--------------------
Picklist: Which language does the film AIRPORT POLLOCK use? List the language name., film, title, [AIRPORT POLLOCK]
Picklist: What is the name of the language that the film 'AIRPORT POLLOCK' is in?, film, title, [AIRPORT POLLOCK]
Picklist: Which movies have 'Deleted Scenes' as a substring in the special feature?, film, special_features, [Deleted Scenes]
--------------------
text:  Which movies have 'Deleted Scenes' as a substring in the special feature?
sql:  SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'
ground truth values:  []
matched values OrderedDict([(134, ('film.special_features', 'Deleted Scenes'))])
--------------------
Picklist: Return the titles of films that include 'Deleted Scenes' in their special feature section., film, special_features, [Deleted Scenes]
--------------------
text:  Return the titles of films that include 'Deleted Scenes' in their special feature section.
sql:  SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'
ground truth values:  []
matched values OrderedDict([(134, ('film.special_features', 'Deleted Scenes'))])
--------------------
Picklist: Where does the customer with the first name Linda live? And what is her email?, customer, first_name, [LINDA]
Picklist: Return the address and email of the customer with the first name Linda., customer, first_name, [LINDA]
Picklist: Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles., film, rating, [PG]
Picklist: What are the titles of films that are either longer than 100 minutes or rated PG other than those that cost more than 200 to replace?, film, rating, [PG]
Picklist: What is the full name of the staff member who has rented a film to a customer with the first name April and the last name Burns?, customer, first_name, [APRIL]
Picklist: What is the full name of the staff member who has rented a film to a customer with the first name April and the last name Burns?, customer, last_name, [BURNS]
Picklist: Return the full name of the staff who provided a customer with the first name April and the last name Burns with a film rental., customer, first_name, [APRIL]
Picklist: Return the full name of the staff who provided a customer with the first name April and the last name Burns with a film rental., customer, last_name, [BURNS]
--------------------
text:  Where does the staff member with the first name Elsa live?
sql:  SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE T1.first_name  =  'Elsa'
ground truth values:  [('staff.first_name', 'Elsa')]
matched values OrderedDict()
--------------------
--------------------
text:  Give the address of the staff member who has the first name Elsa.
sql:  SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE T1.first_name  =  'Elsa'
ground truth values:  [('staff.first_name', 'Elsa')]
matched values OrderedDict()
--------------------
 34%|███▎      | 3005/8943 [05:43<2:25:24,  1.47s/it] 34%|███▎      | 3006/8943 [05:45<2:45:20,  1.67s/it] 34%|███▍      | 3021/8943 [05:45<1:55:39,  1.17s/it] 34%|███▍      | 3033/8943 [05:45<1:21:02,  1.22it/s]Picklist: What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?, payment, payment_date, [2005-08-23 02:06:01]
Picklist: What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?, payment, payment_date, [2005-08-23 02:06:41]
Picklist: What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?, rental, rental_date, [2005-08-23 02:06:01]
Picklist: What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?, rental, rental_date, [2005-08-23 02:06:41]
Picklist: What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?, rental, return_date, [2005-08-23 02:06:11]
--------------------
text:  What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?
sql:  SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )
ground truth values:  [('rental.rental_date', '2005-08-23 02:06:01')]
matched values OrderedDict([(214, ('payment.payment_date', '2005-08-23 02:06:01')), (225, ('payment.payment_date', '2005-08-23 02:06:41')), (247, ('rental.rental_date', '2005-08-23 02:06:01')), (258, ('rental.rental_date', '2005-08-23 02:06:41')), (278, ('rental.return_date', '2005-08-23 02:06:11'))])
--------------------
Picklist: Return the first names of customers who did not rented a film after the date '2005-08-23 02:06:01'., payment, payment_date, [2005-08-23 02:06:01]
Picklist: Return the first names of customers who did not rented a film after the date '2005-08-23 02:06:01'., payment, payment_date, [2005-08-23 02:06:41]
Picklist: Return the first names of customers who did not rented a film after the date '2005-08-23 02:06:01'., rental, rental_date, [2005-08-23 02:06:01]
Picklist: Return the first names of customers who did not rented a film after the date '2005-08-23 02:06:01'., rental, rental_date, [2005-08-23 02:06:41]
Picklist: Return the first names of customers who did not rented a film after the date '2005-08-23 02:06:01'., rental, return_date, [2005-08-23 02:06:11]
--------------------
text:  Return the first names of customers who did not rented a film after the date '2005-08-23 02:06:01'.
sql:  SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )
ground truth values:  [('rental.rental_date', '2005-08-23 02:06:01')]
matched values OrderedDict([(214, ('payment.payment_date', '2005-08-23 02:06:01')), (225, ('payment.payment_date', '2005-08-23 02:06:41')), (247, ('rental.rental_date', '2005-08-23 02:06:01')), (258, ('rental.rental_date', '2005-08-23 02:06:41')), (278, ('rental.return_date', '2005-08-23 02:06:11'))])
--------------------
Picklist: Find the number of customers in the banks at New York City., bank, city, [New York City]
Picklist: Find the number of customers in the banks at New York City., bank, state, [New York]
Picklist: Find the number of customers in the banks at New York City., customer, state, [New York]
--------------------
text:  Find the number of customers in the banks at New York City.
sql:  SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'
ground truth values:  [('bank.city', 'New York City')]
matched values OrderedDict([(16, ('bank.city', 'New York City')), (22, ('bank.state', 'New York')), (51, ('customer.state', 'New York'))])
--------------------
Picklist: What is the total number of customers who use banks in New York City?, bank, city, [New York City]
Picklist: What is the total number of customers who use banks in New York City?, bank, state, [New York]
Picklist: What is the total number of customers who use banks in New York City?, customer, state, [New York]
--------------------
text:  What is the total number of customers who use banks in New York City?
sql:  SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'
ground truth values:  [('bank.city', 'New York City')]
matched values OrderedDict([(16, ('bank.city', 'New York City')), (22, ('bank.state', 'New York')), (51, ('customer.state', 'New York'))])
--------------------
Picklist: Find the average number of customers in all banks of Utah state., bank, state, [Utah]
Picklist: Find the average number of customers in all banks of Utah state., customer, state, [Utah]
--------------------
text:  Find the average number of customers in all banks of Utah state.
sql:  SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'
ground truth values:  [('bank.state', 'Utah')]
matched values OrderedDict([(18, ('bank.state', 'Utah')), (46, ('customer.state', 'Utah'))])
--------------------
Picklist: What is the average number of customers across banks in the state of Utah?, bank, state, [Utah]
Picklist: What is the average number of customers across banks in the state of Utah?, customer, state, [Utah]
--------------------
text:  What is the average number of customers across banks in the state of Utah?
sql:  SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'
ground truth values:  [('bank.state', 'Utah')]
matched values OrderedDict([(18, ('bank.state', 'Utah')), (46, ('customer.state', 'Utah'))])
--------------------
Picklist: Find the city and state of the bank branch named morningside., bank, bname, [morningside]
Picklist: What city and state is the bank with the name morningside in?, bank, bname, [morningside]
Picklist: Find the branch names of banks in the New York state., bank, state, [New York]
Picklist: Find the branch names of banks in the New York state., customer, state, [New York]
--------------------
text:  Find the branch names of banks in the New York state.
sql:  SELECT bname FROM bank WHERE state  =  'New York'
ground truth values:  [('bank.state', 'New York')]
matched values OrderedDict([(18, ('bank.state', 'New York')), (47, ('customer.state', 'New York'))])
--------------------
Picklist: What are the names of banks in the state of New York?, bank, state, [New York]
Picklist: What are the names of banks in the state of New York?, customer, state, [New York]
--------------------
text:  What are the names of banks in the state of New York?
sql:  SELECT bname FROM bank WHERE state  =  'New York'
ground truth values:  [('bank.state', 'New York')]
matched values OrderedDict([(18, ('bank.state', 'New York')), (47, ('customer.state', 'New York'))])
--------------------
Picklist: Find the total account balance of each customer from Utah or Texas., bank, state, [Texas]
Picklist: Find the total account balance of each customer from Utah or Texas., bank, state, [Utah]
Picklist: Find the total account balance of each customer from Utah or Texas., customer, state, [Texas]
Picklist: Find the total account balance of each customer from Utah or Texas., customer, state, [Utah]
--------------------
text:  Find the total account balance of each customer from Utah or Texas.
sql:  SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'
ground truth values:  [('customer.state', 'Utah'), ('customer.state', 'Texas')]
matched values OrderedDict([(18, ('bank.state', 'Texas')), (20, ('bank.state', 'Utah')), (48, ('customer.state', 'Texas')), (50, ('customer.state', 'Utah'))])
--------------------
Picklist: What are the total account balances for each customer from Utah or Texas?, bank, state, [Texas]
Picklist: What are the total account balances for each customer from Utah or Texas?, bank, state, [Utah]
Picklist: What are the total account balances for each customer from Utah or Texas?, customer, state, [Texas]
Picklist: What are the total account balances for each customer from Utah or Texas?, customer, state, [Utah]
--------------------
text:  What are the total account balances for each customer from Utah or Texas?
sql:  SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'
ground truth values:  [('customer.state', 'Utah'), ('customer.state', 'Texas')]
matched values OrderedDict([(18, ('bank.state', 'Texas')), (20, ('bank.state', 'Utah')), (48, ('customer.state', 'Texas')), (50, ('customer.state', 'Utah'))])
 34%|███▍      | 3042/8943 [05:45<56:59,  1.73it/s]   34%|███▍      | 3050/8943 [05:45<40:15,  2.44it/s] 34%|███▍      | 3058/8943 [05:45<28:34,  3.43it/s] 34%|███▍      | 3066/8943 [05:45<20:26,  4.79it/s] 34%|███▍      | 3073/8943 [05:46<14:48,  6.61it/s] 34%|███▍      | 3080/8943 [05:46<10:50,  9.02it/s] 35%|███▍      | 3088/8943 [05:46<07:57, 12.25it/s] 35%|███▍      | 3095/8943 [05:46<06:04, 16.06it/s] 35%|███▍      | 3102/8943 [05:46<04:44, 20.52it/s] 35%|███▍      | 3109/8943 [05:46<04:06, 23.67it/s] 35%|███▍      | 3115/8943 [05:46<03:40, 26.39it/s] 35%|███▍      | 3120/8943 [05:47<03:22, 28.77it/s] 35%|███▍      | 3125/8943 [05:47<03:03, 31.73it/s]--------------------
Picklist: Find the name of customers who have both saving and checking account types., customer, acc_type, [checking]
Picklist: Find the name of customers who have both saving and checking account types., customer, acc_type, [saving]
Picklist: What are the names of customers who have both savings and checking accounts?, customer, acc_type, [checking]
Picklist: What are the names of customers who have both savings and checking accounts?, customer, acc_type, [saving]
Picklist: Find the name of customers who do not have an saving account., customer, acc_type, [saving]
Picklist: What are the names of customers who do not have saving accounts?, customer, acc_type, [saving]
Picklist: Find the name of customers who do not have a loan with a type of Mortgages., loan, loan_type, [Mortgages]
--------------------
text:  What are the names of customers who have not taken a Mortage loan?
sql:  SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'
ground truth values:  [('loan.loan_type', 'Mortgages')]
matched values OrderedDict()
--------------------
Picklist: Find the name of customers who have loans of both Mortgages and Auto., loan, loan_type, [Mortgages]
Picklist: Find the name of customers who have loans of both Mortgages and Auto., loan, loan_type, [Auto]
Picklist: What are the names of customers who have taken both Mortgage and Auto loans?, loan, loan_type, [Auto]
Picklist: What are the names of customers who have taken both Mortgage and Auto loans?, loan, loan_type, [Mortgages]
Picklist: Find the city and name of bank branches that provide business loans., loan, loan_type, [Business]
Picklist: What are the names and cities of bank branches that offer loans for business?, loan, loan_type, [Business]
Picklist: Find the total amount of loans provided by bank branches in the state of New York., bank, state, [New York]
Picklist: Find the total amount of loans provided by bank branches in the state of New York., customer, state, [New York]
--------------------
text:  Find the total amount of loans provided by bank branches in the state of New York.
sql:  SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'
ground truth values:  [('bank.state', 'New York')]
matched values OrderedDict([(18, ('bank.state', 'New York')), (47, ('customer.state', 'New York'))])
--------------------
Picklist: What is the total amount of money loaned by banks in New York state?, bank, state, [New York]
Picklist: What is the total amount of money loaned by banks in New York state?, customer, state, [New York]
--------------------
text:  What is the total amount of money loaned by banks in New York state?
sql:  SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'
ground truth values:  [('bank.state', 'New York')]
matched values OrderedDict([(18, ('bank.state', 'New York')), (47, ('customer.state', 'New York'))])
--------------------
Picklist: What are the start and end dates for incidents with incident type code "NOISE"?, Ref_Incident_Type, incident_type_code, [NOISE]
Picklist: What are the start and end dates for incidents with incident type code "NOISE"?, Ref_Incident_Type, incident_type_description, [Noise]
Picklist: What are the start and end dates for incidents with incident type code "NOISE"?, Behavior_Incident, incident_type_code, [NOISE]
--------------------
text:  What are the start and end dates for incidents with incident type code "NOISE"?
sql:  SELECT date_incident_start ,  date_incident_end FROM Behavior_Incident WHERE incident_type_code  =  "NOISE"
ground truth values:  [('Behavior_Incident.incident_type_code', 'NOISE')]
matched values OrderedDict([(34, ('Ref_Incident_Type.incident_type_code', 'NOISE')), (40, ('Ref_Incident_Type.incident_type_description', 'Noise')), (170, ('Behavior_Incident.incident_type_code', 'NOISE'))])
--------------------
Picklist: What is the email of the student with first name "Emma" and last name "Rohan"?, Students, first_name, [Emma]
Picklist: What is the email of the student with first name "Emma" and last name "Rohan"?, Students, last_name, [Rohan]
Picklist: What is the gender of the teacher with last name "Medhurst"?, Teachers, last_name, [Medhurst]
Picklist: What is the incident type description for the incident type with code "VIOLENCE"?, Ref_Incident_Type, incident_type_code, [VIOLENCE]
Picklist: What is the incident type description for the incident type with code "VIOLENCE"?, Ref_Incident_Type, incident_type_description, [Violence]
Picklist: What is the incident type description for the incident type with code "VIOLENCE"?, Behavior_Incident, incident_type_code, [VIOLENCE]
--------------------
text:  What is the incident type description for the incident type with code "VIOLENCE"?
sql:  SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code  =  "VIOLENCE"
ground truth values:  [('Ref_Incident_Type.incident_type_code', 'VIOLENCE')]
matched values OrderedDict([(34, ('Ref_Incident_Type.incident_type_code', 'VIOLENCE')), (40, ('Ref_Incident_Type.incident_type_description', 'Violence')), (170, ('Behavior_Incident.incident_type_code', 'VIOLENCE'))])
--------------------
--------------------
text:  Find the id and last name of the teacher that has the most detentions with detention type code "AFTER"?
sql:  SELECT T1.teacher_id ,  T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.detention_type_code  =  "AFTER" GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1
ground truth values:  [('Detention.detention_type_code', 'AFTER')]
matched values OrderedDict()
--------------------
Picklist: Find the dates of assessment notes for students with first name "Fanny"., Students, first_name, [Fanny]
Picklist: Find the texts of assessment notes for teachers with last name "Schuster"., Teachers, last_name, [Schuster]
Picklist: Find the start and end dates of behavior incidents of students with last name "Fahey"., Students, last_name, [Fahey]
Picklist: Find the start and end dates of detentions of teachers with last name "Schultz"., Teachers, last_name, [Schultz]
Picklist: What are the monthly rentals of student addresses in Texas state?, Addresses, state_province_county, [Texas]
Picklist: What are the first names and last names of students with address in Wisconsin state?, Addresses, state_province_county, [Wisconsin]
Picklist: What is the zip code of the address where the teacher with first name "Lyla" lives?, Teachers, first_name, [Lyla]
Picklist: How many assets does each maintenance contract contain? List the number and the contract id., Third_Party_Companies, company_type, [Maintenance Contractor]
--------------------
text:  How many assets does each maintenance contract contain? List the number and the contract id.
sql:  SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id
ground truth values:  []
matched values OrderedDict([(12, ('Third_Party_Companies.company_type', 'Maintenance Contractor'))])
--------------------
Picklist: Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name., Third_Party_Companies, company_type, [Maintenance Contractor]
--------------------
text:  Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name.
sql:  SELECT T1.company_id ,  T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id HAVING count(*)  >=  2 UNION SELECT T3.company_id ,  T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id  =  T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*)  >=  2
ground truth values:  []
matched values  35%|███▍      | 3130/8943 [05:47<03:07, 31.01it/s] 35%|███▌      | 3134/8943 [05:47<02:58, 32.58it/s] 35%|███▌      | 3139/8943 [05:47<02:42, 35.74it/s] 35%|███▌      | 3145/8943 [05:47<02:27, 39.36it/s] 35%|███▌      | 3150/8943 [05:47<02:25, 39.85it/s] 35%|███▌      | 3156/8943 [05:47<02:12, 43.70it/s] 35%|███▌      | 3165/8943 [05:48<01:54, 50.53it/s] 35%|███▌      | 3171/8943 [05:48<01:48, 52.97it/s] 36%|███▌      | 3177/8943 [05:48<01:45, 54.53it/s] 36%|███▌      | 3183/8943 [05:48<01:55, 49.83it/s]OrderedDict([(12, ('Third_Party_Companies.company_type', 'Maintenance Contractor'))])
--------------------
Picklist: Which company started the earliest the maintenance contract? Show the company name., Third_Party_Companies, company_type, [Maintenance Contractor]
--------------------
text:  Which company started the earliest the maintenance contract? Show the company name.
sql:  SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1
ground truth values:  []
matched values OrderedDict([(12, ('Third_Party_Companies.company_type', 'Maintenance Contractor'))])
--------------------
Picklist: Give me the times and numbers of all trains that go to Chennai, ordered by time., train, origin, [Chennai]
Picklist: Give me the times and numbers of all trains that go to Chennai, ordered by time., train, destination, [Chennai]
--------------------
text:  Give me the times and numbers of all trains that go to Chennai, ordered by time.
sql:  SELECT TIME ,  train_number FROM train WHERE destination  =  'Chennai' ORDER BY TIME
ground truth values:  [('train.destination', 'Chennai')]
matched values OrderedDict([(13, ('train.origin', 'Chennai')), (17, ('train.destination', 'Chennai'))])
--------------------
Picklist: Find the number and time of the train that goes from Chennai to Guruvayur., train, origin, [Chennai]
Picklist: Find the number and time of the train that goes from Chennai to Guruvayur., train, origin, [Guruvayur]
Picklist: Find the number and time of the train that goes from Chennai to Guruvayur., train, destination, [Chennai]
Picklist: Find the number and time of the train that goes from Chennai to Guruvayur., train, destination, [Guruvayur]
--------------------
text:  Find the number and time of the train that goes from Chennai to Guruvayur.
sql:  SELECT train_number ,  TIME FROM train WHERE origin  =  'Chennai' AND destination  =  'Guruvayur'
ground truth values:  [('train.origin', 'Chennai'), ('train.destination', 'Guruvayur')]
matched values OrderedDict([(13, ('train.origin', 'Chennai')), (15, ('train.origin', 'Guruvayur')), (22, ('train.destination', 'Chennai')), (24, ('train.destination', 'Guruvayur'))])
--------------------
Picklist: Give me the maximum low temperature and average precipitation at the Amersham station., station, network_name, [Amersham]
Picklist: Find names and times of trains that run through stations for the local authority Chiltern., station, local_authority, [Chiltern]
Picklist: Find the number of professors in accounting department., COURSE, CRS_DESCRIPTION, [Accounting II]
Picklist: Find the number of professors in accounting department., DEPARTMENT, DEPT_NAME, [Accounting]
--------------------
text:  Find the number of professors in accounting department.
sql:  SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  "Accounting"
ground truth values:  [('DEPARTMENT.DEPT_NAME', 'Accounting')]
matched values OrderedDict([(34, ('COURSE.CRS_DESCRIPTION', 'Accounting II')), (48, ('DEPARTMENT.DEPT_NAME', 'Accounting'))])
--------------------
Picklist: How many professors are in the accounting dept?, COURSE, CRS_DESCRIPTION, [Accounting II]
Picklist: How many professors are in the accounting dept?, DEPARTMENT, DEPT_NAME, [Accounting]
--------------------
text:  How many professors are in the accounting dept?
sql:  SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  "Accounting"
ground truth values:  [('DEPARTMENT.DEPT_NAME', 'Accounting')]
matched values OrderedDict([(34, ('COURSE.CRS_DESCRIPTION', 'Accounting II')), (48, ('DEPARTMENT.DEPT_NAME', 'Accounting'))])
--------------------
Picklist: How many professors are teaching class with code ACCT-211?, CLASS, CRS_CODE, [ACCT-211]
Picklist: How many professors are teaching class with code ACCT-211?, COURSE, CRS_CODE, [ACCT-211]
--------------------
text:  How many professors are teaching class with code ACCT-211?
sql:  SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  "ACCT-211"
ground truth values:  [('CLASS.CRS_CODE', 'ACCT-211')]
matched values OrderedDict([(10, ('CLASS.CRS_CODE', 'ACCT-211')), (33, ('COURSE.CRS_CODE', 'ACCT-211'))])
--------------------
Picklist: How many professors teach a class with the code ACCT-211?, CLASS, CRS_CODE, [ACCT-211]
Picklist: How many professors teach a class with the code ACCT-211?, COURSE, CRS_CODE, [ACCT-211]
--------------------
text:  How many professors teach a class with the code ACCT-211?
sql:  SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  "ACCT-211"
ground truth values:  [('CLASS.CRS_CODE', 'ACCT-211')]
matched values OrderedDict([(10, ('CLASS.CRS_CODE', 'ACCT-211')), (33, ('COURSE.CRS_CODE', 'ACCT-211'))])
--------------------
Picklist: What is the first and last name of the professor in biology department?, DEPARTMENT, DEPT_NAME, [Biology]
Picklist: What are the first and last name of all biology professors?, DEPARTMENT, DEPT_NAME, [Biology]
Picklist: What are the first names and date of birth of professors teaching course ACCT-211?, CLASS, CRS_CODE, [ACCT-211]
Picklist: What are the first names and date of birth of professors teaching course ACCT-211?, COURSE, CRS_CODE, [ACCT-211]
--------------------
text:  What are the first names and date of birth of professors teaching course ACCT-211?
sql:  SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  "ACCT-211"
ground truth values:  [('CLASS.CRS_CODE', 'ACCT-211')]
matched values OrderedDict([(10, ('CLASS.CRS_CODE', 'ACCT-211')), (33, ('COURSE.CRS_CODE', 'ACCT-211'))])
--------------------
Picklist: What are the first names and birthdates of the professors in charge of ACCT-211?, CLASS, CRS_CODE, [ACCT-211]
Picklist: What are the first names and birthdates of the professors in charge of ACCT-211?, COURSE, CRS_CODE, [ACCT-211]
--------------------
text:  What are the first names and birthdates of the professors in charge of ACCT-211?
sql:  SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  "ACCT-211"
ground truth values:  [('CLASS.CRS_CODE', 'ACCT-211')]
matched values OrderedDict([(10, ('CLASS.CRS_CODE', 'ACCT-211')), (33, ('COURSE.CRS_CODE', 'ACCT-211'))])
--------------------
Picklist: How many classes are professor whose last name is Graztevski has?, EMPLOYEE, EMP_LNAME, [Graztevski]
Picklist: How many classes does the professor whose last name is Graztevski teach?, EMPLOYEE, EMP_LNAME, [Graztevski]
Picklist: What is the code of the school where the accounting department belongs to?, COURSE, CRS_DESCRIPTION, [Accounting II]
Picklist: What is the code of the school where the accounting department belongs to?, DEPARTMENT, DEPT_NAME, [Accounting]
--------------------
text:  What is the code of the school where the accounting department belongs to?
sql:  SELECT school_code FROM department WHERE dept_name  =  "Accounting"
ground truth values:  [('DEPARTMENT.DEPT_NAME', 'Accounting')]
matched values OrderedDict([(34, ('COURSE.CRS_DESCRIPTION', 'Accounting II')), (48, ('DEPARTMENT.DEPT_NAME', 'Accounting'))])
--------------------
Picklist: What is the school code of the accounting department?, COURSE, CRS_DESCRIPTION, [Accounting II]
Picklist: What is the school code of the accounting department?, DEPARTMENT, DEPT_NAME, [Accounting]
--------------------
text:  What is the school code of the accounting department?
sql:  SELECT school_code FROM department WHERE dept_name  =  "Accounting"
ground truth values:  [('DEPARTMENT.DEPT_NAME', 'Accounting')]
matched values OrderedDict([(34, ('COURSE.CRS_DESCRIPTION', 'Accounting II')), (48, ('DEPARTMENT.DEPT_NAME', 'Accounting'))])
--------------------
Picklist: How many credits does course CIS-220 have, and what its description?, CLASS, CRS_CODE, [CIS-220]
Picklist: How many credits does course CIS-220 have, and what its description?, COURSE, CRS_CODE, [CIS-220]
--------------------
text:   36%|███▌      | 3190/8943 [05:48<01:46, 54.01it/s] 36%|███▌      | 3197/8943 [05:48<01:39, 57.96it/s] 36%|███▌      | 3204/8943 [05:58<40:08,  2.38it/s] 36%|███▌      | 3210/8943 [05:58<28:36,  3.34it/s] 36%|███▌      | 3216/8943 [05:58<20:31,  4.65it/s] 36%|███▌      | 3223/8943 [05:58<14:47,  6.44it/s] 36%|███▌      | 3230/8943 [05:58<10:45,  8.85it/s] 36%|███▌      | 3237/8943 [05:58<07:55, 11.99it/s] 36%|███▋      | 3244/8943 [05:58<06:11, 15.36it/s]How many credits does course CIS-220 have, and what its description?
sql:  SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'
ground truth values:  [('COURSE.CRS_CODE', 'CIS-220')]
matched values OrderedDict([(10, ('CLASS.CRS_CODE', 'CIS-220')), (32, ('COURSE.CRS_CODE', 'CIS-220'))])
--------------------
Picklist: What is the description for the CIS-220 and how many credits does it have?, CLASS, CRS_CODE, [CIS-220]
Picklist: What is the description for the CIS-220 and how many credits does it have?, COURSE, CRS_CODE, [CIS-220]
--------------------
text:  What is the description for the CIS-220 and how many credits does it have?
sql:  SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'
ground truth values:  [('COURSE.CRS_CODE', 'CIS-220')]
matched values OrderedDict([(10, ('CLASS.CRS_CODE', 'CIS-220')), (32, ('COURSE.CRS_CODE', 'CIS-220'))])
--------------------
Picklist: what is the address of history department?, DEPARTMENT, DEPT_NAME, [History]
Picklist: Where is the history department?, DEPARTMENT, DEPT_NAME, [History]
Picklist: How many different locations does the school with code BUS has?, DEPARTMENT, SCHOOL_CODE, [BUS]
Picklist: What are the different locations of the school with the code BUS?, DEPARTMENT, SCHOOL_CODE, [BUS]
Picklist: Find the description and credit for the course QM-261?, CLASS, CRS_CODE, [QM-261]
Picklist: Find the description and credit for the course QM-261?, COURSE, CRS_CODE, [QM-261]
--------------------
text:  Find the description and credit for the course QM-261?
sql:  SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'QM-261'
ground truth values:  [('COURSE.CRS_CODE', 'QM-261')]
matched values OrderedDict([(10, ('CLASS.CRS_CODE', 'QM-261')), (33, ('COURSE.CRS_CODE', 'QM-261'))])
--------------------
Picklist: What is the course description and number of credits for QM-261?, CLASS, CRS_CODE, [QM-261]
Picklist: What is the course description and number of credits for QM-261?, COURSE, CRS_CODE, [QM-261]
--------------------
text:  What is the course description and number of credits for QM-261?
sql:  SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'QM-261'
ground truth values:  [('COURSE.CRS_CODE', 'QM-261')]
matched values OrderedDict([(10, ('CLASS.CRS_CODE', 'QM-261')), (33, ('COURSE.CRS_CODE', 'QM-261'))])
--------------------
Picklist: Find the number of professors with a Ph.D. degree in each department., PROFESSOR, PROF_HIGH_DEGREE, [Ph.D.]
Picklist: How many professors have a Ph.D. in each department?, PROFESSOR, PROF_HIGH_DEGREE, [Ph.D.]
Picklist: How many courses are offered by the Computer Info. Systems department?, DEPARTMENT, DEPT_NAME, [Computer Info. Systems]
--------------------
text:  How many courses does the department of Computer Information Systmes offer?
sql:  SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  "Computer Info. Systems"
ground truth values:  [('DEPARTMENT.DEPT_NAME', 'Computer Info. Systems')]
matched values OrderedDict()
--------------------
Picklist: How many sections does course ACCT-211 has?, CLASS, CRS_CODE, [ACCT-211]
Picklist: How many sections does course ACCT-211 has?, COURSE, CRS_CODE, [ACCT-211]
--------------------
text:  How many sections does course ACCT-211 has?
sql:  SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code  =  'ACCT-211'
ground truth values:  [('CLASS.CRS_CODE', 'ACCT-211')]
matched values OrderedDict([(10, ('CLASS.CRS_CODE', 'ACCT-211')), (33, ('COURSE.CRS_CODE', 'ACCT-211'))])
--------------------
Picklist: What is the number of different class sections offered in the course ACCT-211?, CLASS, CRS_CODE, [ACCT-211]
Picklist: What is the number of different class sections offered in the course ACCT-211?, COURSE, CRS_CODE, [ACCT-211]
--------------------
text:  What is the number of different class sections offered in the course ACCT-211?
sql:  SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code  =  'ACCT-211'
ground truth values:  [('CLASS.CRS_CODE', 'ACCT-211')]
matched values OrderedDict([(10, ('CLASS.CRS_CODE', 'ACCT-211')), (33, ('COURSE.CRS_CODE', 'ACCT-211'))])
--------------------
Picklist: How many students enrolled in class ACCT-211?, CLASS, CRS_CODE, [ACCT-211]
Picklist: How many students enrolled in class ACCT-211?, COURSE, CRS_CODE, [ACCT-211]
--------------------
text:  How many students enrolled in class ACCT-211?
sql:  SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'
ground truth values:  [('CLASS.CRS_CODE', 'ACCT-211')]
matched values OrderedDict([(10, ('CLASS.CRS_CODE', 'ACCT-211')), (33, ('COURSE.CRS_CODE', 'ACCT-211'))])
--------------------
Picklist: What are the total number of students enrolled in ACCT-211?, CLASS, CRS_CODE, [ACCT-211]
Picklist: What are the total number of students enrolled in ACCT-211?, COURSE, CRS_CODE, [ACCT-211]
--------------------
text:  What are the total number of students enrolled in ACCT-211?
sql:  SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'
ground truth values:  [('CLASS.CRS_CODE', 'ACCT-211')]
matched values OrderedDict([(10, ('CLASS.CRS_CODE', 'ACCT-211')), (33, ('COURSE.CRS_CODE', 'ACCT-211'))])
--------------------
Picklist: What is the first name of each student enrolled in class ACCT-211?, CLASS, CRS_CODE, [ACCT-211]
Picklist: What is the first name of each student enrolled in class ACCT-211?, COURSE, CRS_CODE, [ACCT-211]
--------------------
text:  What is the first name of each student enrolled in class ACCT-211?
sql:  SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211'
ground truth values:  [('CLASS.CRS_CODE', 'ACCT-211')]
matched values OrderedDict([(10, ('CLASS.CRS_CODE', 'ACCT-211')), (33, ('COURSE.CRS_CODE', 'ACCT-211'))])
--------------------
Picklist: What are the first names of all students in course ACCT-211?, CLASS, CRS_CODE, [ACCT-211]
Picklist: What are the first names of all students in course ACCT-211?, COURSE, CRS_CODE, [ACCT-211]
--------------------
text:  What are the first names of all students in course ACCT-211?
sql:  SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211'
ground truth values:  [('CLASS.CRS_CODE', 'ACCT-211')]
matched values OrderedDict([(10, ('CLASS.CRS_CODE', 'ACCT-211')), (33, ('COURSE.CRS_CODE', 'ACCT-211'))])
--------------------
Picklist: What is the first name of students enrolled in class ACCT-211 and got grade C?, CLASS, CRS_CODE, [ACCT-211]
Picklist: What is the first name of students enrolled in class ACCT-211 and got grade C?, COURSE, CRS_CODE, [ACCT-211]
--------------------
text:  What is the first name of students enrolled in class ACCT-211 and got grade C?
sql:  SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211' AND T2.enroll_grade  =  'C'
ground truth values:  [('CLASS.CRS_CODE', 'ACCT-211'), ('ENROLL.ENROLL_GRADE', 'C')]
matched values OrderedDict([(10, ('CLASS.CRS_CODE', 'ACCT-211')), (33, ('COURSE.CRS_CODE', 'ACCT-211'))])
--------------------
Picklist: What are the first names of all students who took ACCT-211 and received a C?, CLASS, CRS_CODE, [ACCT-211]
Picklist: What are the first names of all students who took ACCT-211 and received a C?, COURSE, CRS_CODE, [ACCT-211]
--------------------
text:  What are the first names of all students who took ACCT-211 and received a C?
sql:  SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211' AND T2.enroll_grade  =  'C'
ground truth values:  [('CLASS.CRS_CODE', 'ACCT-211'), ('ENROLL.ENROLL_GRADE', 'C')]
matched values OrderedDict([(10, ('CLASS.CRS_CODE', 'ACCT-211')), (33, ('COURSE.CRS_CODE', 'ACCT-211'))])
 36%|███▋      | 3250/8943 [05:58<04:49, 19.67it/s] 36%|███▋      | 3256/8943 [05:59<04:04, 23.25it/s] 36%|███▋      | 3263/8943 [05:59<03:22, 28.09it/s] 37%|███▋      | 3269/8943 [05:59<02:57, 31.91it/s] 37%|███▋      | 3275/8943 [05:59<02:44, 34.46it/s] 37%|███▋      | 3280/8943 [05:59<02:45, 34.32it/s] 37%|███▋      | 3285/8943 [05:59<02:38, 35.77it/s]--------------------
Picklist: How many professors do have a Ph.D. degree?, PROFESSOR, PROF_HIGH_DEGREE, [Ph.D.]
Picklist: What is the total number of professors with a Ph.D. ?, PROFESSOR, PROF_HIGH_DEGREE, [Ph.D.]
Picklist: How many students are enrolled in the class taught by some professor from the accounting department?, COURSE, CRS_DESCRIPTION, [Accounting II]
Picklist: How many students are enrolled in the class taught by some professor from the accounting department?, DEPARTMENT, DEPT_NAME, [Accounting]
--------------------
text:  How many students are enrolled in the class taught by some professor from the accounting department?
sql:  SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'
ground truth values:  [('DEPARTMENT.DEPT_NAME', 'Accounting')]
matched values OrderedDict([(34, ('COURSE.CRS_DESCRIPTION', 'Accounting II')), (48, ('DEPARTMENT.DEPT_NAME', 'Accounting'))])
--------------------
Picklist: How many students are enrolled in some classes that are taught by an accounting professor?, COURSE, CRS_DESCRIPTION, [Accounting II]
Picklist: How many students are enrolled in some classes that are taught by an accounting professor?, DEPARTMENT, DEPT_NAME, [Accounting]
--------------------
text:  How many students are enrolled in some classes that are taught by an accounting professor?
sql:  SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'
ground truth values:  [('DEPARTMENT.DEPT_NAME', 'Accounting')]
matched values OrderedDict([(34, ('COURSE.CRS_DESCRIPTION', 'Accounting II')), (48, ('DEPARTMENT.DEPT_NAME', 'Accounting'))])
--------------------
Picklist: List the codes of all courses that take place in room KLR209., CLASS, CLASS_ROOM, [KLR209]
Picklist: What are the codes of all the courses that are located in room KLR209?, CLASS, CLASS_ROOM, [KLR209]
Picklist: List the first name of all employees with job code PROF ordered by their date of birth., EMPLOYEE, EMP_JOBCODE, [PROF]
--------------------
text:  What are the first names of all employees that are professors ordered by date of birth?
sql:  SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' ORDER BY emp_dob
ground truth values:  [('EMPLOYEE.EMP_JOBCODE', 'PROF')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the first name of students who got grade C in any class?
sql:  SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  'C'
ground truth values:  [('ENROLL.ENROLL_GRADE', 'C')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the first names of all students who got a grade C in a class?
sql:  SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  'C'
ground truth values:  [('ENROLL.ENROLL_GRADE', 'C')]
matched values OrderedDict()
--------------------
Picklist: What is the name of department where has the largest number of professors with a Ph.D. degree?, PROFESSOR, PROF_HIGH_DEGREE, [Ph.D.]
Picklist: Which department has the most professors with a Ph.D.?, PROFESSOR, PROF_HIGH_DEGREE, [Ph.D.]
--------------------
text:  What are the first names of the professors who do not teach a class.
sql:  SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num
ground truth values:  [('EMPLOYEE.EMP_JOBCODE', 'PROF')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the first names of all professors not teaching any classes?
sql:  SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num
ground truth values:  [('EMPLOYEE.EMP_JOBCODE', 'PROF')]
matched values OrderedDict()
--------------------
Picklist: What is the first names of the professors from the history department who do not teach a class., DEPARTMENT, DEPT_NAME, [History]
Picklist: What are the first names of all history professors who do not teach?, DEPARTMENT, DEPT_NAME, [History]
Picklist: What is the last name and office of the professor from the history department?, DEPARTMENT, DEPT_NAME, [History]
Picklist: What are the last name and office of all history professors?, DEPARTMENT, DEPT_NAME, [History]
Picklist: What is department name and office for the professor whose last name is Heffington?, EMPLOYEE, EMP_LNAME, [Heffington]
Picklist: What is the name of the department and office location for the professor with the last name of Heffington?, EMPLOYEE, EMP_LNAME, [Heffington]
Picklist: Find the last name and hire date of the professor who is in office DRE 102., PROFESSOR, PROF_OFFICE, [DRE 102]
Picklist: What is the last name of the professor whose office is located in DRE 102, and when were they hired?, PROFESSOR, PROF_OFFICE, [DRE 102]
Picklist: What is the code of the course which the student whose last name is Smithson took?, EMPLOYEE, EMP_LNAME, [Smithson]
Picklist: What is the code of the course which the student whose last name is Smithson took?, STUDENT, STU_LNAME, [Smithson]
--------------------
text:  What is the code of the course which the student whose last name is Smithson took?
sql:  SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num WHERE T3.stu_lname  =  'Smithson'
ground truth values:  [('STUDENT.STU_LNAME', 'Smithson')]
matched values OrderedDict([(66, ('EMPLOYEE.EMP_LNAME', 'Smithson')), (128, ('STUDENT.STU_LNAME', 'Smithson'))])
--------------------
Picklist: What are the course codes for every class that the student with the last name Smithson took?, EMPLOYEE, EMP_LNAME, [Smithson]
Picklist: What are the course codes for every class that the student with the last name Smithson took?, STUDENT, STU_LNAME, [Smithson]
--------------------
text:  What are the course codes for every class that the student with the last name Smithson took?
sql:  SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num WHERE T3.stu_lname  =  'Smithson'
ground truth values:  [('STUDENT.STU_LNAME', 'Smithson')]
matched values OrderedDict([(66, ('EMPLOYEE.EMP_LNAME', 'Smithson')), (128, ('STUDENT.STU_LNAME', 'Smithson'))])
--------------------
Picklist: What are the description and credit of the course which the student whose last name is Smithson took?, EMPLOYEE, EMP_LNAME, [Smithson]
Picklist: What are the description and credit of the course which the student whose last name is Smithson took?, STUDENT, STU_LNAME, [Smithson]
--------------------
text:  What are the description and credit of the course which the student whose last name is Smithson took?
sql:  SELECT T4.crs_description ,  T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  'Smithson'
ground truth values:  [('STUDENT.STU_LNAME', 'Smithson')]
matched values OrderedDict([(66, ('EMPLOYEE.EMP_LNAME', 'Smithson')), (128, ('STUDENT.STU_LNAME', 'Smithson'))])
--------------------
Picklist: How many credits is the course that the student with the last name Smithson took, and what is its description?, EMPLOYEE, EMP_LNAME, [Smithson]
Picklist: How many credits is the course that the student with the last name Smithson took, and what is its description?, STUDENT, STU_LNAME, [Smithson]
--------------------
text:  How many credits is the course that the student with the last name Smithson took, and what is its description?
sql:   37%|███▋      | 3290/8943 [05:59<02:29, 37.82it/s] 37%|███▋      | 3295/8943 [06:00<02:55, 32.27it/s]SELECT T4.crs_description ,  T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  'Smithson'
ground truth values:  [('STUDENT.STU_LNAME', 'Smithson')]
matched values OrderedDict([(66, ('EMPLOYEE.EMP_LNAME', 'Smithson')), (128, ('STUDENT.STU_LNAME', 'Smithson'))])
--------------------
Picklist: How many professors who has a either Ph.D. or MA degree?, PROFESSOR, PROF_HIGH_DEGREE, [Ph.D.]
--------------------
text:  How many professors who has a either Ph.D. or MA degree?
sql:  SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'
ground truth values:  [('PROFESSOR.PROF_HIGH_DEGREE', 'Ph.D.'), ('PROFESSOR.PROF_HIGH_DEGREE', 'MA')]
matched values OrderedDict([(115, ('PROFESSOR.PROF_HIGH_DEGREE', 'Ph.D.'))])
--------------------
Picklist: How many professors attained either Ph.D. or Masters degrees?, PROFESSOR, PROF_HIGH_DEGREE, [Ph.D.]
--------------------
text:  How many professors attained either Ph.D. or Masters degrees?
sql:  SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'
ground truth values:  [('PROFESSOR.PROF_HIGH_DEGREE', 'Ph.D.'), ('PROFESSOR.PROF_HIGH_DEGREE', 'MA')]
matched values OrderedDict([(115, ('PROFESSOR.PROF_HIGH_DEGREE', 'Ph.D.'))])
--------------------
Picklist: How many professors who are from either Accounting or Biology department?, COURSE, CRS_DESCRIPTION, [Accounting II]
Picklist: How many professors who are from either Accounting or Biology department?, DEPARTMENT, DEPT_NAME, [Accounting]
Picklist: How many professors who are from either Accounting or Biology department?, DEPARTMENT, DEPT_NAME, [Biology]
--------------------
text:  How many professors who are from either Accounting or Biology department?
sql:  SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'
ground truth values:  [('DEPARTMENT.DEPT_NAME', 'Accounting'), ('DEPARTMENT.DEPT_NAME', 'Biology')]
matched values OrderedDict([(34, ('COURSE.CRS_DESCRIPTION', 'Accounting II')), (48, ('DEPARTMENT.DEPT_NAME', 'Accounting')), (50, ('DEPARTMENT.DEPT_NAME', 'Biology'))])
--------------------
Picklist: What is the number of professors who are in the Accounting or Biology departments?, COURSE, CRS_DESCRIPTION, [Accounting II]
Picklist: What is the number of professors who are in the Accounting or Biology departments?, DEPARTMENT, DEPT_NAME, [Accounting]
Picklist: What is the number of professors who are in the Accounting or Biology departments?, DEPARTMENT, DEPT_NAME, [Biology]
--------------------
text:  What is the number of professors who are in the Accounting or Biology departments?
sql:  SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'
ground truth values:  [('DEPARTMENT.DEPT_NAME', 'Accounting'), ('DEPARTMENT.DEPT_NAME', 'Biology')]
matched values OrderedDict([(34, ('COURSE.CRS_DESCRIPTION', 'Accounting II')), (48, ('DEPARTMENT.DEPT_NAME', 'Accounting')), (50, ('DEPARTMENT.DEPT_NAME', 'Biology'))])
--------------------
Picklist: Find the first name of the professor who is teaching two courses with code CIS-220 and QM-261., CLASS, CRS_CODE, [CIS-220]
Picklist: Find the first name of the professor who is teaching two courses with code CIS-220 and QM-261., CLASS, CRS_CODE, [QM-261]
Picklist: Find the first name of the professor who is teaching two courses with code CIS-220 and QM-261., COURSE, CRS_CODE, [CIS-220]
Picklist: Find the first name of the professor who is teaching two courses with code CIS-220 and QM-261., COURSE, CRS_CODE, [QM-261]
--------------------
text:  Find the first name of the professor who is teaching two courses with code CIS-220 and QM-261.
sql:  SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261'
ground truth values:  [('CLASS.CRS_CODE', 'CIS-220'), ('CLASS.CRS_CODE', 'QM-261')]
matched values OrderedDict([(10, ('CLASS.CRS_CODE', 'CIS-220')), (14, ('CLASS.CRS_CODE', 'QM-261')), (37, ('COURSE.CRS_CODE', 'CIS-220')), (41, ('COURSE.CRS_CODE', 'QM-261'))])
--------------------
Picklist: What is the first name of the professor who is teaching CIS-220 and QM-261?, CLASS, CRS_CODE, [CIS-220]
Picklist: What is the first name of the professor who is teaching CIS-220 and QM-261?, CLASS, CRS_CODE, [QM-261]
Picklist: What is the first name of the professor who is teaching CIS-220 and QM-261?, COURSE, CRS_CODE, [CIS-220]
Picklist: What is the first name of the professor who is teaching CIS-220 and QM-261?, COURSE, CRS_CODE, [QM-261]
--------------------
text:  What is the first name of the professor who is teaching CIS-220 and QM-261?
sql:  SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261'
ground truth values:  [('CLASS.CRS_CODE', 'CIS-220'), ('CLASS.CRS_CODE', 'QM-261')]
matched values OrderedDict([(10, ('CLASS.CRS_CODE', 'CIS-220')), (14, ('CLASS.CRS_CODE', 'QM-261')), (37, ('COURSE.CRS_CODE', 'CIS-220')), (41, ('COURSE.CRS_CODE', 'QM-261'))])
--------------------
Picklist: Find the first name of student who is taking classes from accounting and Computer Info. Systems departments, COURSE, CRS_DESCRIPTION, [Accounting II]
Picklist: Find the first name of student who is taking classes from accounting and Computer Info. Systems departments, DEPARTMENT, DEPT_NAME, [Computer Info. Systems]
Picklist: Find the first name of student who is taking classes from accounting and Computer Info. Systems departments, DEPARTMENT, DEPT_NAME, [Accounting]
--------------------
text:  Find the first name of student who is taking classes from accounting and Computer Info. Systems departments
sql:  SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'
ground truth values:  [('DEPARTMENT.DEPT_NAME', 'Accounting'), ('DEPARTMENT.DEPT_NAME', 'Computer Info. Systems')]
matched values OrderedDict([(34, ('COURSE.CRS_DESCRIPTION', 'Accounting II')), (48, ('DEPARTMENT.DEPT_NAME', 'Computer Info. Systems')), (53, ('DEPARTMENT.DEPT_NAME', 'Accounting'))])
--------------------
--------------------
text:  What are the first names of all students taking accoutning and Computer Information Systems classes?
sql:  SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'
ground truth values:  [('DEPARTMENT.DEPT_NAME', 'Accounting'), ('DEPARTMENT.DEPT_NAME', 'Computer Info. Systems')]
matched values OrderedDict()
--------------------
Picklist: What is the average gpa of the students enrolled in the course with code ACCT-211?, CLASS, CRS_CODE, [ACCT-211]
 37%|███▋      | 3300/8943 [06:00<02:41, 34.99it/s] 37%|███▋      | 3305/8943 [06:00<02:31, 37.32it/s] 37%|███▋      | 3310/8943 [06:00<02:31, 37.29it/s] 37%|███▋      | 3314/8943 [06:00<02:31, 37.27it/s] 37%|███▋      | 3318/8943 [06:00<02:48, 33.48it/s] 37%|███▋      | 3322/8943 [06:00<02:45, 34.03it/s] 37%|███▋      | 3326/8943 [06:00<02:51, 32.71it/s] 37%|███▋      | 3330/8943 [06:00<02:45, 34.01it/s] 37%|███▋      | 3335/8943 [06:01<02:32, 36.85it/s] 37%|███▋      | 3344/8943 [06:01<02:06, 44.40it/s]Picklist: What is the average gpa of the students enrolled in the course with code ACCT-211?, COURSE, CRS_CODE, [ACCT-211]
--------------------
text:  What is the average gpa of the students enrolled in the course with code ACCT-211?
sql:  SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'
ground truth values:  [('CLASS.CRS_CODE', 'ACCT-211')]
matched values OrderedDict([(10, ('CLASS.CRS_CODE', 'ACCT-211')), (33, ('COURSE.CRS_CODE', 'ACCT-211'))])
--------------------
Picklist: What is the average GPA of students taking ACCT-211?, CLASS, CRS_CODE, [ACCT-211]
Picklist: What is the average GPA of students taking ACCT-211?, COURSE, CRS_CODE, [ACCT-211]
--------------------
text:  What is the average GPA of students taking ACCT-211?
sql:  SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'
ground truth values:  [('CLASS.CRS_CODE', 'ACCT-211')]
matched values OrderedDict([(10, ('CLASS.CRS_CODE', 'ACCT-211')), (33, ('COURSE.CRS_CODE', 'ACCT-211'))])
--------------------
Picklist: Find the first name and office of the professor who is in the history department and has a Ph.D. degree., DEPARTMENT, DEPT_NAME, [History]
Picklist: Find the first name and office of the professor who is in the history department and has a Ph.D. degree., PROFESSOR, PROF_HIGH_DEGREE, [Ph.D.]
Picklist: What are the first names and office of the professors who are in the history department and have a Ph.D?, DEPARTMENT, DEPT_NAME, [History]
Picklist: What are the first names and office of the professors who are in the history department and have a Ph.D?, PROFESSOR, PROF_HIGH_DEGREE, [Ph.D.]
--------------------
text:  Find names of all students who took some course and got A or C.
sql:  SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'
ground truth values:  [('ENROLL.ENROLL_GRADE', 'C'), ('ENROLL.ENROLL_GRADE', 'A')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the names of all students taking a course who received an A or C?
sql:  SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'
ground truth values:  [('ENROLL.ENROLL_GRADE', 'C'), ('ENROLL.ENROLL_GRADE', 'A')]
matched values OrderedDict()
--------------------
Picklist: Find the first names of all professors in the Accounting department who is teaching some course and the class room., COURSE, CRS_DESCRIPTION, [Accounting II]
Picklist: Find the first names of all professors in the Accounting department who is teaching some course and the class room., DEPARTMENT, DEPT_NAME, [Accounting]
--------------------
text:  Find the first names of all professors in the Accounting department who is teaching some course and the class room.
sql:  SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'
ground truth values:  [('DEPARTMENT.DEPT_NAME', 'Accounting')]
matched values OrderedDict([(34, ('COURSE.CRS_DESCRIPTION', 'Accounting II')), (48, ('DEPARTMENT.DEPT_NAME', 'Accounting'))])
--------------------
Picklist: What are the first names of all Accounting professors who teach and what are the classrooms of the courses they teach?, COURSE, CRS_DESCRIPTION, [Accounting II]
Picklist: What are the first names of all Accounting professors who teach and what are the classrooms of the courses they teach?, DEPARTMENT, DEPT_NAME, [Accounting]
--------------------
text:  What are the first names of all Accounting professors who teach and what are the classrooms of the courses they teach?
sql:  SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'
ground truth values:  [('DEPARTMENT.DEPT_NAME', 'Accounting')]
matched values OrderedDict([(34, ('COURSE.CRS_DESCRIPTION', 'Accounting II')), (48, ('DEPARTMENT.DEPT_NAME', 'Accounting'))])
--------------------
Picklist: Find the first names and degree of all professors who are teaching some class in Computer Info. Systems department., DEPARTMENT, DEPT_NAME, [Computer Info. Systems]
--------------------
text:  What are the different first names and highest degree attained for professors teaching in the Computer Information Systems department?
sql:  SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'
ground truth values:  [('DEPARTMENT.DEPT_NAME', 'Computer Info. Systems')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the last name of the student who got a grade A in the class with code 10018.
sql:  SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018
ground truth values:  [('ENROLL.ENROLL_GRADE', 'A')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the last name of the student who received an A in the class with the code 10018?
sql:  SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018
ground truth values:  [('ENROLL.ENROLL_GRADE', 'A')]
matched values OrderedDict()
--------------------
Picklist: Find the first name and office of history professor who did not get a Ph.D. degree., DEPARTMENT, DEPT_NAME, [History]
Picklist: Find the first name and office of history professor who did not get a Ph.D. degree., PROFESSOR, PROF_HIGH_DEGREE, [Ph.D.]
Picklist: What are the first names and offices of history professors who don't have Ph.D.s?, DEPARTMENT, DEPT_NAME, [History]
Picklist: What are the first names and offices of history professors who don't have Ph.D.s?, PROFESSOR, PROF_HIGH_DEGREE, [Ph.D.]
Picklist: What is the first name of the student whose last name starting with the letter S and is taking ACCT-211 class?, CLASS, CRS_CODE, [ACCT-211]
Picklist: What is the first name of the student whose last name starting with the letter S and is taking ACCT-211 class?, COURSE, CRS_CODE, [ACCT-211]
--------------------
text:  What is the first name of the student whose last name starting with the letter S and is taking ACCT-211 class?
sql:  SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%'
ground truth values:  [('CLASS.CRS_CODE', 'ACCT-211')]
matched values OrderedDict([(10, ('CLASS.CRS_CODE', 'ACCT-211')), (33, ('COURSE.CRS_CODE', 'ACCT-211'))])
--------------------
Picklist: What is the first name of the student whose last name starts with the letter S and is taking ACCT-211?, CLASS, CRS_CODE, [ACCT-211]
Picklist: What is the first name of the student whose last name starts with the letter S and is taking ACCT-211?, COURSE, CRS_CODE, [ACCT-211]
--------------------
text:  What is the first name of the student whose last name starts with the letter S and is taking ACCT-211?
sql:  SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%'
ground truth values:  [('CLASS.CRS_CODE', 'ACCT-211')]
matched values OrderedDict([(10, ('CLASS.CRS_CODE', 'ACCT-211')), (33, ('COURSE.CRS_CODE', 'ACCT-211'))])
--------------------
 38%|███▊      | 3356/8943 [06:01<01:43, 54.06it/s] 38%|███▊      | 3364/8943 [06:01<01:35, 58.29it/s] 38%|███▊      | 3374/8943 [06:01<01:26, 64.42it/s] 38%|███▊      | 3384/8943 [06:01<01:19, 70.36it/s] 38%|███▊      | 3393/8943 [06:01<01:14, 74.26it/s] 38%|███▊      | 3402/8943 [06:01<01:13, 75.19it/s] 38%|███▊      | 3410/8943 [06:02<01:37, 56.94it/s] 38%|███▊      | 3417/8943 [06:02<01:45, 52.29it/s] 38%|███▊      | 3423/8943 [06:02<02:20, 39.40it/s] 38%|███▊      | 3428/8943 [06:02<02:40, 34.36it/s] 38%|███▊      | 3433/8943 [06:02<02:46, 33.03it/s] 38%|███▊      | 3437/8943 [06:02<02:38, 34.83it/s] 38%|███▊      | 3441/8943 [06:03<02:35, 35.49it/s] 39%|███▊      | 3445/8943 [06:03<02:44, 33.52it/s] 39%|███▊      | 3449/8943 [06:03<02:56, 31.15it/s] 39%|███▊      | 3453/8943 [06:03<02:55, 31.29it/s] 39%|███▊      | 3457/8943 [06:03<02:45, 33.09it/s] 39%|███▊      | 3461/8943 [06:03<02:46, 32.86it/s] 39%|███▊      | 3465/8943 [06:03<02:53, 31.52it/s] 39%|███▉      | 3469/8943 [06:03<02:54, 31.42it/s] 39%|███▉      | 3473/8943 [06:04<02:51, 31.96it/s] 39%|███▉      | 3477/8943 [06:04<02:57, 30.75it/s] 39%|███▉      | 3481/8943 [06:04<02:54, 31.31it/s] 39%|███▉      | 3487/8943 [06:04<02:33, 35.60it/s] 39%|███▉      | 3491/8943 [06:04<02:38, 34.40it/s] 39%|███▉      | 3495/8943 [06:04<02:45, 32.96it/s] 39%|███▉      | 3499/8943 [06:04<02:57, 30.64it/s] 39%|███▉      | 3503/8943 [06:05<03:20, 27.17it/s] 39%|███▉      | 3506/8943 [06:05<03:39, 24.78it/s] 39%|███▉      | 3509/8943 [06:05<03:45, 24.10it/s]Picklist: What are the distinct years in which the competitions type is not "Tournament"?, competition, Competition_type, [Tournament]
Picklist: What are the different years for all competitions that are not of type equal to tournament?, competition, Competition_type, [Tournament]
Picklist: Show the names of clubs that have players with position "Right Wing"., player, Position, [Right Wing]
Picklist: What are the names of the clubs that have players in the position of "Right Wing"?, player, Position, [Right Wing]
Picklist: What is the average points of players from club with name "AIB"., club, name, [AIB]
Picklist: What is the average number of points for players from the "AIB" club?, club, name, [AIB]
Picklist: which country did participated in the most number of Tournament competitions?, competition, Competition_type, [Tournament]
Picklist: what is the name of the country that participated in the most tournament competitions?, competition, Competition_type, [Tournament]
Picklist: which countries did participated in both Friendly and Tournament type competitions., competition, Competition_type, [Tournament]
Picklist: which countries did participated in both Friendly and Tournament type competitions., competition, Competition_type, [Friendly]
Picklist: What are the countries that participated in both friendly and tournament type competitions?, competition, Competition_type, [Tournament]
Picklist: What are the countries that participated in both friendly and tournament type competitions?, competition, Competition_type, [Friendly]
Picklist: Find the countries that have never participated in any competition with Friendly type., competition, Competition_type, [Friendly]
--------------------
text:  What are the countries that have never participated in any friendly-type competitions?
sql:  SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'
ground truth values:  [('competition.Competition_type', 'Friendly')]
matched values OrderedDict()
--------------------
Picklist: Display the first name, and department number for all employees whose last name is "McEwen"., employees, LAST_NAME, [McEwen]
Picklist: What are the first names and department numbers for employees with last name McEwen?, employees, LAST_NAME, [McEwen]
Picklist: Display all the information about the department Marketing., departments, DEPARTMENT_NAME, [Marketing]
Picklist: What is all the information about the Marketing department?, departments, DEPARTMENT_NAME, [Marketing]
--------------------
text:  display all the details from Employees table for those employees who was hired before 2002-06-21.
sql:  SELECT * FROM employees WHERE hire_date  <  '2002-06-21'
ground truth values:  [('employees.HIRE_DATE', '2002-06-21')]
matched values OrderedDict()
--------------------
--------------------
text:  What is all the information about employees hired before June 21, 2002?
sql:  SELECT * FROM employees WHERE hire_date  <  '2002-06-21'
ground truth values:  [('employees.HIRE_DATE', '2002-06-21')]
matched values OrderedDict()
--------------------
--------------------
text:  display those employees who joined after 7th September, 1987.
sql:  SELECT * FROM employees WHERE hire_date  >  '1987-09-07'
ground truth values:  [('employees.HIRE_DATE', '1987-09-07')]
matched values OrderedDict()
--------------------
--------------------
text:  Which employees were hired after September 7th, 1987?
sql:  SELECT * FROM employees WHERE hire_date  >  '1987-09-07'
ground truth values:  [('employees.HIRE_DATE', '1987-09-07')]
matched values OrderedDict()
--------------------
Picklist: display the employee id and salary of all employees who report to Payam (first name)., employees, FIRST_NAME, [Payam]
Picklist: What are the employee ids of employees who report to Payam, and what are their salaries?, employees, FIRST_NAME, [Payam]
Picklist: display all the information about the department Marketing., departments, DEPARTMENT_NAME, [Marketing]
Picklist: What is all the information about the Marketing department?, departments, DEPARTMENT_NAME, [Marketing]
Picklist: What is the first name and job id for all employees in the Finance department?, departments, DEPARTMENT_NAME, [Finance]
Picklist: Give the first name and job id for all employees in the Finance department., departments, DEPARTMENT_NAME, [Finance]
Picklist: display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara., employees, FIRST_NAME, [Clara]
Picklist: What are the full names and hire dates for employees in the same department as someone with the first name Clara?, employees, FIRST_NAME, [Clara]
Picklist: display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara excluding Clara., employees, FIRST_NAME, [Clara]
--------------------
text:  display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara excluding Clara.
sql:  SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  "Clara") AND first_name != "Clara"
ground truth values:  [('employees.FIRST_NAME', 'Clara'), ('employees.FIRST_NAME', 'Clara')]
matched values OrderedDict([(57, ('employees.FIRST_NAME', 'Clara'))])
--------------------
Picklist: What are the full names and hire dates for employees in the same department as someone with the first name Clara, not including Clara?, employees, FIRST_NAME, [Clara]
--------------------
text:  What are the full names and hire dates for employees in the same department as someone with the first name Clara, not including Clara?
sql:  SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  "Clara") AND first_name != "Clara"
ground truth values:  [('employees.FIRST_NAME', 'Clara'), ('employees.FIRST_NAME', 'Clara')]
matched values OrderedDict([(57, ('employees.FIRST_NAME', 'Clara'))])
--------------------
Picklist: display the employee number and job id for all employees whose salary is smaller than any salary of those employees whose job title is MK_MAN., jobs, JOB_ID, [MK_MAN]
Picklist: display the employee number and job id for all employees whose salary is smaller than any salary of those employees whose job title is MK_MAN., employees, JOB_ID, [MK_MAN]
--------------------
text:  display the employee number and job id for all employees whose salary is smaller than any salary of those employees whose job title is MK_MAN.
sql:  SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' )
ground truth values:  [('employees.JOB_ID', 'MK_MAN')]
matched values OrderedDict([(40, ('jobs.JOB_ID', 'MK_MAN')), (75, ('employees.JOB_ID', 'MK_MAN'))])
--------------------
Picklist: What are the employee ids and job ids for employees who make less than the lowest earning employee with title MK_MAN?, jobs, JOB_ID, [MK_MAN]
Picklist: What are the employee ids and job ids for employees who make less than the lowest earning employee with title MK_MAN?, employees, JOB_ID, [MK_MAN]
--------------------
text:  What are the employee ids and job ids for employees who make less than the lowest earning employee with title MK_MAN?
sql:  SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' )
ground truth values:  [('employees.JOB_ID', 'MK_MAN')]
matched values OrderedDict([(40, ('jobs.JOB_ID', 'MK_MAN')), (75, ('employees.JOB_ID', 'MK_MAN'))])
--------------------
Picklist: display the employee number, name( first name and last name ) and job title for all employees whose salary is more than any salary of those employees whose job title is PU_MAN., jobs, JOB_ID, [PU_MAN]
Picklist: display the employee number, name( first name and last name ) and job title for all employees whose salary is more than any salary of those employees whose job title is PU_MAN., employees, JOB_ID, [PU_MAN]
--------------------
text:   39%|███▉      | 3512/8943 [06:05<03:45, 24.05it/s] 39%|███▉      | 3516/8943 [06:05<03:28, 25.99it/s] 39%|███▉      | 3519/8943 [06:05<03:30, 25.79it/s] 39%|███▉      | 3522/8943 [06:05<03:28, 26.00it/s] 39%|███▉      | 3525/8943 [06:05<03:33, 25.40it/s] 39%|███▉      | 3529/8943 [06:06<03:19, 27.13it/s] 40%|███▉      | 3538/8943 [06:06<02:40, 33.67it/s] 40%|███▉      | 3544/8943 [06:06<02:21, 38.07it/s] 40%|███▉      | 3552/8943 [06:06<01:59, 44.97it/s] 40%|███▉      | 3558/8943 [06:06<01:55, 46.65it/s] 40%|███▉      | 3565/8943 [06:06<01:44, 51.49it/s] 40%|███▉      | 3572/8943 [06:06<01:37, 54.92it/s]display the employee number, name( first name and last name ) and job title for all employees whose salary is more than any salary of those employees whose job title is PU_MAN.
sql:  SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )
ground truth values:  [('employees.JOB_ID', 'PU_MAN')]
matched values OrderedDict([(40, ('jobs.JOB_ID', 'PU_MAN')), (75, ('employees.JOB_ID', 'PU_MAN'))])
--------------------
Picklist: What are the employee ids, full names, and job ids for employees who make more than the highest earning employee with title PU_MAN?, jobs, JOB_ID, [PU_MAN]
Picklist: What are the employee ids, full names, and job ids for employees who make more than the highest earning employee with title PU_MAN?, employees, JOB_ID, [PU_MAN]
--------------------
text:  What are the employee ids, full names, and job ids for employees who make more than the highest earning employee with title PU_MAN?
sql:  SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )
ground truth values:  [('employees.JOB_ID', 'PU_MAN')]
matched values OrderedDict([(40, ('jobs.JOB_ID', 'PU_MAN')), (75, ('employees.JOB_ID', 'PU_MAN'))])
--------------------
Picklist: display the full name (first and last name), and salary of those employees who working in any department located in London., locations, CITY, [London]
Picklist: What are full names and salaries of employees working in the city of London?, locations, CITY, [London]
Picklist: Find the names of all English songs., song, languages, [english]
Picklist: What are the names of all songs in English?, song, languages, [english]
Picklist: What are the id of songs whose format is mp3., files, formats, [mp3]
Picklist: What are the id of all the files in mp3 format?, files, formats, [mp3]
Picklist: How many artists are from Bangladesh?, genre, most_popular_in, [Bangladesh]
Picklist: How many artists are from Bangladesh?, artist, country, [Bangladesh]
Picklist: How many artists are from Bangladesh?, song, country, [Bangladesh]
--------------------
text:  How many artists are from Bangladesh?
sql:  SELECT count(*) FROM artist WHERE country  =  "Bangladesh"
ground truth values:  [('artist.country', 'Bangladesh')]
matched values OrderedDict([(13, ('genre.most_popular_in', 'Bangladesh')), (22, ('artist.country', 'Bangladesh')), (54, ('song.country', 'Bangladesh'))])
--------------------
Picklist: How many Bangladeshi artists are listed?, genre, most_popular_in, [Bangladesh]
Picklist: How many Bangladeshi artists are listed?, artist, country, [Bangladesh]
Picklist: How many Bangladeshi artists are listed?, song, country, [Bangladesh]
--------------------
text:  How many Bangladeshi artists are listed?
sql:  SELECT count(*) FROM artist WHERE country  =  "Bangladesh"
ground truth values:  [('artist.country', 'Bangladesh')]
matched values OrderedDict([(13, ('genre.most_popular_in', 'Bangladesh')), (22, ('artist.country', 'Bangladesh')), (54, ('song.country', 'Bangladesh'))])
--------------------
Picklist: What is the average rating of songs produced by female artists?, artist, gender, [Female]
Picklist: How many songs, on average, are sung by a female artist?, artist, gender, [Female]
Picklist: Find the names of the artists who are from UK and have produced English songs., artist, country, [UK]
Picklist: Find the names of the artists who are from UK and have produced English songs., song, country, [UK]
Picklist: Find the names of the artists who are from UK and have produced English songs., song, languages, [english]
--------------------
text:  Find the names of the artists who are from UK and have produced English songs.
sql:  SELECT artist_name FROM artist WHERE country  =  "UK" INTERSECT SELECT artist_name FROM song WHERE languages  =  "english"
ground truth values:  [('artist.country', 'UK'), ('song.languages', 'english')]
matched values OrderedDict([(20, ('artist.country', 'UK')), (52, ('song.country', 'UK')), (64, ('song.languages', 'english'))])
--------------------
Picklist: What are the names of the artists that are from the UK and sang songs in English?, artist, country, [UK]
Picklist: What are the names of the artists that are from the UK and sang songs in English?, song, country, [UK]
Picklist: What are the names of the artists that are from the UK and sang songs in English?, song, languages, [english]
--------------------
text:  What are the names of the artists that are from the UK and sang songs in English?
sql:  SELECT artist_name FROM artist WHERE country  =  "UK" INTERSECT SELECT artist_name FROM song WHERE languages  =  "english"
ground truth values:  [('artist.country', 'UK'), ('song.languages', 'english')]
matched values OrderedDict([(20, ('artist.country', 'UK')), (52, ('song.country', 'UK')), (64, ('song.languages', 'english'))])
--------------------
Picklist: Find the id of songs that are available in mp4 format and have resolution lower than 1000., files, formats, [mp4]
Picklist: What is the id of the files that are available in the format of mp4 and a resolution smaller than 1000?, files, formats, [mp4]
Picklist: What is the country of origin of the artist who is female and produced a song in Bangla?, artist, gender, [Female]
Picklist: What is the country of origin of the artist who is female and produced a song in Bangla?, song, languages, [bangla]
Picklist: What countries are the female artists who sung in the language Bangla from?, artist, gender, [Female]
Picklist: What countries are the female artists who sung in the language Bangla from?, song, languages, [bangla]
Picklist: What is the average duration of songs that have mp3 format and resolution below 800?, files, formats, [mp3]
Picklist: What is the average song duration for the songs that are in mp3 format and whose resolution below 800?, files, formats, [mp3]
Picklist: How many artists are male and how many are female?, artist, gender, [Female]
Picklist: How many artists are male and how many are female?, artist, gender, [Male]
--------------------
text:  How many artists are male and how many are female?
sql:  SELECT count(*) ,  gender FROM artist GROUP BY gender
ground truth values:  []
matched values OrderedDict([(22, ('artist.gender', 'Female')), (24, ('artist.gender', 'Male'))])
--------------------
Picklist: Find the distinct names of all songs that have a higher resolution than some songs in English., song, languages, [english]
Picklist: What are the different names for all songs that have a higher resolution than English songs?, song, languages, [english]
Picklist: What are the names of all songs that have a lower rating than some song of blues genre?, genre, g_name, [blues]
Picklist: What are the names of all songs that have a lower rating than some song of blues genre?, artist, preferred_genre, [blues]
Picklist: What are the names of all songs that have a lower rating than some song of blues genre?, song, genre_is, [blues]
--------------------
text:  What are the names of all songs that have a lower rating than some song of blues genre?
sql:  SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  "blues")
ground truth values:  [('song.genre_is', 'blues')]
matched values OrderedDict([(7, ('genre.g_name', 'blues')), (27, ('artist.preferred_genre', 'blues')), (60, ('song.genre_is', 'blues'))])
--------------------
Picklist: What are the names of the songs that have a lower rating than at least one blues song?, genre, g_name, [blues]
Picklist: What are the names of the songs that have a lower rating than at least one blues song?, artist, preferred_genre, [blues]
Picklist: What are the names of the songs that have a lower rating than at least one blues song?, song, genre_is, [blues]
--------------------
text:  What are the names of the songs that have a lower rating than at least one blues song?
sql:  SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  "blues")
ground truth values:  [('song.genre_is', 'blues')]
matched values  40%|████      | 3579/8943 [06:06<01:34, 56.58it/s] 40%|████      | 3586/8943 [06:06<01:34, 56.93it/s] 40%|████      | 3593/8943 [06:07<01:31, 58.27it/s] 40%|████      | 3600/8943 [06:07<01:38, 54.25it/s] 40%|████      | 3606/8943 [06:07<01:40, 53.13it/s] 40%|████      | 3612/8943 [06:07<01:43, 51.61it/s] 40%|████      | 3618/8943 [06:07<01:39, 53.70it/s]OrderedDict([(7, ('genre.g_name', 'blues')), (27, ('artist.preferred_genre', 'blues')), (60, ('song.genre_is', 'blues'))])
--------------------
Picklist: What are the ids of songs that are available in either mp4 format or have resolution above 720?, files, formats, [mp4]
Picklist: What are the ids of all songs that are available on mp4 or have a higher resolution than 720?, files, formats, [mp4]
Picklist: List the names of all songs that have 4 minute duration or are in English., song, languages, [english]
Picklist: What are the names of all songs that are approximately 4 minutes long or are in English?, song, languages, [english]
Picklist: What are the names of artists who are Male and are from UK?, artist, country, [UK]
Picklist: What are the names of artists who are Male and are from UK?, artist, gender, [Male]
Picklist: What are the names of artists who are Male and are from UK?, song, country, [UK]
--------------------
text:  What are the names of artists who are Male and are from UK?
sql:  SELECT artist_name FROM artist WHERE country  =  "UK" AND gender  =  "Male"
ground truth values:  [('artist.country', 'UK'), ('artist.gender', 'Male')]
matched values OrderedDict([(20, ('artist.country', 'UK')), (24, ('artist.gender', 'Male')), (54, ('song.country', 'UK'))])
--------------------
Picklist: What are the names of all male British artists?, artist, gender, [Male]
--------------------
text:  What are the names of all male British artists?
sql:  SELECT artist_name FROM artist WHERE country  =  "UK" AND gender  =  "Male"
ground truth values:  [('artist.country', 'UK'), ('artist.gender', 'Male')]
matched values OrderedDict([(22, ('artist.gender', 'Male'))])
--------------------
Picklist: Find the names of songs whose genre is modern or language is English., genre, g_name, [modern]
Picklist: Find the names of songs whose genre is modern or language is English., artist, preferred_genre, [modern]
Picklist: Find the names of songs whose genre is modern or language is English., song, genre_is, [modern]
Picklist: Find the names of songs whose genre is modern or language is English., song, languages, [english]
--------------------
text:  Find the names of songs whose genre is modern or language is English.
sql:  SELECT song_name FROM song WHERE genre_is  =  "modern" OR languages  =  "english"
ground truth values:  [('song.genre_is', 'modern'), ('song.languages', 'english')]
matched values OrderedDict([(7, ('genre.g_name', 'modern')), (27, ('artist.preferred_genre', 'modern')), (60, ('song.genre_is', 'modern')), (66, ('song.languages', 'english'))])
--------------------
Picklist: What are the names of the songs that are modern or sung in English?, genre, g_name, [modern]
Picklist: What are the names of the songs that are modern or sung in English?, artist, preferred_genre, [modern]
Picklist: What are the names of the songs that are modern or sung in English?, song, genre_is, [modern]
Picklist: What are the names of the songs that are modern or sung in English?, song, languages, [english]
--------------------
text:  What are the names of the songs that are modern or sung in English?
sql:  SELECT song_name FROM song WHERE genre_is  =  "modern" OR languages  =  "english"
ground truth values:  [('song.genre_is', 'modern'), ('song.languages', 'english')]
matched values OrderedDict([(7, ('genre.g_name', 'modern')), (27, ('artist.preferred_genre', 'modern')), (60, ('song.genre_is', 'modern')), (66, ('song.languages', 'english'))])
--------------------
Picklist: Return the names of songs for which format is mp3 and resolution is below 1000., files, formats, [mp3]
Picklist: What are the names of all songs that are in mp3 format and have a resolution lower than 1000?, files, formats, [mp3]
Picklist: Return the names of singers who are from UK and released an English song., artist, country, [UK]
Picklist: Return the names of singers who are from UK and released an English song., song, country, [UK]
Picklist: Return the names of singers who are from UK and released an English song., song, languages, [english]
--------------------
text:  Return the names of singers who are from UK and released an English song.
sql:  SELECT artist_name FROM artist WHERE country  =  "UK" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  "english"
ground truth values:  [('artist.country', 'UK'), ('song.languages', 'english')]
matched values OrderedDict([(20, ('artist.country', 'UK')), (52, ('song.country', 'UK')), (64, ('song.languages', 'english'))])
--------------------
Picklist: What are the names of all singers that are from the UK and released a song in English?, artist, country, [UK]
Picklist: What are the names of all singers that are from the UK and released a song in English?, song, country, [UK]
Picklist: What are the names of all singers that are from the UK and released a song in English?, song, languages, [english]
--------------------
text:  What are the names of all singers that are from the UK and released a song in English?
sql:  SELECT artist_name FROM artist WHERE country  =  "UK" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  "english"
ground truth values:  [('artist.country', 'UK'), ('song.languages', 'english')]
matched values OrderedDict([(20, ('artist.country', 'UK')), (52, ('song.country', 'UK')), (64, ('song.languages', 'english'))])
--------------------
Picklist: What are the average rating and resolution of songs that are in Bangla?, song, languages, [bangla]
Picklist: What is the average rating and resolution of all bangla songs?, song, languages, [bangla]
Picklist: Find the names and number of works of all artists who have at least one English songs., song, languages, [english]
Picklist: What are the names and number of works for all artists who have sung at least one song in English?, song, languages, [english]
Picklist: What are the names of the songs whose rating is below the rating of all songs in English?, song, languages, [english]
Picklist: What are the song names for every song whose rating is less than the minimum rating for English songs?, song, languages, [english]
Picklist: What is ids of the songs whose resolution is higher than the average resolution of songs in modern genre?, genre, g_name, [modern]
Picklist: What is ids of the songs whose resolution is higher than the average resolution of songs in modern genre?, artist, preferred_genre, [modern]
Picklist: What is ids of the songs whose resolution is higher than the average resolution of songs in modern genre?, song, genre_is, [modern]
--------------------
text:  What is ids of the songs whose resolution is higher than the average resolution of songs in modern genre?
sql:  SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  "modern")
ground truth values:  [('song.genre_is', 'modern')]
matched values OrderedDict([(7, ('genre.g_name', 'modern')), (27, ('artist.preferred_genre', 'modern')), (60, ('song.genre_is', 'modern'))])
--------------------
Picklist: What are the ids of all songs that have higher resolution of the average resolution in the modern genre?, genre, g_name, [modern]
Picklist: What are the ids of all songs that have higher resolution of the average resolution in the modern genre?, artist, preferred_genre, [modern]
Picklist: What are the ids of all songs that have higher resolution of the average resolution in the modern genre?, song, genre_is, [modern]
--------------------
text:  What are the ids of all songs that have higher resolution of the average resolution in the modern genre?
sql:  SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  "modern")
ground truth values:  [('song.genre_is', 'modern')]
matched values OrderedDict([(7, ('genre.g_name', 'modern')), (27, ('artist.preferred_genre', 'modern')), (60, ('song.genre_is', 'modern'))])
--------------------
Picklist: Find the top 3 artists who have the largest number of songs works whose language is Bangla., song, languages, [bangla]
 41%|████      | 3624/8943 [06:07<01:41, 52.47it/s] 41%|████      | 3624/8943 [06:17<01:41, 52.47it/s]Picklist: What are the top 3 artists with the largest number of songs in the language Bangla?, song, languages, [bangla]
Picklist: List the id, genre and artist name of English songs ordered by rating., song, languages, [english]
Picklist: What is the id, genre, and name of the artist for every English song ordered by ascending rating?, song, languages, [english]
Picklist: List the duration, file size and format of songs whose genre is pop, ordered by title?, genre, g_name, [pop]
Picklist: List the duration, file size and format of songs whose genre is pop, ordered by title?, artist, preferred_genre, [pop]
Picklist: List the duration, file size and format of songs whose genre is pop, ordered by title?, song, genre_is, [pop]
--------------------
text:  List the duration, file size and format of songs whose genre is pop, ordered by title?
sql:  SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  "pop" ORDER BY T2.song_name
ground truth values:  [('song.genre_is', 'pop')]
matched values OrderedDict([(7, ('genre.g_name', 'pop')), (27, ('artist.preferred_genre', 'pop')), (60, ('song.genre_is', 'pop'))])
--------------------
Picklist: What is the duration, file size, and song format for every pop song, ordered by title alphabetically?, genre, g_name, [pop]
Picklist: What is the duration, file size, and song format for every pop song, ordered by title alphabetically?, artist, preferred_genre, [pop]
Picklist: What is the duration, file size, and song format for every pop song, ordered by title alphabetically?, song, genre_is, [pop]
--------------------
text:  What is the duration, file size, and song format for every pop song, ordered by title alphabetically?
sql:  SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  "pop" ORDER BY T2.song_name
ground truth values:  [('song.genre_is', 'pop')]
matched values OrderedDict([(7, ('genre.g_name', 'pop')), (27, ('artist.preferred_genre', 'pop')), (60, ('song.genre_is', 'pop'))])
--------------------
Picklist: Find the names of the artists who have produced English songs but have never received rating higher than 8., song, languages, [english]
Picklist: What are the names of the different artists that have produced a song in English but have never receieved a rating higher than 8?, song, languages, [english]
Picklist: Find the names of the artists who are from Bangladesh and have never received rating higher than 7., genre, most_popular_in, [Bangladesh]
Picklist: Find the names of the artists who are from Bangladesh and have never received rating higher than 7., artist, country, [Bangladesh]
Picklist: Find the names of the artists who are from Bangladesh and have never received rating higher than 7., song, country, [Bangladesh]
--------------------
text:  Find the names of the artists who are from Bangladesh and have never received rating higher than 7.
sql:  SELECT DISTINCT artist_name FROM artist WHERE country  =  "Bangladesh" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7
ground truth values:  [('artist.country', 'Bangladesh')]
matched values OrderedDict([(13, ('genre.most_popular_in', 'Bangladesh')), (22, ('artist.country', 'Bangladesh')), (54, ('song.country', 'Bangladesh'))])
--------------------
Picklist: What are the names of the different artists from Bangladesh who never received a rating higher than a 7?, genre, most_popular_in, [Bangladesh]
Picklist: What are the names of the different artists from Bangladesh who never received a rating higher than a 7?, artist, country, [Bangladesh]
Picklist: What are the names of the different artists from Bangladesh who never received a rating higher than a 7?, song, country, [Bangladesh]
--------------------
text:  What are the names of the different artists from Bangladesh who never received a rating higher than a 7?
sql:  SELECT DISTINCT artist_name FROM artist WHERE country  =  "Bangladesh" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7
ground truth values:  [('artist.country', 'Bangladesh')]
matched values OrderedDict([(13, ('genre.most_popular_in', 'Bangladesh')), (22, ('artist.country', 'Bangladesh')), (54, ('song.country', 'Bangladesh'))])
--------------------
Picklist: what is the full name and id of the college with the largest number of baseball players?, hall_of_fame, category, [Player]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'what is the full name and id of the college with the largest number of baseball players?'
NL tokens: [b'what', b'is', b'the', b'full', b'name', b'and', b'id', b'of', b'the', b'college', b'with', b'the', b'largest', b'number', b'of', b'baseball', b'players', b'?']
NL tokens (original): [b'what', b'is', b'the', b'full', b'name', b'and', b'id', b'of', b'the', b'college', b'with', b'the', b'largest', b'number', b'of', b'baseball', b'players', b'?']
['[CLS]', 'what', 'is', 'the', 'full', 'name', 'and', 'id', 'of', 'the', 'college', 'with', 'the', 'largest', 'number', 'of', 'baseball', 'players', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[SEP]']
Target 0: b'SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from UNK_TABLE join player_college on UNK_FIELD = player_college.college_id group by UNK_FIELD select UNK_FIELD , UNK_FIELD order by count (*) desc limit 1

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3630/8943 [06:19<54:04,  1.64it/s]
NL: b'what is the full name and id of the college with the largest number of baseball players?'
NL tokens: [b'what', b'is', b'the', b'full', b'name', b'and', b'id', b'of', b'the', b'college', b'with', b'the', b'largest', b'number', b'of', b'baseball', b'players', b'?']
NL tokens (original): [b'what', b'is', b'the', b'full', b'name', b'and', b'id', b'of', b'the', b'college', b'with', b'the', b'largest', b'number', b'of', b'baseball', b'players', b'?']
['[CLS]', 'what', 'is', 'the', 'full', 'name', 'and', 'id', 'of', 'the', 'college', 'with', 'the', 'largest', 'number', 'of', 'baseball', 'players', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[SEP]']
Target 0: b'SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from UNK_TABLE join player_college on UNK_FIELD = player_college.college_id group by UNK_FIELD select UNK_FIELD , UNK_FIELD order by count (*) desc limit 1

--------------------
text:  what is the full name and id of the college with the largest number of baseball players?
sql:  SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(435, ('hall_of_fame.category', 'Player'))])
--------------------
Picklist: Find the full name and id of the college that has the most baseball players., hall_of_fame, category, [Player]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'Find the full name and id of the college that has the most baseball players.'
NL tokens: [b'find', b'the', b'full', b'name', b'and', b'id', b'of', b'the', b'college', b'that', b'has', b'the', b'most', b'baseball', b'players', b'.']
NL tokens (original): [b'Find', b'the', b'full', b'name', b'and', b'id', b'of', b'the', b'college', b'that', b'has', b'the', b'most', b'baseball', b'players', b'.']
['[CLS]', 'find', 'the', 'full', 'name', 'and', 'id', 'of', 'the', 'college', 'that', 'has', 'the', 'most', 'baseball', 'players', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', '[SEP]']
Target 0: b'SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from UNK_TABLE join player_college on UNK_FIELD = player_college.college_id group by UNK_FIELD select UNK_FIELD , UNK_FIELD order by count (*) desc limit 1

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3631/8943 [06:24<2:47:57,  1.90s/it]
NL: b'Find the full name and id of the college that has the most baseball players.'
NL tokens: [b'find', b'the', b'full', b'name', b'and', b'id', b'of', b'the', b'college', b'that', b'has', b'the', b'most', b'baseball', b'players', b'.']
NL tokens (original): [b'Find', b'the', b'full', b'name', b'and', b'id', b'of', b'the', b'college', b'that', b'has', b'the', b'most', b'baseball', b'players', b'.']
['[CLS]', 'find', 'the', 'full', 'name', 'and', 'id', 'of', 'the', 'college', 'that', 'has', 'the', 'most', 'baseball', 'players', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', '[SEP]']
Target 0: b'SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from UNK_TABLE join player_college on UNK_FIELD = player_college.college_id group by UNK_FIELD select UNK_FIELD , UNK_FIELD order by count (*) desc limit 1

--------------------
text:  Find the full name and id of the college that has the most baseball players.
sql:  SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(435, ('hall_of_fame.category', 'Player'))])
--------------------
Picklist: What is average salary of the players in the team named 'Boston Red Stockings' ?, hall_of_fame, category, [Player]
Picklist: What is average salary of the players in the team named 'Boston Red Stockings' ?, player, birth_city, [Boston]
Picklist: What is average salary of the players in the team named 'Boston Red Stockings' ?, player, death_city, [Boston]
Picklist: What is average salary of the players in the team named 'Boston Red Stockings' ?, player, name_first, [Red]
Picklist: What is average salary of the players in the team named 'Boston Red Stockings' ?, player, name_last, [Boston]
Picklist: What is average salary of the players in the team named 'Boston Red Stockings' ?, park, city, [Boston]
Picklist: What is average salary of the players in the team named 'Boston Red Stockings' ?, college, city, [Boston]
Picklist: What is average salary of the players in the team named 'Boston Red Stockings' ?, team, name, [Boston Red Stockings]
Picklist: What is average salary of the players in the team named 'Boston Red Stockings' ?, team_franchise, franchise_name, [Boston Red Stockings]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b"What is average salary of the players in the team named 'Boston Red Stockings' ?"
NL tokens: [b'what', b'is', b'average', b'salary', b'of', b'the', b'players', b'in', b'the', b'team', b'named', b"'", b'boston', b'red', b'stockings', b"'", b'?']
NL tokens (original): [b'What', b'is', b'average', b'salary', b'of', b'the', b'players', b'in', b'the', b'team', b'named', b"'", b'Boston', b'Red', b'Stockings', b"'", b'?']
['[CLS]', 'what', 'is', 'average', 'salary', 'of', 'the', 'players', 'in', 'the', 'team', 'named', "'", 'boston', 'red', 'stockings', "'", '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '[SEP]']
Target 0: b"SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings'"
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" select avg (UNK_FIELD)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3632/8943 [06:29<4:12:15,  2.85s/it]
NL: b"What is average salary of the players in the team named 'Boston Red Stockings' ?"
NL tokens: [b'what', b'is', b'average', b'salary', b'of', b'the', b'players', b'in', b'the', b'team', b'named', b"'", b'boston', b'red', b'stockings', b"'", b'?']
NL tokens (original): [b'What', b'is', b'average', b'salary', b'of', b'the', b'players', b'in', b'the', b'team', b'named', b"'", b'Boston', b'Red', b'Stockings', b"'", b'?']
['[CLS]', 'what', 'is', 'average', 'salary', 'of', 'the', 'players', 'in', 'the', 'team', 'named', "'", 'boston', 'red', 'stockings', "'", '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '[SEP]']
Target 0: b"SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings'"
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" select avg (UNK_FIELD)

--------------------
text:  What is average salary of the players in the team named 'Boston Red Stockings' ?
sql:  SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings'
ground truth values:  [('team.name', 'Boston Red Stockings')]
matched values OrderedDict([(435, ('hall_of_fame.category', 'Player')), (547, ('player.birth_city', 'Boston')), (567, ('player.death_city', 'Boston')), (572, ('player.name_first', 'Red')), (577, ('player.name_last', 'Boston')), (616, ('park.city', 'Boston')), (800, ('college.city', 'Boston')), (941, ('team.name', 'Boston Red Stockings')), (978, ('team_franchise.franchise_name', 'Boston Red Stockings'))])
--------------------
Picklist: Compute the average salary of the players in the team called 'Boston Red Stockings'., hall_of_fame, category, [Player]
Picklist: Compute the average salary of the players in the team called 'Boston Red Stockings'., player, birth_city, [Boston]
Picklist: Compute the average salary of the players in the team called 'Boston Red Stockings'., player, death_city, [Boston]
Picklist: Compute the average salary of the players in the team called 'Boston Red Stockings'., player, name_first, [Red]
Picklist: Compute the average salary of the players in the team called 'Boston Red Stockings'., player, name_last, [Boston]
Picklist: Compute the average salary of the players in the team called 'Boston Red Stockings'., park, city, [Boston]
Picklist: Compute the average salary of the players in the team called 'Boston Red Stockings'., college, city, [Boston]
Picklist: Compute the average salary of the players in the team called 'Boston Red Stockings'., team, name, [Boston Red Stockings]
Picklist: Compute the average salary of the players in the team called 'Boston Red Stockings'., team_franchise, franchise_name, [Boston Red Stockings]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b"Compute the average salary of the players in the team called 'Boston Red Stockings'."
NL tokens: [b'compute', b'the', b'average', b'salary', b'of', b'the', b'players', b'in', b'the', b'team', b'called', b"'", b'boston', b'red', b'stockings', b"'", b'.']
NL tokens (original): [b'Compute', b'the', b'average', b'salary', b'of', b'the', b'players', b'in', b'the', b'team', b'called', b"'", b'Boston', b'Red', b'Stockings', b"'", b'.']
['[CLS]', 'compute', 'the', 'average', 'salary', 'of', 'the', 'players', 'in', 'the', 'team', 'called', "'", 'boston', 'red', 'stockings', "'", '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '[SEP]']
Target 0: b"SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings'"
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" select avg (UNK_FIELD)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3633/8943 [06:34<5:14:03,  3.55s/it]
NL: b"Compute the average salary of the players in the team called 'Boston Red Stockings'."
NL tokens: [b'compute', b'the', b'average', b'salary', b'of', b'the', b'players', b'in', b'the', b'team', b'called', b"'", b'boston', b'red', b'stockings', b"'", b'.']
NL tokens (original): [b'Compute', b'the', b'average', b'salary', b'of', b'the', b'players', b'in', b'the', b'team', b'called', b"'", b'Boston', b'Red', b'Stockings', b"'", b'.']
['[CLS]', 'compute', 'the', 'average', 'salary', 'of', 'the', 'players', 'in', 'the', 'team', 'called', "'", 'boston', 'red', 'stockings', "'", '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '[SEP]']
Target 0: b"SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings'"
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" select avg (UNK_FIELD)

--------------------
text:  Compute the average salary of the players in the team called 'Boston Red Stockings'.
sql:  SELECT avg(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings'
ground truth values:  [('team.name', 'Boston Red Stockings')]
matched values OrderedDict([(435, ('hall_of_fame.category', 'Player')), (547, ('player.birth_city', 'Boston')), (567, ('player.death_city', 'Boston')), (572, ('player.name_first', 'Red')), (577, ('player.name_last', 'Boston')), (616, ('park.city', 'Boston')), (800, ('college.city', 'Boston')), (941, ('team.name', 'Boston Red Stockings')), (978, ('team_franchise.franchise_name', 'Boston Red Stockings'))])
--------------------
Picklist: What are first and last names of players participating in all star game in 1998?, hall_of_fame, category, [Player]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'What are first and last names of players participating in all star game in 1998?'
NL tokens: [b'what', b'are', b'first', b'and', b'last', b'names', b'of', b'players', b'participating', b'in', b'all', b'star', b'game', b'in', b'1998', b'?']
NL tokens (original): [b'What', b'are', b'first', b'and', b'last', b'names', b'of', b'players', b'participating', b'in', b'all', b'star', b'game', b'in', b'1998', b'?']
['[CLS]', 'what', 'are', 'first', 'and', 'last', 'names', 'of', 'players', 'participating', 'in', 'all', 'star', 'game', 'in', '1998', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', '[SEP]']
Target 0: b'SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998'
Target TF-P tokens: from UNK_TABLE join all_star on UNK_FIELD = all_star.player_id where all_star.year = 1998 select UNK_FIELD , UNK_FIELD

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3634/8943 [06:40<5:59:48,  4.07s/it]
NL: b'What are first and last names of players participating in all star game in 1998?'
NL tokens: [b'what', b'are', b'first', b'and', b'last', b'names', b'of', b'players', b'participating', b'in', b'all', b'star', b'game', b'in', b'1998', b'?']
NL tokens (original): [b'What', b'are', b'first', b'and', b'last', b'names', b'of', b'players', b'participating', b'in', b'all', b'star', b'game', b'in', b'1998', b'?']
['[CLS]', 'what', 'are', 'first', 'and', 'last', 'names', 'of', 'players', 'participating', 'in', 'all', 'star', 'game', 'in', '1998', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', '[SEP]']
Target 0: b'SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998'
Target TF-P tokens: from UNK_TABLE join all_star on UNK_FIELD = all_star.player_id where all_star.year = 1998 select UNK_FIELD , UNK_FIELD

--------------------
text:  What are first and last names of players participating in all star game in 1998?
sql:  SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998
ground truth values:  []
matched values OrderedDict([(435, ('hall_of_fame.category', 'Player'))])
--------------------
Picklist: List the first and last name for players who participated in all star game in 1998., hall_of_fame, category, [Player]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'List the first and last name for players who participated in all star game in 1998.'
NL tokens: [b'list', b'the', b'first', b'and', b'last', b'name', b'for', b'players', b'who', b'participated', b'in', b'all', b'star', b'game', b'in', b'1998', b'.']
NL tokens (original): [b'List', b'the', b'first', b'and', b'last', b'name', b'for', b'players', b'who', b'participated', b'in', b'all', b'star', b'game', b'in', b'1998', b'.']
['[CLS]', 'list', 'the', 'first', 'and', 'last', 'name', 'for', 'players', 'who', 'participated', 'in', 'all', 'star', 'game', 'in', '1998', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '[SEP]']
Target 0: b'SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998'
Target TF-P tokens: from UNK_TABLE join all_star on UNK_FIELD = all_star.player_id where all_star.year = 1998 select UNK_FIELD , UNK_FIELD

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3635/8943 [06:45<6:38:09,  4.50s/it]
NL: b'List the first and last name for players who participated in all star game in 1998.'
NL tokens: [b'list', b'the', b'first', b'and', b'last', b'name', b'for', b'players', b'who', b'participated', b'in', b'all', b'star', b'game', b'in', b'1998', b'.']
NL tokens (original): [b'List', b'the', b'first', b'and', b'last', b'name', b'for', b'players', b'who', b'participated', b'in', b'all', b'star', b'game', b'in', b'1998', b'.']
['[CLS]', 'list', 'the', 'first', 'and', 'last', 'name', 'for', 'players', 'who', 'participated', 'in', 'all', 'star', 'game', 'in', '1998', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '[SEP]']
Target 0: b'SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998'
Target TF-P tokens: from UNK_TABLE join all_star on UNK_FIELD = all_star.player_id where all_star.year = 1998 select UNK_FIELD , UNK_FIELD

--------------------
text:  List the first and last name for players who participated in all star game in 1998.
sql:  SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998
ground truth values:  []
matched values OrderedDict([(435, ('hall_of_fame.category', 'Player'))])
--------------------
Picklist: What are the first name, last name and id of the player with the most all star game experiences? Also list the count., hall_of_fame, category, [Player]
Picklist: What are the first name, last name and id of the player with the most all star game experiences? Also list the count., player, name_first, [Count]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'What are the first name, last name and id of the player with the most all star game experiences? Also list the count.'
NL tokens: [b'what', b'are', b'the', b'first', b'name', b',', b'last', b'name', b'and', b'id', b'of', b'the', b'player', b'with', b'the', b'most', b'all', b'star', b'game', b'experiences', b'?', b'also', b'list', b'the', b'count', b'.']
NL tokens (original): [b'What', b'are', b'the', b'first', b'name', b',', b'last', b'name', b'and', b'id', b'of', b'the', b'player', b'with', b'the', b'most', b'all', b'star', b'game', b'experiences', b'?', b'Also', b'list', b'the', b'count', b'.']
['[CLS]', 'what', 'are', 'the', 'first', 'name', ',', 'last', 'name', 'and', 'id', 'of', 'the', 'player', 'with', 'the', 'most', 'all', 'star', 'game', 'experiences', '?', 'also', 'list', 'the', 'count', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[SEP]']
Target 0: b'SELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from UNK_TABLE join all_star on UNK_FIELD = all_star.player_id group by UNK_FIELD select UNK_FIELD , UNK_FIELD , UNK_FIELD , count (*) order by count (*) desc limit 1

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3636/8943 [06:52<7:38:09,  5.18s/it]
NL: b'What are the first name, last name and id of the player with the most all star game experiences? Also list the count.'
NL tokens: [b'what', b'are', b'the', b'first', b'name', b',', b'last', b'name', b'and', b'id', b'of', b'the', b'player', b'with', b'the', b'most', b'all', b'star', b'game', b'experiences', b'?', b'also', b'list', b'the', b'count', b'.']
NL tokens (original): [b'What', b'are', b'the', b'first', b'name', b',', b'last', b'name', b'and', b'id', b'of', b'the', b'player', b'with', b'the', b'most', b'all', b'star', b'game', b'experiences', b'?', b'Also', b'list', b'the', b'count', b'.']
['[CLS]', 'what', 'are', 'the', 'first', 'name', ',', 'last', 'name', 'and', 'id', 'of', 'the', 'player', 'with', 'the', 'most', 'all', 'star', 'game', 'experiences', '?', 'also', 'list', 'the', 'count', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[SEP]']
Target 0: b'SELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from UNK_TABLE join all_star on UNK_FIELD = all_star.player_id group by UNK_FIELD select UNK_FIELD , UNK_FIELD , UNK_FIELD , count (*) order by count (*) desc limit 1

--------------------
text:  What are the first name, last name and id of the player with the most all star game experiences? Also list the count.
sql:  SELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(435, ('hall_of_fame.category', 'Player')), (568, ('player.name_first', 'Count'))])
--------------------
Picklist: Which player has the most all star game experiences? Give me the first name, last name and id of the player, as well as the number of times the player participated in all star game., hall_of_fame, category, [Player]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'Which player has the most all star game experiences? Give me the first name, last name and id of the player, as well as the number of times the player participated in all star game.'
NL tokens: [b'which', b'player', b'has', b'the', b'most', b'all', b'star', b'game', b'experiences', b'?', b'give', b'me', b'the', b'first', b'name', b',', b'last', b'name', b'and', b'id', b'of', b'the', b'player', b',', b'as', b'well', b'as', b'the', b'number', b'of', b'times', b'the', b'player', b'participated', b'in', b'all', b'star', b'game', b'.']
NL tokens (original): [b'Which', b'player', b'has', b'the', b'most', b'all', b'star', b'game', b'experiences', b'?', b'Give', b'me', b'the', b'first', b'name', b',', b'last', b'name', b'and', b'id', b'of', b'the', b'player', b',', b'as', b'well', b'as', b'the', b'number', b'of', b'times', b'the', b'player', b'participated', b'in', b'all', b'star', b'game', b'.']
['[CLS]', 'which', 'player', 'has', 'the', 'most', 'all', 'star', 'game', 'experiences', '?', 'give', 'me', 'the', 'first', 'name', ',', 'last', 'name', 'and', 'id', 'of', 'the', 'player', ',', 'as', 'well', 'as', 'the', 'number', 'of', 'times', 'the', 'player', 'participated', 'in', 'all', 'star', 'game', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[SEP]']
Target 0: b'SELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from UNK_TABLE join all_star on UNK_FIELD = all_star.player_id group by UNK_FIELD select UNK_FIELD , UNK_FIELD , UNK_FIELD , count (*) order by count (*) desc limit 1

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3637/8943 [07:01<9:29:32,  6.44s/it] 41%|████      | 3638/8943 [07:05<8:17:50,  5.63s/it] 41%|████      | 3639/8943 [07:09<7:45:23,  5.26s/it]
NL: b'Which player has the most all star game experiences? Give me the first name, last name and id of the player, as well as the number of times the player participated in all star game.'
NL tokens: [b'which', b'player', b'has', b'the', b'most', b'all', b'star', b'game', b'experiences', b'?', b'give', b'me', b'the', b'first', b'name', b',', b'last', b'name', b'and', b'id', b'of', b'the', b'player', b',', b'as', b'well', b'as', b'the', b'number', b'of', b'times', b'the', b'player', b'participated', b'in', b'all', b'star', b'game', b'.']
NL tokens (original): [b'Which', b'player', b'has', b'the', b'most', b'all', b'star', b'game', b'experiences', b'?', b'Give', b'me', b'the', b'first', b'name', b',', b'last', b'name', b'and', b'id', b'of', b'the', b'player', b',', b'as', b'well', b'as', b'the', b'number', b'of', b'times', b'the', b'player', b'participated', b'in', b'all', b'star', b'game', b'.']
['[CLS]', 'which', 'player', 'has', 'the', 'most', 'all', 'star', 'game', 'experiences', '?', 'give', 'me', 'the', 'first', 'name', ',', 'last', 'name', 'and', 'id', 'of', 'the', 'player', ',', 'as', 'well', 'as', 'the', 'number', 'of', 'times', 'the', 'player', 'participated', 'in', 'all', 'star', 'game', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[SEP]']
Target 0: b'SELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from UNK_TABLE join all_star on UNK_FIELD = all_star.player_id group by UNK_FIELD select UNK_FIELD , UNK_FIELD , UNK_FIELD , count (*) order by count (*) desc limit 1

--------------------
text:  Which player has the most all star game experiences? Give me the first name, last name and id of the player, as well as the number of times the player participated in all star game.
sql:  SELECT T1.name_first , T1.name_last ,  T1.player_id ,   count(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(435, ('hall_of_fame.category', 'Player'))])
--------------------
Picklist: How many players enter hall of fame each year?, hall_of_fame, category, [Player]
Picklist: How many players enter hall of fame each year?, player, name_last, [Hall]
--------------------
text:  How many players enter hall of fame each year?
sql:  SELECT yearid ,  count(*) FROM hall_of_fame GROUP BY yearid
ground truth values:  []
matched values OrderedDict([(435, ('hall_of_fame.category', 'Player')), (571, ('player.name_last', 'Hall'))])
--------------------
Picklist: Count the number of players who enter hall of fame for each year., hall_of_fame, category, [Player]
Picklist: Count the number of players who enter hall of fame for each year., player, name_first, [Count]
Picklist: Count the number of players who enter hall of fame for each year., player, name_last, [Hall]
--------------------
text:  Count the number of players who enter hall of fame for each year.
sql:  SELECT yearid ,  count(*) FROM hall_of_fame GROUP BY yearid
ground truth values:  []
matched values OrderedDict([(435, ('hall_of_fame.category', 'Player')), (568, ('player.name_first', 'Count')), (573, ('player.name_last', 'Hall'))])
--------------------
Picklist: What is the average number of attendance at home games for each year?, player, birth_city, [Homer]
Picklist: What is the average number of attendance at home games for each year?, player, death_city, [Homer]
 41%|████      | 3640/8943 [07:14<7:28:10,  5.07s/it] 41%|████      | 3641/8943 [07:19<7:31:04,  5.10s/it]--------------------
text:  What is the average number of attendance at home games for each year?
sql:  SELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR
ground truth values:  []
matched values OrderedDict([(545, ('player.birth_city', 'Homer')), (565, ('player.death_city', 'Homer'))])
--------------------
Picklist: For each year, return the year and the average number of attendance at home games., player, birth_city, [Homer]
Picklist: For each year, return the year and the average number of attendance at home games., player, death_city, [Homer]
--------------------
text:  For each year, return the year and the average number of attendance at home games.
sql:  SELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR
ground truth values:  []
matched values OrderedDict([(545, ('player.birth_city', 'Homer')), (565, ('player.death_city', 'Homer'))])
--------------------
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'In 2014, what are the id and rank of the team that has the largest average number of attendance?'
NL tokens: [b'in', b'2014', b',', b'what', b'are', b'the', b'id', b'and', b'rank', b'of', b'the', b'team', b'that', b'has', b'the', b'largest', b'average', b'number', b'of', b'attendance', b'?']
NL tokens (original): [b'In', b'2014', b',', b'what', b'are', b'the', b'id', b'and', b'rank', b'of', b'the', b'team', b'that', b'has', b'the', b'largest', b'average', b'number', b'of', b'attendance', b'?']
['[CLS]', 'in', '2014', ',', 'what', 'are', 'the', 'id', 'and', 'rank', 'of', 'the', 'team', 'that', 'has', 'the', 'largest', 'average', 'number', 'of', 'attendance', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[SEP]']
Target 0: b'SELECT T2.team_id ,  T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id WHERE T1.year  =  2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1'
Target TF-P tokens: from home_game join UNK_TABLE on home_game.team_id = UNK_FIELD where home_game.year = 2014 group by home_game.team_id select UNK_FIELD , UNK_FIELD order by avg (home_game.attendance) desc limit 1

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3642/8943 [07:25<7:47:39,  5.29s/it]
NL: b'In 2014, what are the id and rank of the team that has the largest average number of attendance?'
NL tokens: [b'in', b'2014', b',', b'what', b'are', b'the', b'id', b'and', b'rank', b'of', b'the', b'team', b'that', b'has', b'the', b'largest', b'average', b'number', b'of', b'attendance', b'?']
NL tokens (original): [b'In', b'2014', b',', b'what', b'are', b'the', b'id', b'and', b'rank', b'of', b'the', b'team', b'that', b'has', b'the', b'largest', b'average', b'number', b'of', b'attendance', b'?']
['[CLS]', 'in', '2014', ',', 'what', 'are', 'the', 'id', 'and', 'rank', 'of', 'the', 'team', 'that', 'has', 'the', 'largest', 'average', 'number', 'of', 'attendance', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[SEP]']
Target 0: b'SELECT T2.team_id ,  T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id WHERE T1.year  =  2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1'
Target TF-P tokens: from home_game join UNK_TABLE on home_game.team_id = UNK_FIELD where home_game.year = 2014 group by home_game.team_id select UNK_FIELD , UNK_FIELD order by avg (home_game.attendance) desc limit 1

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'Find the id and rank of the team that has the highest average attendance rate in 2014.'
NL tokens: [b'find', b'the', b'id', b'and', b'rank', b'of', b'the', b'team', b'that', b'has', b'the', b'highest', b'average', b'attendance', b'rate', b'in', b'2014', b'.']
NL tokens (original): [b'Find', b'the', b'id', b'and', b'rank', b'of', b'the', b'team', b'that', b'has', b'the', b'highest', b'average', b'attendance', b'rate', b'in', b'2014', b'.']
['[CLS]', 'find', 'the', 'id', 'and', 'rank', 'of', 'the', 'team', 'that', 'has', 'the', 'highest', 'average', 'attendance', 'rate', 'in', '2014', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', '[SEP]']
Target 0: b'SELECT T2.team_id ,  T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id WHERE T1.year  =  2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1'
Target TF-P tokens: from home_game join UNK_TABLE on home_game.team_id = UNK_FIELD where home_game.year = 2014 group by home_game.team_id select UNK_FIELD , UNK_FIELD order by avg (home_game.attendance) desc limit 1

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3643/8943 [07:30<7:50:33,  5.33s/it]
NL: b'Find the id and rank of the team that has the highest average attendance rate in 2014.'
NL tokens: [b'find', b'the', b'id', b'and', b'rank', b'of', b'the', b'team', b'that', b'has', b'the', b'highest', b'average', b'attendance', b'rate', b'in', b'2014', b'.']
NL tokens (original): [b'Find', b'the', b'id', b'and', b'rank', b'of', b'the', b'team', b'that', b'has', b'the', b'highest', b'average', b'attendance', b'rate', b'in', b'2014', b'.']
['[CLS]', 'find', 'the', 'id', 'and', 'rank', 'of', 'the', 'team', 'that', 'has', 'the', 'highest', 'average', 'attendance', 'rate', 'in', '2014', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', '[SEP]']
Target 0: b'SELECT T2.team_id ,  T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id WHERE T1.year  =  2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1'
Target TF-P tokens: from home_game join UNK_TABLE on home_game.team_id = UNK_FIELD where home_game.year = 2014 group by home_game.team_id select UNK_FIELD , UNK_FIELD order by avg (home_game.attendance) desc limit 1

Picklist: What are the manager's first name, last name and id who won the most manager award?, hall_of_fame, category, [Manager]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b"What are the manager's first name, last name and id who won the most manager award?"
NL tokens: [b'what', b'are', b'the', b'manager', b"'", b's', b'first', b'name', b',', b'last', b'name', b'and', b'id', b'who', b'won', b'the', b'most', b'manager', b'award', b'?']
NL tokens (original): [b'What', b'are', b'the', b'manager', b"'", b's', b'first', b'name', b',', b'last', b'name', b'and', b'id', b'who', b'won', b'the', b'most', b'manager', b'award', b'?']
['[CLS]', 'what', 'are', 'the', 'manager', "'", 's', 'first', 'name', ',', 'last', 'name', 'and', 'id', 'who', 'won', 'the', 'most', 'manager', 'award', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'manager', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[SEP]']
Target 0: b'SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from UNK_TABLE join manager_award on UNK_FIELD = manager_award.player_id group by manager_award.player_id select UNK_FIELD , UNK_FIELD , manager_award.player_id order by count (*) desc limit 1

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3644/8943 [07:36<7:47:34,  5.29s/it]
NL: b"What are the manager's first name, last name and id who won the most manager award?"
NL tokens: [b'what', b'are', b'the', b'manager', b"'", b's', b'first', b'name', b',', b'last', b'name', b'and', b'id', b'who', b'won', b'the', b'most', b'manager', b'award', b'?']
NL tokens (original): [b'What', b'are', b'the', b'manager', b"'", b's', b'first', b'name', b',', b'last', b'name', b'and', b'id', b'who', b'won', b'the', b'most', b'manager', b'award', b'?']
['[CLS]', 'what', 'are', 'the', 'manager', "'", 's', 'first', 'name', ',', 'last', 'name', 'and', 'id', 'who', 'won', 'the', 'most', 'manager', 'award', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'manager', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[SEP]']
Target 0: b'SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from UNK_TABLE join manager_award on UNK_FIELD = manager_award.player_id group by manager_award.player_id select UNK_FIELD , UNK_FIELD , manager_award.player_id order by count (*) desc limit 1

--------------------
text:  What are the manager's first name, last name and id who won the most manager award?
sql:  SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(435, ('hall_of_fame.category', 'Manager'))])
--------------------
Picklist: Which manager won the most manager award? Give me the manager's first name, last name and id., hall_of_fame, category, [Manager]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b"Which manager won the most manager award? Give me the manager's first name, last name and id."
NL tokens: [b'which', b'manager', b'won', b'the', b'most', b'manager', b'award', b'?', b'give', b'me', b'the', b'manager', b"'", b's', b'first', b'name', b',', b'last', b'name', b'and', b'id', b'.']
NL tokens (original): [b'Which', b'manager', b'won', b'the', b'most', b'manager', b'award', b'?', b'Give', b'me', b'the', b'manager', b"'", b's', b'first', b'name', b',', b'last', b'name', b'and', b'id', b'.']
['[CLS]', 'which', 'manager', 'won', 'the', 'most', 'manager', 'award', '?', 'give', 'me', 'the', 'manager', "'", 's', 'first', 'name', ',', 'last', 'name', 'and', 'id', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'manager', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[SEP]']
Target 0: b'SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from UNK_TABLE join manager_award on UNK_FIELD = manager_award.player_id group by manager_award.player_id select UNK_FIELD , UNK_FIELD , manager_award.player_id order by count (*) desc limit 1

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3645/8943 [07:41<7:54:09,  5.37s/it]
NL: b"Which manager won the most manager award? Give me the manager's first name, last name and id."
NL tokens: [b'which', b'manager', b'won', b'the', b'most', b'manager', b'award', b'?', b'give', b'me', b'the', b'manager', b"'", b's', b'first', b'name', b',', b'last', b'name', b'and', b'id', b'.']
NL tokens (original): [b'Which', b'manager', b'won', b'the', b'most', b'manager', b'award', b'?', b'Give', b'me', b'the', b'manager', b"'", b's', b'first', b'name', b',', b'last', b'name', b'and', b'id', b'.']
['[CLS]', 'which', 'manager', 'won', 'the', 'most', 'manager', 'award', '?', 'give', 'me', 'the', 'manager', "'", 's', 'first', 'name', ',', 'last', 'name', 'and', 'id', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'manager', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[SEP]']
Target 0: b'SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from UNK_TABLE join manager_award on UNK_FIELD = manager_award.player_id group by manager_award.player_id select UNK_FIELD , UNK_FIELD , manager_award.player_id order by count (*) desc limit 1

--------------------
text:  Which manager won the most manager award? Give me the manager's first name, last name and id.
sql:  SELECT T1.name_first ,  T1.name_last ,  T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(435, ('hall_of_fame.category', 'Manager'))])
--------------------
Picklist: How many parks are there in the state of NY?, player, death_city, [Park]
Picklist: How many parks are there in the state of NY?, player, name_last, [Parks]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'How many parks are there in the state of NY?'
NL tokens: [b'how', b'many', b'parks', b'are', b'there', b'in', b'the', b'state', b'of', b'ny', b'?']
NL tokens (original): [b'How', b'many', b'parks', b'are', b'there', b'in', b'the', b'state', b'of', b'NY', b'?']
['[CLS]', 'how', 'many', 'parks', 'are', 'there', 'in', 'the', 'state', 'of', 'ny', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', 'half', '[unused51]', 'player', '[SEP]']
Target 0: b"SELECT count(*) FROM park WHERE state  =  'NY'"
Target TF-P tokens: from UNK_TABLE where UNK_FIELD = "NY" select count (*)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3646/8943 [07:45<7:07:24,  4.84s/it]
NL: b'How many parks are there in the state of NY?'
NL tokens: [b'how', b'many', b'parks', b'are', b'there', b'in', b'the', b'state', b'of', b'ny', b'?']
NL tokens (original): [b'How', b'many', b'parks', b'are', b'there', b'in', b'the', b'state', b'of', b'NY', b'?']
['[CLS]', 'how', 'many', 'parks', 'are', 'there', 'in', 'the', 'state', 'of', 'ny', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', 'half', '[unused51]', 'player', '[SEP]']
Target 0: b"SELECT count(*) FROM park WHERE state  =  'NY'"
Target TF-P tokens: from UNK_TABLE where UNK_FIELD = "NY" select count (*)

--------------------
text:  How many parks are there in the state of NY?
sql:  SELECT count(*) FROM park WHERE state  =  'NY'
ground truth values:  [('park.state', 'NY')]
matched values OrderedDict([(563, ('player.death_city', 'Park')), (571, ('player.name_last', 'Parks'))])
--------------------
Picklist: Show me the number of parks the state of NY has., player, birth_state, [NY]
Picklist: Show me the number of parks the state of NY has., player, death_state, [NY]
Picklist: Show me the number of parks the state of NY has., player, death_city, [Park]
Picklist: Show me the number of parks the state of NY has., player, name_last, [Parks]
Picklist: Show me the number of parks the state of NY has., player, name_last, [Show]
Picklist: Show me the number of parks the state of NY has., park, state, [NY]
Picklist: Show me the number of parks the state of NY has., college, state, [NY]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'Show me the number of parks the state of NY has.'
NL tokens: [b'show', b'me', b'the', b'number', b'of', b'parks', b'the', b'state', b'of', b'ny', b'has', b'.']
NL tokens (original): [b'Show', b'me', b'the', b'number', b'of', b'parks', b'the', b'state', b'of', b'NY', b'has', b'.']
['[CLS]', 'show', 'me', 'the', 'number', 'of', 'parks', 'the', 'state', 'of', 'ny', 'has', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', 'half', '[SEP]']
Target 0: b"SELECT count(*) FROM park WHERE state  =  'NY'"
Target TF-P tokens: from UNK_TABLE where UNK_FIELD = "NY" select count (*)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3647/8943 [07:48<6:36:45,  4.49s/it]
NL: b'Show me the number of parks the state of NY has.'
NL tokens: [b'show', b'me', b'the', b'number', b'of', b'parks', b'the', b'state', b'of', b'ny', b'has', b'.']
NL tokens (original): [b'Show', b'me', b'the', b'number', b'of', b'parks', b'the', b'state', b'of', b'NY', b'has', b'.']
['[CLS]', 'show', 'me', 'the', 'number', 'of', 'parks', 'the', 'state', 'of', 'ny', 'has', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', 'half', '[SEP]']
Target 0: b"SELECT count(*) FROM park WHERE state  =  'NY'"
Target TF-P tokens: from UNK_TABLE where UNK_FIELD = "NY" select count (*)

--------------------
text:  Show me the number of parks the state of NY has.
sql:  SELECT count(*) FROM park WHERE state  =  'NY'
ground truth values:  [('park.state', 'NY')]
matched values OrderedDict([(542, ('player.birth_state', 'NY')), (562, ('player.death_state', 'NY')), (567, ('player.death_city', 'Park')), (575, ('player.name_last', 'Parks')), (577, ('player.name_last', 'Show')), (618, ('park.state', 'NY')), (802, ('college.state', 'NY'))])
--------------------
Picklist: Which 3 players won the most player awards? List their full name and id., hall_of_fame, category, [Player]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'Which 3 players won the most player awards? List their full name and id.'
NL tokens: [b'which', b'3', b'players', b'won', b'the', b'most', b'player', b'awards', b'?', b'list', b'their', b'full', b'name', b'and', b'id', b'.']
NL tokens (original): [b'Which', b'3', b'players', b'won', b'the', b'most', b'player', b'awards', b'?', b'List', b'their', b'full', b'name', b'and', b'id', b'.']
['[CLS]', 'which', '3', 'players', 'won', 'the', 'most', 'player', 'awards', '?', 'list', 'their', 'full', 'name', 'and', 'id', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', '[SEP]']
Target 0: b'SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3'
Target TF-P tokens: from UNK_TABLE join player_award on UNK_FIELD = player_award.player_id group by UNK_FIELD select UNK_FIELD , UNK_FIELD , UNK_FIELD order by count (*) desc limit 3

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3648/8943 [07:53<6:41:42,  4.55s/it]
NL: b'Which 3 players won the most player awards? List their full name and id.'
NL tokens: [b'which', b'3', b'players', b'won', b'the', b'most', b'player', b'awards', b'?', b'list', b'their', b'full', b'name', b'and', b'id', b'.']
NL tokens (original): [b'Which', b'3', b'players', b'won', b'the', b'most', b'player', b'awards', b'?', b'List', b'their', b'full', b'name', b'and', b'id', b'.']
['[CLS]', 'which', '3', 'players', 'won', 'the', 'most', 'player', 'awards', '?', 'list', 'their', 'full', 'name', 'and', 'id', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', '[SEP]']
Target 0: b'SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3'
Target TF-P tokens: from UNK_TABLE join player_award on UNK_FIELD = player_award.player_id group by UNK_FIELD select UNK_FIELD , UNK_FIELD , UNK_FIELD order by count (*) desc limit 3

--------------------
text:  Which 3 players won the most player awards? List their full name and id.
sql:  SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3
ground truth values:  []
matched values OrderedDict([(435, ('hall_of_fame.category', 'Player'))])
--------------------
Picklist: Find the first name, last name and id for the top three players won the most player awards., hall_of_fame, category, [Player]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'Find the first name, last name and id for the top three players won the most player awards.'
NL tokens: [b'find', b'the', b'first', b'name', b',', b'last', b'name', b'and', b'id', b'for', b'the', b'top', b'three', b'players', b'won', b'the', b'most', b'player', b'awards', b'.']
NL tokens (original): [b'Find', b'the', b'first', b'name', b',', b'last', b'name', b'and', b'id', b'for', b'the', b'top', b'three', b'players', b'won', b'the', b'most', b'player', b'awards', b'.']
['[CLS]', 'find', 'the', 'first', 'name', ',', 'last', 'name', 'and', 'id', 'for', 'the', 'top', 'three', 'players', 'won', 'the', 'most', 'player', 'awards', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[SEP]']
Target 0: b'SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3'
Target TF-P tokens: from UNK_TABLE join player_award on UNK_FIELD = player_award.player_id group by UNK_FIELD select UNK_FIELD , UNK_FIELD , UNK_FIELD order by count (*) desc limit 3

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3649/8943 [07:59<7:09:53,  4.87s/it]
NL: b'Find the first name, last name and id for the top three players won the most player awards.'
NL tokens: [b'find', b'the', b'first', b'name', b',', b'last', b'name', b'and', b'id', b'for', b'the', b'top', b'three', b'players', b'won', b'the', b'most', b'player', b'awards', b'.']
NL tokens (original): [b'Find', b'the', b'first', b'name', b',', b'last', b'name', b'and', b'id', b'for', b'the', b'top', b'three', b'players', b'won', b'the', b'most', b'player', b'awards', b'.']
['[CLS]', 'find', 'the', 'first', 'name', ',', 'last', 'name', 'and', 'id', 'for', 'the', 'top', 'three', 'players', 'won', 'the', 'most', 'player', 'awards', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[SEP]']
Target 0: b'SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3'
Target TF-P tokens: from UNK_TABLE join player_award on UNK_FIELD = player_award.player_id group by UNK_FIELD select UNK_FIELD , UNK_FIELD , UNK_FIELD order by count (*) desc limit 3

--------------------
text:  Find the first name, last name and id for the top three players won the most player awards.
sql:  SELECT T1.name_first ,  T1.name_last ,  T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.player_id ORDER BY count(*) DESC LIMIT 3
ground truth values:  []
matched values OrderedDict([(435, ('hall_of_fame.category', 'Player'))])
--------------------
Picklist: List three countries which are the origins of the least players., hall_of_fame, category, [Player]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'List three countries which are the origins of the least players.'
NL tokens: [b'list', b'three', b'countries', b'which', b'are', b'the', b'origins', b'of', b'the', b'least', b'players', b'.']
NL tokens (original): [b'List', b'three', b'countries', b'which', b'are', b'the', b'origins', b'of', b'the', b'least', b'players', b'.']
['[CLS]', 'list', 'three', 'countries', 'which', 'are', 'the', 'origins', 'of', 'the', 'least', 'players', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', '[SEP]']
Target 0: b'SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3'
Target TF-P tokens: from UNK_TABLE group by UNK_FIELD select UNK_FIELD order by count (*) asc limit 3

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3650/8943 [08:03<6:58:25,  4.74s/it]
NL: b'List three countries which are the origins of the least players.'
NL tokens: [b'list', b'three', b'countries', b'which', b'are', b'the', b'origins', b'of', b'the', b'least', b'players', b'.']
NL tokens (original): [b'List', b'three', b'countries', b'which', b'are', b'the', b'origins', b'of', b'the', b'least', b'players', b'.']
['[CLS]', 'list', 'three', 'countries', 'which', 'are', 'the', 'origins', 'of', 'the', 'least', 'players', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', '[SEP]']
Target 0: b'SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3'
Target TF-P tokens: from UNK_TABLE group by UNK_FIELD select UNK_FIELD order by count (*) asc limit 3

--------------------
text:  List three countries which are the origins of the least players.
sql:  SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3
ground truth values:  []
matched values OrderedDict([(435, ('hall_of_fame.category', 'Player'))])
--------------------
Picklist: What are the three countries that the least players are from?, hall_of_fame, category, [Player]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'What are the three countries that the least players are from?'
NL tokens: [b'what', b'are', b'the', b'three', b'countries', b'that', b'the', b'least', b'players', b'are', b'from', b'?']
NL tokens (original): [b'What', b'are', b'the', b'three', b'countries', b'that', b'the', b'least', b'players', b'are', b'from', b'?']
['[CLS]', 'what', 'are', 'the', 'three', 'countries', 'that', 'the', 'least', 'players', 'are', 'from', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', '[SEP]']
Target 0: b'SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3'
Target TF-P tokens: from UNK_TABLE group by UNK_FIELD select UNK_FIELD order by count (*) asc limit 3

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3651/8943 [08:07<6:46:29,  4.61s/it]
NL: b'What are the three countries that the least players are from?'
NL tokens: [b'what', b'are', b'the', b'three', b'countries', b'that', b'the', b'least', b'players', b'are', b'from', b'?']
NL tokens (original): [b'What', b'are', b'the', b'three', b'countries', b'that', b'the', b'least', b'players', b'are', b'from', b'?']
['[CLS]', 'what', 'are', 'the', 'three', 'countries', 'that', 'the', 'least', 'players', 'are', 'from', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', '[SEP]']
Target 0: b'SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3'
Target TF-P tokens: from UNK_TABLE group by UNK_FIELD select UNK_FIELD order by count (*) asc limit 3

--------------------
text:  What are the three countries that the least players are from?
sql:  SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3
ground truth values:  []
matched values OrderedDict([(435, ('hall_of_fame.category', 'Player'))])
--------------------
Picklist: Find all the players' first name and last name who have empty death record., hall_of_fame, category, [Player]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b"Find all the players' first name and last name who have empty death record."
NL tokens: [b'find', b'all', b'the', b'players', b"'", b'first', b'name', b'and', b'last', b'name', b'who', b'have', b'empty', b'death', b'record', b'.']
NL tokens (original): [b'Find', b'all', b'the', b'players', b"'", b'first', b'name', b'and', b'last', b'name', b'who', b'have', b'empty', b'death', b'record', b'.']
['[CLS]', 'find', 'all', 'the', 'players', "'", 'first', 'name', 'and', 'last', 'name', 'who', 'have', 'empty', 'death', 'record', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', '[SEP]']
Target 0: b"SELECT name_first ,  name_last FROM player WHERE death_year = ''"
Target TF-P tokens: from UNK_TABLE where UNK_FIELD = "" select UNK_FIELD , UNK_FIELD

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3652/8943 [08:12<6:55:10,  4.71s/it]
NL: b"Find all the players' first name and last name who have empty death record."
NL tokens: [b'find', b'all', b'the', b'players', b"'", b'first', b'name', b'and', b'last', b'name', b'who', b'have', b'empty', b'death', b'record', b'.']
NL tokens (original): [b'Find', b'all', b'the', b'players', b"'", b'first', b'name', b'and', b'last', b'name', b'who', b'have', b'empty', b'death', b'record', b'.']
['[CLS]', 'find', 'all', 'the', 'players', "'", 'first', 'name', 'and', 'last', 'name', 'who', 'have', 'empty', 'death', 'record', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', '[SEP]']
Target 0: b"SELECT name_first ,  name_last FROM player WHERE death_year = ''"
Target TF-P tokens: from UNK_TABLE where UNK_FIELD = "" select UNK_FIELD , UNK_FIELD

--------------------
text:  Find all the players' first name and last name who have empty death record.
sql:  SELECT name_first ,  name_last FROM player WHERE death_year = ''
ground truth values:  [('player.death_year', '')]
matched values OrderedDict([(435, ('hall_of_fame.category', 'Player'))])
--------------------
Picklist: What are the first name and last name of the players whose death record is empty?, hall_of_fame, category, [Player]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'What are the first name and last name of the players whose death record is empty?'
NL tokens: [b'what', b'are', b'the', b'first', b'name', b'and', b'last', b'name', b'of', b'the', b'players', b'whose', b'death', b'record', b'is', b'empty', b'?']
NL tokens (original): [b'What', b'are', b'the', b'first', b'name', b'and', b'last', b'name', b'of', b'the', b'players', b'whose', b'death', b'record', b'is', b'empty', b'?']
['[CLS]', 'what', 'are', 'the', 'first', 'name', 'and', 'last', 'name', 'of', 'the', 'players', 'whose', 'death', 'record', 'is', 'empty', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '[SEP]']
Target 0: b"SELECT name_first ,  name_last FROM player WHERE death_year = ''"
Target TF-P tokens: from UNK_TABLE where UNK_FIELD = "" select UNK_FIELD , UNK_FIELD

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3653/8943 [08:18<7:08:08,  4.86s/it]
NL: b'What are the first name and last name of the players whose death record is empty?'
NL tokens: [b'what', b'are', b'the', b'first', b'name', b'and', b'last', b'name', b'of', b'the', b'players', b'whose', b'death', b'record', b'is', b'empty', b'?']
NL tokens (original): [b'What', b'are', b'the', b'first', b'name', b'and', b'last', b'name', b'of', b'the', b'players', b'whose', b'death', b'record', b'is', b'empty', b'?']
['[CLS]', 'what', 'are', 'the', 'first', 'name', 'and', 'last', 'name', 'of', 'the', 'players', 'whose', 'death', 'record', 'is', 'empty', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '[SEP]']
Target 0: b"SELECT name_first ,  name_last FROM player WHERE death_year = ''"
Target TF-P tokens: from UNK_TABLE where UNK_FIELD = "" select UNK_FIELD , UNK_FIELD

--------------------
text:  What are the first name and last name of the players whose death record is empty?
sql:  SELECT name_first ,  name_last FROM player WHERE death_year = ''
ground truth values:  [('player.death_year', '')]
matched values OrderedDict([(435, ('hall_of_fame.category', 'Player'))])
--------------------
Picklist: How many players born in USA are right-handed batters? That is, have the batter value 'R'., hall_of_fame, category, [Player]
Picklist: How many players born in USA are right-handed batters? That is, have the batter value 'R'., player, birth_country, [USA]
Picklist: How many players born in USA are right-handed batters? That is, have the batter value 'R'., player, death_country, [USA]
Picklist: How many players born in USA are right-handed batters? That is, have the batter value 'R'., college, country, [USA]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b"How many players born in USA are right-handed batters? That is, have the batter value 'R'."
NL tokens: [b'how', b'many', b'players', b'born', b'in', b'usa', b'are', b'right', b'-', b'handed', b'batter', b'##s', b'?', b'that', b'is', b',', b'have', b'the', b'batter', b'value', b"'", b'r', b"'", b'.']
NL tokens (original): [b'How', b'many', b'players', b'born', b'in', b'USA', b'are', b'right', b'-', b'handed', b'batter', b'##s', b'?', b'That', b'is', b',', b'have', b'the', b'batter', b'value', b"'", b'R', b"'", b'.']
['[CLS]', 'how', 'many', 'players', 'born', 'in', 'usa', 'are', 'right', '-', 'handed', 'batter', '##s', '?', 'that', 'is', ',', 'have', 'the', 'batter', 'value', "'", 'r', "'", '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[SEP]']
Target 0: b"SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats  =  'R'"
Target TF-P tokens: from UNK_TABLE where UNK_FIELD = "USA" and UNK_FIELD = "R" select count (*)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3654/8943 [08:23<7:28:43,  5.09s/it]
NL: b"How many players born in USA are right-handed batters? That is, have the batter value 'R'."
NL tokens: [b'how', b'many', b'players', b'born', b'in', b'usa', b'are', b'right', b'-', b'handed', b'batter', b'##s', b'?', b'that', b'is', b',', b'have', b'the', b'batter', b'value', b"'", b'r', b"'", b'.']
NL tokens (original): [b'How', b'many', b'players', b'born', b'in', b'USA', b'are', b'right', b'-', b'handed', b'batter', b'##s', b'?', b'That', b'is', b',', b'have', b'the', b'batter', b'value', b"'", b'R', b"'", b'.']
['[CLS]', 'how', 'many', 'players', 'born', 'in', 'usa', 'are', 'right', '-', 'handed', 'batter', '##s', '?', 'that', 'is', ',', 'have', 'the', 'batter', 'value', "'", 'r', "'", '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[SEP]']
Target 0: b"SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats  =  'R'"
Target TF-P tokens: from UNK_TABLE where UNK_FIELD = "USA" and UNK_FIELD = "R" select count (*)

--------------------
text:  How many players born in USA are right-handed batters? That is, have the batter value 'R'.
sql:  SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats  =  'R'
ground truth values:  [('player.birth_country', 'USA')]
matched values OrderedDict([(435, ('hall_of_fame.category', 'Player')), (541, ('player.birth_country', 'USA')), (561, ('player.death_country', 'USA')), (798, ('college.country', 'USA'))])
--------------------
Picklist: Count the number of players who were born in USA and have bats information 'R'., hall_of_fame, category, [Player]
Picklist: Count the number of players who were born in USA and have bats information 'R'., player, birth_country, [USA]
Picklist: Count the number of players who were born in USA and have bats information 'R'., player, death_country, [USA]
Picklist: Count the number of players who were born in USA and have bats information 'R'., player, name_first, [Count]
Picklist: Count the number of players who were born in USA and have bats information 'R'., college, country, [USA]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b"Count the number of players who were born in USA and have bats information 'R'."
NL tokens: [b'count', b'the', b'number', b'of', b'players', b'who', b'were', b'born', b'in', b'usa', b'and', b'have', b'bats', b'information', b"'", b'r', b"'", b'.']
NL tokens (original): [b'Count', b'the', b'number', b'of', b'players', b'who', b'were', b'born', b'in', b'USA', b'and', b'have', b'bats', b'information', b"'", b'R', b"'", b'.']
['[CLS]', 'count', 'the', 'number', 'of', 'players', 'who', 'were', 'born', 'in', 'usa', 'and', 'have', 'bats', 'information', "'", 'r', "'", '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[SEP]']
Target 0: b"SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats  =  'R'"
Target TF-P tokens: from UNK_TABLE where UNK_FIELD = "USA" and UNK_FIELD = "R" select count (*)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3655/8943 [08:28<7:30:10,  5.11s/it]
NL: b"Count the number of players who were born in USA and have bats information 'R'."
NL tokens: [b'count', b'the', b'number', b'of', b'players', b'who', b'were', b'born', b'in', b'usa', b'and', b'have', b'bats', b'information', b"'", b'r', b"'", b'.']
NL tokens (original): [b'Count', b'the', b'number', b'of', b'players', b'who', b'were', b'born', b'in', b'USA', b'and', b'have', b'bats', b'information', b"'", b'R', b"'", b'.']
['[CLS]', 'count', 'the', 'number', 'of', 'players', 'who', 'were', 'born', 'in', 'usa', 'and', 'have', 'bats', 'information', "'", 'r', "'", '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[SEP]']
Target 0: b"SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats  =  'R'"
Target TF-P tokens: from UNK_TABLE where UNK_FIELD = "USA" and UNK_FIELD = "R" select count (*)

--------------------
text:  Count the number of players who were born in USA and have bats information 'R'.
sql:  SELECT count(*) FROM player WHERE birth_country = 'USA' AND bats  =  'R'
ground truth values:  [('player.birth_country', 'USA')]
matched values OrderedDict([(435, ('hall_of_fame.category', 'Player')), (541, ('player.birth_country', 'USA')), (561, ('player.death_country', 'USA')), (572, ('player.name_first', 'Count')), (800, ('college.country', 'USA'))])
--------------------
Picklist: What is the average height of the players from the college named 'Yale University'?, player_college, college_id, [yale]
Picklist: What is the average height of the players from the college named 'Yale University'?, hall_of_fame, category, [Player]
Picklist: What is the average height of the players from the college named 'Yale University'?, player, name_first, [Yale]
Picklist: What is the average height of the players from the college named 'Yale University'?, player, name_last, [Yale]
Picklist: What is the average height of the players from the college named 'Yale University'?, college, college_id, [yale]
Picklist: What is the average height of the players from the college named 'Yale University'?, college, name_full, [Yale University]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b"What is the average height of the players from the college named 'Yale University'?"
NL tokens: [b'what', b'is', b'the', b'average', b'height', b'of', b'the', b'players', b'from', b'the', b'college', b'named', b"'", b'yale', b'university', b"'", b'?']
NL tokens (original): [b'What', b'is', b'the', b'average', b'height', b'of', b'the', b'players', b'from', b'the', b'college', b'named', b"'", b'Yale', b'University', b"'", b'?']
['[CLS]', 'what', 'is', 'the', 'average', 'height', 'of', 'the', 'players', 'from', 'the', 'college', 'named', "'", 'yale', 'university', "'", '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused49]', 'yale', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[SEP]']
Target 0: b"SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University'"
Target TF-P tokens: from UNK_TABLE join player_college on UNK_FIELD = player_college.player_id join UNK_TABLE on UNK_FIELD = player_college.college_id where UNK_FIELD = "Yale University" select avg (UNK_FIELD)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3656/8943 [08:33<7:31:01,  5.12s/it]
NL: b"What is the average height of the players from the college named 'Yale University'?"
NL tokens: [b'what', b'is', b'the', b'average', b'height', b'of', b'the', b'players', b'from', b'the', b'college', b'named', b"'", b'yale', b'university', b"'", b'?']
NL tokens (original): [b'What', b'is', b'the', b'average', b'height', b'of', b'the', b'players', b'from', b'the', b'college', b'named', b"'", b'Yale', b'University', b"'", b'?']
['[CLS]', 'what', 'is', 'the', 'average', 'height', 'of', 'the', 'players', 'from', 'the', 'college', 'named', "'", 'yale', 'university', "'", '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused49]', 'yale', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[SEP]']
Target 0: b"SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University'"
Target TF-P tokens: from UNK_TABLE join player_college on UNK_FIELD = player_college.player_id join UNK_TABLE on UNK_FIELD = player_college.college_id where UNK_FIELD = "Yale University" select avg (UNK_FIELD)

--------------------
text:  What is the average height of the players from the college named 'Yale University'?
sql:  SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University'
ground truth values:  [('college.name_full', 'Yale University')]
matched values OrderedDict([(297, ('player_college.college_id', 'yale')), (437, ('hall_of_fame.category', 'Player')), (570, ('player.name_first', 'Yale')), (575, ('player.name_last', 'Yale')), (791, ('college.college_id', 'yale')), (796, ('college.name_full', 'Yale University'))])
--------------------
Picklist: Find the average height of the players who belong to the college called 'Yale University'., player_college, college_id, [yale]
Picklist: Find the average height of the players who belong to the college called 'Yale University'., hall_of_fame, category, [Player]
Picklist: Find the average height of the players who belong to the college called 'Yale University'., player, name_first, [Yale]
Picklist: Find the average height of the players who belong to the college called 'Yale University'., player, name_last, [Yale]
Picklist: Find the average height of the players who belong to the college called 'Yale University'., college, college_id, [yale]
Picklist: Find the average height of the players who belong to the college called 'Yale University'., college, name_full, [Yale University]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b"Find the average height of the players who belong to the college called 'Yale University'."
NL tokens: [b'find', b'the', b'average', b'height', b'of', b'the', b'players', b'who', b'belong', b'to', b'the', b'college', b'called', b"'", b'yale', b'university', b"'", b'.']
NL tokens (original): [b'Find', b'the', b'average', b'height', b'of', b'the', b'players', b'who', b'belong', b'to', b'the', b'college', b'called', b"'", b'Yale', b'University', b"'", b'.']
['[CLS]', 'find', 'the', 'average', 'height', 'of', 'the', 'players', 'who', 'belong', 'to', 'the', 'college', 'called', "'", 'yale', 'university', "'", '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused49]', 'yale', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[SEP]']
Target 0: b"SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University'"
Target TF-P tokens: from UNK_TABLE join player_college on UNK_FIELD = player_college.player_id join UNK_TABLE on UNK_FIELD = player_college.college_id where UNK_FIELD = "Yale University" select avg (UNK_FIELD)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3657/8943 [08:39<7:39:13,  5.21s/it]
NL: b"Find the average height of the players who belong to the college called 'Yale University'."
NL tokens: [b'find', b'the', b'average', b'height', b'of', b'the', b'players', b'who', b'belong', b'to', b'the', b'college', b'called', b"'", b'yale', b'university', b"'", b'.']
NL tokens (original): [b'Find', b'the', b'average', b'height', b'of', b'the', b'players', b'who', b'belong', b'to', b'the', b'college', b'called', b"'", b'Yale', b'University', b"'", b'.']
['[CLS]', 'find', 'the', 'average', 'height', 'of', 'the', 'players', 'who', 'belong', 'to', 'the', 'college', 'called', "'", 'yale', 'university', "'", '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused49]', 'yale', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[SEP]']
Target 0: b"SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University'"
Target TF-P tokens: from UNK_TABLE join player_college on UNK_FIELD = player_college.player_id join UNK_TABLE on UNK_FIELD = player_college.college_id where UNK_FIELD = "Yale University" select avg (UNK_FIELD)

--------------------
text:  Find the average height of the players who belong to the college called 'Yale University'.
sql:  SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University'
ground truth values:  [('college.name_full', 'Yale University')]
matched values OrderedDict([(297, ('player_college.college_id', 'yale')), (437, ('hall_of_fame.category', 'Player')), (570, ('player.name_first', 'Yale')), (575, ('player.name_last', 'Yale')), (791, ('college.college_id', 'yale')), (796, ('college.name_full', 'Yale University'))])
--------------------
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'What is the highest salary among each team? List the team name, id and maximum salary.'
NL tokens: [b'what', b'is', b'the', b'highest', b'salary', b'among', b'each', b'team', b'?', b'list', b'the', b'team', b'name', b',', b'id', b'and', b'maximum', b'salary', b'.']
NL tokens (original): [b'What', b'is', b'the', b'highest', b'salary', b'among', b'each', b'team', b'?', b'List', b'the', b'team', b'name', b',', b'id', b'and', b'maximum', b'salary', b'.']
['[CLS]', 'what', 'is', 'the', 'highest', 'salary', 'among', 'each', 'team', '?', 'list', 'the', 'team', 'name', ',', 'id', 'and', 'maximum', 'salary', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '[SEP]']
Target 0: b'SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id'
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD group by UNK_FIELD select UNK_FIELD , UNK_FIELD , max (UNK_FIELD)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3658/8943 [08:44<7:43:37,  5.26s/it]
NL: b'What is the highest salary among each team? List the team name, id and maximum salary.'
NL tokens: [b'what', b'is', b'the', b'highest', b'salary', b'among', b'each', b'team', b'?', b'list', b'the', b'team', b'name', b',', b'id', b'and', b'maximum', b'salary', b'.']
NL tokens (original): [b'What', b'is', b'the', b'highest', b'salary', b'among', b'each', b'team', b'?', b'List', b'the', b'team', b'name', b',', b'id', b'and', b'maximum', b'salary', b'.']
['[CLS]', 'what', 'is', 'the', 'highest', 'salary', 'among', 'each', 'team', '?', 'list', 'the', 'team', 'name', ',', 'id', 'and', 'maximum', 'salary', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '[SEP]']
Target 0: b'SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id'
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD group by UNK_FIELD select UNK_FIELD , UNK_FIELD , max (UNK_FIELD)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'For each team, return the team name, id and the maximum salary among the team.'
NL tokens: [b'for', b'each', b'team', b',', b'return', b'the', b'team', b'name', b',', b'id', b'and', b'the', b'maximum', b'salary', b'among', b'the', b'team', b'.']
NL tokens (original): [b'For', b'each', b'team', b',', b'return', b'the', b'team', b'name', b',', b'id', b'and', b'the', b'maximum', b'salary', b'among', b'the', b'team', b'.']
['[CLS]', 'for', 'each', 'team', ',', 'return', 'the', 'team', 'name', ',', 'id', 'and', 'the', 'maximum', 'salary', 'among', 'the', 'team', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', '[SEP]']
Target 0: b'SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id'
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD group by UNK_FIELD select UNK_FIELD , UNK_FIELD , max (UNK_FIELD)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3659/8943 [08:49<7:39:10,  5.21s/it]
NL: b'For each team, return the team name, id and the maximum salary among the team.'
NL tokens: [b'for', b'each', b'team', b',', b'return', b'the', b'team', b'name', b',', b'id', b'and', b'the', b'maximum', b'salary', b'among', b'the', b'team', b'.']
NL tokens (original): [b'For', b'each', b'team', b',', b'return', b'the', b'team', b'name', b',', b'id', b'and', b'the', b'maximum', b'salary', b'among', b'the', b'team', b'.']
['[CLS]', 'for', 'each', 'team', ',', 'return', 'the', 'team', 'name', ',', 'id', 'and', 'the', 'maximum', 'salary', 'among', 'the', 'team', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', '[SEP]']
Target 0: b'SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id'
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD group by UNK_FIELD select UNK_FIELD , UNK_FIELD , max (UNK_FIELD)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'What are the name and id of the team offering the lowest average salary?'
NL tokens: [b'what', b'are', b'the', b'name', b'and', b'id', b'of', b'the', b'team', b'offering', b'the', b'lowest', b'average', b'salary', b'?']
NL tokens (original): [b'What', b'are', b'the', b'name', b'and', b'id', b'of', b'the', b'team', b'offering', b'the', b'lowest', b'average', b'salary', b'?']
['[CLS]', 'what', 'are', 'the', 'name', 'and', 'id', 'of', 'the', 'team', 'offering', 'the', 'lowest', 'average', 'salary', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[SEP]']
Target 0: b'SELECT T1.name ,  T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1'
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD group by UNK_FIELD select UNK_FIELD , UNK_FIELD order by avg (UNK_FIELD) asc limit 1

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3660/8943 [08:54<7:30:33,  5.12s/it]
NL: b'What are the name and id of the team offering the lowest average salary?'
NL tokens: [b'what', b'are', b'the', b'name', b'and', b'id', b'of', b'the', b'team', b'offering', b'the', b'lowest', b'average', b'salary', b'?']
NL tokens (original): [b'What', b'are', b'the', b'name', b'and', b'id', b'of', b'the', b'team', b'offering', b'the', b'lowest', b'average', b'salary', b'?']
['[CLS]', 'what', 'are', 'the', 'name', 'and', 'id', 'of', 'the', 'team', 'offering', 'the', 'lowest', 'average', 'salary', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[SEP]']
Target 0: b'SELECT T1.name ,  T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1'
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD group by UNK_FIELD select UNK_FIELD , UNK_FIELD order by avg (UNK_FIELD) asc limit 1

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'Which team offers the lowest average salary? Give me the name and id of the team.'
NL tokens: [b'which', b'team', b'offers', b'the', b'lowest', b'average', b'salary', b'?', b'give', b'me', b'the', b'name', b'and', b'id', b'of', b'the', b'team', b'.']
NL tokens (original): [b'Which', b'team', b'offers', b'the', b'lowest', b'average', b'salary', b'?', b'Give', b'me', b'the', b'name', b'and', b'id', b'of', b'the', b'team', b'.']
['[CLS]', 'which', 'team', 'offers', 'the', 'lowest', 'average', 'salary', '?', 'give', 'me', 'the', 'name', 'and', 'id', 'of', 'the', 'team', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', '[SEP]']
Target 0: b'SELECT T1.name ,  T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1'
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD group by UNK_FIELD select UNK_FIELD , UNK_FIELD order by avg (UNK_FIELD) asc limit 1

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3661/8943 [08:59<7:29:55,  5.11s/it]
NL: b'Which team offers the lowest average salary? Give me the name and id of the team.'
NL tokens: [b'which', b'team', b'offers', b'the', b'lowest', b'average', b'salary', b'?', b'give', b'me', b'the', b'name', b'and', b'id', b'of', b'the', b'team', b'.']
NL tokens (original): [b'Which', b'team', b'offers', b'the', b'lowest', b'average', b'salary', b'?', b'Give', b'me', b'the', b'name', b'and', b'id', b'of', b'the', b'team', b'.']
['[CLS]', 'which', 'team', 'offers', 'the', 'lowest', 'average', 'salary', '?', 'give', 'me', 'the', 'name', 'and', 'id', 'of', 'the', 'team', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', '[SEP]']
Target 0: b'SELECT T1.name ,  T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg(T2.salary) ASC LIMIT 1'
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD group by UNK_FIELD select UNK_FIELD , UNK_FIELD order by avg (UNK_FIELD) asc limit 1

Picklist: Find the players' first name and last name who won award both in 1960 and in 1961., hall_of_fame, category, [Player]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b"Find the players' first name and last name who won award both in 1960 and in 1961."
NL tokens: [b'find', b'the', b'players', b"'", b'first', b'name', b'and', b'last', b'name', b'who', b'won', b'award', b'both', b'in', b'1960', b'and', b'in', b'1961', b'.']
NL tokens (original): [b'Find', b'the', b'players', b"'", b'first', b'name', b'and', b'last', b'name', b'who', b'won', b'award', b'both', b'in', b'1960', b'and', b'in', b'1961', b'.']
['[CLS]', 'find', 'the', 'players', "'", 'first', 'name', 'and', 'last', 'name', 'who', 'won', 'award', 'both', 'in', '1960', 'and', 'in', '1961', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[SEP]']
Target 0: b'SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961'
Target TF-P tokens: from UNK_TABLE join player_award where player_award.year = 1960 select UNK_FIELD , UNK_FIELD intersect from UNK_TABLE join player_award where player_award.year = 1961 select UNK_FIELD , UNK_FIELD

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3662/8943 [09:05<7:32:18,  5.14s/it]
NL: b"Find the players' first name and last name who won award both in 1960 and in 1961."
NL tokens: [b'find', b'the', b'players', b"'", b'first', b'name', b'and', b'last', b'name', b'who', b'won', b'award', b'both', b'in', b'1960', b'and', b'in', b'1961', b'.']
NL tokens (original): [b'Find', b'the', b'players', b"'", b'first', b'name', b'and', b'last', b'name', b'who', b'won', b'award', b'both', b'in', b'1960', b'and', b'in', b'1961', b'.']
['[CLS]', 'find', 'the', 'players', "'", 'first', 'name', 'and', 'last', 'name', 'who', 'won', 'award', 'both', 'in', '1960', 'and', 'in', '1961', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[SEP]']
Target 0: b'SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961'
Target TF-P tokens: from UNK_TABLE join player_award where player_award.year = 1960 select UNK_FIELD , UNK_FIELD intersect from UNK_TABLE join player_award where player_award.year = 1961 select UNK_FIELD , UNK_FIELD

--------------------
text:  Find the players' first name and last name who won award both in 1960 and in 1961.
sql:  SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961
ground truth values:  []
matched values OrderedDict([(435, ('hall_of_fame.category', 'Player'))])
--------------------
Picklist: Which players won awards in both 1960 and 1961? Return their first names and last names., hall_of_fame, category, [Player]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'Which players won awards in both 1960 and 1961? Return their first names and last names.'
NL tokens: [b'which', b'players', b'won', b'awards', b'in', b'both', b'1960', b'and', b'1961', b'?', b'return', b'their', b'first', b'names', b'and', b'last', b'names', b'.']
NL tokens (original): [b'Which', b'players', b'won', b'awards', b'in', b'both', b'1960', b'and', b'1961', b'?', b'Return', b'their', b'first', b'names', b'and', b'last', b'names', b'.']
['[CLS]', 'which', 'players', 'won', 'awards', 'in', 'both', '1960', 'and', '1961', '?', 'return', 'their', 'first', 'names', 'and', 'last', 'names', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[SEP]']
Target 0: b'SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961'
Target TF-P tokens: from UNK_TABLE join player_award where player_award.year = 1960 select UNK_FIELD , UNK_FIELD intersect from UNK_TABLE join player_award where player_award.year = 1961 select UNK_FIELD , UNK_FIELD

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3663/8943 [09:10<7:41:12,  5.24s/it]
NL: b'Which players won awards in both 1960 and 1961? Return their first names and last names.'
NL tokens: [b'which', b'players', b'won', b'awards', b'in', b'both', b'1960', b'and', b'1961', b'?', b'return', b'their', b'first', b'names', b'and', b'last', b'names', b'.']
NL tokens (original): [b'Which', b'players', b'won', b'awards', b'in', b'both', b'1960', b'and', b'1961', b'?', b'Return', b'their', b'first', b'names', b'and', b'last', b'names', b'.']
['[CLS]', 'which', 'players', 'won', 'awards', 'in', 'both', '1960', 'and', '1961', '?', 'return', 'their', 'first', 'names', 'and', 'last', 'names', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[SEP]']
Target 0: b'SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961'
Target TF-P tokens: from UNK_TABLE join player_award where player_award.year = 1960 select UNK_FIELD , UNK_FIELD intersect from UNK_TABLE join player_award where player_award.year = 1961 select UNK_FIELD , UNK_FIELD

--------------------
text:  Which players won awards in both 1960 and 1961? Return their first names and last names.
sql:  SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961
ground truth values:  []
matched values OrderedDict([(435, ('hall_of_fame.category', 'Player'))])
--------------------
Picklist: List players' first name and last name who have weight greater than 220 or height shorter than 75., hall_of_fame, category, [Player]
Picklist: List players' first name and last name who have weight greater than 220 or height shorter than 75., college, college_id, [shorterga]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b"List players' first name and last name who have weight greater than 220 or height shorter than 75."
NL tokens: [b'list', b'players', b"'", b'first', b'name', b'and', b'last', b'name', b'who', b'have', b'weight', b'greater', b'than', b'220', b'or', b'height', b'shorter', b'than', b'75', b'.']
NL tokens (original): [b'List', b'players', b"'", b'first', b'name', b'and', b'last', b'name', b'who', b'have', b'weight', b'greater', b'than', b'220', b'or', b'height', b'shorter', b'than', b'75', b'.']
['[CLS]', 'list', 'players', "'", 'first', 'name', 'and', 'last', 'name', 'who', 'have', 'weight', 'greater', 'than', '220', 'or', 'height', 'shorter', 'than', '75', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[SEP]']
Target 0: b'SELECT name_first ,  name_last FROM player WHERE weight  >  220 OR height  <  75'
Target TF-P tokens: from UNK_TABLE where UNK_FIELD > 220 or UNK_FIELD < 75 select UNK_FIELD , UNK_FIELD

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3664/8943 [09:16<8:00:20,  5.46s/it]
NL: b"List players' first name and last name who have weight greater than 220 or height shorter than 75."
NL tokens: [b'list', b'players', b"'", b'first', b'name', b'and', b'last', b'name', b'who', b'have', b'weight', b'greater', b'than', b'220', b'or', b'height', b'shorter', b'than', b'75', b'.']
NL tokens (original): [b'List', b'players', b"'", b'first', b'name', b'and', b'last', b'name', b'who', b'have', b'weight', b'greater', b'than', b'220', b'or', b'height', b'shorter', b'than', b'75', b'.']
['[CLS]', 'list', 'players', "'", 'first', 'name', 'and', 'last', 'name', 'who', 'have', 'weight', 'greater', 'than', '220', 'or', 'height', 'shorter', 'than', '75', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[SEP]']
Target 0: b'SELECT name_first ,  name_last FROM player WHERE weight  >  220 OR height  <  75'
Target TF-P tokens: from UNK_TABLE where UNK_FIELD > 220 or UNK_FIELD < 75 select UNK_FIELD , UNK_FIELD

--------------------
text:  List players' first name and last name who have weight greater than 220 or height shorter than 75.
sql:  SELECT name_first ,  name_last FROM player WHERE weight  >  220 OR height  <  75
ground truth values:  []
matched values OrderedDict([(435, ('hall_of_fame.category', 'Player')), (785, ('college.college_id', 'shorterga'))])
--------------------
Picklist: What are the first name and last name of the players who have weight above 220 or height below 75?, hall_of_fame, category, [Player]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'What are the first name and last name of the players who have weight above 220 or height below 75?'
NL tokens: [b'what', b'are', b'the', b'first', b'name', b'and', b'last', b'name', b'of', b'the', b'players', b'who', b'have', b'weight', b'above', b'220', b'or', b'height', b'below', b'75', b'?']
NL tokens (original): [b'What', b'are', b'the', b'first', b'name', b'and', b'last', b'name', b'of', b'the', b'players', b'who', b'have', b'weight', b'above', b'220', b'or', b'height', b'below', b'75', b'?']
['[CLS]', 'what', 'are', 'the', 'first', 'name', 'and', 'last', 'name', 'of', 'the', 'players', 'who', 'have', 'weight', 'above', '220', 'or', 'height', 'below', '75', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[SEP]']
Target 0: b'SELECT name_first ,  name_last FROM player WHERE weight  >  220 OR height  <  75'
Target TF-P tokens: from UNK_TABLE where UNK_FIELD > 220 or UNK_FIELD < 75 select UNK_FIELD , UNK_FIELD

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3665/8943 [09:22<8:15:21,  5.63s/it]
NL: b'What are the first name and last name of the players who have weight above 220 or height below 75?'
NL tokens: [b'what', b'are', b'the', b'first', b'name', b'and', b'last', b'name', b'of', b'the', b'players', b'who', b'have', b'weight', b'above', b'220', b'or', b'height', b'below', b'75', b'?']
NL tokens (original): [b'What', b'are', b'the', b'first', b'name', b'and', b'last', b'name', b'of', b'the', b'players', b'who', b'have', b'weight', b'above', b'220', b'or', b'height', b'below', b'75', b'?']
['[CLS]', 'what', 'are', 'the', 'first', 'name', 'and', 'last', 'name', 'of', 'the', 'players', 'who', 'have', 'weight', 'above', '220', 'or', 'height', 'below', '75', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[SEP]']
Target 0: b'SELECT name_first ,  name_last FROM player WHERE weight  >  220 OR height  <  75'
Target TF-P tokens: from UNK_TABLE where UNK_FIELD > 220 or UNK_FIELD < 75 select UNK_FIELD , UNK_FIELD

--------------------
text:  What are the first name and last name of the players who have weight above 220 or height below 75?
sql:  SELECT name_first ,  name_last FROM player WHERE weight  >  220 OR height  <  75
ground truth values:  []
matched values OrderedDict([(435, ('hall_of_fame.category', 'Player'))])
--------------------
Picklist: List the maximum scores of the team Boston Red Stockings when the team won in postseason?, player, birth_city, [Boston]
Picklist: List the maximum scores of the team Boston Red Stockings when the team won in postseason?, player, death_city, [Boston]
Picklist: List the maximum scores of the team Boston Red Stockings when the team won in postseason?, player, name_first, [Red]
Picklist: List the maximum scores of the team Boston Red Stockings when the team won in postseason?, player, name_last, [Boston]
Picklist: List the maximum scores of the team Boston Red Stockings when the team won in postseason?, park, city, [Boston]
Picklist: List the maximum scores of the team Boston Red Stockings when the team won in postseason?, college, city, [Boston]
Picklist: List the maximum scores of the team Boston Red Stockings when the team won in postseason?, team, name, [Boston Red Stockings]
Picklist: List the maximum scores of the team Boston Red Stockings when the team won in postseason?, team_franchise, franchise_name, [Boston Red Stockings]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'List the maximum scores of the team Boston Red Stockings when the team won in postseason?'
NL tokens: [b'list', b'the', b'maximum', b'scores', b'of', b'the', b'team', b'boston', b'red', b'stockings', b'when', b'the', b'team', b'won', b'in', b'postseason', b'?']
NL tokens (original): [b'List', b'the', b'maximum', b'scores', b'of', b'the', b'team', b'Boston', b'Red', b'Stockings', b'when', b'the', b'team', b'won', b'in', b'postseason', b'?']
['[CLS]', 'list', 'the', 'maximum', 'scores', 'of', 'the', 'team', 'boston', 'red', 'stockings', 'when', 'the', 'team', 'won', 'in', 'postseason', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '[SEP]']
Target 0: b"SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings'"
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" select max (UNK_FIELD)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3666/8943 [09:28<8:11:54,  5.59s/it]
NL: b'List the maximum scores of the team Boston Red Stockings when the team won in postseason?'
NL tokens: [b'list', b'the', b'maximum', b'scores', b'of', b'the', b'team', b'boston', b'red', b'stockings', b'when', b'the', b'team', b'won', b'in', b'postseason', b'?']
NL tokens (original): [b'List', b'the', b'maximum', b'scores', b'of', b'the', b'team', b'Boston', b'Red', b'Stockings', b'when', b'the', b'team', b'won', b'in', b'postseason', b'?']
['[CLS]', 'list', 'the', 'maximum', 'scores', 'of', 'the', 'team', 'boston', 'red', 'stockings', 'when', 'the', 'team', 'won', 'in', 'postseason', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '[SEP]']
Target 0: b"SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings'"
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" select max (UNK_FIELD)

--------------------
text:  List the maximum scores of the team Boston Red Stockings when the team won in postseason?
sql:  SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings'
ground truth values:  [('team.name', 'Boston Red Stockings')]
matched values OrderedDict([(545, ('player.birth_city', 'Boston')), (565, ('player.death_city', 'Boston')), (570, ('player.name_first', 'Red')), (575, ('player.name_last', 'Boston')), (614, ('park.city', 'Boston')), (798, ('college.city', 'Boston')), (939, ('team.name', 'Boston Red Stockings')), (976, ('team_franchise.franchise_name', 'Boston Red Stockings'))])
--------------------
Picklist: What are the maximum scores the team Boston Red Stockings got when the team won in postseason?, player, birth_city, [Boston]
Picklist: What are the maximum scores the team Boston Red Stockings got when the team won in postseason?, player, death_city, [Boston]
Picklist: What are the maximum scores the team Boston Red Stockings got when the team won in postseason?, player, name_first, [Red]
Picklist: What are the maximum scores the team Boston Red Stockings got when the team won in postseason?, player, name_last, [Boston]
Picklist: What are the maximum scores the team Boston Red Stockings got when the team won in postseason?, park, city, [Boston]
Picklist: What are the maximum scores the team Boston Red Stockings got when the team won in postseason?, college, city, [Boston]
Picklist: What are the maximum scores the team Boston Red Stockings got when the team won in postseason?, team, name, [Boston Red Stockings]
Picklist: What are the maximum scores the team Boston Red Stockings got when the team won in postseason?, team_franchise, franchise_name, [Boston Red Stockings]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'What are the maximum scores the team Boston Red Stockings got when the team won in postseason?'
NL tokens: [b'what', b'are', b'the', b'maximum', b'scores', b'the', b'team', b'boston', b'red', b'stockings', b'got', b'when', b'the', b'team', b'won', b'in', b'postseason', b'?']
NL tokens (original): [b'What', b'are', b'the', b'maximum', b'scores', b'the', b'team', b'Boston', b'Red', b'Stockings', b'got', b'when', b'the', b'team', b'won', b'in', b'postseason', b'?']
['[CLS]', 'what', 'are', 'the', 'maximum', 'scores', 'the', 'team', 'boston', 'red', 'stockings', 'got', 'when', 'the', 'team', 'won', 'in', 'postseason', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', '[SEP]']
Target 0: b"SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings'"
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" select max (UNK_FIELD)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3667/8943 [09:33<8:14:30,  5.62s/it]
NL: b'What are the maximum scores the team Boston Red Stockings got when the team won in postseason?'
NL tokens: [b'what', b'are', b'the', b'maximum', b'scores', b'the', b'team', b'boston', b'red', b'stockings', b'got', b'when', b'the', b'team', b'won', b'in', b'postseason', b'?']
NL tokens (original): [b'What', b'are', b'the', b'maximum', b'scores', b'the', b'team', b'Boston', b'Red', b'Stockings', b'got', b'when', b'the', b'team', b'won', b'in', b'postseason', b'?']
['[CLS]', 'what', 'are', 'the', 'maximum', 'scores', 'the', 'team', 'boston', 'red', 'stockings', 'got', 'when', 'the', 'team', 'won', 'in', 'postseason', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', '[SEP]']
Target 0: b"SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings'"
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" select max (UNK_FIELD)

--------------------
text:  What are the maximum scores the team Boston Red Stockings got when the team won in postseason?
sql:  SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings'
ground truth values:  [('team.name', 'Boston Red Stockings')]
matched values OrderedDict([(545, ('player.birth_city', 'Boston')), (565, ('player.death_city', 'Boston')), (570, ('player.name_first', 'Red')), (575, ('player.name_last', 'Boston')), (614, ('park.city', 'Boston')), (798, ('college.city', 'Boston')), (939, ('team.name', 'Boston Red Stockings')), (976, ('team_franchise.franchise_name', 'Boston Red Stockings'))])
--------------------
Picklist: How many times did Boston Red Stockings lose in 2009 postseason?, player, birth_city, [Boston]
Picklist: How many times did Boston Red Stockings lose in 2009 postseason?, player, death_city, [Boston]
Picklist: How many times did Boston Red Stockings lose in 2009 postseason?, player, name_first, [Red]
Picklist: How many times did Boston Red Stockings lose in 2009 postseason?, player, name_last, [Boston]
Picklist: How many times did Boston Red Stockings lose in 2009 postseason?, park, city, [Boston]
Picklist: How many times did Boston Red Stockings lose in 2009 postseason?, college, city, [Boston]
Picklist: How many times did Boston Red Stockings lose in 2009 postseason?, team, name, [Boston Red Stockings]
Picklist: How many times did Boston Red Stockings lose in 2009 postseason?, team_franchise, franchise_name, [Boston Red Stockings]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'How many times did Boston Red Stockings lose in 2009 postseason?'
NL tokens: [b'how', b'many', b'times', b'did', b'boston', b'red', b'stockings', b'lose', b'in', b'2009', b'postseason', b'?']
NL tokens (original): [b'How', b'many', b'times', b'did', b'Boston', b'Red', b'Stockings', b'lose', b'in', b'2009', b'postseason', b'?']
['[CLS]', 'how', 'many', 'times', 'did', 'boston', 'red', 'stockings', 'lose', 'in', '2009', 'postseason', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', 'half', '[SEP]']
Target 0: b"SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year = 2009"
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" and UNK_FIELD = 2009 select count (*)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3668/8943 [09:38<7:46:48,  5.31s/it]
NL: b'How many times did Boston Red Stockings lose in 2009 postseason?'
NL tokens: [b'how', b'many', b'times', b'did', b'boston', b'red', b'stockings', b'lose', b'in', b'2009', b'postseason', b'?']
NL tokens (original): [b'How', b'many', b'times', b'did', b'Boston', b'Red', b'Stockings', b'lose', b'in', b'2009', b'postseason', b'?']
['[CLS]', 'how', 'many', 'times', 'did', 'boston', 'red', 'stockings', 'lose', 'in', '2009', 'postseason', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', 'half', '[SEP]']
Target 0: b"SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year = 2009"
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" and UNK_FIELD = 2009 select count (*)

--------------------
text:  How many times did Boston Red Stockings lose in 2009 postseason?
sql:  SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year = 2009
ground truth values:  [('team.name', 'Boston Red Stockings')]
matched values OrderedDict([(545, ('player.birth_city', 'Boston')), (565, ('player.death_city', 'Boston')), (570, ('player.name_first', 'Red')), (575, ('player.name_last', 'Boston')), (614, ('park.city', 'Boston')), (798, ('college.city', 'Boston')), (939, ('team.name', 'Boston Red Stockings')), (976, ('team_franchise.franchise_name', 'Boston Red Stockings'))])
--------------------
Picklist: Count the number of times the team "Boston Red Stockings" lost in 2009 postseason., player, birth_city, [Boston]
Picklist: Count the number of times the team "Boston Red Stockings" lost in 2009 postseason., player, death_city, [Boston]
Picklist: Count the number of times the team "Boston Red Stockings" lost in 2009 postseason., player, name_first, [Red]
Picklist: Count the number of times the team "Boston Red Stockings" lost in 2009 postseason., player, name_first, [Count]
Picklist: Count the number of times the team "Boston Red Stockings" lost in 2009 postseason., player, name_last, [Boston]
Picklist: Count the number of times the team "Boston Red Stockings" lost in 2009 postseason., park, city, [Boston]
Picklist: Count the number of times the team "Boston Red Stockings" lost in 2009 postseason., college, city, [Boston]
Picklist: Count the number of times the team "Boston Red Stockings" lost in 2009 postseason., team, name, [Boston Red Stockings]
Picklist: Count the number of times the team "Boston Red Stockings" lost in 2009 postseason., team_franchise, franchise_name, [Boston Red Stockings]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'Count the number of times the team "Boston Red Stockings" lost in 2009 postseason.'
NL tokens: [b'count', b'the', b'number', b'of', b'times', b'the', b'team', b'"', b'boston', b'red', b'stockings', b'"', b'lost', b'in', b'2009', b'postseason', b'.']
NL tokens (original): [b'Count', b'the', b'number', b'of', b'times', b'the', b'team', b'"', b'Boston', b'Red', b'Stockings', b'"', b'lost', b'in', b'2009', b'postseason', b'.']
['[CLS]', 'count', 'the', 'number', 'of', 'times', 'the', 'team', '"', 'boston', 'red', 'stockings', '"', 'lost', 'in', '2009', 'postseason', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '[SEP]']
Target 0: b"SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year = 2009"
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" and UNK_FIELD = 2009 select count (*)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3669/8943 [09:43<7:43:31,  5.27s/it]
NL: b'Count the number of times the team "Boston Red Stockings" lost in 2009 postseason.'
NL tokens: [b'count', b'the', b'number', b'of', b'times', b'the', b'team', b'"', b'boston', b'red', b'stockings', b'"', b'lost', b'in', b'2009', b'postseason', b'.']
NL tokens (original): [b'Count', b'the', b'number', b'of', b'times', b'the', b'team', b'"', b'Boston', b'Red', b'Stockings', b'"', b'lost', b'in', b'2009', b'postseason', b'.']
['[CLS]', 'count', 'the', 'number', 'of', 'times', 'the', 'team', '"', 'boston', 'red', 'stockings', '"', 'lost', 'in', '2009', 'postseason', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '[SEP]']
Target 0: b"SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year = 2009"
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" and UNK_FIELD = 2009 select count (*)

--------------------
text:  Count the number of times the team "Boston Red Stockings" lost in 2009 postseason.
sql:  SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year = 2009
ground truth values:  [('team.name', 'Boston Red Stockings')]
matched values OrderedDict([(545, ('player.birth_city', 'Boston')), (565, ('player.death_city', 'Boston')), (570, ('player.name_first', 'Red')), (572, ('player.name_first', 'Count')), (577, ('player.name_last', 'Boston')), (616, ('park.city', 'Boston')), (800, ('college.city', 'Boston')), (941, ('team.name', 'Boston Red Stockings')), (978, ('team_franchise.franchise_name', 'Boston Red Stockings'))])
--------------------
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'What are the name and id of the team with the most victories in 2008 postseason?'
NL tokens: [b'what', b'are', b'the', b'name', b'and', b'id', b'of', b'the', b'team', b'with', b'the', b'most', b'victories', b'in', b'2008', b'postseason', b'?']
NL tokens (original): [b'What', b'are', b'the', b'name', b'and', b'id', b'of', b'the', b'team', b'with', b'the', b'most', b'victories', b'in', b'2008', b'postseason', b'?']
['[CLS]', 'what', 'are', 'the', 'name', 'and', 'id', 'of', 'the', 'team', 'with', 'the', 'most', 'victories', 'in', '2008', 'postseason', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '[SEP]']
Target 0: b'SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = 2008 group by UNK_FIELD select UNK_FIELD , UNK_FIELD order by count (*) desc limit 1

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3670/8943 [09:48<7:43:20,  5.27s/it]
NL: b'What are the name and id of the team with the most victories in 2008 postseason?'
NL tokens: [b'what', b'are', b'the', b'name', b'and', b'id', b'of', b'the', b'team', b'with', b'the', b'most', b'victories', b'in', b'2008', b'postseason', b'?']
NL tokens (original): [b'What', b'are', b'the', b'name', b'and', b'id', b'of', b'the', b'team', b'with', b'the', b'most', b'victories', b'in', b'2008', b'postseason', b'?']
['[CLS]', 'what', 'are', 'the', 'name', 'and', 'id', 'of', 'the', 'team', 'with', 'the', 'most', 'victories', 'in', '2008', 'postseason', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '[SEP]']
Target 0: b'SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = 2008 group by UNK_FIELD select UNK_FIELD , UNK_FIELD order by count (*) desc limit 1

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'Find the name and id of the team that won the most times in 2008 postseason.'
NL tokens: [b'find', b'the', b'name', b'and', b'id', b'of', b'the', b'team', b'that', b'won', b'the', b'most', b'times', b'in', b'2008', b'postseason', b'.']
NL tokens (original): [b'Find', b'the', b'name', b'and', b'id', b'of', b'the', b'team', b'that', b'won', b'the', b'most', b'times', b'in', b'2008', b'postseason', b'.']
['[CLS]', 'find', 'the', 'name', 'and', 'id', 'of', 'the', 'team', 'that', 'won', 'the', 'most', 'times', 'in', '2008', 'postseason', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '[SEP]']
Target 0: b'SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = 2008 group by UNK_FIELD select UNK_FIELD , UNK_FIELD order by count (*) desc limit 1

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3671/8943 [09:53<7:36:41,  5.20s/it]
NL: b'Find the name and id of the team that won the most times in 2008 postseason.'
NL tokens: [b'find', b'the', b'name', b'and', b'id', b'of', b'the', b'team', b'that', b'won', b'the', b'most', b'times', b'in', b'2008', b'postseason', b'.']
NL tokens (original): [b'Find', b'the', b'name', b'and', b'id', b'of', b'the', b'team', b'that', b'won', b'the', b'most', b'times', b'in', b'2008', b'postseason', b'.']
['[CLS]', 'find', 'the', 'name', 'and', 'id', 'of', 'the', 'team', 'that', 'won', 'the', 'most', 'times', 'in', '2008', 'postseason', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '[SEP]']
Target 0: b'SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = 2008 group by UNK_FIELD select UNK_FIELD , UNK_FIELD order by count (*) desc limit 1

Picklist: What is the number of wins the team Boston Red Stockings got in the postseasons each year in history?, player, birth_city, [Boston]
Picklist: What is the number of wins the team Boston Red Stockings got in the postseasons each year in history?, player, death_city, [Boston]
Picklist: What is the number of wins the team Boston Red Stockings got in the postseasons each year in history?, player, name_first, [Red]
Picklist: What is the number of wins the team Boston Red Stockings got in the postseasons each year in history?, player, name_last, [Boston]
Picklist: What is the number of wins the team Boston Red Stockings got in the postseasons each year in history?, park, city, [Boston]
Picklist: What is the number of wins the team Boston Red Stockings got in the postseasons each year in history?, college, city, [Boston]
Picklist: What is the number of wins the team Boston Red Stockings got in the postseasons each year in history?, team, name, [Boston Red Stockings]
Picklist: What is the number of wins the team Boston Red Stockings got in the postseasons each year in history?, team_franchise, franchise_name, [Boston Red Stockings]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'What is the number of wins the team Boston Red Stockings got in the postseasons each year in history?'
NL tokens: [b'what', b'is', b'the', b'number', b'of', b'wins', b'the', b'team', b'boston', b'red', b'stockings', b'got', b'in', b'the', b'postseason', b'##s', b'each', b'year', b'in', b'history', b'?']
NL tokens (original): [b'What', b'is', b'the', b'number', b'of', b'wins', b'the', b'team', b'Boston', b'Red', b'Stockings', b'got', b'in', b'the', b'postseason', b'##s', b'each', b'year', b'in', b'history', b'?']
['[CLS]', 'what', 'is', 'the', 'number', 'of', 'wins', 'the', 'team', 'boston', 'red', 'stockings', 'got', 'in', 'the', 'postseason', '##s', 'each', 'year', 'in', 'history', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[SEP]']
Target 0: b"SELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year"
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" group by UNK_FIELD select count (*) , UNK_FIELD

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3672/8943 [09:59<7:57:45,  5.44s/it]
NL: b'What is the number of wins the team Boston Red Stockings got in the postseasons each year in history?'
NL tokens: [b'what', b'is', b'the', b'number', b'of', b'wins', b'the', b'team', b'boston', b'red', b'stockings', b'got', b'in', b'the', b'postseason', b'##s', b'each', b'year', b'in', b'history', b'?']
NL tokens (original): [b'What', b'is', b'the', b'number', b'of', b'wins', b'the', b'team', b'Boston', b'Red', b'Stockings', b'got', b'in', b'the', b'postseason', b'##s', b'each', b'year', b'in', b'history', b'?']
['[CLS]', 'what', 'is', 'the', 'number', 'of', 'wins', 'the', 'team', 'boston', 'red', 'stockings', 'got', 'in', 'the', 'postseason', '##s', 'each', 'year', 'in', 'history', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[SEP]']
Target 0: b"SELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year"
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" group by UNK_FIELD select count (*) , UNK_FIELD

--------------------
text:  What is the number of wins the team Boston Red Stockings got in the postseasons each year in history?
sql:  SELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year
ground truth values:  [('team.name', 'Boston Red Stockings')]
matched values OrderedDict([(545, ('player.birth_city', 'Boston')), (565, ('player.death_city', 'Boston')), (570, ('player.name_first', 'Red')), (575, ('player.name_last', 'Boston')), (614, ('park.city', 'Boston')), (798, ('college.city', 'Boston')), (939, ('team.name', 'Boston Red Stockings')), (976, ('team_franchise.franchise_name', 'Boston Red Stockings'))])
--------------------
Picklist: For each year, return the year and the number of times the team Boston Red Stockings won in the postseasons., player, birth_city, [Boston]
Picklist: For each year, return the year and the number of times the team Boston Red Stockings won in the postseasons., player, death_city, [Boston]
Picklist: For each year, return the year and the number of times the team Boston Red Stockings won in the postseasons., player, name_first, [Red]
Picklist: For each year, return the year and the number of times the team Boston Red Stockings won in the postseasons., player, name_last, [Boston]
Picklist: For each year, return the year and the number of times the team Boston Red Stockings won in the postseasons., park, city, [Boston]
Picklist: For each year, return the year and the number of times the team Boston Red Stockings won in the postseasons., college, city, [Boston]
Picklist: For each year, return the year and the number of times the team Boston Red Stockings won in the postseasons., team, name, [Boston Red Stockings]
Picklist: For each year, return the year and the number of times the team Boston Red Stockings won in the postseasons., team_franchise, franchise_name, [Boston Red Stockings]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'For each year, return the year and the number of times the team Boston Red Stockings won in the postseasons.'
NL tokens: [b'for', b'each', b'year', b',', b'return', b'the', b'year', b'and', b'the', b'number', b'of', b'times', b'the', b'team', b'boston', b'red', b'stockings', b'won', b'in', b'the', b'postseason', b'##s', b'.']
NL tokens (original): [b'For', b'each', b'year', b',', b'return', b'the', b'year', b'and', b'the', b'number', b'of', b'times', b'the', b'team', b'Boston', b'Red', b'Stockings', b'won', b'in', b'the', b'postseason', b'##s', b'.']
['[CLS]', 'for', 'each', 'year', ',', 'return', 'the', 'year', 'and', 'the', 'number', 'of', 'times', 'the', 'team', 'boston', 'red', 'stockings', 'won', 'in', 'the', 'postseason', '##s', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[SEP]']
Target 0: b"SELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year"
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" group by UNK_FIELD select count (*) , UNK_FIELD

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3673/8943 [10:06<8:19:45,  5.69s/it]
NL: b'For each year, return the year and the number of times the team Boston Red Stockings won in the postseasons.'
NL tokens: [b'for', b'each', b'year', b',', b'return', b'the', b'year', b'and', b'the', b'number', b'of', b'times', b'the', b'team', b'boston', b'red', b'stockings', b'won', b'in', b'the', b'postseason', b'##s', b'.']
NL tokens (original): [b'For', b'each', b'year', b',', b'return', b'the', b'year', b'and', b'the', b'number', b'of', b'times', b'the', b'team', b'Boston', b'Red', b'Stockings', b'won', b'in', b'the', b'postseason', b'##s', b'.']
['[CLS]', 'for', 'each', 'year', ',', 'return', 'the', 'year', 'and', 'the', 'number', 'of', 'times', 'the', 'team', 'boston', 'red', 'stockings', 'won', 'in', 'the', 'postseason', '##s', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[SEP]']
Target 0: b"SELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year"
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" group by UNK_FIELD select count (*) , UNK_FIELD

--------------------
text:  For each year, return the year and the number of times the team Boston Red Stockings won in the postseasons.
sql:  SELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year
ground truth values:  [('team.name', 'Boston Red Stockings')]
matched values OrderedDict([(545, ('player.birth_city', 'Boston')), (565, ('player.death_city', 'Boston')), (570, ('player.name_first', 'Red')), (575, ('player.name_last', 'Boston')), (614, ('park.city', 'Boston')), (798, ('college.city', 'Boston')), (939, ('team.name', 'Boston Red Stockings')), (976, ('team_franchise.franchise_name', 'Boston Red Stockings'))])
--------------------
Picklist: What is the total number of postseason games that team Boston Red Stockings participated in?, player, birth_city, [Boston]
Picklist: What is the total number of postseason games that team Boston Red Stockings participated in?, player, death_city, [Boston]
Picklist: What is the total number of postseason games that team Boston Red Stockings participated in?, player, name_first, [Red]
Picklist: What is the total number of postseason games that team Boston Red Stockings participated in?, player, name_last, [Boston]
Picklist: What is the total number of postseason games that team Boston Red Stockings participated in?, park, city, [Boston]
Picklist: What is the total number of postseason games that team Boston Red Stockings participated in?, college, city, [Boston]
Picklist: What is the total number of postseason games that team Boston Red Stockings participated in?, team, name, [Boston Red Stockings]
Picklist: What is the total number of postseason games that team Boston Red Stockings participated in?, team_franchise, franchise_name, [Boston Red Stockings]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'What is the total number of postseason games that team Boston Red Stockings participated in?'
NL tokens: [b'what', b'is', b'the', b'total', b'number', b'of', b'postseason', b'games', b'that', b'team', b'boston', b'red', b'stockings', b'participated', b'in', b'?']
NL tokens (original): [b'What', b'is', b'the', b'total', b'number', b'of', b'postseason', b'games', b'that', b'team', b'Boston', b'Red', b'Stockings', b'participated', b'in', b'?']
['[CLS]', 'what', 'is', 'the', 'total', 'number', 'of', 'postseason', 'games', 'that', 'team', 'boston', 'red', 'stockings', 'participated', 'in', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[SEP]']
Target 0: b"SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' )"
Target TF-P tokens: from (from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" select * union from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" select *) select count (*)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3674/8943 [10:11<8:15:49,  5.65s/it]
NL: b'What is the total number of postseason games that team Boston Red Stockings participated in?'
NL tokens: [b'what', b'is', b'the', b'total', b'number', b'of', b'postseason', b'games', b'that', b'team', b'boston', b'red', b'stockings', b'participated', b'in', b'?']
NL tokens (original): [b'What', b'is', b'the', b'total', b'number', b'of', b'postseason', b'games', b'that', b'team', b'Boston', b'Red', b'Stockings', b'participated', b'in', b'?']
['[CLS]', 'what', 'is', 'the', 'total', 'number', 'of', 'postseason', 'games', 'that', 'team', 'boston', 'red', 'stockings', 'participated', 'in', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[SEP]']
Target 0: b"SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' )"
Target TF-P tokens: from (from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" select * union from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" select *) select count (*)

--------------------
text:  What is the total number of postseason games that team Boston Red Stockings participated in?
sql:  SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' )
ground truth values:  [('team.name', 'Boston Red Stockings'), ('team.name', 'Boston Red Stockings')]
matched values OrderedDict([(545, ('player.birth_city', 'Boston')), (565, ('player.death_city', 'Boston')), (570, ('player.name_first', 'Red')), (575, ('player.name_last', 'Boston')), (614, ('park.city', 'Boston')), (798, ('college.city', 'Boston')), (939, ('team.name', 'Boston Red Stockings')), (976, ('team_franchise.franchise_name', 'Boston Red Stockings'))])
--------------------
Picklist: How many times in total did the team Boston Red Stockings participate in postseason games?, player, birth_city, [Boston]
Picklist: How many times in total did the team Boston Red Stockings participate in postseason games?, player, death_city, [Boston]
Picklist: How many times in total did the team Boston Red Stockings participate in postseason games?, player, name_first, [Red]
Picklist: How many times in total did the team Boston Red Stockings participate in postseason games?, player, name_last, [Boston]
Picklist: How many times in total did the team Boston Red Stockings participate in postseason games?, park, city, [Boston]
Picklist: How many times in total did the team Boston Red Stockings participate in postseason games?, college, city, [Boston]
Picklist: How many times in total did the team Boston Red Stockings participate in postseason games?, team, name, [Boston Red Stockings]
Picklist: How many times in total did the team Boston Red Stockings participate in postseason games?, team_franchise, franchise_name, [Boston Red Stockings]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'How many times in total did the team Boston Red Stockings participate in postseason games?'
NL tokens: [b'how', b'many', b'times', b'in', b'total', b'did', b'the', b'team', b'boston', b'red', b'stockings', b'participate', b'in', b'postseason', b'games', b'?']
NL tokens (original): [b'How', b'many', b'times', b'in', b'total', b'did', b'the', b'team', b'Boston', b'Red', b'Stockings', b'participate', b'in', b'postseason', b'games', b'?']
['[CLS]', 'how', 'many', 'times', 'in', 'total', 'did', 'the', 'team', 'boston', 'red', 'stockings', 'participate', 'in', 'postseason', 'games', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[SEP]']
Target 0: b"SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' )"
Target TF-P tokens: from (from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" select * union from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" select *) select count (*)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3675/8943 [10:17<8:14:50,  5.64s/it]
NL: b'How many times in total did the team Boston Red Stockings participate in postseason games?'
NL tokens: [b'how', b'many', b'times', b'in', b'total', b'did', b'the', b'team', b'boston', b'red', b'stockings', b'participate', b'in', b'postseason', b'games', b'?']
NL tokens (original): [b'How', b'many', b'times', b'in', b'total', b'did', b'the', b'team', b'Boston', b'Red', b'Stockings', b'participate', b'in', b'postseason', b'games', b'?']
['[CLS]', 'how', 'many', 'times', 'in', 'total', 'did', 'the', 'team', 'boston', 'red', 'stockings', 'participate', 'in', 'postseason', 'games', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[SEP]']
Target 0: b"SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' )"
Target TF-P tokens: from (from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" select * union from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" select *) select count (*)

--------------------
text:  How many times in total did the team Boston Red Stockings participate in postseason games?
sql:  SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' )
ground truth values:  [('team.name', 'Boston Red Stockings'), ('team.name', 'Boston Red Stockings')]
matched values OrderedDict([(545, ('player.birth_city', 'Boston')), (565, ('player.death_city', 'Boston')), (570, ('player.name_first', 'Red')), (575, ('player.name_last', 'Boston')), (614, ('park.city', 'Boston')), (798, ('college.city', 'Boston')), (939, ('team.name', 'Boston Red Stockings')), (976, ('team_franchise.franchise_name', 'Boston Red Stockings'))])
--------------------
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'How many games in 1885 postseason resulted in ties (that is, the value of "ties" is \'1\')?'
NL tokens: [b'how', b'many', b'games', b'in', b'1885', b'postseason', b'resulted', b'in', b'ties', b'(', b'that', b'is', b',', b'the', b'value', b'of', b'"', b'ties', b'"', b'is', b"'", b'1', b"'", b')', b'?']
NL tokens (original): [b'How', b'many', b'games', b'in', b'1885', b'postseason', b'resulted', b'in', b'ties', b'(', b'that', b'is', b',', b'the', b'value', b'of', b'"', b'ties', b'"', b'is', b"'", b'1', b"'", b')', b'?']
['[CLS]', 'how', 'many', 'games', 'in', '1885', 'postseason', 'resulted', 'in', 'ties', '(', 'that', 'is', ',', 'the', 'value', 'of', '"', 'ties', '"', 'is', "'", '1', "'", ')', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[SEP]']
Target 0: b'SELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1'
Target TF-P tokens: from UNK_TABLE where UNK_FIELD = 1885 and UNK_FIELD = 1 select count (*)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3676/8943 [10:22<8:11:04,  5.59s/it]
NL: b'How many games in 1885 postseason resulted in ties (that is, the value of "ties" is \'1\')?'
NL tokens: [b'how', b'many', b'games', b'in', b'1885', b'postseason', b'resulted', b'in', b'ties', b'(', b'that', b'is', b',', b'the', b'value', b'of', b'"', b'ties', b'"', b'is', b"'", b'1', b"'", b')', b'?']
NL tokens (original): [b'How', b'many', b'games', b'in', b'1885', b'postseason', b'resulted', b'in', b'ties', b'(', b'that', b'is', b',', b'the', b'value', b'of', b'"', b'ties', b'"', b'is', b"'", b'1', b"'", b')', b'?']
['[CLS]', 'how', 'many', 'games', 'in', '1885', 'postseason', 'resulted', 'in', 'ties', '(', 'that', 'is', ',', 'the', 'value', 'of', '"', 'ties', '"', 'is', "'", '1', "'", ')', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[SEP]']
Target 0: b'SELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1'
Target TF-P tokens: from UNK_TABLE where UNK_FIELD = 1885 and UNK_FIELD = 1 select count (*)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'Find the number of tied games (the value of "ties" is \'1\') in 1885 postseason.'
NL tokens: [b'find', b'the', b'number', b'of', b'tied', b'games', b'(', b'the', b'value', b'of', b'"', b'ties', b'"', b'is', b"'", b'1', b"'", b')', b'in', b'1885', b'postseason', b'.']
NL tokens (original): [b'Find', b'the', b'number', b'of', b'tied', b'games', b'(', b'the', b'value', b'of', b'"', b'ties', b'"', b'is', b"'", b'1', b"'", b')', b'in', b'1885', b'postseason', b'.']
['[CLS]', 'find', 'the', 'number', 'of', 'tied', 'games', '(', 'the', 'value', 'of', '"', 'ties', '"', 'is', "'", '1', "'", ')', 'in', '1885', 'postseason', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[SEP]']
Target 0: b'SELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1'
Target TF-P tokens: from UNK_TABLE where UNK_FIELD = 1885 and UNK_FIELD = 1 select count (*)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3677/8943 [10:27<7:52:27,  5.38s/it]
NL: b'Find the number of tied games (the value of "ties" is \'1\') in 1885 postseason.'
NL tokens: [b'find', b'the', b'number', b'of', b'tied', b'games', b'(', b'the', b'value', b'of', b'"', b'ties', b'"', b'is', b"'", b'1', b"'", b')', b'in', b'1885', b'postseason', b'.']
NL tokens (original): [b'Find', b'the', b'number', b'of', b'tied', b'games', b'(', b'the', b'value', b'of', b'"', b'ties', b'"', b'is', b"'", b'1', b"'", b')', b'in', b'1885', b'postseason', b'.']
['[CLS]', 'find', 'the', 'number', 'of', 'tied', 'games', '(', 'the', 'value', 'of', '"', 'ties', '"', 'is', "'", '1', "'", ')', 'in', '1885', 'postseason', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[SEP]']
Target 0: b'SELECT count(*) FROM postseason WHERE YEAR  =  1885 AND ties  =  1'
Target TF-P tokens: from UNK_TABLE where UNK_FIELD = 1885 and UNK_FIELD = 1 select count (*)

Picklist: What is the total salary paid by team Boston Red Stockings in 2010?, player, birth_city, [Boston]
Picklist: What is the total salary paid by team Boston Red Stockings in 2010?, player, death_city, [Boston]
Picklist: What is the total salary paid by team Boston Red Stockings in 2010?, player, name_first, [Red]
Picklist: What is the total salary paid by team Boston Red Stockings in 2010?, player, name_last, [Boston]
Picklist: What is the total salary paid by team Boston Red Stockings in 2010?, park, city, [Boston]
Picklist: What is the total salary paid by team Boston Red Stockings in 2010?, college, city, [Boston]
Picklist: What is the total salary paid by team Boston Red Stockings in 2010?, team, name, [Boston Red Stockings]
Picklist: What is the total salary paid by team Boston Red Stockings in 2010?, team_franchise, franchise_name, [Boston Red Stockings]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'What is the total salary paid by team Boston Red Stockings in 2010?'
NL tokens: [b'what', b'is', b'the', b'total', b'salary', b'paid', b'by', b'team', b'boston', b'red', b'stockings', b'in', b'2010', b'?']
NL tokens (original): [b'What', b'is', b'the', b'total', b'salary', b'paid', b'by', b'team', b'Boston', b'Red', b'Stockings', b'in', b'2010', b'?']
['[CLS]', 'what', 'is', 'the', 'total', 'salary', 'paid', 'by', 'team', 'boston', 'red', 'stockings', 'in', '2010', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', '[SEP]']
Target 0: b"SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2010"
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" and UNK_FIELD = 2010 select sum (UNK_FIELD)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3678/8943 [10:32<7:30:57,  5.14s/it]
NL: b'What is the total salary paid by team Boston Red Stockings in 2010?'
NL tokens: [b'what', b'is', b'the', b'total', b'salary', b'paid', b'by', b'team', b'boston', b'red', b'stockings', b'in', b'2010', b'?']
NL tokens (original): [b'What', b'is', b'the', b'total', b'salary', b'paid', b'by', b'team', b'Boston', b'Red', b'Stockings', b'in', b'2010', b'?']
['[CLS]', 'what', 'is', 'the', 'total', 'salary', 'paid', 'by', 'team', 'boston', 'red', 'stockings', 'in', '2010', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', '[SEP]']
Target 0: b"SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2010"
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" and UNK_FIELD = 2010 select sum (UNK_FIELD)

--------------------
text:  What is the total salary paid by team Boston Red Stockings in 2010?
sql:  SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2010
ground truth values:  [('team.name', 'Boston Red Stockings')]
matched values OrderedDict([(545, ('player.birth_city', 'Boston')), (565, ('player.death_city', 'Boston')), (570, ('player.name_first', 'Red')), (575, ('player.name_last', 'Boston')), (614, ('park.city', 'Boston')), (798, ('college.city', 'Boston')), (939, ('team.name', 'Boston Red Stockings')), (976, ('team_franchise.franchise_name', 'Boston Red Stockings'))])
--------------------
Picklist: What is the total salary expenses of team Boston Red Stockings in 2010?, player, birth_city, [Boston]
Picklist: What is the total salary expenses of team Boston Red Stockings in 2010?, player, death_city, [Boston]
Picklist: What is the total salary expenses of team Boston Red Stockings in 2010?, player, name_first, [Red]
Picklist: What is the total salary expenses of team Boston Red Stockings in 2010?, player, name_last, [Boston]
Picklist: What is the total salary expenses of team Boston Red Stockings in 2010?, park, city, [Boston]
Picklist: What is the total salary expenses of team Boston Red Stockings in 2010?, college, city, [Boston]
Picklist: What is the total salary expenses of team Boston Red Stockings in 2010?, team, name, [Boston Red Stockings]
Picklist: What is the total salary expenses of team Boston Red Stockings in 2010?, team_franchise, franchise_name, [Boston Red Stockings]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'What is the total salary expenses of team Boston Red Stockings in 2010?'
NL tokens: [b'what', b'is', b'the', b'total', b'salary', b'expenses', b'of', b'team', b'boston', b'red', b'stockings', b'in', b'2010', b'?']
NL tokens (original): [b'What', b'is', b'the', b'total', b'salary', b'expenses', b'of', b'team', b'Boston', b'Red', b'Stockings', b'in', b'2010', b'?']
['[CLS]', 'what', 'is', 'the', 'total', 'salary', 'expenses', 'of', 'team', 'boston', 'red', 'stockings', 'in', '2010', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', '[SEP]']
Target 0: b"SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2010"
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" and UNK_FIELD = 2010 select sum (UNK_FIELD)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3679/8943 [10:36<7:20:23,  5.02s/it]
NL: b'What is the total salary expenses of team Boston Red Stockings in 2010?'
NL tokens: [b'what', b'is', b'the', b'total', b'salary', b'expenses', b'of', b'team', b'boston', b'red', b'stockings', b'in', b'2010', b'?']
NL tokens (original): [b'What', b'is', b'the', b'total', b'salary', b'expenses', b'of', b'team', b'Boston', b'Red', b'Stockings', b'in', b'2010', b'?']
['[CLS]', 'what', 'is', 'the', 'total', 'salary', 'expenses', 'of', 'team', 'boston', 'red', 'stockings', 'in', '2010', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', '[SEP]']
Target 0: b"SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2010"
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" and UNK_FIELD = 2010 select sum (UNK_FIELD)

--------------------
text:  What is the total salary expenses of team Boston Red Stockings in 2010?
sql:  SELECT sum(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2010
ground truth values:  [('team.name', 'Boston Red Stockings')]
matched values OrderedDict([(545, ('player.birth_city', 'Boston')), (565, ('player.death_city', 'Boston')), (570, ('player.name_first', 'Red')), (575, ('player.name_last', 'Boston')), (614, ('park.city', 'Boston')), (798, ('college.city', 'Boston')), (939, ('team.name', 'Boston Red Stockings')), (976, ('team_franchise.franchise_name', 'Boston Red Stockings'))])
--------------------
Picklist: How many players were in the team Boston Red Stockings in 2000?, hall_of_fame, category, [Player]
Picklist: How many players were in the team Boston Red Stockings in 2000?, player, birth_city, [Boston]
Picklist: How many players were in the team Boston Red Stockings in 2000?, player, death_city, [Boston]
Picklist: How many players were in the team Boston Red Stockings in 2000?, player, name_first, [Red]
Picklist: How many players were in the team Boston Red Stockings in 2000?, player, name_last, [Boston]
Picklist: How many players were in the team Boston Red Stockings in 2000?, park, city, [Boston]
Picklist: How many players were in the team Boston Red Stockings in 2000?, college, city, [Boston]
Picklist: How many players were in the team Boston Red Stockings in 2000?, team, name, [Boston Red Stockings]
Picklist: How many players were in the team Boston Red Stockings in 2000?, team_franchise, franchise_name, [Boston Red Stockings]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'How many players were in the team Boston Red Stockings in 2000?'
NL tokens: [b'how', b'many', b'players', b'were', b'in', b'the', b'team', b'boston', b'red', b'stockings', b'in', b'2000', b'?']
NL tokens (original): [b'How', b'many', b'players', b'were', b'in', b'the', b'team', b'Boston', b'Red', b'Stockings', b'in', b'2000', b'?']
['[CLS]', 'how', 'many', 'players', 'were', 'in', 'the', 'team', 'boston', 'red', 'stockings', 'in', '2000', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[SEP]']
Target 0: b"SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2000"
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" and UNK_FIELD = 2000 select count (*)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3680/8943 [10:41<7:08:52,  4.89s/it]
NL: b'How many players were in the team Boston Red Stockings in 2000?'
NL tokens: [b'how', b'many', b'players', b'were', b'in', b'the', b'team', b'boston', b'red', b'stockings', b'in', b'2000', b'?']
NL tokens (original): [b'How', b'many', b'players', b'were', b'in', b'the', b'team', b'Boston', b'Red', b'Stockings', b'in', b'2000', b'?']
['[CLS]', 'how', 'many', 'players', 'were', 'in', 'the', 'team', 'boston', 'red', 'stockings', 'in', '2000', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[SEP]']
Target 0: b"SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2000"
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" and UNK_FIELD = 2000 select count (*)

--------------------
text:  How many players were in the team Boston Red Stockings in 2000?
sql:  SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2000
ground truth values:  [('team.name', 'Boston Red Stockings')]
matched values OrderedDict([(435, ('hall_of_fame.category', 'Player')), (547, ('player.birth_city', 'Boston')), (567, ('player.death_city', 'Boston')), (572, ('player.name_first', 'Red')), (577, ('player.name_last', 'Boston')), (616, ('park.city', 'Boston')), (800, ('college.city', 'Boston')), (941, ('team.name', 'Boston Red Stockings')), (978, ('team_franchise.franchise_name', 'Boston Red Stockings'))])
--------------------
Picklist: How many players did Boston Red Stockings have in 2000?, hall_of_fame, category, [Player]
Picklist: How many players did Boston Red Stockings have in 2000?, player, birth_city, [Boston]
Picklist: How many players did Boston Red Stockings have in 2000?, player, death_city, [Boston]
Picklist: How many players did Boston Red Stockings have in 2000?, player, name_first, [Red]
Picklist: How many players did Boston Red Stockings have in 2000?, player, name_last, [Boston]
Picklist: How many players did Boston Red Stockings have in 2000?, park, city, [Boston]
Picklist: How many players did Boston Red Stockings have in 2000?, college, city, [Boston]
Picklist: How many players did Boston Red Stockings have in 2000?, team, name, [Boston Red Stockings]
Picklist: How many players did Boston Red Stockings have in 2000?, team_franchise, franchise_name, [Boston Red Stockings]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'How many players did Boston Red Stockings have in 2000?'
NL tokens: [b'how', b'many', b'players', b'did', b'boston', b'red', b'stockings', b'have', b'in', b'2000', b'?']
NL tokens (original): [b'How', b'many', b'players', b'did', b'Boston', b'Red', b'Stockings', b'have', b'in', b'2000', b'?']
['[CLS]', 'how', 'many', 'players', 'did', 'boston', 'red', 'stockings', 'have', 'in', '2000', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', 'half', '[SEP]']
Target 0: b"SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2000"
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" and UNK_FIELD = 2000 select count (*)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3681/8943 [10:45<6:49:38,  4.67s/it]
NL: b'How many players did Boston Red Stockings have in 2000?'
NL tokens: [b'how', b'many', b'players', b'did', b'boston', b'red', b'stockings', b'have', b'in', b'2000', b'?']
NL tokens (original): [b'How', b'many', b'players', b'did', b'Boston', b'Red', b'Stockings', b'have', b'in', b'2000', b'?']
['[CLS]', 'how', 'many', 'players', 'did', 'boston', 'red', 'stockings', 'have', 'in', '2000', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', 'half', '[SEP]']
Target 0: b"SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2000"
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" and UNK_FIELD = 2000 select count (*)

--------------------
text:  How many players did Boston Red Stockings have in 2000?
sql:  SELECT count(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  = 'Boston Red Stockings' AND T1.year  =  2000
ground truth values:  [('team.name', 'Boston Red Stockings')]
matched values OrderedDict([(435, ('hall_of_fame.category', 'Player')), (547, ('player.birth_city', 'Boston')), (567, ('player.death_city', 'Boston')), (572, ('player.name_first', 'Red')), (577, ('player.name_last', 'Boston')), (616, ('park.city', 'Boston')), (800, ('college.city', 'Boston')), (941, ('team.name', 'Boston Red Stockings')), (978, ('team_franchise.franchise_name', 'Boston Red Stockings'))])
--------------------
Picklist: List the 3 highest salaries of the players in 2001?, hall_of_fame, category, [Player]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'List the 3 highest salaries of the players in 2001?'
NL tokens: [b'list', b'the', b'3', b'highest', b'salaries', b'of', b'the', b'players', b'in', b'2001', b'?']
NL tokens (original): [b'List', b'the', b'3', b'highest', b'salaries', b'of', b'the', b'players', b'in', b'2001', b'?']
['[CLS]', 'list', 'the', '3', 'highest', 'salaries', 'of', 'the', 'players', 'in', '2001', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', 'half', '[SEP]']
Target 0: b'SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3'
Target TF-P tokens: from UNK_TABLE where UNK_FIELD = 2001 select UNK_FIELD order by UNK_FIELD desc limit 3

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3682/8943 [10:49<6:28:16,  4.43s/it]
NL: b'List the 3 highest salaries of the players in 2001?'
NL tokens: [b'list', b'the', b'3', b'highest', b'salaries', b'of', b'the', b'players', b'in', b'2001', b'?']
NL tokens (original): [b'List', b'the', b'3', b'highest', b'salaries', b'of', b'the', b'players', b'in', b'2001', b'?']
['[CLS]', 'list', 'the', '3', 'highest', 'salaries', 'of', 'the', 'players', 'in', '2001', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', 'half', '[SEP]']
Target 0: b'SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3'
Target TF-P tokens: from UNK_TABLE where UNK_FIELD = 2001 select UNK_FIELD order by UNK_FIELD desc limit 3

--------------------
text:  List the 3 highest salaries of the players in 2001?
sql:  SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3
ground truth values:  []
matched values OrderedDict([(435, ('hall_of_fame.category', 'Player'))])
--------------------
Picklist: How much salary did the top 3 well-paid players get in 2001?, hall_of_fame, category, [Player]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'How much salary did the top 3 well-paid players get in 2001?'
NL tokens: [b'how', b'much', b'salary', b'did', b'the', b'top', b'3', b'well', b'-', b'paid', b'players', b'get', b'in', b'2001', b'?']
NL tokens (original): [b'How', b'much', b'salary', b'did', b'the', b'top', b'3', b'well', b'-', b'paid', b'players', b'get', b'in', b'2001', b'?']
['[CLS]', 'how', 'much', 'salary', 'did', 'the', 'top', '3', 'well', '-', 'paid', 'players', 'get', 'in', '2001', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '[SEP]']
Target 0: b'SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3'
Target TF-P tokens: from UNK_TABLE where UNK_FIELD = 2001 select UNK_FIELD order by UNK_FIELD desc limit 3

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3683/8943 [10:53<6:22:20,  4.36s/it]
NL: b'How much salary did the top 3 well-paid players get in 2001?'
NL tokens: [b'how', b'much', b'salary', b'did', b'the', b'top', b'3', b'well', b'-', b'paid', b'players', b'get', b'in', b'2001', b'?']
NL tokens (original): [b'How', b'much', b'salary', b'did', b'the', b'top', b'3', b'well', b'-', b'paid', b'players', b'get', b'in', b'2001', b'?']
['[CLS]', 'how', 'much', 'salary', 'did', 'the', 'top', '3', 'well', '-', 'paid', 'players', 'get', 'in', '2001', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '[SEP]']
Target 0: b'SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3'
Target TF-P tokens: from UNK_TABLE where UNK_FIELD = 2001 select UNK_FIELD order by UNK_FIELD desc limit 3

--------------------
text:  How much salary did the top 3 well-paid players get in 2001?
sql:  SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3
ground truth values:  []
matched values OrderedDict([(435, ('hall_of_fame.category', 'Player'))])
--------------------
Picklist: What were all the salary values of players in 2010 and 2001?, hall_of_fame, category, [Player]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'What were all the salary values of players in 2010 and 2001?'
NL tokens: [b'what', b'were', b'all', b'the', b'salary', b'values', b'of', b'players', b'in', b'2010', b'and', b'2001', b'?']
NL tokens (original): [b'What', b'were', b'all', b'the', b'salary', b'values', b'of', b'players', b'in', b'2010', b'and', b'2001', b'?']
['[CLS]', 'what', 'were', 'all', 'the', 'salary', 'values', 'of', 'players', 'in', '2010', 'and', '2001', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[SEP]']
Target 0: b'SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001'
Target TF-P tokens: from UNK_TABLE where UNK_FIELD = 2010 select UNK_FIELD union from UNK_TABLE where UNK_FIELD = 2001 select UNK_FIELD

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3684/8943 [10:58<6:22:00,  4.36s/it]
NL: b'What were all the salary values of players in 2010 and 2001?'
NL tokens: [b'what', b'were', b'all', b'the', b'salary', b'values', b'of', b'players', b'in', b'2010', b'and', b'2001', b'?']
NL tokens (original): [b'What', b'were', b'all', b'the', b'salary', b'values', b'of', b'players', b'in', b'2010', b'and', b'2001', b'?']
['[CLS]', 'what', 'were', 'all', 'the', 'salary', 'values', 'of', 'players', 'in', '2010', 'and', '2001', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[SEP]']
Target 0: b'SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001'
Target TF-P tokens: from UNK_TABLE where UNK_FIELD = 2010 select UNK_FIELD union from UNK_TABLE where UNK_FIELD = 2001 select UNK_FIELD

--------------------
text:  What were all the salary values of players in 2010 and 2001?
sql:  SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001
ground truth values:  []
matched values OrderedDict([(435, ('hall_of_fame.category', 'Player'))])
--------------------
Picklist: List all the salary values players received in 2010 and 2001., hall_of_fame, category, [Player]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'List all the salary values players received in 2010 and 2001.'
NL tokens: [b'list', b'all', b'the', b'salary', b'values', b'players', b'received', b'in', b'2010', b'and', b'2001', b'.']
NL tokens (original): [b'List', b'all', b'the', b'salary', b'values', b'players', b'received', b'in', b'2010', b'and', b'2001', b'.']
['[CLS]', 'list', 'all', 'the', 'salary', 'values', 'players', 'received', 'in', '2010', 'and', '2001', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', '[SEP]']
Target 0: b'SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001'
Target TF-P tokens: from UNK_TABLE where UNK_FIELD = 2010 select UNK_FIELD union from UNK_TABLE where UNK_FIELD = 2001 select UNK_FIELD

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3685/8943 [11:02<6:25:19,  4.40s/it] 41%|████      | 3686/8943 [11:06<6:17:05,  4.30s/it] 41%|████      | 3687/8943 [11:10<6:14:08,  4.27s/it]
NL: b'List all the salary values players received in 2010 and 2001.'
NL tokens: [b'list', b'all', b'the', b'salary', b'values', b'players', b'received', b'in', b'2010', b'and', b'2001', b'.']
NL tokens (original): [b'List', b'all', b'the', b'salary', b'values', b'players', b'received', b'in', b'2010', b'and', b'2001', b'.']
['[CLS]', 'list', 'all', 'the', 'salary', 'values', 'players', 'received', 'in', '2010', 'and', '2001', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', '[SEP]']
Target 0: b'SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001'
Target TF-P tokens: from UNK_TABLE where UNK_FIELD = 2010 select UNK_FIELD union from UNK_TABLE where UNK_FIELD = 2001 select UNK_FIELD

--------------------
text:  List all the salary values players received in 2010 and 2001.
sql:  SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001
ground truth values:  []
matched values OrderedDict([(435, ('hall_of_fame.category', 'Player'))])
--------------------
Picklist: In which year did the least people enter hall of fame?, player, name_last, [Hall]
--------------------
text:  In which year did the least people enter hall of fame?
sql:  SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1
ground truth values:  []
matched values OrderedDict([(569, ('player.name_last', 'Hall'))])
--------------------
Picklist: Find the year in which the least people enter hall of fame., player, name_last, [Hall]
--------------------
text:  Find the year in which the least people enter hall of fame.
sql:  SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1
ground truth values:  []
matched values OrderedDict([(569, ('player.name_last', 'Hall'))])
--------------------
Picklist: How many parks are there in Atlanta city?, player, birth_city, [Atlanta]
Picklist: How many parks are there in Atlanta city?, player, death_city, [Atlanta]
Picklist: How many parks are there in Atlanta city?, player, death_city, [Park]
Picklist: How many parks are there in Atlanta city?, player, name_last, [Parks]
Picklist: How many parks are there in Atlanta city?, park, city, [Atlanta]
Picklist: How many parks are there in Atlanta city?, college, city, [Atlanta]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'How many parks are there in Atlanta city?'
NL tokens: [b'how', b'many', b'parks', b'are', b'there', b'in', b'atlanta', b'city', b'?']
NL tokens (original): [b'How', b'many', b'parks', b'are', b'there', b'in', b'Atlanta', b'city', b'?']
['[CLS]', 'how', 'many', 'parks', 'are', 'there', 'in', 'atlanta', 'city', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', 'half', '[unused51]', 'player', 'id', '[SEP]']
Target 0: b"SELECT count(*) FROM park WHERE city = 'Atlanta'"
Target TF-P tokens: from UNK_TABLE where UNK_FIELD = "Atlanta" select count (*)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████      | 3688/8943 [11:14<5:54:00,  4.04s/it]
NL: b'How many parks are there in Atlanta city?'
NL tokens: [b'how', b'many', b'parks', b'are', b'there', b'in', b'atlanta', b'city', b'?']
NL tokens (original): [b'How', b'many', b'parks', b'are', b'there', b'in', b'Atlanta', b'city', b'?']
['[CLS]', 'how', 'many', 'parks', 'are', 'there', 'in', 'atlanta', 'city', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', 'half', '[unused51]', 'player', 'id', '[SEP]']
Target 0: b"SELECT count(*) FROM park WHERE city = 'Atlanta'"
Target TF-P tokens: from UNK_TABLE where UNK_FIELD = "Atlanta" select count (*)

--------------------
text:  How many parks are there in Atlanta city?
sql:  SELECT count(*) FROM park WHERE city = 'Atlanta'
ground truth values:  [('park.city', 'Atlanta')]
matched values OrderedDict([(545, ('player.birth_city', 'Atlanta')), (565, ('player.death_city', 'Atlanta')), (567, ('player.death_city', 'Park')), (575, ('player.name_last', 'Parks')), (614, ('park.city', 'Atlanta')), (798, ('college.city', 'Atlanta'))])
--------------------
Picklist: How many parks does Atlanta city have?, player, birth_city, [Atlanta]
Picklist: How many parks does Atlanta city have?, player, death_city, [Atlanta]
Picklist: How many parks does Atlanta city have?, player, death_city, [Park]
Picklist: How many parks does Atlanta city have?, player, name_last, [Parks]
Picklist: How many parks does Atlanta city have?, park, city, [Atlanta]
Picklist: How many parks does Atlanta city have?, college, city, [Atlanta]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'How many parks does Atlanta city have?'
NL tokens: [b'how', b'many', b'parks', b'does', b'atlanta', b'city', b'have', b'?']
NL tokens (original): [b'How', b'many', b'parks', b'does', b'Atlanta', b'city', b'have', b'?']
['[CLS]', 'how', 'many', 'parks', 'does', 'atlanta', 'city', 'have', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', 'half', '[unused51]', 'player', 'id', '[unused51]', 'year', '[SEP]']
Target 0: b"SELECT count(*) FROM park WHERE city = 'Atlanta'"
Target TF-P tokens: from UNK_TABLE where UNK_FIELD = "Atlanta" select count (*)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████▏     | 3689/8943 [11:17<5:39:30,  3.88s/it]
NL: b'How many parks does Atlanta city have?'
NL tokens: [b'how', b'many', b'parks', b'does', b'atlanta', b'city', b'have', b'?']
NL tokens (original): [b'How', b'many', b'parks', b'does', b'Atlanta', b'city', b'have', b'?']
['[CLS]', 'how', 'many', 'parks', 'does', 'atlanta', 'city', 'have', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', 'half', '[unused51]', 'player', 'id', '[unused51]', 'year', '[SEP]']
Target 0: b"SELECT count(*) FROM park WHERE city = 'Atlanta'"
Target TF-P tokens: from UNK_TABLE where UNK_FIELD = "Atlanta" select count (*)

--------------------
text:  How many parks does Atlanta city have?
sql:  SELECT count(*) FROM park WHERE city = 'Atlanta'
ground truth values:  [('park.city', 'Atlanta')]
matched values OrderedDict([(545, ('player.birth_city', 'Atlanta')), (565, ('player.death_city', 'Atlanta')), (567, ('player.death_city', 'Park')), (575, ('player.name_last', 'Parks')), (614, ('park.city', 'Atlanta')), (798, ('college.city', 'Atlanta'))])
--------------------
Picklist: How many games were played in park "Columbia Park" in 1907?, player_college, college_id, [columbia]
Picklist: How many games were played in park "Columbia Park" in 1907?, player, birth_city, [Columbiana]
Picklist: How many games were played in park "Columbia Park" in 1907?, player, death_city, [Columbia]
Picklist: How many games were played in park "Columbia Park" in 1907?, player, death_city, [Park]
Picklist: How many games were played in park "Columbia Park" in 1907?, player, name_first, [Park]
Picklist: How many games were played in park "Columbia Park" in 1907?, park, park_name, [Columbia Park]
Picklist: How many games were played in park "Columbia Park" in 1907?, college, college_id, [columbia]
Picklist: How many games were played in park "Columbia Park" in 1907?, college, city, [Columbia]
Picklist: How many games were played in park "Columbia Park" in 1907?, team, park, [Columbia Park]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'How many games were played in park "Columbia Park" in 1907?'
NL tokens: [b'how', b'many', b'games', b'were', b'played', b'in', b'park', b'"', b'columbia', b'park', b'"', b'in', b'1907', b'?']
NL tokens (original): [b'How', b'many', b'games', b'were', b'played', b'in', b'park', b'"', b'Columbia', b'Park', b'"', b'in', b'1907', b'?']
['[CLS]', 'how', 'many', 'games', 'were', 'played', 'in', 'park', '"', 'columbia', 'park', '"', 'in', '1907', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused49]', 'columbia', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[SEP]']
Target 0: b"SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park'"
Target TF-P tokens: from home_game join UNK_TABLE on home_game.park_id = UNK_FIELD where home_game.year = 1907 and UNK_FIELD = "Columbia park" select count (*)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████▏     | 3690/8943 [11:22<5:52:04,  4.02s/it]
NL: b'How many games were played in park "Columbia Park" in 1907?'
NL tokens: [b'how', b'many', b'games', b'were', b'played', b'in', b'park', b'"', b'columbia', b'park', b'"', b'in', b'1907', b'?']
NL tokens (original): [b'How', b'many', b'games', b'were', b'played', b'in', b'park', b'"', b'Columbia', b'Park', b'"', b'in', b'1907', b'?']
['[CLS]', 'how', 'many', 'games', 'were', 'played', 'in', 'park', '"', 'columbia', 'park', '"', 'in', '1907', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused49]', 'columbia', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[SEP]']
Target 0: b"SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park'"
Target TF-P tokens: from home_game join UNK_TABLE on home_game.park_id = UNK_FIELD where home_game.year = 1907 and UNK_FIELD = "Columbia park" select count (*)

--------------------
text:  How many games were played in park "Columbia Park" in 1907?
sql:  SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park'
ground truth values:  [('park.park_name', 'Columbia Park')]
matched values OrderedDict([(297, ('player_college.college_id', 'columbia')), (547, ('player.birth_city', 'Columbiana')), (568, ('player.death_city', 'Columbia')), (570, ('player.death_city', 'Park')), (575, ('player.name_first', 'Park')), (612, ('park.park_name', 'Columbia Park')), (797, ('college.college_id', 'columbia')), (804, ('college.city', 'Columbia')), (947, ('team.park', 'Columbia Park'))])
--------------------
Picklist: Count the number of games taken place in park "Columbia Park" in 1907., player_college, college_id, [columbia]
Picklist: Count the number of games taken place in park "Columbia Park" in 1907., player, birth_city, [Columbiana]
Picklist: Count the number of games taken place in park "Columbia Park" in 1907., player, death_city, [Columbia]
Picklist: Count the number of games taken place in park "Columbia Park" in 1907., player, death_city, [Park]
Picklist: Count the number of games taken place in park "Columbia Park" in 1907., player, name_first, [Park]
Picklist: Count the number of games taken place in park "Columbia Park" in 1907., player, name_first, [Count]
Picklist: Count the number of games taken place in park "Columbia Park" in 1907., park, park_name, [Columbia Park]
Picklist: Count the number of games taken place in park "Columbia Park" in 1907., college, college_id, [columbia]
Picklist: Count the number of games taken place in park "Columbia Park" in 1907., college, city, [Columbia]
Picklist: Count the number of games taken place in park "Columbia Park" in 1907., team, park, [Columbia Park]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'Count the number of games taken place in park "Columbia Park" in 1907.'
NL tokens: [b'count', b'the', b'number', b'of', b'games', b'taken', b'place', b'in', b'park', b'"', b'columbia', b'park', b'"', b'in', b'1907', b'.']
NL tokens (original): [b'Count', b'the', b'number', b'of', b'games', b'taken', b'place', b'in', b'park', b'"', b'Columbia', b'Park', b'"', b'in', b'1907', b'.']
['[CLS]', 'count', 'the', 'number', 'of', 'games', 'taken', 'place', 'in', 'park', '"', 'columbia', 'park', '"', 'in', '1907', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused49]', 'columbia', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', '[SEP]']
Target 0: b"SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park'"
Target TF-P tokens: from home_game join UNK_TABLE on home_game.park_id = UNK_FIELD where home_game.year = 1907 and UNK_FIELD = "Columbia park" select count (*)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████▏     | 3691/8943 [11:26<6:07:26,  4.20s/it]
NL: b'Count the number of games taken place in park "Columbia Park" in 1907.'
NL tokens: [b'count', b'the', b'number', b'of', b'games', b'taken', b'place', b'in', b'park', b'"', b'columbia', b'park', b'"', b'in', b'1907', b'.']
NL tokens (original): [b'Count', b'the', b'number', b'of', b'games', b'taken', b'place', b'in', b'park', b'"', b'Columbia', b'Park', b'"', b'in', b'1907', b'.']
['[CLS]', 'count', 'the', 'number', 'of', 'games', 'taken', 'place', 'in', 'park', '"', 'columbia', 'park', '"', 'in', '1907', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused49]', 'columbia', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', '[SEP]']
Target 0: b"SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park'"
Target TF-P tokens: from home_game join UNK_TABLE on home_game.park_id = UNK_FIELD where home_game.year = 1907 and UNK_FIELD = "Columbia park" select count (*)

--------------------
text:  Count the number of games taken place in park "Columbia Park" in 1907.
sql:  SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park'
ground truth values:  [('park.park_name', 'Columbia Park')]
matched values OrderedDict([(297, ('player_college.college_id', 'columbia')), (547, ('player.birth_city', 'Columbiana')), (568, ('player.death_city', 'Columbia')), (570, ('player.death_city', 'Park')), (575, ('player.name_first', 'Park')), (577, ('player.name_first', 'Count')), (614, ('park.park_name', 'Columbia Park')), (799, ('college.college_id', 'columbia')), (806, ('college.city', 'Columbia')), (949, ('team.park', 'Columbia Park'))])
--------------------
Picklist: How many games were played in city Atlanta in 2000?, player, birth_city, [Atlanta]
Picklist: How many games were played in city Atlanta in 2000?, player, death_city, [Atlanta]
Picklist: How many games were played in city Atlanta in 2000?, park, city, [Atlanta]
Picklist: How many games were played in city Atlanta in 2000?, college, city, [Atlanta]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'How many games were played in city Atlanta in 2000?'
NL tokens: [b'how', b'many', b'games', b'were', b'played', b'in', b'city', b'atlanta', b'in', b'2000', b'?']
NL tokens (original): [b'How', b'many', b'games', b'were', b'played', b'in', b'city', b'Atlanta', b'in', b'2000', b'?']
['[CLS]', 'how', 'many', 'games', 'were', 'played', 'in', 'city', 'atlanta', 'in', '2000', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', 'half', '[unused51]', 'player', '[SEP]']
Target 0: b"SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta'"
Target TF-P tokens: from home_game join UNK_TABLE on home_game.park_id = UNK_FIELD where home_game.year = 2000 and UNK_FIELD = "Atlanta" select count (*)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████▏     | 3692/8943 [11:30<6:02:15,  4.14s/it]
NL: b'How many games were played in city Atlanta in 2000?'
NL tokens: [b'how', b'many', b'games', b'were', b'played', b'in', b'city', b'atlanta', b'in', b'2000', b'?']
NL tokens (original): [b'How', b'many', b'games', b'were', b'played', b'in', b'city', b'Atlanta', b'in', b'2000', b'?']
['[CLS]', 'how', 'many', 'games', 'were', 'played', 'in', 'city', 'atlanta', 'in', '2000', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', 'half', '[unused51]', 'player', '[SEP]']
Target 0: b"SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta'"
Target TF-P tokens: from home_game join UNK_TABLE on home_game.park_id = UNK_FIELD where home_game.year = 2000 and UNK_FIELD = "Atlanta" select count (*)

--------------------
text:  How many games were played in city Atlanta in 2000?
sql:  SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta'
ground truth values:  [('park.city', 'Atlanta')]
matched values OrderedDict([(545, ('player.birth_city', 'Atlanta')), (565, ('player.death_city', 'Atlanta')), (610, ('park.city', 'Atlanta')), (794, ('college.city', 'Atlanta'))])
--------------------
Picklist: Find the number of games taken place in city Atlanta in 2000., player, birth_city, [Atlanta]
Picklist: Find the number of games taken place in city Atlanta in 2000., player, death_city, [Atlanta]
Picklist: Find the number of games taken place in city Atlanta in 2000., park, city, [Atlanta]
Picklist: Find the number of games taken place in city Atlanta in 2000., college, city, [Atlanta]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'Find the number of games taken place in city Atlanta in 2000.'
NL tokens: [b'find', b'the', b'number', b'of', b'games', b'taken', b'place', b'in', b'city', b'atlanta', b'in', b'2000', b'.']
NL tokens (original): [b'Find', b'the', b'number', b'of', b'games', b'taken', b'place', b'in', b'city', b'Atlanta', b'in', b'2000', b'.']
['[CLS]', 'find', 'the', 'number', 'of', 'games', 'taken', 'place', 'in', 'city', 'atlanta', 'in', '2000', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', 'half', '[SEP]']
Target 0: b"SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta'"
Target TF-P tokens: from home_game join UNK_TABLE on home_game.park_id = UNK_FIELD where home_game.year = 2000 and UNK_FIELD = "Atlanta" select count (*)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████▏     | 3693/8943 [11:35<6:05:19,  4.18s/it]
NL: b'Find the number of games taken place in city Atlanta in 2000.'
NL tokens: [b'find', b'the', b'number', b'of', b'games', b'taken', b'place', b'in', b'city', b'atlanta', b'in', b'2000', b'.']
NL tokens (original): [b'Find', b'the', b'number', b'of', b'games', b'taken', b'place', b'in', b'city', b'Atlanta', b'in', b'2000', b'.']
['[CLS]', 'find', 'the', 'number', 'of', 'games', 'taken', 'place', 'in', 'city', 'atlanta', 'in', '2000', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', 'half', '[SEP]']
Target 0: b"SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta'"
Target TF-P tokens: from home_game join UNK_TABLE on home_game.park_id = UNK_FIELD where home_game.year = 2000 and UNK_FIELD = "Atlanta" select count (*)

--------------------
text:  Find the number of games taken place in city Atlanta in 2000.
sql:  SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta'
ground truth values:  [('park.city', 'Atlanta')]
matched values OrderedDict([(545, ('player.birth_city', 'Atlanta')), (565, ('player.death_city', 'Atlanta')), (610, ('park.city', 'Atlanta')), (794, ('college.city', 'Atlanta'))])
--------------------
Picklist: What is the total home game attendance of team Boston Red Stockings from 2000 to 2010?, player, birth_city, [Boston]
Picklist: What is the total home game attendance of team Boston Red Stockings from 2000 to 2010?, player, birth_city, [Homer]
Picklist: What is the total home game attendance of team Boston Red Stockings from 2000 to 2010?, player, death_city, [Boston]
Picklist: What is the total home game attendance of team Boston Red Stockings from 2000 to 2010?, player, death_city, [Homer]
Picklist: What is the total home game attendance of team Boston Red Stockings from 2000 to 2010?, player, name_first, [Red]
Picklist: What is the total home game attendance of team Boston Red Stockings from 2000 to 2010?, player, name_last, [Boston]
Picklist: What is the total home game attendance of team Boston Red Stockings from 2000 to 2010?, park, city, [Boston]
Picklist: What is the total home game attendance of team Boston Red Stockings from 2000 to 2010?, college, city, [Boston]
Picklist: What is the total home game attendance of team Boston Red Stockings from 2000 to 2010?, team, name, [Boston Red Stockings]
Picklist: What is the total home game attendance of team Boston Red Stockings from 2000 to 2010?, team_franchise, franchise_name, [Boston Red Stockings]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'What is the total home game attendance of team Boston Red Stockings from 2000 to 2010?'
NL tokens: [b'what', b'is', b'the', b'total', b'home', b'game', b'attendance', b'of', b'team', b'boston', b'red', b'stockings', b'from', b'2000', b'to', b'2010', b'?']
NL tokens (original): [b'What', b'is', b'the', b'total', b'home', b'game', b'attendance', b'of', b'team', b'Boston', b'Red', b'Stockings', b'from', b'2000', b'to', b'2010', b'?']
['[CLS]', 'what', 'is', 'the', 'total', 'home', 'game', 'attendance', 'of', 'team', 'boston', 'red', 'stockings', 'from', '2000', 'to', '2010', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '[SEP]']
Target 0: b"SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010"
Target TF-P tokens: from home_game join UNK_TABLE on home_game.team_id = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" and home_game.year between 2000 and 2010 select sum (home_game.attendance)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████▏     | 3694/8943 [11:40<6:39:31,  4.57s/it]
NL: b'What is the total home game attendance of team Boston Red Stockings from 2000 to 2010?'
NL tokens: [b'what', b'is', b'the', b'total', b'home', b'game', b'attendance', b'of', b'team', b'boston', b'red', b'stockings', b'from', b'2000', b'to', b'2010', b'?']
NL tokens (original): [b'What', b'is', b'the', b'total', b'home', b'game', b'attendance', b'of', b'team', b'Boston', b'Red', b'Stockings', b'from', b'2000', b'to', b'2010', b'?']
['[CLS]', 'what', 'is', 'the', 'total', 'home', 'game', 'attendance', 'of', 'team', 'boston', 'red', 'stockings', 'from', '2000', 'to', '2010', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '[SEP]']
Target 0: b"SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010"
Target TF-P tokens: from home_game join UNK_TABLE on home_game.team_id = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" and home_game.year between 2000 and 2010 select sum (home_game.attendance)

--------------------
text:  What is the total home game attendance of team Boston Red Stockings from 2000 to 2010?
sql:  SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010
ground truth values:  [('team.name', 'Boston Red Stockings')]
matched values OrderedDict([(545, ('player.birth_city', 'Boston')), (547, ('player.birth_city', 'Homer')), (567, ('player.death_city', 'Boston')), (569, ('player.death_city', 'Homer')), (574, ('player.name_first', 'Red')), (579, ('player.name_last', 'Boston')), (618, ('park.city', 'Boston')), (802, ('college.city', 'Boston')), (943, ('team.name', 'Boston Red Stockings')), (980, ('team_franchise.franchise_name', 'Boston Red Stockings'))])
--------------------
Picklist: How many games in total did team Boston Red Stockings attend from 2000 to 2010?, player, birth_city, [Boston]
Picklist: How many games in total did team Boston Red Stockings attend from 2000 to 2010?, player, death_city, [Boston]
Picklist: How many games in total did team Boston Red Stockings attend from 2000 to 2010?, player, name_first, [Red]
Picklist: How many games in total did team Boston Red Stockings attend from 2000 to 2010?, player, name_last, [Boston]
Picklist: How many games in total did team Boston Red Stockings attend from 2000 to 2010?, park, city, [Boston]
Picklist: How many games in total did team Boston Red Stockings attend from 2000 to 2010?, college, city, [Boston]
Picklist: How many games in total did team Boston Red Stockings attend from 2000 to 2010?, team, name, [Boston Red Stockings]
Picklist: How many games in total did team Boston Red Stockings attend from 2000 to 2010?, team_franchise, franchise_name, [Boston Red Stockings]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'How many games in total did team Boston Red Stockings attend from 2000 to 2010?'
NL tokens: [b'how', b'many', b'games', b'in', b'total', b'did', b'team', b'boston', b'red', b'stockings', b'attend', b'from', b'2000', b'to', b'2010', b'?']
NL tokens (original): [b'How', b'many', b'games', b'in', b'total', b'did', b'team', b'Boston', b'Red', b'Stockings', b'attend', b'from', b'2000', b'to', b'2010', b'?']
['[CLS]', 'how', 'many', 'games', 'in', 'total', 'did', 'team', 'boston', 'red', 'stockings', 'attend', 'from', '2000', 'to', '2010', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[SEP]']
Target 0: b"SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010"
Target TF-P tokens: from home_game join UNK_TABLE on home_game.team_id = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" and home_game.year between 2000 and 2010 select sum (home_game.attendance)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████▏     | 3695/8943 [11:45<6:58:21,  4.78s/it]
NL: b'How many games in total did team Boston Red Stockings attend from 2000 to 2010?'
NL tokens: [b'how', b'many', b'games', b'in', b'total', b'did', b'team', b'boston', b'red', b'stockings', b'attend', b'from', b'2000', b'to', b'2010', b'?']
NL tokens (original): [b'How', b'many', b'games', b'in', b'total', b'did', b'team', b'Boston', b'Red', b'Stockings', b'attend', b'from', b'2000', b'to', b'2010', b'?']
['[CLS]', 'how', 'many', 'games', 'in', 'total', 'did', 'team', 'boston', 'red', 'stockings', 'attend', 'from', '2000', 'to', '2010', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[SEP]']
Target 0: b"SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010"
Target TF-P tokens: from home_game join UNK_TABLE on home_game.team_id = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" and home_game.year between 2000 and 2010 select sum (home_game.attendance)

--------------------
text:  How many games in total did team Boston Red Stockings attend from 2000 to 2010?
sql:  SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010
ground truth values:  [('team.name', 'Boston Red Stockings')]
matched values OrderedDict([(545, ('player.birth_city', 'Boston')), (565, ('player.death_city', 'Boston')), (570, ('player.name_first', 'Red')), (575, ('player.name_last', 'Boston')), (614, ('park.city', 'Boston')), (798, ('college.city', 'Boston')), (939, ('team.name', 'Boston Red Stockings')), (976, ('team_franchise.franchise_name', 'Boston Red Stockings'))])
--------------------
Picklist: How much did the the player with first name Len and last name Barker earn between 1985 to 1990 in total?, hall_of_fame, category, [Player]
Picklist: How much did the the player with first name Len and last name Barker earn between 1985 to 1990 in total?, player, birth_city, [Leon]
Picklist: How much did the the player with first name Len and last name Barker earn between 1985 to 1990 in total?, player, death_city, [Leon]
Picklist: How much did the the player with first name Len and last name Barker earn between 1985 to 1990 in total?, player, name_first, [Len]
Picklist: How much did the the player with first name Len and last name Barker earn between 1985 to 1990 in total?, player, name_last, [Barker]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'How much did the the player with first name Len and last name Barker earn between 1985 to 1990 in total?'
NL tokens: [b'how', b'much', b'did', b'the', b'the', b'player', b'with', b'first', b'name', b'len', b'and', b'last', b'name', b'barker', b'earn', b'between', b'1985', b'to', b'1990', b'in', b'total', b'?']
NL tokens (original): [b'How', b'much', b'did', b'the', b'the', b'player', b'with', b'first', b'name', b'Len', b'and', b'last', b'name', b'Barker', b'earn', b'between', b'1985', b'to', b'1990', b'in', b'total', b'?']
['[CLS]', 'how', 'much', 'did', 'the', 'the', 'player', 'with', 'first', 'name', 'len', 'and', 'last', 'name', 'barker', 'earn', 'between', '1985', 'to', '1990', 'in', 'total', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[SEP]']
Target 0: b"SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first  =  'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990"
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Len" and UNK_FIELD = "Barker" and UNK_FIELD between 1985 and 1990 select sum (UNK_FIELD)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████▏     | 3696/8943 [11:52<7:39:26,  5.25s/it]
NL: b'How much did the the player with first name Len and last name Barker earn between 1985 to 1990 in total?'
NL tokens: [b'how', b'much', b'did', b'the', b'the', b'player', b'with', b'first', b'name', b'len', b'and', b'last', b'name', b'barker', b'earn', b'between', b'1985', b'to', b'1990', b'in', b'total', b'?']
NL tokens (original): [b'How', b'much', b'did', b'the', b'the', b'player', b'with', b'first', b'name', b'Len', b'and', b'last', b'name', b'Barker', b'earn', b'between', b'1985', b'to', b'1990', b'in', b'total', b'?']
['[CLS]', 'how', 'much', 'did', 'the', 'the', 'player', 'with', 'first', 'name', 'len', 'and', 'last', 'name', 'barker', 'earn', 'between', '1985', 'to', '1990', 'in', 'total', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[SEP]']
Target 0: b"SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first  =  'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990"
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Len" and UNK_FIELD = "Barker" and UNK_FIELD between 1985 and 1990 select sum (UNK_FIELD)

--------------------
text:  How much did the the player with first name Len and last name Barker earn between 1985 to 1990 in total?
sql:  SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first  =  'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990
ground truth values:  [('player.name_first', 'Len'), ('player.name_last', 'Barker')]
matched values OrderedDict([(435, ('hall_of_fame.category', 'Player')), (547, ('player.birth_city', 'Leon')), (567, ('player.death_city', 'Leon')), (572, ('player.name_first', 'Len')), (577, ('player.name_last', 'Barker'))])
--------------------
Picklist: Compute the total salary that the player with first name Len and last name Barker received between 1985 to 1990., hall_of_fame, category, [Player]
Picklist: Compute the total salary that the player with first name Len and last name Barker received between 1985 to 1990., player, birth_city, [Leon]
Picklist: Compute the total salary that the player with first name Len and last name Barker received between 1985 to 1990., player, death_city, [Leon]
Picklist: Compute the total salary that the player with first name Len and last name Barker received between 1985 to 1990., player, name_first, [Len]
Picklist: Compute the total salary that the player with first name Len and last name Barker received between 1985 to 1990., player, name_last, [Barker]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'Compute the total salary that the player with first name Len and last name Barker received between 1985 to 1990.'
NL tokens: [b'compute', b'the', b'total', b'salary', b'that', b'the', b'player', b'with', b'first', b'name', b'len', b'and', b'last', b'name', b'barker', b'received', b'between', b'1985', b'to', b'1990', b'.']
NL tokens (original): [b'Compute', b'the', b'total', b'salary', b'that', b'the', b'player', b'with', b'first', b'name', b'Len', b'and', b'last', b'name', b'Barker', b'received', b'between', b'1985', b'to', b'1990', b'.']
['[CLS]', 'compute', 'the', 'total', 'salary', 'that', 'the', 'player', 'with', 'first', 'name', 'len', 'and', 'last', 'name', 'barker', 'received', 'between', '1985', 'to', '1990', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[SEP]']
Target 0: b"SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first  =  'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990"
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Len" and UNK_FIELD = "Barker" and UNK_FIELD between 1985 and 1990 select sum (UNK_FIELD)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████▏     | 3697/8943 [11:58<8:13:17,  5.64s/it]
NL: b'Compute the total salary that the player with first name Len and last name Barker received between 1985 to 1990.'
NL tokens: [b'compute', b'the', b'total', b'salary', b'that', b'the', b'player', b'with', b'first', b'name', b'len', b'and', b'last', b'name', b'barker', b'received', b'between', b'1985', b'to', b'1990', b'.']
NL tokens (original): [b'Compute', b'the', b'total', b'salary', b'that', b'the', b'player', b'with', b'first', b'name', b'Len', b'and', b'last', b'name', b'Barker', b'received', b'between', b'1985', b'to', b'1990', b'.']
['[CLS]', 'compute', 'the', 'total', 'salary', 'that', 'the', 'player', 'with', 'first', 'name', 'len', 'and', 'last', 'name', 'barker', 'received', 'between', '1985', 'to', '1990', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[SEP]']
Target 0: b"SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first  =  'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990"
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = "Len" and UNK_FIELD = "Barker" and UNK_FIELD between 1985 and 1990 select sum (UNK_FIELD)

--------------------
text:  Compute the total salary that the player with first name Len and last name Barker received between 1985 to 1990.
sql:  SELECT sum(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first  =  'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990
ground truth values:  [('player.name_first', 'Len'), ('player.name_last', 'Barker')]
matched values OrderedDict([(435, ('hall_of_fame.category', 'Player')), (547, ('player.birth_city', 'Leon')), (567, ('player.death_city', 'Leon')), (572, ('player.name_first', 'Len')), (577, ('player.name_last', 'Barker'))])
--------------------
Picklist: List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007., player_college, college_id, [washington]
Picklist: List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007., hall_of_fame, category, [Player]
Picklist: List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007., player, birth_city, [Washington]
Picklist: List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007., player, death_city, [Washington]
Picklist: List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007., player, name_first, [Washington]
Picklist: List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007., player, name_last, [Washington]
Picklist: List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007., park, city, [Washington]
Picklist: List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007., college, college_id, [washington]
Picklist: List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007., college, city, [Washington]
Picklist: List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007., team, name, [Washington Nationals]
Picklist: List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007., team_franchise, franchise_name, [Washington Nationals]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b"List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007."
NL tokens: [b'list', b'players', b"'", b'first', b'name', b'and', b'last', b'name', b'who', b'received', b'salary', b'from', b'team', b'washington', b'nationals', b'in', b'both', b'2005', b'and', b'2007', b'.']
NL tokens (original): [b'List', b'players', b"'", b'first', b'name', b'and', b'last', b'name', b'who', b'received', b'salary', b'from', b'team', b'Washington', b'Nationals', b'in', b'both', b'2005', b'and', b'2007', b'.']
['[CLS]', 'list', 'players', "'", 'first', 'name', 'and', 'last', 'name', 'who', 'received', 'salary', 'from', 'team', 'washington', 'nationals', 'in', 'both', '2005', 'and', '2007', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused49]', 'washington', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[SEP]']
Target 0: b"SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'"
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = 2005 and UNK_FIELD = "Washington Nationals" select UNK_FIELD , UNK_FIELD intersect from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = 2007 and UNK_FIELD = "Washington Nationals" select UNK_FIELD , UNK_FIELD

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████▏     | 3698/8943 [12:05<8:38:22,  5.93s/it]
NL: b"List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007."
NL tokens: [b'list', b'players', b"'", b'first', b'name', b'and', b'last', b'name', b'who', b'received', b'salary', b'from', b'team', b'washington', b'nationals', b'in', b'both', b'2005', b'and', b'2007', b'.']
NL tokens (original): [b'List', b'players', b"'", b'first', b'name', b'and', b'last', b'name', b'who', b'received', b'salary', b'from', b'team', b'Washington', b'Nationals', b'in', b'both', b'2005', b'and', b'2007', b'.']
['[CLS]', 'list', 'players', "'", 'first', 'name', 'and', 'last', 'name', 'who', 'received', 'salary', 'from', 'team', 'washington', 'nationals', 'in', 'both', '2005', 'and', '2007', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused49]', 'washington', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[SEP]']
Target 0: b"SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'"
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = 2005 and UNK_FIELD = "Washington Nationals" select UNK_FIELD , UNK_FIELD intersect from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = 2007 and UNK_FIELD = "Washington Nationals" select UNK_FIELD , UNK_FIELD

--------------------
text:  List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007.
sql:  SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'
ground truth values:  [('team.name', 'Washington Nationals'), ('team.name', 'Washington Nationals')]
matched values OrderedDict([(297, ('player_college.college_id', 'washington')), (437, ('hall_of_fame.category', 'Player')), (549, ('player.birth_city', 'Washington')), (569, ('player.death_city', 'Washington')), (574, ('player.name_first', 'Washington')), (579, ('player.name_last', 'Washington')), (618, ('park.city', 'Washington')), (797, ('college.college_id', 'washington')), (804, ('college.city', 'Washington')), (945, ('team.name', 'Washington Nationals')), (981, ('team_franchise.franchise_name', 'Washington Nationals'))])
--------------------
Picklist: What are the first name and last name of the players who were paid salary by team Washington Nationals in both 2005 and 2007?, player_college, college_id, [washington]
Picklist: What are the first name and last name of the players who were paid salary by team Washington Nationals in both 2005 and 2007?, hall_of_fame, category, [Player]
Picklist: What are the first name and last name of the players who were paid salary by team Washington Nationals in both 2005 and 2007?, player, birth_city, [Washington]
Picklist: What are the first name and last name of the players who were paid salary by team Washington Nationals in both 2005 and 2007?, player, death_city, [Washington]
Picklist: What are the first name and last name of the players who were paid salary by team Washington Nationals in both 2005 and 2007?, player, name_first, [Washington]
Picklist: What are the first name and last name of the players who were paid salary by team Washington Nationals in both 2005 and 2007?, player, name_last, [Washington]
Picklist: What are the first name and last name of the players who were paid salary by team Washington Nationals in both 2005 and 2007?, park, city, [Washington]
Picklist: What are the first name and last name of the players who were paid salary by team Washington Nationals in both 2005 and 2007?, college, college_id, [washington]
Picklist: What are the first name and last name of the players who were paid salary by team Washington Nationals in both 2005 and 2007?, college, city, [Washington]
Picklist: What are the first name and last name of the players who were paid salary by team Washington Nationals in both 2005 and 2007?, team, name, [Washington Nationals]
Picklist: What are the first name and last name of the players who were paid salary by team Washington Nationals in both 2005 and 2007?, team_franchise, franchise_name, [Washington Nationals]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'What are the first name and last name of the players who were paid salary by team Washington Nationals in both 2005 and 2007?'
NL tokens: [b'what', b'are', b'the', b'first', b'name', b'and', b'last', b'name', b'of', b'the', b'players', b'who', b'were', b'paid', b'salary', b'by', b'team', b'washington', b'nationals', b'in', b'both', b'2005', b'and', b'2007', b'?']
NL tokens (original): [b'What', b'are', b'the', b'first', b'name', b'and', b'last', b'name', b'of', b'the', b'players', b'who', b'were', b'paid', b'salary', b'by', b'team', b'Washington', b'Nationals', b'in', b'both', b'2005', b'and', b'2007', b'?']
['[CLS]', 'what', 'are', 'the', 'first', 'name', 'and', 'last', 'name', 'of', 'the', 'players', 'who', 'were', 'paid', 'salary', 'by', 'team', 'washington', 'nationals', 'in', 'both', '2005', 'and', '2007', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused49]', 'washington', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[SEP]']
Target 0: b"SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'"
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = 2005 and UNK_FIELD = "Washington Nationals" select UNK_FIELD , UNK_FIELD intersect from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = 2007 and UNK_FIELD = "Washington Nationals" select UNK_FIELD , UNK_FIELD

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████▏     | 3699/8943 [12:12<9:11:47,  6.31s/it]
NL: b'What are the first name and last name of the players who were paid salary by team Washington Nationals in both 2005 and 2007?'
NL tokens: [b'what', b'are', b'the', b'first', b'name', b'and', b'last', b'name', b'of', b'the', b'players', b'who', b'were', b'paid', b'salary', b'by', b'team', b'washington', b'nationals', b'in', b'both', b'2005', b'and', b'2007', b'?']
NL tokens (original): [b'What', b'are', b'the', b'first', b'name', b'and', b'last', b'name', b'of', b'the', b'players', b'who', b'were', b'paid', b'salary', b'by', b'team', b'Washington', b'Nationals', b'in', b'both', b'2005', b'and', b'2007', b'?']
['[CLS]', 'what', 'are', 'the', 'first', 'name', 'and', 'last', 'name', 'of', 'the', 'players', 'who', 'were', 'paid', 'salary', 'by', 'team', 'washington', 'nationals', 'in', 'both', '2005', 'and', '2007', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused49]', 'washington', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused49]', 'player', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[SEP]']
Target 0: b"SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'"
Target TF-P tokens: from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = 2005 and UNK_FIELD = "Washington Nationals" select UNK_FIELD , UNK_FIELD intersect from UNK_TABLE join UNK_TABLE on UNK_FIELD = UNK_FIELD join UNK_TABLE on UNK_FIELD = UNK_FIELD where UNK_FIELD = 2007 and UNK_FIELD = "Washington Nationals" select UNK_FIELD , UNK_FIELD

--------------------
text:  What are the first name and last name of the players who were paid salary by team Washington Nationals in both 2005 and 2007?
sql:  SELECT T2.name_first ,  T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first , T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'
ground truth values:  [('team.name', 'Washington Nationals'), ('team.name', 'Washington Nationals')]
matched values OrderedDict([(297, ('player_college.college_id', 'washington')), (437, ('hall_of_fame.category', 'Player')), (549, ('player.birth_city', 'Washington')), (569, ('player.death_city', 'Washington')), (574, ('player.name_first', 'Washington')), (579, ('player.name_last', 'Washington')), (618, ('park.city', 'Washington')), (797, ('college.college_id', 'washington')), (804, ('college.city', 'Washington')), (945, ('team.name', 'Washington Nationals')), (981, ('team_franchise.franchise_name', 'Washington Nationals'))])
--------------------
Picklist: How many home games did the team Boston Red Stockings play from 1990 to 2000 in total?, player, birth_city, [Boston]
Picklist: How many home games did the team Boston Red Stockings play from 1990 to 2000 in total?, player, birth_city, [Homer]
Picklist: How many home games did the team Boston Red Stockings play from 1990 to 2000 in total?, player, death_city, [Boston]
Picklist: How many home games did the team Boston Red Stockings play from 1990 to 2000 in total?, player, death_city, [Homer]
Picklist: How many home games did the team Boston Red Stockings play from 1990 to 2000 in total?, player, name_first, [Red]
Picklist: How many home games did the team Boston Red Stockings play from 1990 to 2000 in total?, player, name_last, [Boston]
Picklist: How many home games did the team Boston Red Stockings play from 1990 to 2000 in total?, park, city, [Boston]
Picklist: How many home games did the team Boston Red Stockings play from 1990 to 2000 in total?, college, city, [Boston]
Picklist: How many home games did the team Boston Red Stockings play from 1990 to 2000 in total?, team, name, [Boston Red Stockings]
Picklist: How many home games did the team Boston Red Stockings play from 1990 to 2000 in total?, team_franchise, franchise_name, [Boston Red Stockings]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'How many home games did the team Boston Red Stockings play from 1990 to 2000 in total?'
NL tokens: [b'how', b'many', b'home', b'games', b'did', b'the', b'team', b'boston', b'red', b'stockings', b'play', b'from', b'1990', b'to', b'2000', b'in', b'total', b'?']
NL tokens (original): [b'How', b'many', b'home', b'games', b'did', b'the', b'team', b'Boston', b'Red', b'Stockings', b'play', b'from', b'1990', b'to', b'2000', b'in', b'total', b'?']
['[CLS]', 'how', 'many', 'home', 'games', 'did', 'the', 'team', 'boston', 'red', 'stockings', 'play', 'from', '1990', 'to', '2000', 'in', 'total', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', '[SEP]']
Target 0: b"SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000"
Target TF-P tokens: from home_game join UNK_TABLE on home_game.team_id = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" and home_game.year between 1990 and 2000 select sum (home_game.games)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████▏     | 3700/8943 [12:18<8:55:47,  6.13s/it]
NL: b'How many home games did the team Boston Red Stockings play from 1990 to 2000 in total?'
NL tokens: [b'how', b'many', b'home', b'games', b'did', b'the', b'team', b'boston', b'red', b'stockings', b'play', b'from', b'1990', b'to', b'2000', b'in', b'total', b'?']
NL tokens (original): [b'How', b'many', b'home', b'games', b'did', b'the', b'team', b'Boston', b'Red', b'Stockings', b'play', b'from', b'1990', b'to', b'2000', b'in', b'total', b'?']
['[CLS]', 'how', 'many', 'home', 'games', 'did', 'the', 'team', 'boston', 'red', 'stockings', 'play', 'from', '1990', 'to', '2000', 'in', 'total', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', '[SEP]']
Target 0: b"SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000"
Target TF-P tokens: from home_game join UNK_TABLE on home_game.team_id = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" and home_game.year between 1990 and 2000 select sum (home_game.games)

--------------------
text:  How many home games did the team Boston Red Stockings play from 1990 to 2000 in total?
sql:  SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000
ground truth values:  [('team.name', 'Boston Red Stockings')]
matched values OrderedDict([(545, ('player.birth_city', 'Boston')), (547, ('player.birth_city', 'Homer')), (567, ('player.death_city', 'Boston')), (569, ('player.death_city', 'Homer')), (574, ('player.name_first', 'Red')), (579, ('player.name_last', 'Boston')), (618, ('park.city', 'Boston')), (802, ('college.city', 'Boston')), (943, ('team.name', 'Boston Red Stockings')), (980, ('team_franchise.franchise_name', 'Boston Red Stockings'))])
--------------------
Picklist: Count the total number of games the team Boston Red Stockings attended from 1990 to 2000., player, birth_city, [Boston]
Picklist: Count the total number of games the team Boston Red Stockings attended from 1990 to 2000., player, death_city, [Boston]
Picklist: Count the total number of games the team Boston Red Stockings attended from 1990 to 2000., player, name_first, [Red]
Picklist: Count the total number of games the team Boston Red Stockings attended from 1990 to 2000., player, name_first, [Count]
Picklist: Count the total number of games the team Boston Red Stockings attended from 1990 to 2000., player, name_last, [Boston]
Picklist: Count the total number of games the team Boston Red Stockings attended from 1990 to 2000., park, city, [Boston]
Picklist: Count the total number of games the team Boston Red Stockings attended from 1990 to 2000., college, city, [Boston]
Picklist: Count the total number of games the team Boston Red Stockings attended from 1990 to 2000., team, name, [Boston Red Stockings]
Picklist: Count the total number of games the team Boston Red Stockings attended from 1990 to 2000., team_franchise, franchise_name, [Boston Red Stockings]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'Count the total number of games the team Boston Red Stockings attended from 1990 to 2000.'
NL tokens: [b'count', b'the', b'total', b'number', b'of', b'games', b'the', b'team', b'boston', b'red', b'stockings', b'attended', b'from', b'1990', b'to', b'2000', b'.']
NL tokens (original): [b'Count', b'the', b'total', b'number', b'of', b'games', b'the', b'team', b'Boston', b'Red', b'Stockings', b'attended', b'from', b'1990', b'to', b'2000', b'.']
['[CLS]', 'count', 'the', 'total', 'number', 'of', 'games', 'the', 'team', 'boston', 'red', 'stockings', 'attended', 'from', '1990', 'to', '2000', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '[SEP]']
Target 0: b"SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000"
Target TF-P tokens: from home_game join UNK_TABLE on home_game.team_id = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" and home_game.year between 1990 and 2000 select sum (home_game.games)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████▏     | 3701/8943 [12:23<8:42:16,  5.98s/it]
NL: b'Count the total number of games the team Boston Red Stockings attended from 1990 to 2000.'
NL tokens: [b'count', b'the', b'total', b'number', b'of', b'games', b'the', b'team', b'boston', b'red', b'stockings', b'attended', b'from', b'1990', b'to', b'2000', b'.']
NL tokens (original): [b'Count', b'the', b'total', b'number', b'of', b'games', b'the', b'team', b'Boston', b'Red', b'Stockings', b'attended', b'from', b'1990', b'to', b'2000', b'.']
['[CLS]', 'count', 'the', 'total', 'number', 'of', 'games', 'the', 'team', 'boston', 'red', 'stockings', 'attended', 'from', '1990', 'to', '2000', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '[SEP]']
Target 0: b"SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000"
Target TF-P tokens: from home_game join UNK_TABLE on home_game.team_id = UNK_FIELD where UNK_FIELD = "Boston Red Stockings" and home_game.year between 1990 and 2000 select sum (home_game.games)

--------------------
text:  Count the total number of games the team Boston Red Stockings attended from 1990 to 2000.
sql:  SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000
ground truth values:  [('team.name', 'Boston Red Stockings')]
matched values OrderedDict([(545, ('player.birth_city', 'Boston')), (565, ('player.death_city', 'Boston')), (570, ('player.name_first', 'Red')), (572, ('player.name_first', 'Count')), (577, ('player.name_last', 'Boston')), (616, ('park.city', 'Boston')), (800, ('college.city', 'Boston')), (941, ('team.name', 'Boston Red Stockings')), (978, ('team_franchise.franchise_name', 'Boston Red Stockings'))])
--------------------
Picklist: Which team had the least number of attendances in home games in 1980?, player, birth_city, [Homer]
Picklist: Which team had the least number of attendances in home games in 1980?, player, death_city, [Homer]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'Which team had the least number of attendances in home games in 1980?'
NL tokens: [b'which', b'team', b'had', b'the', b'least', b'number', b'of', b'attendance', b'##s', b'in', b'home', b'games', b'in', b'1980', b'?']
NL tokens (original): [b'Which', b'team', b'had', b'the', b'least', b'number', b'of', b'attendance', b'##s', b'in', b'home', b'games', b'in', b'1980', b'?']
['[CLS]', 'which', 'team', 'had', 'the', 'least', 'number', 'of', 'attendance', '##s', 'in', 'home', 'games', 'in', '1980', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[SEP]']
Target 0: b'SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1'
Target TF-P tokens: from home_game join UNK_TABLE on home_game.team_id = UNK_FIELD where home_game.year = 1980 select UNK_FIELD order by home_game.attendance asc limit 1

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████▏     | 3702/8943 [12:28<8:10:33,  5.62s/it]
NL: b'Which team had the least number of attendances in home games in 1980?'
NL tokens: [b'which', b'team', b'had', b'the', b'least', b'number', b'of', b'attendance', b'##s', b'in', b'home', b'games', b'in', b'1980', b'?']
NL tokens (original): [b'Which', b'team', b'had', b'the', b'least', b'number', b'of', b'attendance', b'##s', b'in', b'home', b'games', b'in', b'1980', b'?']
['[CLS]', 'which', 'team', 'had', 'the', 'least', 'number', 'of', 'attendance', '##s', 'in', 'home', 'games', 'in', '1980', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[SEP]']
Target 0: b'SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1'
Target TF-P tokens: from home_game join UNK_TABLE on home_game.team_id = UNK_FIELD where home_game.year = 1980 select UNK_FIELD order by home_game.attendance asc limit 1

--------------------
text:  Which team had the least number of attendances in home games in 1980?
sql:  SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1
ground truth values:  []
matched values OrderedDict([(545, ('player.birth_city', 'Homer')), (565, ('player.death_city', 'Homer'))])
--------------------
Picklist: Find the team that attended the least number of home games in 1980., player, birth_city, [Homer]
Picklist: Find the team that attended the least number of home games in 1980., player, death_city, [Homer]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'Find the team that attended the least number of home games in 1980.'
NL tokens: [b'find', b'the', b'team', b'that', b'attended', b'the', b'least', b'number', b'of', b'home', b'games', b'in', b'1980', b'.']
NL tokens (original): [b'Find', b'the', b'team', b'that', b'attended', b'the', b'least', b'number', b'of', b'home', b'games', b'in', b'1980', b'.']
['[CLS]', 'find', 'the', 'team', 'that', 'attended', 'the', 'least', 'number', 'of', 'home', 'games', 'in', '1980', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', '[SEP]']
Target 0: b'SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1'
Target TF-P tokens: from home_game join UNK_TABLE on home_game.team_id = UNK_FIELD where home_game.year = 1980 select UNK_FIELD order by home_game.attendance asc limit 1

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████▏     | 3703/8943 [12:33<7:46:06,  5.34s/it]
NL: b'Find the team that attended the least number of home games in 1980.'
NL tokens: [b'find', b'the', b'team', b'that', b'attended', b'the', b'least', b'number', b'of', b'home', b'games', b'in', b'1980', b'.']
NL tokens (original): [b'Find', b'the', b'team', b'that', b'attended', b'the', b'least', b'number', b'of', b'home', b'games', b'in', b'1980', b'.']
['[CLS]', 'find', 'the', 'team', 'that', 'attended', 'the', 'least', 'number', 'of', 'home', 'games', 'in', '1980', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', '[SEP]']
Target 0: b'SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1'
Target TF-P tokens: from home_game join UNK_TABLE on home_game.team_id = UNK_FIELD where home_game.year = 1980 select UNK_FIELD order by home_game.attendance asc limit 1

--------------------
text:  Find the team that attended the least number of home games in 1980.
sql:  SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1
ground truth values:  []
matched values OrderedDict([(545, ('player.birth_city', 'Homer')), (565, ('player.death_city', 'Homer'))])
--------------------
Picklist: List the names of states that have more than 2 parks., player, death_city, [Park]
Picklist: List the names of states that have more than 2 parks., player, name_last, [Parks]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'List the names of states that have more than 2 parks.'
NL tokens: [b'list', b'the', b'names', b'of', b'states', b'that', b'have', b'more', b'than', b'2', b'parks', b'.']
NL tokens (original): [b'List', b'the', b'names', b'of', b'states', b'that', b'have', b'more', b'than', b'2', b'parks', b'.']
['[CLS]', 'list', 'the', 'names', 'of', 'states', 'that', 'have', 'more', 'than', '2', 'parks', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', 'half', '[SEP]']
Target 0: b'SELECT state FROM park GROUP BY state HAVING count(*)  >  2'
Target TF-P tokens: from UNK_TABLE group by UNK_FIELD having count (*) > 2 select UNK_FIELD

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████▏     | 3704/8943 [12:37<7:09:47,  4.92s/it]
NL: b'List the names of states that have more than 2 parks.'
NL tokens: [b'list', b'the', b'names', b'of', b'states', b'that', b'have', b'more', b'than', b'2', b'parks', b'.']
NL tokens (original): [b'List', b'the', b'names', b'of', b'states', b'that', b'have', b'more', b'than', b'2', b'parks', b'.']
['[CLS]', 'list', 'the', 'names', 'of', 'states', 'that', 'have', 'more', 'than', '2', 'parks', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', 'half', '[SEP]']
Target 0: b'SELECT state FROM park GROUP BY state HAVING count(*)  >  2'
Target TF-P tokens: from UNK_TABLE group by UNK_FIELD having count (*) > 2 select UNK_FIELD

--------------------
text:  List the names of states that have more than 2 parks.
sql:  SELECT state FROM park GROUP BY state HAVING count(*)  >  2
ground truth values:  []
matched values OrderedDict([(563, ('player.death_city', 'Park')), (571, ('player.name_last', 'Parks'))])
--------------------
Picklist: Which states have more than 2 parks?, player, death_city, [Park]
Picklist: Which states have more than 2 parks?, player, name_last, [Parks]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'Which states have more than 2 parks?'
NL tokens: [b'which', b'states', b'have', b'more', b'than', b'2', b'parks', b'?']
NL tokens (original): [b'Which', b'states', b'have', b'more', b'than', b'2', b'parks', b'?']
['[CLS]', 'which', 'states', 'have', 'more', 'than', '2', 'parks', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', 'half', '[unused51]', 'player', 'id', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT state FROM park GROUP BY state HAVING count(*)  >  2'
Target TF-P tokens: from UNK_TABLE group by UNK_FIELD having count (*) > 2 select UNK_FIELD

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████▏     | 3705/8943 [12:40<6:22:55,  4.39s/it]
NL: b'Which states have more than 2 parks?'
NL tokens: [b'which', b'states', b'have', b'more', b'than', b'2', b'parks', b'?']
NL tokens (original): [b'Which', b'states', b'have', b'more', b'than', b'2', b'parks', b'?']
['[CLS]', 'which', 'states', 'have', 'more', 'than', '2', 'parks', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', 'half', '[unused51]', 'player', 'id', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT state FROM park GROUP BY state HAVING count(*)  >  2'
Target TF-P tokens: from UNK_TABLE group by UNK_FIELD having count (*) > 2 select UNK_FIELD

--------------------
text:  Which states have more than 2 parks?
sql:  SELECT state FROM park GROUP BY state HAVING count(*)  >  2
ground truth values:  []
matched values OrderedDict([(563, ('player.death_city', 'Park')), (571, ('player.name_last', 'Parks'))])
--------------------
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b"How many team franchises are active, with active value 'Y'?"
NL tokens: [b'how', b'many', b'team', b'franchises', b'are', b'active', b',', b'with', b'active', b'value', b"'", b'y', b"'", b'?']
NL tokens (original): [b'How', b'many', b'team', b'franchises', b'are', b'active', b',', b'with', b'active', b'value', b"'", b'Y', b"'", b'?']
['[CLS]', 'how', 'many', 'team', 'franchises', 'are', 'active', ',', 'with', 'active', 'value', "'", 'y', "'", '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', '[SEP]']
Target 0: b"SELECT count(*) FROM team_franchise WHERE active = 'Y'"
Target TF-P tokens: from UNK_TABLE where UNK_FIELD = "y" select count (*)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████▏     | 3706/8943 [12:44<6:21:01,  4.37s/it]
NL: b"How many team franchises are active, with active value 'Y'?"
NL tokens: [b'how', b'many', b'team', b'franchises', b'are', b'active', b',', b'with', b'active', b'value', b"'", b'y', b"'", b'?']
NL tokens (original): [b'How', b'many', b'team', b'franchises', b'are', b'active', b',', b'with', b'active', b'value', b"'", b'Y', b"'", b'?']
['[CLS]', 'how', 'many', 'team', 'franchises', 'are', 'active', ',', 'with', 'active', 'value', "'", 'y', "'", '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', '[SEP]']
Target 0: b"SELECT count(*) FROM team_franchise WHERE active = 'Y'"
Target TF-P tokens: from UNK_TABLE where UNK_FIELD = "y" select count (*)

--------------------
text:  How many team franchises are active, with active value 'Y'?
sql:  SELECT count(*) FROM team_franchise WHERE active = 'Y'
ground truth values:  [('team_franchise.active', 'Y')]
matched values OrderedDict()
--------------------
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'Find the number of team franchises that are active (have \'Y\' as "active" information).'
NL tokens: [b'find', b'the', b'number', b'of', b'team', b'franchises', b'that', b'are', b'active', b'(', b'have', b"'", b'y', b"'", b'as', b'"', b'active', b'"', b'information', b')', b'.']
NL tokens (original): [b'Find', b'the', b'number', b'of', b'team', b'franchises', b'that', b'are', b'active', b'(', b'have', b"'", b'Y', b"'", b'as', b'"', b'active', b'"', b'information', b')', b'.']
['[CLS]', 'find', 'the', 'number', 'of', 'team', 'franchises', 'that', 'are', 'active', '(', 'have', "'", 'y', "'", 'as', '"', 'active', '"', 'information', ')', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[SEP]']
Target 0: b"SELECT count(*) FROM team_franchise WHERE active = 'Y'"
Target TF-P tokens: from UNK_TABLE where UNK_FIELD = "y" select count (*)

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████▏     | 3707/8943 [12:50<6:46:01,  4.65s/it]
NL: b'Find the number of team franchises that are active (have \'Y\' as "active" information).'
NL tokens: [b'find', b'the', b'number', b'of', b'team', b'franchises', b'that', b'are', b'active', b'(', b'have', b"'", b'y', b"'", b'as', b'"', b'active', b'"', b'information', b')', b'.']
NL tokens (original): [b'Find', b'the', b'number', b'of', b'team', b'franchises', b'that', b'are', b'active', b'(', b'have', b"'", b'Y', b"'", b'as', b'"', b'active', b'"', b'information', b')', b'.']
['[CLS]', 'find', 'the', 'number', 'of', 'team', 'franchises', 'that', 'are', 'active', '(', 'have', "'", 'y', "'", 'as', '"', 'active', '"', 'information', ')', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[SEP]']
Target 0: b"SELECT count(*) FROM team_franchise WHERE active = 'Y'"
Target TF-P tokens: from UNK_TABLE where UNK_FIELD = "y" select count (*)

--------------------
text:  Find the number of team franchises that are active (have 'Y' as "active" information).
sql:  SELECT count(*) FROM team_franchise WHERE active = 'Y'
ground truth values:  [('team_franchise.active', 'Y')]
matched values OrderedDict()
--------------------
Picklist: Which cities have 2 to 4 parks?, player, death_city, [Park]
Picklist: Which cities have 2 to 4 parks?, player, name_last, [Parks]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'Which cities have 2 to 4 parks?'
NL tokens: [b'which', b'cities', b'have', b'2', b'to', b'4', b'parks', b'?']
NL tokens (original): [b'Which', b'cities', b'have', b'2', b'to', b'4', b'parks', b'?']
['[CLS]', 'which', 'cities', 'have', '2', 'to', '4', 'parks', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', 'half', '[unused51]', 'player', 'id', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4'
Target TF-P tokens: from UNK_TABLE group by UNK_FIELD having count (*) between 2 and 4 select UNK_FIELD

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████▏     | 3708/8943 [12:53<6:00:14,  4.13s/it]
NL: b'Which cities have 2 to 4 parks?'
NL tokens: [b'which', b'cities', b'have', b'2', b'to', b'4', b'parks', b'?']
NL tokens (original): [b'Which', b'cities', b'have', b'2', b'to', b'4', b'parks', b'?']
['[CLS]', 'which', 'cities', 'have', '2', 'to', '4', 'parks', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', 'half', '[unused51]', 'player', 'id', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4'
Target TF-P tokens: from UNK_TABLE group by UNK_FIELD having count (*) between 2 and 4 select UNK_FIELD

--------------------
text:  Which cities have 2 to 4 parks?
sql:  SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4
ground truth values:  []
matched values OrderedDict([(563, ('player.death_city', 'Park')), (571, ('player.name_last', 'Parks'))])
--------------------
Picklist: Find all the cities that have 2 to 4 parks., player, death_city, [Park]
Picklist: Find all the cities that have 2 to 4 parks., player, name_last, [Parks]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'Find all the cities that have 2 to 4 parks.'
NL tokens: [b'find', b'all', b'the', b'cities', b'that', b'have', b'2', b'to', b'4', b'parks', b'.']
NL tokens (original): [b'Find', b'all', b'the', b'cities', b'that', b'have', b'2', b'to', b'4', b'parks', b'.']
['[CLS]', 'find', 'all', 'the', 'cities', 'that', 'have', '2', 'to', '4', 'parks', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', 'half', '[unused51]', 'player', '[SEP]']
Target 0: b'SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4'
Target TF-P tokens: from UNK_TABLE group by UNK_FIELD having count (*) between 2 and 4 select UNK_FIELD

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████▏     | 3709/8943 [12:56<5:44:25,  3.95s/it]
NL: b'Find all the cities that have 2 to 4 parks.'
NL tokens: [b'find', b'all', b'the', b'cities', b'that', b'have', b'2', b'to', b'4', b'parks', b'.']
NL tokens (original): [b'Find', b'all', b'the', b'cities', b'that', b'have', b'2', b'to', b'4', b'parks', b'.']
['[CLS]', 'find', 'all', 'the', 'cities', 'that', 'have', '2', 'to', '4', 'parks', '.', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', 'half', '[unused51]', 'player', '[SEP]']
Target 0: b'SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4'
Target TF-P tokens: from UNK_TABLE group by UNK_FIELD having count (*) between 2 and 4 select UNK_FIELD

--------------------
text:  Find all the cities that have 2 to 4 parks.
sql:  SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4
ground truth values:  []
matched values OrderedDict([(563, ('player.death_city', 'Park')), (571, ('player.name_last', 'Parks'))])
--------------------
Picklist: Which park had most attendances in 2008?, player, death_city, [Park]
Picklist: Which park had most attendances in 2008?, player, name_first, [Park]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'Which park had most attendances in 2008?'
NL tokens: [b'which', b'park', b'had', b'most', b'attendance', b'##s', b'in', b'2008', b'?']
NL tokens (original): [b'Which', b'park', b'had', b'most', b'attendance', b'##s', b'in', b'2008', b'?']
['[CLS]', 'which', 'park', 'had', 'most', 'attendance', '##s', 'in', '2008', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', 'half', '[unused51]', 'player', 'id', '[SEP]']
Target 0: b'SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1'
Target TF-P tokens: from home_game join UNK_TABLE on home_game.park_id = UNK_FIELD where home_game.year = 2008 select UNK_FIELD order by home_game.attendance desc limit 1

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████▏     | 3710/8943 [12:59<5:29:15,  3.78s/it]
NL: b'Which park had most attendances in 2008?'
NL tokens: [b'which', b'park', b'had', b'most', b'attendance', b'##s', b'in', b'2008', b'?']
NL tokens (original): [b'Which', b'park', b'had', b'most', b'attendance', b'##s', b'in', b'2008', b'?']
['[CLS]', 'which', 'park', 'had', 'most', 'attendance', '##s', 'in', '2008', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', 'half', '[unused51]', 'player', 'id', '[SEP]']
Target 0: b'SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1'
Target TF-P tokens: from home_game join UNK_TABLE on home_game.park_id = UNK_FIELD where home_game.year = 2008 select UNK_FIELD order by home_game.attendance desc limit 1

--------------------
text:  Which park had most attendances in 2008?
sql:  SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(563, ('player.death_city', 'Park')), (568, ('player.name_first', 'Park'))])
--------------------
Picklist: Which park did the most people attend in 2008?, player, death_city, [Park]
Picklist: Which park did the most people attend in 2008?, player, name_first, [Park]
baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l)
NL: b'Which park did the most people attend in 2008?'
NL tokens: [b'which', b'park', b'did', b'the', b'most', b'people', b'attend', b'in', b'2008', b'?']
NL tokens (original): [b'Which', b'park', b'did', b'the', b'most', b'people', b'attend', b'in', b'2008', b'?']
['[CLS]', 'which', 'park', 'did', 'the', 'most', 'people', 'attend', 'in', '2008', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', 'half', '[unused51]', 'player', 'id', '[SEP]']
Target 0: b'SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1'
Target TF-P tokens: from home_game join UNK_TABLE on home_game.park_id = UNK_FIELD where home_game.year = 2008 select UNK_FIELD order by home_game.attendance desc limit 1

baseball_1
 +-- all_star (all star)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- game_num (game num)
 |   +-- game_id (game id)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- gp (gp)
 |   +-- starting_pos (starting pos)
 +-- appearances (appearances)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- g_all (g all)
 |   +-- gs (gs)
 |   +-- g_batting (g batting)
 |   +-- g_defense (g defense)
 |   +-- g_p (g p)
 |   +-- g_c (g c)
 |   +-- g_1b (g 1b)
 |   +-- g_2b (g 2b)
 |   +-- g_3b (g 3b)
 |   +-- g_ss (g ss)
 |   +-- g_lf (g lf)
 |   +-- g_cf (g cf)
 |   +-- g_rf (g rf)
 |   +-- g_of (g of)
 |   +-- g_dh (g dh)
 |   +-- g_ph (g ph)
 |   +-- g_pr (g pr)
 +-- manager_award (manager award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- player_award (player award)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- tie (tie)
 |   +-- notes (notes)
 +-- manager_award_vote (manager award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- player_award_vote (player award vote)
 |   +-- award_id (award id)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- points_won (points won)
 |   +-- points_max (points max)
 |   +-- votes_first (votes first)
 +-- batting (batting)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- batting_postseason (batting postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- g (g)
 |   +-- ab (ab)
 |   +-- r (r)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- rbi (rbi)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- ibb (ibb)
 |   +-- hbp (hbp)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- player_college (player college)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- college_id (college id) [FOREIGN]
 |   +-- year (year)
 +-- fielding (fielding)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- pb (pb)
 |   +-- wp (wp)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- zr (zr)
 +-- fielding_outfield (fielding outfield)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- glf (glf)
 |   +-- gcf (gcf)
 |   +-- grf (grf)
 +-- fielding_postseason (fielding postseason)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- round (round)
 |   +-- pos (pos)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- inn_outs (inn outs)
 |   +-- po (po)
 |   +-- a (a)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- tp (tp)
 |   +-- pb (pb)
 |   +-- sb (sb)
 |   +-- cs (cs)
 +-- hall_of_fame (hall of fame)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- yearid (yearid)
 |   +-- votedby (votedby)
 |   +-- ballots (ballots)
 |   +-- needed (needed)
 |   +-- votes (votes)
 |   +-- inducted (inducted)
 |   +-- category (category)
 |   +-- needed_note (needed note)
 +-- home_game (home game)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- park_id (park id) [FOREIGN]
 |   +-- span_first (span first)
 |   +-- span_last (span last)
 |   +-- games (games)
 |   +-- openings (openings)
 |   +-- attendance (attendance)
 +-- manager (manager)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 |   +-- plyr_mgr (plyr mgr)
 +-- manager_half (manager half)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- league_id (league id)
 |   +-- inseason (inseason)
 |   +-- half (half)
 |   +-- g (g)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- rank (rank)
 +-- player (player)
 |   +-- player_id (player id) [FOREIGN]
 |   +-- birth_year (birth year)
 |   +-- birth_month (birth month)
 |   +-- birth_day (birth day)
 |   +-- birth_country (birth country)
 |   +-- birth_state (birth state)
 |   +-- birth_city (birth city)
 |   +-- death_year (death year)
 |   +-- death_month (death month)
 |   +-- death_day (death day)
 |   +-- death_country (death country)
 |   +-- death_state (death state)
 |   +-- death_city (death city)
 |   +-- name_first (name first)
 |   +-- name_last (name last)
 |   +-- name_given (name given)
 |   +-- weight (weight)
 |   +-- height (height)
 |   +-- bats (bats)
 |   +-- throws (throws)
 |   +-- debut (debut)
 |   +-- final_game (final game)
 |   +-- retro_id (retro id)
 |   +-- bbref_id (bbref id)
 +-- park (park)
 |   +-- park_id (park id) [FOREIGN]
 |   +-- park_name (park name)
 |   +-- park_alias (park alias)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- pitching (pitching)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- stint (stint)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- pitching_postseason (pitching postseason)
 |   +-- player_id (player id)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- g (g)
 |   +-- gs (gs)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- h (h)
 |   +-- er (er)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- baopp (baopp)
 |   +-- era (era)
 |   +-- ibb (ibb)
 |   +-- wp (wp)
 |   +-- hbp (hbp)
 |   +-- bk (bk)
 |   +-- bfp (bfp)
 |   +-- gf (gf)
 |   +-- r (r)
 |   +-- sh (sh)
 |   +-- sf (sf)
 |   +-- g_idp (g idp)
 +-- salary (salary)
 |   +-- year (year)
 |   +-- team_id (team id)
 |   +-- league_id (league id)
 |   +-- player_id (player id)
 |   +-- salary (salary)
 +-- college (college)
 |   +-- college_id (college id) [FOREIGN]
 |   +-- name_full (name full)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- country (country)
 +-- postseason (postseason)
 |   +-- year (year)
 |   +-- round (round)
 |   +-- team_id_winner (team id winner)
 |   +-- league_id_winner (league id winner)
 |   +-- team_id_loser (team id loser)
 |   +-- league_id_loser (league id loser)
 |   +-- wins (wins)
 |   +-- losses (losses)
 |   +-- ties (ties)
 +-- team (team)
 |   +-- year (year)
 |   +-- league_id (league id)
 |   +-- team_id (team id) [FOREIGN]
 |   +-- franchise_id (franchise id)
 |   +-- div_id (div id)
 |   +-- rank (rank)
 |   +-- g (g)
 |   +-- ghome (ghome)
 |   +-- w (w)
 |   +-- l (l)
 |   +-- div_win (div win)
 |   +-- wc_win (wc win)
 |   +-- lg_win (lg win)
 |   +-- ws_win (ws win)
 |   +-- r (r)
 |   +-- ab (ab)
 |   +-- h (h)
 |   +-- double (double)
 |   +-- triple (triple)
 |   +-- hr (hr)
 |   +-- bb (bb)
 |   +-- so (so)
 |   +-- sb (sb)
 |   +-- cs (cs)
 |   +-- hbp (hbp)
 |   +-- sf (sf)
 |   +-- ra (ra)
 |   +-- er (er)
 |   +-- era (era)
 |   +-- cg (cg)
 |   +-- sho (sho)
 |   +-- sv (sv)
 |   +-- ipouts (ipouts)
 |   +-- ha (ha)
 |   +-- hra (hra)
 |   +-- bba (bba)
 |   +-- soa (soa)
 |   +-- e (e)
 |   +-- dp (dp)
 |   +-- fp (fp)
 |   +-- name (name)
 |   +-- park (park)
 |   +-- attendance (attendance)
 |   +-- bpf (bpf)
 |   +-- ppf (ppf)
 |   +-- team_id_br (team id br)
 |   +-- team_id_lahman45 (team id lahman45)
 |   +-- team_id_retro (team id retro)
 +-- team_franchise (team franchise)
 |   +-- franchise_id (franchise id)
 |   +-- franchise_name (franchise name)
 |   +-- active (active)
 |   +-- na_assoc (na assoc)
 +-- team_half (team half)
     +-- year (year)
     +-- league_id (league id)
     +-- team_id (team id)
     +-- half (half)
     +-- div_id (div id)
     +-- div_win (div win)
     +-- rank (rank)
     +-- g (g)
     +-- w (w)
     +-- l (l) 41%|████▏     | 3711/8943 [13:03<5:25:33,  3.73s/it] 42%|████▏     | 3719/8943 [13:03<3:47:52,  2.62s/it] 42%|████▏     | 3725/8943 [13:03<2:39:46,  1.84s/it] 42%|████▏     | 3734/8943 [13:03<1:51:58,  1.29s/it] 42%|████▏     | 3746/8943 [13:03<1:18:24,  1.10it/s]
NL: b'Which park did the most people attend in 2008?'
NL tokens: [b'which', b'park', b'did', b'the', b'most', b'people', b'attend', b'in', b'2008', b'?']
NL tokens (original): [b'Which', b'park', b'did', b'the', b'most', b'people', b'attend', b'in', b'2008', b'?']
['[CLS]', 'which', 'park', 'did', 'the', 'most', 'people', 'attend', 'in', '2008', '?', '[SEP]', '*', '[unused50]', 'all', 'star', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'game', 'nu', '##m', '[unused51]', 'game', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'gp', '[unused51]', 'starting', 'po', '##s', '[unused50]', 'appearances', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'g', 'all', '[unused51]', 'gs', '[unused51]', 'g', 'batting', '[unused51]', 'g', 'defense', '[unused51]', 'g', 'p', '[unused51]', 'g', 'c', '[unused51]', 'g', '1b', '[unused51]', 'g', '2', '##b', '[unused51]', 'g', '3', '##b', '[unused51]', 'g', 'ss', '[unused51]', 'g', 'l', '##f', '[unused51]', 'g', 'cf', '[unused51]', 'g', 'rf', '[unused51]', 'g', 'of', '[unused51]', 'g', 'dh', '[unused51]', 'g', 'ph', '[unused51]', 'g', 'pr', '[unused50]', 'manager', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'player', 'award', '[unused51]', 'player', 'id', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'tie', '[unused51]', 'notes', '[unused50]', 'manager', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'player', 'award', 'vote', '[unused51]', 'award', 'id', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'player', 'id', '[unused51]', 'points', 'won', '[unused51]', 'points', 'max', '[unused51]', 'votes', 'first', '[unused50]', 'batting', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'batting', 'postseason', '[unused51]', 'year', '[unused51]', 'round', '[unused51]', 'player', 'id', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'g', '[unused51]', 'ab', '[unused51]', 'r', '[unused51]', 'h', '[unused51]', 'double', '[unused51]', 'triple', '[unused51]', 'hr', '[unused51]', 'rbi', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'bb', '[unused51]', 'so', '[unused51]', 'ib', '##b', '[unused51]', 'h', '##b', '##p', '[unused51]', 'sh', '[unused51]', 'sf', '[unused51]', 'g', 'id', '##p', '[unused50]', 'player', 'college', '[unused51]', 'player', 'id', '[unused51]', 'college', 'id', '[unused51]', 'year', '[unused50]', 'fielding', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 'p', '##b', '[unused51]', 'w', '##p', '[unused51]', 'sb', '[unused51]', 'cs', '[unused51]', 'z', '##r', '[unused50]', 'fielding', 'out', '##field', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'stint', '[unused51]', 'g', '##lf', '[unused51]', 'g', '##c', '##f', '[unused51]', 'gr', '##f', '[unused50]', 'fielding', 'postseason', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'round', '[unused51]', 'po', '##s', '[unused51]', 'g', '[unused51]', 'gs', '[unused51]', 'inn', 'outs', '[unused51]', 'po', '[unused51]', 'a', '[unused51]', 'e', '[unused51]', 'd', '##p', '[unused51]', 't', '##p', '[unused51]', 'p', '##b', '[unused51]', 'sb', '[unused51]', 'cs', '[unused50]', 'hall', 'of', 'fame', '[unused51]', 'player', 'id', '[unused51]', 'year', '##id', '[unused51]', 'voted', '##by', '[unused51]', 'ballots', '[unused51]', 'needed', '[unused51]', 'votes', '[unused51]', 'inducted', '[unused51]', 'category', '[unused51]', 'needed', 'note', '[unused50]', 'home', 'game', '[unused51]', 'year', '[unused51]', 'league', 'id', '[unused51]', 'team', 'id', '[unused51]', 'park', 'id', '[unused51]', 'span', 'first', '[unused51]', 'span', 'last', '[unused51]', 'games', '[unused51]', 'openings', '[unused51]', 'attendance', '[unused50]', 'manager', '[unused51]', 'player', 'id', '[unused51]', 'year', '[unused51]', 'team', 'id', '[unused51]', 'league', 'id', '[unused51]', 'ins', '##ea', '##son', '[unused51]', 'g', '[unused51]', 'w', '[unused51]', 'l', '[unused51]', 'rank', '[unused51]', 'pl', '##yr', 'mg', '##r', '[unused50]', 'manager', 'half', '[unused51]', 'player', 'id', '[SEP]']
Target 0: b'SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1'
Target TF-P tokens: from home_game join UNK_TABLE on home_game.park_id = UNK_FIELD where home_game.year = 2008 select UNK_FIELD order by home_game.attendance desc limit 1

--------------------
text:  Which park did the most people attend in 2008?
sql:  SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(563, ('player.death_city', 'Park')), (568, ('player.name_first', 'Park'))])
--------------------
Picklist: What are the average prominence of the mountains in country 'Morocco'?, mountain, Country, [Morocco]
Picklist: What are the name, height and prominence of mountains which do not belong to the range 'Aberdare Range'?, mountain, Range, [Aberdare Range]
Picklist: What are the names of photos taken with the lens brand 'Sigma' or 'Olympus'?, camera_lens, brand, [Olympus]
Picklist: What are the names of photos taken with the lens brand 'Sigma' or 'Olympus'?, camera_lens, brand, [Sigma]
Picklist: How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'?, mountain, Country, [Ethiopia]
Picklist: List the brands of lenses that took both a picture of mountains with range 'Toubkal Atlas' and a picture of mountains with range 'Lasta Massif', mountain, Range, [Lasta Massif]
Picklist: List the brands of lenses that took both a picture of mountains with range 'Toubkal Atlas' and a picture of mountains with range 'Lasta Massif', mountain, Range, [Toubkal Atlas]
Picklist: Show the name and prominence of the mountains whose picture is not taken by a lens of brand 'Sigma'., camera_lens, brand, [Sigma]
Picklist: Find the names of channels that are not owned by CCTV., channel, Owner, [CCTV]
Picklist: Which channels are not owned by CCTV? Give me the channel names., channel, Owner, [CCTV]
Picklist: find the total percentage share of all channels owned by CCTV., channel, Owner, [CCTV]
Picklist: What is the total share (in percent) of all the channels owned by CCTV?, channel, Owner, [CCTV]
Picklist: Find the names of the channels that are broadcast in the morning., broadcast, Time_of_day, [Morning]
Picklist: Which channels are broadcast in the morning? Give me the channel names., broadcast, Time_of_day, [Morning]
Picklist: what are the names of the channels that broadcast in both morning and night?, broadcast, Time_of_day, [Morning]
Picklist: what are the names of the channels that broadcast in both morning and night?, broadcast, Time_of_day, [Night]
Picklist: Which channels broadcast both in the morning and at night? Give me the channel names., broadcast, Time_of_day, [Morning]
 42%|████▏     | 3754/8943 [13:04<55:11,  1.57it/s]   42%|████▏     | 3761/8943 [13:04<38:57,  2.22it/s] 42%|████▏     | 3771/8943 [13:04<27:30,  3.13it/s] 42%|████▏     | 3779/8943 [13:04<19:37,  4.39it/s] 42%|████▏     | 3787/8943 [13:04<14:04,  6.11it/s] 42%|████▏     | 3795/8943 [13:04<10:17,  8.34it/s] 43%|████▎     | 3802/8943 [13:04<07:35, 11.30it/s]Picklist: Which channels broadcast both in the morning and at night? Give me the channel names., broadcast, Time_of_day, [Night]
Picklist: find the number of different programs that are broadcast during night time., broadcast, Time_of_day, [Night]
Picklist: How many distinct programs are broadcast at "Night" time?, broadcast, Time_of_day, [Night]
Picklist: Find the names of programs that are never broadcasted in the morning., broadcast, Time_of_day, [Morning]
Picklist: Which programs are never broadcasted in the morning? Give me the names of the programs., broadcast, Time_of_day, [Morning]
Picklist: find the program owners that have some programs in both morning and night time., broadcast, Time_of_day, [Morning]
Picklist: find the program owners that have some programs in both morning and night time., broadcast, Time_of_day, [Night]
Picklist: Who are the owners of the programs that broadcast both in the morning and at night?, broadcast, Time_of_day, [Morning]
Picklist: Who are the owners of the programs that broadcast both in the morning and at night?, broadcast, Time_of_day, [Night]
Picklist: find the names of programs whose origin is not in Beijing., program, Origin, [Beijing]
Picklist: Which programs' origins are not "Beijing"? Give me the program names., program, Origin, [Beijing]
Picklist: What are the names of the channels owned by CCTV or HBS?, channel, Owner, [CCTV]
Picklist: What are the names of the channels owned by CCTV or HBS?, channel, Owner, [HBS]
Picklist: List the names of all the channels owned by either CCTV or HBS, channel, Owner, [CCTV]
Picklist: List the names of all the channels owned by either CCTV or HBS, channel, Owner, [HBS]
Picklist: What are the descriptions of the courses with name "database"?, Courses, course_name, [database]
Picklist: What are the descriptions of the courses with name "database"?, Courses, course_description, [database]
--------------------
text:  What are the descriptions of the courses with name "database"?
sql:  SELECT course_description FROM COURSES WHERE course_name  =  "database"
ground truth values:  [('Courses.course_name', 'database')]
matched values OrderedDict([(91, ('Courses.course_name', 'database')), (96, ('Courses.course_description', 'database'))])
--------------------
Picklist: Return the description for the courses named "database"., Courses, course_name, [database]
Picklist: Return the description for the courses named "database"., Courses, course_description, [database]
--------------------
text:  Return the description for the courses named "database".
sql:  SELECT course_description FROM COURSES WHERE course_name  =  "database"
ground truth values:  [('Courses.course_name', 'database')]
matched values OrderedDict([(91, ('Courses.course_name', 'database')), (96, ('Courses.course_description', 'database'))])
--------------------
Picklist: What are the addresses of the course authors or tutors with personal name "Cathrine", Course_Authors_and_Tutors, personal_name, [Cathrine]
Picklist: Return the addresses of the course authors or tutors whose personal name is "Cathrine"., Course_Authors_and_Tutors, personal_name, [Cathrine]
Picklist: Find the dates of the tests taken with result "Pass"., Student_Tests_Taken, test_result, [Pass]
Picklist: Which tests have "Pass" results? Return the dates when the tests were taken., Student_Tests_Taken, test_result, [Pass]
Picklist: How many tests have result "Fail"?, Student_Tests_Taken, test_result, [Fail]
Picklist: Count the number of tests with "Fail" result., Student_Tests_Taken, test_result, [Fail]
Picklist: What are the login names of the students with family name "Ward"?, Students, family_name, [Ward]
Picklist: Return the login names of the students whose family name is "Ward"., Students, family_name, [Ward]
Picklist: What are the dates of the latest logon of the students with family name "Jaskolski" or "Langosh"?, Students, family_name, [Jaskolski]
Picklist: What are the dates of the latest logon of the students with family name "Jaskolski" or "Langosh"?, Students, family_name, [Langosh]
Picklist: Find the latest logon date of the students whose family name is "Jaskolski" or "Langosh"., Students, family_name, [Jaskolski]
Picklist: Find the latest logon date of the students whose family name is "Jaskolski" or "Langosh"., Students, family_name, [Langosh]
Picklist: Find the login name of the course author that teaches the course with name "advanced database"., Courses, course_name, [advanced database]
Picklist: Find the login name of the course author that teaches the course with name "advanced database"., Courses, course_name, [database]
Picklist: Find the login name of the course author that teaches the course with name "advanced database"., Courses, course_description, [advanced database]
Picklist: Find the login name of the course author that teaches the course with name "advanced database"., Courses, course_description, [database]
--------------------
text:  Find the login name of the course author that teaches the course with name "advanced database".
sql:  SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  "advanced database"
ground truth values:  [('Courses.course_name', 'advanced database')]
matched values OrderedDict([(91, ('Courses.course_name', 'advanced database')), (94, ('Courses.course_name', 'database')), (99, ('Courses.course_description', 'advanced database')), (102, ('Courses.course_description', 'database'))])
--------------------
Picklist: Which course author teaches the "advanced database" course? Give me his or her login name., Courses, course_name, [advanced database]
Picklist: Which course author teaches the "advanced database" course? Give me his or her login name., Courses, course_name, [database]
Picklist: Which course author teaches the "advanced database" course? Give me his or her login name., Courses, course_description, [advanced database]
Picklist: Which course author teaches the "advanced database" course? Give me his or her login name., Courses, course_description, [database]
--------------------
text:  Which course author teaches the "advanced database" course? Give me his or her login name.
sql:  SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  "advanced database"
ground truth values:  [('Courses.course_name', 'advanced database')]
matched values OrderedDict([(91, ('Courses.course_name', 'advanced database')), (94, ('Courses.course_name', 'database')), (99, ('Courses.course_description', 'advanced database')), (102, ('Courses.course_description', 'database'))])
--------------------
Picklist: Find the addresses of the course authors who teach the course with name "operating system" or "data structure"., Courses, course_name, [operating system]
Picklist: Find the addresses of the course authors who teach the course with name "operating system" or "data structure"., Courses, course_name, [data structure]
Picklist: Find the addresses of the course authors who teach the course with name "operating system" or "data structure"., Courses, course_description, [operating system]
Picklist: Find the addresses of the course authors who teach the course with name "operating system" or "data structure"., Courses, course_description, [data structure]
--------------------
text:  Find the addresses of the course authors who teach the course with name "operating system" or "data structure".
sql:  SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  "operating system" OR T2.course_name  =  "data structure"
ground truth values:  [('Courses.course_name', 'operating system'), ('Courses.course_name', 'data structure')]
matched values OrderedDict([(91, ('Courses.course_name', 'operating system')), (94, ('Courses.course_name', 'data structure')), (100, ('Courses.course_description', 'operating system')), (103, ('Courses.course_description', 'data structure'))])
--------------------
 43%|████▎     | 3809/8943 [13:04<06:01, 14.19it/s] 43%|████▎     | 3815/8943 [13:05<04:51, 17.57it/s] 43%|████▎     | 3821/8943 [13:05<04:01, 21.24it/s] 43%|████▎     | 3826/8943 [13:05<03:26, 24.80it/s] 43%|████▎     | 3831/8943 [13:05<02:57, 28.75it/s] 43%|████▎     | 3836/8943 [13:05<02:48, 30.33it/s] 43%|████▎     | 3841/8943 [13:05<02:37, 32.30it/s] 43%|████▎     | 3847/8943 [13:05<02:19, 36.48it/s] 43%|████▎     | 3852/8943 [13:06<02:17, 37.14it/s] 43%|████▎     | 3857/8943 [13:06<02:10, 38.85it/s] 43%|████▎     | 3864/8943 [13:06<01:53, 44.63it/s] 43%|████▎     | 3870/8943 [13:06<01:47, 47.16it/s] 43%|████▎     | 3879/8943 [13:06<01:33, 54.36it/s] 44%|████▎     | 3891/8943 [13:06<01:18, 64.25it/s] 44%|████▎     | 3899/8943 [13:06<01:20, 62.74it/s] 44%|████▎     | 3907/8943 [13:06<01:21, 61.82it/s] 44%|████▍     | 3914/8943 [13:06<01:19, 63.32it/s] 44%|████▍     | 3921/8943 [13:07<01:24, 59.34it/s] 44%|████▍     | 3928/8943 [13:07<01:33, 53.70it/s] 44%|████▍     | 3934/8943 [13:07<01:31, 54.64it/s] 44%|████▍     | 3942/8943 [13:07<01:27, 57.23it/s] 44%|████▍     | 3948/8943 [13:07<01:26, 57.91it/s]Picklist: What are the addresses of the course authors who teach either "operating system" or "data structure" course., Courses, course_name, [operating system]
Picklist: What are the addresses of the course authors who teach either "operating system" or "data structure" course., Courses, course_name, [data structure]
Picklist: What are the addresses of the course authors who teach either "operating system" or "data structure" course., Courses, course_description, [operating system]
Picklist: What are the addresses of the course authors who teach either "operating system" or "data structure" course., Courses, course_description, [data structure]
--------------------
text:  What are the addresses of the course authors who teach either "operating system" or "data structure" course.
sql:  SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  "operating system" OR T2.course_name  =  "data structure"
ground truth values:  [('Courses.course_name', 'operating system'), ('Courses.course_name', 'data structure')]
matched values OrderedDict([(91, ('Courses.course_name', 'operating system')), (94, ('Courses.course_name', 'data structure')), (100, ('Courses.course_description', 'operating system')), (103, ('Courses.course_description', 'data structure'))])
--------------------
Picklist: Find the names of courses taught by the tutor who has personal name "Julio"., Course_Authors_and_Tutors, personal_name, [Julio]
Picklist: What are the names of the courses taught by the tutor whose personal name is "Julio"?, Course_Authors_and_Tutors, personal_name, [Julio]
Picklist: Find the names and descriptions of courses that belong to the subject named "Computer Science"., Subjects, subject_name, [Computer Science]
Picklist: What are the names and descriptions of the all courses under the "Computer Science" subject?, Subjects, subject_name, [Computer Science]
Picklist: What is the date of enrollment of the course named "Spanish"?, Courses, course_name, [Spanish]
Picklist: What is the date of enrollment of the course named "Spanish"?, Courses, course_description, [Spanish]
--------------------
text:  What is the date of enrollment of the course named "Spanish"?
sql:  SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  "Spanish"
ground truth values:  [('Courses.course_name', 'Spanish')]
matched values OrderedDict([(91, ('Courses.course_name', 'Spanish')), (96, ('Courses.course_description', 'Spanish'))])
--------------------
Picklist: Find the the date of enrollment of the "Spanish" course., Courses, course_name, [Spanish]
Picklist: Find the the date of enrollment of the "Spanish" course., Courses, course_description, [Spanish]
--------------------
text:  Find the the date of enrollment of the "Spanish" course.
sql:  SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  "Spanish"
ground truth values:  [('Courses.course_name', 'Spanish')]
matched values OrderedDict([(91, ('Courses.course_name', 'Spanish')), (96, ('Courses.course_description', 'Spanish'))])
--------------------
Picklist: What are the enrollment dates of all the tests that have result "Pass"?, Student_Tests_Taken, test_result, [Pass]
Picklist: Find the enrollment date for all the tests that have "Pass" result., Student_Tests_Taken, test_result, [Pass]
Picklist: What are the completion dates of all the tests that have result "Fail"?, Student_Tests_Taken, test_result, [Fail]
Picklist: Return the completion date for all the tests that have "Fail" result., Student_Tests_Taken, test_result, [Fail]
Picklist: List the dates of enrollment and completion of the student with personal name "Karson"., Students, personal_name, [Karson]
Picklist: On what dates did the student whose personal name is "Karson" enroll in and complete the courses?, Students, personal_name, [Karson]
Picklist: List the dates of enrollment and completion of the student with family name "Zieme" and personal name "Bernie"., Students, personal_name, [Bernie]
Picklist: List the dates of enrollment and completion of the student with family name "Zieme" and personal name "Bernie"., Students, family_name, [Zieme]
Picklist: On what dates did the student with family name "Zieme" and personal name "Bernie" enroll in and complete the courses?, Students, personal_name, [Bernie]
Picklist: On what dates did the student with family name "Zieme" and personal name "Bernie" enroll in and complete the courses?, Students, family_name, [Zieme]
Picklist: Which Payments were processed with Visa? List the payment Id, the date and the amount., Payments, Payment_Method_Code, [Visa]
Picklist: Give me the payment Id, the date and the amount for all the payments processed with Visa., Payments, Payment_Method_Code, [Visa]
Picklist: How many patients' prescriptions are made by physician John Dorian?, Physician, Name, [John Dorian]
Picklist: Find the number of patients' prescriptions physician John Dorian made., Physician, Name, [John Dorian]
Picklist: What is the name of the nurse has the most appointments?, Nurse, Position, [Nurse]
--------------------
text:  What is the name of the nurse has the most appointments?
sql:  SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(82, ('Nurse.Position', 'Nurse'))])
--------------------
Picklist: Find the name of the nurse who has the largest number of appointments., Nurse, Position, [Nurse]
--------------------
text:  Find the name of the nurse who has the largest number of appointments.
sql:  SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(82, ('Nurse.Position', 'Nurse'))])
--------------------
Picklist: What is the names of the physicians who prescribe medication Thesisin?, Medication, Name, [Thesisin]
Picklist: List the names of all the physicians who prescribe Thesisin as medication., Medication, Name, [Thesisin]
--------------------
text:  Find the name and position of physicians who prescribe some medication whose brand is X?
sql:  SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  "X"
ground truth values:  [('Medication.Brand', 'X')]
matched values OrderedDict()
--------------------
--------------------
text:  Which physicians prescribe a medication of brand X? Tell me the name and position of those physicians.
sql:  SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  "X"
ground truth values:  [('Medication.Brand', 'X')]
matched values OrderedDict()
--------------------
Picklist: List the names of all distinct nurses ordered by alphabetical order?, Nurse, Position, [Nurse]
--------------------
text:  List the names of all distinct nurses ordered by alphabetical order?
sql:  SELECT DISTINCT name FROM nurse ORDER BY name
ground truth values:  []
matched values OrderedDict([(82, ('Nurse.Position', 'Nurse'))])
--------------------
Picklist: What is the alphabetically ordered list of all the distinct names of nurses?, Nurse, Position, [Nurse]
--------------------
text:  What is the alphabetically ordered list of all the distinct names of nurses?
sql:  SELECT DISTINCT name FROM nurse ORDER BY name
ground truth values:  []
matched values OrderedDict([(82, ('Nurse.Position', 'Nurse'))])
--------------------
Picklist: Find the names of nurses who are nursing an undergoing treatment., Nurse, Position, [Nurse]
--------------------
text:  Find the names of nurses who are nursing an undergoing treatment.
sql:  SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID
ground truth values:  44%|████▍     | 3955/8943 [13:07<01:22, 60.12it/s] 44%|████▍     | 3963/8943 [13:07<01:19, 62.33it/s] 44%|████▍     | 3963/8943 [13:20<01:19, 62.33it/s] 44%|████▍     | 3966/8943 [13:20<1:43:39,  1.25s/it] 44%|████▍     | 3974/8943 [13:20<1:12:49,  1.14it/s] 44%|████▍     | 3979/8943 [13:20<51:31,  1.61it/s]   45%|████▍     | 3983/8943 [13:20<36:48,  2.25it/s] 45%|████▍     | 3987/8943 [13:20<26:35,  3.11it/s] 45%|████▍     | 3991/8943 [13:20<19:15,  4.28it/s] 45%|████▍     | 3999/8943 [13:20<13:47,  5.98it/s] 45%|████▍     | 4010/8943 [13:20<09:51,  8.34it/s] 45%|████▍     | 4020/8943 [13:21<07:08, 11.50it/s] 45%|████▌     | 4028/8943 [13:21<05:22, 15.25it/s] 45%|████▌     | 4038/8943 [13:21<04:00, 20.38it/s] 45%|████▌     | 4047/8943 [13:21<03:06, 26.24it/s] 45%|████▌     | 4055/8943 [13:21<02:30, 32.40it/s] []
matched values OrderedDict([(82, ('Nurse.Position', 'Nurse'))])
--------------------
Picklist: Which nurses are in charge of patients undergoing treatments?, Nurse, Position, [Nurse]
--------------------
text:  Which nurses are in charge of patients undergoing treatments?
sql:  SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID
ground truth values:  []
matched values OrderedDict([(82, ('Nurse.Position', 'Nurse'))])
--------------------
Picklist: What nurses are on call with block floor 1 and block code 1? Tell me their names., Nurse, Position, [Nurse]
--------------------
text:  What nurses are on call with block floor 1 and block code 1? Tell me their names.
sql:  SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1
ground truth values:  []
matched values OrderedDict([(82, ('Nurse.Position', 'Nurse'))])
--------------------
Picklist: Find the ids of the nurses who are on call in block floor 1 and block code 1., Nurse, Position, [Nurse]
--------------------
text:  Find the ids of the nurses who are on call in block floor 1 and block code 1.
sql:  SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1
ground truth values:  []
matched values OrderedDict([(82, ('Nurse.Position', 'Nurse'))])
--------------------
Picklist: What is the average cost of procedures that physician John Wen was trained in?, Physician, Name, [John Wen]
Picklist: Compute the mean price of procedures physician John Wen was trained in., Physician, Name, [John Wen]
Picklist: Find the names of procedures which physician John Wen was trained in., Physician, Name, [John Wen]
Picklist: What are the names of procedures physician John Wen was trained in?, Physician, Name, [John Wen]
Picklist: Find all procedures which cost more than 1000 or which physician John Wen was trained in., Physician, Name, [John Wen]
Picklist: What are the procedures that cost more than 1000 or are specialized in by physician John Wen?, Physician, Name, [John Wen]
Picklist: Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in?, Physician, Name, [John Wen]
Picklist: Among the procedures that cost more than 1000, which were not specialized in by physician John Wen?, Physician, Name, [John Wen]
Picklist: Find the names of all procedures such that the cost is less than 5000 and physician John Wen was trained in., Physician, Name, [John Wen]
Picklist: What procedures cost less than 5000 and have John Wen as a trained physician?, Physician, Name, [John Wen]
Picklist: Find the name of physicians who are affiliated with both Surgery and Psychiatry departments., Department, Name, [Psychiatry]
Picklist: Find the name of physicians who are affiliated with both Surgery and Psychiatry departments., Department, Name, [Surgery]
Picklist: Which physicians are affiliated with both Surgery and Psychiatry departments? Tell me their names., Department, Name, [Psychiatry]
Picklist: Which physicians are affiliated with both Surgery and Psychiatry departments? Tell me their names., Department, Name, [Surgery]
Picklist: Find the name of physicians who are affiliated with Surgery or Psychiatry department., Department, Name, [Psychiatry]
Picklist: Find the name of physicians who are affiliated with Surgery or Psychiatry department., Department, Name, [Surgery]
Picklist: Which physicians are affiliated with either Surgery or Psychiatry department? Give me their names., Department, Name, [Psychiatry]
Picklist: Which physicians are affiliated with either Surgery or Psychiatry department? Give me their names., Department, Name, [Surgery]
Picklist: Find the names of patients who are not using the medication of Procrastin-X., Medication, Name, [Procrastin-X]
Picklist: What are the names of patients who are not taking the medication of Procrastin-X., Medication, Name, [Procrastin-X]
Picklist: Find the number of patients who are not using the medication of Procrastin-X., Medication, Name, [Procrastin-X]
Picklist: How many patients are not using Procrastin-X as medication?, Medication, Name, [Procrastin-X]
Picklist: Find the names of nurses who are on call., Nurse, Position, [Nurse]
--------------------
text:  Find the names of nurses who are on call.
sql:  SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse
ground truth values:  []
matched values OrderedDict([(82, ('Nurse.Position', 'Nurse'))])
--------------------
Picklist: What are the distinct names of nurses on call?, Nurse, Position, [Nurse]
--------------------
text:  What are the distinct names of nurses on call?
sql:  SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse
ground truth values:  []
matched values OrderedDict([(82, ('Nurse.Position', 'Nurse'))])
--------------------
Picklist: List the name of ships whose nationality is not "United States"., ship, Nationality, [United States]
Picklist: What are the names of the ships that are not from the United States?, ship, Nationality, [United States]
Picklist: Show the name of ships whose nationality is either United States or United Kingdom., ship, Nationality, [United Kingdom]
Picklist: Show the name of ships whose nationality is either United States or United Kingdom., ship, Nationality, [United States]
--------------------
text:  What are the names of the ships  that are from either the US or the UK?
sql:  SELECT Name FROM ship WHERE Nationality  =  "United States" OR Nationality  =  "United Kingdom"
ground truth values:  [('ship.Nationality', 'United States'), ('ship.Nationality', 'United Kingdom')]
matched values OrderedDict()
--------------------
Picklist: Show the distinct fate of missions that involve ships with nationality "United States", ship, Nationality, [United States]
Picklist: What are the different fates of the mission that involved ships from the United States?, ship, Nationality, [United States]
Picklist: Find all students taught by OTHA MOYER. Output the first and last names of the students., teachers, LastName, [MOYER]
Picklist: Find all students taught by OTHA MOYER. Output the first and last names of the students., teachers, FirstName, [ OTHA]
--------------------
text:  Find all students taught by OTHA MOYER. Output the first and last names of the students.
sql:  SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  "OTHA" AND T2.lastname  =  "MOYER"
ground truth values:  [('teachers.FirstName', 'OTHA'), ('teachers.LastName', 'MOYER')]
matched values OrderedDict([(20, ('teachers.LastName', 'MOYER')), (26, ('teachers.FirstName', ' OTHA'))])
--------------------
Picklist: Which students study under the teacher named OTHA MOYER? Give me the first and last names of the students., teachers, LastName, [MOYER]
Picklist: Which students study under the teacher named OTHA MOYER? Give me the first and last names of the students., teachers, FirstName, [ OTHA]
--------------------
text:  Which students study under the teacher named OTHA MOYER? Give me the first and last names of the students.
sql:  SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  "OTHA" AND T2.lastname  =  "MOYER"
ground truth values:  [('teachers.FirstName', 'OTHA'), ('teachers.LastName', 'MOYER')]
matched values OrderedDict([(20, ('teachers.LastName', 'MOYER')), (26, ('teachers.FirstName', ' OTHA'))])
--------------------
Picklist: Find all students taught by MARROTTE KIRK. Output first and last names of students., teachers, LastName, [MARROTTE]
Picklist: Find all students taught by MARROTTE KIRK. Output first and last names of students., teachers, FirstName, [ KIRK]
--------------------
text:  Find all students taught by MARROTTE KIRK. Output first and last names of students.
sql:  SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  "MARROTTE" AND T2.lastname  =  "KIRK"
ground truth values:  [('teachers.FirstName', 'MARROTTE'), ('teachers.LastName', 'KIRK')]
matched values  45%|████▌     | 4063/8943 [13:21<02:13, 36.43it/s] 46%|████▌     | 4070/8943 [13:21<02:06, 38.43it/s]OrderedDict([(20, ('teachers.LastName', 'MARROTTE')), (27, ('teachers.FirstName', ' KIRK'))])
--------------------
Picklist: Which are the first and last names of the students taught by MARROTTE KIRK?, teachers, LastName, [MARROTTE]
Picklist: Which are the first and last names of the students taught by MARROTTE KIRK?, teachers, FirstName, [ KIRK]
--------------------
text:  Which are the first and last names of the students taught by MARROTTE KIRK?
sql:  SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  "MARROTTE" AND T2.lastname  =  "KIRK"
ground truth values:  [('teachers.FirstName', 'MARROTTE'), ('teachers.LastName', 'KIRK')]
matched values OrderedDict([(20, ('teachers.LastName', 'MARROTTE')), (27, ('teachers.FirstName', ' KIRK'))])
--------------------
Picklist: Find the first and last name of all the teachers that teach EVELINA BROMLEY., list, LastName, [BROMLEY]
Picklist: Find the first and last name of all the teachers that teach EVELINA BROMLEY., list, FirstName, [ EVELINA]
--------------------
text:  Find the first and last name of all the teachers that teach EVELINA BROMLEY.
sql:  SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  "EVELINA" AND T1.lastname  =  "BROMLEY"
ground truth values:  [('list.FirstName', 'EVELINA'), ('list.LastName', 'BROMLEY')]
matched values OrderedDict([(7, ('list.LastName', 'BROMLEY')), (12, ('list.FirstName', ' EVELINA'))])
--------------------
Picklist: Which teachers teach the student named EVELINA BROMLEY? Give me the first and last name  of the teachers., list, LastName, [BROMLEY]
Picklist: Which teachers teach the student named EVELINA BROMLEY? Give me the first and last name  of the teachers., list, FirstName, [ EVELINA]
--------------------
text:  Which teachers teach the student named EVELINA BROMLEY? Give me the first and last name  of the teachers.
sql:  SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  "EVELINA" AND T1.lastname  =  "BROMLEY"
ground truth values:  [('list.FirstName', 'EVELINA'), ('list.LastName', 'BROMLEY')]
matched values OrderedDict([(7, ('list.LastName', 'BROMLEY')), (12, ('list.FirstName', ' EVELINA'))])
--------------------
Picklist: Find the last names of all the teachers that teach GELL TAMI., list, LastName, [GELL]
Picklist: Find the last names of all the teachers that teach GELL TAMI., list, FirstName, [ TAMI]
--------------------
text:  Find the last names of all the teachers that teach GELL TAMI.
sql:  SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  "GELL" AND T1.lastname  =  "TAMI"
ground truth values:  [('list.FirstName', 'GELL'), ('list.LastName', 'TAMI')]
matched values OrderedDict([(7, ('list.LastName', 'GELL')), (13, ('list.FirstName', ' TAMI'))])
--------------------
Picklist: What are the last names of the teachers who teach the student called GELL TAMI?, list, LastName, [GELL]
Picklist: What are the last names of the teachers who teach the student called GELL TAMI?, list, FirstName, [ TAMI]
--------------------
text:  What are the last names of the teachers who teach the student called GELL TAMI?
sql:  SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  "GELL" AND T1.lastname  =  "TAMI"
ground truth values:  [('list.FirstName', 'GELL'), ('list.LastName', 'TAMI')]
matched values OrderedDict([(7, ('list.LastName', 'GELL')), (13, ('list.FirstName', ' TAMI'))])
--------------------
Picklist: How many students does LORIA ONDERSMA teaches?, teachers, LastName, [ONDERSMA]
Picklist: How many students does LORIA ONDERSMA teaches?, teachers, FirstName, [ LORIA]
--------------------
text:  How many students does LORIA ONDERSMA teaches?
sql:  SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  "LORIA" AND T2.lastname  =  "ONDERSMA"
ground truth values:  [('teachers.FirstName', 'LORIA'), ('teachers.LastName', 'ONDERSMA')]
matched values OrderedDict([(20, ('teachers.LastName', 'ONDERSMA')), (27, ('teachers.FirstName', ' LORIA'))])
--------------------
Picklist: Count the number of students the teacher LORIA ONDERSMA teaches., teachers, LastName, [ONDERSMA]
Picklist: Count the number of students the teacher LORIA ONDERSMA teaches., teachers, FirstName, [ LORIA]
--------------------
text:  Count the number of students the teacher LORIA ONDERSMA teaches.
sql:  SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  "LORIA" AND T2.lastname  =  "ONDERSMA"
ground truth values:  [('teachers.FirstName', 'LORIA'), ('teachers.LastName', 'ONDERSMA')]
matched values OrderedDict([(20, ('teachers.LastName', 'ONDERSMA')), (27, ('teachers.FirstName', ' LORIA'))])
--------------------
Picklist: How many students does KAWA GORDON teaches?, teachers, LastName, [KAWA]
Picklist: How many students does KAWA GORDON teaches?, teachers, FirstName, [ GORDON]
--------------------
text:  How many students does KAWA GORDON teaches?
sql:  SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  "KAWA" AND T2.lastname  =  "GORDON"
ground truth values:  [('teachers.FirstName', 'KAWA'), ('teachers.LastName', 'GORDON')]
matched values OrderedDict([(20, ('teachers.LastName', 'KAWA')), (26, ('teachers.FirstName', ' GORDON'))])
--------------------
Picklist: Find the number of students taught by the teacher KAWA GORDON., teachers, LastName, [KAWA]
Picklist: Find the number of students taught by the teacher KAWA GORDON., teachers, FirstName, [ GORDON]
--------------------
text:  Find the number of students taught by the teacher KAWA GORDON.
sql:  SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  "KAWA" AND T2.lastname  =  "GORDON"
ground truth values:  [('teachers.FirstName', 'KAWA'), ('teachers.LastName', 'GORDON')]
matched values OrderedDict([(20, ('teachers.LastName', 'KAWA')), (26, ('teachers.FirstName', ' GORDON'))])
--------------------
Picklist: Find the number of students taught by TARRING LEIA., teachers, LastName, [TARRING]
Picklist: Find the number of students taught by TARRING LEIA., teachers, FirstName, [ LEIA]
--------------------
text:  Find the number of students taught by TARRING LEIA.
sql:  SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  "TARRING" AND T2.lastname  =  "LEIA"
ground truth values:  [('teachers.FirstName', 'TARRING'), ('teachers.LastName', 'LEIA')]
matched values OrderedDict([(20, ('teachers.LastName', 'TARRING')), (26, ('teachers.FirstName', ' LEIA'))])
--------------------
Picklist: How many students are taught by teacher TARRING LEIA?, teachers, LastName, [TARRING]
Picklist: How many students are taught by teacher TARRING LEIA?, teachers, FirstName, [ LEIA]
--------------------
text:  How many students are taught by teacher TARRING LEIA?
sql:  SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  "TARRING" AND T2.lastname  =  "LEIA"
ground truth values:  [('teachers.FirstName', 'TARRING'), ('teachers.LastName', 'LEIA')]
matched values OrderedDict([(20, ('teachers.LastName', 'TARRING')), (26, ('teachers.FirstName', ' LEIA'))])
--------------------
Picklist: How many teachers does the student named CHRISSY NABOZNY have?, list, LastName, [NABOZNY]
Picklist: How many teachers does the student named CHRISSY NABOZNY have?, list, FirstName, [ CHRISSY]
--------------------
text:  How many teachers does the student named CHRISSY NABOZNY have?
sql:  SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  "CHRISSY" AND T1.lastname  =  "NABOZNY"
ground truth values:  [('list.FirstName', 'CHRISSY'), ('list.LastName', 'NABOZNY')]
matched values OrderedDict([(7, ('list.LastName', 'NABOZNY')), (15, ('list.FirstName', ' CHRISSY'))])
--------------------
 46%|████▌     | 4077/8943 [13:22<02:04, 39.12it/s] 46%|████▌     | 4083/8943 [13:22<02:00, 40.25it/s] 46%|████▌     | 4092/8943 [13:22<01:42, 47.11it/s] 46%|████▌     | 4100/8943 [13:22<01:30, 53.27it/s] 46%|████▌     | 4108/8943 [13:22<01:22, 58.29it/s] 46%|████▌     | 4119/8943 [13:22<01:11, 67.11it/s] 46%|████▌     | 4131/8943 [13:22<01:02, 76.45it/s] 46%|████▋     | 4140/8943 [13:22<01:07, 71.47it/s] 46%|████▋     | 4149/8943 [13:22<01:03, 75.63it/s]Picklist: Find the number of teachers who teach the student called CHRISSY NABOZNY., list, LastName, [NABOZNY]
Picklist: Find the number of teachers who teach the student called CHRISSY NABOZNY., list, FirstName, [ CHRISSY]
--------------------
text:  Find the number of teachers who teach the student called CHRISSY NABOZNY.
sql:  SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  "CHRISSY" AND T1.lastname  =  "NABOZNY"
ground truth values:  [('list.FirstName', 'CHRISSY'), ('list.LastName', 'NABOZNY')]
matched values OrderedDict([(7, ('list.LastName', 'NABOZNY')), (15, ('list.FirstName', ' CHRISSY'))])
--------------------
Picklist: How many teachers does the student named MADLOCK RAY have?, list, LastName, [MADLOCK]
Picklist: How many teachers does the student named MADLOCK RAY have?, list, FirstName, [ RAY]
--------------------
text:  How many teachers does the student named MADLOCK RAY have?
sql:  SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  "MADLOCK" AND T1.lastname  =  "RAY"
ground truth values:  [('list.FirstName', 'MADLOCK'), ('list.LastName', 'RAY')]
matched values OrderedDict([(7, ('list.LastName', 'MADLOCK')), (13, ('list.FirstName', ' RAY'))])
--------------------
Picklist: Find the number of teachers who teach the student called MADLOCK RAY., list, LastName, [MADLOCK]
Picklist: Find the number of teachers who teach the student called MADLOCK RAY., list, FirstName, [ RAY]
--------------------
text:  Find the number of teachers who teach the student called MADLOCK RAY.
sql:  SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  "MADLOCK" AND T1.lastname  =  "RAY"
ground truth values:  [('list.FirstName', 'MADLOCK'), ('list.LastName', 'RAY')]
matched values OrderedDict([(7, ('list.LastName', 'MADLOCK')), (13, ('list.FirstName', ' RAY'))])
--------------------
Picklist: Find all first-grade students who are NOT taught by OTHA MOYER. Report their first and last names., teachers, LastName, [MOYER]
Picklist: Find all first-grade students who are NOT taught by OTHA MOYER. Report their first and last names., teachers, FirstName, [ OTHA]
--------------------
text:  Find all first-grade students who are NOT taught by OTHA MOYER. Report their first and last names.
sql:  SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  "OTHA" AND T2.lastname  =  "MOYER"
ground truth values:  [('teachers.FirstName', 'OTHA'), ('teachers.LastName', 'MOYER')]
matched values OrderedDict([(20, ('teachers.LastName', 'MOYER')), (26, ('teachers.FirstName', ' OTHA'))])
--------------------
Picklist: What are the first and last names of the first-grade students who are NOT taught by teacher OTHA MOYER?, teachers, LastName, [MOYER]
Picklist: What are the first and last names of the first-grade students who are NOT taught by teacher OTHA MOYER?, teachers, FirstName, [ OTHA]
--------------------
text:  What are the first and last names of the first-grade students who are NOT taught by teacher OTHA MOYER?
sql:  SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  "OTHA" AND T2.lastname  =  "MOYER"
ground truth values:  [('teachers.FirstName', 'OTHA'), ('teachers.LastName', 'MOYER')]
matched values OrderedDict([(20, ('teachers.LastName', 'MOYER')), (26, ('teachers.FirstName', ' OTHA'))])
--------------------
Picklist: Find the last names of the students in third grade that are not taught by COVIN JEROME., teachers, LastName, [COVIN]
Picklist: Find the last names of the students in third grade that are not taught by COVIN JEROME., teachers, FirstName, [ JEROME]
--------------------
text:  Find the last names of the students in third grade that are not taught by COVIN JEROME.
sql:  SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != "COVIN" AND T2.lastname != "JEROME"
ground truth values:  [('teachers.FirstName', 'COVIN'), ('teachers.LastName', 'JEROME')]
matched values OrderedDict([(20, ('teachers.LastName', 'COVIN')), (26, ('teachers.FirstName', ' JEROME'))])
--------------------
Picklist: Which students in third grade are not taught by teacher COVIN JEROME? Give me the last names of the students., teachers, LastName, [COVIN]
Picklist: Which students in third grade are not taught by teacher COVIN JEROME? Give me the last names of the students., teachers, FirstName, [ JEROME]
--------------------
text:  Which students in third grade are not taught by teacher COVIN JEROME? Give me the last names of the students.
sql:  SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != "COVIN" AND T2.lastname != "JEROME"
ground truth values:  [('teachers.FirstName', 'COVIN'), ('teachers.LastName', 'JEROME')]
matched values OrderedDict([(20, ('teachers.LastName', 'COVIN')), (26, ('teachers.FirstName', ' JEROME'))])
--------------------
--------------------
text:  How many companies are headquartered in the US?
sql:  SELECT count(*) FROM company WHERE Headquarters  =  'USA'
ground truth values:  [('company.Headquarters', 'USA')]
matched values OrderedDict()
--------------------
Picklist: Show the names of companies in the banking or retailing industry?, company, Industry, [Banking]
Picklist: Show the names of companies in the banking or retailing industry?, company, Industry, [Retailing]
Picklist: Show the headquarters that have both companies in banking industry and companies in oil and gas industry., company, Industry, [Oil and gas]
Picklist: Show the headquarters that have both companies in banking industry and companies in oil and gas industry., company, Industry, [Banking]
Picklist: Please list the years of film market estimations when the market is in country "Japan" in descending order., market, Country, [Japan]
Picklist: What are the years of film market estimation for the market of Japan, ordered by year descending?, market, Country, [Japan]
Picklist: Show the studios that have produced films with director "Nicholas Meyer" and "Walter Hill"., film, Director, [Nicholas Meyer]
Picklist: Show the studios that have produced films with director "Nicholas Meyer" and "Walter Hill"., film, Director, [Walter Hill]
Picklist: What are the names of studios that have produced films with both Nicholas Meyer and Walter Hill?, film, Director, [Nicholas Meyer]
Picklist: What are the names of studios that have produced films with both Nicholas Meyer and Walter Hill?, film, Director, [Walter Hill]
Picklist: Find the titles and studios of the films that are produced by some film studios that contained the word "Universal"., film, Studio, [Universal]
--------------------
text:  Find the titles and studios of the films that are produced by some film studios that contained the word "Universal".
sql:  SELECT title ,  Studio FROM film WHERE Studio LIKE "%Universal%"
ground truth values:  []
matched values OrderedDict([(11, ('film.Studio', 'Universal'))])
--------------------
Picklist: What are the titles and studios of films that have been produced by a studio whose name contains "Universal"?, film, Studio, [Universal]
--------------------
text:  What are the titles and studios of films that have been produced by a studio whose name contains "Universal"?
sql:  SELECT title ,  Studio FROM film WHERE Studio LIKE "%Universal%"
ground truth values:  []
matched values OrderedDict([(11, ('film.Studio', 'Universal'))])
--------------------
Picklist: Show the studios that have not produced films with director "Walter Hill"., film, Director, [Walter Hill]
 46%|████▋     | 4158/8943 [13:23<01:05, 72.61it/s] 47%|████▋     | 4167/8943 [13:23<01:02, 76.75it/s] 47%|████▋     | 4176/8943 [13:23<01:05, 73.28it/s] 47%|████▋     | 4184/8943 [13:23<01:04, 74.13it/s]Picklist: Which studios have never worked with the director Walter Hill?, film, Director, [Walter Hill]
Picklist: What are the titles and directors of the films were never presented in China?, market, Country, [China]
Picklist: Return the titles and directors of films that were never in the market of China., market, Country, [China]
Picklist: What is the name and description for document type code RV?, Ref_Document_Types, Document_Type_Code, [RV]
Picklist: What is the name and description for document type code RV?, All_Documents, Document_Type_Code, [RV]
--------------------
text:  What is the name and description for document type code RV?
sql:  SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  "RV"
ground truth values:  [('Ref_Document_Types.Document_Type_Code', 'RV')]
matched values OrderedDict([(10, ('Ref_Document_Types.Document_Type_Code', 'RV')), (65, ('All_Documents.Document_Type_Code', 'RV'))])
--------------------
Picklist: Give me the name and description of the document type code RV., Ref_Document_Types, Document_Type_Code, [RV]
Picklist: Give me the name and description of the document type code RV., All_Documents, Document_Type_Code, [RV]
--------------------
text:  Give me the name and description of the document type code RV.
sql:  SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  "RV"
ground truth values:  [('Ref_Document_Types.Document_Type_Code', 'RV')]
matched values OrderedDict([(10, ('Ref_Document_Types.Document_Type_Code', 'RV')), (65, ('All_Documents.Document_Type_Code', 'RV'))])
--------------------
Picklist: What is the document type code for document type "Paper"?, Ref_Document_Types, Document_Type_Name, [Paper]
Picklist: Find the code of the document type "Paper"., Ref_Document_Types, Document_Type_Name, [Paper]
Picklist: Show the number of documents with document type code CV or BK., Ref_Document_Types, Document_Type_Code, [CV]
Picklist: Show the number of documents with document type code CV or BK., Ref_Document_Types, Document_Type_Code, [BK]
Picklist: Show the number of documents with document type code CV or BK., Ref_Document_Types, Document_Type_Name, [CV]
Picklist: Show the number of documents with document type code CV or BK., All_Documents, Document_Type_Code, [BK]
Picklist: Show the number of documents with document type code CV or BK., All_Documents, Document_Type_Code, [CV]
--------------------
text:  Show the number of documents with document type code CV or BK.
sql:  SELECT count(*) FROM All_documents WHERE document_type_code  =  "CV" OR document_type_code  =  "BK"
ground truth values:  [('All_Documents.Document_Type_Code', 'CV'), ('All_Documents.Document_Type_Code', 'BK')]
matched values OrderedDict([(10, ('Ref_Document_Types.Document_Type_Code', 'CV')), (12, ('Ref_Document_Types.Document_Type_Code', 'BK')), (18, ('Ref_Document_Types.Document_Type_Name', 'CV')), (69, ('All_Documents.Document_Type_Code', 'BK')), (71, ('All_Documents.Document_Type_Code', 'CV'))])
--------------------
Picklist: How many documents have document type code CV or BK?, Ref_Document_Types, Document_Type_Code, [CV]
Picklist: How many documents have document type code CV or BK?, Ref_Document_Types, Document_Type_Code, [BK]
Picklist: How many documents have document type code CV or BK?, Ref_Document_Types, Document_Type_Name, [CV]
Picklist: How many documents have document type code CV or BK?, All_Documents, Document_Type_Code, [BK]
Picklist: How many documents have document type code CV or BK?, All_Documents, Document_Type_Code, [CV]
--------------------
text:  How many documents have document type code CV or BK?
sql:  SELECT count(*) FROM All_documents WHERE document_type_code  =  "CV" OR document_type_code  =  "BK"
ground truth values:  [('All_Documents.Document_Type_Code', 'CV'), ('All_Documents.Document_Type_Code', 'BK')]
matched values OrderedDict([(10, ('Ref_Document_Types.Document_Type_Code', 'CV')), (12, ('Ref_Document_Types.Document_Type_Code', 'BK')), (18, ('Ref_Document_Types.Document_Type_Name', 'CV')), (69, ('All_Documents.Document_Type_Code', 'BK')), (71, ('All_Documents.Document_Type_Code', 'CV'))])
--------------------
Picklist: What is the date when the document "Marry CV" was stored?, Ref_Document_Types, Document_Type_Code, [CV]
Picklist: What is the date when the document "Marry CV" was stored?, Ref_Document_Types, Document_Type_Name, [CV]
Picklist: What is the date when the document "Marry CV" was stored?, All_Documents, Document_Type_Code, [CV]
Picklist: What is the date when the document "Marry CV" was stored?, All_Documents, Document_Name, [Marry CV]
--------------------
text:  What is the date when the document "Marry CV" was stored?
sql:  SELECT date_stored FROM All_documents WHERE Document_name  =  "Marry CV"
ground truth values:  [('All_Documents.Document_Name', 'Marry CV')]
matched values OrderedDict([(10, ('Ref_Document_Types.Document_Type_Code', 'CV')), (16, ('Ref_Document_Types.Document_Type_Name', 'CV')), (67, ('All_Documents.Document_Type_Code', 'CV')), (72, ('All_Documents.Document_Name', 'Marry CV'))])
--------------------
Picklist: When was the document named "Marry CV" stored? Give me the date., Ref_Document_Types, Document_Type_Code, [CV]
Picklist: When was the document named "Marry CV" stored? Give me the date., Ref_Document_Types, Document_Type_Name, [CV]
Picklist: When was the document named "Marry CV" stored? Give me the date., All_Documents, Document_Type_Code, [CV]
Picklist: When was the document named "Marry CV" stored? Give me the date., All_Documents, Document_Name, [Marry CV]
--------------------
text:  When was the document named "Marry CV" stored? Give me the date.
sql:  SELECT date_stored FROM All_documents WHERE Document_name  =  "Marry CV"
ground truth values:  [('All_Documents.Document_Name', 'Marry CV')]
matched values OrderedDict([(10, ('Ref_Document_Types.Document_Type_Code', 'CV')), (16, ('Ref_Document_Types.Document_Type_Name', 'CV')), (67, ('All_Documents.Document_Type_Code', 'CV')), (72, ('All_Documents.Document_Name', 'Marry CV'))])
--------------------
Picklist: What is the document type name for the document with name "How to read a book"?, Ref_Document_Types, Document_Type_Name, [Book]
Picklist: What is the document type name for the document with name "How to read a book"?, All_Documents, Document_Name, [How to read a book]
--------------------
text:  What is the document type name for the document with name "How to read a book"?
sql:  SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code  =  T2.document_type_code WHERE T1.document_name  =  "How to read a book"
ground truth values:  [('All_Documents.Document_Name', 'How to read a book')]
matched values OrderedDict([(14, ('Ref_Document_Types.Document_Type_Name', 'Book')), (68, ('All_Documents.Document_Name', 'How to read a book'))])
--------------------
Picklist: Find the document type name of the document named "How to read a book"., Ref_Document_Types, Document_Type_Name, [Book]
Picklist: Find the document type name of the document named "How to read a book"., All_Documents, Document_Name, [How to read a book]
--------------------
text:  Find the document type name of the document named "How to read a book".
sql:  SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code  =  T2.document_type_code WHERE T1.document_name  =  "How to read a book"
ground truth values:  [('All_Documents.Document_Name', 'How to read a book')]
matched values OrderedDict([(14, ('Ref_Document_Types.Document_Type_Name', 'Book')), (68, ('All_Documents.Document_Name', 'How to read a book'))])
--------------------
--------------------
text:  What are the name and description for location code x?
sql:  SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  "x"
ground truth values:  [('Ref_Locations.Location_Code', 'x')]
matched values OrderedDict()
--------------------
--------------------
text:  Give me the name and description of the location with code x.
sql:   47%|████▋     | 4193/8943 [13:23<01:02, 76.39it/s] 47%|████▋     | 4202/8943 [13:23<01:01, 77.63it/s] 47%|████▋     | 4210/8943 [13:23<01:01, 77.30it/s] 47%|████▋     | 4218/8943 [13:23<01:11, 66.52it/s] 47%|████▋     | 4225/8943 [13:24<01:13, 64.43it/s]SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  "x"
ground truth values:  [('Ref_Locations.Location_Code', 'x')]
matched values OrderedDict()
--------------------
Picklist: What is the location code for the country "Canada"?, Ref_Locations, Location_Name, [Canada]
Picklist: Show the location code of the country "Canada"., Ref_Locations, Location_Name, [Canada]
Picklist: What are the name and description for role code "MG"?, Roles, Role_Code, [MG]
Picklist: What are the name and description for role code "MG"?, Employees, Role_Code, [MG]
--------------------
text:  What are the name and description for role code "MG"?
sql:  SELECT role_name ,  role_description FROM ROLES WHERE role_code  =  "MG"
ground truth values:  [('Roles.Role_Code', 'MG')]
matched values OrderedDict([(44, ('Roles.Role_Code', 'MG')), (82, ('Employees.Role_Code', 'MG'))])
--------------------
Picklist: Find the name and description of the role with code "MG"., Roles, Role_Code, [MG]
Picklist: Find the name and description of the role with code "MG"., Employees, Role_Code, [MG]
--------------------
text:  Find the name and description of the role with code "MG".
sql:  SELECT role_name ,  role_description FROM ROLES WHERE role_code  =  "MG"
ground truth values:  [('Roles.Role_Code', 'MG')]
matched values OrderedDict([(44, ('Roles.Role_Code', 'MG')), (82, ('Employees.Role_Code', 'MG'))])
--------------------
Picklist: Show the description for role name "Proof Reader"., Roles, Role_Name, [Proof Reader]
Picklist: What is the description of the role named "Proof Reader"?, Roles, Role_Name, [Proof Reader]
Picklist: Show the name, role code, and date of birth for the employee with name 'Armani'., Employees, Employee_Name, [Armani]
Picklist: What are the name, role code, and date of birth of the employee named 'Armani'?, Employees, Employee_Name, [Armani]
Picklist: What is the id for the employee called Ebba?, Employees, Employee_Name, [Ebba]
Picklist: Show the id of the employee named Ebba., Employees, Employee_Name, [Ebba]
Picklist: Show the names of all the employees with role "HR"., Roles, Role_Code, [HR]
Picklist: Show the names of all the employees with role "HR"., Employees, Role_Code, [HR]
--------------------
text:  Show the names of all the employees with role "HR".
sql:  SELECT employee_name FROM Employees WHERE role_code  =  "HR"
ground truth values:  [('Employees.Role_Code', 'HR')]
matched values OrderedDict([(44, ('Roles.Role_Code', 'HR')), (82, ('Employees.Role_Code', 'HR'))])
--------------------
Picklist: Which employees have the role with code "HR"? Find their names., Roles, Role_Code, [HR]
Picklist: Which employees have the role with code "HR"? Find their names., Employees, Role_Code, [HR]
--------------------
text:  Which employees have the role with code "HR"? Find their names.
sql:  SELECT employee_name FROM Employees WHERE role_code  =  "HR"
ground truth values:  [('Employees.Role_Code', 'HR')]
matched values OrderedDict([(44, ('Roles.Role_Code', 'HR')), (82, ('Employees.Role_Code', 'HR'))])
--------------------
Picklist: What is the role name and role description for employee called Ebba?, Employees, Employee_Name, [Ebba]
Picklist: Show the name and description of the role played by the employee named Ebba., Employees, Employee_Name, [Ebba]
Picklist: Show the names of employees with role name Editor., Roles, Role_Name, [Editor]
Picklist: Find the names of all the employees whose the role name is "Editor"., Roles, Role_Name, [Editor]
Picklist: Show the employee ids for all employees with role name "Human Resource" or "Manager"., Roles, Role_Name, [Human Resource]
Picklist: Show the employee ids for all employees with role name "Human Resource" or "Manager"., Roles, Role_Name, [Manager]
Picklist: What are the employee ids of the employees whose role name is "Human Resource" or "Manager"?, Roles, Role_Name, [Human Resource]
Picklist: What are the employee ids of the employees whose role name is "Human Resource" or "Manager"?, Roles, Role_Name, [Manager]
Picklist: Show the location name for document "Robin CV"., Ref_Document_Types, Document_Type_Code, [CV]
Picklist: Show the location name for document "Robin CV"., Ref_Document_Types, Document_Type_Name, [CV]
Picklist: Show the location name for document "Robin CV"., All_Documents, Document_Type_Code, [CV]
Picklist: Show the location name for document "Robin CV"., All_Documents, Document_Name, [Robin CV]
--------------------
text:  Show the location name for document "Robin CV".
sql:  SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  "Robin CV"
ground truth values:  [('All_Documents.Document_Name', 'Robin CV')]
matched values OrderedDict([(10, ('Ref_Document_Types.Document_Type_Code', 'CV')), (16, ('Ref_Document_Types.Document_Type_Name', 'CV')), (67, ('All_Documents.Document_Type_Code', 'CV')), (72, ('All_Documents.Document_Name', 'Robin CV'))])
--------------------
Picklist: What is the location name of the document "Robin CV"?, Ref_Document_Types, Document_Type_Code, [CV]
Picklist: What is the location name of the document "Robin CV"?, Ref_Document_Types, Document_Type_Name, [CV]
Picklist: What is the location name of the document "Robin CV"?, All_Documents, Document_Type_Code, [CV]
Picklist: What is the location name of the document "Robin CV"?, All_Documents, Document_Name, [Robin CV]
--------------------
text:  What is the location name of the document "Robin CV"?
sql:  SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  "Robin CV"
ground truth values:  [('All_Documents.Document_Name', 'Robin CV')]
matched values OrderedDict([(10, ('Ref_Document_Types.Document_Type_Code', 'CV')), (16, ('Ref_Document_Types.Document_Type_Name', 'CV')), (67, ('All_Documents.Document_Type_Code', 'CV')), (72, ('All_Documents.Document_Name', 'Robin CV'))])
--------------------
Picklist: What is "the date in location from" and "the date in location to" for the document with name "Robin CV"?, Ref_Document_Types, Document_Type_Code, [CV]
Picklist: What is "the date in location from" and "the date in location to" for the document with name "Robin CV"?, Ref_Document_Types, Document_Type_Name, [CV]
Picklist: What is "the date in location from" and "the date in location to" for the document with name "Robin CV"?, All_Documents, Document_Type_Code, [CV]
Picklist: What is "the date in location from" and "the date in location to" for the document with name "Robin CV"?, All_Documents, Document_Name, [Robin CV]
--------------------
text:  What is "the date in location from" and "the date in location to" for the document with name "Robin CV"?
sql:  SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Robin CV"
ground truth values:  [('All_Documents.Document_Name', 'Robin CV')]
matched values OrderedDict([(10, ('Ref_Document_Types.Document_Type_Code', 'CV')), (16, ('Ref_Document_Types.Document_Type_Name', 'CV')), (67, ('All_Documents.Document_Type_Code', 'CV')), (72, ('All_Documents.Document_Name', 'Robin CV'))])
--------------------
Picklist: Find the starting date and ending data in location for the document named "Robin CV"., Ref_Document_Types, Document_Type_Code, [CV]
Picklist: Find the starting date and ending data in location for the document named "Robin CV"., Ref_Document_Types, Document_Type_Name, [CV]
Picklist: Find the starting date and ending data in location for the document named "Robin CV"., All_Documents, Document_Type_Code, [CV]
Picklist: Find the starting date and ending data in location for the document named "Robin CV"., All_Documents, Document_Name, [Robin CV]
--------------------
text:  Find the starting date and ending data in location for the document named "Robin CV".
sql:   47%|████▋     | 4232/8943 [13:24<01:11, 65.56it/s] 47%|████▋     | 4239/8943 [13:24<01:15, 62.11it/s] 48%|████▊     | 4248/8943 [13:24<01:09, 67.68it/s] 48%|████▊     | 4260/8943 [13:24<01:01, 75.73it/s] 48%|████▊     | 4269/8943 [13:24<01:15, 62.26it/s] 48%|████▊     | 4276/8943 [13:24<01:33, 49.82it/s] 48%|████▊     | 4282/8943 [13:25<01:36, 48.13it/s] 48%|████▊     | 4291/8943 [13:25<01:24, 55.33it/s]SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Robin CV"
ground truth values:  [('All_Documents.Document_Name', 'Robin CV')]
matched values OrderedDict([(10, ('Ref_Document_Types.Document_Type_Code', 'CV')), (16, ('Ref_Document_Types.Document_Type_Name', 'CV')), (67, ('All_Documents.Document_Type_Code', 'CV')), (72, ('All_Documents.Document_Name', 'Robin CV'))])
--------------------
Picklist: Find the last names of the members of the club "Bootup Baltimore"., Club, ClubName, [Bootup Baltimore]
Picklist: Who are the members of the club named "Bootup Baltimore"? Give me their last names., Club, ClubName, [Bootup Baltimore]
Picklist: Who are the members of the club named "Hopkins Student Enterprises"? Show the last name., Club, ClubName, [Hopkins Student Enterprises]
Picklist: Return the last name for the members of the club named "Hopkins Student Enterprises"., Club, ClubName, [Hopkins Student Enterprises]
Picklist: How many members does the club "Tennis Club" has?, Club, ClubName, [Tennis Club]
Picklist: Count the members of the club "Tennis Club"., Club, ClubName, [Tennis Club]
Picklist: Find the number of members of club "Pen and Paper Gaming"., Club, ClubName, [Pen and Paper Gaming]
Picklist: How many people have membership in the club "Pen and Paper Gaming"?, Club, ClubName, [Pen and Paper Gaming]
Picklist: How many clubs does "Linda Smith" belong to?, Student, LName, [Smith]
Picklist: How many clubs does "Linda Smith" belong to?, Student, Fname, [Linda]
Picklist: How many clubs does "Linda Smith" have membership for?, Student, LName, [Smith]
Picklist: How many clubs does "Linda Smith" have membership for?, Student, Fname, [Linda]
Picklist: Find the number of clubs where "Tracy Kim" is a member., Student, LName, [Kim]
Picklist: Find the number of clubs where "Tracy Kim" is a member., Student, Fname, [Tracy]
Picklist: For how many clubs is "Tracy Kim" a member?, Student, LName, [Kim]
Picklist: For how many clubs is "Tracy Kim" a member?, Student, Fname, [Tracy]
Picklist: Find all the female members of club "Bootup Baltimore". Show the first name and last name., Club, ClubName, [Bootup Baltimore]
--------------------
text:  Find all the female members of club "Bootup Baltimore". Show the first name and last name.
sql:  SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Bootup Baltimore" AND t3.sex  =  "F"
ground truth values:  [('Club.ClubName', 'Bootup Baltimore'), ('Student.Sex', 'F')]
matched values OrderedDict([(32, ('Club.ClubName', 'Bootup Baltimore'))])
--------------------
Picklist: Give me the first name and last name for all the female members of the club "Bootup Baltimore"., Club, ClubName, [Bootup Baltimore]
--------------------
text:  Give me the first name and last name for all the female members of the club "Bootup Baltimore".
sql:  SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Bootup Baltimore" AND t3.sex  =  "F"
ground truth values:  [('Club.ClubName', 'Bootup Baltimore'), ('Student.Sex', 'F')]
matched values OrderedDict([(32, ('Club.ClubName', 'Bootup Baltimore'))])
--------------------
Picklist: Find all the male members of club "Hopkins Student Enterprises". Show the first name and last name., Club, ClubName, [Hopkins Student Enterprises]
--------------------
text:  Find all the male members of club "Hopkins Student Enterprises". Show the first name and last name.
sql:  SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Hopkins Student Enterprises" AND t3.sex  =  "M"
ground truth values:  [('Club.ClubName', 'Hopkins Student Enterprises'), ('Student.Sex', 'M')]
matched values OrderedDict([(32, ('Club.ClubName', 'Hopkins Student Enterprises'))])
--------------------
Picklist: What are the first name and last name of each male member in club "Hopkins Student Enterprises"?, Club, ClubName, [Hopkins Student Enterprises]
--------------------
text:  What are the first name and last name of each male member in club "Hopkins Student Enterprises"?
sql:  SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  "Hopkins Student Enterprises" AND t3.sex  =  "M"
ground truth values:  [('Club.ClubName', 'Hopkins Student Enterprises'), ('Student.Sex', 'M')]
matched values OrderedDict([(32, ('Club.ClubName', 'Hopkins Student Enterprises'))])
--------------------
Picklist: Find all members of "Bootup Baltimore" whose major is "600". Show the first name and last name., Club, ClubName, [Bootup Baltimore]
Picklist: Which members of "Bootup Baltimore" major in "600"? Give me their first names and last names., Club, ClubName, [Bootup Baltimore]
--------------------
text:  Find the name of the club that has the most female students.
sql:  SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  "F" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1
ground truth values:  [('Student.Sex', 'F')]
matched values OrderedDict()
--------------------
--------------------
text:  Which club has the most female students as their members? Give me the name of the club.
sql:  SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  "F" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1
ground truth values:  [('Student.Sex', 'F')]
matched values OrderedDict()
--------------------
Picklist: What is the description of the club named "Tennis Club"?, Club, ClubName, [Tennis Club]
Picklist: Find the description of the club called "Tennis Club"., Club, ClubName, [Tennis Club]
Picklist: Find the description of the club "Pen and Paper Gaming"., Club, ClubName, [Pen and Paper Gaming]
Picklist: What is the description of the club "Pen and Paper Gaming"?, Club, ClubName, [Pen and Paper Gaming]
Picklist: What is the location of the club named "Tennis Club"?, Club, ClubName, [Tennis Club]
Picklist: Where us the club named "Tennis Club" located?, Club, ClubName, [Tennis Club]
Picklist: Find the location of the club "Pen and Paper Gaming"., Club, ClubName, [Pen and Paper Gaming]
Picklist: Where is the club "Pen and Paper Gaming" located?, Club, ClubName, [Pen and Paper Gaming]
Picklist: Where is the club "Hopkins Student Enterprises" located?, Club, ClubName, [Hopkins Student Enterprises]
Picklist: Tell me the location of the club "Hopkins Student Enterprises"., Club, ClubName, [Hopkins Student Enterprises]
Picklist: Find the name of all the clubs at "AKW"., Club, ClubLocation, [AKW]
Picklist: Which clubs are located at "AKW"? Return the club names., Club, ClubLocation, [AKW]
Picklist: How many clubs are located at "HHH"?, Club, ClubLocation, [HHH]
Picklist: Count the number of clubs located at "HHH"., Club, ClubLocation, [HHH]
Picklist: What are the first and last name of the president of the club "Bootup Baltimore"?, Club, ClubName, [Bootup Baltimore]
Picklist: What are the first and last name of the president of the club "Bootup Baltimore"?, Member_of_club, Position, [President]
Picklist: Who is the president of the club "Bootup Baltimore"? Give me the first and last name., Club, ClubName, [Bootup Baltimore]
Picklist: Who is the president of the club "Bootup Baltimore"? Give me the first and last name., Member_of_club, Position, [President]
Picklist: Who is the "CTO" of club "Hopkins Student Enterprises"? Show the first name and last name., Club, ClubName, [Hopkins Student Enterprises]
Picklist: Who is the "CTO" of club "Hopkins Student Enterprises"? Show the first name and last name., Member_of_club, Position, [CTO]
 48%|████▊     | 4298/8943 [13:25<01:28, 52.27it/s] 48%|████▊     | 4304/8943 [13:25<01:34, 49.14it/s] 48%|████▊     | 4310/8943 [13:25<01:40, 46.19it/s] 48%|████▊     | 4315/8943 [13:25<01:44, 44.46it/s] 48%|████▊     | 4320/8943 [13:25<01:44, 44.34it/s]Picklist: Find the first name and last name for the "CTO" of the club "Hopkins Student Enterprises"?, Club, ClubName, [Hopkins Student Enterprises]
Picklist: Find the first name and last name for the "CTO" of the club "Hopkins Student Enterprises"?, Member_of_club, Position, [CTO]
Picklist: How many different roles are there in the club "Bootup Baltimore"?, Club, ClubName, [Bootup Baltimore]
Picklist: Count the number of different positions in the club "Bootup Baltimore"., Club, ClubName, [Bootup Baltimore]
Picklist: How many members of "Bootup Baltimore" are older than 18?, Club, ClubName, [Bootup Baltimore]
Picklist: Count the number of members in club "Bootup Baltimore" whose age is above 18., Club, ClubName, [Bootup Baltimore]
Picklist: How many members of club "Bootup Baltimore" are younger than 18?, Club, ClubName, [Bootup Baltimore]
Picklist: Count the number of members in club "Bootup Baltimore" whose age is below 18., Club, ClubName, [Bootup Baltimore]
Picklist: Find the names of all the clubs that have at least a member from the city with city code "BAL"., Student, city_code, [BAL]
Picklist: Which clubs have one or more members from the city with code "BAL"? Give me the names of the clubs., Student, city_code, [BAL]
Picklist: Find the names of the clubs that have at least a member from the city with city code "HOU"., Student, city_code, [HOU]
Picklist: Which clubs have one or more members from the city with code "HOU"? Give me the names of the clubs., Student, city_code, [HOU]
Picklist: How many clubs does the student named "Eric Tai" belong to?, Student, LName, [Tai]
Picklist: How many clubs does the student named "Eric Tai" belong to?, Student, Fname, [Eric]
Picklist: Count the number of clubs for which the student named "Eric Tai" is a member., Student, LName, [Tai]
Picklist: Count the number of clubs for which the student named "Eric Tai" is a member., Student, Fname, [Eric]
Picklist: List the clubs having "Davis Steven" as a member., Student, LName, [Davis]
Picklist: List the clubs having "Davis Steven" as a member., Student, Fname, [Steven]
--------------------
text:  List the clubs having "Davis Steven" as a member.
sql:  SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  "Davis" AND t3.lname  =  "Steven"
ground truth values:  [('Student.Fname', 'Davis'), ('Student.LName', 'Steven')]
matched values OrderedDict([(10, ('Student.LName', 'Davis')), (15, ('Student.Fname', 'Steven'))])
--------------------
Picklist: What are the names of the clubs that have "Davis Steven" as a member?, Student, LName, [Davis]
Picklist: What are the names of the clubs that have "Davis Steven" as a member?, Student, Fname, [Steven]
--------------------
text:  What are the names of the clubs that have "Davis Steven" as a member?
sql:  SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  "Davis" AND t3.lname  =  "Steven"
ground truth values:  [('Student.Fname', 'Davis'), ('Student.LName', 'Steven')]
matched values OrderedDict([(10, ('Student.LName', 'Davis')), (15, ('Student.Fname', 'Steven'))])
--------------------
Picklist: What is the average age of the members of the club "Bootup Baltimore"?, Club, ClubName, [Bootup Baltimore]
Picklist: Find the average age of the members in the club "Bootup Baltimore"., Club, ClubName, [Bootup Baltimore]
Picklist: Find the average age of members of the club "Hopkins Student Enterprises"., Club, ClubName, [Hopkins Student Enterprises]
Picklist: On average, how old are the members in the club "Hopkins Student Enterprises"?, Club, ClubName, [Hopkins Student Enterprises]
Picklist: Retrieve the average age of members of the club "Tennis Club"., Club, ClubName, [Tennis Club]
Picklist: Compute the average age of the members in the club "Tennis Club"., Club, ClubName, [Tennis Club]
Picklist: What are the distinct grant amount for the grants where the documents were sent before '1986-08-26 20:49:27' and grant were ended after '1989-03-16 18:27:16'?, Grants, grant_start_date, [1986-08-26 20:49:27]
Picklist: What are the distinct grant amount for the grants where the documents were sent before '1986-08-26 20:49:27' and grant were ended after '1989-03-16 18:27:16'?, Grants, grant_end_date, [1989-03-16 18:27:16]
--------------------
text:  What are the distinct grant amount for the grants where the documents were sent before '1986-08-26 20:49:27' and grant were ended after '1989-03-16 18:27:16'?
sql:  SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id WHERE T2.sent_date  <  '1986-08-26 20:49:27' INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date  >  '1989-03-16 18:27:16'
ground truth values:  [('Documents.sent_date', '1986-08-26 20:49:27'), ('Grants.grant_end_date', '1989-03-16 18:27:16')]
matched values OrderedDict([(49, ('Grants.grant_start_date', '1986-08-26 20:49:27')), (64, ('Grants.grant_end_date', '1989-03-16 18:27:16'))])
--------------------
Picklist: What are the different grant amounts for documents sent before '1986-08-26 20:49:27' and after the grant ended on '1989-03-16 18:27:16'?, Grants, grant_start_date, [1986-08-26 20:49:27]
Picklist: What are the different grant amounts for documents sent before '1986-08-26 20:49:27' and after the grant ended on '1989-03-16 18:27:16'?, Grants, grant_end_date, [1989-03-16 18:27:16]
--------------------
text:  What are the different grant amounts for documents sent before '1986-08-26 20:49:27' and after the grant ended on '1989-03-16 18:27:16'?
sql:  SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id WHERE T2.sent_date  <  '1986-08-26 20:49:27' INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date  >  '1989-03-16 18:27:16'
ground truth values:  [('Documents.sent_date', '1986-08-26 20:49:27'), ('Grants.grant_end_date', '1989-03-16 18:27:16')]
matched values OrderedDict([(49, ('Grants.grant_start_date', '1986-08-26 20:49:27')), (64, ('Grants.grant_end_date', '1989-03-16 18:27:16'))])
--------------------
Picklist: List the project details of the project both producing patent and paper as outcomes., Project_Outcomes, outcome_code, [Patent]
Picklist: List the project details of the project both producing patent and paper as outcomes., Project_Outcomes, outcome_code, [Paper]
Picklist: List the project details of the project both producing patent and paper as outcomes., Research_Outcomes, outcome_code, [Patent]
Picklist: List the project details of the project both producing patent and paper as outcomes., Research_Outcomes, outcome_code, [Paper]
--------------------
text:  List the project details of the project both producing patent and paper as outcomes.
sql:  SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Patent'
ground truth values:  [('Project_Outcomes.outcome_code', 'Paper'), ('Project_Outcomes.outcome_code', 'Patent')]
matched values OrderedDict([(86, ('Project_Outcomes.outcome_code', 'Patent')), (88, ('Project_Outcomes.outcome_code', 'Paper')), (131, ('Research_Outcomes.outcome_code', 'Patent')), (133, ('Research_Outcomes.outcome_code', 'Paper'))])
--------------------
Picklist: What are the details of the project that is producing both patents and papers as outcomes?, Project_Outcomes, outcome_code, [Patent]
Picklist: What are the details of the project that is producing both patents and papers as outcomes?, Project_Outcomes, outcome_code, [Paper]
Picklist: What are the details of the project that is producing both patents and papers as outcomes?, Research_Outcomes, outcome_code, [Patent]
Picklist: What are the details of the project that is producing both patents and papers as outcomes?, Research_Outcomes, outcome_code, [Paper]
--------------------
text:   48%|████▊     | 4325/8943 [13:25<01:52, 40.94it/s] 48%|████▊     | 4330/8943 [13:26<01:55, 40.00it/s]What are the details of the project that is producing both patents and papers as outcomes?
sql:  SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Patent'
ground truth values:  [('Project_Outcomes.outcome_code', 'Paper'), ('Project_Outcomes.outcome_code', 'Patent')]
matched values OrderedDict([(86, ('Project_Outcomes.outcome_code', 'Patent')), (88, ('Project_Outcomes.outcome_code', 'Paper')), (131, ('Research_Outcomes.outcome_code', 'Patent')), (133, ('Research_Outcomes.outcome_code', 'Paper'))])
--------------------
Picklist: What is the total grant amount of the organisations described as research?, Organisation_Types, organisation_type_description, [Research]
Picklist: What is the total grant amount of the organisations described as research?, Project_Staff, role_code, [researcher]
Picklist: What is the total grant amount of the organisations described as research?, Staff_Roles, role_code, [researcher]
--------------------
text:  What is the total grant amount of the organisations described as research?
sql:  SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'
ground truth values:  [('Organisation_Types.organisation_type_description', 'Research')]
matched values OrderedDict([(66, ('Organisation_Types.organisation_type_description', 'Research')), (103, ('Project_Staff.role_code', 'researcher')), (153, ('Staff_Roles.role_code', 'researcher'))])
--------------------
Picklist: What is the total amount of grant money for research?, Organisation_Types, organisation_type_description, [Research]
Picklist: What is the total amount of grant money for research?, Project_Staff, role_code, [researcher]
Picklist: What is the total amount of grant money for research?, Staff_Roles, role_code, [researcher]
--------------------
text:  What is the total amount of grant money for research?
sql:  SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'
ground truth values:  [('Organisation_Types.organisation_type_description', 'Research')]
matched values OrderedDict([(66, ('Organisation_Types.organisation_type_description', 'Research')), (103, ('Project_Staff.role_code', 'researcher')), (153, ('Staff_Roles.role_code', 'researcher'))])
--------------------
--------------------
text:  List from which date and to which date these staff work: project staff of the project which hires the most staffs
sql:  SELECT date_from ,  date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'leader'
ground truth values:  [('Project_Staff.role_code', 'leader')]
matched values OrderedDict()
--------------------
Picklist: From what date and to what date do the staff work on a project that has the most staff and has staff in a leader role?, Project_Staff, role_code, [leader]
Picklist: From what date and to what date do the staff work on a project that has the most staff and has staff in a leader role?, Staff_Roles, role_code, [leader]
--------------------
text:  From what date and to what date do the staff work on a project that has the most staff and has staff in a leader role?
sql:  SELECT date_from ,  date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'leader'
ground truth values:  [('Project_Staff.role_code', 'leader')]
matched values OrderedDict([(101, ('Project_Staff.role_code', 'leader')), (151, ('Staff_Roles.role_code', 'leader'))])
--------------------
Picklist: What is the organisation type and id of the organisation which has the most number of research staff?, Organisation_Types, organisation_type_description, [Research]
Picklist: What is the organisation type and id of the organisation which has the most number of research staff?, Project_Staff, role_code, [researcher]
Picklist: What is the organisation type and id of the organisation which has the most number of research staff?, Staff_Roles, role_code, [researcher]
--------------------
text:  What is the organisation type and id of the organisation which has the most number of research staff?
sql:  SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(66, ('Organisation_Types.organisation_type_description', 'Research')), (103, ('Project_Staff.role_code', 'researcher')), (153, ('Staff_Roles.role_code', 'researcher'))])
--------------------
Picklist: What is the type and id of the organization that has the most research staff?, Organisation_Types, organisation_type_description, [Research]
Picklist: What is the type and id of the organization that has the most research staff?, Project_Staff, role_code, [researcher]
Picklist: What is the type and id of the organization that has the most research staff?, Staff_Roles, role_code, [researcher]
--------------------
text:  What is the type and id of the organization that has the most research staff?
sql:  SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(66, ('Organisation_Types.organisation_type_description', 'Research')), (103, ('Project_Staff.role_code', 'researcher')), (153, ('Staff_Roles.role_code', 'researcher'))])
--------------------
Picklist: Which organisation type hires most research staff?, Organisation_Types, organisation_type_description, [Research]
Picklist: Which organisation type hires most research staff?, Project_Staff, role_code, [researcher]
Picklist: Which organisation type hires most research staff?, Staff_Roles, role_code, [researcher]
--------------------
text:  Which organisation type hires most research staff?
sql:  SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(66, ('Organisation_Types.organisation_type_description', 'Research')), (103, ('Project_Staff.role_code', 'researcher')), (153, ('Staff_Roles.role_code', 'researcher'))])
--------------------
Picklist: What is the type of the organization with the most research staff?, Organisation_Types, organisation_type_description, [Research]
Picklist: What is the type of the organization with the most research staff?, Project_Staff, role_code, [researcher]
Picklist: What is the type of the organization with the most research staff?, Staff_Roles, role_code, [researcher]
--------------------
text:  What is the type of the organization with the most research staff?
sql:  SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(66, ('Organisation_Types.organisation_type_description', 'Research')), (103, ('Project_Staff.role_code', 'researcher')), (153, ('Staff_Roles.role_code', 'researcher'))])
--------------------
 48%|████▊     | 4335/8943 [13:26<01:54, 40.41it/s] 49%|████▊     | 4340/8943 [13:26<01:55, 39.91it/s] 49%|████▊     | 4345/8943 [13:26<01:55, 39.89it/s]Picklist: Find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described, Projects, project_details, [sed]
--------------------
text:  Find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described
sql:  SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'
ground truth values:  [('Organisation_Types.organisation_type_description', 'Research')]
matched values OrderedDict([(121, ('Projects.project_details', 'sed'))])
--------------------
Picklist: What are the send dates for all documents that have a grant amount of more than 5000 and are involved in research?, Organisation_Types, organisation_type_description, [Research]
Picklist: What are the send dates for all documents that have a grant amount of more than 5000 and are involved in research?, Project_Staff, role_code, [researcher]
Picklist: What are the send dates for all documents that have a grant amount of more than 5000 and are involved in research?, Projects, project_details, [sed]
Picklist: What are the send dates for all documents that have a grant amount of more than 5000 and are involved in research?, Staff_Roles, role_code, [researcher]
--------------------
text:  What are the send dates for all documents that have a grant amount of more than 5000 and are involved in research?
sql:  SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'
ground truth values:  [('Organisation_Types.organisation_type_description', 'Research')]
matched values OrderedDict([(66, ('Organisation_Types.organisation_type_description', 'Research')), (103, ('Project_Staff.role_code', 'researcher')), (125, ('Projects.project_details', 'sed')), (156, ('Staff_Roles.role_code', 'researcher'))])
--------------------
Picklist: What are the response received dates for the documents described as 'Regular' or granted with more than 100?, Document_Types, document_description, [Regular]
Picklist: What is the response received date for the document described as Regular that was granted more than 100 dollars?, Document_Types, document_description, [Regular]
Picklist: List the project details of the projects which did not hire any staff for a researcher role., Organisation_Types, organisation_type_description, [Research]
Picklist: List the project details of the projects which did not hire any staff for a researcher role., Project_Staff, role_code, [researcher]
Picklist: List the project details of the projects which did not hire any staff for a researcher role., Staff_Roles, role_code, [researcher]
--------------------
text:  List the project details of the projects which did not hire any staff for a researcher role.
sql:  SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )
ground truth values:  [('Project_Staff.role_code', 'researcher')]
matched values OrderedDict([(66, ('Organisation_Types.organisation_type_description', 'Research')), (103, ('Project_Staff.role_code', 'researcher')), (153, ('Staff_Roles.role_code', 'researcher'))])
--------------------
Picklist: What are the details for all projects that did not hire any staff in a research role?, Organisation_Types, organisation_type_description, [Research]
Picklist: What are the details for all projects that did not hire any staff in a research role?, Project_Staff, role_code, [researcher]
Picklist: What are the details for all projects that did not hire any staff in a research role?, Staff_Roles, role_code, [researcher]
--------------------
text:  What are the details for all projects that did not hire any staff in a research role?
sql:  SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )
ground truth values:  [('Project_Staff.role_code', 'researcher')]
matched values OrderedDict([(66, ('Organisation_Types.organisation_type_description', 'Research')), (103, ('Project_Staff.role_code', 'researcher')), (153, ('Staff_Roles.role_code', 'researcher'))])
--------------------
Picklist: What are the task details, task id and project id for the projects which are detailed as 'omnis' or  have more than 2 outcomes?, Projects, project_details, [omnis]
Picklist: What are the task details, task ids, and project ids for the progrects that are detailed as 'omnis' or have at least 3 outcomes?, Projects, project_details, [omnis]
Picklist: When do all the researcher role staff start to work, and when do they stop working?, Organisation_Types, organisation_type_description, [Research]
Picklist: When do all the researcher role staff start to work, and when do they stop working?, Project_Staff, role_code, [researcher]
Picklist: When do all the researcher role staff start to work, and when do they stop working?, Staff_Roles, role_code, [researcher]
--------------------
text:  When do all the researcher role staff start to work, and when do they stop working?
sql:  SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'researcher'
ground truth values:  [('Project_Staff.role_code', 'researcher')]
matched values OrderedDict([(66, ('Organisation_Types.organisation_type_description', 'Research')), (103, ('Project_Staff.role_code', 'researcher')), (153, ('Staff_Roles.role_code', 'researcher'))])
--------------------
Picklist: When did researchers start and stop working?, Project_Staff, role_code, [researcher]
Picklist: When did researchers start and stop working?, Staff_Roles, role_code, [researcher]
--------------------
text:  When did researchers start and stop working?
sql:  SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'researcher'
ground truth values:  [('Project_Staff.role_code', 'researcher')]
matched values OrderedDict([(101, ('Project_Staff.role_code', 'researcher')), (151, ('Staff_Roles.role_code', 'researcher'))])
--------------------
Picklist: List the project details of the projects with the research outcome described with the substring 'Published'., Organisation_Types, organisation_type_description, [Research]
Picklist: List the project details of the projects with the research outcome described with the substring 'Published'., Project_Staff, role_code, [researcher]
Picklist: List the project details of the projects with the research outcome described with the substring 'Published'., Staff_Roles, role_code, [researcher]
--------------------
text:  List the project details of the projects with the research outcome described with the substring 'Published'.
sql:  SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code  =  T3.outcome_code WHERE T3.outcome_description LIKE '%Published%'
ground truth values:  []
matched values OrderedDict([(66, ('Organisation_Types.organisation_type_description', 'Research')), (103, ('Project_Staff.role_code', 'researcher')), (153, ('Staff_Roles.role_code', 'researcher'))])
--------------------
Picklist: What are the details for the project whose research has been published?, Organisation_Types, organisation_type_description, [Research]
Picklist: What are the details for the project whose research has been published?, Project_Staff, role_code, [researcher]
Picklist: What are the details for the project whose research has been published?, Staff_Roles, role_code, [researcher]
--------------------
text:  What are the details for the project whose research has been published?
sql:   49%|████▊     | 4352/8943 [13:26<01:43, 44.38it/s] 49%|████▊     | 4359/8943 [13:26<01:33, 49.05it/s] 49%|████▉     | 4365/8943 [13:26<01:35, 47.89it/s] 49%|████▉     | 4370/8943 [13:26<01:40, 45.65it/s]SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code  =  T3.outcome_code WHERE T3.outcome_description LIKE '%Published%'
ground truth values:  []
matched values OrderedDict([(66, ('Organisation_Types.organisation_type_description', 'Research')), (103, ('Project_Staff.role_code', 'researcher')), (153, ('Staff_Roles.role_code', 'researcher'))])
--------------------
Picklist: What is the complete description of the researcher role., Organisation_Types, organisation_type_description, [Research]
Picklist: What is the complete description of the researcher role., Project_Staff, role_code, [researcher]
Picklist: What is the complete description of the researcher role., Staff_Roles, role_code, [researcher]
--------------------
text:  What is the complete description of the researcher role.
sql:  SELECT role_description FROM Staff_Roles WHERE role_code  =  'researcher'
ground truth values:  [('Staff_Roles.role_code', 'researcher')]
matched values OrderedDict([(66, ('Organisation_Types.organisation_type_description', 'Research')), (103, ('Project_Staff.role_code', 'researcher')), (153, ('Staff_Roles.role_code', 'researcher'))])
--------------------
Picklist: What is the complete description of the job of a researcher?, Organisation_Types, organisation_type_description, [Research]
Picklist: What is the complete description of the job of a researcher?, Project_Staff, role_code, [researcher]
Picklist: What is the complete description of the job of a researcher?, Staff_Roles, role_code, [researcher]
--------------------
text:  What is the complete description of the job of a researcher?
sql:  SELECT role_description FROM Staff_Roles WHERE role_code  =  'researcher'
ground truth values:  [('Staff_Roles.role_code', 'researcher')]
matched values OrderedDict([(66, ('Organisation_Types.organisation_type_description', 'Research')), (103, ('Project_Staff.role_code', 'researcher')), (153, ('Staff_Roles.role_code', 'researcher'))])
--------------------
Picklist: Which organisation hired the most number of research staff? List the organisation id, type and detail., Organisation_Types, organisation_type_description, [Research]
Picklist: Which organisation hired the most number of research staff? List the organisation id, type and detail., Project_Staff, role_code, [researcher]
Picklist: Which organisation hired the most number of research staff? List the organisation id, type and detail., Staff_Roles, role_code, [researcher]
--------------------
text:  Which organisation hired the most number of research staff? List the organisation id, type and detail.
sql:  SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(66, ('Organisation_Types.organisation_type_description', 'Research')), (103, ('Project_Staff.role_code', 'researcher')), (153, ('Staff_Roles.role_code', 'researcher'))])
--------------------
Picklist: What are the ids, types, and details of the organization with the most research staff?, Organisation_Types, organisation_type_description, [Research]
Picklist: What are the ids, types, and details of the organization with the most research staff?, Project_Staff, role_code, [researcher]
Picklist: What are the ids, types, and details of the organization with the most research staff?, Staff_Roles, role_code, [researcher]
--------------------
text:  What are the ids, types, and details of the organization with the most research staff?
sql:  SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(66, ('Organisation_Types.organisation_type_description', 'Research')), (103, ('Project_Staff.role_code', 'researcher')), (153, ('Staff_Roles.role_code', 'researcher'))])
--------------------
Picklist: For grants with both documents described as 'Regular' and documents described as 'Initial Application', list its start date., Document_Types, document_description, [Initial Application]
Picklist: For grants with both documents described as 'Regular' and documents described as 'Initial Application', list its start date., Document_Types, document_description, [Regular]
Picklist: For grants that have descriptions of Regular and Initial Applications, what are their start dates?, Document_Types, document_description, [Regular]
Picklist: For grants that have descriptions of Regular and Initial Applications, what are their start dates?, Document_Types, document_description, [Initial Application]
Picklist: Find the organisation type description of the organisation detailed as 'quo'., Organisations, organisation_details, [quo]
Picklist: Find the organisation type description of the organisation detailed as 'quo'., Research_Staff, staff_details, [quo]
--------------------
text:  Find the organisation type description of the organisation detailed as 'quo'.
sql:  SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_details  =  'quo'
ground truth values:  [('Organisations.organisation_details', 'quo')]
matched values OrderedDict([(77, ('Organisations.organisation_details', 'quo')), (145, ('Research_Staff.staff_details', 'quo'))])
--------------------
Picklist: What is the type description of the organization whose detail is listed as 'quo'?, Organisations, organisation_details, [quo]
Picklist: What is the type description of the organization whose detail is listed as 'quo'?, Research_Staff, staff_details, [quo]
--------------------
text:  What is the type description of the organization whose detail is listed as 'quo'?
sql:  SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_details  =  'quo'
ground truth values:  [('Organisations.organisation_details', 'quo')]
matched values OrderedDict([(77, ('Organisations.organisation_details', 'quo')), (145, ('Research_Staff.staff_details', 'quo'))])
--------------------
Picklist: What are all the details of the organisations described as 'Sponsor'? Sort the result in an ascending order., Organisation_Types, organisation_type_description, [Sponsor]
Picklist: What are the details of all organizations that are described as Sponsors and sort the results in ascending order?, Organisation_Types, organisation_type_description, [Sponsor]
Picklist: How many Patent outcomes are generated from all the projects?, Project_Outcomes, outcome_code, [Patent]
Picklist: How many Patent outcomes are generated from all the projects?, Research_Outcomes, outcome_code, [Patent]
--------------------
text:  How many Patent outcomes are generated from all the projects?
sql:  SELECT count(*) FROM Project_outcomes WHERE outcome_code  =  'Patent'
ground truth values:  [('Project_Outcomes.outcome_code', 'Patent')]
matched values OrderedDict([(86, ('Project_Outcomes.outcome_code', 'Patent')), (129, ('Research_Outcomes.outcome_code', 'Patent'))])
--------------------
Picklist: How many patents outcomes were listed for all the projects?, Project_Outcomes, outcome_code, [Patent]
Picklist: How many patents outcomes were listed for all the projects?, Research_Outcomes, outcome_code, [Patent]
--------------------
text:  How many patents outcomes were listed for all the projects?
sql:  SELECT count(*) FROM Project_outcomes WHERE outcome_code  =  'Patent'
ground truth values:  [('Project_Outcomes.outcome_code', 'Patent')]
matched values OrderedDict([(86, ('Project_Outcomes.outcome_code', 'Patent')), (129, ('Research_Outcomes.outcome_code', 'Patent'))])
--------------------
 49%|████▉     | 4377/8943 [13:27<01:31, 50.14it/s] 49%|████▉     | 4383/8943 [13:27<01:27, 52.09it/s] 49%|████▉     | 4391/8943 [13:27<01:20, 56.36it/s] 49%|████▉     | 4399/8943 [13:27<01:15, 60.12it/s] 49%|████▉     | 4413/8943 [13:27<01:03, 71.21it/s]Picklist: How many project staff worked as leaders or started working before '1989-04-24 23:51:54'?, Project_Staff, role_code, [leader]
Picklist: How many project staff worked as leaders or started working before '1989-04-24 23:51:54'?, Project_Staff, date_from, [1989-04-24 23:51:54]
Picklist: How many project staff worked as leaders or started working before '1989-04-24 23:51:54'?, Staff_Roles, role_code, [leader]
--------------------
text:  How many project staff worked as leaders or started working before '1989-04-24 23:51:54'?
sql:  SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'
ground truth values:  [('Project_Staff.role_code', 'leader'), ('Project_Staff.date_from', '1989-04-24 23:51:54')]
matched values OrderedDict([(101, ('Project_Staff.role_code', 'leader')), (106, ('Project_Staff.date_from', '1989-04-24 23:51:54')), (162, ('Staff_Roles.role_code', 'leader'))])
--------------------
Picklist: How many project members were leaders or started working before '1989-04-24 23:51:54'?, Project_Staff, role_code, [leader]
Picklist: How many project members were leaders or started working before '1989-04-24 23:51:54'?, Project_Staff, date_from, [1989-04-24 23:51:54]
Picklist: How many project members were leaders or started working before '1989-04-24 23:51:54'?, Staff_Roles, role_code, [leader]
--------------------
text:  How many project members were leaders or started working before '1989-04-24 23:51:54'?
sql:  SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'
ground truth values:  [('Project_Staff.role_code', 'leader'), ('Project_Staff.date_from', '1989-04-24 23:51:54')]
matched values OrderedDict([(101, ('Project_Staff.role_code', 'leader')), (106, ('Project_Staff.date_from', '1989-04-24 23:51:54')), (162, ('Staff_Roles.role_code', 'leader'))])
--------------------
Picklist: What are the result description of the project whose detail is 'sint'?, Projects, project_details, [sint]
Picklist: What are the result description of the project whose detail is 'sint'?, Research_Staff, staff_details, [sint]
--------------------
text:  What are the result description of the project whose detail is 'sint'?
sql:  SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  'sint'
ground truth values:  [('Projects.project_details', 'sint')]
matched values OrderedDict([(121, ('Projects.project_details', 'sint')), (146, ('Research_Staff.staff_details', 'sint'))])
--------------------
Picklist: What is the description for the results whose project detail is 'sint'?, Projects, project_details, [sint]
Picklist: What is the description for the results whose project detail is 'sint'?, Research_Staff, staff_details, [sint]
--------------------
text:  What is the description for the results whose project detail is 'sint'?
sql:  SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code JOIN Projects AS T3 ON T2.project_id  =  T3.project_id WHERE T3.project_details  =  'sint'
ground truth values:  [('Projects.project_details', 'sint')]
matched values OrderedDict([(121, ('Projects.project_details', 'sint')), (146, ('Research_Staff.staff_details', 'sint'))])
--------------------
Picklist: List the research staff details, and order in ascending order., Organisation_Types, organisation_type_description, [Research]
Picklist: List the research staff details, and order in ascending order., Project_Staff, role_code, [researcher]
Picklist: List the research staff details, and order in ascending order., Staff_Roles, role_code, [researcher]
--------------------
text:  List the research staff details, and order in ascending order.
sql:  SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC
ground truth values:  []
matched values OrderedDict([(66, ('Organisation_Types.organisation_type_description', 'Research')), (103, ('Project_Staff.role_code', 'researcher')), (153, ('Staff_Roles.role_code', 'researcher'))])
--------------------
Picklist: What details are there on the research staff? List the result in ascending alphabetical order., Organisation_Types, organisation_type_description, [Research]
Picklist: What details are there on the research staff? List the result in ascending alphabetical order., Project_Staff, role_code, [researcher]
Picklist: What details are there on the research staff? List the result in ascending alphabetical order., Staff_Roles, role_code, [researcher]
--------------------
text:  What details are there on the research staff? List the result in ascending alphabetical order.
sql:  SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC
ground truth values:  []
matched values OrderedDict([(66, ('Organisation_Types.organisation_type_description', 'Research')), (103, ('Project_Staff.role_code', 'researcher')), (153, ('Staff_Roles.role_code', 'researcher'))])
--------------------
--------------------
text:  What are the staff roles of the staff who
sql:  SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18'
ground truth values:  [('Project_Staff.date_from', '2003-04-19 15:06:20'), ('Project_Staff.date_to', '2016-03-15 00:33:18')]
matched values OrderedDict()
--------------------
Picklist: What roles did staff members play between '2003-04-19 15:06:20' and '2016-03-15 00:33:18'?, Project_Staff, date_from, [2003-04-19 15:06:20]
Picklist: What roles did staff members play between '2003-04-19 15:06:20' and '2016-03-15 00:33:18'?, Project_Staff, date_to, [2016-03-15 00:33:18]
Picklist: How many friends does Dan have?, Person, name, [Dan]
Picklist: How many friends does Dan have?, PersonFriend, friend, [Dan]
--------------------
text:  How many friends does Dan have?
sql:  SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'
ground truth values:  [('Person.name', 'Dan')]
matched values OrderedDict([(6, ('Person.name', 'Dan')), (23, ('PersonFriend.friend', 'Dan'))])
--------------------
Picklist: How many friends does Dan have?, Person, name, [Dan]
Picklist: How many friends does Dan have?, PersonFriend, friend, [Dan]
--------------------
text:  How many friends does Dan have?
sql:  SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'
ground truth values:  [('Person.name', 'Dan')]
matched values OrderedDict([(6, ('Person.name', 'Dan')), (23, ('PersonFriend.friend', 'Dan'))])
--------------------
Picklist: How many females does this network has?, Person, gender, [female]
Picklist: How many females are in the network?, Person, gender, [female]
Picklist: Who is the oldest person whose job is student?, Person, job, [student]
--------------------
text:  Who is the oldest person whose job is student?
sql:  SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )
ground truth values:  [('Person.job', 'student'), ('Person.job', 'student')]
matched values OrderedDict([(14, ('Person.job', 'student'))])
--------------------
Picklist: What is the name of the oldest student?, Person, job, [student]
--------------------
text:  What is the name of the oldest student?
sql:  SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )
ground truth values:  [('Person.job', 'student'), ('Person.job', 'student')]
matched values OrderedDict([(14, ('Person.job', 'student'))])
--------------------
Picklist: Who is the youngest male?, Person, gender, [male]
--------------------
text:  Who is the youngest male?
sql:  SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )
ground truth values:  [('Person.gender', 'male'), ('Person.gender', 'male')]
matched values OrderedDict([(12, ('Person.gender', 'male'))])
--------------------
 49%|████▉     | 4424/8943 [13:27<00:57, 78.59it/s] 50%|████▉     | 4434/8943 [13:27<00:55, 81.64it/s] 50%|████▉     | 4443/8943 [13:27<00:56, 80.02it/s] 50%|████▉     | 4452/8943 [13:28<01:13, 61.44it/s]Picklist: What is the name of the youngest male?, Person, gender, [male]
--------------------
text:  What is the name of the youngest male?
sql:  SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )
ground truth values:  [('Person.gender', 'male'), ('Person.gender', 'male')]
matched values OrderedDict([(12, ('Person.gender', 'male'))])
--------------------
Picklist: How old is the doctor named Zach?, Person, name, [Zach]
Picklist: How old is the doctor named Zach?, Person, job, [doctor]
Picklist: How old is the doctor named Zach?, PersonFriend, name, [Zach]
Picklist: How old is the doctor named Zach?, PersonFriend, friend, [Zach]
--------------------
text:  How old is the doctor named Zach?
sql:  SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'
ground truth values:  [('Person.job', 'doctor'), ('Person.name', 'Zach')]
matched values OrderedDict([(6, ('Person.name', 'Zach')), (16, ('Person.job', 'doctor')), (23, ('PersonFriend.name', 'Zach')), (27, ('PersonFriend.friend', 'Zach'))])
--------------------
Picklist: What is the age of the doctor named Zach?, Person, name, [Zach]
Picklist: What is the age of the doctor named Zach?, Person, job, [doctor]
Picklist: What is the age of the doctor named Zach?, PersonFriend, name, [Zach]
Picklist: What is the age of the doctor named Zach?, PersonFriend, friend, [Zach]
--------------------
text:  What is the age of the doctor named Zach?
sql:  SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'
ground truth values:  [('Person.job', 'doctor'), ('Person.name', 'Zach')]
matched values OrderedDict([(6, ('Person.name', 'Zach')), (16, ('Person.job', 'doctor')), (23, ('PersonFriend.name', 'Zach')), (27, ('PersonFriend.friend', 'Zach'))])
--------------------
Picklist: How many people whose age is greater 30 and job is engineer?, Person, job, [engineer]
Picklist: HOw many engineers are older than 30?, Person, job, [engineer]
Picklist: What is average age of male for different job title?, Person, gender, [male]
Picklist: What is the average age for a male in each job?, Person, gender, [male]
Picklist: Find the name of people whose age is greater than any engineer sorted by their age., Person, job, [engineer]
Picklist: What is the name of all the people who are older than at least one engineer? Order them by age., Person, job, [engineer]
Picklist: Find the number of people whose age is greater than all engineers., Person, job, [engineer]
Picklist: How many people are older than every engineer?, Person, job, [engineer]
Picklist: Find the name and age of all males in order of their age., Person, gender, [male]
Picklist: What is the name and age of every male? Order the results by age., Person, gender, [male]
Picklist: Find the name and age of the person who is a friend of both Dan and Alice., Person, name, [Alice]
Picklist: Find the name and age of the person who is a friend of both Dan and Alice., Person, name, [Dan]
Picklist: Find the name and age of the person who is a friend of both Dan and Alice., PersonFriend, name, [Alice]
Picklist: Find the name and age of the person who is a friend of both Dan and Alice., PersonFriend, friend, [Alice]
Picklist: Find the name and age of the person who is a friend of both Dan and Alice., PersonFriend, friend, [Dan]
--------------------
text:  Find the name and age of the person who is a friend of both Dan and Alice.
sql:  SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'
ground truth values:  [('PersonFriend.friend', 'Dan'), ('PersonFriend.friend', 'Alice')]
matched values OrderedDict([(6, ('Person.name', 'Alice')), (8, ('Person.name', 'Dan')), (23, ('PersonFriend.name', 'Alice')), (27, ('PersonFriend.friend', 'Alice')), (29, ('PersonFriend.friend', 'Dan'))])
--------------------
Picklist: What are the names and ages of every person who is a friend of both Dan and Alice?, Person, name, [Alice]
Picklist: What are the names and ages of every person who is a friend of both Dan and Alice?, Person, name, [Dan]
Picklist: What are the names and ages of every person who is a friend of both Dan and Alice?, PersonFriend, name, [Alice]
Picklist: What are the names and ages of every person who is a friend of both Dan and Alice?, PersonFriend, friend, [Alice]
Picklist: What are the names and ages of every person who is a friend of both Dan and Alice?, PersonFriend, friend, [Dan]
--------------------
text:  What are the names and ages of every person who is a friend of both Dan and Alice?
sql:  SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'
ground truth values:  [('PersonFriend.friend', 'Dan'), ('PersonFriend.friend', 'Alice')]
matched values OrderedDict([(6, ('Person.name', 'Alice')), (8, ('Person.name', 'Dan')), (23, ('PersonFriend.name', 'Alice')), (27, ('PersonFriend.friend', 'Alice')), (29, ('PersonFriend.friend', 'Dan'))])
--------------------
Picklist: Find the name and age of the person who is a friend of Dan or Alice., Person, name, [Alice]
Picklist: Find the name and age of the person who is a friend of Dan or Alice., Person, name, [Dan]
Picklist: Find the name and age of the person who is a friend of Dan or Alice., PersonFriend, name, [Alice]
Picklist: Find the name and age of the person who is a friend of Dan or Alice., PersonFriend, friend, [Alice]
Picklist: Find the name and age of the person who is a friend of Dan or Alice., PersonFriend, friend, [Dan]
--------------------
text:  Find the name and age of the person who is a friend of Dan or Alice.
sql:  SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'
ground truth values:  [('PersonFriend.friend', 'Dan'), ('PersonFriend.friend', 'Alice')]
matched values OrderedDict([(6, ('Person.name', 'Alice')), (8, ('Person.name', 'Dan')), (23, ('PersonFriend.name', 'Alice')), (27, ('PersonFriend.friend', 'Alice')), (29, ('PersonFriend.friend', 'Dan'))])
--------------------
Picklist: What are the different names and ages of every friend of either Dan or alice?, Person, name, [Alice]
Picklist: What are the different names and ages of every friend of either Dan or alice?, Person, name, [Dan]
Picklist: What are the different names and ages of every friend of either Dan or alice?, PersonFriend, name, [Alice]
Picklist: What are the different names and ages of every friend of either Dan or alice?, PersonFriend, friend, [Alice]
Picklist: What are the different names and ages of every friend of either Dan or alice?, PersonFriend, friend, [Dan]
--------------------
text:  What are the different names and ages of every friend of either Dan or alice?
sql:  SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'
ground truth values:  [('PersonFriend.friend', 'Dan'), ('PersonFriend.friend', 'Alice')]
matched values OrderedDict([(6, ('Person.name', 'Alice')), (8, ('Person.name', 'Dan')), (23, ('PersonFriend.name', 'Alice')), (27, ('PersonFriend.friend', 'Alice')), (29, ('PersonFriend.friend', 'Dan'))])
--------------------
Picklist: Find the name of the person who has no student friends., Person, job, [student]
Picklist: What are the names of the people who have no friends who are students?, Person, job, [student]
Picklist: Who are the friends of Bob?, Person, name, [Bob]
Picklist: Who are the friends of Bob?, PersonFriend, name, [Bob]
Picklist: Who are the friends of Bob?, PersonFriend, friend, [Bob]
--------------------
text:  Who are the friends of Bob?
sql:  SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Bob'
ground truth values:  [('Person.name', 'Bob')]
matched values  50%|████▉     | 4460/8943 [13:28<01:09, 64.96it/s] 50%|████▉     | 4468/8943 [13:28<01:09, 64.43it/s]OrderedDict([(6, ('Person.name', 'Bob')), (21, ('PersonFriend.name', 'Bob')), (25, ('PersonFriend.friend', 'Bob'))])
--------------------
Picklist: Who are Bob's friends?, Person, name, [Bob]
Picklist: Who are Bob's friends?, PersonFriend, name, [Bob]
Picklist: Who are Bob's friends?, PersonFriend, friend, [Bob]
--------------------
text:  Who are Bob's friends?
sql:  SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Bob'
ground truth values:  [('Person.name', 'Bob')]
matched values OrderedDict([(6, ('Person.name', 'Bob')), (21, ('PersonFriend.name', 'Bob')), (25, ('PersonFriend.friend', 'Bob'))])
--------------------
Picklist: Find the name of persons who are friends with Bob., Person, name, [Bob]
Picklist: Find the name of persons who are friends with Bob., PersonFriend, name, [Bob]
Picklist: Find the name of persons who are friends with Bob., PersonFriend, friend, [Bob]
--------------------
text:  Find the name of persons who are friends with Bob.
sql:  SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'
ground truth values:  [('PersonFriend.friend', 'Bob')]
matched values OrderedDict([(6, ('Person.name', 'Bob')), (21, ('PersonFriend.name', 'Bob')), (25, ('PersonFriend.friend', 'Bob'))])
--------------------
Picklist: What are the names of all of Bob's friends?, Person, name, [Bob]
Picklist: What are the names of all of Bob's friends?, PersonFriend, name, [Bob]
Picklist: What are the names of all of Bob's friends?, PersonFriend, friend, [Bob]
--------------------
text:  What are the names of all of Bob's friends?
sql:  SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'
ground truth values:  [('PersonFriend.friend', 'Bob')]
matched values OrderedDict([(6, ('Person.name', 'Bob')), (21, ('PersonFriend.name', 'Bob')), (25, ('PersonFriend.friend', 'Bob'))])
--------------------
Picklist: Find the names of females who are friends with Zach, Person, name, [Zach]
Picklist: Find the names of females who are friends with Zach, Person, gender, [female]
Picklist: Find the names of females who are friends with Zach, PersonFriend, name, [Zach]
Picklist: Find the names of females who are friends with Zach, PersonFriend, friend, [Zach]
--------------------
text:  Find the names of females who are friends with Zach
sql:  SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female'
ground truth values:  [('PersonFriend.friend', 'Zach'), ('Person.gender', 'female')]
matched values OrderedDict([(6, ('Person.name', 'Zach')), (14, ('Person.gender', 'female')), (23, ('PersonFriend.name', 'Zach')), (27, ('PersonFriend.friend', 'Zach'))])
--------------------
Picklist: What are the names of all females who are friends with Zach?, Person, name, [Zach]
Picklist: What are the names of all females who are friends with Zach?, Person, gender, [female]
Picklist: What are the names of all females who are friends with Zach?, PersonFriend, name, [Zach]
Picklist: What are the names of all females who are friends with Zach?, PersonFriend, friend, [Zach]
--------------------
text:  What are the names of all females who are friends with Zach?
sql:  SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female'
ground truth values:  [('PersonFriend.friend', 'Zach'), ('Person.gender', 'female')]
matched values OrderedDict([(6, ('Person.name', 'Zach')), (14, ('Person.gender', 'female')), (23, ('PersonFriend.name', 'Zach')), (27, ('PersonFriend.friend', 'Zach'))])
--------------------
Picklist: Find the female friends of Alice., Person, name, [Alice]
Picklist: Find the female friends of Alice., Person, gender, [female]
Picklist: Find the female friends of Alice., PersonFriend, name, [Alice]
Picklist: Find the female friends of Alice., PersonFriend, friend, [Alice]
--------------------
text:  Find the female friends of Alice.
sql:  SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'
ground truth values:  [('PersonFriend.name', 'Alice'), ('Person.gender', 'female')]
matched values OrderedDict([(6, ('Person.name', 'Alice')), (14, ('Person.gender', 'female')), (23, ('PersonFriend.name', 'Alice')), (27, ('PersonFriend.friend', 'Alice'))])
--------------------
Picklist: What are all the friends of Alice who are female?, Person, name, [Alice]
Picklist: What are all the friends of Alice who are female?, Person, gender, [female]
Picklist: What are all the friends of Alice who are female?, PersonFriend, name, [Alice]
Picklist: What are all the friends of Alice who are female?, PersonFriend, friend, [Alice]
--------------------
text:  What are all the friends of Alice who are female?
sql:  SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'
ground truth values:  [('PersonFriend.name', 'Alice'), ('Person.gender', 'female')]
matched values OrderedDict([(6, ('Person.name', 'Alice')), (14, ('Person.gender', 'female')), (23, ('PersonFriend.name', 'Alice')), (27, ('PersonFriend.friend', 'Alice'))])
--------------------
Picklist: Find the male friend of Alice whose job is a doctor?, Person, name, [Alice]
Picklist: Find the male friend of Alice whose job is a doctor?, Person, gender, [male]
Picklist: Find the male friend of Alice whose job is a doctor?, Person, job, [doctor]
Picklist: Find the male friend of Alice whose job is a doctor?, PersonFriend, name, [Alice]
Picklist: Find the male friend of Alice whose job is a doctor?, PersonFriend, friend, [Alice]
--------------------
text:  Find the male friend of Alice whose job is a doctor?
sql:  SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'
ground truth values:  [('PersonFriend.name', 'Alice'), ('Person.gender', 'male'), ('Person.job', 'doctor')]
matched values OrderedDict([(6, ('Person.name', 'Alice')), (14, ('Person.gender', 'male')), (18, ('Person.job', 'doctor')), (25, ('PersonFriend.name', 'Alice')), (29, ('PersonFriend.friend', 'Alice'))])
--------------------
Picklist: Who are the friends of Alice that are doctors?, Person, name, [Alice]
Picklist: Who are the friends of Alice that are doctors?, Person, job, [doctor]
Picklist: Who are the friends of Alice that are doctors?, PersonFriend, name, [Alice]
Picklist: Who are the friends of Alice that are doctors?, PersonFriend, friend, [Alice]
--------------------
text:  Who are the friends of Alice that are doctors?
sql:  SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'
ground truth values:  [('PersonFriend.name', 'Alice'), ('Person.gender', 'male'), ('Person.job', 'doctor')]
matched values OrderedDict([(6, ('Person.name', 'Alice')), (16, ('Person.job', 'doctor')), (23, ('PersonFriend.name', 'Alice')), (27, ('PersonFriend.friend', 'Alice'))])
--------------------
Picklist: Who has a friend that is from new york city?, Person, city, [new york city]
--------------------
text:  What are the names of all friends who are from New York?
sql:  SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'
ground truth values:  [('Person.city', 'new york city')]
matched values OrderedDict()
--------------------
Picklist: Who is the friend of Zach with longest year relationship?, Person, name, [Zach]
Picklist: Who is the friend of Zach with longest year relationship?, PersonFriend, name, [Zach]
Picklist: Who is the friend of Zach with longest year relationship?, PersonFriend, friend, [Zach]
--------------------
text:  Who is the friend of Zach with longest year relationship?
sql:  SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')
ground truth values:   50%|█████     | 4475/8943 [13:28<01:11, 62.09it/s] 50%|█████     | 4482/8943 [13:28<01:09, 63.76it/s][('PersonFriend.name', 'Zach'), ('PersonFriend.name', 'Zach')]
matched values OrderedDict([(6, ('Person.name', 'Zach')), (21, ('PersonFriend.name', 'Zach')), (25, ('PersonFriend.friend', 'Zach'))])
--------------------
Picklist: Which friend of Zach has the longest-lasting friendship?, Person, name, [Zach]
Picklist: Which friend of Zach has the longest-lasting friendship?, PersonFriend, name, [Zach]
Picklist: Which friend of Zach has the longest-lasting friendship?, PersonFriend, friend, [Zach]
--------------------
text:  Which friend of Zach has the longest-lasting friendship?
sql:  SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')
ground truth values:  [('PersonFriend.name', 'Zach'), ('PersonFriend.name', 'Zach')]
matched values OrderedDict([(6, ('Person.name', 'Zach')), (21, ('PersonFriend.name', 'Zach')), (25, ('PersonFriend.friend', 'Zach'))])
--------------------
Picklist: What is the age of the friend of Zach with longest year relationship?, Person, name, [Zach]
Picklist: What is the age of the friend of Zach with longest year relationship?, PersonFriend, name, [Zach]
Picklist: What is the age of the friend of Zach with longest year relationship?, PersonFriend, friend, [Zach]
--------------------
text:  What is the age of the friend of Zach with longest year relationship?
sql:  SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')
ground truth values:  [('PersonFriend.name', 'Zach'), ('PersonFriend.name', 'Zach')]
matched values OrderedDict([(6, ('Person.name', 'Zach')), (21, ('PersonFriend.name', 'Zach')), (25, ('PersonFriend.friend', 'Zach'))])
--------------------
Picklist: What are the ages of all of Zach's friends who are in the longest relationship?, Person, name, [Zach]
Picklist: What are the ages of all of Zach's friends who are in the longest relationship?, PersonFriend, name, [Zach]
Picklist: What are the ages of all of Zach's friends who are in the longest relationship?, PersonFriend, friend, [Zach]
--------------------
text:  What are the ages of all of Zach's friends who are in the longest relationship?
sql:  SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')
ground truth values:  [('PersonFriend.name', 'Zach'), ('PersonFriend.name', 'Zach')]
matched values OrderedDict([(6, ('Person.name', 'Zach')), (21, ('PersonFriend.name', 'Zach')), (25, ('PersonFriend.friend', 'Zach'))])
--------------------
Picklist: Find the name of persons who are friends with Alice for the shortest years., Person, name, [Alice]
Picklist: Find the name of persons who are friends with Alice for the shortest years., PersonFriend, name, [Alice]
Picklist: Find the name of persons who are friends with Alice for the shortest years., PersonFriend, friend, [Alice]
--------------------
text:  Find the name of persons who are friends with Alice for the shortest years.
sql:  SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')
ground truth values:  [('PersonFriend.friend', 'Alice'), ('PersonFriend.friend', 'Alice')]
matched values OrderedDict([(6, ('Person.name', 'Alice')), (21, ('PersonFriend.name', 'Alice')), (25, ('PersonFriend.friend', 'Alice'))])
--------------------
Picklist: What are the names of all people who are friends with Alice for the shortest amount of time?, Person, name, [Alice]
Picklist: What are the names of all people who are friends with Alice for the shortest amount of time?, PersonFriend, name, [Alice]
Picklist: What are the names of all people who are friends with Alice for the shortest amount of time?, PersonFriend, friend, [Alice]
--------------------
text:  What are the names of all people who are friends with Alice for the shortest amount of time?
sql:  SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')
ground truth values:  [('PersonFriend.friend', 'Alice'), ('PersonFriend.friend', 'Alice')]
matched values OrderedDict([(6, ('Person.name', 'Alice')), (21, ('PersonFriend.name', 'Alice')), (25, ('PersonFriend.friend', 'Alice'))])
--------------------
Picklist: Find the name, age, and job title of persons who are friends with Alice for the longest years., Person, name, [Alice]
Picklist: Find the name, age, and job title of persons who are friends with Alice for the longest years., PersonFriend, name, [Alice]
Picklist: Find the name, age, and job title of persons who are friends with Alice for the longest years., PersonFriend, friend, [Alice]
--------------------
text:  Find the name, age, and job title of persons who are friends with Alice for the longest years.
sql:  SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')
ground truth values:  [('PersonFriend.friend', 'Alice'), ('PersonFriend.friend', 'Alice')]
matched values OrderedDict([(6, ('Person.name', 'Alice')), (21, ('PersonFriend.name', 'Alice')), (25, ('PersonFriend.friend', 'Alice'))])
--------------------
Picklist: What are the names, ages, and jobs of all people who are friends with Alice for the longest amount of time?, Person, name, [Alice]
Picklist: What are the names, ages, and jobs of all people who are friends with Alice for the longest amount of time?, PersonFriend, name, [Alice]
Picklist: What are the names, ages, and jobs of all people who are friends with Alice for the longest amount of time?, PersonFriend, friend, [Alice]
--------------------
text:  What are the names, ages, and jobs of all people who are friends with Alice for the longest amount of time?
sql:  SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')
ground truth values:  [('PersonFriend.friend', 'Alice'), ('PersonFriend.friend', 'Alice')]
matched values OrderedDict([(6, ('Person.name', 'Alice')), (21, ('PersonFriend.name', 'Alice')), (25, ('PersonFriend.friend', 'Alice'))])
--------------------
Picklist: What is the total number of people who has no friend living in the city of Austin., Person, city, [austin]
Picklist: What is the total number of people who have no friends living in Austin?, Person, city, [austin]
Picklist: Find Alice's friends of friends., Person, name, [Alice]
Picklist: Find Alice's friends of friends., PersonFriend, name, [Alice]
Picklist: Find Alice's friends of friends., PersonFriend, friend, [Alice]
--------------------
text:  Find Alice's friends of friends.
sql:  SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'
ground truth values:  [('Person.name', 'Alice'), ('PersonFriend.name', 'Alice')]
matched values OrderedDict([(6, ('Person.name', 'Alice')), (21, ('PersonFriend.name', 'Alice')), (25, ('PersonFriend.friend', 'Alice'))])
--------------------
Picklist: What are the names of all of Alice's friends of friends?, Person, name, [Alice]
Picklist: What are the names of all of Alice's friends of friends?, PersonFriend, name, [Alice]
Picklist: What are the names of all of Alice's friends of friends?, PersonFriend, friend, [Alice]
--------------------
text:  What are the names of all of Alice's friends of friends?
sql:  SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'
ground truth values:  [('Person.name', 'Alice'), ('PersonFriend.name', 'Alice')]
matched values  50%|█████     | 4490/8943 [13:28<01:06, 66.95it/s] 50%|█████     | 4498/8943 [13:28<01:03, 70.08it/s] 50%|█████     | 4506/8943 [13:28<01:05, 68.09it/s] 50%|█████     | 4514/8943 [13:32<10:22,  7.12it/s] 51%|█████     | 4519/8943 [13:32<07:45,  9.50it/s] 51%|█████     | 4525/8943 [13:32<05:50, 12.61it/s]OrderedDict([(6, ('Person.name', 'Alice')), (21, ('PersonFriend.name', 'Alice')), (25, ('PersonFriend.friend', 'Alice'))])
--------------------
Picklist: Show the names of members whose country is "United States" or "Canada"., member, Country, [United States]
Picklist: Show the names of members whose country is "United States" or "Canada"., member, Country, [Canada]
Picklist: Show the distinct leader names of colleges associated with members from country "Canada"., member, Country, [Canada]
Picklist: Find the name and access counts of all documents, in alphabetic order of the document name., Images, image_alt_text, [Name]
--------------------
text:  Find the name and access counts of all documents, in alphabetic order of the document name.
sql:  SELECT document_name ,  access_count FROM documents ORDER BY document_name
ground truth values:  []
matched values OrderedDict([(68, ('Images.image_alt_text', 'Name'))])
--------------------
Picklist: What are the names of all the documents, as well as the access counts of each, ordered alphabetically?, Images, image_alt_text, [Name]
--------------------
text:  What are the names of all the documents, as well as the access counts of each, ordered alphabetically?
sql:  SELECT document_name ,  access_count FROM documents ORDER BY document_name
ground truth values:  []
matched values OrderedDict([(68, ('Images.image_alt_text', 'Name'))])
--------------------
Picklist: Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?, Images, image_alt_text, [Name]
--------------------
text:  Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?
sql:  SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(68, ('Images.image_alt_text', 'Name'))])
--------------------
Picklist: What is the name of the document which has been accessed the most times, as well as the number of times it has been accessed?, Images, image_alt_text, [Name]
--------------------
text:  What is the name of the document which has been accessed the most times, as well as the number of times it has been accessed?
sql:  SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(68, ('Images.image_alt_text', 'Name'))])
--------------------
Picklist: What is the type of the document named "David CV"?, Images, image_alt_text, [Name]
Picklist: What is the type of the document named "David CV"?, Documents, document_type_code, [CV]
Picklist: What is the type of the document named "David CV"?, Documents, document_name, [David CV]
--------------------
text:  What is the type of the document named "David CV"?
sql:  SELECT document_type_code FROM documents WHERE document_name  =  "David CV"
ground truth values:  [('Documents.document_name', 'David CV')]
matched values OrderedDict([(68, ('Images.image_alt_text', 'Name')), (90, ('Documents.document_type_code', 'CV')), (98, ('Documents.document_name', 'David CV'))])
--------------------
Picklist: Return the type code of the document named "David CV"., Images, image_alt_text, [Name]
Picklist: Return the type code of the document named "David CV"., Documents, document_type_code, [CV]
Picklist: Return the type code of the document named "David CV"., Documents, document_name, [David CV]
--------------------
text:  Return the type code of the document named "David CV".
sql:  SELECT document_type_code FROM documents WHERE document_name  =  "David CV"
ground truth values:  [('Documents.document_name', 'David CV')]
matched values OrderedDict([(68, ('Images.image_alt_text', 'Name')), (90, ('Documents.document_type_code', 'CV')), (98, ('Documents.document_name', 'David CV'))])
--------------------
SQL query cannot be parsed: SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3
Picklist: What are the names of documents that have both one of the three most common types and one of three most common structures?, Images, image_alt_text, [Name]
SQL query cannot be parsed: SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3
--------------------
text:  What are the names of documents that have both one of the three most common types and one of three most common structures?
sql:  SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3
ground truth values:  []
matched values OrderedDict([(68, ('Images.image_alt_text', 'Name'))])
--------------------
Picklist: What are all the section titles of the document named "David CV"?, Images, image_alt_text, [Name]
Picklist: What are all the section titles of the document named "David CV"?, Documents, document_type_code, [CV]
Picklist: What are all the section titles of the document named "David CV"?, Documents, document_name, [David CV]
--------------------
text:  What are all the section titles of the document named "David CV"?
sql:  SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code WHERE t1.document_name  =  "David CV"
ground truth values:  [('Documents.document_name', 'David CV')]
matched values OrderedDict([(68, ('Images.image_alt_text', 'Name')), (90, ('Documents.document_type_code', 'CV')), (98, ('Documents.document_name', 'David CV'))])
--------------------
Picklist: Give the section titles of the document with the name "David CV"., Images, image_alt_text, [Name]
Picklist: Give the section titles of the document with the name "David CV"., Documents, document_type_code, [CV]
Picklist: Give the section titles of the document with the name "David CV"., Documents, document_name, [David CV]
--------------------
text:  Give the section titles of the document with the name "David CV".
sql:  SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code WHERE t1.document_name  =  "David CV"
ground truth values:  [('Documents.document_name', 'David CV')]
matched values OrderedDict([(68, ('Images.image_alt_text', 'Name')), (90, ('Documents.document_type_code', 'CV')), (98, ('Documents.document_name', 'David CV'))])
--------------------
Picklist: Find all the name of documents without any sections., Images, image_alt_text, [Name]
--------------------
text:  Find all the name of documents without any sections.
sql:  SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)
ground truth values:  []
matched values OrderedDict([(68, ('Images.image_alt_text', 'Name'))])
--------------------
Picklist: What are the names of documents that do not have any sections?, Images, image_alt_text, [Name]
--------------------
text:  What are the names of documents that do not have any sections?
sql:  SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)
ground truth values:  []
matched values OrderedDict([(68, ('Images.image_alt_text', 'Name'))])
--------------------
Picklist: Find the average access counts of documents with functional area "Acknowledgement"., Functional_Areas, functional_area_description, [Acknowledgement]
Picklist: What are the average access counts of documents that have the functional area description "Acknowledgement"?, Functional_Areas, functional_area_description, [Acknowledgement]
Picklist: Find names of the document without any images., Images, image_alt_text, [Name]
--------------------
text:  Find names of the document without any images.
sql:   51%|█████     | 4531/8943 [13:32<04:29, 16.38it/s] 51%|█████     | 4537/8943 [13:32<03:30, 20.94it/s] 51%|█████     | 4547/8943 [13:32<02:40, 27.38it/s] 51%|█████     | 4559/8943 [13:32<02:03, 35.52it/s] 51%|█████     | 4568/8943 [13:33<01:49, 39.87it/s] 51%|█████     | 4578/8943 [13:33<01:31, 47.60it/s] 51%|█████▏    | 4586/8943 [13:33<01:21, 53.19it/s] 51%|█████▏    | 4594/8943 [13:33<01:14, 58.22it/s] 51%|█████▏    | 4603/8943 [13:33<01:07, 64.52it/s]SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id
ground truth values:  []
matched values OrderedDict([(68, ('Images.image_alt_text', 'Name'))])
--------------------
Picklist: What are the names of documents that do not have any images?, Images, image_alt_text, [Name]
--------------------
text:  What are the names of documents that do not have any images?
sql:  SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id
ground truth values:  []
matched values OrderedDict([(68, ('Images.image_alt_text', 'Name'))])
--------------------
Picklist: What is the name of the document with the most number of sections?, Images, image_alt_text, [Name]
--------------------
text:  What is the name of the document with the most number of sections?
sql:  SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(68, ('Images.image_alt_text', 'Name'))])
--------------------
Picklist: Return the name of the document that has the most sections., Images, image_alt_text, [Name]
--------------------
text:  Return the name of the document that has the most sections.
sql:  SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(68, ('Images.image_alt_text', 'Name'))])
--------------------
Picklist: List all the document names which contains "CV"., Images, image_alt_text, [Name]
Picklist: List all the document names which contains "CV"., Documents, document_type_code, [CV]
--------------------
text:  List all the document names which contains "CV".
sql:  SELECT document_name FROM documents WHERE document_name LIKE "%CV%"
ground truth values:  []
matched values OrderedDict([(68, ('Images.image_alt_text', 'Name')), (90, ('Documents.document_type_code', 'CV'))])
--------------------
Picklist: What are the names of documents that contain the substring "CV"?, Images, image_alt_text, [Name]
Picklist: What are the names of documents that contain the substring "CV"?, Documents, document_type_code, [CV]
--------------------
text:  What are the names of documents that contain the substring "CV"?
sql:  SELECT document_name FROM documents WHERE document_name LIKE "%CV%"
ground truth values:  []
matched values OrderedDict([(68, ('Images.image_alt_text', 'Name')), (90, ('Documents.document_type_code', 'CV'))])
--------------------
Picklist: List all the image name and URLs in the order of their names., Images, image_alt_text, [Name]
--------------------
text:  List all the image name and URLs in the order of their names.
sql:  SELECT image_name ,  image_url FROM images ORDER BY image_name
ground truth values:  []
matched values OrderedDict([(68, ('Images.image_alt_text', 'Name'))])
--------------------
Picklist: What are the names and urls of images, sorted alphabetically?, Images, image_alt_text, [Name]
--------------------
text:  What are the names and urls of images, sorted alphabetically?
sql:  SELECT image_name ,  image_url FROM images ORDER BY image_name
ground truth values:  []
matched values OrderedDict([(68, ('Images.image_alt_text', 'Name'))])
--------------------
Picklist: What are the names of companies whose headquarters are not "USA"?, Companies, Headquarters, [USA]
Picklist: Find the names of the companies whose headquarters are not located in "USA"., Companies, Headquarters, [USA]
Picklist: What are the maximum and minimum sales of the companies whose industries are not "Banking"., Companies, Industry, [Banking]
Picklist: Find the maximum and minimum sales of the companies that are not in the "Banking" industry., Companies, Industry, [Banking]
Picklist: Please show the names of the buildings whose status is "on-hold", in ascending order of stories., buildings, Status, [on-hold]
Picklist: Find the names of the buildings in "on-hold" status, and sort them in ascending order of building stories., buildings, Status, [on-hold]
Picklist: Show the industries shared by companies whose headquarters are "USA" and companies whose headquarters are "China"., Companies, Headquarters, [USA]
Picklist: Show the industries shared by companies whose headquarters are "USA" and companies whose headquarters are "China"., Companies, Headquarters, [China]
Picklist: Which industries have both companies with headquarter in "USA" and companies with headquarter in "China"?, Companies, Headquarters, [USA]
Picklist: Which industries have both companies with headquarter in "USA" and companies with headquarter in "China"?, Companies, Headquarters, [China]
Picklist: Find the number of companies whose industry is "Banking" or "Conglomerate",, Companies, Industry, [Conglomerate]
Picklist: Find the number of companies whose industry is "Banking" or "Conglomerate",, Companies, Industry, [Banking]
Picklist: How many companies are in either "Banking" industry or "Conglomerate" industry?, Companies, Industry, [Conglomerate]
Picklist: How many companies are in either "Banking" industry or "Conglomerate" industry?, Companies, Industry, [Banking]
--------------------
text:  Show the prices of the products named "Dining" or "Trading Policy".
sql:  SELECT Product_Price FROM Products WHERE Product_Name  =  "Dining" OR Product_Name  =  "Trading Policy"
ground truth values:  [('Products.Product_Name', 'Dining'), ('Products.Product_Name', 'Trading Policy')]
matched values OrderedDict()
--------------------
Picklist: List the name of artworks whose type is not "Program Talent Show"., artwork, Type, [Program Talent Show]
Picklist: For each nomination, show the name of the artwork and name of the festival where it is nominated., nomination, Result, [Nominated]
--------------------
text:  For each nomination, show the name of the artwork and name of the festival where it is nominated.
sql:  SELECT T2.Name ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID
ground truth values:  []
matched values OrderedDict([(42, ('nomination.Result', 'Nominated'))])
--------------------
Picklist: Show distinct types of artworks that are nominated in festivals in 2007., nomination, Result, [Nominated]
--------------------
text:  Show distinct types of artworks that are nominated in festivals in 2007.
sql:  SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T3.Year  =  2007
ground truth values:  []
matched values OrderedDict([(42, ('nomination.Result', 'Nominated'))])
--------------------
Picklist: Show the names of artworks in ascending order of the year they are nominated in., nomination, Result, [Nominated]
--------------------
text:  Show the names of artworks in ascending order of the year they are nominated in.
sql:  SELECT T2.Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID ORDER BY T3.Year
ground truth values:  []
matched values OrderedDict([(42, ('nomination.Result', 'Nominated'))])
--------------------
Picklist: Show the names of festivals that have nominated artworks of type "Program Talent Show"., artwork, Type, [Program Talent Show]
Picklist: Show the names of festivals that have nominated artworks of type "Program Talent Show"., nomination, Result, [Nominated]
--------------------
text:  Show the names of festivals that have nominated artworks of type "Program Talent Show".
sql:   52%|█████▏    | 4611/8943 [13:33<01:05, 66.14it/s] 52%|█████▏    | 4619/8943 [13:33<01:02, 69.36it/s] 52%|█████▏    | 4627/8943 [13:33<01:04, 67.26it/s] 52%|█████▏    | 4635/8943 [13:34<01:13, 58.88it/s] 52%|█████▏    | 4642/8943 [13:34<01:13, 58.22it/s] 52%|█████▏    | 4649/8943 [13:34<01:15, 57.08it/s]SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T2.Type  =  "Program Talent Show"
ground truth values:  [('artwork.Type', 'Program Talent Show')]
matched values OrderedDict([(30, ('artwork.Type', 'Program Talent Show')), (46, ('nomination.Result', 'Nominated'))])
--------------------
Picklist: Show the id, name of each festival and the number of artworks it has nominated., nomination, Result, [Nominated]
--------------------
text:  Show the id, name of each festival and the number of artworks it has nominated.
sql:  SELECT T1.Festival_ID ,  T3.Festival_Name ,  COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID
ground truth values:  []
matched values OrderedDict([(42, ('nomination.Result', 'Nominated'))])
--------------------
Picklist: List the name of artworks that are not nominated., nomination, Result, [Nominated]
--------------------
text:  List the name of artworks that are not nominated.
sql:  SELECT Name FROM Artwork WHERE Artwork_ID NOT IN (SELECT Artwork_ID FROM nomination)
ground truth values:  []
matched values OrderedDict([(42, ('nomination.Result', 'Nominated'))])
--------------------
Picklist: In which year are there festivals both inside the 'United States' and outside the 'United States'?, festival_detail, Location, [United States]
--------------------
text:  In which year are there festivals both inside the 'United States' and outside the 'United States'?
sql:  SELECT YEAR FROM festival_detail WHERE LOCATION  =  'United States' INTERSECT SELECT YEAR FROM festival_detail WHERE LOCATION != 'United States'
ground truth values:  [('festival_detail.Location', 'United States'), ('festival_detail.Location', 'United States')]
matched values OrderedDict([(16, ('festival_detail.Location', 'United States'))])
--------------------
Picklist: Find the types and details for all premises and order by the premise type., Mailshot_Customers, outcome_code, [Order]
--------------------
text:  Find the types and details for all premises and order by the premise type.
sql:  SELECT premises_type ,  premise_details FROM premises ORDER BY premises_type
ground truth values:  []
matched values OrderedDict([(142, ('Mailshot_Customers.outcome_code', 'Order'))])
--------------------
Picklist: Show the name and phone for customers with a mailshot with outcome code 'No Response'., Mailshot_Customers, outcome_code, [No Response]
Picklist: Show the names of customers who have at least 2 mailshots with outcome code 'Order'., Mailshot_Customers, outcome_code, [Order]
Picklist: What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome., Mailshot_Customers, outcome_code, [No Response]
Picklist: What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome., Mailshot_Customers, outcome_code, [Order]
Picklist: Show the shipping charge and customer id for customer orders with order status Cancelled or Paid., Customer_Addresses, address_type_code, [Shipping]
Picklist: Show the shipping charge and customer id for customer orders with order status Cancelled or Paid., Customer_Orders, order_status_code, [Cancelled]
Picklist: Show the shipping charge and customer id for customer orders with order status Cancelled or Paid., Customer_Orders, order_status_code, [Paid]
Picklist: Show the shipping charge and customer id for customer orders with order status Cancelled or Paid., Mailshot_Customers, outcome_code, [Order]
Picklist: Show the shipping charge and customer id for customer orders with order status Cancelled or Paid., Order_Items, order_item_status_code, [Cancelled]
Picklist: Show the shipping charge and customer id for customer orders with order status Cancelled or Paid., Order_Items, order_item_status_code, [Paid]
--------------------
text:  Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.
sql:  SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  'Cancelled' OR order_status_code  =  'Paid'
ground truth values:  [('Customer_Orders.order_status_code', 'Cancelled'), ('Customer_Orders.order_status_code', 'Paid')]
matched values OrderedDict([(93, ('Customer_Addresses.address_type_code', 'Shipping')), (112, ('Customer_Orders.order_status_code', 'Cancelled')), (114, ('Customer_Orders.order_status_code', 'Paid')), (148, ('Mailshot_Customers.outcome_code', 'Order')), (166, ('Order_Items.order_item_status_code', 'Cancelled')), (168, ('Order_Items.order_item_status_code', 'Paid'))])
--------------------
Picklist: Show the names of customers having an order with shipping method FedEx and order status Paid., Customer_Addresses, address_type_code, [Shipping]
Picklist: Show the names of customers having an order with shipping method FedEx and order status Paid., Customer_Orders, order_status_code, [Paid]
Picklist: Show the names of customers having an order with shipping method FedEx and order status Paid., Customer_Orders, shipping_method_code, [FedEx]
Picklist: Show the names of customers having an order with shipping method FedEx and order status Paid., Mailshot_Customers, outcome_code, [Order]
Picklist: Show the names of customers having an order with shipping method FedEx and order status Paid., Order_Items, order_item_status_code, [Paid]
--------------------
text:  Show the names of customers having an order with shipping method FedEx and order status Paid.
sql:  SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE shipping_method_code  =  'FedEx' AND order_status_code  =  'Paid'
ground truth values:  [('Customer_Orders.shipping_method_code', 'FedEx'), ('Customer_Orders.order_status_code', 'Paid')]
matched values OrderedDict([(93, ('Customer_Addresses.address_type_code', 'Shipping')), (112, ('Customer_Orders.order_status_code', 'Paid')), (118, ('Customer_Orders.shipping_method_code', 'FedEx')), (149, ('Mailshot_Customers.outcome_code', 'Order')), (167, ('Order_Items.order_item_status_code', 'Paid'))])
--------------------
Picklist: Which courses are taught on days MTW?, Course, Days, [MTW]
Picklist: What are the course names for courses taught on MTW?, Course, Days, [MTW]
--------------------
text:  What is the number of departments in Division "AS"?
sql:  SELECT count(*) FROM DEPARTMENT WHERE Division  =  "AS"
ground truth values:  [('Department.Division', 'AS')]
matched values OrderedDict()
--------------------
--------------------
text:  How many departments are in the division AS?
sql:  SELECT count(*) FROM DEPARTMENT WHERE Division  =  "AS"
ground truth values:  [('Department.Division', 'AS')]
matched values OrderedDict()
--------------------
--------------------
text:  Find the number of students that have at least one grade "B".
sql:  SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  "B"
ground truth values:  [('Enrolled_in.Grade', 'B')]
matched values OrderedDict()
--------------------
--------------------
text:  How many students have had at least one "B" grade?
sql:  SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  "B"
ground truth values:  [('Enrolled_in.Grade', 'B')]
matched values OrderedDict()
--------------------
Picklist: Find the first names and last names of male (sex is M) faculties who live in building NEB., Faculty, Building, [NEB]
Picklist: Find the first names and last names of male (sex is M) faculties who live in building NEB., Department, Building, [NEB]
--------------------
text:  Find the first names and last names of male (sex is M) faculties who live in building NEB.
sql:  SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  "M" AND Building  =  "NEB"
ground truth values:  [('Faculty.Sex', 'M'), ('Faculty.Building', 'NEB')]
matched values OrderedDict([(45, ('Faculty.Building', 'NEB')), (62, ('Department.Building', 'NEB'))])
--------------------
 52%|█████▏    | 4655/8943 [13:34<01:20, 53.09it/s] 52%|█████▏    | 4661/8943 [13:34<01:25, 50.30it/s] 52%|█████▏    | 4667/8943 [13:34<01:24, 50.68it/s] 52%|█████▏    | 4673/8943 [13:34<01:31, 46.76it/s] 52%|█████▏    | 4678/8943 [13:34<01:35, 44.51it/s] 52%|█████▏    | 4683/8943 [13:35<01:41, 41.81it/s]Picklist: What are the full names of faculties with sex M and who live in building NEB?, Faculty, Building, [NEB]
Picklist: What are the full names of faculties with sex M and who live in building NEB?, Department, Building, [NEB]
--------------------
text:  What are the full names of faculties with sex M and who live in building NEB?
sql:  SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  "M" AND Building  =  "NEB"
ground truth values:  [('Faculty.Sex', 'M'), ('Faculty.Building', 'NEB')]
matched values OrderedDict([(45, ('Faculty.Building', 'NEB')), (62, ('Department.Building', 'NEB'))])
--------------------
Picklist: Find the rooms of faculties with rank professor who live in building NEB., Faculty, Rank, [Professor]
Picklist: Find the rooms of faculties with rank professor who live in building NEB., Faculty, Building, [NEB]
Picklist: Find the rooms of faculties with rank professor who live in building NEB., Department, Building, [NEB]
--------------------
text:  Find the rooms of faculties with rank professor who live in building NEB.
sql:  SELECT Room FROM FACULTY WHERE Rank  =  "Professor" AND Building  =  "NEB"
ground truth values:  [('Faculty.Rank', 'Professor'), ('Faculty.Building', 'NEB')]
matched values OrderedDict([(37, ('Faculty.Rank', 'Professor')), (47, ('Faculty.Building', 'NEB')), (64, ('Department.Building', 'NEB'))])
--------------------
Picklist: What are the rooms for members of the faculty who are professors and who live in building NEB?, Faculty, Rank, [Professor]
Picklist: What are the rooms for members of the faculty who are professors and who live in building NEB?, Faculty, Building, [NEB]
Picklist: What are the rooms for members of the faculty who are professors and who live in building NEB?, Department, Building, [NEB]
--------------------
text:  What are the rooms for members of the faculty who are professors and who live in building NEB?
sql:  SELECT Room FROM FACULTY WHERE Rank  =  "Professor" AND Building  =  "NEB"
ground truth values:  [('Faculty.Rank', 'Professor'), ('Faculty.Building', 'NEB')]
matched values OrderedDict([(37, ('Faculty.Rank', 'Professor')), (47, ('Faculty.Building', 'NEB')), (64, ('Department.Building', 'NEB'))])
--------------------
Picklist: Find the department name that is in Building "Mergenthaler"., Department, Building, [Mergenthaler]
Picklist: What is the name of the department in the Building Mergenthaler?, Department, Building, [Mergenthaler]
--------------------
text:  Find the last name of female (sex is F) students in the descending order of age.
sql:  SELECT LName FROM STUDENT WHERE Sex  =  "F" ORDER BY Age DESC
ground truth values:  [('Student.Sex', 'F')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the last names of female students, ordered by age descending?
sql:  SELECT LName FROM STUDENT WHERE Sex  =  "F" ORDER BY Age DESC
ground truth values:  [('Student.Sex', 'F')]
matched values OrderedDict()
--------------------
Picklist: Find the last names of faculties in building Barton in alphabetic order., Faculty, Building, [Barton]
Picklist: Find the last names of faculties in building Barton in alphabetic order., Department, Building, [Barton]
--------------------
text:  Find the last names of faculties in building Barton in alphabetic order.
sql:  SELECT Lname FROM FACULTY WHERE Building  =  "Barton" ORDER BY Lname
ground truth values:  [('Faculty.Building', 'Barton')]
matched values OrderedDict([(45, ('Faculty.Building', 'Barton')), (61, ('Department.Building', 'Barton'))])
--------------------
Picklist: What are the last names of faculty in building Barton, sorted by last name?, Faculty, Building, [Barton]
Picklist: What are the last names of faculty in building Barton, sorted by last name?, Department, Building, [Barton]
--------------------
text:  What are the last names of faculty in building Barton, sorted by last name?
sql:  SELECT Lname FROM FACULTY WHERE Building  =  "Barton" ORDER BY Lname
ground truth values:  [('Faculty.Building', 'Barton')]
matched values OrderedDict([(45, ('Faculty.Building', 'Barton')), (61, ('Department.Building', 'Barton'))])
--------------------
Picklist: Find the first names of faculties of rank Professor in alphabetic order., Faculty, Rank, [Professor]
Picklist: What are the first names for all faculty professors, ordered by first name?, Faculty, Rank, [Professor]
Picklist: What are the first and last names of the instructors who teach the top 3 number of courses?, Faculty, Rank, [Instructor]
--------------------
text:  What are the first and last names of the instructors who teach the top 3 number of courses?
sql:  SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3
ground truth values:  []
matched values OrderedDict([(37, ('Faculty.Rank', 'Instructor'))])
--------------------
Picklist: What are the full names of the 3 instructors who teach the most courses?, Faculty, Rank, [Instructor]
--------------------
text:  What are the full names of the 3 instructors who teach the most courses?
sql:  SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3
ground truth values:  []
matched values OrderedDict([(37, ('Faculty.Rank', 'Instructor'))])
--------------------
Picklist: Which building does the instructor who teaches the most number of courses live in?, Faculty, Rank, [Instructor]
--------------------
text:  Which building does the instructor who teaches the most number of courses live in?
sql:  SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(37, ('Faculty.Rank', 'Instructor'))])
--------------------
Picklist: Give the building that the instructor who teaches the greatest number of courses lives in., Faculty, Rank, [Instructor]
--------------------
text:  Give the building that the instructor who teaches the greatest number of courses lives in.
sql:  SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(37, ('Faculty.Rank', 'Instructor'))])
--------------------
Picklist: Find the first name and last name of the instructor of course that has course name, Faculty, Rank, [Instructor]
--------------------
text:  Find the first name and last name of the instructor of course that has course name
sql:  SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  "COMPUTER LITERACY"
ground truth values:  [('Course.CName', 'COMPUTER LITERACY')]
matched values OrderedDict([(37, ('Faculty.Rank', 'Instructor'))])
--------------------
Picklist: What is the full name of the instructor who has a course named COMPUTER LITERACY?, Faculty, Rank, [Instructor]
Picklist: What is the full name of the instructor who has a course named COMPUTER LITERACY?, Course, CName, [COMPUTER LITERACY]
--------------------
text:  What is the full name of the instructor who has a course named COMPUTER LITERACY?
sql:  SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  "COMPUTER LITERACY"
ground truth values:  [('Course.CName', 'COMPUTER LITERACY')]
matched values OrderedDict([(37, ('Faculty.Rank', 'Instructor')), (85, ('Course.CName', 'COMPUTER LITERACY'))])
--------------------
Picklist: Find the department name and room of the course INTRODUCTION TO COMPUTER SCIENCE., Department, DName, [Computer Science]
Picklist: Find the department name and room of the course INTRODUCTION TO COMPUTER SCIENCE., Course, CName, [INTRODUCTION TO COMPUTER SCIENCE]
--------------------
text:  Find the department name and room of the course INTRODUCTION TO COMPUTER SCIENCE.
sql:  SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  "INTRODUCTION TO COMPUTER SCIENCE"
ground truth values:   52%|█████▏    | 4688/8943 [13:35<01:47, 39.41it/s] 52%|█████▏    | 4693/8943 [13:35<01:57, 36.06it/s] 53%|█████▎    | 4697/8943 [13:35<02:01, 35.07it/s] 53%|█████▎    | 4701/8943 [13:35<02:06, 33.61it/s] 53%|█████▎    | 4705/8943 [13:35<02:14, 31.57it/s] 53%|█████▎    | 4709/8943 [13:35<02:11, 32.20it/s] 53%|█████▎    | 4713/8943 [13:36<02:03, 34.18it/s] 53%|█████▎    | 4719/8943 [13:36<01:52, 37.43it/s] 53%|█████▎    | 4725/8943 [13:36<01:46, 39.73it/s] 53%|█████▎    | 4730/8943 [13:36<01:40, 41.95it/s] 53%|█████▎    | 4735/8943 [13:36<01:46, 39.62it/s] 53%|█████▎    | 4740/8943 [13:36<02:05, 33.51it/s] 53%|█████▎    | 4744/8943 [13:36<02:01, 34.62it/s] 53%|█████▎    | 4749/8943 [13:36<01:51, 37.72it/s] 53%|█████▎    | 4753/8943 [13:37<01:52, 37.37it/s] 53%|█████▎    | 4757/8943 [13:37<01:50, 37.77it/s] 53%|█████▎    | 4762/8943 [13:37<01:47, 38.81it/s] 53%|█████▎    | 4766/8943 [13:37<01:47, 38.82it/s] 53%|█████▎    | 4770/8943 [13:37<01:51, 37.52it/s] 53%|█████▎    | 4774/8943 [13:37<01:55, 36.08it/s] 53%|█████▎    | 4779/8943 [13:37<01:53, 36.62it/s] 53%|█████▎    | 4783/8943 [13:37<01:54, 36.19it/s] 54%|█████▎    | 4787/8943 [13:37<01:56, 35.57it/s][('Course.CName', 'INTRODUCTION TO COMPUTER SCIENCE')]
matched values OrderedDict([(55, ('Department.DName', 'Computer Science')), (86, ('Course.CName', 'INTRODUCTION TO COMPUTER SCIENCE'))])
--------------------
Picklist: What are the department name and room for the course INTRODUCTION TO COMPUTER SCIENCE?, Department, DName, [Computer Science]
Picklist: What are the department name and room for the course INTRODUCTION TO COMPUTER SCIENCE?, Course, CName, [INTRODUCTION TO COMPUTER SCIENCE]
--------------------
text:  What are the department name and room for the course INTRODUCTION TO COMPUTER SCIENCE?
sql:  SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  "INTRODUCTION TO COMPUTER SCIENCE"
ground truth values:  [('Course.CName', 'INTRODUCTION TO COMPUTER SCIENCE')]
matched values OrderedDict([(55, ('Department.DName', 'Computer Science')), (86, ('Course.CName', 'INTRODUCTION TO COMPUTER SCIENCE'))])
--------------------
Picklist: Find the last names of faculties who are members of computer science department., Department, DName, [Computer Science]
Picklist: What are the last names of faculty who are part of the computer science department?, Department, DName, [Computer Science]
Picklist: Find the average grade point of student whose last name is Smith., Student, LName, [Smith]
Picklist: Find the average grade point of student whose last name is Smith., Faculty, Lname, [Smith]
--------------------
text:  Find the average grade point of student whose last name is Smith.
sql:  SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  "Smith"
ground truth values:  [('Student.LName', 'Smith')]
matched values OrderedDict([(10, ('Student.LName', 'Smith')), (34, ('Faculty.Lname', 'Smith'))])
--------------------
Picklist: What is the average gradepoint for students with the last name Smith?, Student, LName, [Smith]
Picklist: What is the average gradepoint for students with the last name Smith?, Faculty, Lname, [Smith]
--------------------
text:  What is the average gradepoint for students with the last name Smith?
sql:  SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  "Smith"
ground truth values:  [('Student.LName', 'Smith')]
matched values OrderedDict([(10, ('Student.LName', 'Smith')), (34, ('Faculty.Lname', 'Smith'))])
--------------------
Picklist: What is the maximum and minimum grade point of students who live in NYC?, Student, city_code, [NYC]
Picklist: Give the maximum and minimum gradepoints for students living in NYC?, Student, city_code, [NYC]
Picklist: Find the names of departments that are either in division AS or in division EN and in Building NEB., Faculty, Building, [NEB]
Picklist: Find the names of departments that are either in division AS or in division EN and in Building NEB., Department, Building, [NEB]
--------------------
text:  Find the names of departments that are either in division AS or in division EN and in Building NEB.
sql:  SELECT DName FROM DEPARTMENT WHERE Division  =  "AS" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  "EN" AND Building  =  "NEB"
ground truth values:  [('Department.Division', 'AS'), ('Department.Division', 'EN'), ('Department.Building', 'NEB')]
matched values OrderedDict([(45, ('Faculty.Building', 'NEB')), (62, ('Department.Building', 'NEB'))])
--------------------
Picklist: What are the names of departments either in division AS, or in division EN and in building NEB?, Faculty, Building, [NEB]
Picklist: What are the names of departments either in division AS, or in division EN and in building NEB?, Department, Building, [NEB]
--------------------
text:  What are the names of departments either in division AS, or in division EN and in building NEB?
sql:  SELECT DName FROM DEPARTMENT WHERE Division  =  "AS" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  "EN" AND Building  =  "NEB"
ground truth values:  [('Department.Division', 'AS'), ('Department.Division', 'EN'), ('Department.Building', 'NEB')]
matched values OrderedDict([(45, ('Faculty.Building', 'NEB')), (62, ('Department.Building', 'NEB'))])
--------------------
Picklist: What are the staff ids and genders of all staffs whose job title is Department Manager?, Staff_Department_Assignments, job_title_code, [Department Manager]
Picklist: Return the staff ids and genders for any staff with the title Department Manager., Staff_Department_Assignments, job_title_code, [Department Manager]
Picklist: How many department stores does the store chain South have?, Department_Store_Chain, dept_store_chain_name, [South]
Picklist: Count the number of stores the chain South has., Department_Store_Chain, dept_store_chain_name, [South]
Picklist: Return the distinct name of customers whose order status is Pending, in the order of customer id., Customer_Orders, order_status_code, [Pending]
Picklist: What are the distinct names of customers with an order status of Pending, sorted by customer id?, Customer_Orders, order_status_code, [Pending]
Picklist: Find the name and address of the customers who have both New and Pending orders., Customer_Orders, order_status_code, [Pending]
Picklist: Find the name and address of the customers who have both New and Pending orders., Customer_Orders, order_status_code, [New]
Picklist: What are the names and addressed of customers who have both New and Pending orders?, Customer_Orders, order_status_code, [Pending]
Picklist: What are the names and addressed of customers who have both New and Pending orders?, Customer_Orders, order_status_code, [New]
Picklist: What is the id and name of the department store that has both marketing and managing department?, Departments, department_name, [managing]
Picklist: What is the id and name of the department store that has both marketing and managing department?, Departments, department_name, [marketing]
Picklist: What are the ids and names of department stores with both marketing and managing departments?, Departments, department_name, [managing]
Picklist: What are the ids and names of department stores with both marketing and managing departments?, Departments, department_name, [marketing]
Picklist: Find the ids of all distinct customers who made order after some orders that were Cancelled., Customer_Orders, order_status_code, [Cancelled]
Picklist: What are the distinct ids of customers who made an order after any order that was Cancelled?, Customer_Orders, order_status_code, [Cancelled]
Picklist: What is id of the staff who had a Staff Department Assignment earlier than any Clerical Staff?, Staff_Department_Assignments, job_title_code, [Clerical Staff]
Picklist: Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff., Staff_Department_Assignments, job_title_code, [Clerical Staff]
Picklist: List the names of all the distinct customers who bought a keyboard., Products, product_name, [keyboard]
Picklist: What are the distinct names of customers who have purchased a keyboard?, Products, product_name, [keyboard]
Picklist: List the names and phone numbers of all the distinct suppliers who supply red jeans., Products, product_name, [red jeans]
Picklist: What are the distinct names and phone numbers for suppliers who have red jeans?, Products, product_name, [red jeans]
Picklist: List the order id, customer id for orders in Cancelled status, ordered by their order dates., Customer_Orders, order_status_code, [Cancelled]
Picklist: What are the order ids and customer ids for orders that have been Cancelled, sorted by their order dates?, Customer_Orders, order_status_code, [Cancelled]
Picklist: Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff., Staff_Department_Assignments, job_title_code, [Clerical Staff]
Picklist: Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff., Staff_Department_Assignments, job_title_code, [Sales Person]
 54%|█████▎    | 4791/8943 [13:38<02:11, 31.58it/s] 54%|█████▎    | 4796/8943 [13:38<01:58, 34.88it/s] 54%|█████▎    | 4806/8943 [13:38<01:36, 42.84it/s] 54%|█████▍    | 4815/8943 [13:38<01:21, 50.76it/s] 54%|█████▍    | 4822/8943 [13:38<01:25, 47.95it/s] 54%|█████▍    | 4830/8943 [13:38<01:18, 52.71it/s] 54%|█████▍    | 4837/8943 [13:38<01:21, 50.49it/s] 54%|█████▍    | 4843/8943 [13:39<01:20, 50.63it/s] 54%|█████▍    | 4849/8943 [13:39<01:24, 48.37it/s] 54%|█████▍    | 4855/8943 [13:39<01:22, 49.53it/s] 54%|█████▍    | 4865/8943 [13:39<01:10, 57.82it/s] 55%|█████▍    | 4875/8943 [13:39<01:02, 64.81it/s] 55%|█████▍    | 4883/8943 [13:39<01:03, 64.25it/s] 55%|█████▍    | 4891/8943 [13:39<01:01, 66.41it/s] 55%|█████▍    | 4899/8943 [13:39<01:02, 64.99it/s] 55%|█████▍    | 4907/8943 [13:39<00:59, 67.31it/s] 55%|█████▍    | 4916/8943 [13:40<00:55, 72.50it/s] 55%|█████▌    | 4924/8943 [13:40<01:04, 62.43it/s] 55%|█████▌    | 4931/8943 [13:40<01:05, 61.30it/s] 55%|█████▌    | 4939/8943 [13:40<01:02, 63.75it/s]Picklist: What are the names and genders of staff who have held the title Sales Person, but never Clerical Staff?, Staff_Department_Assignments, job_title_code, [Clerical Staff]
Picklist: What are the names and genders of staff who have held the title Sales Person, but never Clerical Staff?, Staff_Department_Assignments, job_title_code, [Sales Person]
Picklist: Find the id and name of customers whose address contains WY state and do not use credit card for payment., Customers, payment_method_code, [Credit Card]
Picklist: What are the ids and names of customers with addressed that contain WY and who do not use a credit card for payment?, Customers, payment_method_code, [Credit Card]
Picklist: Find the average price of all product clothes., Products, product_type_code, [Clothes]
Picklist: What is the average price of clothes?, Products, product_type_code, [Clothes]
Picklist: Find the name of the most expensive hardware product., Products, product_type_code, [Hardware]
Picklist: What is the name of the hardware product with the greatest price?, Products, product_type_code, [Hardware]
--------------------
text:  What are the number of international and domestic passengers of the airport named London "Heathrow"?
sql:  SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  "London Heathrow"
ground truth values:  [('airport.Airport_Name', 'London Heathrow')]
matched values OrderedDict()
--------------------
Picklist: How many international and domestic passengers are there in the airport London Heathrow?, airport, Airport_Name, [London Heathrow]
Picklist: Please show the names of aircrafts associated with airport with name "London Gatwick"., airport, Airport_Name, [London Gatwick]
Picklist: What are the names of all the aircrafts associated with London Gatwick airport?, airport, Airport_Name, [London Gatwick]
Picklist: What is the average total number of passengers of airports that are associated with aircraft "Robinson R-22"?, aircraft, Aircraft, [Robinson R-22]
Picklist: What is the average total number of passengers for all airports that the aircraft "Robinson R-22" visits?, aircraft, Aircraft, [Robinson R-22]
Picklist: Show the names of aircrafts that are associated with both an airport named "London Heathrow" and an airport named "London Gatwick", airport, Airport_Name, [London Heathrow]
Picklist: Show the names of aircrafts that are associated with both an airport named "London Heathrow" and an airport named "London Gatwick", airport, Airport_Name, [London Gatwick]
Picklist: What are the names of all aircrafts that are associated with both London Heathrow and Gatwick airports?, airport, Airport_Name, [London Heathrow]
--------------------
text:  What are the names of all aircrafts that are associated with both London Heathrow and Gatwick airports?
sql:  SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  "London Heathrow" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  "London Gatwick"
ground truth values:  [('airport.Airport_Name', 'London Heathrow'), ('airport.Airport_Name', 'London Gatwick')]
matched values OrderedDict([(59, ('airport.Airport_Name', 'London Heathrow'))])
--------------------
Picklist: find the name of pilots who did not win the matches held in the country of Australia., match, Country, [Australia]
Picklist: What are the names of the pilots that have not won any matches in Australia?, match, Country, [Australia]
Picklist: What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?, Organizations, organization_details, [Denesik and Sons Party]
Picklist: What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21', Timed_Status_of_Things, Date_and_Date, [2017-06-19 02:59:21]
Picklist: What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21', Timed_Status_of_Things, Status_of_Thing_Code, [Close]
Picklist: How many distinct locations have the things with service detail 'Unsatisfied' been located in?, Services, service_details, [Unsatisfied]
Picklist: How many distinct locations have the things with service detail 'Unsatisfied' been located in?, Residents_Services, other_details, [Unsatisfied]
Picklist: How many distinct locations have the things with service detail 'Unsatisfied' been located in?, Things, service_details, [Unsatisfied]
--------------------
text:  How many distinct locations have the things with service detail 'Unsatisfied' been located in?
sql:  SELECT count(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.service_details  =  'Unsatisfied'
ground truth values:  [('Things.service_details', 'Unsatisfied')]
matched values OrderedDict([(71, ('Services.service_details', 'Unsatisfied')), (101, ('Residents_Services.other_details', 'Unsatisfied')), (126, ('Things.service_details', 'Unsatisfied'))])
--------------------
Picklist: What are the enrollments of schools whose denomination is not "Catholic"?, school, Denomination, [Catholic]
Picklist: List the enrollment for each school that does not have "Catholic" as denomination., school, Denomination, [Catholic]
Picklist: Show the nicknames of schools that are not in division 1., school_details, Division, [Division 1]
Picklist: Show the nicknames of schools that are not in division 1., school_details, Division, [Division 3]
--------------------
text:  Show the nicknames of schools that are not in division 1.
sql:  SELECT Nickname FROM school_details WHERE Division != "Division 1"
ground truth values:  [('school_details.Division', 'Division 1')]
matched values OrderedDict([(48, ('school_details.Division', 'Division 1')), (51, ('school_details.Division', 'Division 3'))])
--------------------
Picklist: What are the nicknames of schools whose division is not 1?, school_details, Division, [Division 3]
--------------------
text:  What are the nicknames of schools whose division is not 1?
sql:  SELECT Nickname FROM school_details WHERE Division != "Division 1"
ground truth values:  [('school_details.Division', 'Division 1')]
matched values OrderedDict([(48, ('school_details.Division', 'Division 3'))])
--------------------
Picklist: Find the names of all stores in Khanewal District., district, District_name, [Khanewal District]
Picklist: What are the names of all the stores located in Khanewal District?, district, District_name, [Khanewal District]
Picklist: Which city is the headquarter of the store named "Blackville" in?, store, Store_Name, [Blackville]
Picklist: What city is the headquarter of the store Blackville?, store, Store_Name, [Blackville]
Picklist: What products are available at store named "Miramichi"?, store, Store_Name, [Miramichi]
Picklist: What products are sold at the store named Miramichi?, store, Store_Name, [Miramichi]
Picklist: Find products with max page size as "A4" and pages per minute color smaller than 5., product, max_page_size, [A4]
Picklist: What are the products with the maximum page size A4 that also have a pages per minute color smaller than 5?, product, max_page_size, [A4]
Picklist: Find products with max page size as "A4" or pages per minute color smaller than 5., product, max_page_size, [A4]
Picklist: What are the products with the maximum page size eqal to A4 or a pages per minute color less than 5?, product, max_page_size, [A4]
Picklist: Find the names of districts where have both city mall and village store type stores., store, Type, [Village Store]
Picklist: Find the names of districts where have both city mall and village store type stores., store, Type, [City Mall]
Picklist: What are the names of the districts that have both mall and village store style shops?, store, Type, [Village Store]
--------------------
text:   55%|█████▌    | 4946/8943 [13:40<01:07, 59.18it/s] 55%|█████▌    | 4962/8943 [13:40<00:54, 72.80it/s] 56%|█████▌    | 4975/8943 [13:40<00:48, 82.57it/s] 56%|█████▌    | 4985/8943 [13:43<05:29, 12.01it/s] 56%|█████▌    | 4995/8943 [13:43<04:03, 16.24it/s] 56%|█████▌    | 5003/8943 [13:43<03:04, 21.33it/s]What are the names of the districts that have both mall and village store style shops?
sql:  SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  "City Mall" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  "Village Store"
ground truth values:  [('store.Type', 'City Mall'), ('store.Type', 'Village Store')]
matched values OrderedDict([(35, ('store.Type', 'Village Store'))])
--------------------
--------------------
text:  How many students got accepted after the tryout?
sql:  SELECT count(*) FROM tryout WHERE decision  =  'yes'
ground truth values:  [('Tryout.decision', 'yes')]
matched values OrderedDict()
--------------------
Picklist: How many students received a yes from tryouts?, Player, yCard, [yes]
Picklist: How many students received a yes from tryouts?, Tryout, decision, [yes]
--------------------
text:  How many students received a yes from tryouts?
sql:  SELECT count(*) FROM tryout WHERE decision  =  'yes'
ground truth values:  [('Tryout.decision', 'yes')]
matched values OrderedDict([(22, ('Player.yCard', 'yes')), (41, ('Tryout.decision', 'yes'))])
--------------------
Picklist: How many students whose are playing the role of goalie?, Tryout, pPos, [goalie]
Picklist: What is the number of students playing as a goalie?, Tryout, pPos, [goalie]
Picklist: What is average enrollment of colleges in the state FL?, College, state, [FL]
--------------------
text:  What is average number of students enrolled in Florida colleges?
sql:  SELECT avg(enr) FROM College WHERE state  =  'FL'
ground truth values:  [('College.state', 'FL')]
matched values OrderedDict()
--------------------
Picklist: Find the name, enrollment of the colleges whose size is bigger than 10000 and location is in state LA., College, state, [LA]
--------------------
text:  What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?
sql:  SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = "LA"
ground truth values:  [('College.state', 'LA')]
matched values OrderedDict()
--------------------
Picklist: Find the name of players whose card is yes in the descending order of training hours., Player, yCard, [yes]
Picklist: Find the name of players whose card is yes in the descending order of training hours., Tryout, decision, [yes]
--------------------
text:  Find the name of players whose card is yes in the descending order of training hours.
sql:  SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC
ground truth values:  [('Player.yCard', 'yes')]
matched values OrderedDict([(22, ('Player.yCard', 'yes')), (41, ('Tryout.decision', 'yes'))])
--------------------
--------------------
text:  What are the name of the players who received a card in descending order of the hours of training?
sql:  SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC
ground truth values:  [('Player.yCard', 'yes')]
matched values OrderedDict()
--------------------
Picklist: Find the states where have some college students in tryout and their decisions are yes., Player, yCard, [yes]
Picklist: Find the states where have some college students in tryout and their decisions are yes., Tryout, decision, [yes]
--------------------
text:  Find the states where have some college students in tryout and their decisions are yes.
sql:  SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'
ground truth values:  [('Tryout.decision', 'yes')]
matched values OrderedDict([(22, ('Player.yCard', 'yes')), (41, ('Tryout.decision', 'yes'))])
--------------------
--------------------
text:  What are the different states that had students successfully try out?
sql:  SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'
ground truth values:  [('Tryout.decision', 'yes')]
matched values OrderedDict()
--------------------
Picklist: Find the name and college of students whose decisions are yes in the tryout., Player, yCard, [yes]
Picklist: Find the name and college of students whose decisions are yes in the tryout., Tryout, decision, [yes]
--------------------
text:  Find the name and college of students whose decisions are yes in the tryout.
sql:  SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'
ground truth values:  [('Tryout.decision', 'yes')]
matched values OrderedDict([(22, ('Player.yCard', 'yes')), (41, ('Tryout.decision', 'yes'))])
--------------------
Picklist: What are the names of all the players who received a yes during tryouts, and also what are the names of their colleges?, Player, yCard, [yes]
Picklist: What are the names of all the players who received a yes during tryouts, and also what are the names of their colleges?, Tryout, decision, [yes]
--------------------
text:  What are the names of all the players who received a yes during tryouts, and also what are the names of their colleges?
sql:  SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'
ground truth values:  [('Tryout.decision', 'yes')]
matched values OrderedDict([(22, ('Player.yCard', 'yes')), (41, ('Tryout.decision', 'yes'))])
--------------------
Picklist: Find the name and hours of the students whose tryout decision is yes., Player, yCard, [yes]
Picklist: Find the name and hours of the students whose tryout decision is yes., Tryout, decision, [yes]
--------------------
text:  Find the name and hours of the students whose tryout decision is yes.
sql:  SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'
ground truth values:  [('Tryout.decision', 'yes')]
matched values OrderedDict([(22, ('Player.yCard', 'yes')), (41, ('Tryout.decision', 'yes'))])
--------------------
Picklist: What are the names and hours spent practicing of every student who received a yes at tryouts?, Player, yCard, [yes]
Picklist: What are the names and hours spent practicing of every student who received a yes at tryouts?, Tryout, decision, [yes]
--------------------
text:  What are the names and hours spent practicing of every student who received a yes at tryouts?
sql:  SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'
ground truth values:  [('Tryout.decision', 'yes')]
matched values OrderedDict([(22, ('Player.yCard', 'yes')), (41, ('Tryout.decision', 'yes'))])
--------------------
Picklist: Find the states of the colleges that have students in the tryout who played in striker position., Tryout, pPos, [striker]
Picklist: What are the states of the colleges where students who tried out for the striker position attend?, Tryout, pPos, [striker]
Picklist: Find the names of the students who are in the position of striker and got a yes tryout decision., Player, yCard, [yes]
Picklist: Find the names of the students who are in the position of striker and got a yes tryout decision., Tryout, pPos, [striker]
Picklist: Find the names of the students who are in the position of striker and got a yes tryout decision., Tryout, decision, [yes]
--------------------
text:  Find the names of the students who are in the position of striker and got a yes tryout decision.
sql:  SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'
ground truth values:  [('Tryout.decision', 'yes'), ('Tryout.pPos', 'striker')]
matched values OrderedDict([(22, ('Player.yCard', 'yes')), (39, ('Tryout.pPos', 'striker')), (43, ('Tryout.decision', 'yes'))])
--------------------
Picklist: What are the names of all students who successfully tried out for the position of striker?, Tryout, pPos, [striker]
--------------------
text:  What are the names of all students who successfully tried out for the position of striker?
sql:   56%|█████▌    | 5011/8943 [13:43<02:26, 26.82it/s] 56%|█████▌    | 5019/8943 [13:43<01:58, 33.01it/s] 56%|█████▌    | 5027/8943 [13:43<01:45, 37.22it/s]SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'
ground truth values:  [('Tryout.decision', 'yes'), ('Tryout.pPos', 'striker')]
matched values OrderedDict([(37, ('Tryout.pPos', 'striker'))])
--------------------
Picklist: Find the state of the college which player Charles is attending., Player, pName, [Charles]
Picklist: In which state is the college that Charles attends?, Player, pName, [Charles]
Picklist: Find the average and maximum hours for the students whose tryout decision is yes., Player, yCard, [yes]
Picklist: Find the average and maximum hours for the students whose tryout decision is yes., Tryout, decision, [yes]
--------------------
text:  Find the average and maximum hours for the students whose tryout decision is yes.
sql:  SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'
ground truth values:  [('Tryout.decision', 'yes')]
matched values OrderedDict([(22, ('Player.yCard', 'yes')), (41, ('Tryout.decision', 'yes'))])
--------------------
--------------------
text:  What is the average and maximum number of hours students who made the team practiced?
sql:  SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'
ground truth values:  [('Tryout.decision', 'yes')]
matched values OrderedDict()
--------------------
Picklist: Find the average hours for the students whose tryout decision is no., Player, yCard, [no]
Picklist: Find the average hours for the students whose tryout decision is no., Tryout, decision, [no]
--------------------
text:  Find the average hours for the students whose tryout decision is no.
sql:  SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'
ground truth values:  [('Tryout.decision', 'no')]
matched values OrderedDict([(22, ('Player.yCard', 'no')), (41, ('Tryout.decision', 'no'))])
--------------------
--------------------
text:  What is the average number of hours spent practicing for students who got rejected?
sql:  SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'
ground truth values:  [('Tryout.decision', 'no')]
matched values OrderedDict()
--------------------
Picklist: Which college has any student who is a goalie and succeeded in the tryout., Tryout, pPos, [goalie]
--------------------
text:  Which college has any student who is a goalie and succeeded in the tryout.
sql:  SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'
ground truth values:  [('Tryout.decision', 'yes'), ('Tryout.pPos', 'goalie')]
matched values OrderedDict([(37, ('Tryout.pPos', 'goalie'))])
--------------------
Picklist: What college has a student who successfully made the team in the role of a goalie?, Tryout, pPos, [goalie]
--------------------
text:  What college has a student who successfully made the team in the role of a goalie?
sql:  SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'
ground truth values:  [('Tryout.decision', 'yes'), ('Tryout.pPos', 'goalie')]
matched values OrderedDict([(37, ('Tryout.pPos', 'goalie'))])
--------------------
--------------------
text:  What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision.
sql:  SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'
ground truth values:  [('Tryout.decision', 'yes')]
matched values OrderedDict()
--------------------
--------------------
text:  How many students are enrolled in colleges that have student accepted during tryouts, and in which states are those colleges?
sql:  SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'
ground truth values:  [('Tryout.decision', 'yes')]
matched values OrderedDict()
--------------------
Picklist: Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment., College, state, [LA]
Picklist: Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment., College, state, [AZ]
Picklist: What are the names of colleges in LA that have more than 15,000 students and of colleges in AZ with less than 13,000 students?, College, state, [LA]
Picklist: What are the names of colleges in LA that have more than 15,000 students and of colleges in AZ with less than 13,000 students?, College, state, [AZ]
Picklist: Find the names of schools that have some students playing in goalie and mid positions., Tryout, pPos, [goalie]
Picklist: Find the names of schools that have some students playing in goalie and mid positions., Tryout, pPos, [mid]
Picklist: What are the names of all schools that have students trying out for the position of goal and 'mid'-field., Tryout, pPos, [mid]
--------------------
text:  What are the names of all schools that have students trying out for the position of goal and 'mid'-field.
sql:  SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'
ground truth values:  [('Tryout.pPos', 'goalie'), ('Tryout.pPos', 'mid')]
matched values OrderedDict([(37, ('Tryout.pPos', 'mid'))])
--------------------
Picklist: Find the names of states that have some college students playing in goalie and mid positions., Tryout, pPos, [goalie]
Picklist: Find the names of states that have some college students playing in goalie and mid positions., Tryout, pPos, [mid]
Picklist: What are the names of the states that have some college students playing in the positions of goalie and mid-field?, Tryout, pPos, [goalie]
--------------------
text:  What are the names of the states that have some college students playing in the positions of goalie and mid-field?
sql:  SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'
ground truth values:  [('Tryout.pPos', 'goalie'), ('Tryout.pPos', 'mid')]
matched values OrderedDict([(37, ('Tryout.pPos', 'goalie'))])
--------------------
Picklist: How many schools have some students playing in goalie and mid positions., Tryout, pPos, [goalie]
Picklist: How many schools have some students playing in goalie and mid positions., Tryout, pPos, [mid]
Picklist: How many schools have students playing in goalie and mid-field positions?, Tryout, pPos, [goalie]
--------------------
text:  How many schools have students playing in goalie and mid-field positions?
sql:  SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')
ground truth values:  [('Tryout.pPos', 'goalie'), ('Tryout.pPos', 'mid')]
matched values OrderedDict([(37, ('Tryout.pPos', 'goalie'))])
--------------------
Picklist: Find the names of schools that have some players in the mid position but not in the goalie position., Tryout, pPos, [goalie]
Picklist: Find the names of schools that have some players in the mid position but not in the goalie position., Tryout, pPos, [mid]
Picklist: What are the names of the schools with some players in the mid position but no goalies?, Player, yCard, [no]
Picklist: What are the names of the schools with some players in the mid position but no goalies?, Tryout, pPos, [mid]
Picklist: What are the names of the schools with some players in the mid position but no goalies?, Tryout, pPos, [goalie]
Picklist: What are the names of the schools with some players in the mid position but no goalies?, Tryout, decision, [no]
--------------------
text:  What are the names of the schools with some players in the mid position but no goalies?
sql:  SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'
ground truth values:  [('Tryout.pPos', 'mid'), ('Tryout.pPos', 'goalie')]
matched values  56%|█████▋    | 5034/8943 [13:44<01:32, 42.29it/s] 56%|█████▋    | 5041/8943 [13:44<01:25, 45.40it/s] 56%|█████▋    | 5049/8943 [13:44<01:14, 52.04it/s] 57%|█████▋    | 5063/8943 [13:44<01:00, 63.92it/s] 57%|█████▋    | 5072/8943 [13:44<00:57, 66.76it/s] 57%|█████▋    | 5081/8943 [13:44<00:54, 70.34it/s] 57%|█████▋    | 5090/8943 [13:44<00:54, 70.12it/s] 57%|█████▋    | 5098/8943 [13:44<01:00, 63.04it/s] 57%|█████▋    | 5106/8943 [13:45<01:06, 57.86it/s] 57%|█████▋    | 5113/8943 [13:45<01:11, 53.71it/s] 57%|█████▋    | 5119/8943 [13:45<01:14, 51.67it/s] 57%|█████▋    | 5125/8943 [13:45<01:25, 44.71it/s]OrderedDict([(22, ('Player.yCard', 'no')), (39, ('Tryout.pPos', 'mid')), (41, ('Tryout.pPos', 'goalie')), (46, ('Tryout.decision', 'no'))])
--------------------
Picklist: Find the names of states that have some college students playing in the mid position but not in the goalie position., Tryout, pPos, [goalie]
Picklist: Find the names of states that have some college students playing in the mid position but not in the goalie position., Tryout, pPos, [mid]
Picklist: What are the names of all the states with college students playing in the mid position but no goalies?, Player, yCard, [no]
Picklist: What are the names of all the states with college students playing in the mid position but no goalies?, Tryout, pPos, [mid]
Picklist: What are the names of all the states with college students playing in the mid position but no goalies?, Tryout, pPos, [goalie]
Picklist: What are the names of all the states with college students playing in the mid position but no goalies?, Tryout, decision, [no]
--------------------
text:  What are the names of all the states with college students playing in the mid position but no goalies?
sql:  SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'
ground truth values:  [('Tryout.pPos', 'mid'), ('Tryout.pPos', 'goalie')]
matched values OrderedDict([(22, ('Player.yCard', 'no')), (39, ('Tryout.pPos', 'mid')), (41, ('Tryout.pPos', 'goalie')), (46, ('Tryout.decision', 'no'))])
--------------------
Picklist: How many states that have some college students playing in the mid position but not in the goalie position., Tryout, pPos, [goalie]
Picklist: How many states that have some college students playing in the mid position but not in the goalie position., Tryout, pPos, [mid]
Picklist: What is the count of states with college students playing in the mid position but not as goalies?, Tryout, pPos, [mid]
Picklist: What is the count of states with college students playing in the mid position but not as goalies?, Tryout, pPos, [goalie]
Picklist: Find names of colleges with enrollment greater than that of some (at least one) college in the FL state., College, state, [FL]
--------------------
text:  What are the names of the colleges that are larger than at least one college in Florida?
sql:  SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')
ground truth values:  [('College.state', 'FL')]
matched values OrderedDict()
--------------------
Picklist: Find names of all colleges whose enrollment is greater than that of all colleges in the FL state., College, state, [FL]
--------------------
text:  What are the names of all colleges with a larger enrollment than the largest college in Florida?
sql:  SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')
ground truth values:  [('College.state', 'FL')]
matched values OrderedDict()
--------------------
Picklist: What is the total number of enrollment of schools that do not have any goalie player?, Tryout, pPos, [goalie]
Picklist: What is the total number of students enrolled in schools without any goalies?, Tryout, pPos, [goalie]
Picklist: What are the carriers of devices whose software platforms are not "Android"?, device, Software_Platform, [Android]
Picklist: Return the device carriers that do not have Android as their software platform., device, Software_Platform, [Android]
Picklist: List the open date of open year of the shop named "Apple"., device, Device, [Apple]
Picklist: List the open date of open year of the shop named "Apple"., shop, Shop_Name, [Apple]
--------------------
text:  List the open date of open year of the shop named "Apple".
sql:  SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  "Apple"
ground truth values:  [('shop.Shop_Name', 'Apple')]
matched values OrderedDict([(9, ('device.Device', 'Apple')), (29, ('shop.Shop_Name', 'Apple'))])
--------------------
Picklist: What are the open dates and years for the shop named Apple?, device, Device, [Apple]
Picklist: What are the open dates and years for the shop named Apple?, shop, Shop_Name, [Apple]
--------------------
text:  What are the open dates and years for the shop named Apple?
sql:  SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  "Apple"
ground truth values:  [('shop.Shop_Name', 'Apple')]
matched values OrderedDict([(9, ('device.Device', 'Apple')), (29, ('shop.Shop_Name', 'Apple'))])
--------------------
Picklist: What are the phone and email for customer Harold?, Customers, Customer_Name, [Harold]
Picklist: Find the phone number and email address of customer "Harold"., Customers, Customer_Name, [Harold]
Picklist: What is the description of the marketing region China?, Marketing_Regions, Marketing_Region_Name, [China]
Picklist: Find the marketing region description of China?, Marketing_Regions, Marketing_Region_Name, [China]
Picklist: What is the phone number of the performer Ashley?, Performers, Customer_Name, [Ashley]
Picklist: Find the phone number of performer "Ashley"., Performers, Customer_Name, [Ashley]
Picklist: Which city is the address of the store named "FJA Filming" located in?, Stores, Store_Name, [FJA Filming]
Picklist: Find the city the store named "FJA Filming" is in., Stores, Store_Name, [FJA Filming]
Picklist: What are the states or counties of the address of the stores with marketing region code "CA"?, Marketing_Regions, Marketing_Region_Code, [CA]
Picklist: What are the states or counties of the address of the stores with marketing region code "CA"?, Stores, Marketing_Region_Code, [CA]
--------------------
text:  What are the states or counties of the address of the stores with marketing region code "CA"?
sql:  SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Marketing_Region_Code  =  "CA"
ground truth values:  [('Stores.Marketing_Region_Code', 'CA')]
matched values OrderedDict([(77, ('Marketing_Regions.Marketing_Region_Code', 'CA')), (198, ('Stores.Marketing_Region_Code', 'CA'))])
--------------------
Picklist: Find the states or counties where the stores with marketing region code "CA" are located., Marketing_Regions, Marketing_Region_Code, [CA]
Picklist: Find the states or counties where the stores with marketing region code "CA" are located., Stores, Marketing_Region_Code, [CA]
--------------------
text:  Find the states or counties where the stores with marketing region code "CA" are located.
sql:  SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Marketing_Region_Code  =  "CA"
ground truth values:  [('Stores.Marketing_Region_Code', 'CA')]
matched values OrderedDict([(77, ('Marketing_Regions.Marketing_Region_Code', 'CA')), (198, ('Stores.Marketing_Region_Code', 'CA'))])
--------------------
Picklist: What is the name of the marketing region that the store Rob Dinning belongs to?, Products, Product_Name, [dinning]
Picklist: What is the name of the marketing region that the store Rob Dinning belongs to?, Stores, Store_Name, [Rob Dinning]
Picklist: What is the name of the marketing region that the store Rob Dinning belongs to?, Services, Product_Name, [dinning]
--------------------
text:  What is the name of the marketing region that the store Rob Dinning belongs to?
sql:  SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code  =  T2.Marketing_Region_Code WHERE T2.Store_Name  =  "Rob Dinning"
ground truth values:  [('Stores.Store_Name', 'Rob Dinning')]
matched values OrderedDict([(59, ('Products.Product_Name', 'dinning')), (202, ('Stores.Store_Name', 'Rob Dinning')), (357, ('Services.Product_Name', 'dinning'))])
--------------------
Picklist: Return the name of the marketing region the store Rob Dinning is located in., Products, Product_Name, [dinning]
Picklist: Return the name of the marketing region the store Rob Dinning is located in., Stores, Store_Name, [Rob Dinning]
 57%|█████▋    | 5130/8943 [13:45<01:33, 40.61it/s] 57%|█████▋    | 5135/8943 [13:45<01:42, 37.21it/s] 57%|█████▋    | 5140/8943 [13:45<01:41, 37.33it/s] 58%|█████▊    | 5144/8943 [13:46<01:43, 36.74it/s] 58%|█████▊    | 5148/8943 [13:46<01:47, 35.23it/s] 58%|█████▊    | 5152/8943 [13:46<01:44, 36.30it/s] 58%|█████▊    | 5156/8943 [13:46<01:46, 35.55it/s] 58%|█████▊    | 5160/8943 [13:46<01:47, 35.23it/s] 58%|█████▊    | 5164/8943 [13:46<01:44, 36.17it/s] 58%|█████▊    | 5168/8943 [13:46<01:43, 36.62it/s]Picklist: Return the name of the marketing region the store Rob Dinning is located in., Services, Product_Name, [dinning]
--------------------
text:  Return the name of the marketing region the store Rob Dinning is located in.
sql:  SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code  =  T2.Marketing_Region_Code WHERE T2.Store_Name  =  "Rob Dinning"
ground truth values:  [('Stores.Store_Name', 'Rob Dinning')]
matched values OrderedDict([(59, ('Products.Product_Name', 'dinning')), (202, ('Stores.Store_Name', 'Rob Dinning')), (357, ('Services.Product_Name', 'dinning'))])
--------------------
Picklist: What are the names of workshop groups in which services with product name "film" are performed?, Products, Product_Name, [film]
Picklist: What are the names of workshop groups in which services with product name "film" are performed?, Services, Product_Name, [film]
--------------------
text:  What are the names of workshop groups in which services with product name "film" are performed?
sql:  SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T2.Product_Name  =  "film"
ground truth values:  [('Services.Product_Name', 'film')]
matched values OrderedDict([(59, ('Products.Product_Name', 'film')), (352, ('Services.Product_Name', 'film'))])
--------------------
Picklist: Find the names of the workshop groups where services with product name "film" are performed., Products, Product_Name, [film]
Picklist: Find the names of the workshop groups where services with product name "film" are performed., Services, Product_Name, [film]
--------------------
text:  Find the names of the workshop groups where services with product name "film" are performed.
sql:  SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T2.Product_Name  =  "film"
ground truth values:  [('Services.Product_Name', 'film')]
matched values OrderedDict([(59, ('Products.Product_Name', 'film')), (352, ('Services.Product_Name', 'film'))])
--------------------
Picklist: What are the total order quantities of photo products?, Products, Product_Name, [photo]
Picklist: What are the total order quantities of photo products?, Services, Product_Name, [photo]
--------------------
text:  What are the total order quantities of photo products?
sql:  SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  "photo"
ground truth values:  [('Products.Product_Name', 'photo')]
matched values OrderedDict([(59, ('Products.Product_Name', 'photo')), (352, ('Services.Product_Name', 'photo'))])
--------------------
Picklist: Compute the total order quantities of the product "photo"., Products, Product_Name, [photo]
Picklist: Compute the total order quantities of the product "photo"., Services, Product_Name, [photo]
--------------------
text:  Compute the total order quantities of the product "photo".
sql:  SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  "photo"
ground truth values:  [('Products.Product_Name', 'photo')]
matched values OrderedDict([(59, ('Products.Product_Name', 'photo')), (352, ('Services.Product_Name', 'photo'))])
--------------------
Picklist: What are the names of the drama workshop groups with address in Feliciaberg city?, Addresses, City_Town, [Feliciaberg]
Picklist: Return the the names of the drama workshop groups that are located in Feliciaberg city., Addresses, City_Town, [Feliciaberg]
Picklist: What are the email addresses of the drama workshop groups with address in Alaska state?, Addresses, State_County, [Alaska]
Picklist: List the email addresses of the drama workshop groups located in Alaska state., Addresses, State_County, [Alaska]
Picklist: What are the names of the workshop groups that have bookings with status code "stop"?, Bookings, Status_Code, [stop]
Picklist: Which workshop groups have bookings with status code "stop"? Give me the names., Bookings, Status_Code, [stop]
Picklist: What is the average quantities ordered with payment method code "MasterCard" on invoices?, Ref_Payment_Methods, payment_method_code, [MasterCard]
Picklist: What is the average quantities ordered with payment method code "MasterCard" on invoices?, Invoices, payment_method_code, [MasterCard]
--------------------
text:  What is the average quantities ordered with payment method code "MasterCard" on invoices?
sql:  SELECT avg(Order_Quantity) FROM Invoices WHERE payment_method_code  =  "MasterCard"
ground truth values:  [('Invoices.payment_method_code', 'MasterCard')]
matched values OrderedDict([(10, ('Ref_Payment_Methods.payment_method_code', 'MasterCard')), (320, ('Invoices.payment_method_code', 'MasterCard'))])
--------------------
Picklist: Check the invoices record and compute the average quantities ordered with the payment method "MasterCard"., Ref_Payment_Methods, payment_method_code, [MasterCard]
Picklist: Check the invoices record and compute the average quantities ordered with the payment method "MasterCard"., Invoices, payment_method_code, [MasterCard]
--------------------
text:  Check the invoices record and compute the average quantities ordered with the payment method "MasterCard".
sql:  SELECT avg(Order_Quantity) FROM Invoices WHERE payment_method_code  =  "MasterCard"
ground truth values:  [('Invoices.payment_method_code', 'MasterCard')]
matched values OrderedDict([(10, ('Ref_Payment_Methods.payment_method_code', 'MasterCard')), (320, ('Invoices.payment_method_code', 'MasterCard'))])
--------------------
Picklist: What is the description of the service type which offers both the photo product and the film product?, Products, Product_Name, [film]
Picklist: What is the description of the service type which offers both the photo product and the film product?, Products, Product_Name, [photo]
Picklist: What is the description of the service type which offers both the photo product and the film product?, Services, Product_Name, [film]
Picklist: What is the description of the service type which offers both the photo product and the film product?, Services, Product_Name, [photo]
--------------------
text:  What is the description of the service type which offers both the photo product and the film product?
sql:  SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'film'
ground truth values:  [('Services.Product_Name', 'photo'), ('Services.Product_Name', 'film')]
matched values OrderedDict([(59, ('Products.Product_Name', 'film')), (61, ('Products.Product_Name', 'photo')), (354, ('Services.Product_Name', 'film')), (356, ('Services.Product_Name', 'photo'))])
--------------------
Picklist: Give me the description of the service type that offers not only the photo product but also the film product., Products, Product_Name, [film]
Picklist: Give me the description of the service type that offers not only the photo product but also the film product., Products, Product_Name, [photo]
Picklist: Give me the description of the service type that offers not only the photo product but also the film product., Services, Product_Name, [film]
Picklist: Give me the description of the service type that offers not only the photo product but also the film product., Services, Product_Name, [photo]
--------------------
text:  Give me the description of the service type that offers not only the photo product but also the film product.
sql:   58%|█████▊    | 5172/8943 [13:46<01:49, 34.54it/s] 58%|█████▊    | 5184/8943 [13:46<01:26, 43.46it/s] 58%|█████▊    | 5190/8943 [13:47<01:23, 45.03it/s] 58%|█████▊    | 5196/8943 [13:49<09:24,  6.64it/s] 58%|█████▊    | 5204/8943 [13:49<06:48,  9.15it/s] 58%|█████▊    | 5210/8943 [13:49<05:04, 12.25it/s]SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'film'
ground truth values:  [('Services.Product_Name', 'photo'), ('Services.Product_Name', 'film')]
matched values OrderedDict([(59, ('Products.Product_Name', 'film')), (61, ('Products.Product_Name', 'photo')), (354, ('Services.Product_Name', 'film')), (356, ('Services.Product_Name', 'photo'))])
--------------------
--------------------
text:  Find all the stage positions of the musicians with first name "Solveig"
sql:  SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE Firstname  =  "Solveig"
ground truth values:  [('Band.Firstname', 'Solveig')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the different stage positions for all musicians whose first name is "Solveig"?
sql:  SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE Firstname  =  "Solveig"
ground truth values:  [('Band.Firstname', 'Solveig')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all the songs performed by artist with last name "Heilo"
sql:  SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  "Heilo"
ground truth values:  [('Band.Lastname', 'Heilo')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the names of the songs by the artist whose last name is "Heilo"?
sql:  SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  "Heilo"
ground truth values:  [('Band.Lastname', 'Heilo')]
matched values OrderedDict()
--------------------
--------------------
text:  Hom many musicians performed in the song "Flash"?
sql:  SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  "Flash"
ground truth values:  [('Songs.Title', 'Flash')]
matched values OrderedDict()
--------------------
--------------------
text:  How many musicians play in the song "Flash"?
sql:  SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  "Flash"
ground truth values:  [('Songs.Title', 'Flash')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all the songs produced by artists with first name "Marianne".
sql:  SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.firstname  =  "Marianne"
ground truth values:  [('Band.Firstname', 'Marianne')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the names of all songs produced by the artist with the first name "Marianne"?
sql:  SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.firstname  =  "Marianne"
ground truth values:  [('Band.Firstname', 'Marianne')]
matched values OrderedDict()
--------------------
--------------------
text:  Who performed the song named "Badlands"? Show the first name and the last name.
sql:  SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  "Badlands"
ground truth values:  [('Songs.Title', 'Badlands')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the first and last names of the artist who perfomed the song "Badlands"?
sql:  SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  "Badlands"
ground truth values:  [('Songs.Title', 'Badlands')]
matched values OrderedDict()
--------------------
--------------------
text:  Who is performing in the back stage position for the song "Badlands"? Show the first name and the last name.
sql:  SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  "Badlands" AND T1.StagePosition  =  "back"
ground truth values:  [('Songs.Title', 'Badlands'), ('Performance.StagePosition', 'back')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the first and last names of the performer who was in the back stage position for the song "Badlands"?
sql:  SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  "Badlands" AND T1.StagePosition  =  "back"
ground truth values:  [('Songs.Title', 'Badlands'), ('Performance.StagePosition', 'back')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the last name of the musician that has been at the back position the most?
sql:  SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  "back" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1
ground truth values:  [('Performance.StagePosition', 'back')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the last name of the musicians who has played back position the most?
sql:  SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  "back" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1
ground truth values:  [('Performance.StagePosition', 'back')]
matched values OrderedDict()
--------------------
--------------------
text:  What instrument did the musician with last name "Heilo" use in the song "Le Pop"?
sql:  SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  "Heilo" AND T3.title  =  "Le Pop"
ground truth values:  [('Band.Lastname', 'Heilo'), ('Songs.Title', 'Le Pop')]
matched values OrderedDict()
--------------------
--------------------
text:  What instruments did the musician with the last name "Heilo" play in the song "Le Pop"?
sql:  SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  "Heilo" AND T3.title  =  "Le Pop"
ground truth values:  [('Band.Lastname', 'Heilo'), ('Songs.Title', 'Le Pop')]
matched values OrderedDict()
--------------------
--------------------
text:  How many songs have used the instrument "drums"?
sql:  SELECT count(*) FROM instruments WHERE instrument  =  "drums"
ground truth values:  [('Instruments.Instrument', 'drums')]
matched values OrderedDict()
--------------------
--------------------
text:  How many songs use drums as an instrument?
sql:  SELECT count(*) FROM instruments WHERE instrument  =  "drums"
ground truth values:  [('Instruments.Instrument', 'drums')]
matched values OrderedDict()
--------------------
--------------------
text:  What instruments does the the song "Le Pop" use?
sql:  SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Le Pop"
ground truth values:  [('Songs.Title', 'Le Pop')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the instruments are used in the song "Le Pop"?
sql:  SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Le Pop"
ground truth values:  [('Songs.Title', 'Le Pop')]
matched values OrderedDict()
--------------------
--------------------
text:   58%|█████▊    | 5217/8943 [13:50<03:50, 16.20it/s] 58%|█████▊    | 5224/8943 [13:50<02:57, 20.97it/s] 58%|█████▊    | 5231/8943 [13:50<02:21, 26.20it/s] 59%|█████▊    | 5239/8943 [13:50<01:55, 32.06it/s]How many instruments does the song "Le Pop" use?
sql:  SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Le Pop"
ground truth values:  [('Songs.Title', 'Le Pop')]
matched values OrderedDict()
--------------------
--------------------
text:  How many different instruments are used in the song "Le Pop"?
sql:  SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Le Pop"
ground truth values:  [('Songs.Title', 'Le Pop')]
matched values OrderedDict()
--------------------
--------------------
text:  How many instrument does the musician with last name "Heilo" use?
sql:  SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  "Heilo"
ground truth values:  [('Band.Lastname', 'Heilo')]
matched values OrderedDict()
--------------------
--------------------
text:  How many different instruments does the musician with the last name "Heilo" use?
sql:  SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  "Heilo"
ground truth values:  [('Band.Lastname', 'Heilo')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all the instruments ever used by the musician with last name "Heilo"?
sql:  SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  "Heilo"
ground truth values:  [('Band.Lastname', 'Heilo')]
matched values OrderedDict()
--------------------
--------------------
text:  What are all the instruments used by the musician with the last name "Heilo"?
sql:  SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  "Heilo"
ground truth values:  [('Band.Lastname', 'Heilo')]
matched values OrderedDict()
--------------------
--------------------
text:  Which vocal type has the band mate with last name "Heilo" played the most?
sql:  SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  "Heilo" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1
ground truth values:  [('Band.Lastname', 'Heilo')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the type of vocals that the band member with the last name "Heilo" played the most?
sql:  SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE lastname  =  "Heilo" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1
ground truth values:  [('Band.Lastname', 'Heilo')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the vocal types used in song "Le Pop"?
sql:  SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Le Pop"
ground truth values:  [('Songs.Title', 'Le Pop')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the types of vocals used in the song "Le Pop"?
sql:  SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Le Pop"
ground truth values:  [('Songs.Title', 'Le Pop')]
matched values OrderedDict()
--------------------
--------------------
text:  Find the number of vocal types used in song "Demon Kitty Rag"?
sql:  SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Demon Kitty Rag"
ground truth values:  [('Songs.Title', 'Demon Kitty Rag')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the types of vocals used in the song "Demon Kitty Rag"?
sql:  SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Demon Kitty Rag"
ground truth values:  [('Songs.Title', 'Demon Kitty Rag')]
matched values OrderedDict()
--------------------
--------------------
text:  How many songs have a lead vocal?
sql:  SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  "lead"
ground truth values:  [('Vocals.Type', 'lead')]
matched values OrderedDict()
--------------------
--------------------
text:  How many songs have vocals of type lead?
sql:  SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  "lead"
ground truth values:  [('Vocals.Type', 'lead')]
matched values OrderedDict()
--------------------
--------------------
text:  Which vocal type did the musician with first name "Solveig" played in the song with title "A Bar in Amsterdam"?
sql:  SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.firstname  =  "Solveig" AND T2.title  =  "A Bar In Amsterdam"
ground truth values:  [('Band.Firstname', 'Solveig'), ('Songs.Title', 'A Bar In Amsterdam')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the types of vocals that the musician with the first name "Solveig" played in the song "A Bar in Amsterdam"?
sql:  SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.firstname  =  "Solveig" AND T2.title  =  "A Bar In Amsterdam"
ground truth values:  [('Band.Firstname', 'Solveig'), ('Songs.Title', 'A Bar In Amsterdam')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all the songs that do not have a lead vocal.
sql:  SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  "lead"
ground truth values:  [('Vocals.Type', 'lead')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the names of the songs without a lead vocal?
sql:  SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  "lead"
ground truth values:  [('Vocals.Type', 'lead')]
matched values OrderedDict()
--------------------
--------------------
text:  Who performed the song named "Le Pop"?
sql:  SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  "Le Pop"
ground truth values:  [('Songs.Title', 'Le Pop')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the first and last name of artist who performed "Le Pop"?
sql:  SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  "Le Pop"
ground truth values:  [('Songs.Title', 'Le Pop')]
matched values OrderedDict()
--------------------
--------------------
text:  What instrument did the musician with last name "Heilo" use in the song "Badlands"?
sql:  SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  "Heilo" AND T3.title  =  "Badlands"
ground truth values:  [('Band.Lastname', 'Heilo'), ('Songs.Title', 'Badlands')]
matched values OrderedDict()
--------------------
--------------------
text:  What instruments did the musician with the last name "Heilo" play in "Badlands"?
sql:  SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  "Heilo" AND T3.title  =  "Badlands"
ground truth values:  [('Band.Lastname', 'Heilo'), ('Songs.Title', 'Badlands')]
matched values OrderedDict()
--------------------
--------------------
text:  How many instruments does the song "Badlands" use?
sql:  SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Badlands"
ground truth values:  [('Songs.Title', 'Badlands')]
matched values OrderedDict()
--------------------
 59%|█████▊    | 5246/8943 [13:50<01:46, 34.84it/s] 59%|█████▊    | 5253/8943 [13:50<01:31, 40.18it/s] 59%|█████▉    | 5259/8943 [13:50<01:28, 41.43it/s] 59%|█████▉    | 5265/8943 [13:50<01:27, 42.03it/s]--------------------
text:  How many different instruments are used in the song "Badlands"?
sql:  SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Badlands"
ground truth values:  [('Songs.Title', 'Badlands')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the vocal types used in song "Badlands"?
sql:  SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Badlands"
ground truth values:  [('Songs.Title', 'Badlands')]
matched values OrderedDict()
--------------------
--------------------
text:  What types of vocals are used in the song "Badlands"?
sql:  SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Badlands"
ground truth values:  [('Songs.Title', 'Badlands')]
matched values OrderedDict()
--------------------
--------------------
text:  Find the number of vocal types used in song "Le Pop"
sql:  SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Le Pop"
ground truth values:  [('Songs.Title', 'Le Pop')]
matched values OrderedDict()
--------------------
--------------------
text:  How many vocal types are used in the song "Le Pop"?
sql:  SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  "Le Pop"
ground truth values:  [('Songs.Title', 'Le Pop')]
matched values OrderedDict()
--------------------
--------------------
text:  How many songs have a shared vocal?
sql:  SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  "shared"
ground truth values:  [('Vocals.Type', 'shared')]
matched values OrderedDict()
--------------------
--------------------
text:  How many different songs have shared vocals?
sql:  SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  "shared"
ground truth values:  [('Vocals.Type', 'shared')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all the songs that do not have a back vocal.
sql:  SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  "back"
ground truth values:  [('Vocals.Type', 'back')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the different names of all songs without back vocals?
sql:  SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  "back"
ground truth values:  [('Vocals.Type', 'back')]
matched values OrderedDict()
--------------------
--------------------
text:  Which vocal type has the band mate with first name "Solveig" played the most?
sql:  SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  "Solveig" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1
ground truth values:  [('Band.Firstname', 'Solveig')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the types of vocals that the band member with the first name "Solveig" played the most?
sql:  SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  "Solveig" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1
ground truth values:  [('Band.Firstname', 'Solveig')]
matched values OrderedDict()
--------------------
--------------------
text:  Which vocal type did the musician with last name "Heilo" played in the song with title "Der Kapitan"?
sql:  SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  "Heilo" AND T2.title  =  "Der Kapitan"
ground truth values:  [('Band.Lastname', 'Heilo'), ('Songs.Title', 'Der Kapitan')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the types of vocals that the musician with the last name "Heilo" played in "Der Kapitan"?
sql:  SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  "Heilo" AND T2.title  =  "Der Kapitan"
ground truth values:  [('Band.Lastname', 'Heilo'), ('Songs.Title', 'Der Kapitan')]
matched values OrderedDict()
--------------------
--------------------
text:  Which vocal type has the band mate with first name "Marianne" played the most?
sql:  SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  "Marianne" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1
ground truth values:  [('Band.Firstname', 'Marianne')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the vocal type of the band mate whose first name is "Marianne" played the most?
sql:  SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  "Marianne" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1
ground truth values:  [('Band.Firstname', 'Marianne')]
matched values OrderedDict()
--------------------
--------------------
text:  Who is performing in the back stage position for the song "Der Kapitan"? Show the first name and last name.
sql:  SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  "Der Kapitan" AND T1.StagePosition  =  "back"
ground truth values:  [('Songs.Title', 'Der Kapitan'), ('Performance.StagePosition', 'back')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the first and last name of the artist who performed back stage for the song "Der Kapitan"?
sql:  SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  "Der Kapitan" AND T1.StagePosition  =  "back"
ground truth values:  [('Songs.Title', 'Der Kapitan'), ('Performance.StagePosition', 'back')]
matched values OrderedDict()
--------------------
--------------------
text:  Find the name of songs that does not have a back vocal.
sql:  SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  "back"
ground truth values:  [('Vocals.Type', 'back')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the names of the songs that do not have back vocals?
sql:  SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  "back"
ground truth values:  [('Vocals.Type', 'back')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the songs in album "A Kiss Before You Go: Live in Hamburg"?
sql:  SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE T1.title  =  "A Kiss Before You Go: Live in Hamburg"
ground truth values:  [('Albums.Title', 'A Kiss Before You Go: Live in Hamburg')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the song titles on the album "A Kiss Before You Go: Live in Hamburg"?
sql:  SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE T1.title  =  "A Kiss Before You Go: Live in Hamburg"
ground truth values:  [('Albums.Title', 'A Kiss Before You Go: Live in Hamburg')]
matched values OrderedDict()
--------------------
--------------------
text:  What are all the songs in albums under label "Universal Music Group"?
sql:  SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.label  =  "Universal Music Group"
ground truth values:  [('Albums.Label', 'Universal Music Group')]
matched values OrderedDict()
--------------------
--------------------
 59%|█████▉    | 5271/8943 [13:51<01:24, 43.56it/s] 59%|█████▉    | 5283/8943 [13:51<01:08, 53.39it/s] 59%|█████▉    | 5295/8943 [13:51<00:58, 62.29it/s] 59%|█████▉    | 5303/8943 [13:51<00:55, 65.28it/s] 59%|█████▉    | 5313/8943 [13:51<00:50, 71.51it/s] 60%|█████▉    | 5322/8943 [13:51<00:51, 70.14it/s] 60%|█████▉    | 5335/8943 [13:51<00:44, 80.45it/s] 60%|█████▉    | 5345/8943 [13:51<00:44, 80.42it/s] 60%|█████▉    | 5354/8943 [13:52<00:46, 76.99it/s] 60%|█████▉    | 5363/8943 [13:52<00:50, 70.55it/s]text:  What are the names of all the songs whose album is under the label of "Universal Music Group"?
sql:  SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.label  =  "Universal Music Group"
ground truth values:  [('Albums.Label', 'Universal Music Group')]
matched values OrderedDict()
--------------------
--------------------
text:  Find the number of songs in all the studio albums.
sql:  SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  "Studio"
ground truth values:  [('Albums.Type', 'Studio')]
matched values OrderedDict()
--------------------
--------------------
text:  How many songs appear in studio albums?
sql:  SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  "Studio"
ground truth values:  [('Albums.Type', 'Studio')]
matched values OrderedDict()
--------------------
Picklist: Who is the founder of Sony?, Manufacturers, Name, [Sony]
Picklist: Return the founder of Sony., Manufacturers, Name, [Sony]
Picklist: Where is the headquarter of the company founded by James?, Manufacturers, Founder, [James]
Picklist: What is the headquarter of the company whose founder is James?, Manufacturers, Founder, [James]
Picklist: How many companies were created by Andy?, Manufacturers, Founder, [Andy]
Picklist: Return the number of companies created by Andy., Manufacturers, Founder, [Andy]
Picklist: Find the total revenue created by the companies whose headquarter is located at Austin., Manufacturers, Headquarter, [Austin]
Picklist: What is the sum of revenue from companies with headquarters in Austin?, Manufacturers, Headquarter, [Austin]
Picklist: Find the number of manufactures that are based in Tokyo or Beijing., Manufacturers, Headquarter, [Beijing]
Picklist: Find the number of manufactures that are based in Tokyo or Beijing., Manufacturers, Headquarter, [Tokyo]
Picklist: How many manufacturers have headquarters in either Tokyo or Beijing?, Manufacturers, Headquarter, [Beijing]
Picklist: How many manufacturers have headquarters in either Tokyo or Beijing?, Manufacturers, Headquarter, [Tokyo]
Picklist: What is the total revenue of all companies whose main office is at Tokyo or Taiwan?, Manufacturers, Headquarter, [Taiwan]
Picklist: What is the total revenue of all companies whose main office is at Tokyo or Taiwan?, Manufacturers, Headquarter, [Tokyo]
Picklist: Return the total revenue of companies with headquarters in Tokyo or Taiwan., Manufacturers, Headquarter, [Taiwan]
Picklist: Return the total revenue of companies with headquarters in Tokyo or Taiwan., Manufacturers, Headquarter, [Tokyo]
Picklist: Find the name of product that is produced by both companies Creative Labs and Sony., Manufacturers, Name, [Creative Labs]
Picklist: Find the name of product that is produced by both companies Creative Labs and Sony., Manufacturers, Name, [Sony]
Picklist: What are the names of products produced by both Creative Labs and Sony?, Manufacturers, Name, [Creative Labs]
Picklist: What are the names of products produced by both Creative Labs and Sony?, Manufacturers, Name, [Sony]
Picklist: Find the name of companies whose revenue is smaller than the revenue of all companies based in Austin., Manufacturers, Headquarter, [Austin]
Picklist: What are the names of companies with revenue less than the lowest revenue of any manufacturer in Austin?, Manufacturers, Headquarter, [Austin]
Picklist: Find the total revenue of companies whose revenue is larger than the revenue of some companies based in Austin., Manufacturers, Headquarter, [Austin]
Picklist: What is the total revenue of companies with revenue greater than the lowest revenue of any manufacturer in Austin?, Manufacturers, Headquarter, [Austin]
Picklist: Find number of products which Sony does not make., Manufacturers, Name, [Sony]
Picklist: How many products are not made by Sony?, Manufacturers, Name, [Sony]
Picklist: Find the name of companies that do not make DVD drive., Products, Name, [DVD drive]
--------------------
text:  What are the names of companies that do not make DVD drives?
sql:  SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'
ground truth values:  [('Products.Name', 'DVD drive')]
matched values OrderedDict()
--------------------
Picklist: List the problem id and log id which are assigned to the staff named Rylan Homenick., Staff, staff_first_name, [Rylan]
Picklist: List the problem id and log id which are assigned to the staff named Rylan Homenick., Staff, staff_last_name, [Homenick]
Picklist: Which problem id and log id are assigned to the staff named Rylan Homenick?, Staff, staff_first_name, [Rylan]
Picklist: Which problem id and log id are assigned to the staff named Rylan Homenick?, Staff, staff_last_name, [Homenick]
--------------------
text:  How many problems are there for product voluptatem?
sql:  SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = "voluptatem"
ground truth values:  [('Product.product_name', 'voluptatem')]
matched values OrderedDict()
--------------------
--------------------
text:  How many problems did the product called "voluptatem" have in record?
sql:  SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = "voluptatem"
ground truth values:  [('Product.product_name', 'voluptatem')]
matched values OrderedDict()
--------------------
Picklist: Give me a list of descriptions of the problems that are reported by the staff whose first name is Christop., Problem_Log, problem_status_code, [Reported]
Picklist: Give me a list of descriptions of the problems that are reported by the staff whose first name is Christop., Problem_Status_Codes, problem_status_code, [Reported]
Picklist: Give me a list of descriptions of the problems that are reported by the staff whose first name is Christop., Problem_Status_Codes, problem_status_description, [Reported]
Picklist: Give me a list of descriptions of the problems that are reported by the staff whose first name is Christop., Staff, staff_first_name, [Christop]
--------------------
text:  Give me a list of descriptions of the problems that are reported by the staff whose first name is Christop.
sql:  SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Christop"
ground truth values:  [('Staff.staff_first_name', 'Christop')]
matched values OrderedDict([(37, ('Problem_Log.problem_status_code', 'Reported')), (63, ('Problem_Status_Codes.problem_status_code', 'Reported')), (69, ('Problem_Status_Codes.problem_status_description', 'Reported')), (91, ('Staff.staff_first_name', 'Christop'))])
--------------------
Picklist: Which problems are reported by the staff with first name "Christop"? Show the descriptions of the problems., Problem_Log, problem_status_code, [Reported]
Picklist: Which problems are reported by the staff with first name "Christop"? Show the descriptions of the problems., Problem_Status_Codes, problem_status_code, [Reported]
Picklist: Which problems are reported by the staff with first name "Christop"? Show the descriptions of the problems., Problem_Status_Codes, problem_status_description, [Reported]
Picklist: Which problems are reported by the staff with first name "Christop"? Show the descriptions of the problems., Staff, staff_first_name, [Christop]
--------------------
text:  Which problems are reported by the staff with first name "Christop"? Show the descriptions of the problems.
sql:  SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Christop"
ground truth values:  [('Staff.staff_first_name', 'Christop')]
matched values  60%|██████    | 5371/8943 [13:52<00:57, 62.24it/s] 60%|██████    | 5378/8943 [13:52<00:56, 62.66it/s]OrderedDict([(37, ('Problem_Log.problem_status_code', 'Reported')), (63, ('Problem_Status_Codes.problem_status_code', 'Reported')), (69, ('Problem_Status_Codes.problem_status_description', 'Reported')), (91, ('Staff.staff_first_name', 'Christop'))])
--------------------
Picklist: Find the ids of the problems that are reported by the staff whose last name is Bosco., Problem_Log, problem_status_code, [Reported]
Picklist: Find the ids of the problems that are reported by the staff whose last name is Bosco., Problem_Status_Codes, problem_status_code, [Reported]
Picklist: Find the ids of the problems that are reported by the staff whose last name is Bosco., Problem_Status_Codes, problem_status_description, [Reported]
Picklist: Find the ids of the problems that are reported by the staff whose last name is Bosco., Staff, staff_last_name, [Bosco]
--------------------
text:  Find the ids of the problems that are reported by the staff whose last name is Bosco.
sql:  SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = "Bosco"
ground truth values:  [('Staff.staff_last_name', 'Bosco')]
matched values OrderedDict([(37, ('Problem_Log.problem_status_code', 'Reported')), (63, ('Problem_Status_Codes.problem_status_code', 'Reported')), (69, ('Problem_Status_Codes.problem_status_description', 'Reported')), (95, ('Staff.staff_last_name', 'Bosco'))])
--------------------
Picklist: Which problems are reported by the staff with last name "Bosco"? Show the ids of the problems., Problem_Log, problem_status_code, [Reported]
Picklist: Which problems are reported by the staff with last name "Bosco"? Show the ids of the problems., Problem_Status_Codes, problem_status_code, [Reported]
Picklist: Which problems are reported by the staff with last name "Bosco"? Show the ids of the problems., Problem_Status_Codes, problem_status_description, [Reported]
Picklist: Which problems are reported by the staff with last name "Bosco"? Show the ids of the problems., Staff, staff_last_name, [Bosco]
--------------------
text:  Which problems are reported by the staff with last name "Bosco"? Show the ids of the problems.
sql:  SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = "Bosco"
ground truth values:  [('Staff.staff_last_name', 'Bosco')]
matched values OrderedDict([(37, ('Problem_Log.problem_status_code', 'Reported')), (63, ('Problem_Status_Codes.problem_status_code', 'Reported')), (69, ('Problem_Status_Codes.problem_status_description', 'Reported')), (95, ('Staff.staff_last_name', 'Bosco'))])
--------------------
Picklist: What are the ids of the problems which are reported after 1978-06-26?, Problem_Log, problem_status_code, [Reported]
Picklist: What are the ids of the problems which are reported after 1978-06-26?, Problem_Status_Codes, problem_status_code, [Reported]
Picklist: What are the ids of the problems which are reported after 1978-06-26?, Problem_Status_Codes, problem_status_description, [Reported]
--------------------
text:  What are the ids of the problems which are reported after 1978-06-26?
sql:  SELECT problem_id FROM problems WHERE date_problem_reported > "1978-06-26"
ground truth values:  [('Problems.date_problem_reported', '1978-06-26')]
matched values OrderedDict([(37, ('Problem_Log.problem_status_code', 'Reported')), (63, ('Problem_Status_Codes.problem_status_code', 'Reported')), (69, ('Problem_Status_Codes.problem_status_description', 'Reported'))])
--------------------
Picklist: Find the ids of the problems reported after 1978-06-26., Problem_Log, problem_status_code, [Reported]
Picklist: Find the ids of the problems reported after 1978-06-26., Problem_Status_Codes, problem_status_code, [Reported]
Picklist: Find the ids of the problems reported after 1978-06-26., Problem_Status_Codes, problem_status_description, [Reported]
--------------------
text:  Find the ids of the problems reported after 1978-06-26.
sql:  SELECT problem_id FROM problems WHERE date_problem_reported > "1978-06-26"
ground truth values:  [('Problems.date_problem_reported', '1978-06-26')]
matched values OrderedDict([(37, ('Problem_Log.problem_status_code', 'Reported')), (63, ('Problem_Status_Codes.problem_status_code', 'Reported')), (69, ('Problem_Status_Codes.problem_status_description', 'Reported'))])
--------------------
Picklist: What are the ids of the problems which are reported before 1978-06-26?, Problem_Log, problem_status_code, [Reported]
Picklist: What are the ids of the problems which are reported before 1978-06-26?, Problem_Status_Codes, problem_status_code, [Reported]
Picklist: What are the ids of the problems which are reported before 1978-06-26?, Problem_Status_Codes, problem_status_description, [Reported]
--------------------
text:  What are the ids of the problems which are reported before 1978-06-26?
sql:  SELECT problem_id FROM problems WHERE date_problem_reported < "1978-06-26"
ground truth values:  [('Problems.date_problem_reported', '1978-06-26')]
matched values OrderedDict([(37, ('Problem_Log.problem_status_code', 'Reported')), (63, ('Problem_Status_Codes.problem_status_code', 'Reported')), (69, ('Problem_Status_Codes.problem_status_description', 'Reported'))])
--------------------
Picklist: Which problems are reported before 1978-06-26? Give me the ids of the problems., Problem_Log, problem_status_code, [Reported]
Picklist: Which problems are reported before 1978-06-26? Give me the ids of the problems., Problem_Status_Codes, problem_status_code, [Reported]
Picklist: Which problems are reported before 1978-06-26? Give me the ids of the problems., Problem_Status_Codes, problem_status_description, [Reported]
--------------------
text:  Which problems are reported before 1978-06-26? Give me the ids of the problems.
sql:  SELECT problem_id FROM problems WHERE date_problem_reported < "1978-06-26"
ground truth values:  [('Problems.date_problem_reported', '1978-06-26')]
matched values OrderedDict([(37, ('Problem_Log.problem_status_code', 'Reported')), (63, ('Problem_Status_Codes.problem_status_code', 'Reported')), (69, ('Problem_Status_Codes.problem_status_description', 'Reported'))])
--------------------
Picklist: For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?, Problem_Log, problem_status_code, [Reported]
Picklist: For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?, Problem_Status_Codes, problem_status_code, [Reported]
Picklist: For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?, Problem_Status_Codes, problem_status_description, [Reported]
--------------------
text:  For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?
sql:  SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > "1986-11-13" GROUP BY T2.product_id
ground truth values:  [('Problems.date_problem_reported', '1986-11-13')]
matched values OrderedDict([(37, ('Problem_Log.problem_status_code', 'Reported')), (63, ('Problem_Status_Codes.problem_status_code', 'Reported')), (69, ('Problem_Status_Codes.problem_status_description', 'Reported'))])
--------------------
Picklist: What are the products that have problems reported after 1986-11-13? Give me the product id and the count of problems reported after 1986-11-13., Problem_Log, problem_status_code, [Reported]
Picklist: What are the products that have problems reported after 1986-11-13? Give me the product id and the count of problems reported after 1986-11-13., Problem_Status_Codes, problem_status_code, [Reported]
Picklist: What are the products that have problems reported after 1986-11-13? Give me the product id and the count of problems reported after 1986-11-13., Problem_Status_Codes, problem_status_description, [Reported]
--------------------
text:  What are the products that have problems reported after 1986-11-13? Give me the product id and the count of problems reported after 1986-11-13.
sql:   60%|██████    | 5385/8943 [13:52<00:59, 59.47it/s]SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > "1986-11-13" GROUP BY T2.product_id
ground truth values:  [('Problems.date_problem_reported', '1986-11-13')]
matched values OrderedDict([(37, ('Problem_Log.problem_status_code', 'Reported')), (63, ('Problem_Status_Codes.problem_status_code', 'Reported')), (69, ('Problem_Status_Codes.problem_status_description', 'Reported'))])
--------------------
Picklist: What are the id of problems reported by the staff named Dameon Frami or Jolie Weber?, Problem_Log, problem_status_code, [Reported]
Picklist: What are the id of problems reported by the staff named Dameon Frami or Jolie Weber?, Problem_Status_Codes, problem_status_code, [Reported]
Picklist: What are the id of problems reported by the staff named Dameon Frami or Jolie Weber?, Problem_Status_Codes, problem_status_description, [Reported]
Picklist: What are the id of problems reported by the staff named Dameon Frami or Jolie Weber?, Staff, staff_first_name, [Dameon]
Picklist: What are the id of problems reported by the staff named Dameon Frami or Jolie Weber?, Staff, staff_first_name, [Jolie]
Picklist: What are the id of problems reported by the staff named Dameon Frami or Jolie Weber?, Staff, staff_last_name, [Frami]
Picklist: What are the id of problems reported by the staff named Dameon Frami or Jolie Weber?, Staff, staff_last_name, [Weber]
--------------------
text:  What are the id of problems reported by the staff named Dameon Frami or Jolie Weber?
sql:  SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Dameon" AND T2.staff_last_name = "Frami" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Jolie" AND T2.staff_last_name = "Weber"
ground truth values:  [('Staff.staff_first_name', 'Dameon'), ('Staff.staff_last_name', 'Frami'), ('Staff.staff_first_name', 'Jolie'), ('Staff.staff_last_name', 'Weber')]
matched values OrderedDict([(37, ('Problem_Log.problem_status_code', 'Reported')), (63, ('Problem_Status_Codes.problem_status_code', 'Reported')), (69, ('Problem_Status_Codes.problem_status_description', 'Reported')), (91, ('Staff.staff_first_name', 'Dameon')), (94, ('Staff.staff_first_name', 'Jolie')), (101, ('Staff.staff_last_name', 'Frami')), (104, ('Staff.staff_last_name', 'Weber'))])
--------------------
Picklist: Which problems were reported by the staff named Dameon Frami or Jolie Weber? Give me the ids of the problems., Problem_Log, problem_status_code, [Reported]
Picklist: Which problems were reported by the staff named Dameon Frami or Jolie Weber? Give me the ids of the problems., Problem_Status_Codes, problem_status_code, [Reported]
Picklist: Which problems were reported by the staff named Dameon Frami or Jolie Weber? Give me the ids of the problems., Problem_Status_Codes, problem_status_description, [Reported]
Picklist: Which problems were reported by the staff named Dameon Frami or Jolie Weber? Give me the ids of the problems., Staff, staff_first_name, [Dameon]
Picklist: Which problems were reported by the staff named Dameon Frami or Jolie Weber? Give me the ids of the problems., Staff, staff_first_name, [Jolie]
Picklist: Which problems were reported by the staff named Dameon Frami or Jolie Weber? Give me the ids of the problems., Staff, staff_last_name, [Frami]
Picklist: Which problems were reported by the staff named Dameon Frami or Jolie Weber? Give me the ids of the problems., Staff, staff_last_name, [Weber]
--------------------
text:  Which problems were reported by the staff named Dameon Frami or Jolie Weber? Give me the ids of the problems.
sql:  SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Dameon" AND T2.staff_last_name = "Frami" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Jolie" AND T2.staff_last_name = "Weber"
ground truth values:  [('Staff.staff_first_name', 'Dameon'), ('Staff.staff_last_name', 'Frami'), ('Staff.staff_first_name', 'Jolie'), ('Staff.staff_last_name', 'Weber')]
matched values OrderedDict([(37, ('Problem_Log.problem_status_code', 'Reported')), (63, ('Problem_Status_Codes.problem_status_code', 'Reported')), (69, ('Problem_Status_Codes.problem_status_description', 'Reported')), (91, ('Staff.staff_first_name', 'Dameon')), (94, ('Staff.staff_first_name', 'Jolie')), (101, ('Staff.staff_last_name', 'Frami')), (104, ('Staff.staff_last_name', 'Weber'))])
--------------------
Picklist: What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?, Problem_Log, problem_status_code, [Reported]
Picklist: What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?, Problem_Status_Codes, problem_status_code, [Reported]
Picklist: What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?, Problem_Status_Codes, problem_status_description, [Reported]
Picklist: What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?, Staff, staff_first_name, [Christop]
Picklist: What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?, Staff, staff_first_name, [Ashley]
Picklist: What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?, Staff, staff_last_name, [Medhurst]
Picklist: What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?, Staff, staff_last_name, [Berge]
--------------------
text:  What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?
sql:  SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Christop" AND T2.staff_last_name = "Berge" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Ashley" AND T2.staff_last_name = "Medhurst"
ground truth values:  [('Staff.staff_first_name', 'Christop'), ('Staff.staff_last_name', 'Berge'), ('Staff.staff_first_name', 'Ashley'), ('Staff.staff_last_name', 'Medhurst')]
matched values OrderedDict([(37, ('Problem_Log.problem_status_code', 'Reported')), (63, ('Problem_Status_Codes.problem_status_code', 'Reported')), (69, ('Problem_Status_Codes.problem_status_description', 'Reported')), (91, ('Staff.staff_first_name', 'Christop')), (94, ('Staff.staff_first_name', 'Ashley')), (100, ('Staff.staff_last_name', 'Medhurst')), (103, ('Staff.staff_last_name', 'Berge'))])
--------------------
Picklist: For which product was there a problem reported by Christop Berge, with closure authorised by Ashley Medhurst? Return the product ids., Problem_Log, problem_status_code, [Reported]
Picklist: For which product was there a problem reported by Christop Berge, with closure authorised by Ashley Medhurst? Return the product ids., Problem_Status_Codes, problem_status_code, [Reported]
Picklist: For which product was there a problem reported by Christop Berge, with closure authorised by Ashley Medhurst? Return the product ids., Problem_Status_Codes, problem_status_description, [Reported]
Picklist: For which product was there a problem reported by Christop Berge, with closure authorised by Ashley Medhurst? Return the product ids., Staff, staff_first_name, [Christop]
Picklist: For which product was there a problem reported by Christop Berge, with closure authorised by Ashley Medhurst? Return the product ids., Staff, staff_first_name, [Ashley]
Picklist: For which product was there a problem reported by Christop Berge, with closure authorised by Ashley Medhurst? Return the product ids., Staff, staff_last_name, [Medhurst]
Picklist: For which product was there a problem reported by Christop Berge, with closure authorised by Ashley Medhurst? Return the product ids., Staff, staff_last_name, [Berge]
--------------------
text:  For which product was there a problem reported by Christop Berge, with closure authorised by Ashley Medhurst? Return the product ids.
sql:  SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Christop" AND T2.staff_last_name = "Berge" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = "Ashley" AND T2.staff_last_name = "Medhurst"
ground truth values:  [('Staff.staff_first_name', 'Christop'), ('Staff.staff_last_name', 'Berge'), ('Staff.staff_first_name', 'Ashley'), ('Staff.staff_last_name', 'Medhurst')]
matched values OrderedDict([(37, ('Problem_Log.problem_status_code', 'Reported')), (63, ('Problem_Status_Codes.problem_status_code', 'Reported')), (69, ('Problem_Status_Codes.problem_status_description', 'Reported')), (91, ('Staff.staff_first_name', 'Christop')), (94, ('Staff.staff_first_name', 'Ashley')), (100, ('Staff.staff_last_name', 'Medhurst')), (103, ('Staff.staff_last_name', 'Berge'))])
--------------------
Picklist: What are the ids of the problems reported before the date of any problem reported by Lysanne Turcotte?, Problem_Log, problem_status_code, [Reported]
Picklist: What are the ids of the problems reported before the date of any problem reported by Lysanne Turcotte?, Problem_Status_Codes, problem_status_code, [Reported]
Picklist: What are the ids of the problems reported before the date of any problem reported by Lysanne Turcotte?, Problem_Status_Codes, problem_status_description, [Reported]
Picklist: What are the ids of the problems reported before the date of any problem reported by Lysanne Turcotte?, Staff, staff_first_name, [Lysanne]
Picklist: What are the ids of the problems reported before the date of any problem reported by Lysanne Turcotte?, Staff, staff_last_name, [Turcotte]
--------------------
text:  What are the ids of the problems reported before the date of any problem reported by Lysanne Turcotte?
sql:  SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = "Lysanne" AND T4.staff_last_name = "Turcotte" )
ground truth values:  [('Staff.staff_first_name', 'Lysanne'), ('Staff.staff_last_name', 'Turcotte')]
matched values OrderedDict([(37, ('Problem_Log.problem_status_code', 'Reported')), (63, ('Problem_Status_Codes.problem_status_code', 'Reported')), (69, ('Problem_Status_Codes.problem_status_description', 'Reported')), (91, ('Staff.staff_first_name', 'Lysanne')), (99, ('Staff.staff_last_name', 'Turcotte'))])
--------------------
Picklist: Which problems were reported before the date of any problem reported by the staff Lysanne Turcotte? Give me the ids of the problems., Problem_Log, problem_status_code, [Reported]
Picklist: Which problems were reported before the date of any problem reported by the staff Lysanne Turcotte? Give me the ids of the problems., Problem_Status_Codes, problem_status_code, [Reported]
Picklist: Which problems were reported before the date of any problem reported by the staff Lysanne Turcotte? Give me the ids of the problems., Problem_Status_Codes, problem_status_description, [Reported]
Picklist: Which problems were reported before the date of any problem reported by the staff Lysanne Turcotte? Give me the ids of the problems., Staff, staff_first_name, [Lysanne]
Picklist: Which problems were reported before the date of any problem reported by the staff Lysanne Turcotte? Give me the ids of the problems., Staff, staff_last_name, [Turcotte]
--------------------
text:  Which problems were reported before the date of any problem reported by the staff Lysanne Turcotte? Give me the ids of the problems.
sql:  SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = "Lysanne" AND T4.staff_last_name = "Turcotte" )
ground truth values:  [('Staff.staff_first_name', 'Lysanne'), ('Staff.staff_last_name', 'Turcotte')]
matched values OrderedDict([(37, ('Problem_Log.problem_status_code', 'Reported')), (63, ('Problem_Status_Codes.problem_status_code', 'Reported')), (69, ('Problem_Status_Codes.problem_status_description', 'Reported')), (91, ('Staff.staff_first_name', 'Lysanne')), (99, ('Staff.staff_last_name', 'Turcotte'))])
--------------------
Picklist: What are the ids of the problems reported after the date of any problems reported by Rylan Homenick?, Problem_Log, problem_status_code, [Reported]
Picklist: What are the ids of the problems reported after the date of any problems reported by Rylan Homenick?, Problem_Status_Codes, problem_status_code, [Reported]
Picklist: What are the ids of the problems reported after the date of any problems reported by Rylan Homenick?, Problem_Status_Codes, problem_status_description, [Reported]
Picklist: What are the ids of the problems reported after the date of any problems reported by Rylan Homenick?, Staff, staff_first_name, [Rylan]
Picklist: What are the ids of the problems reported after the date of any problems reported by Rylan Homenick?, Staff, staff_last_name, [Homenick]
--------------------
text:  What are the ids of the problems reported after the date of any problems reported by Rylan Homenick?
sql:  SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = "Rylan" AND T4.staff_last_name = "Homenick" )
ground truth values:  [('Staff.staff_first_name', 'Rylan'), ('Staff.staff_last_name', 'Homenick')]
matched values OrderedDict([(37, ('Problem_Log.problem_status_code', 'Reported')), (63, ('Problem_Status_Codes.problem_status_code', 'Reported')), (69, ('Problem_Status_Codes.problem_status_description', 'Reported')), (91, ('Staff.staff_first_name', 'Rylan')), (98, ('Staff.staff_last_name', 'Homenick'))])
--------------------
Picklist: Find the ids of the problems reported after the date of any problems reported by the staff Rylan Homenick., Problem_Log, problem_status_code, [Reported]
Picklist: Find the ids of the problems reported after the date of any problems reported by the staff Rylan Homenick., Problem_Status_Codes, problem_status_code, [Reported]
Picklist: Find the ids of the problems reported after the date of any problems reported by the staff Rylan Homenick., Problem_Status_Codes, problem_status_description, [Reported]
Picklist: Find the ids of the problems reported after the date of any problems reported by the staff Rylan Homenick., Staff, staff_first_name, [Rylan]
Picklist: Find the ids of the problems reported after the date of any problems reported by the staff Rylan Homenick., Staff, staff_last_name, [Homenick]
--------------------
text:  Find the ids of the problems reported after the date of any problems reported by the staff Rylan Homenick.
sql:  SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = "Rylan" AND T4.staff_last_name = "Homenick" )
ground truth values:  [('Staff.staff_first_name', 'Rylan'), ('Staff.staff_last_name', 'Homenick')]
matched values  60%|██████    | 5392/8943 [13:52<01:25, 41.77it/s] 60%|██████    | 5398/8943 [13:53<01:32, 38.52it/s]OrderedDict([(37, ('Problem_Log.problem_status_code', 'Reported')), (63, ('Problem_Status_Codes.problem_status_code', 'Reported')), (69, ('Problem_Status_Codes.problem_status_description', 'Reported')), (91, ('Staff.staff_first_name', 'Rylan')), (98, ('Staff.staff_last_name', 'Homenick'))])
--------------------
Picklist: List the ids of the problems from the product "voluptatem" that are reported after 1995?, Problem_Log, problem_status_code, [Reported]
Picklist: List the ids of the problems from the product "voluptatem" that are reported after 1995?, Problem_Status_Codes, problem_status_code, [Reported]
Picklist: List the ids of the problems from the product "voluptatem" that are reported after 1995?, Problem_Status_Codes, problem_status_description, [Reported]
--------------------
text:  List the ids of the problems from the product "voluptatem" that are reported after 1995?
sql:  SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = "voluptatem" AND T1.date_problem_reported > "1995"
ground truth values:  [('Product.product_name', 'voluptatem')]
matched values OrderedDict([(37, ('Problem_Log.problem_status_code', 'Reported')), (63, ('Problem_Status_Codes.problem_status_code', 'Reported')), (69, ('Problem_Status_Codes.problem_status_description', 'Reported'))])
--------------------
Picklist: What are the ids of the problems that are from the product "voluptatem" and are reported after 1995?, Problem_Log, problem_status_code, [Reported]
Picklist: What are the ids of the problems that are from the product "voluptatem" and are reported after 1995?, Problem_Status_Codes, problem_status_code, [Reported]
Picklist: What are the ids of the problems that are from the product "voluptatem" and are reported after 1995?, Problem_Status_Codes, problem_status_description, [Reported]
--------------------
text:  What are the ids of the problems that are from the product "voluptatem" and are reported after 1995?
sql:  SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = "voluptatem" AND T1.date_problem_reported > "1995"
ground truth values:  [('Product.product_name', 'voluptatem')]
matched values OrderedDict([(37, ('Problem_Log.problem_status_code', 'Reported')), (63, ('Problem_Status_Codes.problem_status_code', 'Reported')), (69, ('Problem_Status_Codes.problem_status_description', 'Reported'))])
--------------------
Picklist: Find the first and last name of the staff members who reported problems from the product "rem" but not "aut"?, Problem_Log, problem_status_code, [Reported]
Picklist: Find the first and last name of the staff members who reported problems from the product "rem" but not "aut"?, Problem_Status_Codes, problem_status_code, [Reported]
Picklist: Find the first and last name of the staff members who reported problems from the product "rem" but not "aut"?, Problem_Status_Codes, problem_status_description, [Reported]
--------------------
text:  Find the first and last name of the staff members who reported problems from the product "rem" but not "aut"?
sql:  SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = "rem" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = "aut"
ground truth values:  [('Product.product_name', 'rem'), ('Product.product_name', 'aut')]
matched values OrderedDict([(37, ('Problem_Log.problem_status_code', 'Reported')), (63, ('Problem_Status_Codes.problem_status_code', 'Reported')), (69, ('Problem_Status_Codes.problem_status_description', 'Reported'))])
--------------------
Picklist: Which staff members who reported problems from the product "rem" but not "aut"? Give me their first and last names., Problem_Log, problem_status_code, [Reported]
Picklist: Which staff members who reported problems from the product "rem" but not "aut"? Give me their first and last names., Problem_Status_Codes, problem_status_code, [Reported]
Picklist: Which staff members who reported problems from the product "rem" but not "aut"? Give me their first and last names., Problem_Status_Codes, problem_status_description, [Reported]
--------------------
text:  Which staff members who reported problems from the product "rem" but not "aut"? Give me their first and last names.
sql:  SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = "rem" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = "aut"
ground truth values:  [('Product.product_name', 'rem'), ('Product.product_name', 'aut')]
matched values OrderedDict([(37, ('Problem_Log.problem_status_code', 'Reported')), (63, ('Problem_Status_Codes.problem_status_code', 'Reported')), (69, ('Problem_Status_Codes.problem_status_description', 'Reported'))])
--------------------
Picklist: Find the products which have problems reported by both Lacey Bosco and Kenton Champlin?, Problem_Log, problem_status_code, [Reported]
Picklist: Find the products which have problems reported by both Lacey Bosco and Kenton Champlin?, Problem_Status_Codes, problem_status_code, [Reported]
Picklist: Find the products which have problems reported by both Lacey Bosco and Kenton Champlin?, Problem_Status_Codes, problem_status_description, [Reported]
Picklist: Find the products which have problems reported by both Lacey Bosco and Kenton Champlin?, Staff, staff_first_name, [Kenton]
Picklist: Find the products which have problems reported by both Lacey Bosco and Kenton Champlin?, Staff, staff_first_name, [Lacey]
Picklist: Find the products which have problems reported by both Lacey Bosco and Kenton Champlin?, Staff, staff_last_name, [Champlin]
Picklist: Find the products which have problems reported by both Lacey Bosco and Kenton Champlin?, Staff, staff_last_name, [Bosco]
--------------------
text:  Find the products which have problems reported by both Lacey Bosco and Kenton Champlin?
sql:  SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = "Lacey" AND T3.staff_last_name = "Bosco" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = "Kenton" AND T3.staff_last_name = "Champlin"
ground truth values:  [('Staff.staff_first_name', 'Lacey'), ('Staff.staff_last_name', 'Bosco'), ('Staff.staff_first_name', 'Kenton'), ('Staff.staff_last_name', 'Champlin')]
matched values OrderedDict([(37, ('Problem_Log.problem_status_code', 'Reported')), (63, ('Problem_Status_Codes.problem_status_code', 'Reported')), (69, ('Problem_Status_Codes.problem_status_description', 'Reported')), (91, ('Staff.staff_first_name', 'Kenton')), (93, ('Staff.staff_first_name', 'Lacey')), (99, ('Staff.staff_last_name', 'Champlin')), (102, ('Staff.staff_last_name', 'Bosco'))])
--------------------
Picklist: Which products have problems reported by both the staff named Lacey Bosco and the staff named Kenton Champlin?, Problem_Log, problem_status_code, [Reported]
Picklist: Which products have problems reported by both the staff named Lacey Bosco and the staff named Kenton Champlin?, Problem_Status_Codes, problem_status_code, [Reported]
Picklist: Which products have problems reported by both the staff named Lacey Bosco and the staff named Kenton Champlin?, Problem_Status_Codes, problem_status_description, [Reported]
Picklist: Which products have problems reported by both the staff named Lacey Bosco and the staff named Kenton Champlin?, Staff, staff_first_name, [Kenton]
 60%|██████    | 5403/8943 [13:56<13:06,  4.50it/s] 61%|██████    | 5412/8943 [13:56<09:22,  6.27it/s] 61%|██████    | 5421/8943 [13:56<06:45,  8.68it/s] 61%|██████    | 5428/8943 [13:56<05:00, 11.71it/s] 61%|██████    | 5434/8943 [13:56<03:51, 15.18it/s] 61%|██████    | 5441/8943 [13:57<03:01, 19.27it/s] 61%|██████    | 5452/8943 [13:57<02:16, 25.51it/s] 61%|██████    | 5462/8943 [13:57<01:47, 32.42it/s] 61%|██████    | 5472/8943 [13:57<01:25, 40.46it/s] 61%|██████▏   | 5481/8943 [13:57<01:14, 46.43it/s]Picklist: Which products have problems reported by both the staff named Lacey Bosco and the staff named Kenton Champlin?, Staff, staff_first_name, [Lacey]
Picklist: Which products have problems reported by both the staff named Lacey Bosco and the staff named Kenton Champlin?, Staff, staff_last_name, [Champlin]
Picklist: Which products have problems reported by both the staff named Lacey Bosco and the staff named Kenton Champlin?, Staff, staff_last_name, [Bosco]
--------------------
text:  Which products have problems reported by both the staff named Lacey Bosco and the staff named Kenton Champlin?
sql:  SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = "Lacey" AND T3.staff_last_name = "Bosco" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = "Kenton" AND T3.staff_last_name = "Champlin"
ground truth values:  [('Staff.staff_first_name', 'Lacey'), ('Staff.staff_last_name', 'Bosco'), ('Staff.staff_first_name', 'Kenton'), ('Staff.staff_last_name', 'Champlin')]
matched values OrderedDict([(37, ('Problem_Log.problem_status_code', 'Reported')), (63, ('Problem_Status_Codes.problem_status_code', 'Reported')), (69, ('Problem_Status_Codes.problem_status_description', 'Reported')), (91, ('Staff.staff_first_name', 'Kenton')), (93, ('Staff.staff_first_name', 'Lacey')), (99, ('Staff.staff_last_name', 'Champlin')), (102, ('Staff.staff_last_name', 'Bosco'))])
--------------------
Picklist: Show minimum and maximum amount of memberships for all branches opened in 2011 or located at city London., branch, City, [London]
Picklist: What are the minimum and maximum membership amounts for all branches that either opened in 2011 or are located in London?, branch, City, [London]
Picklist: What is the sum of total pounds of purchase in year 2018 for all branches in London?, branch, City, [London]
Picklist: How many total pounds were purchased in the year 2018 at all London branches?, branch, City, [London]
Picklist: Find the name of branches where have some members whose hometown is in Louisville, Kentucky and some in Hiram, Georgia., member, Hometown, [Louisville, Kentucky]
Picklist: Find the name of branches where have some members whose hometown is in Louisville, Kentucky and some in Hiram, Georgia., member, Hometown, [Hiram, Georgia]
--------------------
text:  Find the name of branches where have some members whose hometown is in Louisville, Kentucky and some in Hiram, Georgia.
sql:  SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Hiram ,  Georgia'
ground truth values:  [('member.Hometown', 'Louisville ,  Kentucky'), ('member.Hometown', 'Hiram ,  Georgia')]
matched values OrderedDict([(14, ('member.Hometown', 'Louisville, Kentucky')), (18, ('member.Hometown', 'Hiram, Georgia'))])
--------------------
Picklist: What are the names of the branches that have some members with a hometown in Louisville, Kentucky and also those from Hiram, Goergia?, member, Hometown, [Louisville, Kentucky]
--------------------
text:  What are the names of the branches that have some members with a hometown in Louisville, Kentucky and also those from Hiram, Goergia?
sql:  SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Hiram ,  Georgia'
ground truth values:  [('member.Hometown', 'Louisville ,  Kentucky'), ('member.Hometown', 'Hiram ,  Georgia')]
matched values OrderedDict([(14, ('member.Hometown', 'Louisville, Kentucky'))])
--------------------
--------------------
text:  What are the majors of male (sex is M) students?
sql:  SELECT Major FROM STUDENT WHERE Sex  =  "M"
ground truth values:  [('Student.Sex', 'M')]
matched values OrderedDict()
--------------------
--------------------
text:  List the major of each male student.
sql:  SELECT Major FROM STUDENT WHERE Sex  =  "M"
ground truth values:  [('Student.Sex', 'M')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the average age of female (sex is F) students?
sql:  SELECT avg(Age) FROM STUDENT WHERE Sex  =  "F"
ground truth values:  [('Student.Sex', 'F')]
matched values OrderedDict()
--------------------
--------------------
text:  Find the average age of female students.
sql:  SELECT avg(Age) FROM STUDENT WHERE Sex  =  "F"
ground truth values:  [('Student.Sex', 'F')]
matched values OrderedDict()
--------------------
Picklist: Who are the advisors for students that live in a city with city code "BAL"?, Student, city_code, [BAL]
Picklist: Show the advisors of the students whose city of residence has city code "BAL"., Student, city_code, [BAL]
Picklist: What are the distinct secretary votes in the fall election cycle?, Voting_record, Election_Cycle, [Fall]
Picklist: Return all the distinct secretary votes made in the fall election cycle., Voting_record, Election_Cycle, [Fall]
Picklist: What are the distinct president votes on 08/30/2015?, Voting_record, Registration_Date, [08/30/2015]
Picklist: What are the distinct president votes on 08/30/2015?, Voting_record, Registration_Date, [08/30/2014]
--------------------
text:  What are the distinct president votes on 08/30/2015?
sql:  SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  "08/30/2015"
ground truth values:  [('Voting_record.Registration_Date', '08/30/2015')]
matched values OrderedDict([(33, ('Voting_record.Registration_Date', '08/30/2015')), (39, ('Voting_record.Registration_Date', '08/30/2014'))])
--------------------
Picklist: Show all the distinct president votes made on 08/30/2015., Voting_record, Registration_Date, [08/30/2015]
Picklist: Show all the distinct president votes made on 08/30/2015., Voting_record, Registration_Date, [08/30/2014]
--------------------
text:  Show all the distinct president votes made on 08/30/2015.
sql:  SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  "08/30/2015"
ground truth values:  [('Voting_record.Registration_Date', '08/30/2015')]
matched values OrderedDict([(33, ('Voting_record.Registration_Date', '08/30/2015')), (39, ('Voting_record.Registration_Date', '08/30/2014'))])
--------------------
Picklist: Find the distinct ages of students who have secretary votes in the fall election cycle., Voting_record, Election_Cycle, [Fall]
Picklist: What are the distinct ages of students who have secretary votes in the fall election cycle?, Voting_record, Election_Cycle, [Fall]
Picklist: Find the distinct Advisor of students who have treasurer votes in the spring election cycle., Voting_record, Election_Cycle, [Spring]
Picklist: Who served as an advisor for students who have treasurer votes in the spring election cycle?, Voting_record, Election_Cycle, [Spring]
--------------------
text:  Find the first and last names of all the female (sex is F) students who have president votes.
sql:  SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  "F"
ground truth values:  [('Student.Sex', 'F')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the first and last names of all the female students who have president votes?
sql:  SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  "F"
ground truth values:  [('Student.Sex', 'F')]
 61%|██████▏   | 5489/8943 [13:57<01:11, 48.00it/s] 61%|██████▏   | 5497/8943 [13:57<01:13, 47.08it/s] 62%|██████▏   | 5504/8943 [13:57<01:06, 52.08it/s] 62%|██████▏   | 5513/8943 [13:58<00:58, 59.06it/s] 62%|██████▏   | 5528/8943 [13:58<00:47, 71.48it/s]matched values OrderedDict()
--------------------
Picklist: How many male (sex is M) students have class senator votes in the fall election cycle?, Voting_record, Election_Cycle, [Fall]
--------------------
text:  How many male (sex is M) students have class senator votes in the fall election cycle?
sql:  SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  "M" AND T2.Election_Cycle  =  "Fall"
ground truth values:  [('Student.Sex', 'M'), ('Voting_record.Election_Cycle', 'Fall')]
matched values OrderedDict([(36, ('Voting_record.Election_Cycle', 'Fall'))])
--------------------
Picklist: Count the number of male students who had class senator votes in the fall election cycle., Voting_record, Election_Cycle, [Fall]
--------------------
text:  Count the number of male students who had class senator votes in the fall election cycle.
sql:  SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  "M" AND T2.Election_Cycle  =  "Fall"
ground truth values:  [('Student.Sex', 'M'), ('Voting_record.Election_Cycle', 'Fall')]
matched values OrderedDict([(36, ('Voting_record.Election_Cycle', 'Fall'))])
--------------------
Picklist: Find the number of students whose city code is NYC and who have class senator votes in the spring election cycle., Student, city_code, [NYC]
Picklist: Find the number of students whose city code is NYC and who have class senator votes in the spring election cycle., Voting_record, Election_Cycle, [Spring]
Picklist: Which students live in the city with code "NYC" and have class senator votes in the spring election cycle? Count the numbers., Student, city_code, [NYC]
Picklist: Which students live in the city with code "NYC" and have class senator votes in the spring election cycle? Count the numbers., Voting_record, Election_Cycle, [Spring]
Picklist: Find the average age of students who live in the city with code "NYC" and have secretary votes in the spring election cycle., Student, city_code, [NYC]
Picklist: Find the average age of students who live in the city with code "NYC" and have secretary votes in the spring election cycle., Voting_record, Election_Cycle, [Spring]
Picklist: What is the average age of students who have city code "NYC" and have secretary votes for the spring election cycle?, Student, city_code, [NYC]
Picklist: What is the average age of students who have city code "NYC" and have secretary votes for the spring election cycle?, Voting_record, Election_Cycle, [Spring]
Picklist: Find the average age of female (sex is F) students who have secretary votes in the spring election cycle., Voting_record, Election_Cycle, [Spring]
--------------------
text:  Find the average age of female (sex is F) students who have secretary votes in the spring election cycle.
sql:  SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  "F" AND T2.Election_Cycle  =  "Spring"
ground truth values:  [('Student.Sex', 'F'), ('Voting_record.Election_Cycle', 'Spring')]
matched values OrderedDict([(36, ('Voting_record.Election_Cycle', 'Spring'))])
--------------------
Picklist: What is the average age of the female students with secretary votes in the spring election cycle?, Voting_record, Election_Cycle, [Spring]
--------------------
text:  What is the average age of the female students with secretary votes in the spring election cycle?
sql:  SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  "F" AND T2.Election_Cycle  =  "Spring"
ground truth values:  [('Student.Sex', 'F'), ('Voting_record.Election_Cycle', 'Spring')]
matched values OrderedDict([(36, ('Voting_record.Election_Cycle', 'Spring'))])
--------------------
Picklist: Find the distinct first names of all the students who have vice president votes and whose city code is not PIT., Student, city_code, [PIT]
Picklist: What are the distinct first names of the students who have vice president votes and reside in a city whose city code is not PIT?, Student, city_code, [PIT]
--------------------
text:  What is the most common major among female (sex is F) students?
sql:  SELECT Major FROM STUDENT WHERE Sex  =  "F" GROUP BY major ORDER BY count(*) DESC LIMIT 1
ground truth values:  [('Student.Sex', 'F')]
matched values OrderedDict()
--------------------
--------------------
text:  Find the major that is studied by the most female students.
sql:  SELECT Major FROM STUDENT WHERE Sex  =  "F" GROUP BY major ORDER BY count(*) DESC LIMIT 1
ground truth values:  [('Student.Sex', 'F')]
matched values OrderedDict()
--------------------
Picklist: What are the names of products with category "Spices"?, Ref_Product_Categories, product_category_code, [Spices]
Picklist: What are the names of products with category "Spices"?, Ref_Product_Categories, product_category_description, [Spices]
Picklist: What are the names of products with category "Spices"?, Products, product_category_code, [Spices]
--------------------
text:  What are the names of products with category "Spices"?
sql:  SELECT product_name FROM products WHERE product_category_code  =  "Spices"
ground truth values:  [('Products.product_category_code', 'Spices')]
matched values OrderedDict([(31, ('Ref_Product_Categories.product_category_code', 'Spices')), (37, ('Ref_Product_Categories.product_category_description', 'Spices')), (75, ('Products.product_category_code', 'Spices'))])
--------------------
Picklist: Return the names of products in the category 'Spices'., Ref_Product_Categories, product_category_code, [Spices]
Picklist: Return the names of products in the category 'Spices'., Ref_Product_Categories, product_category_description, [Spices]
Picklist: Return the names of products in the category 'Spices'., Products, product_category_code, [Spices]
--------------------
text:  Return the names of products in the category 'Spices'.
sql:  SELECT product_name FROM products WHERE product_category_code  =  "Spices"
ground truth values:  [('Products.product_category_code', 'Spices')]
matched values OrderedDict([(31, ('Ref_Product_Categories.product_category_code', 'Spices')), (37, ('Ref_Product_Categories.product_category_description', 'Spices')), (75, ('Products.product_category_code', 'Spices'))])
--------------------
Picklist: List the names, color descriptions and product descriptions of products with category "Herbs"., Ref_Product_Categories, product_category_code, [Herbs]
Picklist: List the names, color descriptions and product descriptions of products with category "Herbs"., Ref_Product_Categories, product_category_description, [Herbs]
Picklist: List the names, color descriptions and product descriptions of products with category "Herbs"., Products, product_category_code, [Herbs]
--------------------
text:  List the names, color descriptions and product descriptions of products with category "Herbs".
sql:  SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  "Herbs"
ground truth values:  [('Products.product_category_code', 'Herbs')]
matched values OrderedDict([(31, ('Ref_Product_Categories.product_category_code', 'Herbs')), (37, ('Ref_Product_Categories.product_category_description', 'Herbs')), (75, ('Products.product_category_code', 'Herbs'))])
--------------------
Picklist: What are the names, color descriptions, and product descriptions for products in the 'Herbs' category?, Ref_Product_Categories, product_category_code, [Herbs]
Picklist: What are the names, color descriptions, and product descriptions for products in the 'Herbs' category?, Ref_Product_Categories, product_category_description, [Herbs]
Picklist: What are the names, color descriptions, and product descriptions for products in the 'Herbs' category?, Products, product_category_code, [Herbs]
--------------------
text:  What are the names, color descriptions, and product descriptions for products in the 'Herbs' category?
sql:   62%|██████▏   | 5538/8943 [13:58<00:48, 69.87it/s] 62%|██████▏   | 5547/8943 [13:58<00:49, 68.12it/s] 62%|██████▏   | 5555/8943 [13:58<00:55, 60.68it/s] 62%|██████▏   | 5562/8943 [13:58<01:01, 54.59it/s]SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  "Herbs"
ground truth values:  [('Products.product_category_code', 'Herbs')]
matched values OrderedDict([(31, ('Ref_Product_Categories.product_category_code', 'Herbs')), (37, ('Ref_Product_Categories.product_category_description', 'Herbs')), (75, ('Products.product_category_code', 'Herbs'))])
--------------------
Picklist: How many products are there under the category "Seeds"?, Ref_Product_Categories, product_category_code, [Seeds]
Picklist: How many products are there under the category "Seeds"?, Ref_Product_Categories, product_category_description, [Seeds]
Picklist: How many products are there under the category "Seeds"?, Products, product_category_code, [Seeds]
--------------------
text:  How many products are there under the category "Seeds"?
sql:  SELECT count(*) FROM products WHERE product_category_code  =  "Seeds"
ground truth values:  [('Products.product_category_code', 'Seeds')]
matched values OrderedDict([(31, ('Ref_Product_Categories.product_category_code', 'Seeds')), (37, ('Ref_Product_Categories.product_category_description', 'Seeds')), (75, ('Products.product_category_code', 'Seeds'))])
--------------------
Picklist: Count the number of products in the category 'Seeds'., Ref_Product_Categories, product_category_code, [Seeds]
Picklist: Count the number of products in the category 'Seeds'., Ref_Product_Categories, product_category_description, [Seeds]
Picklist: Count the number of products in the category 'Seeds'., Products, product_category_code, [Seeds]
--------------------
text:  Count the number of products in the category 'Seeds'.
sql:  SELECT count(*) FROM products WHERE product_category_code  =  "Seeds"
ground truth values:  [('Products.product_category_code', 'Seeds')]
matched values OrderedDict([(31, ('Ref_Product_Categories.product_category_code', 'Seeds')), (37, ('Ref_Product_Categories.product_category_description', 'Seeds')), (75, ('Products.product_category_code', 'Seeds'))])
--------------------
Picklist: Find the number of products with category "Spices" and typically sold above 1000., Ref_Product_Categories, product_category_code, [Spices]
Picklist: Find the number of products with category "Spices" and typically sold above 1000., Ref_Product_Categories, product_category_description, [Spices]
Picklist: Find the number of products with category "Spices" and typically sold above 1000., Products, product_category_code, [Spices]
--------------------
text:  Find the number of products with category "Spices" and typically sold above 1000.
sql:  SELECT count(*) FROM products WHERE product_category_code  =  "Spices" AND typical_buying_price  >  1000
ground truth values:  [('Products.product_category_code', 'Spices')]
matched values OrderedDict([(31, ('Ref_Product_Categories.product_category_code', 'Spices')), (37, ('Ref_Product_Categories.product_category_description', 'Spices')), (75, ('Products.product_category_code', 'Spices'))])
--------------------
Picklist: How many products are in the 'Spices' category and have a typical price of over 1000?, Ref_Product_Categories, product_category_code, [Spices]
Picklist: How many products are in the 'Spices' category and have a typical price of over 1000?, Ref_Product_Categories, product_category_description, [Spices]
Picklist: How many products are in the 'Spices' category and have a typical price of over 1000?, Products, product_category_code, [Spices]
--------------------
text:  How many products are in the 'Spices' category and have a typical price of over 1000?
sql:  SELECT count(*) FROM products WHERE product_category_code  =  "Spices" AND typical_buying_price  >  1000
ground truth values:  [('Products.product_category_code', 'Spices')]
matched values OrderedDict([(31, ('Ref_Product_Categories.product_category_code', 'Spices')), (37, ('Ref_Product_Categories.product_category_description', 'Spices')), (75, ('Products.product_category_code', 'Spices'))])
--------------------
Picklist: What is the category and typical buying price  of the product with name "cumin"?, Products, product_name, [cumin]
Picklist: Return the category code and typical price of 'cumin'., Products, product_name, [cumin]
Picklist: Which category does the product named "flax" belong to?, Products, product_name, [flax]
Picklist: What is the code of the category that the product with the name 'flax' belongs to?, Products, product_name, [flax]
Picklist: What is the name of the product with the color description 'yellow'?, Ref_Colors, color_description, [yellow]
Picklist: Give the name of the products that have a color description 'yellow'., Ref_Colors, color_description, [yellow]
Picklist: What is the color description of the product with name "catnip"?, Products, product_name, [catnip]
Picklist: Give the color description for the product 'catnip'., Products, product_name, [catnip]
Picklist: What is the color code and description of the product named "chervil"?, Products, product_name, [chervil]
Picklist: Return the color code and description for the product with the name 'chervil'., Products, product_name, [chervil]
Picklist: List all the product names with the color description "white"., Ref_Colors, color_description, [white]
Picklist: What are the names of products with 'white' as their color description?, Ref_Colors, color_description, [white]
Picklist: What are the name and typical buying and selling prices of the products that have color described as "yellow"?, Ref_Colors, color_description, [yellow]
Picklist: Return the names and typical buying and selling prices for products that have 'yellow' as their color description., Ref_Colors, color_description, [yellow]
Picklist: How many characteristics does the product named "sesame" have?, Products, product_name, [sesame]
Picklist: Count the number of characteristics the product 'sesame' has., Products, product_name, [sesame]
Picklist: How many distinct characteristic names does the product "cumin" have?, Products, product_name, [cumin]
--------------------
text:  How many distinct characteristic names does the product "cumin" have?
sql:  SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  "sesame"
ground truth values:  [('Products.product_name', 'sesame')]
matched values OrderedDict([(74, ('Products.product_name', 'cumin'))])
--------------------
Picklist: Count the number of different characteristic names the product 'cumin' has., Products, product_name, [cumin]
--------------------
text:  Count the number of different characteristic names the product 'cumin' has.
sql:  SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  "sesame"
ground truth values:  [('Products.product_name', 'sesame')]
matched values OrderedDict([(74, ('Products.product_name', 'cumin'))])
--------------------
Picklist: What are all the characteristic names of product "sesame"?, Products, product_name, [sesame]
Picklist: Return the characteristic names of the 'sesame' product., Products, product_name, [sesame]
Picklist: List all the characteristic names and data types of product "cumin"., Products, product_name, [cumin]
Picklist: What are the names and data types of the characteristics of the 'cumin' product?, Products, product_name, [cumin]
Picklist: List all characteristics of product named "sesame" with type code "Grade"., Ref_Characteristic_Types, characteristic_type_code, [Grade]
Picklist: List all characteristics of product named "sesame" with type code "Grade"., Ref_Characteristic_Types, characteristic_type_description, [Grade]
Picklist: List all characteristics of product named "sesame" with type code "Grade"., Characteristics, characteristic_type_code, [Grade]
 62%|██████▏   | 5569/8943 [13:58<01:08, 48.93it/s] 62%|██████▏   | 5575/8943 [13:59<01:14, 45.24it/s] 62%|██████▏   | 5581/8943 [13:59<01:14, 44.99it/s]Picklist: List all characteristics of product named "sesame" with type code "Grade"., Products, product_name, [sesame]
--------------------
text:  List all characteristics of product named "sesame" with type code "Grade".
sql:  SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  "sesame" AND t3.characteristic_type_code  =  "Grade"
ground truth values:  [('Products.product_name', 'sesame'), ('Characteristics.characteristic_type_code', 'Grade')]
matched values OrderedDict([(10, ('Ref_Characteristic_Types.characteristic_type_code', 'Grade')), (16, ('Ref_Characteristic_Types.characteristic_type_description', 'Grade')), (52, ('Characteristics.characteristic_type_code', 'Grade')), (80, ('Products.product_name', 'sesame'))])
--------------------
Picklist: What are the names of the characteristics of the product 'sesame' that have the characteristic type code 'Grade'?, Ref_Characteristic_Types, characteristic_type_code, [Grade]
Picklist: What are the names of the characteristics of the product 'sesame' that have the characteristic type code 'Grade'?, Ref_Characteristic_Types, characteristic_type_description, [Grade]
Picklist: What are the names of the characteristics of the product 'sesame' that have the characteristic type code 'Grade'?, Characteristics, characteristic_type_code, [Grade]
Picklist: What are the names of the characteristics of the product 'sesame' that have the characteristic type code 'Grade'?, Products, product_name, [sesame]
--------------------
text:  What are the names of the characteristics of the product 'sesame' that have the characteristic type code 'Grade'?
sql:  SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  "sesame" AND t3.characteristic_type_code  =  "Grade"
ground truth values:  [('Products.product_name', 'sesame'), ('Characteristics.characteristic_type_code', 'Grade')]
matched values OrderedDict([(10, ('Ref_Characteristic_Types.characteristic_type_code', 'Grade')), (16, ('Ref_Characteristic_Types.characteristic_type_description', 'Grade')), (52, ('Characteristics.characteristic_type_code', 'Grade')), (80, ('Products.product_name', 'sesame'))])
--------------------
Picklist: How many characteristics does the product named "laurel" have?, Products, product_name, [laurel]
Picklist: Count the number of characteristics of the product named 'laurel'., Products, product_name, [laurel]
Picklist: Find the number of characteristics that the product "flax" has., Products, product_name, [flax]
Picklist: Count the number of characteristics of the 'flax' product., Products, product_name, [flax]
Picklist: Find the name of the products that have the color description "red" and have the characteristic name "fast"., Ref_Colors, color_description, [red]
Picklist: Find the name of the products that have the color description "red" and have the characteristic name "fast"., Characteristics, characteristic_name, [fast]
Picklist: What are the names of the products that have a color description of 'red' and the 'fast' characteristic?, Ref_Colors, color_description, [red]
Picklist: What are the names of the products that have a color description of 'red' and the 'fast' characteristic?, Characteristics, characteristic_name, [fast]
Picklist: How many products have the characteristic named "hot"?, Characteristics, characteristic_name, [hot]
Picklist: Count the number of products with the 'hot' charactersitic., Characteristics, characteristic_name, [hot]
Picklist: List the all the distinct names of the products with the characteristic name 'warm'., Characteristics, characteristic_name, [warm]
Picklist: What are the different product names for products that have the 'warm' characteristic:?, Characteristics, characteristic_name, [warm]
Picklist: Find the number of the products that have their color described as "red" and have a characteristic named "slow"., Ref_Colors, color_description, [red]
Picklist: Find the number of the products that have their color described as "red" and have a characteristic named "slow"., Characteristics, characteristic_name, [slow]
Picklist: How many products have the color description 'red' and the characteristic name 'slow'?, Ref_Colors, color_description, [red]
Picklist: How many products have the color description 'red' and the characteristic name 'slow'?, Characteristics, characteristic_name, [slow]
Picklist: Count the products that have the color description "white" or have the characteristic name "hot"., Ref_Colors, color_description, [white]
Picklist: Count the products that have the color description "white" or have the characteristic name "hot"., Characteristics, characteristic_name, [hot]
Picklist: How many products have their color described as 'white' or have a characteristic with the name 'hot'?, Ref_Colors, color_description, [white]
Picklist: How many products have their color described as 'white' or have a characteristic with the name 'hot'?, Characteristics, characteristic_name, [hot]
Picklist: What is the unit of measuerment of the product category code "Herbs"?, Ref_Product_Categories, product_category_code, [Herbs]
Picklist: What is the unit of measuerment of the product category code "Herbs"?, Ref_Product_Categories, product_category_description, [Herbs]
Picklist: What is the unit of measuerment of the product category code "Herbs"?, Products, product_category_code, [Herbs]
--------------------
text:  What is the unit of measuerment of the product category code "Herbs"?
sql:  SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  "Herbs"
ground truth values:  [('Ref_Product_Categories.product_category_code', 'Herbs')]
matched values OrderedDict([(31, ('Ref_Product_Categories.product_category_code', 'Herbs')), (37, ('Ref_Product_Categories.product_category_description', 'Herbs')), (75, ('Products.product_category_code', 'Herbs'))])
--------------------
Picklist: Return the unit of measure for 'Herb' products., Ref_Product_Categories, product_category_code, [Herbs]
Picklist: Return the unit of measure for 'Herb' products., Ref_Product_Categories, product_category_description, [Herbs]
Picklist: Return the unit of measure for 'Herb' products., Products, product_category_code, [Herbs]
--------------------
text:  Return the unit of measure for 'Herb' products.
sql:  SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  "Herbs"
ground truth values:  [('Ref_Product_Categories.product_category_code', 'Herbs')]
matched values OrderedDict([(31, ('Ref_Product_Categories.product_category_code', 'Herbs')), (37, ('Ref_Product_Categories.product_category_description', 'Herbs')), (75, ('Products.product_category_code', 'Herbs'))])
--------------------
Picklist: Find the product category description of the product category with code "Spices"., Ref_Product_Categories, product_category_code, [Spices]
Picklist: Find the product category description of the product category with code "Spices"., Ref_Product_Categories, product_category_description, [Spices]
Picklist: Find the product category description of the product category with code "Spices"., Products, product_category_code, [Spices]
--------------------
text:  Find the product category description of the product category with code "Spices".
sql:  SELECT product_category_description FROM ref_product_categories WHERE product_category_code  =  "Spices"
ground truth values:  [('Ref_Product_Categories.product_category_code', 'Spices')]
matched values OrderedDict([(31, ('Ref_Product_Categories.product_category_code', 'Spices')), (37, ('Ref_Product_Categories.product_category_description', 'Spices')), (75, ('Products.product_category_code', 'Spices'))])
--------------------
Picklist: What is the description of the product category with the code 'Spices'?, Ref_Product_Categories, product_category_code, [Spices]
 62%|██████▏   | 5588/8943 [13:59<01:09, 48.59it/s] 63%|██████▎   | 5594/8943 [13:59<01:09, 48.18it/s] 63%|██████▎   | 5600/8943 [13:59<01:11, 46.48it/s] 63%|██████▎   | 5610/8943 [13:59<01:00, 55.08it/s] 63%|██████▎   | 5619/8943 [13:59<00:54, 61.16it/s] 63%|██████▎   | 5626/8943 [13:59<00:54, 60.75it/s] 63%|██████▎   | 5633/8943 [14:00<00:53, 61.49it/s] 63%|██████▎   | 5643/8943 [14:00<00:49, 67.31it/s] 63%|██████▎   | 5651/8943 [14:00<00:46, 70.28it/s] 63%|██████▎   | 5659/8943 [14:00<00:47, 68.92it/s] 63%|██████▎   | 5667/8943 [14:00<00:55, 58.77it/s]Picklist: What is the description of the product category with the code 'Spices'?, Ref_Product_Categories, product_category_description, [Spices]
Picklist: What is the description of the product category with the code 'Spices'?, Products, product_category_code, [Spices]
--------------------
text:  What is the description of the product category with the code 'Spices'?
sql:  SELECT product_category_description FROM ref_product_categories WHERE product_category_code  =  "Spices"
ground truth values:  [('Ref_Product_Categories.product_category_code', 'Spices')]
matched values OrderedDict([(31, ('Ref_Product_Categories.product_category_code', 'Spices')), (37, ('Ref_Product_Categories.product_category_description', 'Spices')), (75, ('Products.product_category_code', 'Spices'))])
--------------------
Picklist: What is the product category description and unit of measurement of category "Herbs"?, Ref_Product_Categories, product_category_code, [Herbs]
Picklist: What is the product category description and unit of measurement of category "Herbs"?, Ref_Product_Categories, product_category_description, [Herbs]
Picklist: What is the product category description and unit of measurement of category "Herbs"?, Products, product_category_code, [Herbs]
--------------------
text:  What is the product category description and unit of measurement of category "Herbs"?
sql:  SELECT product_category_description ,  unit_of_measure FROM ref_product_categories WHERE product_category_code  =  "Herbs"
ground truth values:  [('Ref_Product_Categories.product_category_code', 'Herbs')]
matched values OrderedDict([(31, ('Ref_Product_Categories.product_category_code', 'Herbs')), (37, ('Ref_Product_Categories.product_category_description', 'Herbs')), (75, ('Products.product_category_code', 'Herbs'))])
--------------------
Picklist: Return the description and unit of measurement for products in the 'Herbs' category., Ref_Product_Categories, product_category_code, [Herbs]
Picklist: Return the description and unit of measurement for products in the 'Herbs' category., Ref_Product_Categories, product_category_description, [Herbs]
Picklist: Return the description and unit of measurement for products in the 'Herbs' category., Products, product_category_code, [Herbs]
--------------------
text:  Return the description and unit of measurement for products in the 'Herbs' category.
sql:  SELECT product_category_description ,  unit_of_measure FROM ref_product_categories WHERE product_category_code  =  "Herbs"
ground truth values:  [('Ref_Product_Categories.product_category_code', 'Herbs')]
matched values OrderedDict([(31, ('Ref_Product_Categories.product_category_code', 'Herbs')), (37, ('Ref_Product_Categories.product_category_description', 'Herbs')), (75, ('Products.product_category_code', 'Herbs'))])
--------------------
Picklist: What is the unit of measurement of product named "cumin"?, Products, product_name, [cumin]
Picklist: Give the unit of measure for the product with the name 'cumin'., Products, product_name, [cumin]
Picklist: Find the unit of measurement and product category code of product named "chervil"., Products, product_name, [chervil]
Picklist: What are the unit of measure and category code for the 'chervil' product?, Products, product_name, [chervil]
Picklist: Find the product names that are colored 'white' but do not have unit of measurement "Handful"., Ref_Colors, color_description, [white]
Picklist: Find the product names that are colored 'white' but do not have unit of measurement "Handful"., Ref_Product_Categories, unit_of_measure, [Handful             ]
--------------------
text:  Find the product names that are colored 'white' but do not have unit of measurement "Handful".
sql:  SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  "white" AND t2.unit_of_measure != "Handful"
ground truth values:  [('Ref_Colors.color_description', 'white'), ('Ref_Product_Categories.unit_of_measure', 'Handful')]
matched values OrderedDict([(23, ('Ref_Colors.color_description', 'white')), (41, ('Ref_Product_Categories.unit_of_measure', 'Handful             '))])
--------------------
Picklist: What are the names of products that are not 'white' in color and are not measured by the unit 'Handful'?, Ref_Colors, color_description, [white]
Picklist: What are the names of products that are not 'white' in color and are not measured by the unit 'Handful'?, Ref_Product_Categories, unit_of_measure, [Handful             ]
--------------------
text:  What are the names of products that are not 'white' in color and are not measured by the unit 'Handful'?
sql:  SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  "white" AND t2.unit_of_measure != "Handful"
ground truth values:  [('Ref_Colors.color_description', 'white'), ('Ref_Product_Categories.unit_of_measure', 'Handful')]
matched values OrderedDict([(23, ('Ref_Colors.color_description', 'white')), (41, ('Ref_Product_Categories.unit_of_measure', 'Handful             '))])
--------------------
Picklist: How many stadiums are not in country "Russia"?, stadium, Country, [Russia]
Picklist: Find all 200 meter and 300 meter results of swimmers with nationality "Australia"., swimmer, Nationality, [Australia]
Picklist: Find the names of swimmers who has a result of "win"., record, Result, [Win]
Picklist: Find the name and capacity of the stadium where the event named "World Junior" happened., event, Name, [World Junior]
Picklist: Find the name and nationality of the swimmer who has won (i.e., has a result of "win") more than 1 time., record, Result, [Win]
Picklist: Find the names of the swimmers who have both "win" and "loss" results in the record., record, Result, [Loss]
Picklist: Find the names of the swimmers who have both "win" and "loss" results in the record., record, Result, [Win]
Picklist: Find the names of stadiums that some Australian swimmers have been to., swimmer, Nationality, [Australia]
Picklist: What is the maximum level of managers in countries that are not "Australia"?, manager, Country, [Australia]
--------------------
text:  What is the maximum level of managers in countries that are not "Australia"?
sql:  SELECT max(LEVEL) FROM manager WHERE Country != "Australia	"
ground truth values:  [('manager.Country', 'Australia      ')]
matched values OrderedDict([(48, ('manager.Country', 'Australia'))])
--------------------
Picklist: Show the builder of railways associated with the trains named "Andaman Exp"., train, Name, [Andaman Exp]
Picklist: How many addresses are there in country USA?, Addresses, country, [USA]
Picklist: Show the names of customers who have both an order in completed status and an order in part status., Customer_Orders, order_status_code, [Completed]
Picklist: Show the names of customers who have both an order in completed status and an order in part status., Customer_Orders, order_status_code, [Part]
Picklist: Show the names of customers who use Credit Card payment method and have more than 2 orders., Customers, payment_method_code, [Credit Card]
--------------------
text:  Find the name of dorms only for female (F gender).
sql:  SELECT dorm_name FROM dorm WHERE gender  =  'F'
ground truth values:  [('Dorm.gender', 'F')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the names of the all-female dorms?
sql:  SELECT dorm_name FROM dorm WHERE gender  =  'F'
ground truth values:  [('Dorm.gender', 'F')]
matched values OrderedDict()
--------------------
--------------------
text:  How many female students (sex is F) whose age is below 25?
sql:  SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25
ground truth values:  [('Student.Sex', 'F')]
matched values OrderedDict()
--------------------
--------------------
text:  How many girl students who are younger than 25?
sql:  SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25
 63%|██████▎   | 5675/8943 [14:00<00:51, 63.07it/s] 64%|██████▎   | 5688/8943 [14:00<00:44, 73.77it/s] 64%|██████▎   | 5699/8943 [14:00<00:40, 79.29it/s] 64%|██████▍   | 5708/8943 [14:01<00:53, 60.78it/s] 64%|██████▍   | 5716/8943 [14:05<09:15,  5.80it/s] 64%|██████▍   | 5723/8943 [14:05<06:42,  8.00it/s] 64%|██████▍   | 5733/8943 [14:05<04:52, 10.98it/s] 64%|██████▍   | 5740/8943 [14:05<03:41, 14.45it/s] 64%|██████▍   | 5747/8943 [14:05<02:55, 18.22it/s]ground truth values:  [('Student.Sex', 'F')]
matched values OrderedDict()
--------------------
Picklist: Find the first name of students living in city PHL whose age is between 20 and 25., Student, city_code, [PHL]
Picklist: What is the first name of the students who are in age 20 to 25 and living in PHL city?, Student, city_code, [PHL]
--------------------
text:  Find the average and total capacity of dorms for the students with gender X.
sql:  SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'
ground truth values:  [('Dorm.gender', 'X')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the average and total capacity for all dorms who are of gender X?
sql:  SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'
ground truth values:  [('Dorm.gender', 'X')]
matched values OrderedDict()
--------------------
Picklist: Find the name of dorms which have both TV Lounge and Study Room as amenities., Dorm_amenity, amenity_name, [Study Room]
Picklist: Find the name of dorms which have both TV Lounge and Study Room as amenities., Dorm_amenity, amenity_name, [TV Lounge]
Picklist: What is the name of the dorm with both a TV Lounge and Study Room listed as amenities?, Dorm_amenity, amenity_name, [Study Room]
Picklist: What is the name of the dorm with both a TV Lounge and Study Room listed as amenities?, Dorm_amenity, amenity_name, [TV Lounge]
Picklist: Find the name of dorms which have TV Lounge but no Study Room as amenity., Dorm_amenity, amenity_name, [Study Room]
Picklist: Find the name of dorms which have TV Lounge but no Study Room as amenity., Dorm_amenity, amenity_name, [TV Lounge]
Picklist: What is the name of each dorm that has a TV Lounge but no study rooms?, Dorm_amenity, amenity_name, [TV Lounge]
--------------------
text:  What is the name of each dorm that has a TV Lounge but no study rooms?
sql:  SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'
ground truth values:  [('Dorm_amenity.amenity_name', 'TV Lounge'), ('Dorm_amenity.amenity_name', 'Study Room')]
matched values OrderedDict([(49, ('Dorm_amenity.amenity_name', 'TV Lounge'))])
--------------------
Picklist: Find the last name of students who is either female (sex is F) and living in the city of code BAL or male (sex is M) and in age of below 20., Student, city_code, [BAL]
--------------------
text:  Find the last name of students who is either female (sex is F) and living in the city of code BAL or male (sex is M) and in age of below 20.
sql:  SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20
ground truth values:  [('Student.Sex', 'F'), ('Student.city_code', 'BAL'), ('Student.Sex', 'M')]
matched values OrderedDict([(24, ('Student.city_code', 'BAL'))])
--------------------
Picklist: What is the last name of every student who is either female or living in a city with the code BAL or male and under 20?, Student, city_code, [BAL]
--------------------
text:  What is the last name of every student who is either female or living in a city with the code BAL or male and under 20?
sql:  SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20
ground truth values:  [('Student.Sex', 'F'), ('Student.city_code', 'BAL'), ('Student.Sex', 'M')]
matched values OrderedDict([(24, ('Student.city_code', 'BAL'))])
--------------------
Picklist: List the first and last name of students who are not living in the city with code HKG, and sorted the results by their ages., Student, city_code, [HKG]
Picklist: What are the first and last names of all students who are not living in the city HKG and order the results by age?, Student, city_code, [HKG]
Picklist: List name of all amenities which Anonymous Donor Hall has, and sort the results in alphabetic order., Dorm, dorm_name, [Anonymous Donor Hall]
Picklist: What are the amenities in alphabetical order that Anonymous Donor Hall has?, Dorm, dorm_name, [Anonymous Donor Hall]
--------------------
text:  Find the average age and number of male students (with sex M) from each city.
sql:  SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code
ground truth values:  [('Student.Sex', 'M')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the average age and how many male students are there in each city?
sql:  SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code
ground truth values:  [('Student.Sex', 'M')]
matched values OrderedDict()
--------------------
Picklist: Find the first name of students who are living in the Smith Hall., Student, LName, [Smith]
Picklist: Find the first name of students who are living in the Smith Hall., Dorm, dorm_name, [Smith Hall]
--------------------
text:  Find the first name of students who are living in the Smith Hall.
sql:  SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'
ground truth values:  [('Dorm.dorm_name', 'Smith Hall')]
matched values OrderedDict([(10, ('Student.LName', 'Smith')), (34, ('Dorm.dorm_name', 'Smith Hall'))])
--------------------
Picklist: What are the first names of all students in Smith Hall?, Student, LName, [Smith]
Picklist: What are the first names of all students in Smith Hall?, Dorm, dorm_name, [Smith Hall]
--------------------
text:  What are the first names of all students in Smith Hall?
sql:  SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'
ground truth values:  [('Dorm.dorm_name', 'Smith Hall')]
matched values OrderedDict([(10, ('Student.LName', 'Smith')), (34, ('Dorm.dorm_name', 'Smith Hall'))])
--------------------
--------------------
text:  Find the total number of students living in the male dorm (with gender M).
sql:  SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'
ground truth values:  [('Dorm.gender', 'M')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the total number of students who are living in a male dorm?
sql:  SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'
ground truth values:  [('Dorm.gender', 'M')]
matched values OrderedDict()
--------------------
Picklist: Find the number of female students (with F sex) living in Smith Hall, Student, LName, [Smith]
Picklist: Find the number of female students (with F sex) living in Smith Hall, Dorm, dorm_name, [Smith Hall]
--------------------
text:  Find the number of female students (with F sex) living in Smith Hall
sql:  SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'
ground truth values:  [('Dorm.dorm_name', 'Smith Hall'), ('Student.Sex', 'F')]
matched values OrderedDict([(10, ('Student.LName', 'Smith')), (34, ('Dorm.dorm_name', 'Smith Hall'))])
--------------------
Picklist: How many female students live in Smith Hall?, Student, LName, [Smith]
Picklist: How many female students live in Smith Hall?, Dorm, dorm_name, [Smith Hall]
--------------------
text:  How many female students live in Smith Hall?
sql:  SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'
ground truth values:  [('Dorm.dorm_name', 'Smith Hall'), ('Student.Sex', 'F')]
matched values  64%|██████▍   | 5753/8943 [14:06<02:21, 22.56it/s] 64%|██████▍   | 5759/8943 [14:06<02:01, 26.11it/s] 64%|██████▍   | 5765/8943 [14:06<01:50, 28.80it/s] 65%|██████▍   | 5770/8943 [14:06<01:36, 32.72it/s] 65%|██████▍   | 5777/8943 [14:06<01:23, 37.84it/s] 65%|██████▍   | 5783/8943 [14:06<01:16, 41.08it/s] 65%|██████▍   | 5791/8943 [14:06<01:06, 47.52it/s] 65%|██████▍   | 5798/8943 [14:06<01:01, 51.24it/s] 65%|██████▍   | 5806/8943 [14:06<00:55, 56.94it/s] 65%|██████▌   | 5813/8943 [14:07<00:53, 58.11it/s] 65%|██████▌   | 5825/8943 [14:07<00:45, 68.27it/s] 65%|██████▌   | 5833/8943 [14:07<00:43, 71.02it/s] 65%|██████▌   | 5841/8943 [14:07<00:44, 69.67it/s] 65%|██████▌   | 5853/8943 [14:07<00:38, 79.35it/s]OrderedDict([(10, ('Student.LName', 'Smith')), (34, ('Dorm.dorm_name', 'Smith Hall'))])
--------------------
Picklist: Find the name of amenities Smith Hall dorm have., Student, LName, [Smith]
Picklist: Find the name of amenities Smith Hall dorm have., Dorm, dorm_name, [Smith Hall]
--------------------
text:  Find the name of amenities Smith Hall dorm have.
sql:  SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall'
ground truth values:  [('Dorm.dorm_name', 'Smith Hall')]
matched values OrderedDict([(10, ('Student.LName', 'Smith')), (34, ('Dorm.dorm_name', 'Smith Hall'))])
--------------------
Picklist: What are the names of the amenities that Smith Hall has?, Student, LName, [Smith]
Picklist: What are the names of the amenities that Smith Hall has?, Dorm, dorm_name, [Smith Hall]
--------------------
text:  What are the names of the amenities that Smith Hall has?
sql:  SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall'
ground truth values:  [('Dorm.dorm_name', 'Smith Hall')]
matched values OrderedDict([(10, ('Student.LName', 'Smith')), (34, ('Dorm.dorm_name', 'Smith Hall'))])
--------------------
Picklist: Find the name of amenities Smith Hall dorm have. ordered the results by amenity names., Student, LName, [Smith]
Picklist: Find the name of amenities Smith Hall dorm have. ordered the results by amenity names., Dorm, dorm_name, [Smith Hall]
--------------------
text:  Find the name of amenities Smith Hall dorm have. ordered the results by amenity names.
sql:  SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name
ground truth values:  [('Dorm.dorm_name', 'Smith Hall')]
matched values OrderedDict([(10, ('Student.LName', 'Smith')), (34, ('Dorm.dorm_name', 'Smith Hall'))])
--------------------
Picklist: What amenities does Smith Hall have in alphabetical order?, Student, LName, [Smith]
Picklist: What amenities does Smith Hall have in alphabetical order?, Dorm, dorm_name, [Smith Hall]
--------------------
text:  What amenities does Smith Hall have in alphabetical order?
sql:  SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name
ground truth values:  [('Dorm.dorm_name', 'Smith Hall')]
matched values OrderedDict([(10, ('Student.LName', 'Smith')), (34, ('Dorm.dorm_name', 'Smith Hall'))])
--------------------
Picklist: Find the name of dorms that do not have amenity TV Lounge., Dorm_amenity, amenity_name, [TV Lounge]
Picklist: What are the names of the dorm that does not have a TV Lounge?, Dorm_amenity, amenity_name, [TV Lounge]
Picklist: Find the first and last name of students who are living in the dorms that have amenity TV Lounge., Dorm_amenity, amenity_name, [TV Lounge]
Picklist: What are the first and last names of all students who are living in a dorm with a TV Lounge?, Dorm_amenity, amenity_name, [TV Lounge]
Picklist: Find the first name and age of students who are living in the dorms that do not have amenity TV Lounge., Dorm_amenity, amenity_name, [TV Lounge]
Picklist: What is the first name and age of every student who lives in a dorm with a TV Lounge?, Dorm_amenity, amenity_name, [TV Lounge]
Picklist: Find the name of amenities of the dorm where the student with last name Smith is living in., Student, LName, [Smith]
Picklist: What are the amenities in the dorm that a student who has the last name of Smith lives in?, Student, LName, [Smith]
Picklist: Which city has the least number of customers whose type code is "Good Credit Rating"?, Customers, customer_type_code, [Good Credit Rating]
Picklist: Return the city with the customer type code "Good Credit Rating" that had the fewest customers., Customers, customer_type_code, [Good Credit Rating]
Picklist: What is the description of the product named "Chocolate"?, Products, product_name, [Chocolate]
Picklist: Return the description of the product called "Chocolate"., Products, product_name, [Chocolate]
Picklist: Find the address line 1 and 2 of the customer with email "vbogisich@example.org"., Customers, email_address, [vbogisich@example.org]
Picklist: What are lines 1 and 2 of the addressed of the customer with the email "vbogisich@example.org"?, Customers, email_address, [vbogisich@example.org]
Picklist: Find the number of complaints with Product Failure type for each complaint status., Complaints, complaint_type_code, [Product Failure]
Picklist: Of complaints with the type code "Product Failure", how many had each different status code?, Complaints, complaint_type_code, [Product Failure]
Picklist: Show the names of authors from college "Florida" or "Temple", submission, College, [Florida]
Picklist: Show the names of authors from college "Florida" or "Temple", submission, College, [Temple]
Picklist: Which authors with submissions are from college "Florida" or "Temple"?, submission, College, [Florida]
Picklist: Which authors with submissions are from college "Florida" or "Temple"?, submission, College, [Temple]
Picklist: Show all transaction ids with transaction code 'PUR'., Ref_Transaction_Types, transaction_type_code, [PUR]
Picklist: Show all transaction ids with transaction code 'PUR'., Transactions, transaction_type_code, [PUR]
--------------------
text:  Show all transaction ids with transaction code 'PUR'.
sql:  SELECT transaction_id FROM TRANSACTIONS WHERE transaction_type_code  =  'PUR'
ground truth values:  [('Transactions.transaction_type_code', 'PUR')]
matched values OrderedDict([(29, ('Ref_Transaction_Types.transaction_type_code', 'PUR')), (48, ('Transactions.transaction_type_code', 'PUR'))])
--------------------
Picklist: Show all dates of transactions whose type code is "SALE"., Ref_Transaction_Types, transaction_type_code, [SALE]
Picklist: Show all dates of transactions whose type code is "SALE"., Ref_Transaction_Types, transaction_type_description, [Sale]
Picklist: Show all dates of transactions whose type code is "SALE"., Transactions, transaction_type_code, [SALE]
--------------------
text:  Show all dates of transactions whose type code is "SALE".
sql:  SELECT date_of_transaction FROM TRANSACTIONS WHERE transaction_type_code  =  "SALE"
ground truth values:  [('Transactions.transaction_type_code', 'SALE')]
matched values OrderedDict([(29, ('Ref_Transaction_Types.transaction_type_code', 'SALE')), (35, ('Ref_Transaction_Types.transaction_type_description', 'Sale')), (49, ('Transactions.transaction_type_code', 'SALE'))])
--------------------
Picklist: Show the average amount of transactions with type code "SALE"., Ref_Transaction_Types, transaction_type_code, [SALE]
Picklist: Show the average amount of transactions with type code "SALE"., Ref_Transaction_Types, transaction_type_description, [Sale]
Picklist: Show the average amount of transactions with type code "SALE"., Transactions, transaction_type_code, [SALE]
--------------------
text:  Show the average amount of transactions with type code "SALE".
sql:  SELECT avg(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  "SALE"
ground truth values:  [('Transactions.transaction_type_code', 'SALE')]
matched values OrderedDict([(29, ('Ref_Transaction_Types.transaction_type_code', 'SALE')), (35, ('Ref_Transaction_Types.transaction_type_description', 'Sale')), (49, ('Transactions.transaction_type_code', 'SALE'))])
--------------------
Picklist: Show the description of transaction type with code "PUR"., Ref_Transaction_Types, transaction_type_code, [PUR]
Picklist: Show the description of transaction type with code "PUR"., Transactions, transaction_type_code, [PUR]
--------------------
text:  Show the description of transaction type with code "PUR".
sql:  SELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code	  =  "PUR"
ground truth values:   66%|██████▌   | 5862/8943 [14:07<00:39, 77.40it/s] 66%|██████▌   | 5871/8943 [14:07<00:41, 73.25it/s] 66%|██████▌   | 5879/8943 [14:07<00:42, 72.74it/s] 66%|██████▌   | 5887/8943 [14:08<00:44, 69.40it/s] 66%|██████▌   | 5898/8943 [14:08<00:40, 75.22it/s][('Ref_Transaction_Types.transaction_type_code', 'PUR')]
matched values OrderedDict([(29, ('Ref_Transaction_Types.transaction_type_code', 'PUR')), (48, ('Transactions.transaction_type_code', 'PUR'))])
--------------------
Picklist: Show the minimum amount of transactions whose type code is "PUR" and whose share count is bigger than 50., Ref_Transaction_Types, transaction_type_code, [PUR]
Picklist: Show the minimum amount of transactions whose type code is "PUR" and whose share count is bigger than 50., Transactions, transaction_type_code, [PUR]
--------------------
text:  Show the minimum amount of transactions whose type code is "PUR" and whose share count is bigger than 50.
sql:  SELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  "PUR" AND share_count  >  50
ground truth values:  [('Transactions.transaction_type_code', 'PUR')]
matched values OrderedDict([(29, ('Ref_Transaction_Types.transaction_type_code', 'PUR')), (48, ('Transactions.transaction_type_code', 'PUR'))])
--------------------
--------------------
text:  Return the lot details of lots that belong to investors with details "l"?
sql:  SELECT T2.lot_details FROM INVESTORS AS T1 JOIN LOTS AS T2 ON  T1.investor_id  =  T2.investor_id WHERE T1.Investor_details  =  "l"
ground truth values:  [('Investors.Investor_details', 'l')]
matched values OrderedDict()
--------------------
Picklist: What are the purchase details of transactions with amount bigger than 10000?, Ref_Transaction_Types, transaction_type_description, [Purchase]
--------------------
text:  What are the purchase details of transactions with amount bigger than 10000?
sql:  SELECT T1.purchase_details FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  >  10000
ground truth values:  []
matched values OrderedDict([(33, ('Ref_Transaction_Types.transaction_type_description', 'Purchase'))])
--------------------
Picklist: What are the sale details and dates of transactions with amount smaller than 3000?, Ref_Transaction_Types, transaction_type_code, [SALE]
Picklist: What are the sale details and dates of transactions with amount smaller than 3000?, Ref_Transaction_Types, transaction_type_description, [Sale]
Picklist: What are the sale details and dates of transactions with amount smaller than 3000?, Transactions, transaction_type_code, [SALE]
--------------------
text:  What are the sale details and dates of transactions with amount smaller than 3000?
sql:  SELECT T1.sales_details ,  T2.date_of_transaction FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  <  3000
ground truth values:  []
matched values OrderedDict([(29, ('Ref_Transaction_Types.transaction_type_code', 'SALE')), (35, ('Ref_Transaction_Types.transaction_type_description', 'Sale')), (49, ('Transactions.transaction_type_code', 'SALE'))])
--------------------
Picklist: What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is "PUR"?, Ref_Transaction_Types, transaction_type_code, [PUR]
Picklist: What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is "PUR"?, Transactions, transaction_type_code, [PUR]
--------------------
text:  What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is "PUR"?
sql:  SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON  T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  >  100 AND T3.transaction_type_code  =  "PUR"
ground truth values:  [('Transactions.transaction_type_code', 'PUR')]
matched values OrderedDict([(29, ('Ref_Transaction_Types.transaction_type_code', 'PUR')), (48, ('Transactions.transaction_type_code', 'PUR'))])
--------------------
Picklist: Show the number of transactions with transaction type code "SALE" for different investors if it is larger than 0., Ref_Transaction_Types, transaction_type_code, [SALE]
Picklist: Show the number of transactions with transaction type code "SALE" for different investors if it is larger than 0., Ref_Transaction_Types, transaction_type_description, [Sale]
Picklist: Show the number of transactions with transaction type code "SALE" for different investors if it is larger than 0., Transactions, transaction_type_code, [SALE]
--------------------
text:  Show the number of transactions with transaction type code "SALE" for different investors if it is larger than 0.
sql:  SELECT investor_id ,  COUNT(*) FROM TRANSACTIONS WHERE transaction_type_code  =  "SALE" GROUP BY investor_id
ground truth values:  [('Transactions.transaction_type_code', 'SALE')]
matched values OrderedDict([(29, ('Ref_Transaction_Types.transaction_type_code', 'SALE')), (35, ('Ref_Transaction_Types.transaction_type_description', 'Sale')), (49, ('Transactions.transaction_type_code', 'SALE'))])
--------------------
Picklist: Show the ids and details of the investors who have at least two transactions with type code "SALE"., Ref_Transaction_Types, transaction_type_code, [SALE]
Picklist: Show the ids and details of the investors who have at least two transactions with type code "SALE"., Ref_Transaction_Types, transaction_type_description, [Sale]
Picklist: Show the ids and details of the investors who have at least two transactions with type code "SALE"., Transactions, transaction_type_code, [SALE]
--------------------
text:  Show the ids and details of the investors who have at least two transactions with type code "SALE".
sql:  SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.transaction_type_code  =  "SALE" GROUP BY T2.investor_id HAVING COUNT(*)  >=  2
ground truth values:  [('Transactions.transaction_type_code', 'SALE')]
matched values OrderedDict([(29, ('Ref_Transaction_Types.transaction_type_code', 'SALE')), (35, ('Ref_Transaction_Types.transaction_type_description', 'Sale')), (49, ('Transactions.transaction_type_code', 'SALE'))])
--------------------
Picklist: What are the details of all sales and purchases?, Ref_Transaction_Types, transaction_type_description, [Purchase]
Picklist: What are the details of all sales and purchases?, Ref_Transaction_Types, transaction_type_description, [Sale]
--------------------
text:  What are the details of all sales and purchases?
sql:  SELECT sales_details FROM sales UNION SELECT purchase_details FROM purchases
ground truth values:  []
matched values OrderedDict([(33, ('Ref_Transaction_Types.transaction_type_description', 'Purchase')), (35, ('Ref_Transaction_Types.transaction_type_description', 'Sale'))])
--------------------
Picklist: Show the price ranges of hotels with 5 star ratings., Ref_Hotel_Star_Ratings, star_rating_description, [star]
--------------------
text:  Show the price ranges of hotels with 5 star ratings.
sql:  SELECT price_range FROM HOTELS WHERE star_rating_code  =  "5"
ground truth values:  []
matched values OrderedDict([(15, ('Ref_Hotel_Star_Ratings.star_rating_description', 'star'))])
--------------------
Picklist: What are the price ranges of five star hotels?, Ref_Hotel_Star_Ratings, star_rating_description, [star]
--------------------
text:  What are the price ranges of five star hotels?
sql:  SELECT price_range FROM HOTELS WHERE star_rating_code  =  "5"
ground truth values:  []
matched values OrderedDict([(15, ('Ref_Hotel_Star_Ratings.star_rating_description', 'star'))])
--------------------
Picklist: Show the average price range of hotels that have 5 star ratings and allow pets., Ref_Hotel_Star_Ratings, star_rating_description, [star]
--------------------
text:  Show the average price range of hotels that have 5 star ratings and allow pets.
sql:  SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  "5" AND pets_allowed_yn  =  1
ground truth values:  []
matched values OrderedDict([(15, ('Ref_Hotel_Star_Ratings.star_rating_description', 'star'))])
--------------------
 66%|██████▌   | 5906/8943 [14:08<00:41, 73.52it/s] 66%|██████▌   | 5914/8943 [14:08<00:42, 70.73it/s]Picklist: What is the average price range of five star hotels that allow pets?, Ref_Hotel_Star_Ratings, star_rating_description, [star]
--------------------
text:  What is the average price range of five star hotels that allow pets?
sql:  SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  "5" AND pets_allowed_yn  =  1
ground truth values:  []
matched values OrderedDict([(15, ('Ref_Hotel_Star_Ratings.star_rating_description', 'star'))])
--------------------
Picklist: What is the address of the location "UK Gallery"?, Locations, Location_Name, [UK Gallery]
Picklist: What is the address of the location "UK Gallery"?, Ref_Attraction_Types, Attraction_Type_Description, [gallery]
Picklist: What is the address of the location "UK Gallery"?, Tourist_Attractions, Name, [UK gallery]
--------------------
text:  What is the address of the location "UK Gallery"?
sql:  SELECT Address FROM LOCATIONS WHERE Location_Name  =  "UK Gallery"
ground truth values:  [('Locations.Location_Name', 'UK Gallery')]
matched values OrderedDict([(23, ('Locations.Location_Name', 'UK Gallery')), (43, ('Ref_Attraction_Types.Attraction_Type_Description', 'gallery')), (103, ('Tourist_Attractions.Name', 'UK gallery'))])
--------------------
Picklist: Find the address of the location named "UK Gallery"., Locations, Location_Name, [UK Gallery]
Picklist: Find the address of the location named "UK Gallery"., Ref_Attraction_Types, Attraction_Type_Description, [gallery]
Picklist: Find the address of the location named "UK Gallery"., Tourist_Attractions, Name, [UK gallery]
--------------------
text:  Find the address of the location named "UK Gallery".
sql:  SELECT Address FROM LOCATIONS WHERE Location_Name  =  "UK Gallery"
ground truth values:  [('Locations.Location_Name', 'UK Gallery')]
matched values OrderedDict([(23, ('Locations.Location_Name', 'UK Gallery')), (43, ('Ref_Attraction_Types.Attraction_Type_Description', 'gallery')), (103, ('Tourist_Attractions.Name', 'UK gallery'))])
--------------------
Picklist: What is the detail of the location UK Gallery?, Locations, Location_Name, [UK Gallery]
Picklist: What is the detail of the location UK Gallery?, Ref_Attraction_Types, Attraction_Type_Description, [gallery]
Picklist: What is the detail of the location UK Gallery?, Tourist_Attractions, Name, [UK gallery]
--------------------
text:  What is the detail of the location UK Gallery?
sql:  SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  "UK Gallery"
ground truth values:  [('Locations.Location_Name', 'UK Gallery')]
matched values OrderedDict([(23, ('Locations.Location_Name', 'UK Gallery')), (43, ('Ref_Attraction_Types.Attraction_Type_Description', 'gallery')), (103, ('Tourist_Attractions.Name', 'UK gallery'))])
--------------------
Picklist: Return the detail of the location named "UK Gallery"., Locations, Location_Name, [UK Gallery]
Picklist: Return the detail of the location named "UK Gallery"., Ref_Attraction_Types, Attraction_Type_Description, [gallery]
Picklist: Return the detail of the location named "UK Gallery"., Tourist_Attractions, Name, [UK gallery]
--------------------
text:  Return the detail of the location named "UK Gallery".
sql:  SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  "UK Gallery"
ground truth values:  [('Locations.Location_Name', 'UK Gallery')]
matched values OrderedDict([(23, ('Locations.Location_Name', 'UK Gallery')), (43, ('Ref_Attraction_Types.Attraction_Type_Description', 'gallery')), (103, ('Tourist_Attractions.Name', 'UK gallery'))])
--------------------
Picklist: What are the names of the tourist attractions that can be accessed by bus?, Tourist_Attractions, How_to_Get_There, [bus]
Picklist: Which tourist attractions can we get to by bus? Tell me the names of the attractions., Tourist_Attractions, How_to_Get_There, [bus]
Picklist: What are the names and opening hours of the tourist attractions that can be accessed by bus or walk?, Tourist_Attractions, How_to_Get_There, [bus]
Picklist: What are the names and opening hours of the tourist attractions that can be accessed by bus or walk?, Tourist_Attractions, How_to_Get_There, [walk]
Picklist: Find the names and opening hours of the tourist attractions that we get to by bus or walk., Tourist_Attractions, How_to_Get_There, [bus]
Picklist: Find the names and opening hours of the tourist attractions that we get to by bus or walk., Tourist_Attractions, How_to_Get_There, [walk]
Picklist: What are the star rating descriptions of the hotels with price above 10000?, Ref_Hotel_Star_Ratings, star_rating_description, [star]
--------------------
text:  What are the star rating descriptions of the hotels with price above 10000?
sql:  SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000
ground truth values:  []
matched values OrderedDict([(15, ('Ref_Hotel_Star_Ratings.star_rating_description', 'star'))])
--------------------
Picklist: Give me the star rating descriptions of the hotels that cost more than 10000., Ref_Hotel_Star_Ratings, star_rating_description, [star]
--------------------
text:  Give me the star rating descriptions of the hotels that cost more than 10000.
sql:  SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000
ground truth values:  []
matched values OrderedDict([(15, ('Ref_Hotel_Star_Ratings.star_rating_description', 'star'))])
--------------------
Picklist: What are the details and opening hours of the museums?, Ref_Attraction_Types, Attraction_Type_Description, [museum]
--------------------
text:  What are the details and opening hours of the museums?
sql:  SELECT T1.Museum_Details ,  T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID  =  T2.Tourist_Attraction_ID
ground truth values:  []
matched values OrderedDict([(40, ('Ref_Attraction_Types.Attraction_Type_Description', 'museum'))])
--------------------
Picklist: Give me the detail and opening hour for each museum., Ref_Attraction_Types, Attraction_Type_Description, [museum]
--------------------
text:  Give me the detail and opening hour for each museum.
sql:  SELECT T1.Museum_Details ,  T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID  =  T2.Tourist_Attraction_ID
ground truth values:  []
matched values OrderedDict([(40, ('Ref_Attraction_Types.Attraction_Type_Description', 'museum'))])
--------------------
Picklist: What is the name of the tourist attraction that is associated with the photo "game1"?, Photos, Name, [game1]
Picklist: Which tourist attraction is associated with the photo "game1"? Return its name., Photos, Name, [game1]
Picklist: What are the names and descriptions of the photos taken at the tourist attraction "film festival"?, Locations, Location_Name, [Film Festival]
Picklist: What are the names and descriptions of the photos taken at the tourist attraction "film festival"?, Tourist_Attractions, Name, [film festival]
--------------------
text:  What are the names and descriptions of the photos taken at the tourist attraction "film festival"?
sql:  SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  "film festival"
ground truth values:  [('Tourist_Attractions.Name', 'film festival')]
matched values OrderedDict([(23, ('Locations.Location_Name', 'Film Festival')), (101, ('Tourist_Attractions.Name', 'film festival'))])
--------------------
Picklist: Find the names and descriptions of the photos taken at the tourist attraction called "film festival"., Locations, Location_Name, [Film Festival]
Picklist: Find the names and descriptions of the photos taken at the tourist attraction called "film festival"., Tourist_Attractions, Name, [film festival]
--------------------
text:  Find the names and descriptions of the photos taken at the tourist attraction called "film festival".
sql:   66%|██████▌   | 5922/8943 [14:08<00:47, 63.04it/s] 66%|██████▋   | 5929/8943 [14:08<00:53, 56.72it/s] 66%|██████▋   | 5935/8943 [14:08<01:02, 48.40it/s] 66%|██████▋   | 5943/8943 [14:08<00:55, 53.97it/s] 67%|██████▋   | 5949/8943 [14:09<00:55, 53.88it/s] 67%|██████▋   | 5955/8943 [14:09<00:55, 53.77it/s]SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  "film festival"
ground truth values:  [('Tourist_Attractions.Name', 'film festival')]
matched values OrderedDict([(23, ('Locations.Location_Name', 'Film Festival')), (101, ('Tourist_Attractions.Name', 'film festival'))])
--------------------
Picklist: What are the details of the shops that can be accessed by walk?, Tourist_Attractions, How_to_Get_There, [walk]
Picklist: Find the details of the shops that can be reached by walk., Tourist_Attractions, How_to_Get_There, [walk]
Picklist: What is the name of the staff that is in charge of the attraction named "US museum"?, Ref_Attraction_Types, Attraction_Type_Description, [museum]
Picklist: What is the name of the staff that is in charge of the attraction named "US museum"?, Tourist_Attractions, Name, [US museum]
--------------------
text:  What is the name of the staff that is in charge of the attraction named "US museum"?
sql:  SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  "US museum"
ground truth values:  [('Tourist_Attractions.Name', 'US museum')]
matched values OrderedDict([(40, ('Ref_Attraction_Types.Attraction_Type_Description', 'museum')), (100, ('Tourist_Attractions.Name', 'US museum'))])
--------------------
Picklist: Tell me the name of the staff in charge of the attraction called "US museum"., Ref_Attraction_Types, Attraction_Type_Description, [museum]
Picklist: Tell me the name of the staff in charge of the attraction called "US museum"., Tourist_Attractions, Name, [US museum]
--------------------
text:  Tell me the name of the staff in charge of the attraction called "US museum".
sql:  SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  "US museum"
ground truth values:  [('Tourist_Attractions.Name', 'US museum')]
matched values OrderedDict([(40, ('Ref_Attraction_Types.Attraction_Type_Description', 'museum')), (100, ('Tourist_Attractions.Name', 'US museum'))])
--------------------
Picklist: What are the details of the markets that can be accessed by walk or bus?, Tourist_Attractions, How_to_Get_There, [bus]
Picklist: What are the details of the markets that can be accessed by walk or bus?, Tourist_Attractions, How_to_Get_There, [walk]
Picklist: Find the details of all the markets that are accessible by walk or bus., Tourist_Attractions, How_to_Get_There, [bus]
Picklist: Find the details of all the markets that are accessible by walk or bus., Tourist_Attractions, How_to_Get_There, [walk]
Picklist: What are the visit date and details of the visitor whose detail is 'Vincent'?, Visitors, Tourist_Details, [Vincent]
Picklist: Find the visit date and details of the tourist whose detail is 'Vincent', Visitors, Tourist_Details, [Vincent]
Picklist: Which tourist attractions does the visitor with detail 'Vincent' visit?, Visitors, Tourist_Details, [Vincent]
Picklist: Show the tourist attractions visited by the tourist whose detail is 'Vincent'., Visitors, Tourist_Details, [Vincent]
Picklist: What are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there?, Visitors, Tourist_Details, [Vincent]
Picklist: What are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there?, Visitors, Tourist_Details, [Vivian]
Picklist: For each tourist attraction, return its name and the date when the tourists named Vincent or Vivian visited there., Visitors, Tourist_Details, [Vincent]
Picklist: For each tourist attraction, return its name and the date when the tourists named Vincent or Vivian visited there., Visitors, Tourist_Details, [Vivian]
Picklist: Show the average price of hotels for each star rating code., Ref_Hotel_Star_Ratings, star_rating_description, [star]
--------------------
text:  Show the average price of hotels for each star rating code.
sql:  SELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code
ground truth values:  []
matched values OrderedDict([(15, ('Ref_Hotel_Star_Ratings.star_rating_description', 'star'))])
--------------------
Picklist: What is the average price range of hotels for each each star rating code?, Ref_Hotel_Star_Ratings, star_rating_description, [star]
--------------------
text:  What is the average price range of hotels for each each star rating code?
sql:  SELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code
ground truth values:  []
matched values OrderedDict([(15, ('Ref_Hotel_Star_Ratings.star_rating_description', 'star'))])
--------------------
Picklist: Show the id and star rating of each hotel, ordered by its price from low to high., Ref_Hotel_Star_Ratings, star_rating_description, [star]
--------------------
text:  Show the id and star rating of each hotel, ordered by its price from low to high.
sql:  SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC
ground truth values:  []
matched values OrderedDict([(15, ('Ref_Hotel_Star_Ratings.star_rating_description', 'star'))])
--------------------
Picklist: Find the id and star rating of each hotel and sort them in increasing order of price., Ref_Hotel_Star_Ratings, star_rating_description, [star]
--------------------
text:  Find the id and star rating of each hotel and sort them in increasing order of price.
sql:  SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC
ground truth values:  []
matched values OrderedDict([(15, ('Ref_Hotel_Star_Ratings.star_rating_description', 'star'))])
--------------------
Picklist: Show the details and star ratings of the 3 least expensive hotels., Ref_Hotel_Star_Ratings, star_rating_description, [star]
--------------------
text:  Show the details and star ratings of the 3 least expensive hotels.
sql:  SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3
ground truth values:  []
matched values OrderedDict([(15, ('Ref_Hotel_Star_Ratings.star_rating_description', 'star'))])
--------------------
Picklist: What are the details and star ratings of the three hotels with the lowest price ranges?, Ref_Hotel_Star_Ratings, star_rating_description, [star]
--------------------
text:  What are the details and star ratings of the three hotels with the lowest price ranges?
sql:  SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3
ground truth values:  []
matched values OrderedDict([(15, ('Ref_Hotel_Star_Ratings.star_rating_description', 'star'))])
--------------------
Picklist: What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent?, Locations, Address, [660 Shea Crescent]
Picklist: What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent?, Tourist_Attractions, How_to_Get_There, [walk]
Picklist: Find the names of the tourist attractions that is either accessible by walk or at address 660 Shea Crescent., Locations, Address, [660 Shea Crescent]
Picklist: Find the names of the tourist attractions that is either accessible by walk or at address 660 Shea Crescent., Tourist_Attractions, How_to_Get_There, [walk]
Picklist: What are the names of the tourist attractions that have parking or shopping as their feature details?, Features, Feature_Details, [parking]
Picklist: What are the names of the tourist attractions that have parking or shopping as their feature details?, Features, Feature_Details, [shopping]
Picklist: What are the names of the tourist attractions that have parking or shopping as their feature details?, Tourist_Attractions, Name, [parking]
--------------------
text:  What are the names of the tourist attractions that have parking or shopping as their feature details?
sql:   67%|██████▋   | 5961/8943 [14:09<01:05, 45.19it/s] 67%|██████▋   | 5966/8943 [14:09<01:20, 37.03it/s] 67%|██████▋   | 5974/8943 [14:09<01:07, 43.94it/s] 67%|██████▋   | 5984/8943 [14:09<00:56, 52.38it/s] 67%|██████▋   | 5993/8943 [14:09<00:49, 59.77it/s] 67%|██████▋   | 6004/8943 [14:09<00:43, 68.19it/s] 67%|██████▋   | 6014/8943 [14:10<00:39, 74.52it/s] 67%|██████▋   | 6023/8943 [14:10<00:39, 73.16it/s]SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'
ground truth values:  [('Features.Feature_Details', 'park'), ('Features.Feature_Details', 'shopping')]
matched values OrderedDict([(56, ('Features.Feature_Details', 'parking')), (58, ('Features.Feature_Details', 'shopping')), (102, ('Tourist_Attractions.Name', 'parking'))])
--------------------
Picklist: Find the tourist attractions that have parking or shopping as their feature details. What are the names of the attractions?, Features, Feature_Details, [parking]
Picklist: Find the tourist attractions that have parking or shopping as their feature details. What are the names of the attractions?, Features, Feature_Details, [shopping]
Picklist: Find the tourist attractions that have parking or shopping as their feature details. What are the names of the attractions?, Tourist_Attractions, Name, [parking]
--------------------
text:  Find the tourist attractions that have parking or shopping as their feature details. What are the names of the attractions?
sql:  SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'
ground truth values:  [('Features.Feature_Details', 'park'), ('Features.Feature_Details', 'shopping')]
matched values OrderedDict([(56, ('Features.Feature_Details', 'parking')), (58, ('Features.Feature_Details', 'shopping')), (102, ('Tourist_Attractions.Name', 'parking'))])
--------------------
Picklist: What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction?, Locations, Address, [254 Ottilie Junction]
Picklist: What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction?, Tourist_Attractions, How_to_Get_There, [bus]
Picklist: Find the names of the tourist attractions that is either accessible by bus or at address 254 Ottilie Junction., Locations, Address, [254 Ottilie Junction]
Picklist: Find the names of the tourist attractions that is either accessible by bus or at address 254 Ottilie Junction., Tourist_Attractions, How_to_Get_There, [bus]
Picklist: What are the names of the tourist attractions Vincent and Marcelle visit?, Visitors, Tourist_Details, [Vincent]
Picklist: What are the names of the tourist attractions Vincent and Marcelle visit?, Visitors, Tourist_Details, [Marcelle]
Picklist: Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions., Visitors, Tourist_Details, [Vincent]
Picklist: Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions., Visitors, Tourist_Details, [Marcelle]
Picklist: What are the names of tourist attraction that Alison visited but Rosalind did not visit?, Visitors, Tourist_Details, [Rosalind]
Picklist: What are the names of tourist attraction that Alison visited but Rosalind did not visit?, Visitors, Tourist_Details, [Alison]
Picklist: Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit., Visitors, Tourist_Details, [Rosalind]
Picklist: Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit., Visitors, Tourist_Details, [Alison]
Picklist: Show all video games with type Collectible card game., Video_Games, GType, [Collectible card game]
--------------------
text:  What are the names of all video games that are collectible cards?
sql:  SELECT gname FROM Video_games WHERE gtype  =  "Collectible card game"
ground truth values:  [('Video_Games.GType', 'Collectible card game')]
matched values OrderedDict()
--------------------
Picklist: What is the type of video game Call of Destiny., Video_Games, GName, [Call of Destiny]
Picklist: What type of game is Call of Destiny?, Video_Games, GName, [Call of Destiny]
Picklist: How many video games have type Massively multiplayer online game?, Video_Games, GType, [Massively multiplayer online game]
Picklist: Count the number of video games with Massively multiplayer online game type ., Video_Games, GType, [Massively multiplayer online game]
Picklist: Show ids for all students who live in CHI., Student, city_code, [CHI]
Picklist: What are the ids of all students who live in CHI?, Student, city_code, [CHI]
--------------------
text:  List ids for all student who are on scholarship.
sql:  SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'
ground truth values:  [('SportsInfo.OnScholarship', 'Y')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the ids for all sporty students who are on scholarship?
sql:  SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'
ground truth values:  [('SportsInfo.OnScholarship', 'Y')]
matched values OrderedDict()
--------------------
--------------------
text:  Show last names for all student who are on scholarship.
sql:  SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  'Y'
ground truth values:  [('SportsInfo.OnScholarship', 'Y')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the last names for all scholarship students?
sql:  SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.onscholarship  =  'Y'
ground truth values:  [('SportsInfo.OnScholarship', 'Y')]
matched values OrderedDict()
--------------------
Picklist: How many games are played for all football games by students on scholarship?, SportsInfo, SportName, [Football]
--------------------
text:  How many games are played for all football games by students on scholarship?
sql:  SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  "Football" AND onscholarship  =  'Y'
ground truth values:  [('SportsInfo.SportName', 'Football'), ('SportsInfo.OnScholarship', 'Y')]
matched values OrderedDict([(57, ('SportsInfo.SportName', 'Football'))])
--------------------
Picklist: What is the total number of all football games played by scholarship students?, SportsInfo, SportName, [Football]
--------------------
text:  What is the total number of all football games played by scholarship students?
sql:  SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  "Football" AND onscholarship  =  'Y'
ground truth values:  [('SportsInfo.SportName', 'Football'), ('SportsInfo.OnScholarship', 'Y')]
matched values OrderedDict([(57, ('SportsInfo.SportName', 'Football'))])
--------------------
--------------------
text:  Which sport has most number of students on scholarship?
sql:  SELECT sportname FROM Sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1
ground truth values:  [('SportsInfo.OnScholarship', 'Y')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the sport with the most scholarship students?
sql:  SELECT sportname FROM Sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1
ground truth values:  [('SportsInfo.OnScholarship', 'Y')]
matched values OrderedDict()
--------------------
--------------------
text:  Show student ids who are on scholarship and have major 600.
sql:  SELECT StuID FROM Student WHERE major  =  600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'
ground truth values:  [('SportsInfo.OnScholarship', 'Y')]
matched values OrderedDict()
--------------------
--------------------
text:  67%|██████▋   | 6032/8943 [14:10<00:44, 65.14it/s] 68%|██████▊   | 6042/8943 [14:10<00:40, 72.06it/s] 68%|██████▊   | 6050/8943 [14:10<00:46, 62.88it/s] 68%|██████▊   | 6058/8943 [14:10<00:52, 54.45it/s] 68%|██████▊   | 6066/8943 [14:10<00:48, 59.11it/s] 68%|██████▊   | 6074/8943 [14:11<00:45, 63.20it/s] 68%|██████▊   | 6081/8943 [14:11<00:51, 55.71it/s] 68%|██████▊   | 6088/8943 [14:11<00:55, 51.54it/s] 68%|██████▊   | 6095/8943 [14:11<00:51, 55.05it/s] 68%|██████▊   | 6101/8943 [14:16<13:16,  3.57it/s] 68%|██████▊   | 6106/8943 [14:16<09:33,  4.94it/s] 68%|██████▊   | 6111/8943 [14:17<07:02,  6.70it/s] What are the student ids for those on scholarship in major number 600?
sql:  SELECT StuID FROM Student WHERE major  =  600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship  =  'Y'
ground truth values:  [('SportsInfo.OnScholarship', 'Y')]
matched values OrderedDict()
--------------------
Picklist: Show student ids who are female and play football., SportsInfo, SportName, [Football]
--------------------
text:  Show student ids who are female and play football.
sql:  SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  "Football"
ground truth values:  [('Student.Sex', 'F'), ('SportsInfo.SportName', 'Football')]
matched values OrderedDict([(57, ('SportsInfo.SportName', 'Football'))])
--------------------
Picklist: What are the ids of all female students who play football?, SportsInfo, SportName, [Football]
--------------------
text:  What are the ids of all female students who play football?
sql:  SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  "Football"
ground truth values:  [('Student.Sex', 'F'), ('SportsInfo.SportName', 'Football')]
matched values OrderedDict([(57, ('SportsInfo.SportName', 'Football'))])
--------------------
Picklist: Show all male student ids who don't play football., SportsInfo, SportName, [Football]
--------------------
text:  Show all male student ids who don't play football.
sql:  SELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  "Football"
ground truth values:  [('Student.Sex', 'M'), ('SportsInfo.SportName', 'Football')]
matched values OrderedDict([(57, ('SportsInfo.SportName', 'Football'))])
--------------------
Picklist: What are the ids of all male students who do not play football?, SportsInfo, SportName, [Football]
--------------------
text:  What are the ids of all male students who do not play football?
sql:  SELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  "Football"
ground truth values:  [('Student.Sex', 'M'), ('SportsInfo.SportName', 'Football')]
matched values OrderedDict([(57, ('SportsInfo.SportName', 'Football'))])
--------------------
Picklist: Show total hours per week and number of games played for student David Shieber., Student, LName, [Shieber]
Picklist: Show total hours per week and number of games played for student David Shieber., Student, Fname, [David]
Picklist: What is the total number of hours per work and number of games played by David Shieber?, Student, LName, [Shieber]
Picklist: What is the total number of hours per work and number of games played by David Shieber?, Student, Fname, [David]
Picklist: Show all game names played by Linda Smith, Student, LName, [Smith]
Picklist: Show all game names played by Linda Smith, Student, Fname, [Linda]
Picklist: What are the names of all games played by Linda Smith?, Student, LName, [Smith]
Picklist: What are the names of all games played by Linda Smith?, Student, Fname, [Linda]
Picklist: Find the last and first name of students who are playing Football or Lacrosse., SportsInfo, SportName, [Football]
Picklist: Find the last and first name of students who are playing Football or Lacrosse., SportsInfo, SportName, [Lacrosse]
Picklist: What is the first and last name of all students who play Football or Lacrosse?, SportsInfo, SportName, [Football]
Picklist: What is the first and last name of all students who play Football or Lacrosse?, SportsInfo, SportName, [Lacrosse]
Picklist: Find the first name and age of the students who are playing both Football and Lacrosse., SportsInfo, SportName, [Football]
Picklist: Find the first name and age of the students who are playing both Football and Lacrosse., SportsInfo, SportName, [Lacrosse]
Picklist: What are the first names and ages of all students who are playing both Football and Lacrosse?, SportsInfo, SportName, [Football]
Picklist: What are the first names and ages of all students who are playing both Football and Lacrosse?, SportsInfo, SportName, [Lacrosse]
Picklist: Find the last name and gender of the students who are playing both Call of Destiny and Works of Widenius games., Video_Games, GName, [Call of Destiny]
Picklist: Find the last name and gender of the students who are playing both Call of Destiny and Works of Widenius games., Video_Games, GName, [Works of Widenius]
Picklist: what is the last name and gender of all students who played both Call of Destiny and Works of Widenius?, Video_Games, GName, [Call of Destiny]
Picklist: what is the last name and gender of all students who played both Call of Destiny and Works of Widenius?, Video_Games, GName, [Works of Widenius]
Picklist: What are the names of customers who use payment method "Cash"?, Customers, payment_method, [Cash]
Picklist: Which customers use "Cash" for payment method? Return the customer names., Customers, payment_method, [Cash]
Picklist: Find the detail of products whose detail contains the word "Latte" or the word "Americano", Products, product_details, [Americano]
Picklist: Find the detail of products whose detail contains the word "Latte" or the word "Americano", Products, product_details, [Latte]
--------------------
text:  Find the detail of products whose detail contains the word "Latte" or the word "Americano"
sql:  SELECT product_details FROM products WHERE product_details LIKE "%Latte%" OR product_details LIKE "%Americano%"
ground truth values:  []
matched values OrderedDict([(34, ('Products.product_details', 'Americano')), (37, ('Products.product_details', 'Latte'))])
--------------------
Picklist: Which product's detail contains the word "Latte" or "Americano"? Return the full detail., Products, product_details, [Americano]
Picklist: Which product's detail contains the word "Latte" or "Americano"? Return the full detail., Products, product_details, [Latte]
--------------------
text:  Which product's detail contains the word "Latte" or "Americano"? Return the full detail.
sql:  SELECT product_details FROM products WHERE product_details LIKE "%Latte%" OR product_details LIKE "%Americano%"
ground truth values:  []
matched values OrderedDict([(34, ('Products.product_details', 'Americano')), (37, ('Products.product_details', 'Latte'))])
--------------------
Picklist: What is the address content of the customer named "Maudie Kertzmann"?, Customers, customer_name, [Maudie Kertzmann]
Picklist: Return the address content for the customer whose name is "Maudie Kertzmann"., Customers, customer_name, [Maudie Kertzmann]
Picklist: How many customers are living in city "Lake Geovannyton"?, Addresses, city, [Lake Geovannyton]
Picklist: Find the number of customers who live in the city called Lake Geovannyton., Addresses, city, [Lake Geovannyton]
Picklist: Find the name of customers who are living in Colorado?, Addresses, state_province_county, [Colorado]
Picklist: What are the names of customers who live in Colorado state?, Addresses, state_province_county, [Colorado]
Picklist: Which contact channel has been used by the customer with name "Tillman Ernser"?, Customers, customer_name, [Tillman Ernser]
Picklist: Find the contact channel code that was used by the customer named "Tillman Ernser"., Customers, customer_name, [Tillman Ernser]
Picklist: What is the "active to date" of the latest contact channel used by "Tillman Ernser"?, Customers, customer_name, [Tillman Ernser]
Picklist: Return the the "active to date" of the latest contact channel used by the customer named "Tillman Ernser"., Customers, customer_name, [Tillman Ernser]
Picklist: Find the name and active date of the customer that use email as the contact channel., Customer_Contact_Channels, channel_code, [Email]
Picklist: What are the name and active date of the customers whose contact channel code is email?, Customer_Contact_Channels, channel_code, [Email]
Picklist: How many types of products have Rodrick Heaney bought in total?, Customers, customer_name, [Rodrick Heaney]
Picklist: Find the number of distinct products Rodrick Heaney has bought so far., Customers, customer_name, [Rodrick Heaney]
 68%|██████▊   | 6116/8943 [14:17<05:18,  8.88it/s] 68%|██████▊   | 6122/8943 [14:17<03:57, 11.87it/s] 69%|██████▊   | 6127/8943 [14:17<03:04, 15.24it/s] 69%|██████▊   | 6132/8943 [14:17<02:26, 19.19it/s] 69%|██████▊   | 6137/8943 [14:17<02:02, 22.95it/s] 69%|██████▊   | 6142/8943 [14:17<01:50, 25.37it/s] 69%|██████▉   | 6151/8943 [14:17<01:27, 32.00it/s] 69%|██████▉   | 6162/8943 [14:18<01:08, 40.64it/s] 69%|██████▉   | 6170/8943 [14:18<00:58, 47.02it/s] 69%|██████▉   | 6178/8943 [14:18<00:55, 50.14it/s] 69%|██████▉   | 6188/8943 [14:18<00:47, 57.99it/s] 69%|██████▉   | 6196/8943 [14:18<00:48, 56.87it/s] 69%|██████▉   | 6207/8943 [14:18<00:41, 65.44it/s] 70%|██████▉   | 6217/8943 [14:18<00:38, 70.66it/s] 70%|██████▉   | 6226/8943 [14:18<00:37, 72.55it/s] 70%|██████▉   | 6237/8943 [14:18<00:33, 79.95it/s] 70%|██████▉   | 6247/8943 [14:19<00:31, 84.52it/s]Picklist: What is the total quantity of products purchased by "Rodrick Heaney"?, Customers, customer_name, [Rodrick Heaney]
Picklist: Tell me the total quantity of products bought by the customer called "Rodrick Heaney"., Customers, customer_name, [Rodrick Heaney]
Picklist: How many customers have at least one order with status "Cancelled"?, Customer_Orders, order_status, [Cancelled]
Picklist: Return the number of customers who have at least one order with "Cancelled" status., Customer_Orders, order_status, [Cancelled]
--------------------
text:  How many orders have detail "Second time"?
sql:  SELECT count(*) FROM customer_orders WHERE order_details  =  "Second time"
ground truth values:  [('Customer_Orders.order_details', 'Second time')]
matched values OrderedDict()
--------------------
--------------------
text:  Tell me the number of orders with "Second time" as order detail.
sql:  SELECT count(*) FROM customer_orders WHERE order_details  =  "Second time"
ground truth values:  [('Customer_Orders.order_details', 'Second time')]
matched values OrderedDict()
--------------------
Picklist: Find the customer name and date of the orders that have the status "Delivered"., Customer_Orders, order_status, [Delivered]
Picklist: What are the customer name and date of the orders whose status is "Delivered"., Customer_Orders, order_status, [Delivered]
Picklist: What is the total number of products that are in orders with status "Cancelled"?, Customer_Orders, order_status, [Cancelled]
Picklist: Find the total quantity of products associated with the orders in the "Cancelled" status., Customer_Orders, order_status, [Cancelled]
Picklist: Find the total amount of products ordered before 2018-03-17 07:13:53., Customer_Orders, order_date, [2018-03-17 07:13:53]
Picklist: What is the total amount of products purchased before 2018-03-17 07:13:53?, Customer_Orders, order_date, [2018-03-17 07:13:53]
Picklist: Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona., Addresses, city, [East Julianaside]
Picklist: Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona., Addresses, city, [Gleasonmouth]
Picklist: Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona., Addresses, state_province_county, [Arizona]
Picklist: Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona., Addresses, state_province_county, [Texas]
Picklist: What are all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona., Addresses, city, [East Julianaside]
Picklist: What are all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona., Addresses, city, [Gleasonmouth]
Picklist: What are all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona., Addresses, state_province_county, [Arizona]
Picklist: What are all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona., Addresses, state_province_county, [Texas]
Picklist: Find the name of customers who did not pay with Cash., Customers, payment_method, [Cash]
Picklist: What is the name of customers who do not use Cash as payment method., Customers, payment_method, [Cash]
Picklist: Find the names of customers who never ordered product Latte., Products, product_details, [Latte]
Picklist: What are names of customers who never ordered product Latte., Products, product_details, [Latte]
Picklist: Find the names of customers who ordered both products Latte and Americano., Products, product_details, [Americano]
Picklist: Find the names of customers who ordered both products Latte and Americano., Products, product_details, [Latte]
Picklist: What are the names of customers who have purchased both products Latte and Americano?, Products, product_details, [Americano]
Picklist: What are the names of customers who have purchased both products Latte and Americano?, Products, product_details, [Latte]
Picklist: What are the famous titles of the artist "Triumfall"?, artist, Artist, [Triumfall]
Picklist: Return the famous titles of the artist called "Triumfall"., artist, Artist, [Triumfall]
Picklist: What are the category of music festivals with result "Awarded"?, music_festival, Result, [Awarded]
Picklist: Return the categories of music festivals that have the result "Awarded"., music_festival, Result, [Awarded]
Picklist: Please show the songs that have result "nominated" at music festivals., music_festival, Result, [Nominated]
--------------------
text:  What are the songs in volumes that have resulted in a nomination at music festivals?
sql:  SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  "Nominated"
ground truth values:  [('music_festival.Result', 'Nominated')]
matched values OrderedDict()
--------------------
Picklist: What are the issue dates of volumes associated with the artist "Gorgoroth"?, artist, Artist, [Gorgoroth]
Picklist: Return the issue dates of volumes that are by the artist named Gorgoroth., artist, Artist, [Gorgoroth]
Picklist: What are the date of ceremony of music festivals with category "Best Song" and result "Awarded"?, music_festival, Category, [Best Song]
Picklist: What are the date of ceremony of music festivals with category "Best Song" and result "Awarded"?, music_festival, Result, [Awarded]
Picklist: Return the dates of ceremony corresponding to music festivals that had the category "Best Song" and result "Awarded"., music_festival, Category, [Best Song]
Picklist: Return the dates of ceremony corresponding to music festivals that had the category "Best Song" and result "Awarded"., music_festival, Result, [Awarded]
Picklist: List the names of countries whose language is not "German"., country, Languages, [German]
Picklist: Find the name of captains whose rank are either Midshipman or Lieutenant., captain, Rank, [Midshipman]
Picklist: Find the name of captains whose rank are either Midshipman or Lieutenant., captain, Rank, [Lieutenant]
Picklist: What are the names of captains that have either the rank Midshipman or Lieutenant?, captain, Rank, [Midshipman]
Picklist: What are the names of captains that have either the rank Midshipman or Lieutenant?, captain, Rank, [Lieutenant]
Picklist: Find the captain rank that has some captains in both Cutter and Armed schooner classes., captain, Class, [Armed schooner]
Picklist: Find the captain rank that has some captains in both Cutter and Armed schooner classes., captain, Class, [Cutter]
Picklist: What are the ranks of captains that are both in the Cutter and Armed schooner classes?, captain, Class, [Armed schooner]
Picklist: What are the ranks of captains that are both in the Cutter and Armed schooner classes?, captain, Class, [Cutter]
Picklist: Find the captain rank that has no captain in Third-rate ship of the line class., captain, Class, [Third-rate ship of the line]
Picklist: What are the ranks of captains that have no captain that are in the Third-rate ship of the line class?, captain, Class, [Third-rate ship of the line]
Picklist: Find the ship type that are used by both ships with Panama and Malta flags., Ship, Type, [Panamax]
Picklist: Find the ship type that are used by both ships with Panama and Malta flags., Ship, Flag, [Panama]
Picklist: Find the ship type that are used by both ships with Panama and Malta flags., Ship, Flag, [Malta]
--------------------
text:  Find the ship type that are used by both ships with Panama and Malta flags.
sql:  SELECT TYPE FROM ship WHERE flag  =  'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag  =  'Malta'
ground truth values:  [('Ship.Flag', 'Panama'), ('Ship.Flag', 'Malta')]
matched values OrderedDict([(27, ('Ship.Type', 'Panamax')), (37, ('Ship.Flag', 'Panama')), (39, ('Ship.Flag', 'Malta'))])
--------------------
Picklist: What types of ships have both ships that have Panama Flags and Malta flags?, Ship, Type, [Panamax]
Picklist: What types of ships have both ships that have Panama Flags and Malta flags?, Ship, Flag, [Panama]
Picklist: What types of ships have both ships that have Panama Flags and Malta flags?, Ship, Flag, [Malta]
--------------------
text:  What types of ships have both ships that have Panama Flags and Malta flags?
sql:  70%|██████▉   | 6257/8943 [14:19<00:30, 87.60it/s] 70%|███████   | 6267/8943 [14:19<00:33, 79.16it/s] 70%|███████   | 6276/8943 [14:19<00:36, 73.74it/s] 70%|███████   | 6284/8943 [14:19<00:39, 66.66it/s] 70%|███████   | 6292/8943 [14:19<00:42, 62.75it/s] 70%|███████   | 6299/8943 [14:19<00:45, 58.19it/s] 71%|███████   | 6308/8943 [14:20<00:41, 63.24it/s] 71%|███████   | 6315/8943 [14:20<00:45, 58.16it/s] 71%|███████   | 6322/8943 [14:20<00:48, 53.94it/s] 71%|███████   | 6328/8943 [14:20<00:56, 46.26it/s] 71%|███████   | 6334/8943 [14:20<00:53, 48.81it/s] 71%|███████   | 6340/8943 [14:20<00:50, 51.47it/s] 71%|███████   | 6346/8943 [14:20<00:53, 48.54it/s] 71%|███████   | 6355/8943 [14:20<00:46, 56.12it/s] 71%|███████   | 6363/8943 [14:21<00:42, 60.82it/s] 71%|███████▏  | 6372/8943 [14:21<00:39, 65.23it/s] 71%|███████▏  | 6379/8943 [14:21<00:40, 63.60it/s] 71%|███████▏  | 6386/8943 [14:21<00:39, 65.38it/s] 72%|███████▏  | 6398/8943 [14:21<00:34, 73.96it/s] SELECT TYPE FROM ship WHERE flag  =  'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag  =  'Malta'
ground truth values:  [('Ship.Flag', 'Panama'), ('Ship.Flag', 'Malta')]
matched values OrderedDict([(27, ('Ship.Type', 'Panamax')), (37, ('Ship.Flag', 'Panama')), (39, ('Ship.Flag', 'Malta'))])
--------------------
Picklist: Find the name and flag of ships that are not steered by any captain with Midshipman rank., captain, Rank, [Midshipman]
Picklist: What are the names and flags of ships that do not have a captain with the rank of Midshipman?, captain, Rank, [Midshipman]
Picklist: Find the name of the ships that are steered by both a captain with Midshipman rank and a captain with Lieutenant rank., captain, Rank, [Midshipman]
Picklist: Find the name of the ships that are steered by both a captain with Midshipman rank and a captain with Lieutenant rank., captain, Rank, [Lieutenant]
Picklist: What are the names of ships that are commanded by both captains with the rank of Midshipman and captains with the rank of Lieutenant?, captain, Rank, [Midshipman]
Picklist: What are the names of ships that are commanded by both captains with the rank of Midshipman and captains with the rank of Lieutenant?, captain, Rank, [Lieutenant]
Picklist: Find the match ids of the cities that hosted competition "1994 FIFA World Cup qualification"?, match, Competition, [1994 FIFA World Cup qualification]
Picklist: What is the match id of the competition called "1994 FIFA World Cup qualification"?, match, Competition, [1994 FIFA World Cup qualification]
Picklist: What is the venue of the competition "1994 FIFA World Cup qualification" hosted by "Nanjing ( Jiangsu )"?, city, City, [Nanjing ( Jiangsu )]
Picklist: What is the venue of the competition "1994 FIFA World Cup qualification" hosted by "Nanjing ( Jiangsu )"?, match, Competition, [1994 FIFA World Cup qualification]
Picklist: Find the venue of the competition "1994 FIFA World Cup qualification" which was hosted by "Nanjing ( Jiangsu )"., city, City, [Nanjing ( Jiangsu )]
Picklist: Find the venue of the competition "1994 FIFA World Cup qualification" which was hosted by "Nanjing ( Jiangsu )"., match, Competition, [1994 FIFA World Cup qualification]
Picklist: Give me the temperature of Shanghai in January., city, City, [Shanghai]
Picklist: What is the temperature of "Shanghai" city in January?, city, City, [Shanghai]
Picklist: What is the host year of city "Taizhou ( Zhejiang )"?, city, City, [Taizhou ( Zhejiang )]
Picklist: IN which year did city "Taizhou ( Zhejiang )" serve as a host city?, city, City, [Taizhou ( Zhejiang )]
Picklist: Find the payment method and phone of the party with email "enrico09@example.com"., Parties, party_email, [enrico09@example.com]
Picklist: What is the payment method code and party phone of the party with the email 'enrico09@example.com'?, Parties, party_email, [enrico09@example.com]
Picklist: Find the last name of the latest contact individual of the organization "Labour Party"., Organizations, organization_name, [Labour Party]
Picklist: What is the last name of the contact individual from the Labour party organization who was contacted most recently?, Organizations, organization_name, [Labour Party]
Picklist: How many cities are there in state "Colorado"?, Addresses, state_province_county, [Colorado]
Picklist: Count the number of cities in the state of Colorado., Addresses, state_province_county, [Colorado]
Picklist: Show the party with drivers from Hartford and drivers older than 40., driver, Home_city, [Hartford]
Picklist: How many drivers are from Hartford city or younger than 40?, driver, Home_city, [Hartford]
Picklist: List names for drivers from Hartford city and younger than 40., driver, Home_city, [Hartford]
Picklist: What is the velocity of the pilot named 'Thompson'?, flight, Pilot, [Thompson]
Picklist: What are the names of the airports which are not in the country 'Iceland'?, airport, Country, [Iceland]
Picklist: What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?, airport, City, [Billund]
Picklist: What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?, airport, Country, [United States]
Picklist: What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?, airport, name, [Billund Airport]
--------------------
text:  What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?
sql:  SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.country  =  'United States' OR T1.name  =  'Billund Airport'
ground truth values:  [('airport.Country', 'United States'), ('airport.name', 'Billund Airport')]
matched values OrderedDict([(8, ('airport.City', 'Billund')), (13, ('airport.Country', 'United States')), (22, ('airport.name', 'Billund Airport'))])
--------------------
Picklist: How many airports haven't the pilot 'Thompson' driven an aircraft?, flight, Pilot, [Thompson]
Picklist: List the name of the pilots who have flied for both a company that mainly provide 'Cargo' services and a company that runs 'Catering services' activities., operate_company, Principal_activities, [Catering services]
Picklist: List the name of the pilots who have flied for both a company that mainly provide 'Cargo' services and a company that runs 'Catering services' activities., operate_company, Principal_activities, [Cargo]
Picklist: How many companies operates airlines in each airport?, operate_company, Principal_activities, [Airline]
--------------------
text:  How many companies operates airlines in each airport?
sql:  SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id
ground truth values:  []
matched values OrderedDict([(28, ('operate_company.Principal_activities', 'Airline'))])
--------------------
Picklist: List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'., Ref_Document_Types, Document_Type_Code, [CV]
Picklist: List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'., Ref_Document_Types, Document_Type_Name, [Book]
Picklist: List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'., Ref_Document_Types, Document_Type_Name, [CV]
Picklist: List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'., Documents, Document_Type_Code, [CV]
Picklist: List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'., Documents, Document_Name, [King Book]
Picklist: List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'., Documents, Document_Name, [Noel CV]
--------------------
text:  List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'.
sql:  SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'
ground truth values:  [('Documents.Document_Name', 'Noel CV'), ('Documents.Document_Name', 'King Book')]
matched values OrderedDict([(10, ('Ref_Document_Types.Document_Type_Code', 'CV')), (16, ('Ref_Document_Types.Document_Type_Name', 'Book')), (18, ('Ref_Document_Types.Document_Type_Name', 'CV')), (53, ('Documents.Document_Type_Code', 'CV')), (64, ('Documents.Document_Name', 'King Book')), (67, ('Documents.Document_Name', 'Noel CV'))])
--------------------
Picklist: What are the type come, name, and description of the document that has either the name 'Noel CV' or 'King Book'?, Ref_Document_Types, Document_Type_Code, [CV]
 72%|███████▏  | 6407/8943 [14:21<00:32, 77.18it/s] 72%|███████▏  | 6416/8943 [14:21<00:32, 77.67it/s] 72%|███████▏  | 6425/8943 [14:21<00:32, 78.48it/s] 72%|███████▏  | 6435/8943 [14:21<00:30, 83.29it/s] 72%|███████▏  | 6444/8943 [14:22<00:30, 82.69it/s]Picklist: What are the type come, name, and description of the document that has either the name 'Noel CV' or 'King Book'?, Ref_Document_Types, Document_Type_Name, [Book]
Picklist: What are the type come, name, and description of the document that has either the name 'Noel CV' or 'King Book'?, Ref_Document_Types, Document_Type_Name, [CV]
Picklist: What are the type come, name, and description of the document that has either the name 'Noel CV' or 'King Book'?, Documents, Document_Type_Code, [CV]
Picklist: What are the type come, name, and description of the document that has either the name 'Noel CV' or 'King Book'?, Documents, Document_Name, [King Book]
Picklist: What are the type come, name, and description of the document that has either the name 'Noel CV' or 'King Book'?, Documents, Document_Name, [Noel CV]
--------------------
text:  What are the type come, name, and description of the document that has either the name 'Noel CV' or 'King Book'?
sql:  SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'
ground truth values:  [('Documents.Document_Name', 'Noel CV'), ('Documents.Document_Name', 'King Book')]
matched values OrderedDict([(10, ('Ref_Document_Types.Document_Type_Code', 'CV')), (16, ('Ref_Document_Types.Document_Type_Name', 'Book')), (18, ('Ref_Document_Types.Document_Type_Name', 'CV')), (53, ('Documents.Document_Type_Code', 'CV')), (64, ('Documents.Document_Name', 'King Book')), (67, ('Documents.Document_Name', 'Noel CV'))])
--------------------
Picklist: Find names and ids of all documents with document type code BK., Ref_Document_Types, Document_Type_Code, [BK]
Picklist: Find names and ids of all documents with document type code BK., Documents, Document_Type_Code, [BK]
--------------------
text:  Find names and ids of all documents with document type code BK.
sql:  SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  "BK"
ground truth values:  [('Documents.Document_Type_Code', 'BK')]
matched values OrderedDict([(10, ('Ref_Document_Types.Document_Type_Code', 'BK')), (49, ('Documents.Document_Type_Code', 'BK'))])
--------------------
Picklist: What are the names and ids of documents that have the type code BK?, Ref_Document_Types, Document_Type_Code, [BK]
Picklist: What are the names and ids of documents that have the type code BK?, Documents, Document_Type_Code, [BK]
--------------------
text:  What are the names and ids of documents that have the type code BK?
sql:  SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  "BK"
ground truth values:  [('Documents.Document_Type_Code', 'BK')]
matched values OrderedDict([(10, ('Ref_Document_Types.Document_Type_Code', 'BK')), (49, ('Documents.Document_Type_Code', 'BK'))])
--------------------
Picklist: How many documents are with document type code BK for each product id?, Ref_Document_Types, Document_Type_Code, [BK]
Picklist: How many documents are with document type code BK for each product id?, Documents, Document_Type_Code, [BK]
--------------------
text:  How many documents are with document type code BK for each product id?
sql:  SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  "BK" GROUP BY project_id
ground truth values:  [('Documents.Document_Type_Code', 'BK')]
matched values OrderedDict([(10, ('Ref_Document_Types.Document_Type_Code', 'BK')), (49, ('Documents.Document_Type_Code', 'BK'))])
--------------------
Picklist: Count the number of documents with the type code BK that correspond to each product id., Ref_Document_Types, Document_Type_Code, [BK]
Picklist: Count the number of documents with the type code BK that correspond to each product id., Documents, Document_Type_Code, [BK]
--------------------
text:  Count the number of documents with the type code BK that correspond to each product id.
sql:  SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  "BK" GROUP BY project_id
ground truth values:  [('Documents.Document_Type_Code', 'BK')]
matched values OrderedDict([(10, ('Ref_Document_Types.Document_Type_Code', 'BK')), (49, ('Documents.Document_Type_Code', 'BK'))])
--------------------
Picklist: Show the document name and the document date for all documents on project with details 'Graph Database project'., Projects, Project_Details, [Graph Database project]
Picklist: What are the names and dates for documents corresponding to project that has the details 'Graph Database project'?, Projects, Project_Details, [Graph Database project]
Picklist: Show the statement detail and the corresponding document name for the statement with detail 'Private Project'., Statements, Statement_Details, [Private Project]
Picklist: What are the details for statements with the details 'Private Project', and what are the names of the corresponding documents?, Statements, Statement_Details, [Private Project]
Picklist: What is the document type description for document type named Film?, Ref_Document_Types, Document_Type_Name, [Film]
Picklist: Return the description of the document type name 'Film'., Ref_Document_Types, Document_Type_Name, [Film]
Picklist: What is the project detail for the project with document "King Book"?, Ref_Document_Types, Document_Type_Name, [Book]
Picklist: What is the project detail for the project with document "King Book"?, Documents, Document_Name, [King Book]
--------------------
text:  What is the project detail for the project with document "King Book"?
sql:  SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  "King Book"
ground truth values:  [('Documents.Document_Name', 'King Book')]
matched values OrderedDict([(14, ('Ref_Document_Types.Document_Type_Name', 'Book')), (58, ('Documents.Document_Name', 'King Book'))])
--------------------
Picklist: Give the details of the project with the document name 'King Book'., Ref_Document_Types, Document_Type_Name, [Book]
Picklist: Give the details of the project with the document name 'King Book'., Documents, Document_Name, [King Book]
--------------------
text:  Give the details of the project with the document name 'King Book'.
sql:  SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  "King Book"
ground truth values:  [('Documents.Document_Name', 'King Book')]
matched values OrderedDict([(14, ('Ref_Document_Types.Document_Type_Name', 'Book')), (58, ('Documents.Document_Name', 'King Book'))])
--------------------
Picklist: What is the description for the budget type with code ORG?, Ref_Budget_Codes, Budget_Type_Code, [ORG]
Picklist: What is the description for the budget type with code ORG?, Documents_with_Expenses, Budget_Type_Code, [ORG]
--------------------
text:  What is the description for the budget type with code ORG?
sql:  SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  "ORG"
ground truth values:  [('Ref_Budget_Codes.Budget_Type_Code', 'ORG')]
matched values OrderedDict([(26, ('Ref_Budget_Codes.Budget_Type_Code', 'ORG')), (83, ('Documents_with_Expenses.Budget_Type_Code', 'ORG'))])
--------------------
Picklist: Return the description of the budget type that has the code ORG., Ref_Budget_Codes, Budget_Type_Code, [ORG]
Picklist: Return the description of the budget type that has the code ORG., Documents_with_Expenses, Budget_Type_Code, [ORG]
--------------------
text:  Return the description of the budget type that has the code ORG.
sql:  SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  "ORG"
ground truth values:  [('Ref_Budget_Codes.Budget_Type_Code', 'ORG')]
matched values OrderedDict([(26, ('Ref_Budget_Codes.Budget_Type_Code', 'ORG')), (83, ('Documents_with_Expenses.Budget_Type_Code', 'ORG'))])
--------------------
Picklist: What are the document ids for the budget type code 'SF'?, Ref_Budget_Codes, Budget_Type_Code, [SF]
Picklist: What are the document ids for the budget type code 'SF'?, Documents_with_Expenses, Budget_Type_Code, [SF]
--------------------
text:   72%|███████▏  | 6453/8943 [14:22<00:29, 83.28it/s] 72%|███████▏  | 6462/8943 [14:22<00:29, 83.40it/s] 72%|███████▏  | 6471/8943 [14:22<00:31, 78.76it/s] 73%|███████▎  | 6484/8943 [14:22<00:27, 88.06it/s]What are the document ids for the budget type code 'SF'?
sql:  SELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  'SF'
ground truth values:  [('Documents_with_Expenses.Budget_Type_Code', 'SF')]
matched values OrderedDict([(26, ('Ref_Budget_Codes.Budget_Type_Code', 'SF')), (83, ('Documents_with_Expenses.Budget_Type_Code', 'SF'))])
--------------------
Picklist: Give the ids of documents with expenses that have the budget code 'SF'., Ref_Budget_Codes, Budget_Type_Code, [SF]
Picklist: Give the ids of documents with expenses that have the budget code 'SF'., Documents_with_Expenses, Budget_Type_Code, [SF]
--------------------
text:  Give the ids of documents with expenses that have the budget code 'SF'.
sql:  SELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  'SF'
ground truth values:  [('Documents_with_Expenses.Budget_Type_Code', 'SF')]
matched values OrderedDict([(26, ('Ref_Budget_Codes.Budget_Type_Code', 'SF')), (83, ('Documents_with_Expenses.Budget_Type_Code', 'SF'))])
--------------------
Picklist: Show ids for all documents with budget types described as 'Government'., Ref_Budget_Codes, Budget_Type_Description, [Government]
Picklist: Show ids for all documents with budget types described as 'Government'., Documents_with_Expenses, Document_Details, [government]
--------------------
text:  Show ids for all documents with budget types described as 'Government'.
sql:  SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  "Government"
ground truth values:  [('Ref_Budget_Codes.Budget_Type_Description', 'Government')]
matched values OrderedDict([(30, ('Ref_Budget_Codes.Budget_Type_Description', 'Government')), (86, ('Documents_with_Expenses.Document_Details', 'government'))])
--------------------
Picklist: Give the ids for documents that have the budget description 'Government'., Ref_Budget_Codes, Budget_Type_Description, [Government]
Picklist: Give the ids for documents that have the budget description 'Government'., Documents_with_Expenses, Document_Details, [government]
--------------------
text:  Give the ids for documents that have the budget description 'Government'.
sql:  SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  "Government"
ground truth values:  [('Ref_Budget_Codes.Budget_Type_Description', 'Government')]
matched values OrderedDict([(30, ('Ref_Budget_Codes.Budget_Type_Description', 'Government')), (86, ('Documents_with_Expenses.Document_Details', 'government'))])
--------------------
Picklist: Show ids for all documents in type CV without expense budgets., Ref_Document_Types, Document_Type_Code, [CV]
Picklist: Show ids for all documents in type CV without expense budgets., Ref_Document_Types, Document_Type_Name, [CV]
Picklist: Show ids for all documents in type CV without expense budgets., Documents, Document_Type_Code, [CV]
--------------------
text:  Show ids for all documents in type CV without expense budgets.
sql:  SELECT document_id FROM Documents WHERE document_type_code  =  "CV" EXCEPT SELECT document_id FROM Documents_with_expenses
ground truth values:  [('Documents.Document_Type_Code', 'CV')]
matched values OrderedDict([(10, ('Ref_Document_Types.Document_Type_Code', 'CV')), (16, ('Ref_Document_Types.Document_Type_Name', 'CV')), (51, ('Documents.Document_Type_Code', 'CV'))])
--------------------
Picklist: What are the ids of documents with the type code CV that do not have expenses., Ref_Document_Types, Document_Type_Code, [CV]
Picklist: What are the ids of documents with the type code CV that do not have expenses., Ref_Document_Types, Document_Type_Name, [CV]
Picklist: What are the ids of documents with the type code CV that do not have expenses., Documents, Document_Type_Code, [CV]
--------------------
text:  What are the ids of documents with the type code CV that do not have expenses.
sql:  SELECT document_id FROM Documents WHERE document_type_code  =  "CV" EXCEPT SELECT document_id FROM Documents_with_expenses
ground truth values:  [('Documents.Document_Type_Code', 'CV')]
matched values OrderedDict([(10, ('Ref_Document_Types.Document_Type_Code', 'CV')), (16, ('Ref_Document_Types.Document_Type_Name', 'CV')), (51, ('Documents.Document_Type_Code', 'CV'))])
--------------------
Picklist: What are the dates for the documents with both 'GV' type and 'SF' type expenses?, Ref_Budget_Codes, Budget_Type_Code, [GV]
Picklist: What are the dates for the documents with both 'GV' type and 'SF' type expenses?, Ref_Budget_Codes, Budget_Type_Code, [SF]
Picklist: What are the dates for the documents with both 'GV' type and 'SF' type expenses?, Documents_with_Expenses, Budget_Type_Code, [GV]
Picklist: What are the dates for the documents with both 'GV' type and 'SF' type expenses?, Documents_with_Expenses, Budget_Type_Code, [SF]
--------------------
text:  What are the dates for the documents with both 'GV' type and 'SF' type expenses?
sql:  SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'
ground truth values:  [('Documents_with_Expenses.Budget_Type_Code', 'GV'), ('Documents_with_Expenses.Budget_Type_Code', 'SF')]
matched values OrderedDict([(26, ('Ref_Budget_Codes.Budget_Type_Code', 'GV')), (29, ('Ref_Budget_Codes.Budget_Type_Code', 'SF')), (86, ('Documents_with_Expenses.Budget_Type_Code', 'GV')), (89, ('Documents_with_Expenses.Budget_Type_Code', 'SF'))])
--------------------
Picklist: Give the dates of creation for documents that have both budget type codes 'GV' and 'SF'., Ref_Budget_Codes, Budget_Type_Code, [GV]
Picklist: Give the dates of creation for documents that have both budget type codes 'GV' and 'SF'., Ref_Budget_Codes, Budget_Type_Code, [SF]
Picklist: Give the dates of creation for documents that have both budget type codes 'GV' and 'SF'., Documents_with_Expenses, Budget_Type_Code, [GV]
Picklist: Give the dates of creation for documents that have both budget type codes 'GV' and 'SF'., Documents_with_Expenses, Budget_Type_Code, [SF]
--------------------
text:  Give the dates of creation for documents that have both budget type codes 'GV' and 'SF'.
sql:  SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'
ground truth values:  [('Documents_with_Expenses.Budget_Type_Code', 'GV'), ('Documents_with_Expenses.Budget_Type_Code', 'SF')]
matched values OrderedDict([(26, ('Ref_Budget_Codes.Budget_Type_Code', 'GV')), (29, ('Ref_Budget_Codes.Budget_Type_Code', 'SF')), (86, ('Documents_with_Expenses.Budget_Type_Code', 'GV')), (89, ('Documents_with_Expenses.Budget_Type_Code', 'SF'))])
--------------------
Picklist: Find the total hours of the projects that scientists named Michael Rogers or Carol Smith are assigned to., Scientists, Name, [Michael Rogers]
Picklist: Find the total hours of the projects that scientists named Michael Rogers or Carol Smith are assigned to., Scientists, Name, [Carol Smith]
Picklist: What is the sum of hours for projects that scientists with the name Michael Rogers or Carol Smith are assigned to?, Scientists, Name, [Michael Rogers]
Picklist: What is the sum of hours for projects that scientists with the name Michael Rogers or Carol Smith are assigned to?, Scientists, Name, [Carol Smith]
Picklist: Find the name of the scientist who worked on both a project named 'Matter of Time' and a project named 'A Puzzling Parallax'., Projects, Name, [A Puzzling Parallax]
--------------------
text:  Find the name of the scientist who worked on both a project named 'Matter of Time' and a project named 'A Puzzling Parallax'.
sql:  73%|███████▎  | 6494/8943 [14:22<00:34, 71.03it/s] 73%|███████▎  | 6502/8943 [14:22<00:35, 69.41it/s] 73%|███████▎  | 6510/8943 [14:22<00:33, 72.19it/s] 73%|███████▎  | 6518/8943 [14:23<00:41, 58.98it/s] 73%|███████▎  | 6525/8943 [14:23<00:48, 50.18it/s] 73%|███████▎  | 6531/8943 [14:23<00:51, 46.38it/s] 73%|███████▎  | 6537/8943 [14:23<01:01, 38.94it/s] 73%|███████▎  | 6542/8943 [14:23<01:04, 37.36it/s] 73%|███████▎  | 6547/8943 [14:24<01:16, 31.39it/s] 73%|███████▎  | 6551/8943 [14:24<01:24, 28.15it/s] SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'A Puzzling Parallax'
ground truth values:  [('Projects.Name', 'Matter of Time'), ('Projects.Name', 'A Puzzling Parallax')]
matched values OrderedDict([(15, ('Projects.Name', 'A Puzzling Parallax'))])
--------------------
--------------------
text:  What are the names of any scientists who worked on projects named 'Matter of Time' and 'A Puzzling Pattern'?
sql:  SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'A Puzzling Parallax'
ground truth values:  [('Projects.Name', 'Matter of Time'), ('Projects.Name', 'A Puzzling Parallax')]
matched values OrderedDict()
--------------------
Picklist: List the names of all distinct wines that are made of red color grape., grapes, Color, [Red]
Picklist: What are the names of wines made from red grapes?, grapes, Color, [Red]
Picklist: Find the names of all distinct wines that have appellations in North Coast area., appellations, Appelation, [North Coast]
Picklist: Find the names of all distinct wines that have appellations in North Coast area., appellations, Area, [North Coast]
Picklist: Find the names of all distinct wines that have appellations in North Coast area., wine, Appelation, [North Coast]
--------------------
text:  Find the names of all distinct wines that have appellations in North Coast area.
sql:  SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  "North Coast"
ground truth values:  [('appellations.Area', 'North Coast')]
matched values OrderedDict([(20, ('appellations.Appelation', 'North Coast')), (29, ('appellations.Area', 'North Coast')), (47, ('wine.Appelation', 'North Coast'))])
--------------------
Picklist: What are the distinct names of wines that have appellations in the North Coast area?, appellations, Appelation, [North Coast]
Picklist: What are the distinct names of wines that have appellations in the North Coast area?, appellations, Area, [North Coast]
Picklist: What are the distinct names of wines that have appellations in the North Coast area?, wine, Appelation, [North Coast]
--------------------
text:  What are the distinct names of wines that have appellations in the North Coast area?
sql:  SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  "North Coast"
ground truth values:  [('appellations.Area', 'North Coast')]
matched values OrderedDict([(20, ('appellations.Appelation', 'North Coast')), (29, ('appellations.Area', 'North Coast')), (47, ('wine.Appelation', 'North Coast'))])
--------------------
Picklist: How many wines are produced at Robert Biale winery?, wine, Winery, [Robert Biale]
Picklist: Count the number of wines produced at Robert Biale winery., wine, Winery, [Robert Biale]
Picklist: How many appelations are in Napa Country?, appellations, County, [Napa]
Picklist: Count the number of appelations in Napa County., appellations, County, [Napa]
Picklist: Give me the average prices of wines that are produced by appelations in Sonoma County., appellations, Appelation, [Sonoma County]
Picklist: Give me the average prices of wines that are produced by appelations in Sonoma County., appellations, County, [Sonoma]
Picklist: Give me the average prices of wines that are produced by appelations in Sonoma County., wine, Appelation, [Sonoma County]
--------------------
text:  Give me the average prices of wines that are produced by appelations in Sonoma County.
sql:  SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  "Sonoma"
ground truth values:  [('appellations.County', 'Sonoma')]
matched values OrderedDict([(20, ('appellations.Appelation', 'Sonoma County')), (26, ('appellations.County', 'Sonoma')), (48, ('wine.Appelation', 'Sonoma County'))])
--------------------
Picklist: What is the average price of wines produced in appelations in Sonoma County?, appellations, Appelation, [Sonoma County]
Picklist: What is the average price of wines produced in appelations in Sonoma County?, appellations, County, [Sonoma]
Picklist: What is the average price of wines produced in appelations in Sonoma County?, wine, Appelation, [Sonoma County]
--------------------
text:  What is the average price of wines produced in appelations in Sonoma County?
sql:  SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  "Sonoma"
ground truth values:  [('appellations.County', 'Sonoma')]
matched values OrderedDict([(20, ('appellations.Appelation', 'Sonoma County')), (26, ('appellations.County', 'Sonoma')), (48, ('wine.Appelation', 'Sonoma County'))])
--------------------
Picklist: What are the names and scores of wines that are made of white color grapes?, grapes, Color, [White]
Picklist: Give the names and scores of wines made from white grapes., grapes, Color, [White]
Picklist: Find the maximum price of wins from the appelations in Central Coast area and produced before the year of 2005., appellations, Appelation, [Central Coast]
Picklist: Find the maximum price of wins from the appelations in Central Coast area and produced before the year of 2005., appellations, Area, [Central Coast]
Picklist: Find the maximum price of wins from the appelations in Central Coast area and produced before the year of 2005., wine, Appelation, [Central Coast]
--------------------
text:  Find the maximum price of wins from the appelations in Central Coast area and produced before the year of 2005.
sql:  SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  "Central Coast" AND T2.year  <  2005
ground truth values:  [('appellations.Area', 'Central Coast')]
matched values OrderedDict([(20, ('appellations.Appelation', 'Central Coast')), (29, ('appellations.Area', 'Central Coast')), (47, ('wine.Appelation', 'Central Coast'))])
--------------------
Picklist: What is the maximum price of wines from the appelation in the Central Coast area, which was produced before 2005?, appellations, Appelation, [Central Coast]
Picklist: What is the maximum price of wines from the appelation in the Central Coast area, which was produced before 2005?, appellations, Area, [Central Coast]
Picklist: What is the maximum price of wines from the appelation in the Central Coast area, which was produced before 2005?, wine, Appelation, [Central Coast]
--------------------
text:  What is the maximum price of wines from the appelation in the Central Coast area, which was produced before 2005?
sql:  SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  "Central Coast" AND T2.year  <  2005
ground truth values:  [('appellations.Area', 'Central Coast')]
matched values OrderedDict([(20, ('appellations.Appelation', 'Central Coast')), (29, ('appellations.Area', 'Central Coast')), (47, ('wine.Appelation', 'Central Coast'))])
--------------------
Picklist: Find the the grape whose white color grapes are used to produce wines with scores higher than 90., grapes, Color, [White]
Picklist: Find the white grape used to produce wines with scores above 90., grapes, Color, [White]
Picklist: What are the wines that have prices higher than 50 and made of Red color grapes?, grapes, Color, [Red]
Picklist: What are the names of wines made from red grapes and with prices above 50?, grapes, Color, [Red]
Picklist: What are the wines that have prices lower than 50 and have appelations in Monterey county?, appellations, Appelation, [Monterey County]
 73%|███████▎  | 6555/8943 [14:24<01:24, 28.29it/s] 73%|███████▎  | 6559/8943 [14:24<01:24, 28.24it/s] 73%|███████▎  | 6563/8943 [14:24<01:17, 30.73it/s] 73%|███████▎  | 6567/8943 [14:24<01:24, 28.01it/s] 73%|███████▎  | 6570/8943 [14:24<01:25, 27.82it/s] 73%|███████▎  | 6573/8943 [14:24<01:29, 26.37it/s] 74%|███████▎  | 6576/8943 [14:25<01:27, 27.11it/s] 74%|███████▎  | 6580/8943 [14:25<01:22, 28.56it/s] 74%|███████▎  | 6584/8943 [14:25<01:22, 28.46it/s] 74%|███████▎  | 6587/8943 [14:25<01:25, 27.55it/s] 74%|███████▎  | 6590/8943 [14:25<01:29, 26.31it/s] 74%|███████▎  | 6593/8943 [14:25<01:31, 25.66it/s]Picklist: What are the wines that have prices lower than 50 and have appelations in Monterey county?, appellations, County, [Monterey]
Picklist: What are the wines that have prices lower than 50 and have appelations in Monterey county?, wine, Appelation, [Monterey County]
--------------------
text:  What are the wines that have prices lower than 50 and have appelations in Monterey county?
sql:  SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  "Monterey" AND T2.price  <  50
ground truth values:  [('appellations.County', 'Monterey')]
matched values OrderedDict([(20, ('appellations.Appelation', 'Monterey County')), (25, ('appellations.County', 'Monterey')), (46, ('wine.Appelation', 'Monterey County'))])
--------------------
Picklist: Give the neames of wines with prices below 50 and with appelations in Monterey county., appellations, Appelation, [Monterey County]
Picklist: Give the neames of wines with prices below 50 and with appelations in Monterey county., appellations, County, [Monterey]
Picklist: Give the neames of wines with prices below 50 and with appelations in Monterey county., wine, Appelation, [Monterey County]
--------------------
text:  Give the neames of wines with prices below 50 and with appelations in Monterey county.
sql:  SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  "Monterey" AND T2.price  <  50
ground truth values:  [('appellations.County', 'Monterey')]
matched values OrderedDict([(20, ('appellations.Appelation', 'Monterey County')), (25, ('appellations.County', 'Monterey')), (46, ('wine.Appelation', 'Monterey County'))])
--------------------
Picklist: What are the numbers of wines for different grapes?, wine, Name, [Numbers]
--------------------
text:  What are the numbers of wines for different grapes?
sql:  SELECT count(*) ,  Grape FROM WINE GROUP BY Grape
ground truth values:  []
matched values OrderedDict([(45, ('wine.Name', 'Numbers'))])
--------------------
Picklist: Find the distinct names of all wines that have prices higher than some wines from John Anthony winery., wine, Winery, [John Anthony]
Picklist: What are the distinct names of wines with prices higher than any wine from John Anthony winery., wine, Winery, [John Anthony]
Picklist: What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape?, grapes, Grape, [Zinfandel]
Picklist: What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape?, wine, Grape, [Zinfandel]
Picklist: What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape?, wine, Name, [Zinfandel]
--------------------
text:  What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape?
sql:  SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  "Zinfandel"
ground truth values:  [('wine.Grape', 'Zinfandel')]
matched values OrderedDict([(8, ('grapes.Grape', 'Zinfandel')), (40, ('wine.Grape', 'Zinfandel')), (55, ('wine.Name', 'Zinfandel'))])
--------------------
Picklist: Give the average price and case of wines made from Zinfandel grapes in the year 2009., grapes, Grape, [Zinfandel]
Picklist: Give the average price and case of wines made from Zinfandel grapes in the year 2009., wine, Grape, [Zinfandel]
Picklist: Give the average price and case of wines made from Zinfandel grapes in the year 2009., wine, Name, [Zinfandel]
--------------------
text:  Give the average price and case of wines made from Zinfandel grapes in the year 2009.
sql:  SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  "Zinfandel"
ground truth values:  [('wine.Grape', 'Zinfandel')]
matched values OrderedDict([(8, ('grapes.Grape', 'Zinfandel')), (40, ('wine.Grape', 'Zinfandel')), (55, ('wine.Name', 'Zinfandel'))])
--------------------
Picklist: What are the maximum price and score of wines produced by St. Helena appelation?, appellations, Appelation, [St. Helena]
Picklist: What are the maximum price and score of wines produced by St. Helena appelation?, wine, Appelation, [St. Helena]
--------------------
text:  What are the maximum price and score of wines produced by St. Helena appelation?
sql:  SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  "St. Helena"
ground truth values:  [('wine.Appelation', 'St. Helena')]
matched values OrderedDict([(20, ('appellations.Appelation', 'St. Helena')), (45, ('wine.Appelation', 'St. Helena'))])
--------------------
Picklist: Give the maximum price and score for wines produced in the appelation St. Helena., appellations, Appelation, [St. Helena]
Picklist: Give the maximum price and score for wines produced in the appelation St. Helena., wine, Appelation, [St. Helena]
--------------------
text:  Give the maximum price and score for wines produced in the appelation St. Helena.
sql:  SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  "St. Helena"
ground truth values:  [('wine.Appelation', 'St. Helena')]
matched values OrderedDict([(20, ('appellations.Appelation', 'St. Helena')), (45, ('wine.Appelation', 'St. Helena'))])
--------------------
Picklist: What are the names of wines whose production year are before the year of all wines by Brander winery?, wine, Winery, [Brander]
Picklist: What are the names of wines produced before any wine from the Brander winery?, wine, Winery, [Brander]
Picklist: Find the top 3 wineries with the greatest number of wines made of white color grapes., grapes, Color, [White]
Picklist: Which 3 wineries produce the most wines made from white grapes?, grapes, Color, [White]
Picklist: Find the appelations that produce wines after the year of 2008 but not in Central Coast area., appellations, Appelation, [Central Coast]
Picklist: Find the appelations that produce wines after the year of 2008 but not in Central Coast area., appellations, Area, [Central Coast]
Picklist: Find the appelations that produce wines after the year of 2008 but not in Central Coast area., wine, Appelation, [Central Coast]
--------------------
text:  Find the appelations that produce wines after the year of 2008 but not in Central Coast area.
sql:  SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  "Central Coast"
ground truth values:  [('appellations.Area', 'Central Coast')]
matched values OrderedDict([(20, ('appellations.Appelation', 'Central Coast')), (29, ('appellations.Area', 'Central Coast')), (47, ('wine.Appelation', 'Central Coast'))])
--------------------
Picklist: What are the appelations for wines produced after 2008 but not in the Central Coast area?, appellations, Appelation, [Central Coast]
Picklist: What are the appelations for wines produced after 2008 but not in the Central Coast area?, appellations, Area, [Central Coast]
Picklist: What are the appelations for wines produced after 2008 but not in the Central Coast area?, wine, Appelation, [Central Coast]
--------------------
text:  What are the appelations for wines produced after 2008 but not in the Central Coast area?
sql:  SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  "Central Coast"
ground truth values:  [('appellations.Area', 'Central Coast')]
matched values OrderedDict([(20, ('appellations.Appelation', 'Central Coast')), (29, ('appellations.Area', 'Central Coast')), (47, ('wine.Appelation', 'Central Coast'))])
--------------------
Picklist: Find the average price of wines that are not produced from Sonoma county., appellations, Appelation, [Sonoma County]
Picklist: Find the average price of wines that are not produced from Sonoma county., appellations, County, [Sonoma]
Picklist: Find the average price of wines that are not produced from Sonoma county., wine, Appelation, [Sonoma County]
--------------------
text:  Find the average price of wines that are not produced from Sonoma county.
sql:   74%|███████▍  | 6596/8943 [14:25<01:34, 24.75it/s] 74%|███████▍  | 6599/8943 [14:25<01:35, 24.50it/s] 74%|███████▍  | 6604/8943 [14:32<16:32,  2.36it/s] 74%|███████▍  | 6613/8943 [14:32<11:39,  3.33it/s] 74%|███████▍  | 6620/8943 [14:32<08:22,  4.63it/s] 74%|███████▍  | 6628/8943 [14:32<06:00,  6.43it/s] 74%|███████▍  | 6634/8943 [14:33<04:25,  8.69it/s] 74%|███████▍  | 6640/8943 [14:33<03:19, 11.54it/s] 74%|███████▍  | 6645/8943 [14:33<02:33, 14.97it/s] 74%|███████▍  | 6650/8943 [14:33<02:07, 18.01it/s] 74%|███████▍  | 6655/8943 [14:33<01:43, 22.16it/s] 74%|███████▍  | 6660/8943 [14:33<01:26, 26.52it/s] 75%|███████▍  | 6665/8943 [14:33<01:15, 30.05it/s]SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')
ground truth values:  [('appellations.County', 'Sonoma')]
matched values OrderedDict([(20, ('appellations.Appelation', 'Sonoma County')), (26, ('appellations.County', 'Sonoma')), (48, ('wine.Appelation', 'Sonoma County'))])
--------------------
Picklist: What is the average price for wines not produced in Sonoma county?, appellations, Appelation, [Sonoma County]
Picklist: What is the average price for wines not produced in Sonoma county?, appellations, County, [Sonoma]
Picklist: What is the average price for wines not produced in Sonoma county?, wine, Appelation, [Sonoma County]
--------------------
text:  What is the average price for wines not produced in Sonoma county?
sql:  SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')
ground truth values:  [('appellations.County', 'Sonoma')]
matched values OrderedDict([(20, ('appellations.Appelation', 'Sonoma County')), (26, ('appellations.County', 'Sonoma')), (48, ('wine.Appelation', 'Sonoma County'))])
--------------------
Picklist: Show the names and total passengers for all train stations not in London., station, Location, [London]
Picklist: What is the average and maximum number of total passengers for train stations in London or Glasgow?, station, Location, [Glasgow]
Picklist: What is the average and maximum number of total passengers for train stations in London or Glasgow?, station, Location, [London]
Picklist: Show all train names and times in stations in London in descending order by train time., station, Location, [London]
Picklist: What are the names of the stations which serve both "Ananthapuri Express" and "Guruvayur Express" trains?, train, Name, [Ananthapuri Express]
Picklist: What are the names of the stations which serve both "Ananthapuri Express" and "Guruvayur Express" trains?, train, Name, [Guruvayur Express]
Picklist: Find the names of the trains that do not pass any station located in London., station, Location, [London]
Picklist: What are the details of the car with id 1?, Vehicles, vehicle_details, [Car]
--------------------
text:  What are the details of the car with id 1?
sql:  SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1
ground truth values:  []
matched values OrderedDict([(64, ('Vehicles.vehicle_details', 'Car'))])
--------------------
Picklist: What is the birthday of the staff member with first name as Janessa and last name as Sawayn?, Staff, first_name, [Janessa]
Picklist: What is the birthday of the staff member with first name as Janessa and last name as Sawayn?, Staff, last_name, [Sawayn]
Picklist: What is the date of birth for the staff member named Janessa Sawayn?, Staff, first_name, [Janessa]
Picklist: What is the date of birth for the staff member named Janessa Sawayn?, Staff, last_name, [Sawayn]
Picklist: When did the staff member with first name as Janessa and last name as Sawayn join the company?, Staff, first_name, [Janessa]
Picklist: When did the staff member with first name as Janessa and last name as Sawayn join the company?, Staff, last_name, [Sawayn]
Picklist: When did the staff member named Janessa Sawayn join the company?, Staff, first_name, [Janessa]
Picklist: When did the staff member named Janessa Sawayn join the company?, Staff, last_name, [Sawayn]
Picklist: When did the staff member with first name as Janessa and last name as Sawayn leave the company?, Staff, first_name, [Janessa]
Picklist: When did the staff member with first name as Janessa and last name as Sawayn leave the company?, Staff, last_name, [Sawayn]
Picklist: When did the staff member Janessa Sawayn leave the company?, Staff, first_name, [Janessa]
Picklist: When did the staff member Janessa Sawayn leave the company?, Staff, last_name, [Sawayn]
Picklist: How many staff have the first name Ludie?, Staff, first_name, [Ludie]
Picklist: How many employees have a first name of Ludie?, Staff, first_name, [Ludie]
Picklist: What is the nickname of staff with first name as Janessa and last name as Sawayn?, Staff, first_name, [Janessa]
Picklist: What is the nickname of staff with first name as Janessa and last name as Sawayn?, Staff, last_name, [Sawayn]
Picklist: What is the nickname of the employee named Janessa Sawayn?, Staff, first_name, [Janessa]
Picklist: What is the nickname of the employee named Janessa Sawayn?, Staff, last_name, [Sawayn]
Picklist: Which city does staff with first name as Janessa and last name as Sawayn live?, Staff, first_name, [Janessa]
Picklist: Which city does staff with first name as Janessa and last name as Sawayn live?, Staff, last_name, [Sawayn]
Picklist: In what city does Janessa Sawayn live?, Staff, first_name, [Janessa]
Picklist: In what city does Janessa Sawayn live?, Staff, last_name, [Sawayn]
Picklist: Which country and state does staff with first name as Janessa and last name as Sawayn lived?, Staff, first_name, [Janessa]
Picklist: Which country and state does staff with first name as Janessa and last name as Sawayn lived?, Staff, last_name, [Sawayn]
Picklist: In which country and state does Janessa Sawayn live?, Staff, first_name, [Janessa]
Picklist: In which country and state does Janessa Sawayn live?, Staff, last_name, [Sawayn]
Picklist: How long is the total lesson time took by customer with first name as Rylan and last name as Goodwin?, Customers, first_name, [Rylan]
Picklist: How long is the total lesson time took by customer with first name as Rylan and last name as Goodwin?, Customers, last_name, [Goodwin]
Picklist: How long is the total lesson time took by the customer named Rylan Goodwin?, Customers, first_name, [Rylan]
Picklist: How long is the total lesson time took by the customer named Rylan Goodwin?, Customers, last_name, [Goodwin]
Picklist: What is the zip code of staff with first name as Janessa and last name as Sawayn lived?, Staff, first_name, [Janessa]
Picklist: What is the zip code of staff with first name as Janessa and last name as Sawayn lived?, Staff, last_name, [Sawayn]
Picklist: What is the zip code of the hosue of the employee named Janessa Sawayn?, Staff, first_name, [Janessa]
Picklist: What is the zip code of the hosue of the employee named Janessa Sawayn?, Staff, last_name, [Sawayn]
Picklist: How many staff live in state Georgia?, Addresses, state_province_county, [Georgia]
Picklist: How many employees live in Georgia?, Addresses, state_province_county, [Georgia]
Picklist: Find out the first name and last name of staff lived in city Damianfort., Addresses, city, [Damianfort]
Picklist: What is the first and last name of all employees who live in the city Damianfort?, Addresses, city, [Damianfort]
Picklist: List email address and birthday of customer whose first name as Carole., Customers, first_name, [Carole]
Picklist: What are the email addresses and date of births for all customers who have a first name of Carole?, Customers, first_name, [Carole]
Picklist: What is the status code, mobile phone number and email address of customer with last name as Kohler or first name as Marina?, Customers, first_name, [Marina]
Picklist: What is the status code, mobile phone number and email address of customer with last name as Kohler or first name as Marina?, Customers, last_name, [Kohler]
Picklist: What is the status code, phone number, and email address of the customer whose last name is Kohler or whose first name is Marina?, Customers, first_name, [Marina]
Picklist: What is the status code, phone number, and email address of the customer whose last name is Kohler or whose first name is Marina?, Customers, last_name, [Kohler]
Picklist: When are the birthdays of customer who are classified as 'Good Customer' status?, Customers, customer_status_code, [Good Customer]
Picklist: What is the date of birth of every customer whose status code is 'Good Customer'?, Customers, customer_status_code, [Good Customer]
 75%|███████▍  | 6670/8943 [14:33<01:07, 33.61it/s] 75%|███████▍  | 6677/8943 [14:33<00:58, 38.93it/s] 75%|███████▍  | 6683/8943 [14:34<00:56, 40.11it/s] 75%|███████▍  | 6688/8943 [14:34<00:58, 38.82it/s] 75%|███████▍  | 6693/8943 [14:34<00:56, 40.00it/s] 75%|███████▍  | 6699/8943 [14:34<00:51, 43.73it/s] 75%|███████▍  | 6704/8943 [14:34<00:53, 42.00it/s] 75%|███████▌  | 6709/8943 [14:34<00:55, 40.26it/s] 75%|███████▌  | 6715/8943 [14:34<00:52, 42.61it/s] 75%|███████▌  | 6725/8943 [14:34<00:43, 50.93it/s] 75%|███████▌  | 6732/8943 [14:35<00:41, 53.81it/s] 75%|███████▌  | 6739/8943 [14:35<00:38, 57.29it/s]Picklist: When did customer with first name as Carole and last name as Bernhard became a customer?, Customers, first_name, [Carole]
Picklist: When did customer with first name as Carole and last name as Bernhard became a customer?, Customers, last_name, [Bernhard]
Picklist: When did Carole Bernhard first become a customer?, Customers, first_name, [Carole]
Picklist: When did Carole Bernhard first become a customer?, Customers, last_name, [Bernhard]
Picklist: How many lessons taken by customer with first name as Rylan and last name as Goodwin were completed?, Customers, first_name, [Rylan]
Picklist: How many lessons taken by customer with first name as Rylan and last name as Goodwin were completed?, Customers, last_name, [Goodwin]
Picklist: How many lessons taken by customer with first name as Rylan and last name as Goodwin were completed?, Lessons, lesson_status_code, [Completed]
Picklist: How many lessons did the customer Ryan Goodwin complete?, Customers, last_name, [Goodwin]
Picklist: How many lessons did the customer Ryan Goodwin complete?, Lessons, lesson_status_code, [Completed]
--------------------
text:  How many lessons did the customer Ryan Goodwin complete?
sql:  SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = "Rylan" AND T2.last_name = "Goodwin" AND T1.lesson_status_code = "Completed"
ground truth values:  [('Customers.first_name', 'Rylan'), ('Customers.last_name', 'Goodwin'), ('Lessons.lesson_status_code', 'Completed')]
matched values OrderedDict([(91, ('Customers.last_name', 'Goodwin')), (136, ('Lessons.lesson_status_code', 'Completed'))])
--------------------
Picklist: List first name and last name of customers lived in city Lockmanfurt., Addresses, city, [Lockmanfurt]
Picklist: What are the first and last names of all customers who lived in Lockmanfurt?, Addresses, city, [Lockmanfurt]
Picklist: Which country does customer with first name as Carole and last name as Bernhard lived in?, Customers, first_name, [Carole]
Picklist: Which country does customer with first name as Carole and last name as Bernhard lived in?, Customers, last_name, [Bernhard]
Picklist: What is the country in which the customer Carole Bernhard lived?, Customers, first_name, [Carole]
Picklist: What is the country in which the customer Carole Bernhard lived?, Customers, last_name, [Bernhard]
Picklist: What is zip code of customer with first name as Carole and last name as Bernhard?, Customers, first_name, [Carole]
Picklist: What is zip code of customer with first name as Carole and last name as Bernhard?, Customers, last_name, [Bernhard]
Picklist: What is the zip code of the customer Carole Bernhard?, Customers, first_name, [Carole]
Picklist: What is the zip code of the customer Carole Bernhard?, Customers, last_name, [Bernhard]
Picklist: How much in total does customer with first name as Carole and last name as Bernhard paid?, Customers, first_name, [Carole]
Picklist: How much in total does customer with first name as Carole and last name as Bernhard paid?, Customers, last_name, [Bernhard]
Picklist: What is the total amount of moeny paid by the customer Carole Bernhard?, Customers, first_name, [Carole]
Picklist: What is the total amount of moeny paid by the customer Carole Bernhard?, Customers, last_name, [Bernhard]
Picklist: How many lessons were in cancelled state?, Lessons, lesson_status_code, [Cancelled]
Picklist: How many lessons have been cancelled?, Lessons, lesson_status_code, [Cancelled]
Picklist: List lesson id of all lessons taught by staff with first name as Janessa, last name as Sawayn and nickname containing letter 's'., Staff, first_name, [Janessa]
Picklist: List lesson id of all lessons taught by staff with first name as Janessa, last name as Sawayn and nickname containing letter 's'., Staff, last_name, [Sawayn]
Picklist: What are the the lesson ids of all staff taught by Janessa Sawayn whose nickname has the letter s?, Staff, first_name, [Janessa]
Picklist: What are the the lesson ids of all staff taught by Janessa Sawayn whose nickname has the letter s?, Staff, last_name, [Sawayn]
Picklist: How long is the total lesson time taught by staff with first name as Janessa and last name as Sawayn?, Staff, first_name, [Janessa]
Picklist: How long is the total lesson time taught by staff with first name as Janessa and last name as Sawayn?, Staff, last_name, [Sawayn]
Picklist: What is the total time for all lessons taught by Janessa Sawayn?, Staff, first_name, [Janessa]
Picklist: What is the total time for all lessons taught by Janessa Sawayn?, Staff, last_name, [Sawayn]
Picklist: What is average lesson price taught by staff with first name as Janessa and last name as Sawayn?, Staff, first_name, [Janessa]
Picklist: What is average lesson price taught by staff with first name as Janessa and last name as Sawayn?, Staff, last_name, [Sawayn]
Picklist: What is the average price for a lesson taught by Janessa Sawayn?, Staff, first_name, [Janessa]
Picklist: What is the average price for a lesson taught by Janessa Sawayn?, Staff, last_name, [Sawayn]
Picklist: How many lesson does customer with first name Ray took?, Customers, first_name, [Ray]
Picklist: How many lessons did the customer with the first name Ray take?, Customers, first_name, [Ray]
--------------------
text:  Show the first name, last name, and phone number for all female faculty members.
sql:  SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  'F'
ground truth values:  [('Faculty.Sex', 'F')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the first name, last name, and phone number of all the female faculty members?
sql:  SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  'F'
ground truth values:  [('Faculty.Sex', 'F')]
matched values OrderedDict()
--------------------
--------------------
text:  Show ids for all the male faculty.
sql:  SELECT FacID FROM Faculty WHERE Sex  =  'M'
ground truth values:  [('Faculty.Sex', 'M')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the faculty ids of all the male faculty members?
sql:  SELECT FacID FROM Faculty WHERE Sex  =  'M'
ground truth values:  [('Faculty.Sex', 'M')]
matched values OrderedDict()
--------------------
Picklist: How many female Professors do we have?, Faculty, Rank, [Professor]
--------------------
text:  How many female Professors do we have?
sql:  SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  "Professor"
ground truth values:  [('Faculty.Sex', 'F'), ('Faculty.Rank', 'Professor')]
matched values OrderedDict([(64, ('Faculty.Rank', 'Professor'))])
--------------------
Picklist: Count the number of female Professors we have., Faculty, Rank, [Professor]
--------------------
text:  Count the number of female Professors we have.
sql:  SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  "Professor"
ground truth values:  [('Faculty.Sex', 'F'), ('Faculty.Rank', 'Professor')]
matched values OrderedDict([(64, ('Faculty.Rank', 'Professor'))])
--------------------
Picklist: Show the phone, room, and building for the faculty named Jerry Prince., Faculty, Lname, [Prince]
Picklist: Show the phone, room, and building for the faculty named Jerry Prince., Faculty, Fname, [Jerry]
Picklist: What are the phone, room, and building of the faculty member called Jerry Prince?, Faculty, Lname, [Prince]
Picklist: What are the phone, room, and building of the faculty member called Jerry Prince?, Faculty, Fname, [Jerry]
Picklist: How many Professors are in building NEB?, Faculty, Rank, [Professor]
Picklist: How many Professors are in building NEB?, Faculty, Building, [NEB]
Picklist: Count the number of Professors who have office in building NEB., Faculty, Rank, [Professor]
Picklist: Count the number of Professors who have office in building NEB., Faculty, Building, [NEB]
Picklist: Show the first name and last name for all the instructors., Faculty, Rank, [Instructor]
Picklist: What are the first name and last name of all the instructors?, Faculty, Rank, [Instructor]
Picklist: Show all the buildings that have at least 10 professors., Faculty, Rank, [Professor]
 75%|███████▌  | 6746/8943 [14:35<00:36, 59.75it/s] 76%|███████▌  | 6753/8943 [14:35<00:38, 56.47it/s] 76%|███████▌  | 6759/8943 [14:35<00:40, 53.58it/s] 76%|███████▌  | 6765/8943 [14:35<00:40, 53.73it/s] 76%|███████▌  | 6775/8943 [14:35<00:34, 62.15it/s] 76%|███████▌  | 6782/8943 [14:35<00:40, 53.47it/s] 76%|███████▌  | 6788/8943 [14:36<00:41, 52.04it/s] 76%|███████▌  | 6794/8943 [14:36<00:41, 51.91it/s]Picklist: In which buildings are there at least ten professors?, Faculty, Rank, [Professor]
Picklist: Show the number of male and female assistant professors., Faculty, Rank, [Professor]
--------------------
text:  Show the number of male and female assistant professors.
sql:  SELECT sex ,  count(*) FROM Faculty WHERE rank  =  "AsstProf" GROUP BY sex
ground truth values:  [('Faculty.Rank', 'AsstProf')]
matched values OrderedDict([(64, ('Faculty.Rank', 'Professor'))])
--------------------
Picklist: How many male and female assistant professors do we have?, Faculty, Rank, [Professor]
--------------------
text:  How many male and female assistant professors do we have?
sql:  SELECT sex ,  count(*) FROM Faculty WHERE rank  =  "AsstProf" GROUP BY sex
ground truth values:  [('Faculty.Rank', 'AsstProf')]
matched values OrderedDict([(64, ('Faculty.Rank', 'Professor'))])
--------------------
Picklist: What are the first name and last name of Linda Smith's advisor?, Student, LName, [Smith]
Picklist: What are the first name and last name of Linda Smith's advisor?, Student, Fname, [Linda]
Picklist: What are the first name and last name of Linda Smith's advisor?, Faculty, Lname, [Smith]
--------------------
text:  What are the first name and last name of Linda Smith's advisor?
sql:  SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  "Linda" AND T2.lname  =  "Smith"
ground truth values:  [('Student.Fname', 'Linda'), ('Student.LName', 'Smith')]
matched values OrderedDict([(37, ('Student.LName', 'Smith')), (42, ('Student.Fname', 'Linda')), (63, ('Faculty.Lname', 'Smith'))])
--------------------
Picklist: Who is the advisor of Linda Smith? Give me the first name and last name., Student, LName, [Smith]
Picklist: Who is the advisor of Linda Smith? Give me the first name and last name., Student, Fname, [Linda]
Picklist: Who is the advisor of Linda Smith? Give me the first name and last name., Faculty, Lname, [Smith]
--------------------
text:  Who is the advisor of Linda Smith? Give me the first name and last name.
sql:  SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  "Linda" AND T2.lname  =  "Smith"
ground truth values:  [('Student.Fname', 'Linda'), ('Student.LName', 'Smith')]
matched values OrderedDict([(37, ('Student.LName', 'Smith')), (42, ('Student.Fname', 'Linda')), (63, ('Faculty.Lname', 'Smith'))])
--------------------
Picklist: Show the ids of students whose advisors are professors., Faculty, Rank, [Professor]
Picklist: Which students have professors as their advisors? Find their student ids., Faculty, Rank, [Professor]
Picklist: Show first name and last name for all the students advised by Michael Goodrich., Student, Fname, [Michael]
Picklist: Show first name and last name for all the students advised by Michael Goodrich., Faculty, Lname, [Goodrich]
Picklist: Show first name and last name for all the students advised by Michael Goodrich., Faculty, Fname, [Michael]
--------------------
text:  Show first name and last name for all the students advised by Michael Goodrich.
sql:  SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  "Michael" AND T1.lname  =  "Goodrich"
ground truth values:  [('Faculty.Fname', 'Michael'), ('Faculty.Lname', 'Goodrich')]
matched values OrderedDict([(40, ('Student.Fname', 'Michael')), (61, ('Faculty.Lname', 'Goodrich')), (67, ('Faculty.Fname', 'Michael'))])
--------------------
Picklist: Which students are advised by Michael Goodrich? Give me their first and last names., Student, Fname, [Michael]
Picklist: Which students are advised by Michael Goodrich? Give me their first and last names., Faculty, Lname, [Goodrich]
Picklist: Which students are advised by Michael Goodrich? Give me their first and last names., Faculty, Fname, [Michael]
--------------------
text:  Which students are advised by Michael Goodrich? Give me their first and last names.
sql:  SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  "Michael" AND T1.lname  =  "Goodrich"
ground truth values:  [('Faculty.Fname', 'Michael'), ('Faculty.Lname', 'Goodrich')]
matched values OrderedDict([(40, ('Student.Fname', 'Michael')), (61, ('Faculty.Lname', 'Goodrich')), (67, ('Faculty.Fname', 'Michael'))])
--------------------
Picklist: How many activities does Mark Giuliano participate in?, Student, Fname, [Mark]
Picklist: How many activities does Mark Giuliano participate in?, Faculty, Lname, [Giuliano]
Picklist: How many activities does Mark Giuliano participate in?, Faculty, Fname, [Mark]
--------------------
text:  How many activities does Mark Giuliano participate in?
sql:  SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  "Mark" AND T1.lname  =  "Giuliano"
ground truth values:  [('Faculty.Fname', 'Mark'), ('Faculty.Lname', 'Giuliano')]
matched values OrderedDict([(40, ('Student.Fname', 'Mark')), (61, ('Faculty.Lname', 'Giuliano')), (68, ('Faculty.Fname', 'Mark'))])
--------------------
Picklist: Find the number of activities Mark Giuliano is involved in., Student, Fname, [Mark]
Picklist: Find the number of activities Mark Giuliano is involved in., Faculty, Lname, [Giuliano]
Picklist: Find the number of activities Mark Giuliano is involved in., Faculty, Fname, [Mark]
--------------------
text:  Find the number of activities Mark Giuliano is involved in.
sql:  SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  "Mark" AND T1.lname  =  "Giuliano"
ground truth values:  [('Faculty.Fname', 'Mark'), ('Faculty.Lname', 'Giuliano')]
matched values OrderedDict([(40, ('Student.Fname', 'Mark')), (61, ('Faculty.Lname', 'Giuliano')), (68, ('Faculty.Fname', 'Mark'))])
--------------------
Picklist: Show the names of all the activities Mark Giuliano participates in., Student, Fname, [Mark]
Picklist: Show the names of all the activities Mark Giuliano participates in., Faculty, Lname, [Giuliano]
Picklist: Show the names of all the activities Mark Giuliano participates in., Faculty, Fname, [Mark]
--------------------
text:  Show the names of all the activities Mark Giuliano participates in.
sql:  SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  "Mark" AND T1.lname  =  "Giuliano"
ground truth values:  [('Faculty.Fname', 'Mark'), ('Faculty.Lname', 'Giuliano')]
matched values OrderedDict([(40, ('Student.Fname', 'Mark')), (61, ('Faculty.Lname', 'Giuliano')), (68, ('Faculty.Fname', 'Mark'))])
--------------------
Picklist: What are the names of the activities Mark Giuliano is involved in, Student, Fname, [Mark]
Picklist: What are the names of the activities Mark Giuliano is involved in, Faculty, Lname, [Giuliano]
Picklist: What are the names of the activities Mark Giuliano is involved in, Faculty, Fname, [Mark]
--------------------
text:  What are the names of the activities Mark Giuliano is involved in
sql:  SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  "Mark" AND T1.lname  =  "Giuliano"
ground truth values:  [('Faculty.Fname', 'Mark'), ('Faculty.Lname', 'Giuliano')]
matched values OrderedDict([(40, ('Student.Fname', 'Mark')), (61, ('Faculty.Lname', 'Giuliano')), (68, ('Faculty.Fname', 'Mark'))])
--------------------
Picklist: Find the first names of the faculty members who are playing Canoeing or Kayaking., Activity, activity_name, [Canoeing]
Picklist: Find the first names of the faculty members who are playing Canoeing or Kayaking., Activity, activity_name, [Kayaking]
Picklist: Which faculty members are playing either Canoeing or Kayaking? Tell me their first names., Activity, activity_name, [Canoeing]
Picklist: Which faculty members are playing either Canoeing or Kayaking? Tell me their first names., Activity, activity_name, [Kayaking]
 76%|███████▌  | 6800/8943 [14:36<00:47, 45.08it/s] 76%|███████▌  | 6805/8943 [14:38<06:12,  5.75it/s] 76%|███████▌  | 6809/8943 [14:43<16:23,  2.17it/s] 76%|███████▌  | 6812/8943 [14:46<22:02,  1.61it/s]Picklist: Find the first names of professors who are not playing Canoeing or Kayaking., Activity, activity_name, [Canoeing]
Picklist: Find the first names of professors who are not playing Canoeing or Kayaking., Activity, activity_name, [Kayaking]
Picklist: Find the first names of professors who are not playing Canoeing or Kayaking., Faculty, Rank, [Professor]
Picklist: What are the first names of the professors who do not play Canoeing or Kayaking as activities?, Activity, activity_name, [Canoeing]
Picklist: What are the first names of the professors who do not play Canoeing or Kayaking as activities?, Activity, activity_name, [Kayaking]
Picklist: What are the first names of the professors who do not play Canoeing or Kayaking as activities?, Faculty, Rank, [Professor]
Picklist: Find the first names of the faculty members who participate in Canoeing and Kayaking., Activity, activity_name, [Canoeing]
Picklist: Find the first names of the faculty members who participate in Canoeing and Kayaking., Activity, activity_name, [Kayaking]
Picklist: What are the first names of the faculty members playing both Canoeing and Kayaking?, Activity, activity_name, [Canoeing]
Picklist: What are the first names of the faculty members playing both Canoeing and Kayaking?, Activity, activity_name, [Kayaking]
Picklist: Find the ids of the students who participate in Canoeing and Kayaking., Activity, activity_name, [Canoeing]
Picklist: Find the ids of the students who participate in Canoeing and Kayaking., Activity, activity_name, [Kayaking]
Picklist: Which students participate in both Canoeing and Kayaking as their activities? Tell me their student ids., Activity, activity_name, [Canoeing]
Picklist: Which students participate in both Canoeing and Kayaking as their activities? Tell me their student ids., Activity, activity_name, [Kayaking]
Picklist: Find the name of the airport in the city of Goroka., airports, city, [Goroka]
Picklist: Find the name of the airport in the city of Goroka., airlines, callsign, [CITY]
--------------------
text:  Find the name of the airport in the city of Goroka.
sql:  SELECT name FROM airports WHERE city  =  'Goroka'
ground truth values:  [('airports.city', 'Goroka')]
matched values OrderedDict([(38, ('airports.city', 'Goroka')), (68, ('airlines.callsign', 'CITY'))])
--------------------
Picklist: What are the names of the airports in the city of Goroka?, airports, city, [Goroka]
Picklist: What are the names of the airports in the city of Goroka?, airports, city, [Namest]
Picklist: What are the names of the airports in the city of Goroka?, airlines, callsign, [CITY]
--------------------
text:  What are the names of the airports in the city of Goroka?
sql:  SELECT name FROM airports WHERE city  =  'Goroka'
ground truth values:  [('airports.city', 'Goroka')]
matched values OrderedDict([(38, ('airports.city', 'Goroka')), (42, ('airports.city', 'Namest')), (71, ('airlines.callsign', 'CITY'))])
--------------------
Picklist: Find the name, city, country, and altitude (or elevation) of the airports in the city of New York., airports, city, [New York]
Picklist: Find the name, city, country, and altitude (or elevation) of the airports in the city of New York., airports, city, [York]
Picklist: Find the name, city, country, and altitude (or elevation) of the airports in the city of New York., airports, iata, [NEW]
Picklist: Find the name, city, country, and altitude (or elevation) of the airports in the city of New York., airlines, callsign, [NEW YORK]
Picklist: Find the name, city, country, and altitude (or elevation) of the airports in the city of New York., airlines, callsign, [CITY]
--------------------
text:  Find the name, city, country, and altitude (or elevation) of the airports in the city of New York.
sql:  SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'
ground truth values:  [('airports.city', 'New York')]
matched values OrderedDict([(38, ('airports.city', 'New York')), (41, ('airports.city', 'York')), (53, ('airports.iata', 'NEW')), (71, ('airlines.callsign', 'NEW YORK')), (74, ('airlines.callsign', 'CITY'))])
--------------------
Picklist: What is the name, city, country, and elevation for every airport in the city of New York?, airports, city, [New York]
Picklist: What is the name, city, country, and elevation for every airport in the city of New York?, airports, city, [York]
Picklist: What is the name, city, country, and elevation for every airport in the city of New York?, airports, iata, [NEW]
Picklist: What is the name, city, country, and elevation for every airport in the city of New York?, airlines, callsign, [NEW YORK]
Picklist: What is the name, city, country, and elevation for every airport in the city of New York?, airlines, callsign, [CITY]
--------------------
text:  What is the name, city, country, and elevation for every airport in the city of New York?
sql:  SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'
ground truth values:  [('airports.city', 'New York')]
matched values OrderedDict([(38, ('airports.city', 'New York')), (41, ('airports.city', 'York')), (53, ('airports.iata', 'NEW')), (71, ('airlines.callsign', 'NEW YORK')), (74, ('airlines.callsign', 'CITY'))])
--------------------
Picklist: What is the total number of airlines?, airlines, callsign, [TOTAL]
--------------------
text:  What is the total number of airlines?
sql:  SELECT count(*) FROM airlines
ground truth values:  []
matched values OrderedDict([(64, ('airlines.callsign', 'TOTAL'))])
--------------------
Picklist: How many airlines does Russia has?, airports, country, [Russia]
Picklist: How many airlines does Russia has?, airlines, country, [Russia]
--------------------
text:  How many airlines does Russia has?
sql:  SELECT count(*) FROM airlines WHERE country  =  'Russia'
ground truth values:  [('airlines.country', 'Russia')]
matched values OrderedDict([(40, ('airports.country', 'Russia')), (68, ('airlines.country', 'Russia'))])
--------------------
Picklist: What is the number of airlines based in Russia?, airports, country, [Russia]
Picklist: What is the number of airlines based in Russia?, airlines, country, [Russia]
--------------------
text:  What is the number of airlines based in Russia?
sql:  SELECT count(*) FROM airlines WHERE country  =  'Russia'
ground truth values:  [('airlines.country', 'Russia')]
matched values OrderedDict([(40, ('airports.country', 'Russia')), (68, ('airlines.country', 'Russia'))])
--------------------
Picklist: What is the maximum elevation of all airports in the country of Iceland?, airports, country, [Iceland]
Picklist: What is the maximum elevation of all airports in the country of Iceland?, airlines, country, [Iceland]
--------------------
text:  What is the maximum elevation of all airports in the country of Iceland?
sql:  SELECT max(elevation) FROM airports WHERE country  =  'Iceland'
ground truth values:  [('airports.country', 'Iceland')]
matched values OrderedDict([(40, ('airports.country', 'Iceland')), (68, ('airlines.country', 'Iceland'))])
--------------------
Picklist: What is the highest elevation of an airport in the country of Iceland?, airports, country, [Iceland]
Picklist: What is the highest elevation of an airport in the country of Iceland?, airlines, country, [Iceland]
--------------------
text:  What is the highest elevation of an airport in the country of Iceland?
sql:  SELECT max(elevation) FROM airports WHERE country  =  'Iceland'
ground truth values:  [('airports.country', 'Iceland')]
matched values OrderedDict([(40, ('airports.country', 'Iceland')), (68, ('airlines.country', 'Iceland'))])
--------------------
Picklist: Find the name of the airports located in Cuba or Argentina., airports, country, [Argentina]
Picklist: Find the name of the airports located in Cuba or Argentina., airports, country, [Cuba]
Picklist: Find the name of the airports located in Cuba or Argentina., airlines, callsign, [ARGENTINA]
Picklist: Find the name of the airports located in Cuba or Argentina., airlines, country, [Argentina]
Picklist: Find the name of the airports located in Cuba or Argentina., airlines, country, [Cuba]
 76%|███████▌  | 6814/8943 [14:48<28:16,  1.26it/s] 76%|███████▌  | 6816/8943 [14:51<31:38,  1.12it/s] 76%|███████▌  | 6817/8943 [14:52<34:50,  1.02it/s] 76%|███████▌  | 6818/8943 [14:53<36:31,  1.03s/it] 76%|███████▌  | 6819/8943 [14:54<38:50,  1.10s/it] 76%|███████▋  | 6820/8943 [14:55<40:13,  1.14s/it] 76%|███████▋  | 6821/8943 [14:57<40:03,  1.13s/it] 76%|███████▋  | 6822/8943 [14:58<41:24,  1.17s/it] 76%|███████▋  | 6823/8943 [14:59<40:55,  1.16s/it] 76%|███████▋  | 6824/8943 [15:00<42:21,  1.20s/it] 76%|███████▋  | 6825/8943 [15:01<42:36,  1.21s/it] 76%|███████▋  | 6826/8943 [15:03<40:55,  1.16s/it] 76%|███████▋  | 6827/8943 [15:04<39:02,  1.11s/it] 76%|███████▋  | 6828/8943 [15:05<40:05,  1.14s/it] 76%|███████▋  | 6829/8943 [15:06<38:19,  1.09s/it] 76%|███████▋  | 6830/8943 [15:07<40:44,  1.16s/it]--------------------
text:  Find the name of the airports located in Cuba or Argentina.
sql:  SELECT name FROM airports WHERE country  =  'Cuba' OR country  =  'Argentina'
ground truth values:  [('airports.country', 'Cuba'), ('airports.country', 'Argentina')]
matched values OrderedDict([(40, ('airports.country', 'Argentina')), (42, ('airports.country', 'Cuba')), (68, ('airlines.callsign', 'ARGENTINA')), (72, ('airlines.country', 'Argentina')), (74, ('airlines.country', 'Cuba'))])
--------------------
Picklist: What are the names of all airports in Cuba or Argentina?, airports, city, [Namest]
Picklist: What are the names of all airports in Cuba or Argentina?, airports, country, [Argentina]
Picklist: What are the names of all airports in Cuba or Argentina?, airports, country, [Cuba]
Picklist: What are the names of all airports in Cuba or Argentina?, airlines, callsign, [ARGENTINA]
Picklist: What are the names of all airports in Cuba or Argentina?, airlines, country, [Argentina]
Picklist: What are the names of all airports in Cuba or Argentina?, airlines, country, [Cuba]
--------------------
text:  What are the names of all airports in Cuba or Argentina?
sql:  SELECT name FROM airports WHERE country  =  'Cuba' OR country  =  'Argentina'
ground truth values:  [('airports.country', 'Cuba'), ('airports.country', 'Argentina')]
matched values OrderedDict([(38, ('airports.city', 'Namest')), (43, ('airports.country', 'Argentina')), (45, ('airports.country', 'Cuba')), (71, ('airlines.callsign', 'ARGENTINA')), (75, ('airlines.country', 'Argentina')), (77, ('airlines.country', 'Cuba'))])
--------------------
Picklist: Find the country of the airlines whose name starts with 'Orbit'., airlines, callsign, [Orbit]
--------------------
text:  Find the country of the airlines whose name starts with 'Orbit'.
sql:  SELECT country FROM airlines WHERE name LIKE 'Orbit%'
ground truth values:  []
matched values OrderedDict([(64, ('airlines.callsign', 'Orbit'))])
--------------------
Picklist: What are the countries of all airlines whose names start with Orbit?, airports, city, [Namest]
Picklist: What are the countries of all airlines whose names start with Orbit?, airlines, callsign, [Orbit]
--------------------
text:  What are the countries of all airlines whose names start with Orbit?
sql:  SELECT country FROM airlines WHERE name LIKE 'Orbit%'
ground truth values:  []
matched values OrderedDict([(38, ('airports.city', 'Namest')), (67, ('airlines.callsign', 'Orbit'))])
--------------------
Picklist: What are the names of all airports whose elevation is between -50 and 50?, airports, city, [Namest]
--------------------
text:  What are the names of all airports whose elevation is between -50 and 50?
sql:  SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50
ground truth values:  []
matched values OrderedDict([(38, ('airports.city', 'Namest'))])
--------------------
Picklist: How many airports' names have the word Interanation in them?, airports, city, [Namest]
--------------------
text:  How many airports' names have the word Interanation in them?
sql:  SELECT count(*) FROM airports WHERE name LIKE '%International%'
ground truth values:  []
matched values OrderedDict([(38, ('airports.city', 'Namest'))])
--------------------
Picklist: How many different cities do have some airport in the country of Greenland?, airports, country, [Greenland]
Picklist: How many different cities do have some airport in the country of Greenland?, airlines, callsign, [GREENLAND]
--------------------
text:  How many different cities do have some airport in the country of Greenland?
sql:  SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'
ground truth values:  [('airports.country', 'Greenland')]
matched values OrderedDict([(40, ('airports.country', 'Greenland')), (66, ('airlines.callsign', 'GREENLAND'))])
--------------------
Picklist: In how many cities are there airports in the country of Greenland?, airports, country, [Greenland]
Picklist: In how many cities are there airports in the country of Greenland?, airlines, callsign, [GREENLAND]
--------------------
text:  In how many cities are there airports in the country of Greenland?
sql:  SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'
ground truth values:  [('airports.country', 'Greenland')]
matched values OrderedDict([(40, ('airports.country', 'Greenland')), (66, ('airlines.callsign', 'GREENLAND'))])
--------------------
Picklist: Find the number of routes operated by American Airlines., airports, city, [Americana]
Picklist: Find the number of routes operated by American Airlines., airlines, name, [American Airlines]
Picklist: Find the number of routes operated by American Airlines., airlines, callsign, [AMERICAN]
--------------------
text:  Find the number of routes operated by American Airlines.
sql:  SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'
ground truth values:  [('airlines.name', 'American Airlines')]
matched values OrderedDict([(38, ('airports.city', 'Americana')), (59, ('airlines.name', 'American Airlines')), (69, ('airlines.callsign', 'AMERICAN'))])
--------------------
Picklist: How many routes does American Airlines operate?, airports, city, [Americana]
Picklist: How many routes does American Airlines operate?, airlines, name, [American Airlines]
Picklist: How many routes does American Airlines operate?, airlines, callsign, [AMERICAN]
--------------------
text:  How many routes does American Airlines operate?
sql:  SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'
ground truth values:  [('airlines.name', 'American Airlines')]
matched values OrderedDict([(38, ('airports.city', 'Americana')), (59, ('airlines.name', 'American Airlines')), (69, ('airlines.callsign', 'AMERICAN'))])
--------------------
Picklist: Find the number of routes whose destination airports are in Canada., airports, country, [Canada]
Picklist: Find the number of routes whose destination airports are in Canada., airlines, callsign, [Canadian]
Picklist: Find the number of routes whose destination airports are in Canada., airlines, country, [Canada]
--------------------
text:  Find the number of routes whose destination airports are in Canada.
sql:  SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'
ground truth values:  [('airports.country', 'Canada')]
matched values OrderedDict([(40, ('airports.country', 'Canada')), (66, ('airlines.callsign', 'Canadian')), (70, ('airlines.country', 'Canada'))])
--------------------
Picklist: How many routes end in a Canadian airport?, airports, city, [Ende]
Picklist: How many routes end in a Canadian airport?, airports, city, [Enid]
Picklist: How many routes end in a Canadian airport?, airports, iata, [END]
Picklist: How many routes end in a Canadian airport?, airlines, icao, [END]
Picklist: How many routes end in a Canadian airport?, airlines, callsign, [Canadian]
Picklist: How many routes end in a Canadian airport?, airlines, callsign, [CANADIAN]
--------------------
text:  How many routes end in a Canadian airport?
sql:  SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'
ground truth values:  [('airports.country', 'Canada')]
matched values OrderedDict([(38, ('airports.city', 'Ende')), (41, ('airports.city', 'Enid')), (54, ('airports.iata', 'END')), (69, ('airlines.icao', 'END')), (74, ('airlines.callsign', 'Canadian')), (76, ('airlines.callsign', 'CANADIAN'))])
--------------------
Picklist: Find the name, city, and country of the airport that has the lowest altitude., airlines, callsign, [CITY]
--------------------
text:  Find the name, city, and country of the airport that has the lowest altitude.
sql:  SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1
ground truth values:  []
matched values OrderedDict([(64, ('airlines.callsign', 'CITY'))])
--------------------
Picklist: What is the name, city, and country of the airport with the lowest altitude?, airlines, callsign, [CITY]
--------------------
 76%|███████▋  | 6831/8943 [15:08<42:11,  1.20s/it] 76%|███████▋  | 6832/8943 [15:10<43:32,  1.24s/it] 76%|███████▋  | 6833/8943 [15:11<44:25,  1.26s/it] 76%|███████▋  | 6834/8943 [15:12<47:07,  1.34s/it] 76%|███████▋  | 6835/8943 [15:14<46:17,  1.32s/it] 76%|███████▋  | 6836/8943 [15:15<45:49,  1.30s/it] 76%|███████▋  | 6837/8943 [15:16<46:05,  1.31s/it] 76%|███████▋  | 6838/8943 [15:18<48:23,  1.38s/it] 76%|███████▋  | 6839/8943 [15:19<47:12,  1.35s/it] 76%|███████▋  | 6840/8943 [15:21<48:37,  1.39s/it] 76%|███████▋  | 6841/8943 [15:22<50:22,  1.44s/it] 77%|███████▋  | 6842/8943 [15:23<44:52,  1.28s/it] 77%|███████▋  | 6843/8943 [15:24<43:52,  1.25s/it] 77%|███████▋  | 6844/8943 [15:26<43:35,  1.25s/it] 77%|███████▋  | 6845/8943 [15:27<43:09,  1.23s/it] 77%|███████▋  | 6846/8943 [15:28<46:06,  1.32s/it] 77%|███████▋  | 6847/8943 [15:29<44:21,  1.27s/it]text:  What is the name, city, and country of the airport with the lowest altitude?
sql:  SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1
ground truth values:  []
matched values OrderedDict([(64, ('airlines.callsign', 'CITY'))])
--------------------
Picklist: Find the name, city, and country of the airport that has the highest latitude., airlines, callsign, [CITY]
--------------------
text:  Find the name, city, and country of the airport that has the highest latitude.
sql:  SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(64, ('airlines.callsign', 'CITY'))])
--------------------
Picklist: What is the name, city, and country of the airport with the highest elevation?, airlines, callsign, [CITY]
--------------------
text:  What is the name, city, and country of the airport with the highest elevation?
sql:  SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(64, ('airlines.callsign', 'CITY'))])
--------------------
Picklist: Find the name and city of the airport which is the destination of the most number of routes., airlines, callsign, [CITY]
--------------------
text:  Find the name and city of the airport which is the destination of the most number of routes.
sql:  SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(64, ('airlines.callsign', 'CITY'))])
--------------------
Picklist: What is the name and city of the airport that the most routes end at?, airports, city, [Ende]
Picklist: What is the name and city of the airport that the most routes end at?, airports, city, [Enid]
Picklist: What is the name and city of the airport that the most routes end at?, airports, iata, [END]
Picklist: What is the name and city of the airport that the most routes end at?, airlines, icao, [END]
Picklist: What is the name and city of the airport that the most routes end at?, airlines, callsign, [CITY]
--------------------
text:  What is the name and city of the airport that the most routes end at?
sql:  SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(38, ('airports.city', 'Ende')), (41, ('airports.city', 'Enid')), (54, ('airports.iata', 'END')), (69, ('airlines.icao', 'END')), (74, ('airlines.callsign', 'CITY'))])
--------------------
Picklist: Find the names of the top 10 airlines that operate the most number of routes., airports, city, [Namest]
Picklist: Find the names of the top 10 airlines that operate the most number of routes., airports, iata, [TOP]
Picklist: Find the names of the top 10 airlines that operate the most number of routes., airlines, icao, [TOP]
--------------------
text:  Find the names of the top 10 airlines that operate the most number of routes.
sql:  SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10
ground truth values:  []
matched values OrderedDict([(38, ('airports.city', 'Namest')), (51, ('airports.iata', 'TOP')), (66, ('airlines.icao', 'TOP'))])
--------------------
Picklist: For the airline ids with the top 10 most routes operated, what are their names?, airports, city, [Namest]
Picklist: For the airline ids with the top 10 most routes operated, what are their names?, airports, iata, [TOP]
Picklist: For the airline ids with the top 10 most routes operated, what are their names?, airlines, icao, [TOP]
Picklist: For the airline ids with the top 10 most routes operated, what are their names?, airlines, icao, [IDS]
--------------------
text:  For the airline ids with the top 10 most routes operated, what are their names?
sql:  SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10
ground truth values:  []
matched values OrderedDict([(38, ('airports.city', 'Namest')), (51, ('airports.iata', 'TOP')), (66, ('airlines.icao', 'TOP')), (68, ('airlines.icao', 'IDS'))])
--------------------
Picklist: Find the name and city of the airport which is the source for the most number of flight routes., airports, city, [Soure]
Picklist: Find the name and city of the airport which is the source for the most number of flight routes., airlines, callsign, [CITY]
--------------------
text:  Find the name and city of the airport which is the source for the most number of flight routes.
sql:  SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(38, ('airports.city', 'Soure')), (67, ('airlines.callsign', 'CITY'))])
--------------------
Picklist: What is the name and city of the airport from most of the routes start?, airlines, callsign, [CITY]
--------------------
text:  What is the name and city of the airport from most of the routes start?
sql:  SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(64, ('airlines.callsign', 'CITY'))])
--------------------
Picklist: Find the number of different airports which are the destinations of the American Airlines., airports, city, [Americana]
Picklist: Find the number of different airports which are the destinations of the American Airlines., airlines, name, [American Airlines]
Picklist: Find the number of different airports which are the destinations of the American Airlines., airlines, callsign, [AMERICAN]
--------------------
text:  Find the number of different airports which are the destinations of the American Airlines.
sql:  SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'
ground truth values:  [('airlines.name', 'American Airlines')]
matched values OrderedDict([(38, ('airports.city', 'Americana')), (59, ('airlines.name', 'American Airlines')), (69, ('airlines.callsign', 'AMERICAN'))])
--------------------
Picklist: What is the number of different different airports that are destinations for American Airlines?, airports, city, [Americana]
Picklist: What is the number of different different airports that are destinations for American Airlines?, airlines, name, [American Airlines]
Picklist: What is the number of different different airports that are destinations for American Airlines?, airlines, callsign, [AMERICAN]
--------------------
text:  What is the number of different different airports that are destinations for American Airlines?
sql:  SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'
ground truth values:  [('airlines.name', 'American Airlines')]
matched values OrderedDict([(38, ('airports.city', 'Americana')), (59, ('airlines.name', 'American Airlines')), (69, ('airlines.callsign', 'AMERICAN'))])
--------------------
Picklist: What is the name of the country with the most number of home airlines?, airports, city, [Homer]
--------------------
text:  What is the name of the country with the most number of home airlines?
sql:  SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(38, ('airports.city', 'Homer'))])
--------------------
Picklist: How many airports are there per country? Order the countries by decreasing number of airports., routes, dst_ap, [PER]
Picklist: How many airports are there per country? Order the countries by decreasing number of airports., routes, src_ap, [PER]
Picklist: How many airports are there per country? Order the countries by decreasing number of airports., airports, city, [Perm]
 77%|███████▋  | 6848/8943 [15:31<47:01,  1.35s/it] 77%|███████▋  | 6849/8943 [15:32<45:50,  1.31s/it] 77%|███████▋  | 6850/8943 [15:34<49:58,  1.43s/it] 77%|███████▋  | 6851/8943 [15:35<48:46,  1.40s/it] 77%|███████▋  | 6852/8943 [15:36<46:25,  1.33s/it] 77%|███████▋  | 6853/8943 [15:38<46:03,  1.32s/it] 77%|███████▋  | 6854/8943 [15:39<43:44,  1.26s/it] 77%|███████▋  | 6855/8943 [15:40<41:21,  1.19s/it]Picklist: How many airports are there per country? Order the countries by decreasing number of airports., airports, country, [Peru]
Picklist: How many airports are there per country? Order the countries by decreasing number of airports., airports, iata, [PER]
Picklist: How many airports are there per country? Order the countries by decreasing number of airports., airlines, icao, [PER]
Picklist: How many airports are there per country? Order the countries by decreasing number of airports., airlines, country, [Peru]
--------------------
text:  How many airports are there per country? Order the countries by decreasing number of airports.
sql:  SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC
ground truth values:  []
matched values OrderedDict([(14, ('routes.dst_ap', 'PER')), (23, ('routes.src_ap', 'PER')), (42, ('airports.city', 'Perm')), (47, ('airports.country', 'Peru')), (57, ('airports.iata', 'PER')), (72, ('airlines.icao', 'PER')), (79, ('airlines.country', 'Peru'))])
--------------------
Picklist: What is the number of airports per country, ordered from most to least?, routes, dst_ap, [PER]
Picklist: What is the number of airports per country, ordered from most to least?, routes, src_ap, [PER]
Picklist: What is the number of airports per country, ordered from most to least?, airports, city, [Perm]
Picklist: What is the number of airports per country, ordered from most to least?, airports, country, [Peru]
Picklist: What is the number of airports per country, ordered from most to least?, airports, iata, [PER]
Picklist: What is the number of airports per country, ordered from most to least?, airlines, icao, [PER]
Picklist: What is the number of airports per country, ordered from most to least?, airlines, country, [Peru]
--------------------
text:  What is the number of airports per country, ordered from most to least?
sql:  SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC
ground truth values:  []
matched values OrderedDict([(14, ('routes.dst_ap', 'PER')), (23, ('routes.src_ap', 'PER')), (42, ('airports.city', 'Perm')), (47, ('airports.country', 'Peru')), (57, ('airports.iata', 'PER')), (72, ('airlines.icao', 'PER')), (79, ('airlines.country', 'Peru'))])
--------------------
Picklist: How many airports are there per city in the United States? Order the cities by decreasing number of airports., routes, dst_ap, [PER]
Picklist: How many airports are there per city in the United States? Order the cities by decreasing number of airports., routes, src_ap, [PER]
Picklist: How many airports are there per city in the United States? Order the cities by decreasing number of airports., airports, city, [Perm]
Picklist: How many airports are there per city in the United States? Order the cities by decreasing number of airports., airports, country, [United States]
Picklist: How many airports are there per city in the United States? Order the cities by decreasing number of airports., airports, country, [Peru]
Picklist: How many airports are there per city in the United States? Order the cities by decreasing number of airports., airports, iata, [PER]
Picklist: How many airports are there per city in the United States? Order the cities by decreasing number of airports., airlines, icao, [PER]
Picklist: How many airports are there per city in the United States? Order the cities by decreasing number of airports., airlines, callsign, [UNITED]
Picklist: How many airports are there per city in the United States? Order the cities by decreasing number of airports., airlines, callsign, [STATES]
Picklist: How many airports are there per city in the United States? Order the cities by decreasing number of airports., airlines, country, [United States]
Picklist: How many airports are there per city in the United States? Order the cities by decreasing number of airports., airlines, country, [Peru]
--------------------
text:  How many airports are there per city in the United States? Order the cities by decreasing number of airports.
sql:  SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC
ground truth values:  [('airports.country', 'United States')]
matched values OrderedDict([(14, ('routes.dst_ap', 'PER')), (23, ('routes.src_ap', 'PER')), (42, ('airports.city', 'Perm')), (47, ('airports.country', 'United States')), (50, ('airports.country', 'Peru')), (60, ('airports.iata', 'PER')), (75, ('airlines.icao', 'PER')), (80, ('airlines.callsign', 'UNITED')), (82, ('airlines.callsign', 'STATES')), (86, ('airlines.country', 'United States')), (89, ('airlines.country', 'Peru'))])
--------------------
Picklist: How many airports are there per city in the US ordered from most to least?, routes, dst_ap, [PER]
Picklist: How many airports are there per city in the US ordered from most to least?, routes, src_ap, [PER]
Picklist: How many airports are there per city in the US ordered from most to least?, airports, city, [Perm]
Picklist: How many airports are there per city in the US ordered from most to least?, airports, country, [Peru]
Picklist: How many airports are there per city in the US ordered from most to least?, airports, iata, [PER]
Picklist: How many airports are there per city in the US ordered from most to least?, airlines, iata, [US]
Picklist: How many airports are there per city in the US ordered from most to least?, airlines, icao, [PER]
Picklist: How many airports are there per city in the US ordered from most to least?, airlines, callsign, [CITY]
Picklist: How many airports are there per city in the US ordered from most to least?, airlines, country, [Peru]
--------------------
text:  How many airports are there per city in the US ordered from most to least?
sql:  SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC
ground truth values:  [('airports.country', 'United States')]
matched values OrderedDict([(14, ('routes.dst_ap', 'PER')), (23, ('routes.src_ap', 'PER')), (42, ('airports.city', 'Perm')), (47, ('airports.country', 'Peru')), (57, ('airports.iata', 'PER')), (70, ('airlines.iata', 'US')), (74, ('airlines.icao', 'PER')), (79, ('airlines.callsign', 'CITY')), (83, ('airlines.country', 'Peru'))])
--------------------
Picklist: Return the cities with more than 3 airports in the United States., airports, country, [United States]
Picklist: Return the cities with more than 3 airports in the United States., airlines, callsign, [UNITED]
Picklist: Return the cities with more than 3 airports in the United States., airlines, callsign, [STATES]
Picklist: Return the cities with more than 3 airports in the United States., airlines, country, [United States]
--------------------
text:  Return the cities with more than 3 airports in the United States.
sql:  SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3
ground truth values:  [('airports.country', 'United States')]
matched values OrderedDict([(40, ('airports.country', 'United States')), (67, ('airlines.callsign', 'UNITED')), (69, ('airlines.callsign', 'STATES')), (73, ('airlines.country', 'United States'))])
--------------------
Picklist: What is the number of cities in the United States with more than 3 airports?, airports, country, [United States]
Picklist: What is the number of cities in the United States with more than 3 airports?, airlines, callsign, [UNITED]
Picklist: What is the number of cities in the United States with more than 3 airports?, airlines, callsign, [STATES]
Picklist: What is the number of cities in the United States with more than 3 airports?, airlines, country, [United States]
--------------------
text:  What is the number of cities in the United States with more than 3 airports?
sql:  SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3
ground truth values:  [('airports.country', 'United States')]
matched values OrderedDict([(40, ('airports.country', 'United States')), (67, ('airlines.callsign', 'UNITED')), (69, ('airlines.callsign', 'STATES')), (73, ('airlines.country', 'United States'))])
--------------------
 77%|███████▋  | 6856/8943 [15:41<42:04,  1.21s/it] 77%|███████▋  | 6857/8943 [15:43<45:33,  1.31s/it] 77%|███████▋  | 6858/8943 [15:44<46:02,  1.32s/it] 77%|███████▋  | 6859/8943 [15:45<46:16,  1.33s/it] 77%|███████▋  | 6860/8943 [15:47<45:37,  1.31s/it] 77%|███████▋  | 6861/8943 [15:48<44:02,  1.27s/it] 77%|███████▋  | 6862/8943 [15:50<49:16,  1.42s/it] 77%|███████▋  | 6863/8943 [15:51<50:01,  1.44s/it] 77%|███████▋  | 6864/8943 [15:52<46:38,  1.35s/it] 77%|███████▋  | 6865/8943 [15:54<46:57,  1.36s/it] 77%|███████▋  | 6866/8943 [15:54<42:53,  1.24s/it] 77%|███████▋  | 6867/8943 [15:55<39:48,  1.15s/it] 77%|███████▋  | 6868/8943 [15:57<39:50,  1.15s/it] 77%|███████▋  | 6869/8943 [15:58<41:41,  1.21s/it] 77%|███████▋  | 6870/8943 [15:59<40:46,  1.18s/it] 77%|███████▋  | 6871/8943 [16:00<41:19,  1.20s/it] 77%|███████▋  | 6872/8943 [16:02<47:31,  1.38s/it] 77%|███████▋  | 6873/8943 [16:04<49:50,  1.44s/it] 77%|███████▋  | 6874/8943 [16:05<49:27,  1.43s/it]Picklist: List the cities which have more than one airport and number of airports., airlines, icao, [ONE]
--------------------
text:  List the cities which have more than one airport and number of airports.
sql:  SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1
ground truth values:  []
matched values OrderedDict([(61, ('airlines.icao', 'ONE'))])
--------------------
Picklist: What are the names of all cities with more than one airport and how many airports do they have?, airports, city, [Namest]
Picklist: What are the names of all cities with more than one airport and how many airports do they have?, airlines, icao, [ONE]
--------------------
text:  What are the names of all cities with more than one airport and how many airports do they have?
sql:  SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1
ground truth values:  []
matched values OrderedDict([(38, ('airports.city', 'Namest')), (64, ('airlines.icao', 'ONE'))])
--------------------
Picklist: Find the number of routes for each source airport and the airport name., airports, city, [Soure]
--------------------
text:  Find the number of routes for each source airport and the airport name.
sql:  SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name
ground truth values:  []
matched values OrderedDict([(38, ('airports.city', 'Soure'))])
--------------------
Picklist: Find the number of routes and airport name for each source airport, order the results by decreasing number of routes., airports, city, [Soure]
--------------------
text:  Find the number of routes and airport name for each source airport, order the results by decreasing number of routes.
sql:  SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC
ground truth values:  []
matched values OrderedDict([(38, ('airports.city', 'Soure'))])
--------------------
Picklist: Find the cities which have exactly two airports., airlines, icao, [TWO]
--------------------
text:  Find the cities which have exactly two airports.
sql:  SELECT city FROM airports GROUP BY city HAVING count(*)  =  2
ground truth values:  []
matched values OrderedDict([(61, ('airlines.icao', 'TWO'))])
--------------------
Picklist: What are the cities with exactly two airports?, airlines, icao, [TWO]
--------------------
text:  What are the cities with exactly two airports?
sql:  SELECT city FROM airports GROUP BY city HAVING count(*)  =  2
ground truth values:  []
matched values OrderedDict([(61, ('airlines.icao', 'TWO'))])
--------------------
Picklist: What is the total number of routes for each country and airline in that country?, airlines, callsign, [TOTAL]
--------------------
text:  What is the total number of routes for each country and airline in that country?
sql:  SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name
ground truth values:  []
matched values OrderedDict([(64, ('airlines.callsign', 'TOTAL'))])
--------------------
Picklist: Find the number of routes with destination airports in Italy., airports, country, [Italy]
Picklist: Find the number of routes with destination airports in Italy., airlines, country, [Italy]
--------------------
text:  Find the number of routes with destination airports in Italy.
sql:  SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'
ground truth values:  [('airports.country', 'Italy')]
matched values OrderedDict([(40, ('airports.country', 'Italy')), (68, ('airlines.country', 'Italy'))])
--------------------
--------------------
text:  What is the number of routes whose destinations are Italian airports?
sql:  SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'
ground truth values:  [('airports.country', 'Italy')]
matched values OrderedDict()
--------------------
Picklist: Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'., airports, city, [Americana]
Picklist: Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'., airports, country, [Italy]
Picklist: Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'., airlines, name, [American Airlines]
Picklist: Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'., airlines, callsign, [AMERICAN]
Picklist: Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'., airlines, country, [Italy]
--------------------
text:  Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.
sql:  SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'
ground truth values:  [('airports.country', 'Italy'), ('airlines.name', 'American Airlines')]
matched values OrderedDict([(38, ('airports.city', 'Americana')), (42, ('airports.country', 'Italy')), (61, ('airlines.name', 'American Airlines')), (71, ('airlines.callsign', 'AMERICAN')), (75, ('airlines.country', 'Italy'))])
--------------------
Picklist: What is the number of routes operated by the airline American Airlines whose destinations are in Italy?, airports, city, [Americana]
Picklist: What is the number of routes operated by the airline American Airlines whose destinations are in Italy?, airports, country, [Italy]
Picklist: What is the number of routes operated by the airline American Airlines whose destinations are in Italy?, airlines, name, [American Airlines]
Picklist: What is the number of routes operated by the airline American Airlines whose destinations are in Italy?, airlines, callsign, [AMERICAN]
Picklist: What is the number of routes operated by the airline American Airlines whose destinations are in Italy?, airlines, country, [Italy]
--------------------
text:  What is the number of routes operated by the airline American Airlines whose destinations are in Italy?
sql:  SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'
ground truth values:  [('airports.country', 'Italy'), ('airlines.name', 'American Airlines')]
matched values OrderedDict([(38, ('airports.city', 'Americana')), (42, ('airports.country', 'Italy')), (61, ('airlines.name', 'American Airlines')), (71, ('airlines.callsign', 'AMERICAN')), (75, ('airlines.country', 'Italy'))])
--------------------
Picklist: Find the number of routes that have destination John F Kennedy International Airport., airports, name, [John F Kennedy International Airport]
Picklist: What is the number of routes that end at John F Kennedy International Airport?, airports, name, [John F Kennedy International Airport]
Picklist: What is the number of routes that end at John F Kennedy International Airport?, airports, city, [Ende]
Picklist: What is the number of routes that end at John F Kennedy International Airport?, airports, city, [Enid]
Picklist: What is the number of routes that end at John F Kennedy International Airport?, airports, iata, [END]
Picklist: What is the number of routes that end at John F Kennedy International Airport?, airlines, icao, [END]
--------------------
text:  What is the number of routes that end at John F Kennedy International Airport?
sql:  SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'
ground truth values:  [('airports.name', 'John F Kennedy International Airport')]
matched values  77%|███████▋  | 6875/8943 [16:06<48:30,  1.41s/it] 77%|███████▋  | 6876/8943 [16:08<45:00,  1.31s/it] 77%|███████▋  | 6877/8943 [16:09<41:54,  1.22s/it] 77%|███████▋  | 6878/8943 [16:10<44:14,  1.29s/it] 77%|███████▋  | 6879/8943 [16:11<46:38,  1.36s/it] 77%|███████▋  | 6880/8943 [16:13<44:06,  1.28s/it] 77%|███████▋  | 6881/8943 [16:14<41:15,  1.20s/it] 77%|███████▋  | 6882/8943 [16:15<41:55,  1.22s/it] 77%|███████▋  | 6883/8943 [16:16<43:42,  1.27s/it] 77%|███████▋  | 6884/8943 [16:18<44:26,  1.30s/it]OrderedDict([(36, ('airports.name', 'John F Kennedy International Airport')), (44, ('airports.city', 'Ende')), (47, ('airports.city', 'Enid')), (60, ('airports.iata', 'END')), (75, ('airlines.icao', 'END'))])
--------------------
Picklist: Find the number of routes from the United States to Canada., airports, country, [United States]
Picklist: Find the number of routes from the United States to Canada., airports, country, [Canada]
Picklist: Find the number of routes from the United States to Canada., airlines, callsign, [UNITED]
Picklist: Find the number of routes from the United States to Canada., airlines, callsign, [STATES]
Picklist: Find the number of routes from the United States to Canada., airlines, country, [United States]
Picklist: Find the number of routes from the United States to Canada., airlines, country, [Canada]
--------------------
text:  Find the number of routes from the United States to Canada.
sql:  SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')
ground truth values:  [('airports.country', 'Canada'), ('airports.country', 'United States')]
matched values OrderedDict([(40, ('airports.country', 'United States')), (43, ('airports.country', 'Canada')), (69, ('airlines.callsign', 'UNITED')), (71, ('airlines.callsign', 'STATES')), (75, ('airlines.country', 'United States')), (78, ('airlines.country', 'Canada'))])
--------------------
Picklist: How many routes go from the United States to Canada?, routes, dst_ap, [GO]
Picklist: How many routes go from the United States to Canada?, routes, src_ap, [GO]
Picklist: How many routes go from the United States to Canada?, airports, country, [United States]
Picklist: How many routes go from the United States to Canada?, airports, country, [Canada]
Picklist: How many routes go from the United States to Canada?, airlines, iata, [GO]
Picklist: How many routes go from the United States to Canada?, airlines, callsign, [UNITED]
Picklist: How many routes go from the United States to Canada?, airlines, callsign, [STATES]
Picklist: How many routes go from the United States to Canada?, airlines, country, [United States]
Picklist: How many routes go from the United States to Canada?, airlines, country, [Canada]
--------------------
text:  How many routes go from the United States to Canada?
sql:  SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')
ground truth values:  [('airports.country', 'Canada'), ('airports.country', 'United States')]
matched values OrderedDict([(14, ('routes.dst_ap', 'GO')), (23, ('routes.src_ap', 'GO')), (44, ('airports.country', 'United States')), (47, ('airports.country', 'Canada')), (68, ('airlines.iata', 'GO')), (75, ('airlines.callsign', 'UNITED')), (77, ('airlines.callsign', 'STATES')), (81, ('airlines.country', 'United States')), (84, ('airlines.country', 'Canada'))])
--------------------
Picklist: Find the id of routes whose source and destination airports are in the United States., airports, city, [Soure]
Picklist: Find the id of routes whose source and destination airports are in the United States., airports, country, [United States]
Picklist: Find the id of routes whose source and destination airports are in the United States., airlines, callsign, [UNITED]
Picklist: Find the id of routes whose source and destination airports are in the United States., airlines, callsign, [STATES]
Picklist: Find the id of routes whose source and destination airports are in the United States., airlines, country, [United States]
--------------------
text:  Find the id of routes whose source and destination airports are in the United States.
sql:  SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')
ground truth values:  [('airports.country', 'United States'), ('airports.country', 'United States')]
matched values OrderedDict([(38, ('airports.city', 'Soure')), (43, ('airports.country', 'United States')), (70, ('airlines.callsign', 'UNITED')), (72, ('airlines.callsign', 'STATES')), (76, ('airlines.country', 'United States'))])
--------------------
Picklist: What is the id of the routes whose source and destination airports are in the United States?, airports, city, [Soure]
Picklist: What is the id of the routes whose source and destination airports are in the United States?, airports, country, [United States]
Picklist: What is the id of the routes whose source and destination airports are in the United States?, airlines, callsign, [UNITED]
Picklist: What is the id of the routes whose source and destination airports are in the United States?, airlines, callsign, [STATES]
Picklist: What is the id of the routes whose source and destination airports are in the United States?, airlines, country, [United States]
--------------------
text:  What is the id of the routes whose source and destination airports are in the United States?
sql:  SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')
ground truth values:  [('airports.country', 'United States'), ('airports.country', 'United States')]
matched values OrderedDict([(38, ('airports.city', 'Soure')), (43, ('airports.country', 'United States')), (70, ('airlines.callsign', 'UNITED')), (72, ('airlines.callsign', 'STATES')), (76, ('airlines.country', 'United States'))])
--------------------
Picklist: Find the busiest source airport that runs most number of routes in China., airports, city, [Soure]
Picklist: Find the busiest source airport that runs most number of routes in China., airports, country, [China]
Picklist: Find the busiest source airport that runs most number of routes in China., airlines, country, [China]
--------------------
text:  Find the busiest source airport that runs most number of routes in China.
sql:  SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1
ground truth values:  [('airports.country', 'China')]
matched values OrderedDict([(38, ('airports.city', 'Soure')), (43, ('airports.country', 'China')), (71, ('airlines.country', 'China'))])
--------------------
Picklist: What is the name of the airport with the most number of routes that start in China?, airports, country, [China]
Picklist: What is the name of the airport with the most number of routes that start in China?, airlines, country, [China]
--------------------
text:  What is the name of the airport with the most number of routes that start in China?
sql:  SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1
ground truth values:  [('airports.country', 'China')]
matched values OrderedDict([(40, ('airports.country', 'China')), (68, ('airlines.country', 'China'))])
--------------------
Picklist: Find the busiest destination airport that runs most number of routes in China., airports, country, [China]
Picklist: Find the busiest destination airport that runs most number of routes in China., airlines, country, [China]
--------------------
text:  Find the busiest destination airport that runs most number of routes in China.
sql:  SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1
ground truth values:  [('airports.country', 'China')]
matched values OrderedDict([(40, ('airports.country', 'China')), (68, ('airlines.country', 'China'))])
--------------------
Picklist: What is the name of the airport that is the destination of the most number of routes that start in China?, airports, country, [China]
Picklist: What is the name of the airport that is the destination of the most number of routes that start in China?, airlines, country, [China]
-------------------- 77%|███████▋  | 6885/8943 [16:19<48:07,  1.40s/it] 77%|███████▋  | 6893/8943 [16:19<33:41,  1.01it/s] 77%|███████▋  | 6899/8943 [16:19<23:42,  1.44it/s] 77%|███████▋  | 6905/8943 [16:20<16:44,  2.03it/s] 77%|███████▋  | 6910/8943 [16:20<11:56,  2.84it/s] 77%|███████▋  | 6914/8943 [16:20<08:38,  3.91it/s] 77%|███████▋  | 6920/8943 [16:20<06:12,  5.42it/s] 77%|███████▋  | 6929/8943 [16:20<04:26,  7.55it/s] 78%|███████▊  | 6935/8943 [16:20<03:16, 10.21it/s] 78%|███████▊  | 6941/8943 [16:20<02:28, 13.50it/s] 78%|███████▊  | 6947/8943 [16:20<02:00, 16.61it/s]
text:  What is the name of the airport that is the destination of the most number of routes that start in China?
sql:  SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1
ground truth values:  [('airports.country', 'China')]
matched values OrderedDict([(40, ('airports.country', 'China')), (68, ('airlines.country', 'China'))])
--------------------
Picklist: List the name of all the distinct customers who have orders with status "Packing"., Orders, order_status, [Packing]
Picklist: Which customers have orders with status "Packing"? Give me the customer names., Orders, order_status, [Packing]
Picklist: Find the details of all the distinct customers who have orders with status "On Road"., Orders, order_status, [On Road]
Picklist: What are the distinct customers who have orders with status "On Road"? Give me the customer details?, Orders, order_status, [On Road]
Picklist: Give me a list of id and status of orders which belong to the customer named "Jeramie"., Customers, customer_name, [Jeramie]
Picklist: Which orders are made by the customer named "Jeramie"? Give me the order ids and status., Customers, customer_name, [Jeramie]
Picklist: Find the dates of orders which belong to the customer named "Jeramie"., Customers, customer_name, [Jeramie]
Picklist: What are the dates of the orders made by the customer named "Jeramie"?, Customers, customer_name, [Jeramie]
--------------------
text:  Give me the names of customers who have placed orders between 2009-01-01 and 2010-01-01.
sql:  SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= "2009-01-01" AND T2.date_order_placed <= "2010-01-01"
ground truth values:  [('Orders.date_order_placed', '2009-01-01'), ('Orders.date_order_placed', '2010-01-01')]
matched values OrderedDict()
--------------------
--------------------
text:  Which customers made orders between 2009-01-01 and 2010-01-01? Find their names.
sql:  SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= "2009-01-01" AND T2.date_order_placed <= "2010-01-01"
ground truth values:  [('Orders.date_order_placed', '2009-01-01'), ('Orders.date_order_placed', '2010-01-01')]
matched values OrderedDict()
--------------------
--------------------
text:  Give me a list of distinct product ids from orders placed between 1975-01-01 and 1976-01-01?
sql:  SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= "1975-01-01" AND T1.date_order_placed <= "1976-01-01"
ground truth values:  [('Orders.date_order_placed', '1975-01-01'), ('Orders.date_order_placed', '1976-01-01')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the distinct ids of products ordered between 1975-01-01 and 1976-01-01??
sql:  SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= "1975-01-01" AND T1.date_order_placed <= "1976-01-01"
ground truth values:  [('Orders.date_order_placed', '1975-01-01'), ('Orders.date_order_placed', '1976-01-01')]
matched values OrderedDict()
--------------------
Picklist: Find the names of the customers who have order status both "On Road" and "Shipped"., Orders, order_status, [On Road]
Picklist: Find the names of the customers who have order status both "On Road" and "Shipped"., Orders, order_status, [Shipped]
Picklist: Which customers have both "On Road" and "Shipped" as order status? List the customer names., Orders, order_status, [On Road]
Picklist: Which customers have both "On Road" and "Shipped" as order status? List the customer names., Orders, order_status, [Shipped]
Picklist: Find the id of the customers who have order status both "On Road" and "Shipped"., Orders, order_status, [On Road]
Picklist: Find the id of the customers who have order status both "On Road" and "Shipped"., Orders, order_status, [Shipped]
Picklist: Which customers have both "On Road" and "Shipped" as order status? List the customer ids., Orders, order_status, [On Road]
Picklist: Which customers have both "On Road" and "Shipped" as order status? List the customer ids., Orders, order_status, [Shipped]
Picklist: Find the ids of orders which are shipped after 2000-01-01., Orders, order_status, [Shipped]
--------------------
text:  Find the ids of orders which are shipped after 2000-01-01.
sql:  SELECT order_id FROM shipments WHERE shipment_date > "2000-01-01"
ground truth values:  [('Shipments.shipment_date', '2000-01-01')]
matched values OrderedDict([(43, ('Orders.order_status', 'Shipped'))])
--------------------
--------------------
text:  Which orders have shipment after 2000-01-01? Give me the order ids.
sql:  SELECT order_id FROM shipments WHERE shipment_date > "2000-01-01"
ground truth values:  [('Shipments.shipment_date', '2000-01-01')]
matched values OrderedDict()
--------------------
Picklist: Find the id of the order which is shipped most recently., Orders, order_status, [Shipped]
--------------------
text:  Find the id of the order which is shipped most recently.
sql:  SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments)
ground truth values:  []
matched values OrderedDict([(43, ('Orders.order_status', 'Shipped'))])
--------------------
--------------------
text:  Find the invoice numbers which are created before 1989-09-03 or after 2007-12-25.
sql:  SELECT invoice_number FROM invoices WHERE invoice_date < "1989-09-03" OR invoice_date > "2007-12-25"
ground truth values:  [('Invoices.invoice_date', '1989-09-03'), ('Invoices.invoice_date', '2007-12-25')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the invoice numbers created before 1989-09-03 or after 2007-12-25?
sql:  SELECT invoice_number FROM invoices WHERE invoice_date < "1989-09-03" OR invoice_date > "2007-12-25"
ground truth values:  [('Invoices.invoice_date', '1989-09-03'), ('Invoices.invoice_date', '2007-12-25')]
matched values OrderedDict()
--------------------
--------------------
text:  Find the distinct details of invoices which are created before 1989-09-03 or after 2007-12-25.
sql:  SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < "1989-09-03" OR invoice_date > "2007-12-25"
ground truth values:  [('Invoices.invoice_date', '1989-09-03'), ('Invoices.invoice_date', '2007-12-25')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the distinct details of invoices created before 1989-09-03 or after 2007-12-25?
sql:  SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < "1989-09-03" OR invoice_date > "2007-12-25"
ground truth values:  [('Invoices.invoice_date', '1989-09-03'), ('Invoices.invoice_date', '2007-12-25')]
matched values OrderedDict()
--------------------
Picklist: List the names of the customers who have once bought product "food"., Products, product_name, [food]
Picklist: What are the names of the customers who bought product "food" at least once?, Products, product_name, [food]
Picklist: List the names of customers who have once canceled the purchase of the product "food" (the item status is "Cancel")., Products, product_name, [food]
Picklist: List the names of customers who have once canceled the purchase of the product "food" (the item status is "Cancel")., Order_Items, order_item_status, [Cancel]
Picklist: Which customers have ever canceled the purchase of the product "food" (the item status is "Cancel")?, Products, product_name, [food]
Picklist: Which customers have ever canceled the purchase of the product "food" (the item status is "Cancel")?, Order_Items, order_item_status, [Cancel]
Picklist: How many architects are female?, architect, gender, [female]
Picklist: List the name, nationality and id of all male architects ordered by their names lexicographically., architect, gender, [male]
Picklist: What are the names and year of construction for the mills of 'Grondzeiler' type?, mill, type, [Grondzeiler]
 78%|███████▊  | 6955/8943 [16:21<01:32, 21.57it/s] 78%|███████▊  | 6961/8943 [16:21<01:14, 26.43it/s] 78%|███████▊  | 6971/8943 [16:21<00:58, 33.80it/s] 78%|███████▊  | 6979/8943 [16:21<00:48, 40.74it/s] 78%|███████▊  | 6987/8943 [16:21<00:41, 46.89it/s] 78%|███████▊  | 6995/8943 [16:21<00:39, 49.59it/s] 78%|███████▊  | 7002/8943 [16:21<00:38, 50.03it/s] 78%|███████▊  | 7009/8943 [16:21<00:38, 49.67it/s] 78%|███████▊  | 7017/8943 [16:21<00:34, 55.47it/s]Picklist: What are the names of the mills which are not located in 'Donceel'?, mill, location, [Donceel]
Picklist: What are the distinct types of mills that are built by American or Canadian architects?, architect, nationality, [Canadian]
Picklist: What are the distinct types of mills that are built by American or Canadian architects?, architect, nationality, [American]
Picklist: What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?, bridge, name, [Rainbow Bridge]
Picklist: What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?, bridge, name, [Kolob Arch]
Picklist: show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length., architect, nationality, [American]
Picklist: List all company names with a book published by Alyson., book_club, Publisher, [Alyson]
Picklist: What are all the company names that have a book published by Alyson?, book_club, Publisher, [Alyson]
Picklist: Show the movie titles and book titles for all companies in China., culture_company, Incorporated_in, [China]
Picklist: What are the titles of movies and books corresponding to companies incorporated in China?, culture_company, Incorporated_in, [China]
--------------------
text:  what is the biggest city in wyoming
sql:  SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  "wyoming" ) AND state_name  =  "wyoming"
ground truth values:  [('city.state_name', 'wyoming'), ('city.state_name', 'wyoming')]
matched values OrderedDict()
--------------------
--------------------
text:  what wyoming city has the largest population
sql:  SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  "wyoming" ) AND state_name  =  "wyoming"
ground truth values:  [('city.state_name', 'wyoming'), ('city.state_name', 'wyoming')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the largest city in wyoming
sql:  SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  "wyoming" ) AND state_name  =  "wyoming"
ground truth values:  [('city.state_name', 'wyoming'), ('city.state_name', 'wyoming')]
matched values OrderedDict()
--------------------
--------------------
text:  where is the most populated area of wyoming
sql:  SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  "wyoming" ) AND state_name  =  "wyoming"
ground truth values:  [('city.state_name', 'wyoming'), ('city.state_name', 'wyoming')]
matched values OrderedDict()
--------------------
--------------------
text:  which city in wyoming has the largest population
sql:  SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  "wyoming" ) AND state_name  =  "wyoming"
ground truth values:  [('city.state_name', 'wyoming'), ('city.state_name', 'wyoming')]
matched values OrderedDict()
--------------------
--------------------
text:  what cities in wyoming have the highest number of citizens
sql:  SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  "wyoming" ) AND state_name  =  "wyoming"
ground truth values:  [('city.state_name', 'wyoming'), ('city.state_name', 'wyoming')]
matched values OrderedDict()
--------------------
--------------------
text:  what cities in wyoming have the highest populations
sql:  SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  "wyoming" ) AND state_name  =  "wyoming"
ground truth values:  [('city.state_name', 'wyoming'), ('city.state_name', 'wyoming')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the most populous city in wyoming
sql:  SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  "wyoming" ) AND state_name  =  "wyoming"
ground truth values:  [('city.state_name', 'wyoming'), ('city.state_name', 'wyoming')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the largest city in wyoming by population
sql:  SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  "wyoming" ) AND state_name  =  "wyoming"
ground truth values:  [('city.state_name', 'wyoming'), ('city.state_name', 'wyoming')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the largest city of wyoming
sql:  SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  "wyoming" ) AND state_name  =  "wyoming"
ground truth values:  [('city.state_name', 'wyoming'), ('city.state_name', 'wyoming')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the city in wyoming with the largest population
sql:  SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  "wyoming" ) AND state_name  =  "wyoming"
ground truth values:  [('city.state_name', 'wyoming'), ('city.state_name', 'wyoming')]
matched values OrderedDict()
--------------------
--------------------
text:  how big is new mexico
sql:  SELECT area FROM state WHERE state_name  =  "new mexico"
ground truth values:  [('state.state_name', 'new mexico')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the area of new mexico
sql:  SELECT area FROM state WHERE state_name  =  "new mexico"
ground truth values:  [('state.state_name', 'new mexico')]
matched values OrderedDict()
--------------------
--------------------
text:  how large is new mexico
sql:  SELECT area FROM state WHERE state_name  =  "new mexico"
ground truth values:  [('state.state_name', 'new mexico')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the area of the new mexico state
sql:  SELECT area FROM state WHERE state_name  =  "new mexico"
ground truth values:  [('state.state_name', 'new mexico')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the size of new mexico
sql:  SELECT area FROM state WHERE state_name  =  "new mexico"
ground truth values:  [('state.state_name', 'new mexico')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the area of new mexico in square kilometers
sql:  SELECT area FROM state WHERE state_name  =  "new mexico"
ground truth values:  [('state.state_name', 'new mexico')]
matched values OrderedDict()
--------------------
--------------------
text:  how many people live in california
sql:  SELECT population FROM state WHERE state_name  =  "california"
ground truth values:  [('state.state_name', 'california')]
matched values OrderedDict()
--------------------
--------------------
text:  how many people reside in california
sql:  SELECT population FROM state WHERE state_name  =  "california"
ground truth values:  [('state.state_name', 'california')]
matched values OrderedDict()
--------------------
--------------------
text:  how many residents live in california
sql:  SELECT population FROM state WHERE state_name  =  "california"
ground truth values:  [('state.state_name', 'california')]
matched values OrderedDict()
--------------------
--------------------
text:  how much population does california have
sql:  SELECT population FROM state WHERE state_name  =  "california"
ground truth values:  [('state.state_name', 'california')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the population of california
sql:  SELECT population FROM state WHERE state_name  =  "california"
ground truth values:  [('state.state_name', 'california')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the population of california
sql:  SELECT population FROM state WHERE state_name  =  "california"
ground truth values:  [('state.state_name', 'california')]
matched values OrderedDict()
--------------------
--------------------
text:  how many people are in the state of california
 79%|███████▊  | 7028/8943 [16:22<00:29, 64.26it/s] 79%|███████▊  | 7039/8943 [16:22<00:26, 72.56it/s] 79%|███████▉  | 7051/8943 [16:22<00:23, 81.25it/s] 79%|███████▉  | 7062/8943 [16:22<00:21, 86.92it/s] 79%|███████▉  | 7073/8943 [16:22<00:20, 90.95it/s]sql:  SELECT population FROM state WHERE state_name  =  "california"
ground truth values:  [('state.state_name', 'california')]
matched values OrderedDict()
--------------------
--------------------
text:  what can you tell me about the population of california
sql:  SELECT population FROM state WHERE state_name  =  "california"
ground truth values:  [('state.state_name', 'california')]
matched values OrderedDict()
--------------------
--------------------
text:  how many people are there in california
sql:  SELECT population FROM state WHERE state_name  =  "california"
ground truth values:  [('state.state_name', 'california')]
matched values OrderedDict()
--------------------
--------------------
text:  how many citizens in california
sql:  SELECT population FROM state WHERE state_name  =  "california"
ground truth values:  [('state.state_name', 'california')]
matched values OrderedDict()
--------------------
--------------------
text:  how many people stay in california
sql:  SELECT population FROM state WHERE state_name  =  "california"
ground truth values:  [('state.state_name', 'california')]
matched values OrderedDict()
--------------------
--------------------
text:  how many citizens live in california
sql:  SELECT population FROM state WHERE state_name  =  "california"
ground truth values:  [('state.state_name', 'california')]
matched values OrderedDict()
--------------------
--------------------
text:  give me the cities in texas
sql:  SELECT city_name FROM city WHERE state_name  =  "texas"
ground truth values:  [('city.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  tell me what cities are in texas
sql:  SELECT city_name FROM city WHERE state_name  =  "texas"
ground truth values:  [('city.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  what cities are located in texas
sql:  SELECT city_name FROM city WHERE state_name  =  "texas"
ground truth values:  [('city.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the cities in texas
sql:  SELECT city_name FROM city WHERE state_name  =  "texas"
ground truth values:  [('city.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  what cities in texas
sql:  SELECT city_name FROM city WHERE state_name  =  "texas"
ground truth values:  [('city.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  give me the cities which are in texas
sql:  SELECT city_name FROM city WHERE state_name  =  "texas"
ground truth values:  [('city.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the area of the state with the capital albany
sql:  SELECT area FROM state WHERE capital  =  "albany"
ground truth values:  [('state.capital', 'albany')]
matched values OrderedDict()
--------------------
--------------------
text:  give me the lakes in california
sql:  SELECT lake_name FROM lake WHERE state_name  =  "california"
ground truth values:  [('lake.state_name', 'california')]
matched values OrderedDict()
--------------------
--------------------
text:  name the major lakes in michigan
sql:  SELECT lake_name FROM lake WHERE area  >  750 AND state_name  =  "michigan"
ground truth values:  [('lake.state_name', 'michigan')]
matched values OrderedDict()
--------------------
--------------------
text:  which states do ohio river flow through
sql:  SELECT traverse FROM river WHERE river_name  =  "ohio"
ground truth values:  [('river.river_name', 'ohio')]
matched values OrderedDict()
--------------------
--------------------
text:  what states does the ohio river run through
sql:  SELECT traverse FROM river WHERE river_name  =  "ohio"
ground truth values:  [('river.river_name', 'ohio')]
matched values OrderedDict()
--------------------
--------------------
text:  what states border the ohio river
sql:  SELECT traverse FROM river WHERE river_name  =  "ohio"
ground truth values:  [('river.river_name', 'ohio')]
matched values OrderedDict()
--------------------
--------------------
text:  which states border the ohio river
sql:  SELECT traverse FROM river WHERE river_name  =  "ohio"
ground truth values:  [('river.river_name', 'ohio')]
matched values OrderedDict()
--------------------
--------------------
text:  what states does the ohio run through
sql:  SELECT traverse FROM river WHERE river_name  =  "ohio"
ground truth values:  [('river.river_name', 'ohio')]
matched values OrderedDict()
--------------------
--------------------
text:  where is the ohio river
sql:  SELECT traverse FROM river WHERE river_name  =  "ohio"
ground truth values:  [('river.river_name', 'ohio')]
matched values OrderedDict()
--------------------
--------------------
text:  which states does the ohio river run through
sql:  SELECT traverse FROM river WHERE river_name  =  "ohio"
ground truth values:  [('river.river_name', 'ohio')]
matched values OrderedDict()
--------------------
--------------------
text:  which states does the ohio run through
sql:  SELECT traverse FROM river WHERE river_name  =  "ohio"
ground truth values:  [('river.river_name', 'ohio')]
matched values OrderedDict()
--------------------
--------------------
text:  which states does the ohio river pass through
sql:  SELECT traverse FROM river WHERE river_name  =  "ohio"
ground truth values:  [('river.river_name', 'ohio')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the states that the ohio run through
sql:  SELECT traverse FROM river WHERE river_name  =  "ohio"
ground truth values:  [('river.river_name', 'ohio')]
matched values OrderedDict()
--------------------
--------------------
text:  which state has the ohio river
sql:  SELECT traverse FROM river WHERE river_name  =  "ohio"
ground truth values:  [('river.river_name', 'ohio')]
matched values OrderedDict()
--------------------
--------------------
text:  what states have rivers named ohio
sql:  SELECT traverse FROM river WHERE river_name  =  "ohio"
ground truth values:  [('river.river_name', 'ohio')]
matched values OrderedDict()
--------------------
--------------------
text:  through which states does the ohio flow
sql:  SELECT traverse FROM river WHERE river_name  =  "ohio"
ground truth values:  [('river.river_name', 'ohio')]
matched values OrderedDict()
--------------------
--------------------
text:  what states are next to the ohio
sql:  SELECT traverse FROM river WHERE river_name  =  "ohio"
ground truth values:  [('river.river_name', 'ohio')]
matched values OrderedDict()
--------------------
--------------------
text:  through which states does the ohio run
sql:  SELECT traverse FROM river WHERE river_name  =  "ohio"
ground truth values:  [('river.river_name', 'ohio')]
matched values OrderedDict()
--------------------
--------------------
text:  what states does the ohio river go through
sql:  SELECT traverse FROM river WHERE river_name  =  "ohio"
ground truth values:  [('river.river_name', 'ohio')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the lowest elevation in pennsylvania
sql:  SELECT lowest_elevation FROM highlow WHERE state_name  =  "pennsylvania"
ground truth values:  [('highlow.state_name', 'pennsylvania')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the longest river flowing through texas
sql:  SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  "texas" ) AND traverse  =  "texas"
ground truth values:  [('river.traverse', 'texas'), ('river.traverse', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the largest river in texas state
sql:  SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  "texas" ) AND traverse  =  "texas"
ground truth values:  [('river.traverse', 'texas'), ('river.traverse', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the longest river in texas
sql:   79%|███████▉  | 7083/8943 [16:22<00:23, 79.91it/s] 79%|███████▉  | 7094/8943 [16:22<00:21, 85.57it/s] 79%|███████▉  | 7105/8943 [16:22<00:20, 90.43it/s]SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  "texas" ) AND traverse  =  "texas"
ground truth values:  [('river.traverse', 'texas'), ('river.traverse', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the biggest river in texas
sql:  SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  "texas" ) AND traverse  =  "texas"
ground truth values:  [('river.traverse', 'texas'), ('river.traverse', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the longest river that flows through texas
sql:  SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  "texas" ) AND traverse  =  "texas"
ground truth values:  [('river.traverse', 'texas'), ('river.traverse', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the biggest rivers in texas
sql:  SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  "texas" ) AND traverse  =  "texas"
ground truth values:  [('river.traverse', 'texas'), ('river.traverse', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  how many rivers are in idaho
sql:  SELECT COUNT ( river_name ) FROM river WHERE traverse  =  "idaho"
ground truth values:  [('river.traverse', 'idaho')]
matched values OrderedDict()
--------------------
--------------------
text:  give me the number of rivers in idaho
sql:  SELECT COUNT ( river_name ) FROM river WHERE traverse  =  "idaho"
ground truth values:  [('river.traverse', 'idaho')]
matched values OrderedDict()
--------------------
--------------------
text:  how many rivers does idaho have
sql:  SELECT COUNT ( river_name ) FROM river WHERE traverse  =  "idaho"
ground truth values:  [('river.traverse', 'idaho')]
matched values OrderedDict()
--------------------
--------------------
text:  how many rivers are there in idaho
sql:  SELECT COUNT ( river_name ) FROM river WHERE traverse  =  "idaho"
ground truth values:  [('river.traverse', 'idaho')]
matched values OrderedDict()
--------------------
--------------------
text:  how many rivers run through idaho
sql:  SELECT COUNT ( river_name ) FROM river WHERE traverse  =  "idaho"
ground truth values:  [('river.traverse', 'idaho')]
matched values OrderedDict()
--------------------
--------------------
text:  how many rivers are found in idaho
sql:  SELECT COUNT ( river_name ) FROM river WHERE traverse  =  "idaho"
ground truth values:  [('river.traverse', 'idaho')]
matched values OrderedDict()
--------------------
--------------------
text:  how many rivers in idaho
sql:  SELECT COUNT ( river_name ) FROM river WHERE traverse  =  "idaho"
ground truth values:  [('river.traverse', 'idaho')]
matched values OrderedDict()
--------------------
--------------------
text:  what states neighbor kentucky
sql:  SELECT border FROM border_info WHERE state_name  =  "kentucky"
ground truth values:  [('border_info.state_name', 'kentucky')]
matched values OrderedDict()
--------------------
--------------------
text:  which states border kentucky
sql:  SELECT border FROM border_info WHERE state_name  =  "kentucky"
ground truth values:  [('border_info.state_name', 'kentucky')]
matched values OrderedDict()
--------------------
--------------------
text:  what states border kentucky
sql:  SELECT border FROM border_info WHERE state_name  =  "kentucky"
ground truth values:  [('border_info.state_name', 'kentucky')]
matched values OrderedDict()
--------------------
--------------------
text:  give me the states that border kentucky
sql:  SELECT border FROM border_info WHERE state_name  =  "kentucky"
ground truth values:  [('border_info.state_name', 'kentucky')]
matched values OrderedDict()
--------------------
--------------------
text:  what state borders kentucky
sql:  SELECT border FROM border_info WHERE state_name  =  "kentucky"
ground truth values:  [('border_info.state_name', 'kentucky')]
matched values OrderedDict()
--------------------
--------------------
text:  what states are next to kentucky
sql:  SELECT border FROM border_info WHERE state_name  =  "kentucky"
ground truth values:  [('border_info.state_name', 'kentucky')]
matched values OrderedDict()
--------------------
--------------------
text:  what states surround kentucky
sql:  SELECT border FROM border_info WHERE state_name  =  "kentucky"
ground truth values:  [('border_info.state_name', 'kentucky')]
matched values OrderedDict()
--------------------
--------------------
text:  which state borders kentucky
sql:  SELECT border FROM border_info WHERE state_name  =  "kentucky"
ground truth values:  [('border_info.state_name', 'kentucky')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the neighboring states for kentucky
sql:  SELECT border FROM border_info WHERE state_name  =  "kentucky"
ground truth values:  [('border_info.state_name', 'kentucky')]
matched values OrderedDict()
--------------------
--------------------
text:  which states adjoin kentucky
sql:  SELECT border FROM border_info WHERE state_name  =  "kentucky"
ground truth values:  [('border_info.state_name', 'kentucky')]
matched values OrderedDict()
--------------------
--------------------
text:  states bordering kentucky
sql:  SELECT border FROM border_info WHERE state_name  =  "kentucky"
ground truth values:  [('border_info.state_name', 'kentucky')]
matched values OrderedDict()
--------------------
--------------------
text:  which state border kentucky
sql:  SELECT border FROM border_info WHERE state_name  =  "kentucky"
ground truth values:  [('border_info.state_name', 'kentucky')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the adjacent state of kentucky
sql:  SELECT border FROM border_info WHERE state_name  =  "kentucky"
ground truth values:  [('border_info.state_name', 'kentucky')]
matched values OrderedDict()
--------------------
--------------------
text:  name all the rivers in illinois
sql:  SELECT river_name FROM river WHERE traverse  =  "illinois"
ground truth values:  [('river.traverse', 'illinois')]
matched values OrderedDict()
--------------------
--------------------
text:  rivers in illinois
sql:  SELECT river_name FROM river WHERE traverse  =  "illinois"
ground truth values:  [('river.traverse', 'illinois')]
matched values OrderedDict()
--------------------
--------------------
text:  what are all the rivers in illinois
sql:  SELECT river_name FROM river WHERE traverse  =  "illinois"
ground truth values:  [('river.traverse', 'illinois')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the rivers in illinois
sql:  SELECT river_name FROM river WHERE traverse  =  "illinois"
ground truth values:  [('river.traverse', 'illinois')]
matched values OrderedDict()
--------------------
--------------------
text:  what rivers are in illinois
sql:  SELECT river_name FROM river WHERE traverse  =  "illinois"
ground truth values:  [('river.traverse', 'illinois')]
matched values OrderedDict()
--------------------
--------------------
text:  what rivers are there in illinois
sql:  SELECT river_name FROM river WHERE traverse  =  "illinois"
ground truth values:  [('river.traverse', 'illinois')]
matched values OrderedDict()
--------------------
--------------------
text:  what rivers run through illinois
sql:  SELECT river_name FROM river WHERE traverse  =  "illinois"
ground truth values:  [('river.traverse', 'illinois')]
matched values OrderedDict()
--------------------
--------------------
text:  what rivers flow through illinois
sql:  SELECT river_name FROM river WHERE traverse  =  "illinois"
ground truth values:  [('river.traverse', 'illinois')]
matched values OrderedDict()
--------------------
--------------------
text:  what river flows through illinois
sql:  SELECT river_name FROM river WHERE traverse  =  "illinois"
ground truth values:  [('river.traverse', 'illinois')]
matched values OrderedDict()
--------------------
--------------------
text:   80%|███████▉  | 7116/8943 [16:23<00:19, 94.10it/s] 80%|███████▉  | 7127/8943 [16:23<00:18, 96.63it/s] 80%|███████▉  | 7138/8943 [16:23<00:18, 98.57it/s] 80%|███████▉  | 7149/8943 [16:23<00:18, 97.03it/s]what are the rivers in the state of illinois
sql:  SELECT river_name FROM river WHERE traverse  =  "illinois"
ground truth values:  [('river.traverse', 'illinois')]
matched values OrderedDict()
--------------------
--------------------
text:  name the rivers in illinois
sql:  SELECT river_name FROM river WHERE traverse  =  "illinois"
ground truth values:  [('river.traverse', 'illinois')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the rivers of illinois
sql:  SELECT river_name FROM river WHERE traverse  =  "illinois"
ground truth values:  [('river.traverse', 'illinois')]
matched values OrderedDict()
--------------------
--------------------
text:  which rivers are in illinois
sql:  SELECT river_name FROM river WHERE traverse  =  "illinois"
ground truth values:  [('river.traverse', 'illinois')]
matched values OrderedDict()
--------------------
--------------------
text:  which rivers flow through illinois
sql:  SELECT river_name FROM river WHERE traverse  =  "illinois"
ground truth values:  [('river.traverse', 'illinois')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the river that cross over illinois
sql:  SELECT river_name FROM river WHERE traverse  =  "illinois"
ground truth values:  [('river.traverse', 'illinois')]
matched values OrderedDict()
--------------------
--------------------
text:  what river runs through illinois
sql:  SELECT river_name FROM river WHERE traverse  =  "illinois"
ground truth values:  [('river.traverse', 'illinois')]
matched values OrderedDict()
--------------------
--------------------
text:  what state is springfield in
sql:  SELECT state_name FROM city WHERE city_name  =  "springfield"
ground truth values:  [('city.city_name', 'springfield')]
matched values OrderedDict()
--------------------
--------------------
text:  where is springfield
sql:  SELECT state_name FROM city WHERE city_name  =  "springfield"
ground truth values:  [('city.city_name', 'springfield')]
matched values OrderedDict()
--------------------
--------------------
text:  springfield is in what state
sql:  SELECT state_name FROM city WHERE city_name  =  "springfield"
ground truth values:  [('city.city_name', 'springfield')]
matched values OrderedDict()
--------------------
--------------------
text:  what states have cities named springfield
sql:  SELECT state_name FROM city WHERE city_name  =  "springfield"
ground truth values:  [('city.city_name', 'springfield')]
matched values OrderedDict()
--------------------
--------------------
text:  which states have cities named springfield
sql:  SELECT state_name FROM city WHERE city_name  =  "springfield"
ground truth values:  [('city.city_name', 'springfield')]
matched values OrderedDict()
--------------------
--------------------
text:  which state is springfield in
sql:  SELECT state_name FROM city WHERE city_name  =  "springfield"
ground truth values:  [('city.city_name', 'springfield')]
matched values OrderedDict()
--------------------
--------------------
text:  what states have a city named springfield
sql:  SELECT state_name FROM city WHERE city_name  =  "springfield"
ground truth values:  [('city.city_name', 'springfield')]
matched values OrderedDict()
--------------------
--------------------
text:  what state has the city springfield
sql:  SELECT state_name FROM city WHERE city_name  =  "springfield"
ground truth values:  [('city.city_name', 'springfield')]
matched values OrderedDict()
--------------------
--------------------
text:  what states have towns named springfield
sql:  SELECT state_name FROM city WHERE city_name  =  "springfield"
ground truth values:  [('city.city_name', 'springfield')]
matched values OrderedDict()
--------------------
--------------------
text:  what state is springfield located in
sql:  SELECT state_name FROM city WHERE city_name  =  "springfield"
ground truth values:  [('city.city_name', 'springfield')]
matched values OrderedDict()
--------------------
--------------------
text:  in which state is springfield
sql:  SELECT state_name FROM city WHERE city_name  =  "springfield"
ground truth values:  [('city.city_name', 'springfield')]
matched values OrderedDict()
--------------------
--------------------
text:  which state is the city springfield located in
sql:  SELECT state_name FROM city WHERE city_name  =  "springfield"
ground truth values:  [('city.city_name', 'springfield')]
matched values OrderedDict()
--------------------
--------------------
text:  what states in the united states have a city of springfield
sql:  SELECT state_name FROM city WHERE city_name  =  "springfield"
ground truth values:  [('city.city_name', 'springfield')]
matched values OrderedDict()
--------------------
--------------------
text:  how many people live in boulder
sql:  SELECT population FROM city WHERE city_name  =  "boulder"
ground truth values:  [('city.city_name', 'boulder')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the population of boulder
sql:  SELECT population FROM city WHERE city_name  =  "boulder"
ground truth values:  [('city.city_name', 'boulder')]
matched values OrderedDict()
--------------------
--------------------
text:  how many people lived in boulder
sql:  SELECT population FROM city WHERE city_name  =  "boulder"
ground truth values:  [('city.city_name', 'boulder')]
matched values OrderedDict()
--------------------
--------------------
text:  number of people in boulder
sql:  SELECT population FROM city WHERE city_name  =  "boulder"
ground truth values:  [('city.city_name', 'boulder')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the population of boulder city
sql:  SELECT population FROM city WHERE city_name  =  "boulder"
ground truth values:  [('city.city_name', 'boulder')]
matched values OrderedDict()
--------------------
--------------------
text:  how big is the city of boulder
sql:  SELECT population FROM city WHERE city_name  =  "boulder"
ground truth values:  [('city.city_name', 'boulder')]
matched values OrderedDict()
--------------------
--------------------
text:  population of boulder
sql:  SELECT population FROM city WHERE city_name  =  "boulder"
ground truth values:  [('city.city_name', 'boulder')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the population in boulder
sql:  SELECT population FROM city WHERE city_name  =  "boulder"
ground truth values:  [('city.city_name', 'boulder')]
matched values OrderedDict()
--------------------
--------------------
text:  people in boulder
sql:  SELECT population FROM city WHERE city_name  =  "boulder"
ground truth values:  [('city.city_name', 'boulder')]
matched values OrderedDict()
--------------------
--------------------
text:  how many people in boulder
sql:  SELECT population FROM city WHERE city_name  =  "boulder"
ground truth values:  [('city.city_name', 'boulder')]
matched values OrderedDict()
--------------------
--------------------
text:  how many inhabitants does boulder have
sql:  SELECT population FROM city WHERE city_name  =  "boulder"
ground truth values:  [('city.city_name', 'boulder')]
matched values OrderedDict()
--------------------
--------------------
text:  number of citizens in boulder
sql:  SELECT population FROM city WHERE city_name  =  "boulder"
ground truth values:  [('city.city_name', 'boulder')]
matched values OrderedDict()
--------------------
--------------------
text:  how many citizens in boulder
sql:  SELECT population FROM city WHERE city_name  =  "boulder"
ground truth values:  [('city.city_name', 'boulder')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the smallest city in alaska
sql:  SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city WHERE state_name  =  "alaska" ) AND state_name  =  "alaska"
ground truth values:  [('city.state_name', 'alaska'), ('city.state_name', 'alaska')]
matched values OrderedDict()
--------------------
--------------------
text:  which states have points higher than the highest point in colorado
sql:   80%|████████  | 7159/8943 [16:23<00:18, 93.98it/s] 80%|████████  | 7170/8943 [16:23<00:18, 95.96it/s] 80%|████████  | 7180/8943 [16:23<00:19, 92.19it/s] 80%|████████  | 7190/8943 [16:23<00:20, 87.39it/s] 81%|████████  | 7201/8943 [16:23<00:19, 91.56it/s] 81%|████████  | 7211/8943 [16:24<00:18, 92.59it/s] 81%|████████  | 7222/8943 [16:33<07:32,  3.80it/s]SELECT state_name FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  "colorado" )
ground truth values:  [('highlow.state_name', 'colorado')]
matched values OrderedDict()
--------------------
--------------------
text:  which states have points that are higher than the highest point in colorado
sql:  SELECT state_name FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  "colorado" )
ground truth values:  [('highlow.state_name', 'colorado')]
matched values OrderedDict()
--------------------
--------------------
text:  what states high point are higher than that of colorado
sql:  SELECT state_name FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  "colorado" )
ground truth values:  [('highlow.state_name', 'colorado')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the highest elevation in delaware
sql:  SELECT highest_elevation FROM highlow WHERE state_name  =  "delaware"
ground truth values:  [('highlow.state_name', 'delaware')]
matched values OrderedDict()
--------------------
--------------------
text:  how high is the highest point of delaware
sql:  SELECT highest_elevation FROM highlow WHERE state_name  =  "delaware"
ground truth values:  [('highlow.state_name', 'delaware')]
matched values OrderedDict()
--------------------
--------------------
text:  how tall is the highest point in delaware
sql:  SELECT highest_elevation FROM highlow WHERE state_name  =  "delaware"
ground truth values:  [('highlow.state_name', 'delaware')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the highest point in delaware in meters
sql:  SELECT highest_elevation FROM highlow WHERE state_name  =  "delaware"
ground truth values:  [('highlow.state_name', 'delaware')]
matched values OrderedDict()
--------------------
--------------------
text:  how high is the highest point in delaware
sql:  SELECT highest_elevation FROM highlow WHERE state_name  =  "delaware"
ground truth values:  [('highlow.state_name', 'delaware')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the highest points of states surrounding mississippi
sql:  SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  "mississippi" )
ground truth values:  [('border_info.state_name', 'mississippi')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the high points of states surrounding mississippi
sql:  SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  "mississippi" )
ground truth values:  [('border_info.state_name', 'mississippi')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the highest point in states bordering colorado
sql:  SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  "colorado" ) ORDER BY highest_elevation DESC LIMIT 1
ground truth values:  [('border_info.state_name', 'colorado')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the highest point in the states bordering colorado
sql:  SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  "colorado" ) ORDER BY highest_elevation DESC LIMIT 1
ground truth values:  [('border_info.state_name', 'colorado')]
matched values OrderedDict()
--------------------
--------------------
text:  where is the highest point in texas
sql:  SELECT highest_point FROM highlow WHERE state_name  =  "texas"
ground truth values:  [('highlow.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the highest point in texas
sql:  SELECT highest_point FROM highlow WHERE state_name  =  "texas"
ground truth values:  [('highlow.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the high point of texas
sql:  SELECT highest_point FROM highlow WHERE state_name  =  "texas"
ground truth values:  [('highlow.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the highest mountain in texas
sql:  SELECT highest_point FROM highlow WHERE state_name  =  "texas"
ground truth values:  [('highlow.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  could you tell me what is the highest point in the state of texas
sql:  SELECT highest_point FROM highlow WHERE state_name  =  "texas"
ground truth values:  [('highlow.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  count the states which have elevations lower than what alabama has
sql:  SELECT COUNT ( state_name ) FROM highlow WHERE lowest_elevation  <  ( SELECT lowest_elevation FROM highlow WHERE state_name  =  "alabama" )
ground truth values:  [('highlow.state_name', 'alabama')]
matched values OrderedDict()
--------------------
--------------------
text:  how high is guadalupe peak
sql:  SELECT highest_elevation FROM highlow WHERE highest_point  =  "guadalupe peak"
ground truth values:  [('highlow.highest_point', 'guadalupe peak')]
matched values OrderedDict()
--------------------
--------------------
text:  how tall is guadalupe peak
sql:  SELECT highest_elevation FROM highlow WHERE highest_point  =  "guadalupe peak"
ground truth values:  [('highlow.highest_point', 'guadalupe peak')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the maximum elevation of guadalupe peak
sql:  SELECT highest_elevation FROM highlow WHERE highest_point  =  "guadalupe peak"
ground truth values:  [('highlow.highest_point', 'guadalupe peak')]
matched values OrderedDict()
--------------------
--------------------
text:  how long is the rio grande river
sql:  SELECT LENGTH FROM river WHERE river_name  =  "rio grande"
ground truth values:  [('river.river_name', 'rio grande')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the length of the rio grande river
sql:  SELECT LENGTH FROM river WHERE river_name  =  "rio grande"
ground truth values:  [('river.river_name', 'rio grande')]
matched values OrderedDict()
--------------------
--------------------
text:  what length is the rio grande
sql:  SELECT LENGTH FROM river WHERE river_name  =  "rio grande"
ground truth values:  [('river.river_name', 'rio grande')]
matched values OrderedDict()
--------------------
--------------------
text:  how long is the rio grande
sql:  SELECT LENGTH FROM river WHERE river_name  =  "rio grande"
ground truth values:  [('river.river_name', 'rio grande')]
matched values OrderedDict()
--------------------
--------------------
text:  how long is the rio grande river in miles
sql:  SELECT LENGTH FROM river WHERE river_name  =  "rio grande"
ground truth values:  [('river.river_name', 'rio grande')]
matched values OrderedDict()
--------------------
--------------------
text:  how long is rio grande
sql:  SELECT LENGTH FROM river WHERE river_name  =  "rio grande"
ground truth values:  [('river.river_name', 'rio grande')]
matched values OrderedDict()
--------------------
--------------------
text:  how long is the longest river in texas
sql:  SELECT LENGTH FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  "texas" ) AND traverse  =  "texas"
ground truth values:  [('river.traverse', 'texas'), ('river.traverse', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the length of the longest river that runs through texas
sql:  SELECT LENGTH FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  "texas" ) AND traverse  =  "texas"
ground truth values:  [('river.traverse', 'texas'), ('river.traverse', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  how many capitals does rhode island have
sql:   81%|████████  | 7234/8943 [16:33<05:19,  5.35it/s] 81%|████████  | 7243/8943 [16:33<03:48,  7.45it/s] 81%|████████  | 7255/8943 [16:33<02:43, 10.32it/s] 81%|████████  | 7264/8943 [16:33<02:00, 13.97it/s] 81%|████████▏ | 7273/8943 [16:33<01:30, 18.55it/s]SELECT COUNT ( capital ) FROM state WHERE state_name  =  "rhode island"
ground truth values:  [('state.state_name', 'rhode island')]
matched values OrderedDict()
--------------------
--------------------
text:  how many colorado rivers are there
sql:  SELECT COUNT ( river_name ) FROM river WHERE river_name  =  "colorado"
ground truth values:  [('river.river_name', 'colorado')]
matched values OrderedDict()
--------------------
--------------------
text:  how many rivers are called colorado
sql:  SELECT COUNT ( river_name ) FROM river WHERE river_name  =  "colorado"
ground truth values:  [('river.river_name', 'colorado')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the population of seattle washington
sql:  SELECT population FROM city WHERE city_name  =  "seattle" AND state_name  =  "washington"
ground truth values:  [('city.city_name', 'seattle'), ('city.state_name', 'washington')]
matched values OrderedDict()
--------------------
--------------------
text:  how many people live in seattle washington
sql:  SELECT population FROM city WHERE city_name  =  "seattle" AND state_name  =  "washington"
ground truth values:  [('city.city_name', 'seattle'), ('city.state_name', 'washington')]
matched values OrderedDict()
--------------------
--------------------
text:  how many people live in the biggest city in alaska state
sql:  SELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  "alaska" ) AND state_name  =  "alaska"
ground truth values:  [('city.state_name', 'alaska'), ('city.state_name', 'alaska')]
matched values OrderedDict()
--------------------
--------------------
text:  how large is the largest city in alaska
sql:  SELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  "alaska" ) AND state_name  =  "alaska"
ground truth values:  [('city.state_name', 'alaska'), ('city.state_name', 'alaska')]
matched values OrderedDict()
--------------------
--------------------
text:  how many people live in the capital of texas
sql:  SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE state_name  =  "texas" )
ground truth values:  [('state.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the size of the capital of texas
sql:  SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE state_name  =  "texas" )
ground truth values:  [('state.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  how many states border kentucky
sql:  SELECT COUNT ( border ) FROM border_info WHERE state_name  =  "kentucky"
ground truth values:  [('border_info.state_name', 'kentucky')]
matched values OrderedDict()
--------------------
--------------------
text:  how many states does kentucky border
sql:  SELECT COUNT ( border ) FROM border_info WHERE state_name  =  "kentucky"
ground truth values:  [('border_info.state_name', 'kentucky')]
matched values OrderedDict()
--------------------
--------------------
text:  kentucky borders how many states
sql:  SELECT COUNT ( border ) FROM border_info WHERE state_name  =  "kentucky"
ground truth values:  [('border_info.state_name', 'kentucky')]
matched values OrderedDict()
--------------------
--------------------
text:  number of states bordering kentucky
sql:  SELECT COUNT ( border ) FROM border_info WHERE state_name  =  "kentucky"
ground truth values:  [('border_info.state_name', 'kentucky')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the number of neighboring states for kentucky
sql:  SELECT COUNT ( border ) FROM border_info WHERE state_name  =  "kentucky"
ground truth values:  [('border_info.state_name', 'kentucky')]
matched values OrderedDict()
--------------------
--------------------
text:  name the major rivers in illinois
sql:  SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  "illinois"
ground truth values:  [('river.traverse', 'illinois')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the major rivers in illinois
sql:  SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  "illinois"
ground truth values:  [('river.traverse', 'illinois')]
matched values OrderedDict()
--------------------
--------------------
text:  what are major rivers in illinois
sql:  SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  "illinois"
ground truth values:  [('river.traverse', 'illinois')]
matched values OrderedDict()
--------------------
--------------------
text:  what major rivers run through illinois
sql:  SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  "illinois"
ground truth values:  [('river.traverse', 'illinois')]
matched values OrderedDict()
--------------------
--------------------
text:  through which states does the longest river in texas run
sql:  SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  "texas" )
ground truth values:  [('river.traverse', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the capital city in texas
sql:  SELECT capital FROM state WHERE state_name  =  "texas"
ground truth values:  [('state.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the capital of texas
sql:  SELECT capital FROM state WHERE state_name  =  "texas"
ground truth values:  [('state.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the capital of the texas state
sql:  SELECT capital FROM state WHERE state_name  =  "texas"
ground truth values:  [('state.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  what is capital of texas
sql:  SELECT capital FROM state WHERE state_name  =  "texas"
ground truth values:  [('state.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the capital of the state texas
sql:  SELECT capital FROM state WHERE state_name  =  "texas"
ground truth values:  [('state.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  can you tell me the capital of texas
sql:  SELECT capital FROM state WHERE state_name  =  "texas"
ground truth values:  [('state.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the capitals of states that border texas
sql:  SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  "texas"
ground truth values:  [('border_info.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the capital cities of the states which border texas
sql:  SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  "texas"
ground truth values:  [('border_info.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the capitals of the states that border texas
sql:  SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  "texas"
ground truth values:  [('border_info.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  which capitals are in the states that border texas
sql:  SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  "texas"
ground truth values:  [('border_info.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the cities in states through which the mississippi runs
sql:  SELECT city_name FROM city WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  "mississippi" )
ground truth values:  [('river.river_name', 'mississippi')]
matched values OrderedDict()
--------------------
--------------------
text:   81%|████████▏ | 7282/8943 [16:34<01:10, 23.62it/s] 82%|████████▏ | 7290/8943 [16:34<00:55, 29.95it/s] 82%|████████▏ | 7298/8943 [16:34<00:45, 36.19it/s] 82%|████████▏ | 7308/8943 [16:34<00:36, 44.31it/s] 82%|████████▏ | 7317/8943 [16:34<00:32, 49.99it/s] 82%|████████▏ | 7329/8943 [16:34<00:26, 60.57it/s] 82%|████████▏ | 7339/8943 [16:34<00:24, 66.65it/s]what are the major cities in kansas
sql:  SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  "kansas"
ground truth values:  [('city.state_name', 'kansas')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the major cities in the state of kansas
sql:  SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  "kansas"
ground truth values:  [('city.state_name', 'kansas')]
matched values OrderedDict()
--------------------
--------------------
text:  what major cities are located in kansas
sql:  SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  "kansas"
ground truth values:  [('city.state_name', 'kansas')]
matched values OrderedDict()
--------------------
--------------------
text:  show major cities in kansas
sql:  SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  "kansas"
ground truth values:  [('city.state_name', 'kansas')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the names of the major cities in kansas
sql:  SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  "kansas"
ground truth values:  [('city.state_name', 'kansas')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the major cities of kansas
sql:  SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  "kansas"
ground truth values:  [('city.state_name', 'kansas')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the major cities in kansas
sql:  SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  "kansas"
ground truth values:  [('city.state_name', 'kansas')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the major cities in states through which the mississippi runs
sql:  SELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  >  750 AND river_name  =  "mississippi" )
ground truth values:  [('river.river_name', 'mississippi')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the populations of states through which the mississippi river run
sql:  SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  "mississippi" )
ground truth values:  [('river.river_name', 'mississippi')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the populations of states through which the mississippi runs
sql:  SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  "mississippi" )
ground truth values:  [('river.river_name', 'mississippi')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the populations of the states through which the mississippi runs
sql:  SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  "mississippi" )
ground truth values:  [('river.river_name', 'mississippi')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the populations of states through which the mississippi river runs
sql:  SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  "mississippi" )
ground truth values:  [('river.river_name', 'mississippi')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the populations of the states through which the mississippi run
sql:  SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  "mississippi" )
ground truth values:  [('river.river_name', 'mississippi')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the populations of the states through which the mississippi river run
sql:  SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  "mississippi" )
ground truth values:  [('river.river_name', 'mississippi')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the populations of states through which the mississippi run
sql:  SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  "mississippi" )
ground truth values:  [('river.river_name', 'mississippi')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the populations of the states through which the mississippi river runs
sql:  SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  "mississippi" )
ground truth values:  [('river.river_name', 'mississippi')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the populations of states which border texas
sql:  SELECT t2.population FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  "texas"
ground truth values:  [('border_info.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the populations of the major cities of wisconsin
sql:  SELECT population FROM city WHERE population  >  150000 AND state_name  =  "wisconsin"
ground truth values:  [('city.state_name', 'wisconsin')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the populations of all the major cities in wisconsin
sql:  SELECT population FROM city WHERE population  >  150000 AND state_name  =  "wisconsin"
ground truth values:  [('city.state_name', 'wisconsin')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the population of the major cities in wisconsin
sql:  SELECT population FROM city WHERE population  >  150000 AND state_name  =  "wisconsin"
ground truth values:  [('city.state_name', 'wisconsin')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the capital of states that have cities named durham
sql:  SELECT t2.capital FROM state AS t2 JOIN city AS t1 ON t2.state_name  =  t1.state_name WHERE t1.city_name  =  "durham"
ground truth values:  [('city.city_name', 'durham')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the density of the wyoming
sql:  SELECT density FROM state WHERE state_name  =  "wyoming"
ground truth values:  [('state.state_name', 'wyoming')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the population density of wyoming
sql:  SELECT density FROM state WHERE state_name  =  "wyoming"
ground truth values:  [('state.state_name', 'wyoming')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the density of wyoming
sql:  SELECT density FROM state WHERE state_name  =  "wyoming"
ground truth values:  [('state.state_name', 'wyoming')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the highest point in the state with capital des moines
sql:  SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  "des moines" )
ground truth values:  [('state.capital', 'des moines')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the highest point in the state with the capital des moines
sql:  SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  "des moines" )
ground truth values:  [('state.capital', 'des moines')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the largest city in smallest state through which the mississippi runs
sql:  SELECT city_name FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  "mississippi" ) AND area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  "mississippi" ) ) ) ORDER BY population DESC LIMIT 1
ground truth values:   82%|████████▏ | 7348/8943 [16:35<00:31, 50.31it/s] 82%|████████▏ | 7356/8943 [16:35<00:28, 54.83it/s] 82%|████████▏ | 7364/8943 [16:35<00:26, 60.49it/s] 82%|████████▏ | 7373/8943 [16:35<00:24, 63.10it/s] 83%|████████▎ | 7382/8943 [16:35<00:22, 67.90it/s][('river.river_name', 'mississippi'), ('river.river_name', 'mississippi')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the largest state bordering california
sql:  SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  "california" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  "california" )
ground truth values:  [('border_info.state_name', 'california'), ('border_info.state_name', 'california')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the largest state that borders california
sql:  SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  "california" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  "california" )
ground truth values:  [('border_info.state_name', 'california'), ('border_info.state_name', 'california')]
matched values OrderedDict()
--------------------
--------------------
text:  what state that borders california is the largest
sql:  SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  "california" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  "california" )
ground truth values:  [('border_info.state_name', 'california'), ('border_info.state_name', 'california')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the longest river in the states that border tennessee
sql:  SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  "tennessee" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name  =  "tennessee" )
ground truth values:  [('border_info.state_name', 'tennessee'), ('border_info.state_name', 'tennessee')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the longest river that flows through a state that borders tennessee
sql:  SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  "tennessee" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name  =  "tennessee" )
ground truth values:  [('border_info.state_name', 'tennessee'), ('border_info.state_name', 'tennessee')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the longest river that runs through a state that borders tennessee
sql:  SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  "tennessee" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name  =  "tennessee" )
ground truth values:  [('border_info.state_name', 'tennessee'), ('border_info.state_name', 'tennessee')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the lowest point in iowa
sql:  SELECT lowest_point FROM highlow WHERE state_name  =  "iowa"
ground truth values:  [('highlow.state_name', 'iowa')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the lowest point in iowa in meters
sql:  SELECT lowest_point FROM highlow WHERE state_name  =  "iowa"
ground truth values:  [('highlow.state_name', 'iowa')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the lowest point in the state of iowa
sql:  SELECT lowest_point FROM highlow WHERE state_name  =  "iowa"
ground truth values:  [('highlow.state_name', 'iowa')]
matched values OrderedDict()
--------------------
--------------------
text:  where is the lowest point in iowa
sql:  SELECT lowest_point FROM highlow WHERE state_name  =  "iowa"
ground truth values:  [('highlow.state_name', 'iowa')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the lowest point of iowa
sql:  SELECT lowest_point FROM highlow WHERE state_name  =  "iowa"
ground truth values:  [('highlow.state_name', 'iowa')]
matched values OrderedDict()
--------------------
--------------------
text:  where is the lowest spot in iowa
sql:  SELECT lowest_point FROM highlow WHERE state_name  =  "iowa"
ground truth values:  [('highlow.state_name', 'iowa')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the lowest point of all states through which the mississippi river runs through
sql:  SELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  "mississippi" ) ORDER BY lowest_elevation LIMIT 1
ground truth values:  [('river.river_name', 'mississippi')]
matched values OrderedDict()
--------------------
--------------------
text:  which is the lowest point of the states that the mississippi runs through
sql:  SELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  "mississippi" ) ORDER BY lowest_elevation LIMIT 1
ground truth values:  [('river.river_name', 'mississippi')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the most populous state through which the mississippi runs
sql:  SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  "mississippi" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  "mississippi" )
ground truth values:  [('river.river_name', 'mississippi'), ('river.river_name', 'mississippi')]
matched values OrderedDict()
--------------------
--------------------
text:  what state which the mississippi runs through has the largest population
sql:  SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  "mississippi" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  "mississippi" )
ground truth values:  [('river.river_name', 'mississippi'), ('river.river_name', 'mississippi')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the smallest state bordering texas
sql:  SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  "texas" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  "texas" )
ground truth values:  [('border_info.state_name', 'texas'), ('border_info.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the smallest state that borders texas
sql:  SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  "texas" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  "texas" )
ground truth values:  [('border_info.state_name', 'texas'), ('border_info.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  which state has the smallest area that borders texas
sql:  SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  "texas" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  "texas" )
ground truth values:  [('border_info.state_name', 'texas'), ('border_info.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the smallest state that the mississippi river runs through
sql:  SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  "mississippi" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  "mississippi" )
ground truth values:   83%|████████▎ | 7390/8943 [16:35<00:25, 61.07it/s] 83%|████████▎ | 7400/8943 [16:35<00:22, 68.54it/s] 83%|████████▎ | 7408/8943 [16:35<00:23, 64.12it/s] 83%|████████▎ | 7416/8943 [16:36<00:23, 66.16it/s] 83%|████████▎ | 7424/8943 [16:36<00:22, 68.76it/s] 83%|████████▎ | 7432/8943 [16:36<00:21, 69.77it/s] 83%|████████▎ | 7441/8943 [16:36<00:20, 73.99it/s] 83%|████████▎ | 7449/8943 [16:36<00:19, 75.47it/s][('river.river_name', 'mississippi'), ('river.river_name', 'mississippi')]
matched values OrderedDict()
--------------------
--------------------
text:  what rivers are in states that border alabama
sql:  SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  "alabama" )
ground truth values:  [('border_info.state_name', 'alabama')]
matched values OrderedDict()
--------------------
--------------------
text:  which rivers run through states bordering alabama
sql:  SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  "alabama" )
ground truth values:  [('border_info.state_name', 'alabama')]
matched values OrderedDict()
--------------------
--------------------
text:  what rivers flow through states that alabama borders
sql:  SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  "alabama" )
ground truth values:  [('border_info.state_name', 'alabama')]
matched values OrderedDict()
--------------------
--------------------
text:  what state bordering oklahoma has the largest population
sql:  SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  "oklahoma" ) ORDER BY population DESC LIMIT 1
ground truth values:  [('border_info.state_name', 'oklahoma')]
matched values OrderedDict()
--------------------
--------------------
text:  which of the states bordering oklahoma has the largest population
sql:  SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  "oklahoma" ) ORDER BY population DESC LIMIT 1
ground truth values:  [('border_info.state_name', 'oklahoma')]
matched values OrderedDict()
--------------------
--------------------
text:  what state that borders oklahoma has the highest population
sql:  SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  "oklahoma" ) ORDER BY population DESC LIMIT 1
ground truth values:  [('border_info.state_name', 'oklahoma')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the most populated state bordering oklahoma
sql:  SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  "oklahoma" ) ORDER BY population DESC LIMIT 1
ground truth values:  [('border_info.state_name', 'oklahoma')]
matched values OrderedDict()
--------------------
--------------------
text:  what state contains the highest point of those the colorado river traverses
sql:  SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  "colorado" ) )
ground truth values:  [('river.river_name', 'colorado')]
matched values OrderedDict()
--------------------
--------------------
text:  what states border states that border colorado
sql:  SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  "colorado" )
ground truth values:  [('border_info.state_name', 'colorado')]
matched values OrderedDict()
--------------------
--------------------
text:  what states border states that the mississippi runs through
sql:  SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  "mississippi" )
ground truth values:  [('river.river_name', 'mississippi')]
matched values OrderedDict()
--------------------
--------------------
text:  which states border states through which the mississippi traverses
sql:  SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  "mississippi" )
ground truth values:  [('river.river_name', 'mississippi')]
matched values OrderedDict()
--------------------
--------------------
text:  what states border states which the mississippi runs through
sql:  SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  "mississippi" )
ground truth values:  [('river.river_name', 'mississippi')]
matched values OrderedDict()
--------------------
--------------------
text:  what states border texas and have a major river
sql:  SELECT state_name FROM border_info WHERE border  =  "texas" AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  >  750 )
ground truth values:  [('border_info.border', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  which is the highest peak not in alaska
sql:  SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain WHERE state_name != "alaska" )
ground truth values:  [('mountain.state_name', 'alaska')]
matched values OrderedDict()
--------------------
--------------------
text:  which rivers do not run through tennessee
sql:  SELECT river_name FROM river WHERE river_name NOT IN ( SELECT river_name FROM river WHERE traverse  =  "tennessee" )
ground truth values:  [('river.traverse', 'tennessee')]
matched values OrderedDict()
--------------------
--------------------
text:  what rivers do not run through tennessee
sql:  SELECT river_name FROM river WHERE river_name NOT IN ( SELECT river_name FROM river WHERE traverse  =  "tennessee" )
ground truth values:  [('river.traverse', 'tennessee')]
matched values OrderedDict()
--------------------
--------------------
text:  which rivers do not run through usa
sql:  SELECT river_name FROM river WHERE country_name != "usa"
ground truth values:  [('river.country_name', 'usa')]
matched values OrderedDict()
--------------------
--------------------
text:  which rivers run through states that border the state with the capital atlanta
sql:  SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  "atlanta" ) )
ground truth values:  [('state.capital', 'atlanta')]
matched values OrderedDict()
--------------------
--------------------
text:  what rivers run through the states that border the state with the capital atlanta
sql:  SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  "atlanta" ) )
ground truth values:  [('state.capital', 'atlanta')]
matched values OrderedDict()
--------------------
--------------------
text:  which state has the lowest point that borders idaho
sql:  SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  "idaho" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  "idaho" )
ground truth values:  [('border_info.state_name', 'idaho'), ('border_info.state_name', 'idaho')]
matched values OrderedDict()
--------------------
--------------------
text:  which state is mount whitney in
sql:  SELECT state_name FROM mountain WHERE mountain_name  =  "whitney"
ground truth values:  [('mountain.mountain_name', 'whitney')]
matched values OrderedDict()
--------------------
--------------------
text:  in what state is mount whitney
sql:  SELECT state_name FROM mountain WHERE mountain_name  =  "whitney"
ground truth values:  [('mountain.mountain_name', 'whitney')]
matched values OrderedDict()
--------------------
--------------------
text:  where is mount whitney
sql:  SELECT state_name FROM mountain WHERE mountain_name  =  "whitney"
ground truth values:  [('mountain.mountain_name', 'whitney')]
matched values OrderedDict()
--------------------
--------------------
text:  where is mount whitney located
sql:  SELECT state_name FROM mountain WHERE mountain_name  =  "whitney"
ground truth values:  [('mountain.mountain_name', 'whitney')]
matched values OrderedDict()
--------------------
--------------------
text:  which states have a major city named austin
sql:  SELECT state_name FROM city WHERE city_name  =  "austin" AND population  >  150000
ground truth values:  [('city.city_name', 'austin')]
matched values OrderedDict()
--------------------
--------------------
text:   83%|████████▎ | 7457/8943 [16:36<00:20, 72.71it/s] 83%|████████▎ | 7465/8943 [16:36<00:20, 71.87it/s] 84%|████████▎ | 7473/8943 [16:36<00:21, 67.17it/s] 84%|████████▎ | 7481/8943 [16:36<00:20, 69.91it/s] 84%|████████▍ | 7490/8943 [16:37<00:20, 70.81it/s]what is the largest city in a state that borders california
sql:  SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  "california" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  "california" )
ground truth values:  [('border_info.state_name', 'california'), ('border_info.state_name', 'california')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the largest city in states that border california
sql:  SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  "california" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  "california" )
ground truth values:  [('border_info.state_name', 'california'), ('border_info.state_name', 'california')]
matched values OrderedDict()
--------------------
--------------------
text:  how many rivers do not traverse the state with the capital albany
sql:  SELECT COUNT ( river_name ) FROM river WHERE traverse NOT IN ( SELECT state_name FROM state WHERE capital  =  "albany" )
ground truth values:  [('state.capital', 'albany')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the shortest river in texas
sql:  SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river WHERE traverse  =  "texas" ) AND traverse  =  "texas"
ground truth values:  [('river.traverse', 'texas'), ('river.traverse', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the population of the capital of the largest state through which the mississippi runs
sql:  SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE area  =  ( SELECT MAX ( t1.area ) FROM state AS t1 JOIN river AS t2 ON t1.state_name  =  t2.traverse WHERE t2.river_name  =  "mississippi" ) )
ground truth values:  [('river.river_name', 'mississippi')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the capital of the state that borders the state that borders texas
sql:  SELECT capital FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  "texas" ) )
ground truth values:  [('border_info.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the population of the largest state that borders texas
sql:  SELECT population FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  "texas" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  "texas" )
ground truth values:  [('border_info.state_name', 'texas'), ('border_info.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  what state is salem the capital of
sql:  SELECT state_name FROM state WHERE capital  =  "salem"
ground truth values:  [('state.capital', 'salem')]
matched values OrderedDict()
--------------------
--------------------
text:  what states capital is salem
sql:  SELECT state_name FROM state WHERE capital  =  "salem"
ground truth values:  [('state.capital', 'salem')]
matched values OrderedDict()
--------------------
--------------------
text:  salem is the capital of which state
sql:  SELECT state_name FROM state WHERE capital  =  "salem"
ground truth values:  [('state.capital', 'salem')]
matched values OrderedDict()
--------------------
--------------------
text:  what state has the capital salem
sql:  SELECT state_name FROM state WHERE capital  =  "salem"
ground truth values:  [('state.capital', 'salem')]
matched values OrderedDict()
--------------------
--------------------
text:  how many states have a city named springfield
sql:  SELECT COUNT ( state_name ) FROM city WHERE city_name  =  "springfield"
ground truth values:  [('city.city_name', 'springfield')]
matched values OrderedDict()
--------------------
--------------------
text:  how many states have a city called springfield
sql:  SELECT COUNT ( state_name ) FROM city WHERE city_name  =  "springfield"
ground truth values:  [('city.city_name', 'springfield')]
matched values OrderedDict()
--------------------
--------------------
text:  how many states have cities named springfield
sql:  SELECT COUNT ( state_name ) FROM city WHERE city_name  =  "springfield"
ground truth values:  [('city.city_name', 'springfield')]
matched values OrderedDict()
--------------------
--------------------
text:  how many states have cities or towns named springfield
sql:  SELECT COUNT ( state_name ) FROM city WHERE city_name  =  "springfield"
ground truth values:  [('city.city_name', 'springfield')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the lakes in states bordering texas
sql:  SELECT lake_name FROM lake WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  "texas" )
ground truth values:  [('border_info.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  how many major cities are in texas
sql:  SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name  =  "texas"
ground truth values:  [('city.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  how many big cities are in texas
sql:  SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name  =  "texas"
ground truth values:  [('city.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  how many major cities are there in texas
sql:  SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name  =  "texas"
ground truth values:  [('city.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  how many states does the missouri run through
sql:  SELECT COUNT ( traverse ) FROM river WHERE river_name  =  "missouri"
ground truth values:  [('river.river_name', 'missouri')]
matched values OrderedDict()
--------------------
--------------------
text:  how many states does the missouri river flow through
sql:  SELECT COUNT ( traverse ) FROM river WHERE river_name  =  "missouri"
ground truth values:  [('river.river_name', 'missouri')]
matched values OrderedDict()
--------------------
--------------------
text:  how many states does the missouri river run through
sql:  SELECT COUNT ( traverse ) FROM river WHERE river_name  =  "missouri"
ground truth values:  [('river.river_name', 'missouri')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the average population per square km in pennsylvania
sql:  SELECT population / area FROM state WHERE state_name  =  "pennsylvania"
ground truth values:  [('state.state_name', 'pennsylvania')]
matched values OrderedDict()
--------------------
--------------------
text:  what states border states that border states that border florida
sql:  SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  "florida" ) )
ground truth values:  [('border_info.state_name', 'florida')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the height of the highest mountain in texas
sql:  SELECT MAX ( DISTINCT highest_elevation ) FROM highlow WHERE state_name  =  "texas"
ground truth values:  [('highlow.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  how many states border colorado and border new mexico
sql:  SELECT COUNT ( border ) FROM border_info WHERE border IN ( SELECT border FROM border_info WHERE state_name  =  "new mexico" ) AND state_name  =  "colorado"
ground truth values:  [('border_info.state_name', 'new mexico'), ('border_info.state_name', 'colorado')]
matched values OrderedDict()
--------------------
--------------------
text:   84%|████████▍ | 7498/8943 [16:37<00:20, 70.80it/s] 84%|████████▍ | 7507/8943 [16:37<00:19, 74.81it/s] 84%|████████▍ | 7515/8943 [16:37<00:21, 66.47it/s] 84%|████████▍ | 7524/8943 [16:37<00:19, 71.49it/s] 84%|████████▍ | 7532/8943 [16:37<00:20, 69.91it/s] 84%|████████▍ | 7542/8943 [16:37<00:18, 74.29it/s] 84%|████████▍ | 7550/8943 [16:37<00:18, 74.68it/s] 85%|████████▍ | 7558/8943 [16:38<00:21, 64.81it/s] 85%|████████▍ | 7565/8943 [16:38<00:21, 64.06it/s]how many major cities are in states bordering nebraska
sql:  SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  "nebraska" )
ground truth values:  [('border_info.state_name', 'nebraska')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the total population of the states that border texas
sql:  SELECT SUM ( t2.population ) FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  "texas"
ground truth values:  [('border_info.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  how many major rivers cross ohio
sql:  SELECT COUNT ( river_name ) FROM river WHERE LENGTH  >  750 AND traverse  =  "ohio"
ground truth values:  [('river.traverse', 'ohio')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the height of mount mckinley
sql:  SELECT mountain_altitude FROM mountain WHERE mountain_name  =  "mckinley"
ground truth values:  [('mountain.mountain_name', 'mckinley')]
matched values OrderedDict()
--------------------
--------------------
text:  what mountains are in alaska
sql:  SELECT mountain_name FROM mountain WHERE state_name  =  "alaska"
ground truth values:  [('mountain.state_name', 'alaska')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the largest state traversed by the rio grande river
sql:  SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  "rio grande" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  "rio grande" )
ground truth values:  [('river.river_name', 'rio grande'), ('river.river_name', 'rio grande')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the largest of the state that the rio grande runs through
sql:  SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  "rio grande" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  "rio grande" )
ground truth values:  [('river.river_name', 'rio grande'), ('river.river_name', 'rio grande')]
matched values OrderedDict()
--------------------
--------------------
text:  how many rivers run through the states bordering colorado
sql:  SELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  "colorado" )
ground truth values:  [('border_info.state_name', 'colorado')]
matched values OrderedDict()
--------------------
--------------------
text:  how many cities are in texas
sql:  SELECT COUNT ( city_name ) FROM city WHERE state_name  =  "texas"
ground truth values:  [('city.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  how many cities does texas have
sql:  SELECT COUNT ( city_name ) FROM city WHERE state_name  =  "texas"
ground truth values:  [('city.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  how many states border the mississippi river
sql:  SELECT COUNT ( DISTINCT border ) FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  "mississippi" )
ground truth values:  [('river.river_name', 'mississippi')]
matched values OrderedDict()
--------------------
--------------------
text:  where is massachusetts
sql:  SELECT country_name FROM state WHERE state_name  =  "massachusetts"
ground truth values:  [('state.state_name', 'massachusetts')]
matched values OrderedDict()
--------------------
--------------------
text:  how many cities named austin are there in the usa
sql:  SELECT COUNT ( city_name ) FROM city WHERE city_name  =  "austin"
ground truth values:  [('city.city_name', 'austin')]
matched values OrderedDict()
--------------------
--------------------
text:  how many people live in the smallest state bordering wyoming
sql:  SELECT population FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  "wyoming" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  "wyoming" )
ground truth values:  [('border_info.state_name', 'wyoming'), ('border_info.state_name', 'wyoming')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the length of the colorado river in texas
sql:  SELECT LENGTH FROM river WHERE river_name  =  "colorado" AND traverse  =  "texas"
ground truth values:  [('river.river_name', 'colorado'), ('river.traverse', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the population density in the state with capital austin
sql:  SELECT density FROM state WHERE capital  =  "austin"
ground truth values:  [('state.capital', 'austin')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the elevation of death valley
sql:  SELECT lowest_elevation FROM highlow WHERE lowest_point  =  "death valley"
ground truth values:  [('highlow.lowest_point', 'death valley')]
matched values OrderedDict()
--------------------
--------------------
text:  what states border states that border states that border states that border texas
sql:  SELECT t1.border FROM border_info AS t2 JOIN border_info AS t1 ON t2.border  =  t1.state_name JOIN border_info AS t3 ON t3.border  =  t2.state_name JOIN border_info AS t4 ON t4.border  =  t3.state_name WHERE t4.state_name  =  "texas"
ground truth values:  [('border_info.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  how many states border on the state whose capital is boston
sql:  SELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  "boston" )
ground truth values:  [('state.capital', 'boston')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the major cities in the states through which the major river in virginia runs
sql:  SELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE river_name IN ( SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  "virginia" ) )
ground truth values:  [('river.traverse', 'virginia')]
matched values OrderedDict()
--------------------
--------------------
text:  which states does not border texas
sql:  SELECT state_name FROM state WHERE state_name NOT IN ( SELECT border FROM border_info WHERE state_name  =  "texas" )
ground truth values:  [('border_info.state_name', 'texas')]
matched values OrderedDict()
--------------------
--------------------
text:  which state is the largest city in montana in
sql:  SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  "montana" ) AND state_name  =  "montana"
ground truth values:  [('city.state_name', 'montana'), ('city.state_name', 'montana')]
matched values OrderedDict()
--------------------
--------------------
text:  List all user ids with name Michelle
sql:  SELECT user_id FROM USER WHERE name  =  "Michelle"
ground truth values:  [('user.name', 'Michelle')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all states in which there is a Whataburger
sql:  SELECT state FROM business WHERE name  =  "Whataburger"
ground truth values:  [('business.name', 'Whataburger')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all cities in which there is a restaurant called " MGM Grand Buffet "
sql:  SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  "MGM Grand Buffet" AND t2.category_name  =  "category_category_name0"
ground truth values:  [('business.name', 'MGM Grand Buffet'), ('category.category_name', 'category_category_name0')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all cities which has a " Taj Mahal " .
sql:  85%|████████▍ | 7573/8943 [16:38<00:20, 67.85it/s] 85%|████████▍ | 7581/8943 [16:38<00:25, 53.97it/s] 85%|████████▍ | 7588/8943 [16:38<00:27, 49.65it/s] SELECT city FROM business WHERE name  =  "Taj Mahal"
ground truth values:  [('business.name', 'Taj Mahal')]
matched values OrderedDict()
--------------------
--------------------
text:  List all the restaurant rated more than 3.5
sql:  SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  >  3.5 AND t2.category_name  =  "restaurant"
ground truth values:  [('category.category_name', 'restaurant')]
matched values OrderedDict()
--------------------
--------------------
text:  find all cities which has a " Taj Mahal " restaurant
sql:  SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  "Taj Mahal" AND t2.category_name  =  "restaurant"
ground truth values:  [('business.name', 'Taj Mahal'), ('category.category_name', 'restaurant')]
matched values OrderedDict()
--------------------
--------------------
text:  list all the reviews by Niloofar
sql:  SELECT t1.text FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  "Niloofar"
ground truth values:  [('user.name', 'Niloofar')]
matched values OrderedDict()
--------------------
--------------------
text:  list all the businesses which have a review by Niloofar
sql:  SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t3.name  =  "Niloofar"
ground truth values:  [('user.name', 'Niloofar')]
matched values OrderedDict()
--------------------
--------------------
text:  list all the businesses which Niloofar rated 5
sql:  SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t2.rating  =  5 AND t3.name  =  "Niloofar"
ground truth values:  [('user.name', 'Niloofar')]
matched values OrderedDict()
--------------------
--------------------
text:  List all the reviews by Michelle for Italian restaurant
sql:  SELECT t4.text FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN review AS t4 ON t4.business_id  =  t1.business_id JOIN USER AS t5 ON t5.user_id  =  t4.user_id WHERE t2.category_name  =  "Italian" AND t3.category_name  =  "category_category_name1" AND t5.name  =  "Michelle"
ground truth values:  [('category.category_name', 'Italian'), ('category.category_name', 'category_category_name1'), ('user.name', 'Michelle')]
matched values OrderedDict()
--------------------
--------------------
text:  find the number of reviews written for " Cafe Zinho " restaurant in Texas
sql:  SELECT COUNT ( DISTINCT t3.text ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id WHERE t1.name  =  "Cafe Zinho" AND t1.state  =  "Texas" AND t2.category_name  =  "restaurant"
ground truth values:  [('business.name', 'Cafe Zinho'), ('business.state', 'Texas'), ('category.category_name', 'restaurant')]
matched values OrderedDict()
--------------------
--------------------
text:  List all 5 star Italian restaurant
sql:  SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.rating  =  5 AND t2.category_name  =  "Italian" AND t3.category_name  =  "restaurant"
ground truth values:  [('category.category_name', 'Italian'), ('category.category_name', 'restaurant')]
matched values OrderedDict()
--------------------
--------------------
text:  List all the neighbourhoods with Italian restaurant in Madison
sql:  SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id  =  t2.business_id JOIN category AS t4 ON t4.business_id  =  t2.business_id JOIN neighbourhood AS t1 ON t1.business_id  =  t2.business_id WHERE t2.city  =  "Madison" AND t3.category_name  =  "Italian" AND t4.category_name  =  "restaurant"
ground truth values:  [('business.city', 'Madison'), ('category.category_name', 'Italian'), ('category.category_name', 'restaurant')]
matched values OrderedDict()
--------------------
--------------------
text:  List all the neighbourhoods with Italian restaurant rated less than 2.5 in Madison
sql:  SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id  =  t2.business_id JOIN category AS t4 ON t4.business_id  =  t2.business_id JOIN neighbourhood AS t1 ON t1.business_id  =  t2.business_id WHERE t2.city  =  "Madison" AND t2.rating  <  2.5 AND t3.category_name  =  "Italian" AND t4.category_name  =  "restaurant"
ground truth values:  [('business.city', 'Madison'), ('category.category_name', 'Italian'), ('category.category_name', 'restaurant')]
matched values OrderedDict()
--------------------
--------------------
text:  find all the restaurant in Pennsylvania
sql:  SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  "Pennsylvania" AND t2.category_name  =  "restaurant"
ground truth values:  [('business.state', 'Pennsylvania'), ('category.category_name', 'restaurant')]
matched values OrderedDict()
--------------------
--------------------
text:  List all businesses that are restaurant in Pennsylvania .
sql:  SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  "Pennsylvania" AND t2.category_name  =  "restaurant"
ground truth values:  [('business.state', 'Pennsylvania'), ('category.category_name', 'restaurant')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all the reviews for all Pet Groomers with more than 100 reviews
sql:  SELECT t3.text FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id WHERE t1.review_count  >  100 AND t2.category_name  =  "Pet Groomers"
ground truth values:  [('category.category_name', 'Pet Groomers')]
matched values OrderedDict()
--------------------
--------------------
text:  What are all the breweries in " Los Angeles " ?
sql:  SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  "Los Angeles" AND t2.category_name  =  "breweries"
ground truth values:  [('business.city', 'Los Angeles'), ('category.category_name', 'breweries')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all breweries in Los Angeles
sql:  SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  "Los Angeles" AND t2.category_name  =  "breweries"
ground truth values:  [('business.city', 'Los Angeles'), ('category.category_name', 'breweries')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all breweries in " Los Angeles "
sql:  SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  "Los Angeles" AND t2.category_name  =  "breweries"
ground truth values:  [('business.city', 'Los Angeles'), ('category.category_name', 'breweries')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all users who reviewed restaurant " Mesa Grill "
sql:  SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.name  =  "Mesa Grill" AND t2.category_name  =  "restaurant"
ground truth values:  [('business.name', 'Mesa Grill'), ('category.category_name', 'restaurant')]
matched values OrderedDict()
--------------------
--------------------
text:  List the addresses of all Walmart in " Los Angeles "
sql:  SELECT full_address FROM business WHERE city  =  "Los Angeles" AND name  =  "Walmart"
ground truth values:  [('business.city', 'Los Angeles'), ('business.name', 'Walmart')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all restaurant reviewed by Patrick in " Dallas "
sql:   85%|████████▍ | 7594/8943 [16:38<00:31, 42.96it/s] 85%|████████▍ | 7599/8943 [16:38<00:32, 41.31it/s] 85%|████████▌ | 7604/8943 [16:39<00:31, 42.87it/s] 85%|████████▌ | 7609/8943 [16:39<00:30, 43.52it/s]SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  "Dallas" AND t2.category_name  =  "restaurant" AND t4.name  =  "Patrick"
ground truth values:  [('business.city', 'Dallas'), ('category.category_name', 'restaurant'), ('user.name', 'Patrick')]
matched values OrderedDict()
--------------------
--------------------
text:  Which restaurant in Dallas were reviewed by user Patrick ?
sql:  SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  "Dallas" AND t2.category_name  =  "restaurant" AND t4.name  =  "Patrick"
ground truth values:  [('business.city', 'Dallas'), ('category.category_name', 'restaurant'), ('user.name', 'Patrick')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all Bars reviewed by Patrick
sql:  SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  "Bars" AND t4.name  =  "Patrick"
ground truth values:  [('category.category_name', 'Bars'), ('user.name', 'Patrick')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all Bars reviewed by Patrick with at least 3 stars
sql:  SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.rating  >=  3 AND t2.category_name  =  "Bars" AND t4.name  =  "Patrick"
ground truth values:  [('category.category_name', 'Bars'), ('user.name', 'Patrick')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all users who have written tips for " Barrio Cafe " in 2015
sql:  SELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  "Barrio Cafe" AND t2.year  =  2015
ground truth values:  [('business.name', 'Barrio Cafe')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all businesses in Texas with a rating below 2
sql:  SELECT name FROM business WHERE rating  <  2 AND state  =  "Texas"
ground truth values:  [('business.state', 'Texas')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all restaurant Seafood in Los Angeles
sql:  SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  "Los Angeles" AND t2.category_name  =  "Seafood" AND t3.category_name  =  "restaurant"
ground truth values:  [('business.city', 'Los Angeles'), ('category.category_name', 'Seafood'), ('category.category_name', 'restaurant')]
matched values OrderedDict()
--------------------
--------------------
text:  List all the Seafood restaurant in " Los Angeles "
sql:  SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  "Los Angeles" AND t2.category_name  =  "Seafood" AND t3.category_name  =  "restaurant"
ground truth values:  [('business.city', 'Los Angeles'), ('category.category_name', 'Seafood'), ('category.category_name', 'restaurant')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all restaurant that serve Seafood in " Los Angeles "
sql:  SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  "Los Angeles" AND t2.category_name  =  "Seafood" AND t3.category_name  =  "restaurant"
ground truth values:  [('business.city', 'Los Angeles'), ('category.category_name', 'Seafood'), ('category.category_name', 'restaurant')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all reviews by Patrick with a rating above 4
sql:  SELECT t1.text FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t1.rating  >  4 AND t2.name  =  "Patrick"
ground truth values:  [('user.name', 'Patrick')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all Apple Store in " Los Angeles "
sql:  SELECT business_id FROM business WHERE city  =  "Los Angeles" AND name  =  "Apple Store"
ground truth values:  [('business.city', 'Los Angeles'), ('business.name', 'Apple Store')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all Dallas restaurant with a rating above 4.5
sql:  SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  "Dallas" AND t1.rating  >  4.5 AND t2.category_name  =  "restaurant"
ground truth values:  [('business.city', 'Dallas'), ('category.category_name', 'restaurant')]
matched values OrderedDict()
--------------------
--------------------
text:  What neighbourhood is restaurant " Flat Top Grill " in ?
sql:  SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id  =  t2.business_id JOIN neighbourhood AS t1 ON t1.business_id  =  t2.business_id WHERE t2.name  =  "Flat Top Grill" AND t3.category_name  =  "category_category_name0"
ground truth values:  [('business.name', 'Flat Top Grill'), ('category.category_name', 'category_category_name0')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all tips about " Vintner Grill " that received more than 9 likes
sql:  SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  "Vintner Grill" AND t2.likes  >  9
ground truth values:  [('business.name', 'Vintner Grill')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all reviews about " Kabob Palace " in year 2014
sql:  SELECT t2.text FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  "Kabob Palace" AND t2.year  =  2014
ground truth values:  [('business.name', 'Kabob Palace')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all users who have written tips about businesses in Dallas
sql:  SELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  "Dallas"
ground truth values:  [('business.city', 'Dallas')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all cities in Texas in which there is a restaurant called " MGM Grand Buffet "
sql:  SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  "MGM Grand Buffet" AND t1.state  =  "Texas" AND t2.category_name  =  "restaurant"
ground truth values:  [('business.name', 'MGM Grand Buffet'), ('business.state', 'Texas'), ('category.category_name', 'restaurant')]
matched values OrderedDict()
--------------------
--------------------
text:  Find the users who have given tips on Pet Groomers
sql:  SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN tip AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  "Pet Groomers"
ground truth values:  [('category.category_name', 'Pet Groomers')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all tips for " Cafe Zinho " in Texas .
sql:  SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  "Cafe Zinho" AND t1.state  =  "Texas"
ground truth values:  [('business.name', 'Cafe Zinho'), ('business.state', 'Texas')]
matched values OrderedDict()
--------------------
--------------------
text:  List all users who reviewed businesses that are restaurant .
sql:   85%|████████▌ | 7614/8943 [16:39<00:30, 43.38it/s] 85%|████████▌ | 7619/8943 [16:39<00:29, 44.54it/s] 85%|████████▌ | 7624/8943 [16:39<00:34, 38.02it/s] 85%|████████▌ | 7629/8943 [16:39<00:32, 40.32it/s]SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  "restaurant"
ground truth values:  [('category.category_name', 'restaurant')]
matched values OrderedDict()
--------------------
--------------------
text:  List all tips for " Cafe Zinho " in Pennsylvania in 2010 .
sql:  SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  "Cafe Zinho" AND t1.state  =  "Pennsylvania" AND t2.year  =  2010
ground truth values:  [('business.name', 'Cafe Zinho'), ('business.state', 'Pennsylvania')]
matched values OrderedDict()
--------------------
--------------------
text:  List all users who reviewed businesses that are restaurant in 2010 .
sql:  SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  "restaurant" AND t3.year  =  2010
ground truth values:  [('category.category_name', 'restaurant')]
matched values OrderedDict()
--------------------
--------------------
text:  find the number of escape games in Madison
sql:  SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  "Madison" AND t2.category_name  =  "escape games"
ground truth values:  [('business.city', 'Madison'), ('category.category_name', 'escape games')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the number of escape games in Madison
sql:  SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  "Madison" AND t2.category_name  =  "escape games"
ground truth values:  [('business.city', 'Madison'), ('category.category_name', 'escape games')]
matched values OrderedDict()
--------------------
--------------------
text:  How many escape games exist in Madison
sql:  SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  "Madison" AND t2.category_name  =  "escape games"
ground truth values:  [('business.city', 'Madison'), ('category.category_name', 'escape games')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the number of escape games in " Madison " ?
sql:  SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  "Madison" AND t2.category_name  =  "escape games"
ground truth values:  [('business.city', 'Madison'), ('category.category_name', 'escape games')]
matched values OrderedDict()
--------------------
--------------------
text:  How many escape games are there in Madison ?
sql:  SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  "Madison" AND t2.category_name  =  "escape games"
ground truth values:  [('business.city', 'Madison'), ('category.category_name', 'escape games')]
matched values OrderedDict()
--------------------
--------------------
text:  find the number of restaurant rated more than 3.5
sql:  SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  >  3.5 AND t2.category_name  =  "restaurant"
ground truth values:  [('category.category_name', 'restaurant')]
matched values OrderedDict()
--------------------
--------------------
text:  find the total checkins in Moroccan restaurant in " Los Angeles "
sql:  SELECT SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  "Los Angeles" AND t2.category_name  =  "restaurant" AND t3.category_name  =  "Moroccan"
ground truth values:  [('business.city', 'Los Angeles'), ('category.category_name', 'restaurant'), ('category.category_name', 'Moroccan')]
matched values OrderedDict()
--------------------
--------------------
text:  find the total checkins in Moroccan restaurant in " Los Angeles " on Friday
sql:  SELECT SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  "Los Angeles" AND t2.category_name  =  "Moroccan" AND t3.category_name  =  "restaurant" AND t4.day  =  "Friday"
ground truth values:  [('business.city', 'Los Angeles'), ('category.category_name', 'Moroccan'), ('category.category_name', 'restaurant'), ('checkin.day', 'Friday')]
matched values OrderedDict()
--------------------
--------------------
text:  find the total checkins in Moroccan restaurant in " Los Angeles " per day
sql:  SELECT t4.day  ,  SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  "Los Angeles" AND t2.category_name  =  "Moroccan" AND t3.category_name  =  "restaurant" GROUP BY t4.day
ground truth values:  [('business.city', 'Los Angeles'), ('category.category_name', 'Moroccan'), ('category.category_name', 'restaurant')]
matched values OrderedDict()
--------------------
--------------------
text:  find the total checkins in Italian Delis in each state on Sunday
sql:  SELECT t1.state  ,  SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t2.category_name  =  "Italian" AND t3.category_name  =  "Delis" AND t4.day  =  "Sunday" GROUP BY t1.state
ground truth values:  [('category.category_name', 'Italian'), ('category.category_name', 'Delis'), ('checkin.day', 'Sunday')]
matched values OrderedDict()
--------------------
--------------------
text:  How many reviews has Niloofar written in 2015
sql:  SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2015 AND t2.name  =  "Niloofar"
ground truth values:  [('user.name', 'Niloofar')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the average rating given in Michelle reviews
sql:  SELECT AVG ( t1.rating ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  "Michelle"
ground truth values:  [('user.name', 'Michelle')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the number of checkins for " Cafe Zinho " on Friday
sql:  SELECT t2.count FROM checkin AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  "Cafe Zinho" AND t2.day  =  "Friday"
ground truth values:  [('business.name', 'Cafe Zinho'), ('checkin.day', 'Friday')]
matched values OrderedDict()
--------------------
--------------------
text:  how many users reviewed " Sushi Too " in Pittsburgh
sql:  SELECT COUNT ( DISTINCT t3.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  "Pittsburgh" AND t1.name  =  "Sushi Too"
ground truth values:  [('business.city', 'Pittsburgh'), ('business.name', 'Sushi Too')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the number of restaurant in Pittsburgh rated 4.5
sql:  SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  "Pittsburgh" AND t1.rating  =  4.5 AND t2.category_name  =  "restaurant"
ground truth values:  [('business.city', 'Pittsburgh'), ('category.category_name', 'restaurant')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the total likes on tips from Niloofar
sql:   85%|████████▌ | 7635/8943 [16:39<00:29, 44.23it/s] 85%|████████▌ | 7640/8943 [16:39<00:31, 41.89it/s] 85%|████████▌ | 7645/8943 [16:39<00:30, 42.39it/s] 86%|████████▌ | 7650/8943 [16:40<00:30, 42.61it/s]SELECT SUM ( t1.likes ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  "Niloofar"
ground truth values:  [('user.name', 'Niloofar')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the total likes on tips about " Cafe Zinho "
sql:  SELECT SUM ( t2.likes ) FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  "Cafe Zinho"
ground truth values:  [('business.name', 'Cafe Zinho')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the total likes on tips from Niloofar about " Cafe Zinho "
sql:  SELECT SUM ( t2.likes ) FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  "Cafe Zinho" AND t3.name  =  "Niloofar"
ground truth values:  [('business.name', 'Cafe Zinho'), ('user.name', 'Niloofar')]
matched values OrderedDict()
--------------------
--------------------
text:  How many tips has Michelle written in 2010
sql:  SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2010 AND t2.name  =  "Michelle"
ground truth values:  [('user.name', 'Michelle')]
matched values OrderedDict()
--------------------
--------------------
text:  Return me the number of tips that are written by Michelle in 2010 .
sql:  SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2010 AND t2.name  =  "Michelle"
ground truth values:  [('user.name', 'Michelle')]
matched values OrderedDict()
--------------------
--------------------
text:  How many tips has Michelle written in April
sql:  SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t1.month  =  "April" AND t2.name  =  "Michelle"
ground truth values:  [('tip.month', 'April'), ('user.name', 'Michelle')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the number of restaurant in Texas
sql:  SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  "Texas" AND t2.category_name  =  "restaurant"
ground truth values:  [('business.state', 'Texas'), ('category.category_name', 'restaurant')]
matched values OrderedDict()
--------------------
--------------------
text:  How many Bars in " Dallas " have a rating above 3.5 ?
sql:  SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  "Dallas" AND t1.rating  >  3.5 AND t2.category_name  =  "Bars"
ground truth values:  [('business.city', 'Dallas'), ('category.category_name', 'Bars')]
matched values OrderedDict()
--------------------
--------------------
text:  How many Bars in Dallas have a rating above 3.5 ?
sql:  SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  "Dallas" AND t1.rating  >  3.5 AND t2.category_name  =  "Bars"
ground truth values:  [('business.city', 'Dallas'), ('category.category_name', 'Bars')]
matched values OrderedDict()
--------------------
--------------------
text:  How many people reviewed the restaurant " Texas de Brazil " in Dallas Texas ?
sql:  SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  "Dallas" AND t1.name  =  "Texas de Brazil" AND t1.state  =  "Texas" AND t2.category_name  =  "restaurant"
ground truth values:  [('business.city', 'Dallas'), ('business.name', 'Texas de Brazil'), ('business.state', 'Texas'), ('category.category_name', 'restaurant')]
matched values OrderedDict()
--------------------
--------------------
text:  How many people reviewed " Bistro Di Napoli " in 2015 ?
sql:  SELECT COUNT ( DISTINCT t3.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  "Bistro Di Napoli" AND t2.year  =  2015
ground truth values:  [('business.name', 'Bistro Di Napoli')]
matched values OrderedDict()
--------------------
--------------------
text:  How many restaurant are there in the Hazelwood district of Dallas ?
sql:  SELECT COUNT ( DISTINCT t1.name ) FROM category AS t3 JOIN business AS t1 ON t3.business_id  =  t1.business_id JOIN neighbourhood AS t2 ON t2.business_id  =  t1.business_id WHERE t1.city  =  "Dallas" AND t3.category_name  =  "restaurant" AND t2.neighbourhood_name  =  "Hazelwood"
ground truth values:  [('business.city', 'Dallas'), ('category.category_name', 'restaurant'), ('neighbourhood.neighbourhood_name', 'Hazelwood')]
matched values OrderedDict()
--------------------
--------------------
text:  How many Starbucks are there in Dallas Texas ?
sql:  SELECT COUNT ( DISTINCT business_id ) FROM business WHERE city  =  "Dallas" AND name  =  "Starbucks" AND state  =  "Texas"
ground truth values:  [('business.city', 'Dallas'), ('business.name', 'Starbucks'), ('business.state', 'Texas')]
matched values OrderedDict()
--------------------
--------------------
text:  How many reviews does " Acacia Cafe " have ?
sql:  SELECT review_count FROM business WHERE name  =  "Acacia Cafe"
ground truth values:  [('business.name', 'Acacia Cafe')]
matched values OrderedDict()
--------------------
--------------------
text:  Find the average number of checkins in restaurant " Barrio Cafe " per day
sql:  SELECT AVG ( t3.count )  ,  t3.day FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN checkin AS t3 ON t3.business_id  =  t1.business_id WHERE t1.name  =  "Barrio Cafe" AND t2.category_name  =  "restaurant" GROUP BY t3.day
ground truth values:  [('business.name', 'Barrio Cafe'), ('category.category_name', 'restaurant')]
matched values OrderedDict()
--------------------
--------------------
text:  How many businesses are there in the " Stone Meadows " neighbourhood in Madison ?
sql:  SELECT COUNT ( DISTINCT t1.name ) FROM neighbourhood AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  "Madison" AND t2.neighbourhood_name  =  "Stone Meadows"
ground truth values:  [('business.city', 'Madison'), ('neighbourhood.neighbourhood_name', 'Stone Meadows')]
matched values OrderedDict()
--------------------
--------------------
text:  How many reviews has Adrienne written ?
sql:  SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  "Adrienne"
ground truth values:  [('user.name', 'Adrienne')]
matched values OrderedDict()
--------------------
--------------------
text:  How many reviews has Michelle written in March 2014 ?
sql:  SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t1.month  =  "March" AND t1.year  =  2014 AND t2.name  =  "Michelle"
ground truth values:  [('review.month', 'March'), ('user.name', 'Michelle')]
matched values OrderedDict()
--------------------
--------------------
text:  How many businesses has Michelle reviewed in 2010 ?
sql:  SELECT COUNT ( DISTINCT t1.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t2.year  =  2010 AND t3.name  =  "Michelle"
ground truth values:  [('user.name', 'Michelle')]
matched values OrderedDict()
--------------------
--------------------
text:  How many businesses in " San Diego " has Christine reviewed in 2010 ?
sql:  SELECT COUNT ( DISTINCT t1.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  "San Diego" AND t2.year  =  2010 AND t3.name  =  "Christine"
ground truth values:  [('business.city', 'San Diego'), ('user.name', 'Christine')]
matched values OrderedDict()
--------------------
--------------------
text:  How many Target are there in " Los Angeles " ?
sql:  SELECT COUNT ( DISTINCT business_id ) FROM business WHERE city  =  "Los Angeles" AND name  =  "Target"
 86%|████████▌ | 7655/8943 [16:40<00:29, 43.12it/s] 86%|████████▌ | 7663/8943 [16:40<00:26, 48.88it/s] 86%|████████▌ | 7669/8943 [16:40<00:29, 43.30it/s]ground truth values:  [('business.city', 'Los Angeles'), ('business.name', 'Target')]
matched values OrderedDict()
--------------------
--------------------
text:  How many users have reviewed Irish Pub in Dallas ?
sql:  SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  "Dallas" AND t2.category_name  =  "Irish Pub"
ground truth values:  [('business.city', 'Dallas'), ('category.category_name', 'Irish Pub')]
matched values OrderedDict()
--------------------
--------------------
text:  How many people reviewed restaurant " Vintner Grill " in 2010 ?
sql:  SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.name  =  "Vintner Grill" AND t2.category_name  =  "category_category_name0" AND t3.year  =  2010
ground truth values:  [('business.name', 'Vintner Grill'), ('category.category_name', 'category_category_name0')]
matched values OrderedDict()
--------------------
--------------------
text:  Find the number of reviews on businesses located in " South Summerlin " neighbourhood
sql:  SELECT COUNT ( DISTINCT t3.text ) FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id  =  t2.business_id JOIN review AS t3 ON t3.business_id  =  t2.business_id WHERE t1.neighbourhood_name  =  "South Summerlin"
ground truth values:  [('neighbourhood.neighbourhood_name', 'South Summerlin')]
matched values OrderedDict()
--------------------
--------------------
text:  Find the number of users called Michelle
sql:  SELECT COUNT ( DISTINCT name ) FROM USER WHERE name  =  "Michelle"
ground truth values:  [('user.name', 'Michelle')]
matched values OrderedDict()
--------------------
--------------------
text:  Return me the number of businesses that are restaurant .
sql:  SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t2.category_name  =  "restaurant"
ground truth values:  [('category.category_name', 'restaurant')]
matched values OrderedDict()
--------------------
--------------------
text:  Return me the number of cities that has " Panda Express " .
sql:  SELECT COUNT ( DISTINCT city ) FROM business WHERE name  =  "Panda Express"
ground truth values:  [('business.name', 'Panda Express')]
matched values OrderedDict()
--------------------
--------------------
text:  Return me the number of tips that are written by Michelle .
sql:  SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  "Michelle"
ground truth values:  [('user.name', 'Michelle')]
matched values OrderedDict()
--------------------
--------------------
text:  Find the total checkins in " Brighton Heights " neighbourhood
sql:  SELECT SUM ( t3.count ) FROM checkin AS t3 JOIN business AS t1 ON t3.business_id  =  t1.business_id JOIN neighbourhood AS t2 ON t2.business_id  =  t1.business_id WHERE t2.neighbourhood_name  =  "Brighton Heights"
ground truth values:  [('neighbourhood.neighbourhood_name', 'Brighton Heights')]
matched values OrderedDict()
--------------------
--------------------
text:  Find the total number of reviews written in March
sql:  SELECT COUNT ( DISTINCT text ) FROM review WHERE MONTH  =  "March"
ground truth values:  [('review.month', 'March')]
matched values OrderedDict()
--------------------
--------------------
text:  How many neighbourhoods have a business with rating 5 in Madison ?
sql:  SELECT COUNT ( DISTINCT t1.neighbourhood_name ) FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id  =  t2.business_id WHERE t2.city  =  "Madison" AND t2.rating  =  5
ground truth values:  [('business.city', 'Madison')]
matched values OrderedDict()
--------------------
--------------------
text:  Give me all the Moroccan restaurant in Texas
sql:  SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.state  =  "Texas" AND t2.category_name  =  "Moroccan" AND t3.category_name  =  "restaurant"
ground truth values:  [('business.state', 'Texas'), ('category.category_name', 'Moroccan'), ('category.category_name', 'restaurant')]
matched values OrderedDict()
--------------------
--------------------
text:  which neighbourhood has the most number of businesses in Madison
sql:  SELECT t1.neighbourhood_name FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id  =  t2.business_id WHERE t2.city  =  "Madison" GROUP BY t1.neighbourhood_name ORDER BY COUNT ( DISTINCT t2.name ) DESC LIMIT 1
ground truth values:  [('business.city', 'Madison')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all Mexican restaurant in Dallas with at least 3.5 stars
sql:  SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  "Dallas" AND t1.rating  >  3.5 AND t2.category_name  =  "Mexican" AND t3.category_name  =  "restaurant"
ground truth values:  [('business.city', 'Dallas'), ('category.category_name', 'Mexican'), ('category.category_name', 'restaurant')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all Mexican restaurant in Dallas with a rating above 3.5
sql:  SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  "Dallas" AND t1.rating  >  3.5 AND t2.category_name  =  "Mexican" AND t3.category_name  =  "restaurant"
ground truth values:  [('business.city', 'Dallas'), ('category.category_name', 'Mexican'), ('category.category_name', 'restaurant')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all restaurant with Valet Service in Dallas Texas
sql:  SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  "Dallas" AND t1.state  =  "Texas" AND t2.category_name  =  "Valet Service" AND t3.category_name  =  "restaurant"
ground truth values:  [('business.city', 'Dallas'), ('business.state', 'Texas'), ('category.category_name', 'Valet Service'), ('category.category_name', 'restaurant')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all Italian restaurant in the Meadowood neighbourhood of Madison
sql:  SELECT t1.name FROM category AS t3 JOIN business AS t1 ON t3.business_id  =  t1.business_id JOIN category AS t4 ON t4.business_id  =  t1.business_id JOIN neighbourhood AS t2 ON t2.business_id  =  t1.business_id WHERE t1.city  =  "Madison" AND t3.category_name  =  "Italian" AND t4.category_name  =  "restaurant" AND t2.neighbourhood_name  =  "Meadowood"
ground truth values:  [('business.city', 'Madison'), ('category.category_name', 'Italian'), ('category.category_name', 'restaurant'), ('neighbourhood.neighbourhood_name', 'Meadowood')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all Bars in " Los Angeles " with at least 30 reviews and average rating above 3 stars
sql:  SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  "Los Angeles" AND t1.rating  >  3 AND t1.review_count  >  30 AND t2.category_name  =  "Bars"
ground truth values:  [('business.city', 'Los Angeles'), ('category.category_name', 'Bars')]
matched values OrderedDict()
--------------------
--------------------
text:  How many Egyptian restaurant are there in Edinburgh ?
sql:  SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  "Edinburgh" AND t2.category_name  =  "restaurant" AND t3.category_name  =  "Egyptian"
ground truth values:   86%|████████▌ | 7674/8943 [16:40<00:31, 40.57it/s] 86%|████████▌ | 7682/8943 [16:40<00:26, 47.26it/s] 86%|████████▌ | 7692/8943 [16:40<00:22, 55.74it/s] 86%|████████▌ | 7699/8943 [16:40<00:21, 56.88it/s][('business.city', 'Edinburgh'), ('category.category_name', 'restaurant'), ('category.category_name', 'Egyptian')]
matched values OrderedDict()
--------------------
--------------------
text:  Find the business with the most number of reviews in April
sql:  SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t2.month  =  "April" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.text ) DESC LIMIT 1
ground truth values:  [('review.month', 'April')]
matched values OrderedDict()
--------------------
--------------------
text:  What year is the movie " The Imitation Game " from ?
sql:  SELECT release_year FROM movie WHERE title  =  "The Imitation Game"
ground truth values:  [('movie.title', 'The Imitation Game')]
matched values OrderedDict()
--------------------
--------------------
text:  What year was the movie " The Imitation Game " produced
sql:  SELECT release_year FROM movie WHERE title  =  "The Imitation Game"
ground truth values:  [('movie.title', 'The Imitation Game')]
matched values OrderedDict()
--------------------
--------------------
text:  What year was " Benedict Cumberbatch " born ?
sql:  SELECT birth_year FROM actor WHERE name  =  "Benedict Cumberbatch"
ground truth values:  [('actor.name', 'Benedict Cumberbatch')]
matched values OrderedDict()
--------------------
--------------------
text:  In what year was " Benedict Cumberbatch " born
sql:  SELECT birth_year FROM actor WHERE name  =  "Benedict Cumberbatch"
ground truth values:  [('actor.name', 'Benedict Cumberbatch')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the nationality of the actress " Christoph Waltz " ?
sql:  SELECT nationality FROM actor WHERE name  =  "Christoph Waltz"
ground truth values:  [('actor.name', 'Christoph Waltz')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the nationality of the actor " Christoph Waltz " ?
sql:  SELECT nationality FROM actor WHERE name  =  "Christoph Waltz"
ground truth values:  [('actor.name', 'Christoph Waltz')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all actors born in " Tehran "
sql:  SELECT name FROM actor WHERE birth_city  =  "Tehran"
ground truth values:  [('actor.birth_city', 'Tehran')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all actors born in Tehran
sql:  SELECT name FROM actor WHERE birth_city  =  "Tehran"
ground truth values:  [('actor.birth_city', 'Tehran')]
matched values OrderedDict()
--------------------
--------------------
text:  Which actors were born in Tehran
sql:  SELECT name FROM actor WHERE birth_city  =  "Tehran"
ground truth values:  [('actor.birth_city', 'Tehran')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all actors who are from Afghanistan
sql:  SELECT name FROM actor WHERE nationality  =  "Afghanistan"
ground truth values:  [('actor.nationality', 'Afghanistan')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all actors from Afghanistan
sql:  SELECT name FROM actor WHERE nationality  =  "Afghanistan"
ground truth values:  [('actor.nationality', 'Afghanistan')]
matched values OrderedDict()
--------------------
--------------------
text:  Give me the name of all the actors from Afghanistan
sql:  SELECT name FROM actor WHERE nationality  =  "Afghanistan"
ground truth values:  [('actor.nationality', 'Afghanistan')]
matched values OrderedDict()
--------------------
--------------------
text:  When was " Kevin Spacey " born ?
sql:  SELECT birth_year FROM actor WHERE name  =  "actor_name0"
ground truth values:  [('actor.name', 'actor_name0')]
matched values OrderedDict()
--------------------
--------------------
text:  In what year was " Kevin Spacey " born ?
sql:  SELECT birth_year FROM actor WHERE name  =  "actor_name0"
ground truth values:  [('actor.name', 'actor_name0')]
matched values OrderedDict()
--------------------
--------------------
text:  Where is the birth place of " Kevin Spacey "
sql:  SELECT birth_city FROM director WHERE name  =  "director_name0"
ground truth values:  [('director.name', 'director_name0')]
matched values OrderedDict()
--------------------
--------------------
text:  In what city was " Kevin Spacey " born ?
sql:  SELECT birth_city FROM director WHERE name  =  "director_name0"
ground truth values:  [('director.name', 'director_name0')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the nationality of " Kevin Spacey " ?
sql:  SELECT nationality FROM director WHERE name  =  "director_name0"
ground truth values:  [('director.name', 'director_name0')]
matched values OrderedDict()
--------------------
--------------------
text:  How much was the budget of " Finding Nemo "
sql:  SELECT budget FROM movie WHERE title  =  "Finding Nemo"
ground truth values:  [('movie.title', 'Finding Nemo')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all movies directed by " Steven Spielberg " after 2006
sql:  SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  "Steven Spielberg" AND t3.release_year  >  2006
ground truth values:  [('director.name', 'Steven Spielberg')]
matched values OrderedDict()
--------------------
--------------------
text:  Who is the director of the movie " James Bond " ?
sql:  SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  "James Bond"
ground truth values:  [('movie.title', 'James Bond')]
matched values OrderedDict()
--------------------
--------------------
text:  Who directed the movie " James Bond " ?
sql:  SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  "James Bond"
ground truth values:  [('movie.title', 'James Bond')]
matched values OrderedDict()
--------------------
--------------------
text:  List " James Bond " directors
sql:  SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  "James Bond"
ground truth values:  [('movie.title', 'James Bond')]
matched values OrderedDict()
--------------------
--------------------
text:  Find the actor who played " Alan Turing " in the movie " The Imitation Game "
sql:  SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  "Alan Turing" AND t3.title  =  "The Imitation Game"
ground truth values:  [('cast.role', 'Alan Turing'), ('movie.title', 'The Imitation Game')]
matched values OrderedDict()
--------------------
--------------------
text:  Who acted " Alan Turing " in the movie " The Imitation Game " ?
sql:  SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  "Alan Turing" AND t3.title  =  "The Imitation Game"
ground truth values:  [('cast.role', 'Alan Turing'), ('movie.title', 'The Imitation Game')]
matched values OrderedDict()
--------------------
--------------------
text:  Who was the actor that played " Alan Turing " in the movie " The Imitation Game " ?
sql:  SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  "Alan Turing" AND t3.title  =  "The Imitation Game"
ground truth values:  [('cast.role', 'Alan Turing'), ('movie.title', 'The Imitation Game')]
matched values OrderedDict()
--------------------
--------------------
text:  Who acts as " Alan Turing " in the movie " The Imitation Game " ?
sql:  SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  "Alan Turing" AND t3.title  =  "The Imitation Game"
ground truth values:  [('cast.role', 'Alan Turing'), ('movie.title', 'The Imitation Game')]
matched values OrderedDict()
--------------------
--------------------
text:  Who is the actor playing " Alan Turing " in " The Imitation Game " ?
sql:   86%|████████▌ | 7706/8943 [16:41<00:24, 50.59it/s] 86%|████████▌ | 7712/8943 [16:41<00:25, 48.84it/s] 86%|████████▋ | 7718/8943 [16:41<00:24, 49.18it/s] 86%|████████▋ | 7724/8943 [16:41<00:26, 46.11it/s]SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  "Alan Turing" AND t3.title  =  "The Imitation Game"
ground truth values:  [('cast.role', 'Alan Turing'), ('movie.title', 'The Imitation Game')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the genre of the movie " Jurassic Park " ?
sql:  SELECT t2.genre FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  "Jurassic Park"
ground truth values:  [('movie.title', 'Jurassic Park')]
matched values OrderedDict()
--------------------
--------------------
text:  Who was the director of the movie Joy from 2015 ?
sql:  SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.release_year  =  2015 AND t3.title  =  "Joy"
ground truth values:  [('movie.title', 'Joy')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all movies written by " Matt Damon "
sql:  SELECT t1.title FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t2.name  =  "Matt Damon"
ground truth values:  [('writer.name', 'Matt Damon')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all movies written and produced by " Woody Allen "
sql:  SELECT t2.title FROM movie AS t2 JOIN made_by AS t3 ON t2.mid  =  t3.msid JOIN producer AS t1 ON t1.pid  =  t3.pid JOIN written_by AS t5 ON t5.msid  =  t2.mid JOIN writer AS t4 ON t5.wid  =  t4.wid WHERE t1.name  =  "Woody Allen" AND t4.name  =  "Woody Allen"
ground truth values:  [('producer.name', 'Woody Allen'), ('writer.name', 'Woody Allen')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all movies featuring " Robin Wright "
sql:  SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  "Robin Wright"
ground truth values:  [('actor.name', 'Robin Wright')]
matched values OrderedDict()
--------------------
--------------------
text:  What are all the movies featuring " Robin Wright " ?
sql:  SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  "Robin Wright"
ground truth values:  [('actor.name', 'Robin Wright')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all movies in which " Robin Wright " appears
sql:  SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  "Robin Wright"
ground truth values:  [('actor.name', 'Robin Wright')]
matched values OrderedDict()
--------------------
--------------------
text:  What was the budget of the movie Juno from 2007 ?
sql:  SELECT budget FROM movie WHERE release_year  =  2007 AND title  =  "Juno"
ground truth values:  [('movie.title', 'Juno')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all Sci-Fi produced in year 2010
sql:  SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.genre  =  "Sci-Fi" AND t3.release_year  =  2010
ground truth values:  [('genre.genre', 'Sci-Fi')]
matched values OrderedDict()
--------------------
--------------------
text:  List all the Sci-Fi movies which released in 2010
sql:  SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.genre  =  "Sci-Fi" AND t3.release_year  =  2010
ground truth values:  [('genre.genre', 'Sci-Fi')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all actors born in " Austin " after 1980
sql:  SELECT name FROM actor WHERE birth_city  =  "Austin" AND birth_year  >  1980
ground truth values:  [('actor.birth_city', 'Austin')]
matched values OrderedDict()
--------------------
--------------------
text:  Who are the actors born in " Austin " after 1980 ?
sql:  SELECT name FROM actor WHERE birth_city  =  "Austin" AND birth_year  >  1980
ground truth values:  [('actor.birth_city', 'Austin')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all actors from Austin born after 1980
sql:  SELECT name FROM actor WHERE birth_city  =  "Austin" AND birth_year  >  1980
ground truth values:  [('actor.birth_city', 'Austin')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all movies by directors born in " Los Angeles "
sql:  SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.birth_city  =  "Los Angeles"
ground truth values:  [('director.birth_city', 'Los Angeles')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all actors who were born in " New York City " in 1984
sql:  SELECT name FROM actor WHERE birth_city  =  "New York City" AND birth_year  =  1984
ground truth values:  [('actor.birth_city', 'New York City')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all movies about nuclear weapons
sql:  SELECT t3.title FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  "nuclear weapons"
ground truth values:  [('keyword.keyword', 'nuclear weapons')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the movies related to nuclear weapons
sql:  SELECT t3.title FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  "nuclear weapons"
ground truth values:  [('keyword.keyword', 'nuclear weapons')]
matched values OrderedDict()
--------------------
--------------------
text:  Which movies did " Alfred Hitchcock " direct ?
sql:  SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  "Alfred Hitchcock"
ground truth values:  [('director.name', 'Alfred Hitchcock')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all movies directed by " Asghar Farhadi " and featuring " Taraneh Alidoosti "
sql:  SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  "Taraneh Alidoosti" AND t3.name  =  "Asghar Farhadi"
ground truth values:  [('actor.name', 'Taraneh Alidoosti'), ('director.name', 'Asghar Farhadi')]
matched values OrderedDict()
--------------------
--------------------
text:  What are all the movies directed by " Asghar Farhadi " featuring " Taraneh Alidoosti " ?
sql:  SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  "Taraneh Alidoosti" AND t3.name  =  "Asghar Farhadi"
ground truth values:  [('actor.name', 'Taraneh Alidoosti'), ('director.name', 'Asghar Farhadi')]
matched values OrderedDict()
--------------------
--------------------
text:  How many movies are there that are directed by " Asghar Farhadi " and featuring " Taraneh Alidoosti " ?
sql:  SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  "Taraneh Alidoosti" AND t3.name  =  "Asghar Farhadi"
ground truth values:  [('actor.name', 'Taraneh Alidoosti'), ('director.name', 'Asghar Farhadi')]
matched values OrderedDict()
--------------------
--------------------
text:  List all the movies directed by " Asghar Farhadi " in which " Taraneh Alidoosti " played
sql:   86%|████████▋ | 7729/8943 [16:41<00:28, 42.47it/s] 86%|████████▋ | 7734/8943 [16:41<00:28, 41.98it/s] 87%|████████▋ | 7739/8943 [16:41<00:27, 43.45it/s] 87%|████████▋ | 7744/8943 [16:42<00:26, 44.98it/s]SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  "Taraneh Alidoosti" AND t3.name  =  "Asghar Farhadi"
ground truth values:  [('actor.name', 'Taraneh Alidoosti'), ('director.name', 'Asghar Farhadi')]
matched values OrderedDict()
--------------------
--------------------
text:  What are all the tv series created by " Shonda Rhimes " ?
sql:  SELECT t2.title FROM producer AS t1 JOIN made_by AS t3 ON t1.pid  =  t3.pid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  "Shonda Rhimes"
ground truth values:  [('producer.name', 'Shonda Rhimes')]
matched values OrderedDict()
--------------------
--------------------
text:  Who acts " Olivia Pope " in the series Scandal ?
sql:  SELECT t1.name FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t3.role  =  "Olivia Pope" AND t2.title  =  "Scandal"
ground truth values:  [('cast.role', 'Olivia Pope'), ('tv_series.title', 'Scandal')]
matched values OrderedDict()
--------------------
--------------------
text:  Who is the writer of the movie " The Truman Show "
sql:  SELECT t2.name FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t1.title  =  "The Truman Show"
ground truth values:  [('movie.title', 'The Truman Show')]
matched values OrderedDict()
--------------------
--------------------
text:  Who is the writer of " The Truman Show "
sql:  SELECT t2.name FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t1.title  =  "The Truman Show"
ground truth values:  [('movie.title', 'The Truman Show')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the series featuring " Scott Foley " ?
sql:  SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  "Scott Foley"
ground truth values:  [('actor.name', 'Scott Foley')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the series in which " Scott Foley " is an actor ?
sql:  SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  "Scott Foley"
ground truth values:  [('actor.name', 'Scott Foley')]
matched values OrderedDict()
--------------------
--------------------
text:  Find the directors of all movies featuring " Kate Winslet "
sql:  SELECT t3.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  "Kate Winslet"
ground truth values:  [('actor.name', 'Kate Winslet')]
matched values OrderedDict()
--------------------
--------------------
text:  Find the producers of all movies in which " Kate Winslet " is an actor
sql:  SELECT t1.name FROM CAST AS t3 JOIN actor AS t2 ON t3.aid  =  t2.aid JOIN movie AS t5 ON t5.mid  =  t3.msid JOIN made_by AS t4 ON t5.mid  =  t4.msid JOIN producer AS t1 ON t1.pid  =  t4.pid WHERE t2.name  =  "Kate Winslet"
ground truth values:  [('actor.name', 'Kate Winslet')]
matched values OrderedDict()
--------------------
--------------------
text:  Who is the director of the tv series " House of Cards " from 2013 ?
sql:  SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN tv_series AS t3 ON t3.sid  =  t1.msid WHERE t3.release_year  =  2013 AND t3.title  =  "House of Cards"
ground truth values:  [('tv_series.title', 'House of Cards')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all the female actors from Austin
sql:  SELECT name FROM actor WHERE birth_city  =  "Austin" AND gender  =  "female"
ground truth values:  [('actor.birth_city', 'Austin'), ('actor.gender', 'female')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all actors from Italy born after 1980
sql:  SELECT name FROM actor WHERE birth_year  >  1980 AND nationality  =  "Italy"
ground truth values:  [('actor.nationality', 'Italy')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all the female actors born in " New York City " after 1980
sql:  SELECT name FROM actor WHERE birth_city  =  "New York City" AND birth_year  >  1980 AND gender  =  "female"
ground truth values:  [('actor.birth_city', 'New York City'), ('actor.gender', 'female')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all the female actors in the movie " Saving Private Ryan "
sql:  SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.gender  =  "female" AND t3.title  =  "Saving Private Ryan"
ground truth values:  [('actor.gender', 'female'), ('movie.title', 'Saving Private Ryan')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all the directors who are from Afghanistan
sql:  SELECT name FROM director WHERE nationality  =  "Afghanistan"
ground truth values:  [('director.nationality', 'Afghanistan')]
matched values OrderedDict()
--------------------
--------------------
text:  Find the actors who played in the movie " Camp X-Ray "
sql:  SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  "Camp X-Ray"
ground truth values:  [('movie.title', 'Camp X-Ray')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all actors from Canada who acted in " James Bond " movies
sql:  SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.nationality  =  "Canada" AND t3.title  =  "James Bond"
ground truth values:  [('actor.nationality', 'Canada'), ('movie.title', 'James Bond')]
matched values OrderedDict()
--------------------
--------------------
text:  find all films in which " Rowan Atkinson " acted as " Mr. Bean "
sql:  SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  "Rowan Atkinson" AND t3.role  =  "Mr. Bean"
ground truth values:  [('actor.name', 'Rowan Atkinson'), ('cast.role', 'Mr. Bean')]
matched values OrderedDict()
--------------------
--------------------
text:  where is the director of " The Past " from
sql:  SELECT t2.birth_city FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  "The Past"
ground truth values:  [('movie.title', 'The Past')]
matched values OrderedDict()
--------------------
--------------------
text:  who acted the role of " Mr. Bean "
sql:  SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid WHERE t2.role  =  "Mr. Bean"
ground truth values:  [('cast.role', 'Mr. Bean')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the genres of movies directed by " Asghar Farhadi "
sql:  SELECT t3.genre FROM director AS t5 JOIN directed_by AS t2 ON t5.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN classification AS t1 ON t4.mid  =  t1.msid JOIN genre AS t3 ON t3.gid  =  t1.gid WHERE t5.name  =  "Asghar Farhadi"
ground truth values:  [('director.name', 'Asghar Farhadi')]
matched values OrderedDict()
--------------------
--------------------
text:  Which movie had the character " Daffy Duck "
sql:  SELECT t1.title FROM movie AS t1 JOIN CAST AS t2 ON t1.mid  =  t2.msid WHERE t2.role  =  "Daffy Duck"
ground truth values:  [('cast.role', 'Daffy Duck')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the major roles in the movie " Daddy Long Legs "
sql:  SELECT t2.role FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  "Daddy Long Legs"
ground truth values:  [('movie.title', 'Daddy Long Legs')]
matched values OrderedDict()
--------------------
--------------------
text:   87%|████████▋ | 7749/8943 [16:42<00:26, 44.77it/s] 87%|████████▋ | 7755/8943 [16:42<00:25, 47.52it/s] 87%|████████▋ | 7760/8943 [16:42<00:25, 46.96it/s] 87%|████████▋ | 7765/8943 [16:42<00:25, 45.69it/s] 87%|████████▋ | 7770/8943 [16:42<00:28, 41.35it/s]List all the directors of movies about nuclear weapons
sql:  SELECT t3.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN tags AS t5 ON t5.msid  =  t4.mid JOIN keyword AS t1 ON t5.kid  =  t1.id WHERE t1.keyword  =  "nuclear weapons"
ground truth values:  [('keyword.keyword', 'nuclear weapons')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the number of movies in which " Jennifer Aniston " acted after 2010 ?
sql:  SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  "Jennifer Aniston" AND t2.release_year  >  2010
ground truth values:  [('actor.name', 'Jennifer Aniston')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the number of actors in the movie " Saving Private Ryan " ?
sql:  SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  "Saving Private Ryan"
ground truth values:  [('movie.title', 'Saving Private Ryan')]
matched values OrderedDict()
--------------------
--------------------
text:  How many actors are in the movie " Saving Private Ryan " ?
sql:  SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  "Saving Private Ryan"
ground truth values:  [('movie.title', 'Saving Private Ryan')]
matched values OrderedDict()
--------------------
--------------------
text:  How many movies did " Steven Spielberg " direct ?
sql:  SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  "Steven Spielberg"
ground truth values:  [('director.name', 'Steven Spielberg')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the number of movies directed by " Woody Allen " per year ?
sql:  SELECT COUNT ( DISTINCT t3.title  )  ,  t3.release_year FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  "Woody Allen" GROUP BY t3.release_year
ground truth values:  [('director.name', 'Woody Allen')]
matched values OrderedDict()
--------------------
--------------------
text:  How many movies did " Shahab Hosseini " act in ?
sql:  SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  "Shahab Hosseini"
ground truth values:  [('actor.name', 'Shahab Hosseini')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the number of movies in which " Shahab Hosseini " acted ?
sql:  SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  "Shahab Hosseini"
ground truth values:  [('actor.name', 'Shahab Hosseini')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the number of movies featuring " Shahab Hosseini " ?
sql:  SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  "Shahab Hosseini"
ground truth values:  [('actor.name', 'Shahab Hosseini')]
matched values OrderedDict()
--------------------
--------------------
text:  How many movies did " Shahab Hosseini " act in
sql:  SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  "Shahab Hosseini"
ground truth values:  [('actor.name', 'Shahab Hosseini')]
matched values OrderedDict()
--------------------
--------------------
text:  How many actors were born in " Los Angeles " after 2000 ?
sql:  SELECT COUNT ( DISTINCT name  ) FROM actor WHERE birth_city  =  "Los Angeles" AND birth_year  >  2000
ground truth values:  [('actor.birth_city', 'Los Angeles')]
matched values OrderedDict()
--------------------
--------------------
text:  How many movies did " Humphrey Bogart " act in before 1942 ?
sql:  SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  "Humphrey Bogart" AND t2.release_year  <  1942
ground truth values:  [('actor.name', 'Humphrey Bogart')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the number of movies that " Brad Pitt " acts in per year ?
sql:  SELECT COUNT ( DISTINCT t2.title  )  ,  t2.release_year FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  "Brad Pitt" GROUP BY t2.release_year
ground truth values:  [('actor.name', 'Brad Pitt')]
matched values OrderedDict()
--------------------
--------------------
text:  How many movies about Iraq war were produced in 2015 ?
sql:  SELECT COUNT ( DISTINCT t3.title  ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  "Iraq war" AND t3.release_year  =  2015
ground truth values:  [('keyword.keyword', 'Iraq war')]
matched values OrderedDict()
--------------------
--------------------
text:  How many movies about Persians were released after 1990 ?
sql:  SELECT COUNT ( DISTINCT t3.title  ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  "Persians" AND t3.release_year  >  1990
ground truth values:  [('keyword.keyword', 'Persians')]
matched values OrderedDict()
--------------------
--------------------
text:  How many movies did " Quentin Tarantino " direct after 2010 ?
sql:  SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  "Quentin Tarantino" AND t3.release_year  >  2010
ground truth values:  [('director.name', 'Quentin Tarantino')]
matched values OrderedDict()
--------------------
--------------------
text:  How many movies did " Quentin Tarantino " direct before 2010 ?
sql:  SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  "Quentin Tarantino" AND t3.release_year  <  2010
ground truth values:  [('director.name', 'Quentin Tarantino')]
matched values OrderedDict()
--------------------
--------------------
text:  How many movies did " Quentin Tarantino " direct before 2002 and after 2010 ?
sql:  SELECT COUNT ( DISTINCT t4.title  ) FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN made_by AS t5 ON t4.mid  =  t5.msid JOIN producer AS t1 ON t1.pid  =  t5.pid WHERE t3.name  =  "Quentin Tarantino" AND t4.release_year  <  2010 AND t4.release_year  >  2002
ground truth values:  [('director.name', 'Quentin Tarantino')]
matched values OrderedDict()
--------------------
--------------------
text:  How many female actors were born in " New York City " after 1980 ?
sql:  SELECT COUNT ( DISTINCT name  ) FROM actor WHERE birth_city  =  "New York City" AND birth_year  >  1980 AND gender  =  "female"
ground truth values:  [('actor.birth_city', 'New York City'), ('actor.gender', 'female')]
matched values OrderedDict()
--------------------
--------------------
text:  find the number of actors from Iran who played in " Jim Jarmusch " movies
sql:  SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.nationality  =  "Iran" AND t3.name  =  "Jim Jarmusch"
ground truth values:  [('actor.nationality', 'Iran'), ('director.name', 'Jim Jarmusch')]
matched values OrderedDict()
--------------------
--------------------
text:  How many actors from China have acted in " Rush Hour 3 "
sql:   87%|████████▋ | 7770/8943 [16:53<00:28, 41.35it/s] 87%|████████▋ | 7772/8943 [16:54<33:39,  1.72s/it] 87%|████████▋ | 7775/8943 [16:54<23:43,  1.22s/it] 87%|████████▋ | 7779/8943 [16:54<16:42,  1.16it/s] 87%|████████▋ | 7783/8943 [16:54<11:49,  1.63it/s] 87%|████████▋ | 7788/8943 [16:54<08:21,  2.30it/s]SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.nationality  =  "China" AND t3.title  =  "Rush Hour 3"
ground truth values:  [('actor.nationality', 'China'), ('movie.title', 'Rush Hour 3')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all movies that star both " Woody Strode " and " Jason Robards "
sql:  SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  "Woody Strode" AND t2.name  =  "Jason Robards"
ground truth values:  [('actor.name', 'Woody Strode'), ('actor.name', 'Jason Robards')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all movies featuring " Woody Strode " and " Jason Robards "
sql:  SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  "Woody Strode" AND t2.name  =  "Jason Robards"
ground truth values:  [('actor.name', 'Woody Strode'), ('actor.name', 'Jason Robards')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all movies featuring both " Woody Strode " and " Jason Robards "
sql:  SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  "Woody Strode" AND t2.name  =  "Jason Robards"
ground truth values:  [('actor.name', 'Woody Strode'), ('actor.name', 'Jason Robards')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all movies featuring " Jason Robards " and " Woody Strode "
sql:  SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  "Woody Strode" AND t2.name  =  "Jason Robards"
ground truth values:  [('actor.name', 'Woody Strode'), ('actor.name', 'Jason Robards')]
matched values OrderedDict()
--------------------
--------------------
text:  Find all actors who acted in the same movie as " Tom Hanks "
sql:  SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN CAST AS t3 ON t5.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  "Tom Hanks"
ground truth values:  [('actor.name', 'Tom Hanks')]
matched values OrderedDict()
--------------------
--------------------
text:  What movies have the same director as the movie " Revolutionary Road " ?
sql:  SELECT t3.title FROM director AS t5 JOIN directed_by AS t2 ON t5.did  =  t2.did JOIN directed_by AS t1 ON t5.did  =  t1.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t4.title  =  "Revolutionary Road"
ground truth values:  [('movie.title', 'Revolutionary Road')]
matched values OrderedDict()
--------------------
--------------------
text:  which movie has the most number of actors from China ?
sql:  SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.nationality  =  "China" GROUP BY t2.title ORDER BY COUNT ( DISTINCT t1.name  ) DESC LIMIT 1
ground truth values:  [('actor.nationality', 'China')]
matched values OrderedDict()
--------------------
--------------------
text:  Find the actors who played in the latest movie by " Quentin Tarantino "
sql:  SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t3.name  =  "Quentin Tarantino" ORDER BY t5.release_year DESC LIMIT 1
ground truth values:  [('director.name', 'Quentin Tarantino')]
matched values OrderedDict()
--------------------
--------------------
text:  Find the name and budget of the latest movie by " Quentin Tarantino "
sql:  SELECT t3.budget  ,  t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  "Quentin Tarantino" ORDER BY t3.release_year DESC LIMIT 1
ground truth values:  [('director.name', 'Quentin Tarantino')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the latest movie by " Jim Jarmusch "
sql:  SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  "Jim Jarmusch" ORDER BY t3.release_year DESC LIMIT 1
ground truth values:  [('director.name', 'Jim Jarmusch')]
matched values OrderedDict()
--------------------
--------------------
text:  Find the latest movie which " Gabriele Ferzetti " acted in
sql:  SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.name  =  "Gabriele Ferzetti" ORDER BY t3.release_year DESC LIMIT 1
ground truth values:  [('actor.name', 'Gabriele Ferzetti')]
matched values OrderedDict()
--------------------
--------------------
text:  how many buttercup kitchen are there in san francisco ?
sql:  SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t1.name  =  "buttercup kitchen"
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('RESTAURANT.NAME', 'buttercup kitchen')]
matched values OrderedDict()
--------------------
--------------------
text:  how many chinese restaurants are there in the bay area ?
sql:  SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  "bay area" AND t1.food_type  =  "chinese"
ground truth values:  [('GEOGRAPHIC.REGION', 'bay area'), ('RESTAURANT.FOOD_TYPE', 'chinese')]
matched values OrderedDict()
--------------------
--------------------
text:  how many places for chinese food are there in the bay area ?
sql:  SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  "bay area" AND t1.food_type  =  "chinese"
ground truth values:  [('GEOGRAPHIC.REGION', 'bay area'), ('RESTAURANT.FOOD_TYPE', 'chinese')]
matched values OrderedDict()
--------------------
--------------------
text:  how many chinese places are there in the bay area ?
sql:  SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  "bay area" AND t1.food_type  =  "chinese"
ground truth values:  [('GEOGRAPHIC.REGION', 'bay area'), ('RESTAURANT.FOOD_TYPE', 'chinese')]
matched values OrderedDict()
--------------------
--------------------
text:  how many places for chinese are there in the bay area ?
sql:  SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  "bay area" AND t1.food_type  =  "chinese"
ground truth values:  [('GEOGRAPHIC.REGION', 'bay area'), ('RESTAURANT.FOOD_TYPE', 'chinese')]
matched values OrderedDict()
--------------------
--------------------
text:  how many jamerican cuisine are there in santa cruz county ?
sql:  SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.county  =  "santa cruz county" AND t1.name  =  "jamerican cuisine"
ground truth values:  [('GEOGRAPHIC.COUNTY', 'santa cruz county'), ('RESTAURANT.NAME', 'jamerican cuisine')]
matched values OrderedDict()
--------------------
--------------------
text:  where is jamerican cuisine ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.name  =  "jamerican cuisine"
ground truth values:  [('RESTAURANT.NAME', 'jamerican cuisine')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the best french restaurant in san francisco ?
sql:   87%|████████▋ | 7793/8943 [16:54<05:59,  3.20it/s] 87%|████████▋ | 7797/8943 [16:54<04:25,  4.32it/s] 87%|████████▋ | 7800/8943 [16:54<03:19,  5.72it/s] 87%|████████▋ | 7803/8943 [16:54<02:32,  7.48it/s]SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t1.food_type  =  "french" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t1.food_type  =  "french" )
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('RESTAURANT.FOOD_TYPE', 'french'), ('LOCATION.CITY_NAME', 'san francisco'), ('RESTAURANT.FOOD_TYPE', 'french')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the best french in san francisco ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t1.food_type  =  "french" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t1.food_type  =  "french" )
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('RESTAURANT.FOOD_TYPE', 'french'), ('LOCATION.CITY_NAME', 'san francisco'), ('RESTAURANT.FOOD_TYPE', 'french')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the best place in san francisco for french food ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t1.food_type  =  "french" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t1.food_type  =  "french" )
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('RESTAURANT.FOOD_TYPE', 'french'), ('LOCATION.CITY_NAME', 'san francisco'), ('RESTAURANT.FOOD_TYPE', 'french')]
matched values OrderedDict()
--------------------
--------------------
text:  Give me the best place in san francisco for french food ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t1.food_type  =  "french" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t1.food_type  =  "french" )
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('RESTAURANT.FOOD_TYPE', 'french'), ('LOCATION.CITY_NAME', 'san francisco'), ('RESTAURANT.FOOD_TYPE', 'french')]
matched values OrderedDict()
--------------------
--------------------
text:  Where is the best french in san francisco ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t1.food_type  =  "french" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t1.food_type  =  "french" )
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('RESTAURANT.FOOD_TYPE', 'french'), ('LOCATION.CITY_NAME', 'san francisco'), ('RESTAURANT.FOOD_TYPE', 'french')]
matched values OrderedDict()
--------------------
--------------------
text:  Give me the best french in san francisco ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t1.food_type  =  "french" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t1.food_type  =  "french" )
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('RESTAURANT.FOOD_TYPE', 'french'), ('LOCATION.CITY_NAME', 'san francisco'), ('RESTAURANT.FOOD_TYPE', 'french')]
matched values OrderedDict()
--------------------
--------------------
text:  Where is the best french restaurant in san francisco ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t1.food_type  =  "french" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t1.food_type  =  "french" )
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('RESTAURANT.FOOD_TYPE', 'french'), ('LOCATION.CITY_NAME', 'san francisco'), ('RESTAURANT.FOOD_TYPE', 'french')]
matched values OrderedDict()
--------------------
--------------------
text:  Give me the best restaurant in san francisco for french food ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t1.food_type  =  "french" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t1.food_type  =  "french" )
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('RESTAURANT.FOOD_TYPE', 'french'), ('LOCATION.CITY_NAME', 'san francisco'), ('RESTAURANT.FOOD_TYPE', 'french')]
matched values OrderedDict()
--------------------
--------------------
text:  Give me the best french restaurant in san francisco ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t1.food_type  =  "french" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t1.food_type  =  "french" )
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('RESTAURANT.FOOD_TYPE', 'french'), ('LOCATION.CITY_NAME', 'san francisco'), ('RESTAURANT.FOOD_TYPE', 'french')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the best restaurant in san francisco for french food ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t1.food_type  =  "french" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t1.food_type  =  "french" )
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('RESTAURANT.FOOD_TYPE', 'french'), ('LOCATION.CITY_NAME', 'san francisco'), ('RESTAURANT.FOOD_TYPE', 'french')]
matched values OrderedDict()
--------------------
--------------------
text:  Where is the best restaurant in san francisco for french food ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t1.food_type  =  "french" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t1.food_type  =  "french" )
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('RESTAURANT.FOOD_TYPE', 'french'), ('LOCATION.CITY_NAME', 'san francisco'), ('RESTAURANT.FOOD_TYPE', 'french')]
matched values OrderedDict()
--------------------
--------------------
text:  where is denny in the bay area ?
sql:  SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "bay area" AND t1.name  =  "denny"
ground truth values:  [('GEOGRAPHIC.REGION', 'bay area'), ('RESTAURANT.NAME', 'denny')]
matched values OrderedDict()
--------------------
--------------------
text:  what are some good restaurants on bethel island rd in bethel island ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "bethel island" AND t2.street_name  =  "bethel island rd" AND t1.rating  >  2.5
ground truth values:   87%|████████▋ | 7807/8943 [16:55<01:55,  9.83it/s] 87%|████████▋ | 7813/8943 [16:55<01:26, 13.07it/s] 87%|████████▋ | 7819/8943 [16:55<01:06, 16.86it/s] 87%|████████▋ | 7824/8943 [16:55<00:53, 20.91it/s][('LOCATION.CITY_NAME', 'bethel island'), ('LOCATION.STREET_NAME', 'bethel island rd')]
matched values OrderedDict()
--------------------
--------------------
text:  give me some good restaurants on bethel island rd in bethel island ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "bethel island" AND t2.street_name  =  "bethel island rd" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'bethel island'), ('LOCATION.STREET_NAME', 'bethel island rd')]
matched values OrderedDict()
--------------------
--------------------
text:  give me a good restaurant on bethel island rd in bethel island ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "bethel island" AND t2.street_name  =  "bethel island rd" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'bethel island'), ('LOCATION.STREET_NAME', 'bethel island rd')]
matched values OrderedDict()
--------------------
--------------------
text:  what is a good restaurant on bethel island rd in bethel island ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "bethel island" AND t2.street_name  =  "bethel island rd" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'bethel island'), ('LOCATION.STREET_NAME', 'bethel island rd')]
matched values OrderedDict()
--------------------
--------------------
text:  where can we find a restaurant in alameda ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "alameda"
ground truth values:  [('LOCATION.CITY_NAME', 'alameda')]
matched values OrderedDict()
--------------------
--------------------
text:  give me a restaurant in alameda ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "alameda"
ground truth values:  [('LOCATION.CITY_NAME', 'alameda')]
matched values OrderedDict()
--------------------
--------------------
text:  where can we find some restaurants in alameda ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "alameda"
ground truth values:  [('LOCATION.CITY_NAME', 'alameda')]
matched values OrderedDict()
--------------------
--------------------
text:  where is a restaurant in alameda ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "alameda"
ground truth values:  [('LOCATION.CITY_NAME', 'alameda')]
matched values OrderedDict()
--------------------
--------------------
text:  give me some restaurants in alameda ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "alameda"
ground truth values:  [('LOCATION.CITY_NAME', 'alameda')]
matched values OrderedDict()
--------------------
--------------------
text:  give me some restaurants good for french food ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  "french" AND t1.rating  >  2.5
ground truth values:  [('RESTAURANT.FOOD_TYPE', 'french')]
matched values OrderedDict()
--------------------
--------------------
text:  where are some restaurants good for french food ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  "french" AND t1.rating  >  2.5
ground truth values:  [('RESTAURANT.FOOD_TYPE', 'french')]
matched values OrderedDict()
--------------------
--------------------
text:  how many places for french food are there in palo alto ?
sql:  SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "palo alto" AND t1.food_type  =  "french"
ground truth values:  [('LOCATION.CITY_NAME', 'palo alto'), ('RESTAURANT.FOOD_TYPE', 'french')]
matched values OrderedDict()
--------------------
--------------------
text:  how many french restaurants are there in palo alto ?
sql:  SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "palo alto" AND t1.food_type  =  "french"
ground truth values:  [('LOCATION.CITY_NAME', 'palo alto'), ('RESTAURANT.FOOD_TYPE', 'french')]
matched values OrderedDict()
--------------------
--------------------
text:  how many french restaurant are there in palo alto ?
sql:  SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "palo alto" AND t1.food_type  =  "french"
ground truth values:  [('LOCATION.CITY_NAME', 'palo alto'), ('RESTAURANT.FOOD_TYPE', 'french')]
matched values OrderedDict()
--------------------
--------------------
text:  how many places for french are there in palo alto ?
sql:  SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "palo alto" AND t1.food_type  =  "french"
ground truth values:  [('LOCATION.CITY_NAME', 'palo alto'), ('RESTAURANT.FOOD_TYPE', 'french')]
matched values OrderedDict()
--------------------
--------------------
text:  how many italian restaurants are in the yolo county ?
sql:  SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.county  =  "yolo county" AND t1.food_type  =  "italian"
ground truth values:  [('GEOGRAPHIC.COUNTY', 'yolo county'), ('RESTAURANT.FOOD_TYPE', 'italian')]
matched values OrderedDict()
--------------------
--------------------
text:  where can i eat french food in mountain view ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "mountain view" AND t1.food_type  =  "french"
ground truth values:  [('LOCATION.CITY_NAME', 'mountain view'), ('RESTAURANT.FOOD_TYPE', 'french')]
matched values OrderedDict()
--------------------
--------------------
text:  how many denny are there in the bay area ?
sql:  SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  "bay area" AND t1.name  =  "denny"
ground truth values:  [('GEOGRAPHIC.REGION', 'bay area'), ('RESTAURANT.NAME', 'denny')]
matched values OrderedDict()
--------------------
--------------------
text:  give me a good restaurant in alameda ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "alameda" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'alameda')]
matched values OrderedDict()
--------------------
--------------------
text:  what are some good restaurants in alameda ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "alameda" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'alameda')]
matched values OrderedDict()
--------------------
--------------------
text:  what is a good restaurant in alameda ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "alameda" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'alameda')]
matched values OrderedDict()
--------------------
--------------------
text:  give me some good restaurants in alameda ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "alameda" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'alameda')]
matched values OrderedDict()
--------------------
--------------------
text:  where is a good restaurant on buchanan in san francisco for arabic food ?
sql:   88%|████████▊ | 7829/8943 [16:55<00:47, 23.47it/s] 88%|████████▊ | 7834/8943 [16:55<00:43, 25.37it/s] 88%|████████▊ | 7838/8943 [16:55<00:41, 26.90it/s]SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t2.street_name  =  "buchanan" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('LOCATION.STREET_NAME', 'buchanan'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  where are some good arabics on buchanan in san francisco ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t2.street_name  =  "buchanan" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('LOCATION.STREET_NAME', 'buchanan'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  where is a good arabic restaurant on buchanan in san francisco ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t2.street_name  =  "buchanan" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('LOCATION.STREET_NAME', 'buchanan'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  what are some good places for arabic on buchanan in san francisco ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t2.street_name  =  "buchanan" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('LOCATION.STREET_NAME', 'buchanan'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  give me a good arabic on buchanan in san francisco ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t2.street_name  =  "buchanan" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('LOCATION.STREET_NAME', 'buchanan'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  give me some restaurants good for arabic food on buchanan in san francisco ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t2.street_name  =  "buchanan" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('LOCATION.STREET_NAME', 'buchanan'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  give me a good place on buchanan in san francisco for arabic food ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t2.street_name  =  "buchanan" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('LOCATION.STREET_NAME', 'buchanan'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  where is a good place on buchanan in san francisco for arabic food ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t2.street_name  =  "buchanan" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('LOCATION.STREET_NAME', 'buchanan'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  where can i eat arabic food on buchanan in san francisco ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t2.street_name  =  "buchanan" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('LOCATION.STREET_NAME', 'buchanan'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  give me some good places on buchanan in san francisco for arabic food ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t2.street_name  =  "buchanan" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('LOCATION.STREET_NAME', 'buchanan'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  where is a arabic restaurant on buchanan in san francisco ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t2.street_name  =  "buchanan" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('LOCATION.STREET_NAME', 'buchanan'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  give me a restaurant on buchanan in san francisco that serves good arabic food ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t2.street_name  =  "buchanan" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('LOCATION.STREET_NAME', 'buchanan'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  give me a good restaurant on buchanan in san francisco for arabic food ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t2.street_name  =  "buchanan" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('LOCATION.STREET_NAME', 'buchanan'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  where is a restaurant on buchanan in san francisco that serves good arabic food ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t2.street_name  =  "buchanan" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('LOCATION.STREET_NAME', 'buchanan'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  give me some good restaurants on buchanan in san francisco for arabic food ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t2.street_name  =  "buchanan" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('LOCATION.STREET_NAME', 'buchanan'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  give me some good places for arabic on buchanan in san francisco ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t2.street_name  =  "buchanan" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:   88%|████████▊ | 7842/8943 [16:56<00:39, 28.08it/s] 88%|████████▊ | 7846/8943 [16:56<00:38, 28.66it/s] 88%|████████▊ | 7850/8943 [16:56<00:35, 30.99it/s] 88%|████████▊ | 7854/8943 [16:56<00:35, 30.25it/s][('LOCATION.CITY_NAME', 'san francisco'), ('LOCATION.STREET_NAME', 'buchanan'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  where can i eat some good arabic food on buchanan in san francisco ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t2.street_name  =  "buchanan" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('LOCATION.STREET_NAME', 'buchanan'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  where is a good arabic on buchanan in san francisco ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t2.street_name  =  "buchanan" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('LOCATION.STREET_NAME', 'buchanan'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  where are some restaurants good for arabic food on buchanan in san francisco ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t2.street_name  =  "buchanan" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('LOCATION.STREET_NAME', 'buchanan'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  where are some good places for arabic on buchanan in san francisco ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t2.street_name  =  "buchanan" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('LOCATION.STREET_NAME', 'buchanan'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  give me a good arabic restaurant on buchanan in san francisco ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t2.street_name  =  "buchanan" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('LOCATION.STREET_NAME', 'buchanan'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  give me some good arabics on buchanan in san francisco ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t2.street_name  =  "buchanan" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('LOCATION.STREET_NAME', 'buchanan'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  where can i eat french food in the bay area ?
sql:  SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "bay area" AND t1.food_type  =  "french"
ground truth values:  [('GEOGRAPHIC.REGION', 'bay area'), ('RESTAURANT.FOOD_TYPE', 'french')]
matched values OrderedDict()
--------------------
--------------------
text:  give me some restaurants on bethel island rd in bethel island ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "bethel island" AND t2.street_name  =  "bethel island rd"
ground truth values:  [('LOCATION.CITY_NAME', 'bethel island'), ('LOCATION.STREET_NAME', 'bethel island rd')]
matched values OrderedDict()
--------------------
--------------------
text:  give me a restaurant on bethel island rd in bethel island ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "bethel island" AND t2.street_name  =  "bethel island rd"
ground truth values:  [('LOCATION.CITY_NAME', 'bethel island'), ('LOCATION.STREET_NAME', 'bethel island rd')]
matched values OrderedDict()
--------------------
--------------------
text:  where can we find a restaurant on bethel island rd in bethel island ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "bethel island" AND t2.street_name  =  "bethel island rd"
ground truth values:  [('LOCATION.CITY_NAME', 'bethel island'), ('LOCATION.STREET_NAME', 'bethel island rd')]
matched values OrderedDict()
--------------------
--------------------
text:  where can we find some restaurants on bethel island rd in bethel island ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "bethel island" AND t2.street_name  =  "bethel island rd"
ground truth values:  [('LOCATION.CITY_NAME', 'bethel island'), ('LOCATION.STREET_NAME', 'bethel island rd')]
matched values OrderedDict()
--------------------
--------------------
text:  where is the best restaurant in the bay area for american food ?
sql:  SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "bay area" AND t1.food_type  =  "american" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  "bay area" AND t1.food_type  =  "american" )
ground truth values:  [('GEOGRAPHIC.REGION', 'bay area'), ('RESTAURANT.FOOD_TYPE', 'american'), ('GEOGRAPHIC.REGION', 'bay area'), ('RESTAURANT.FOOD_TYPE', 'american')]
matched values OrderedDict()
--------------------
--------------------
text:  where is the best restaurant in bay area for american food ?
sql:  SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "bay area" AND t1.food_type  =  "american" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  "bay area" AND t1.food_type  =  "american" )
ground truth values:  [('GEOGRAPHIC.REGION', 'bay area'), ('RESTAURANT.FOOD_TYPE', 'american'), ('GEOGRAPHIC.REGION', 'bay area'), ('RESTAURANT.FOOD_TYPE', 'american')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the best restaurant in bay area for american food ?
sql:  SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "bay area" AND t1.food_type  =  "american" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  "bay area" AND t1.food_type  =  "american" )
ground truth values:  [('GEOGRAPHIC.REGION', 'bay area'), ('RESTAURANT.FOOD_TYPE', 'american'), ('GEOGRAPHIC.REGION', 'bay area'), ('RESTAURANT.FOOD_TYPE', 'american')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the best american restaurant in the bay area ?
sql:   88%|████████▊ | 7858/8943 [16:56<00:40, 26.72it/s] 88%|████████▊ | 7861/8943 [16:56<00:43, 24.71it/s] 88%|████████▊ | 7864/8943 [16:56<00:46, 23.32it/s]SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "bay area" AND t1.food_type  =  "american" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  "bay area" AND t1.food_type  =  "american" )
ground truth values:  [('GEOGRAPHIC.REGION', 'bay area'), ('RESTAURANT.FOOD_TYPE', 'american'), ('GEOGRAPHIC.REGION', 'bay area'), ('RESTAURANT.FOOD_TYPE', 'american')]
matched values OrderedDict()
--------------------
--------------------
text:  where is the best american restaurant in the bay area ?
sql:  SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "bay area" AND t1.food_type  =  "american" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  "bay area" AND t1.food_type  =  "american" )
ground truth values:  [('GEOGRAPHIC.REGION', 'bay area'), ('RESTAURANT.FOOD_TYPE', 'american'), ('GEOGRAPHIC.REGION', 'bay area'), ('RESTAURANT.FOOD_TYPE', 'american')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the best american in the bay area ?
sql:  SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "bay area" AND t1.food_type  =  "american" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  "bay area" AND t1.food_type  =  "american" )
ground truth values:  [('GEOGRAPHIC.REGION', 'bay area'), ('RESTAURANT.FOOD_TYPE', 'american'), ('GEOGRAPHIC.REGION', 'bay area'), ('RESTAURANT.FOOD_TYPE', 'american')]
matched values OrderedDict()
--------------------
--------------------
text:  give me the best restaurant in the bay area for american food ?
sql:  SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "bay area" AND t1.food_type  =  "american" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  "bay area" AND t1.food_type  =  "american" )
ground truth values:  [('GEOGRAPHIC.REGION', 'bay area'), ('RESTAURANT.FOOD_TYPE', 'american'), ('GEOGRAPHIC.REGION', 'bay area'), ('RESTAURANT.FOOD_TYPE', 'american')]
matched values OrderedDict()
--------------------
--------------------
text:  give me the best restaurant in bay area for american food ?
sql:  SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "bay area" AND t1.food_type  =  "american" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  "bay area" AND t1.food_type  =  "american" )
ground truth values:  [('GEOGRAPHIC.REGION', 'bay area'), ('RESTAURANT.FOOD_TYPE', 'american'), ('GEOGRAPHIC.REGION', 'bay area'), ('RESTAURANT.FOOD_TYPE', 'american')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the best restaurant in the bay area for american food ?
sql:  SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "bay area" AND t1.food_type  =  "american" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  "bay area" AND t1.food_type  =  "american" )
ground truth values:  [('GEOGRAPHIC.REGION', 'bay area'), ('RESTAURANT.FOOD_TYPE', 'american'), ('GEOGRAPHIC.REGION', 'bay area'), ('RESTAURANT.FOOD_TYPE', 'american')]
matched values OrderedDict()
--------------------
--------------------
text:  where is the best american in the bay area ?
sql:  SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "bay area" AND t1.food_type  =  "american" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  "bay area" AND t1.food_type  =  "american" )
ground truth values:  [('GEOGRAPHIC.REGION', 'bay area'), ('RESTAURANT.FOOD_TYPE', 'american'), ('GEOGRAPHIC.REGION', 'bay area'), ('RESTAURANT.FOOD_TYPE', 'american')]
matched values OrderedDict()
--------------------
--------------------
text:  give me the best american in the bay area ?
sql:  SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "bay area" AND t1.food_type  =  "american" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  "bay area" AND t1.food_type  =  "american" )
ground truth values:  [('GEOGRAPHIC.REGION', 'bay area'), ('RESTAURANT.FOOD_TYPE', 'american'), ('GEOGRAPHIC.REGION', 'bay area'), ('RESTAURANT.FOOD_TYPE', 'american')]
matched values OrderedDict()
--------------------
--------------------
text:  give me the best american restaurant in the bay area ?
sql:  SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "bay area" AND t1.food_type  =  "american" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  "bay area" AND t1.food_type  =  "american" )
ground truth values:  [('GEOGRAPHIC.REGION', 'bay area'), ('RESTAURANT.FOOD_TYPE', 'american'), ('GEOGRAPHIC.REGION', 'bay area'), ('RESTAURANT.FOOD_TYPE', 'american')]
matched values OrderedDict()
--------------------
--------------------
text:  give me some restaurants good for french food in the yosemite and mono lake area ?
sql:  SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "yosemite and mono lake area" AND t1.food_type  =  "french" AND t1.rating  >  2.5
ground truth values:  [('GEOGRAPHIC.REGION', 'yosemite and mono lake area'), ('RESTAURANT.FOOD_TYPE', 'french')]
matched values OrderedDict()
--------------------
--------------------
text:  what are some good places in the yosemite and mono lake area for french food ?
sql:  SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "yosemite and mono lake area" AND t1.food_type  =  "french" AND t1.rating  >  2.5
ground truth values:  [('GEOGRAPHIC.REGION', 'yosemite and mono lake area'), ('RESTAURANT.FOOD_TYPE', 'french')]
matched values OrderedDict()
--------------------
--------------------
text:  give me a good restaurant in the yosemite and mono lake area for french food ?
sql:  SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "yosemite and mono lake area" AND t1.food_type  =  "french" AND t1.rating  >  2.5
ground truth values:  [('GEOGRAPHIC.REGION', 'yosemite and mono lake area'), ('RESTAURANT.FOOD_TYPE', 'french')]
matched values OrderedDict()
--------------------
--------------------
text:  give me a good french restaurant in the yosemite and mono lake area ?
sql:   88%|████████▊ | 7868/8943 [16:56<00:42, 25.18it/s] 88%|████████▊ | 7872/8943 [16:57<00:40, 26.68it/s] 88%|████████▊ | 7876/8943 [16:57<00:37, 28.09it/s] 88%|████████▊ | 7880/8943 [16:57<00:35, 30.10it/s] 88%|████████▊ | 7884/8943 [16:57<00:33, 31.88it/s]SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "yosemite and mono lake area" AND t1.food_type  =  "french" AND t1.rating  >  2.5
ground truth values:  [('GEOGRAPHIC.REGION', 'yosemite and mono lake area'), ('RESTAURANT.FOOD_TYPE', 'french')]
matched values OrderedDict()
--------------------
--------------------
text:  where is a good place in the yosemite and mono lake area for french food ?
sql:  SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "yosemite and mono lake area" AND t1.food_type  =  "french" AND t1.rating  >  2.5
ground truth values:  [('GEOGRAPHIC.REGION', 'yosemite and mono lake area'), ('RESTAURANT.FOOD_TYPE', 'french')]
matched values OrderedDict()
--------------------
--------------------
text:  where are some restaurants good for french food in the yosemite and mono lake area ?
sql:  SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "yosemite and mono lake area" AND t1.food_type  =  "french" AND t1.rating  >  2.5
ground truth values:  [('GEOGRAPHIC.REGION', 'yosemite and mono lake area'), ('RESTAURANT.FOOD_TYPE', 'french')]
matched values OrderedDict()
--------------------
--------------------
text:  give me a good place in the yosemite and mono lake area for french food ?
sql:  SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "yosemite and mono lake area" AND t1.food_type  =  "french" AND t1.rating  >  2.5
ground truth values:  [('GEOGRAPHIC.REGION', 'yosemite and mono lake area'), ('RESTAURANT.FOOD_TYPE', 'french')]
matched values OrderedDict()
--------------------
--------------------
text:  where is a good restaurant in the yosemite and mono lake area for french food ?
sql:  SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "yosemite and mono lake area" AND t1.food_type  =  "french" AND t1.rating  >  2.5
ground truth values:  [('GEOGRAPHIC.REGION', 'yosemite and mono lake area'), ('RESTAURANT.FOOD_TYPE', 'french')]
matched values OrderedDict()
--------------------
--------------------
text:  what are some good restaurants in the yosemite and mono lake area for french food ?
sql:  SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "yosemite and mono lake area" AND t1.food_type  =  "french" AND t1.rating  >  2.5
ground truth values:  [('GEOGRAPHIC.REGION', 'yosemite and mono lake area'), ('RESTAURANT.FOOD_TYPE', 'french')]
matched values OrderedDict()
--------------------
--------------------
text:  where is a good french restaurant in the yosemite and mono lake area ?
sql:  SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "yosemite and mono lake area" AND t1.food_type  =  "french" AND t1.rating  >  2.5
ground truth values:  [('GEOGRAPHIC.REGION', 'yosemite and mono lake area'), ('RESTAURANT.FOOD_TYPE', 'french')]
matched values OrderedDict()
--------------------
--------------------
text:  where can i eat some good french food in the yosemite and mono lake area ?
sql:  SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  "yosemite and mono lake area" AND t1.food_type  =  "french" AND t1.rating  >  2.5
ground truth values:  [('GEOGRAPHIC.REGION', 'yosemite and mono lake area'), ('RESTAURANT.FOOD_TYPE', 'french')]
matched values OrderedDict()
--------------------
--------------------
text:  where are some restaurants good for arabic food in mountain view ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "mountain view" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'mountain view'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  what are some good places in mountain view for arabic food ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "mountain view" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'mountain view'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  where are some good arabic restaurants in mountain view ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "mountain view" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'mountain view'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  show me a good arabic restaurant in mountain view ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "mountain view" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'mountain view'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  give me a good arabic in mountain view ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "mountain view" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'mountain view'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  give me a good arabic restaurant in mountain view ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "mountain view" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'mountain view'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  give me a good place in mountain view for arabic food ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "mountain view" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'mountain view'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  where are some good arabics in mountain view ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "mountain view" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'mountain view'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  where is a restaurant in mountain view that serves good arabic food ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "mountain view" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'mountain view'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:   88%|████████▊ | 7888/8943 [16:57<00:31, 33.32it/s] 88%|████████▊ | 7892/8943 [16:57<00:30, 34.40it/s] 88%|████████▊ | 7896/8943 [16:57<00:29, 35.22it/s] 88%|████████▊ | 7901/8943 [16:57<00:28, 36.98it/s]what are some good restaurants in mountain view for arabic food ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "mountain view" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'mountain view'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  give me some restaurants good for arabic food in mountain view ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "mountain view" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'mountain view'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  where can i eat some good arabic food in mountain view ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "mountain view" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'mountain view'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  give me some good places for arabic in mountain view ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "mountain view" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'mountain view'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  where is a good arabic in mountain view ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "mountain view" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'mountain view'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  give me a restaurant in mountain view that serves good arabic food ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "mountain view" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'mountain view'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  give me some good arabic restaurants in mountain view ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "mountain view" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'mountain view'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  where are some good places for arabic in mountain view ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "mountain view" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'mountain view'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  give me some good arabics in mountain view ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "mountain view" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'mountain view'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  give me a good restaurant in mountain view for arabic food ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "mountain view" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'mountain view'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  where is a good arabic restaurant in mountain view ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "mountain view" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'mountain view'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  what are some good places for arabic in mountain view ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "mountain view" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'mountain view'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  where is a good restaurant in mountain view for arabic food ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "mountain view" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'mountain view'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  where is a good place in mountain view for arabic food ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "mountain view" AND t1.food_type  =  "arabic" AND t1.rating  >  2.5
ground truth values:  [('LOCATION.CITY_NAME', 'mountain view'), ('RESTAURANT.FOOD_TYPE', 'arabic')]
matched values OrderedDict()
--------------------
--------------------
text:  where can i find a jamerican cuisine in san francisco ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t1.name  =  "jamerican cuisine"
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('RESTAURANT.NAME', 'jamerican cuisine')]
matched values OrderedDict()
--------------------
--------------------
text:  where is jamerican cuisine in san francisco ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t1.name  =  "jamerican cuisine"
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('RESTAURANT.NAME', 'jamerican cuisine')]
matched values OrderedDict()
--------------------
--------------------
text:  where is a jamerican cuisine in san francisco ?
sql:  SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  "san francisco" AND t1.name  =  "jamerican cuisine"
ground truth values:  [('LOCATION.CITY_NAME', 'san francisco'), ('RESTAURANT.NAME', 'jamerican cuisine')]
matched values OrderedDict()
--------------------
--------------------
text:  where can we find some restaurants in the bay area ?
sql:  SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  "bay area" )
ground truth values:  [('GEOGRAPHIC.REGION', 'bay area')]
matched values OrderedDict()
--------------------
--------------------
text:  give me some restaurants in the bay area ?
sql:  SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  "bay area" )
ground truth values:  [('GEOGRAPHIC.REGION', 'bay area')]
matched values OrderedDict()
--------------------
--------------------
text:   88%|████████▊ | 7906/8943 [16:58<00:26, 38.45it/s] 88%|████████▊ | 7912/8943 [16:58<00:24, 42.75it/s] 89%|████████▊ | 7922/8943 [16:58<00:20, 50.78it/s] 89%|████████▊ | 7930/8943 [16:58<00:17, 56.94it/s] 89%|████████▉ | 7937/8943 [16:58<00:17, 58.85it/s] 89%|████████▉ | 7944/8943 [16:58<00:16, 59.07it/s] 89%|████████▉ | 7951/8943 [16:58<00:17, 57.99it/s] 89%|████████▉ | 7958/8943 [16:58<00:16, 59.88it/s] 89%|████████▉ | 7967/8943 [16:58<00:15, 64.00it/s] 89%|████████▉ | 7974/8943 [16:59<00:18, 53.06it/s] 89%|████████▉ | 7980/8943 [16:59<00:18, 51.25it/s] 89%|████████▉ | 7989/8943 [16:59<00:16, 57.61it/s] 89%|████████▉ | 7996/8943 [16:59<00:16, 57.69it/s] 89%|████████▉ | 8003/8943 [16:59<00:17, 53.09it/s] 90%|████████▉ | 8009/8943 [16:59<00:21, 43.67it/s] 90%|████████▉ | 8014/8943 [16:59<00:24, 37.29it/s] 90%|████████▉ | 8019/8943 [17:00<00:26, 34.46it/s]give me a restaurant in the bay area ?
sql:  SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  "bay area" )
ground truth values:  [('GEOGRAPHIC.REGION', 'bay area')]
matched values OrderedDict()
--------------------
--------------------
text:  where can i find a restaurant in the bay area ?
sql:  SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  "bay area" )
ground truth values:  [('GEOGRAPHIC.REGION', 'bay area')]
matched values OrderedDict()
--------------------
--------------------
text:  give me a good restaurant in the bay area ?
sql:  SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  "region0" ) AND t1.rating  >  2.5
ground truth values:  [('GEOGRAPHIC.REGION', 'region0')]
matched values OrderedDict()
--------------------
--------------------
text:  what are some good restaurants in the bay area ?
sql:  SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  "region0" ) AND t1.rating  >  2.5
ground truth values:  [('GEOGRAPHIC.REGION', 'region0')]
matched values OrderedDict()
--------------------
--------------------
text:  give me some good restaurants in the bay area ?
sql:  SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  "region0" ) AND t1.rating  >  2.5
ground truth values:  [('GEOGRAPHIC.REGION', 'region0')]
matched values OrderedDict()
--------------------
--------------------
text:  what is a good restaurant in the bay area ?
sql:  SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  "region0" ) AND t1.rating  >  2.5
ground truth values:  [('GEOGRAPHIC.REGION', 'region0')]
matched values OrderedDict()
--------------------
Picklist: What is the average, minimum, and maximum age of all singers from France?, singer, Country, [France]
--------------------
text:  What is the average, minimum, and maximum age for all French singers?
sql:  SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
ground truth values:  [('singer.Country', 'France')]
matched values OrderedDict()
--------------------
Picklist: Find the weight of the youngest dog., Pets, PetType, [dog]
--------------------
text:  Find the weight of the youngest dog.
sql:  SELECT weight FROM pets ORDER BY pet_age LIMIT 1
ground truth values:  []
matched values OrderedDict([(41, ('Pets.PetType', 'dog'))])
--------------------
Picklist: How much does the youngest dog weigh?, Pets, PetType, [dog]
--------------------
text:  How much does the youngest dog weigh?
sql:  SELECT weight FROM pets ORDER BY pet_age LIMIT 1
ground truth values:  []
matched values OrderedDict([(41, ('Pets.PetType', 'dog'))])
--------------------
Picklist: Find the number of dog pets that are raised by female students (with sex F)., Pets, PetType, [dog]
--------------------
text:  Find the number of dog pets that are raised by female students (with sex F).
sql:  SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
ground truth values:  [('Student.Sex', 'F'), ('Pets.PetType', 'dog')]
matched values OrderedDict([(41, ('Pets.PetType', 'dog'))])
--------------------
Picklist: How many dog pets are raised by female students?, Pets, PetType, [dog]
--------------------
text:  How many dog pets are raised by female students?
sql:  SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
ground truth values:  [('Student.Sex', 'F'), ('Pets.PetType', 'dog')]
matched values OrderedDict([(41, ('Pets.PetType', 'dog'))])
--------------------
Picklist: Find the first name of students who have cat or dog pet., Pets, PetType, [dog]
Picklist: Find the first name of students who have cat or dog pet., Pets, PetType, [cat]
Picklist: What are the first names of every student who has a cat or dog as a pet?, Pets, PetType, [dog]
Picklist: What are the first names of every student who has a cat or dog as a pet?, Pets, PetType, [cat]
Picklist: Find the first name of students who have both cat and dog pets ., Pets, PetType, [dog]
Picklist: Find the first name of students who have both cat and dog pets ., Pets, PetType, [cat]
Picklist: What are the students' first names who have both cats and dogs as pets?, Pets, PetType, [dog]
Picklist: What are the students' first names who have both cats and dogs as pets?, Pets, PetType, [cat]
Picklist: Find the major and age of students who do not have a cat pet., Pets, PetType, [cat]
Picklist: What major is every student who does not own a cat as a pet, and also how old are they?, Pets, PetType, [cat]
Picklist: Find the id of students who do not have a cat pet., Pets, PetType, [cat]
Picklist: What are the ids of the students who do not own cats as pets?, Pets, PetType, [cat]
Picklist: Find the first name and age of students who have a dog but do not have a cat as a pet., Pets, PetType, [dog]
Picklist: Find the first name and age of students who have a dog but do not have a cat as a pet., Pets, PetType, [cat]
Picklist: What is the first name of every student who has a dog but does not have a cat?, Pets, PetType, [dog]
Picklist: What is the first name of every student who has a dog but does not have a cat?, Pets, PetType, [cat]
--------------------
text:  Find the id of the pet owned by student whose last name is ‘Smith'.
sql:  SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'
ground truth values:  [('Student.LName', 'Smith')]
matched values OrderedDict()
--------------------
Picklist: What is the id of the pet owned by the student whose last name is 'Smith'?, Student, LName, [Smith]
Picklist: Find the last name of the student who has a cat that is age 3., Pets, PetType, [cat]
Picklist: What is the last name of the student who has a cat that is 3 years old?, Pets, PetType, [cat]
Picklist: What is the accelerate of the car make amc hornet sportabout (sw)?, car_makers, Maker, [amc]
Picklist: What is the accelerate of the car make amc hornet sportabout (sw)?, model_list, Model, [amc]
Picklist: What is the accelerate of the car make amc hornet sportabout (sw)?, car_names, Model, [amc]
Picklist: What is the accelerate of the car make amc hornet sportabout (sw)?, car_names, Make, [amc hornet]
Picklist: What is the accelerate of the car make amc hornet sportabout (sw)?, car_names, Make, [amc hornet sportabout (sw)]
--------------------
text:  What is the accelerate of the car make amc hornet sportabout (sw)?
sql:  SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'
ground truth values:  [('car_names.Make', 'amc hornet sportabout (sw)')]
matched values OrderedDict([(27, ('car_makers.Maker', 'amc')), (44, ('model_list.Model', 'amc')), (54, ('car_names.Model', 'amc')), (58, ('car_names.Make', 'amc hornet')), (61, ('car_names.Make', 'amc hornet sportabout (sw)'))])
--------------------
Picklist: How much does the car accelerate that makes amc hornet sportabout (sw)?, car_makers, Maker, [amc]
Picklist: How much does the car accelerate that makes amc hornet sportabout (sw)?, model_list, Model, [amc]
Picklist: How much does the car accelerate that makes amc hornet sportabout (sw)?, car_names, Model, [amc]
Picklist: How much does the car accelerate that makes amc hornet sportabout (sw)?, car_names, Make, [amc hornet]
 90%|████████▉ | 8023/8943 [17:00<00:26, 34.18it/s] 90%|████████▉ | 8027/8943 [17:00<00:26, 34.92it/s] 90%|████████▉ | 8031/8943 [17:00<00:25, 35.65it/s] 90%|████████▉ | 8035/8943 [17:00<00:25, 36.14it/s] 90%|████████▉ | 8039/8943 [17:00<00:24, 37.06it/s] 90%|████████▉ | 8043/8943 [17:00<00:27, 32.63it/s] 90%|████████▉ | 8047/8943 [17:00<00:26, 34.24it/s] 90%|█████████ | 8052/8943 [17:01<00:24, 36.59it/s] 90%|█████████ | 8057/8943 [17:01<00:22, 38.66it/s] 90%|█████████ | 8061/8943 [17:01<00:25, 34.48it/s] 90%|█████████ | 8065/8943 [17:01<00:27, 31.99it/s] 90%|█████████ | 8069/8943 [17:01<00:27, 31.56it/s] 90%|█████████ | 8073/8943 [17:01<00:26, 33.04it/s] 90%|█████████ | 8077/8943 [17:01<00:27, 31.47it/s] 90%|█████████ | 8081/8943 [17:02<00:29, 29.01it/s]Picklist: How much does the car accelerate that makes amc hornet sportabout (sw)?, car_names, Make, [amc hornet sportabout (sw)]
--------------------
text:  How much does the car accelerate that makes amc hornet sportabout (sw)?
sql:  SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'
ground truth values:  [('car_names.Make', 'amc hornet sportabout (sw)')]
matched values OrderedDict([(27, ('car_makers.Maker', 'amc')), (44, ('model_list.Model', 'amc')), (54, ('car_names.Model', 'amc')), (58, ('car_names.Make', 'amc hornet')), (61, ('car_names.Make', 'amc hornet sportabout (sw)'))])
--------------------
Picklist: How many car makers are there in france?, countries, CountryName, [france]
Picklist: What is the number of makers of care in France?, countries, CountryName, [france]
Picklist: How many car models are produced in the usa?, countries, CountryName, [usa]
--------------------
text:  What is the count of the car models produced in the United States?
sql:  SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'
ground truth values:  [('countries.CountryName', 'usa')]
matched values OrderedDict()
--------------------
Picklist: Which countries in europe have at least 3 car manufacturers?, continents, Continent, [europe]
Picklist: What are the names of all European countries with at least 3 manufacturers?, continents, Continent, [europe]
Picklist: What is the average edispl of the cars of model volvo?, car_makers, Maker, [volvo]
Picklist: What is the average edispl of the cars of model volvo?, car_makers, FullName, [Volvo]
Picklist: What is the average edispl of the cars of model volvo?, model_list, Model, [volvo]
Picklist: What is the average edispl of the cars of model volvo?, car_names, Model, [volvo]
--------------------
text:  What is the average edispl of the cars of model volvo?
sql:  SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'
ground truth values:  [('car_names.Model', 'volvo')]
matched values OrderedDict([(27, ('car_makers.Maker', 'volvo')), (32, ('car_makers.FullName', 'Volvo')), (46, ('model_list.Model', 'volvo')), (56, ('car_names.Model', 'volvo'))])
--------------------
Picklist: What is the average edispl for all volvos?, car_makers, Maker, [volvo]
Picklist: What is the average edispl for all volvos?, model_list, Model, [volvo]
Picklist: What is the average edispl for all volvos?, car_names, Model, [volvo]
--------------------
text:  What is the average edispl for all volvos?
sql:  SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'
ground truth values:  [('car_names.Model', 'volvo')]
matched values OrderedDict([(27, ('car_makers.Maker', 'volvo')), (44, ('model_list.Model', 'volvo')), (54, ('car_names.Model', 'volvo'))])
--------------------
Picklist: How many car models were produced by the maker with full name American Motor Company?, continents, Continent, [america]
Picklist: How many car models were produced by the maker with full name American Motor Company?, car_makers, FullName, [American Motor Company]
--------------------
text:  How many car models were produced by the maker with full name American Motor Company?
sql:  SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'
ground truth values:  [('car_makers.FullName', 'American Motor Company')]
matched values OrderedDict([(10, ('continents.Continent', 'america')), (32, ('car_makers.FullName', 'American Motor Company'))])
--------------------
Picklist: What is the number of car models created by the car maker American Motor Company?, continents, Continent, [america]
Picklist: What is the number of car models created by the car maker American Motor Company?, car_makers, FullName, [American Motor Company]
--------------------
text:  What is the number of car models created by the car maker American Motor Company?
sql:  SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'
ground truth values:  [('car_makers.FullName', 'American Motor Company')]
matched values OrderedDict([(10, ('continents.Continent', 'america')), (32, ('car_makers.FullName', 'American Motor Company'))])
--------------------
Picklist: Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?, car_makers, FullName, [General Motors]
Picklist: What are the different models created by either the car maker General Motors or weighed more than 3500?, car_makers, FullName, [General Motors]
Picklist: For model volvo, how many cylinders does the car with the least accelerate have?, car_makers, Maker, [volvo]
Picklist: For model volvo, how many cylinders does the car with the least accelerate have?, car_makers, FullName, [Volvo]
Picklist: For model volvo, how many cylinders does the car with the least accelerate have?, model_list, Model, [volvo]
Picklist: For model volvo, how many cylinders does the car with the least accelerate have?, car_names, Model, [volvo]
--------------------
text:  For model volvo, how many cylinders does the car with the least accelerate have?
sql:  SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1
ground truth values:  [('car_names.Model', 'volvo')]
matched values OrderedDict([(27, ('car_makers.Maker', 'volvo')), (32, ('car_makers.FullName', 'Volvo')), (46, ('model_list.Model', 'volvo')), (56, ('car_names.Model', 'volvo'))])
--------------------
Picklist: For a volvo model, how many cylinders does the version with least accelerate have?, car_makers, Maker, [volvo]
Picklist: For a volvo model, how many cylinders does the version with least accelerate have?, car_makers, FullName, [Volvo]
Picklist: For a volvo model, how many cylinders does the version with least accelerate have?, model_list, Model, [volvo]
Picklist: For a volvo model, how many cylinders does the version with least accelerate have?, car_names, Model, [volvo]
--------------------
text:  For a volvo model, how many cylinders does the version with least accelerate have?
sql:  SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1
ground truth values:  [('car_names.Model', 'volvo')]
matched values OrderedDict([(27, ('car_makers.Maker', 'volvo')), (32, ('car_makers.FullName', 'Volvo')), (46, ('model_list.Model', 'volvo')), (56, ('car_names.Model', 'volvo'))])
--------------------
Picklist: Which models are lighter than 3500 but not built by the 'Ford Motor Company'?, car_makers, Maker, [ford]
Picklist: Which models are lighter than 3500 but not built by the 'Ford Motor Company'?, car_makers, FullName, [Ford Motor Company]
Picklist: Which models are lighter than 3500 but not built by the 'Ford Motor Company'?, model_list, Model, [ford]
Picklist: Which models are lighter than 3500 but not built by the 'Ford Motor Company'?, car_names, Model, [ford]
--------------------
text:  Which models are lighter than 3500 but not built by the 'Ford Motor Company'?
sql:  SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'
ground truth values:  [('car_makers.FullName', 'Ford Motor Company')]
matched values OrderedDict([(27, ('car_makers.Maker', 'ford')), (32, ('car_makers.FullName', 'Ford Motor Company')), (48, ('model_list.Model', 'ford')), (58, ('car_names.Model', 'ford'))])
--------------------
Picklist: What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?, car_makers, Maker, [ford]
 90%|█████████ | 8084/8943 [17:02<00:29, 28.63it/s] 90%|█████████ | 8087/8943 [17:02<00:36, 23.56it/s] 90%|█████████ | 8090/8943 [17:02<00:34, 25.06it/s] 91%|█████████ | 8095/8943 [17:02<00:28, 29.29it/s] 91%|█████████ | 8104/8943 [17:02<00:23, 36.13it/s]Picklist: What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?, car_makers, FullName, [Ford Motor Company]
Picklist: What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?, model_list, Model, [ford]
Picklist: What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?, car_names, Model, [ford]
--------------------
text:  What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?
sql:  SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'
ground truth values:  [('car_makers.FullName', 'Ford Motor Company')]
matched values OrderedDict([(27, ('car_makers.Maker', 'ford')), (32, ('car_makers.FullName', 'Ford Motor Company')), (48, ('model_list.Model', 'ford')), (58, ('car_names.Model', 'ford'))])
--------------------
Picklist: What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?, car_makers, Maker, [fiat]
Picklist: What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?, car_makers, FullName, [Fiat]
Picklist: What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?, model_list, Model, [fiat]
Picklist: What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?, car_names, Model, [fiat]
--------------------
text:  What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?
sql:  SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat'
ground truth values:  [('model_list.Model', 'fiat')]
matched values OrderedDict([(27, ('car_makers.Maker', 'fiat')), (32, ('car_makers.FullName', 'Fiat')), (46, ('model_list.Model', 'fiat')), (56, ('car_names.Model', 'fiat'))])
--------------------
Picklist: What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?, car_makers, Maker, [fiat]
Picklist: What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?, car_makers, FullName, [Fiat]
Picklist: What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?, model_list, Model, [fiat]
Picklist: What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?, car_names, Model, [fiat]
--------------------
text:  What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?
sql:  select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat'
ground truth values:  [('model_list.Model', 'fiat')]
matched values OrderedDict([(27, ('car_makers.Maker', 'fiat')), (32, ('car_makers.FullName', 'Fiat')), (46, ('model_list.Model', 'fiat')), (56, ('car_names.Model', 'fiat'))])
--------------------
Picklist: Which country does Airline "JetBlue Airways" belong to?, airlines, Airline, [JetBlue Airways]
Picklist: Which country does Airline "JetBlue Airways" belong to?, airlines, Abbreviation, [JetBlue]
--------------------
text:  Which country does Airline "JetBlue Airways" belong to?
sql:  SELECT Country FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
ground truth values:  [('airlines.Airline', 'JetBlue Airways')]
matched values OrderedDict([(10, ('airlines.Airline', 'JetBlue Airways')), (17, ('airlines.Abbreviation', 'JetBlue'))])
--------------------
Picklist: What country is Jetblue Airways affiliated with?, airlines, Airline, [JetBlue Airways]
Picklist: What country is Jetblue Airways affiliated with?, airlines, Abbreviation, [JetBlue]
--------------------
text:  What country is Jetblue Airways affiliated with?
sql:  SELECT Country FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
ground truth values:  [('airlines.Airline', 'JetBlue Airways')]
matched values OrderedDict([(10, ('airlines.Airline', 'JetBlue Airways')), (17, ('airlines.Abbreviation', 'JetBlue'))])
--------------------
Picklist: What is the abbreviation of Airline "JetBlue Airways"?, airlines, Airline, [JetBlue Airways]
Picklist: What is the abbreviation of Airline "JetBlue Airways"?, airlines, Abbreviation, [JetBlue]
--------------------
text:  What is the abbreviation of Airline "JetBlue Airways"?
sql:  SELECT Abbreviation FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
ground truth values:  [('airlines.Airline', 'JetBlue Airways')]
matched values OrderedDict([(10, ('airlines.Airline', 'JetBlue Airways')), (17, ('airlines.Abbreviation', 'JetBlue'))])
--------------------
Picklist: Which abbreviation corresponds to Jetblue Airways?, airlines, Airline, [JetBlue Airways]
Picklist: Which abbreviation corresponds to Jetblue Airways?, airlines, Abbreviation, [JetBlue]
--------------------
text:  Which abbreviation corresponds to Jetblue Airways?
sql:  SELECT Abbreviation FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
ground truth values:  [('airlines.Airline', 'JetBlue Airways')]
matched values OrderedDict([(10, ('airlines.Airline', 'JetBlue Airways')), (17, ('airlines.Abbreviation', 'JetBlue'))])
--------------------
Picklist: List all airline names and their abbreviations in "USA"., airlines, Country, [USA]
Picklist: What are the airline names and abbreviations for airlines in the USA?, airlines, Country, [USA]
Picklist: List the airport code and name in the city of Anthony., airports, City, [Anthony ]
Picklist: List the airport code and name in the city of Anthony., airports, AirportName, [Anthony ]
--------------------
text:  List the airport code and name in the city of Anthony.
sql:  SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  "Anthony"
ground truth values:  [('airports.City', 'Anthony')]
matched values OrderedDict([(18, ('airports.City', 'Anthony ')), (26, ('airports.AirportName', 'Anthony '))])
--------------------
Picklist: Give the airport code and airport name corresonding to the city Anthony., airports, City, [Anthony ]
Picklist: Give the airport code and airport name corresonding to the city Anthony., airports, AirportName, [Anthony ]
--------------------
text:  Give the airport code and airport name corresonding to the city Anthony.
sql:  SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  "Anthony"
ground truth values:  [('airports.City', 'Anthony')]
matched values OrderedDict([(18, ('airports.City', 'Anthony ')), (26, ('airports.AirportName', 'Anthony '))])
--------------------
Picklist: Which airline has abbreviation 'UAL'?, airlines, Abbreviation, [UAL]
Picklist: Give the airline with abbreviation 'UAL'., airlines, Abbreviation, [UAL]
Picklist: How many airlines are from USA?, airlines, Country, [USA]
Picklist: Return the number of airlines in the USA., airlines, Country, [USA]
Picklist: Which city and country is the Alton airport at?, airports, City, [Alton ]
Picklist: Which city and country is the Alton airport at?, airports, AirportName, [Alton ]
--------------------
text:  Which city and country is the Alton airport at?
sql:  SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"
ground truth values:  [('airports.AirportName', 'Alton')]
matched values OrderedDict([(18, ('airports.City', 'Alton ')), (26, ('airports.AirportName', 'Alton '))])
--------------------
Picklist: Give the city and country for the Alton airport., airports, City, [Alton ]
 91%|█████████ | 8110/8943 [17:02<00:20, 40.37it/s] 91%|█████████ | 8117/8943 [17:02<00:18, 44.55it/s]Picklist: Give the city and country for the Alton airport., airports, AirportName, [Alton ]
--------------------
text:  Give the city and country for the Alton airport.
sql:  SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"
ground truth values:  [('airports.AirportName', 'Alton')]
matched values OrderedDict([(18, ('airports.City', 'Alton ')), (26, ('airports.AirportName', 'Alton '))])
--------------------
Picklist: What is the airport name for airport 'AKO'?, airports, AirportCode, [AKO]
Picklist: What is the airport name for airport 'AKO'?, flights, SourceAirport, [ AKO]
Picklist: What is the airport name for airport 'AKO'?, flights, DestAirport, [ AKO]
--------------------
text:  What is the airport name for airport 'AKO'?
sql:  SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  "AKO"
ground truth values:  [('airports.AirportCode', 'AKO')]
matched values OrderedDict([(21, ('airports.AirportCode', 'AKO')), (44, ('flights.SourceAirport', ' AKO')), (50, ('flights.DestAirport', ' AKO'))])
--------------------
Picklist: Return the name of the airport with code 'AKO'., airports, AirportCode, [AKO]
Picklist: Return the name of the airport with code 'AKO'., flights, SourceAirport, [ AKO]
Picklist: Return the name of the airport with code 'AKO'., flights, DestAirport, [ AKO]
--------------------
text:  Return the name of the airport with code 'AKO'.
sql:  SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  "AKO"
ground truth values:  [('airports.AirportCode', 'AKO')]
matched values OrderedDict([(21, ('airports.AirportCode', 'AKO')), (44, ('flights.SourceAirport', ' AKO')), (50, ('flights.DestAirport', ' AKO'))])
--------------------
Picklist: What are airport names at City 'Aberdeen'?, airports, City, [Aberdeen ]
--------------------
text:  What are airport names at City 'Aberdeen'?
sql:  SELECT AirportName FROM AIRPORTS WHERE City = "Aberdeen"
ground truth values:  [('airports.City', 'Aberdeen')]
matched values OrderedDict([(18, ('airports.City', 'Aberdeen '))])
--------------------
Picklist: What are the names of airports in Aberdeen?, airports, City, [Aberdeen ]
--------------------
text:  What are the names of airports in Aberdeen?
sql:  SELECT AirportName FROM AIRPORTS WHERE City = "Aberdeen"
ground truth values:  [('airports.City', 'Aberdeen')]
matched values OrderedDict([(18, ('airports.City', 'Aberdeen '))])
--------------------
Picklist: How many flights depart from 'APG'?, airports, AirportCode, [APG]
Picklist: How many flights depart from 'APG'?, flights, SourceAirport, [ APG]
Picklist: How many flights depart from 'APG'?, flights, DestAirport, [ APG]
--------------------
text:  How many flights depart from 'APG'?
sql:  SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  "APG"
ground truth values:  [('flights.SourceAirport', 'APG')]
matched values OrderedDict([(21, ('airports.AirportCode', 'APG')), (44, ('flights.SourceAirport', ' APG')), (50, ('flights.DestAirport', ' APG'))])
--------------------
Picklist: Count the number of flights departing from 'APG'., airports, AirportCode, [APG]
Picklist: Count the number of flights departing from 'APG'., flights, SourceAirport, [ APG]
Picklist: Count the number of flights departing from 'APG'., flights, DestAirport, [ APG]
--------------------
text:  Count the number of flights departing from 'APG'.
sql:  SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  "APG"
ground truth values:  [('flights.SourceAirport', 'APG')]
matched values OrderedDict([(21, ('airports.AirportCode', 'APG')), (44, ('flights.SourceAirport', ' APG')), (50, ('flights.DestAirport', ' APG'))])
--------------------
Picklist: How many flights have destination ATO?, airports, AirportCode, [ATO]
--------------------
text:  How many flights have destination ATO?
sql:  SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"
ground truth values:  [('flights.DestAirport', 'ATO')]
matched values OrderedDict([(21, ('airports.AirportCode', 'ATO'))])
--------------------
Picklist: Count the number of flights into ATO., airports, AirportCode, [ATO]
--------------------
text:  Count the number of flights into ATO.
sql:  SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"
ground truth values:  [('flights.DestAirport', 'ATO')]
matched values OrderedDict([(21, ('airports.AirportCode', 'ATO'))])
--------------------
Picklist: How many flights depart from City Aberdeen?, airports, City, [Aberdeen ]
--------------------
text:  How many flights depart from City Aberdeen?
sql:  SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
ground truth values:  [('airports.City', 'Aberdeen')]
matched values OrderedDict([(18, ('airports.City', 'Aberdeen '))])
--------------------
Picklist: Return the number of flights departing from Aberdeen., airports, City, [Aberdeen ]
--------------------
text:  Return the number of flights departing from Aberdeen.
sql:  SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
ground truth values:  [('airports.City', 'Aberdeen')]
matched values OrderedDict([(18, ('airports.City', 'Aberdeen '))])
--------------------
Picklist: How many flights arriving in Aberdeen city?, airports, City, [Aberdeen ]
--------------------
text:  How many flights arriving in Aberdeen city?
sql:  SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
ground truth values:  [('airports.City', 'Aberdeen')]
matched values OrderedDict([(18, ('airports.City', 'Aberdeen '))])
--------------------
Picklist: Return the number of flights arriving in Aberdeen., airports, City, [Aberdeen ]
--------------------
text:  Return the number of flights arriving in Aberdeen.
sql:  SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
ground truth values:  [('airports.City', 'Aberdeen')]
matched values OrderedDict([(18, ('airports.City', 'Aberdeen '))])
--------------------
Picklist: How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?, airports, City, [Aberdeen ]
Picklist: How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?, airports, City, [Ashley ]
Picklist: How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?, airports, AirportName, [Ashley ]
--------------------
text:  How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?
sql:  SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"
ground truth values:  [('airports.City', 'Ashley'), ('airports.City', 'Aberdeen')]
matched values OrderedDict([(18, ('airports.City', 'Aberdeen ')), (20, ('airports.City', 'Ashley ')), (28, ('airports.AirportName', 'Ashley '))])
--------------------
Picklist: How many flights fly from Aberdeen to Ashley?, airports, City, [Aberdeen ]
Picklist: How many flights fly from Aberdeen to Ashley?, airports, City, [Ashley ]
Picklist: How many flights fly from Aberdeen to Ashley?, airports, AirportName, [Ashley ]
--------------------
text:  How many flights fly from Aberdeen to Ashley?
sql:  SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"
ground truth values:  [('airports.City', 'Ashley'), ('airports.City', 'Aberdeen')]
matched values OrderedDict([(18, ('airports.City', 'Aberdeen ')), (20, ('airports.City', 'Ashley ')), (28, ('airports.AirportName', 'Ashley '))])
--------------------
Picklist: How many flights does airline 'JetBlue Airways' have?, airlines, Airline, [JetBlue Airways]
Picklist: How many flights does airline 'JetBlue Airways' have?, airlines, Abbreviation, [JetBlue]
--------------------
text:  How many flights does airline 'JetBlue Airways' have?
sql:  SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways" 91%|█████████ | 8123/8943 [17:03<00:19, 42.41it/s] 91%|█████████ | 8128/8943 [17:03<00:20, 40.52it/s] 91%|█████████ | 8133/8943 [17:03<00:20, 39.23it/s] 91%|█████████ | 8138/8943 [17:03<00:20, 38.69it/s] 91%|█████████ | 8143/8943 [17:03<00:20, 38.72it/s]
ground truth values:  [('airlines.Airline', 'JetBlue Airways')]
matched values OrderedDict([(10, ('airlines.Airline', 'JetBlue Airways')), (17, ('airlines.Abbreviation', 'JetBlue'))])
--------------------
Picklist: Give the number of Jetblue Airways flights., airlines, Airline, [JetBlue Airways]
Picklist: Give the number of Jetblue Airways flights., airlines, Abbreviation, [JetBlue]
--------------------
text:  Give the number of Jetblue Airways flights.
sql:  SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"
ground truth values:  [('airlines.Airline', 'JetBlue Airways')]
matched values OrderedDict([(10, ('airlines.Airline', 'JetBlue Airways')), (17, ('airlines.Abbreviation', 'JetBlue'))])
--------------------
Picklist: How many 'United Airlines' flights go to Airport 'ASY'?, airlines, Airline, [United Airlines]
Picklist: How many 'United Airlines' flights go to Airport 'ASY'?, airports, AirportCode, [ASY]
--------------------
text:  How many 'United Airlines' flights go to Airport 'ASY'?
sql:  SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"
ground truth values:  [('airlines.Airline', 'United Airlines'), ('flights.DestAirport', 'ASY')]
matched values OrderedDict([(10, ('airlines.Airline', 'United Airlines')), (24, ('airports.AirportCode', 'ASY'))])
--------------------
Picklist: Count the number of United Airlines flights arriving in ASY Airport., airlines, Airline, [United Airlines]
Picklist: Count the number of United Airlines flights arriving in ASY Airport., airports, AirportCode, [ASY]
--------------------
text:  Count the number of United Airlines flights arriving in ASY Airport.
sql:  SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"
ground truth values:  [('airlines.Airline', 'United Airlines'), ('flights.DestAirport', 'ASY')]
matched values OrderedDict([(10, ('airlines.Airline', 'United Airlines')), (24, ('airports.AirportCode', 'ASY'))])
--------------------
Picklist: How many 'United Airlines' flights depart from Airport 'AHD'?, airlines, Airline, [United Airlines]
Picklist: How many 'United Airlines' flights depart from Airport 'AHD'?, airports, AirportCode, [AHD]
Picklist: How many 'United Airlines' flights depart from Airport 'AHD'?, flights, SourceAirport, [ AHD]
Picklist: How many 'United Airlines' flights depart from Airport 'AHD'?, flights, DestAirport, [ AHD]
--------------------
text:  How many 'United Airlines' flights depart from Airport 'AHD'?
sql:  SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"
ground truth values:  [('airlines.Airline', 'United Airlines'), ('flights.SourceAirport', 'AHD')]
matched values OrderedDict([(10, ('airlines.Airline', 'United Airlines')), (24, ('airports.AirportCode', 'AHD')), (47, ('flights.SourceAirport', ' AHD')), (53, ('flights.DestAirport', ' AHD'))])
--------------------
Picklist: Return the number of United Airlines flights leaving from AHD Airport., airlines, Airline, [United Airlines]
Picklist: Return the number of United Airlines flights leaving from AHD Airport., airports, AirportCode, [AHD]
Picklist: Return the number of United Airlines flights leaving from AHD Airport., flights, SourceAirport, [ AHD]
Picklist: Return the number of United Airlines flights leaving from AHD Airport., flights, DestAirport, [ AHD]
--------------------
text:  Return the number of United Airlines flights leaving from AHD Airport.
sql:  SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"
ground truth values:  [('airlines.Airline', 'United Airlines'), ('flights.SourceAirport', 'AHD')]
matched values OrderedDict([(10, ('airlines.Airline', 'United Airlines')), (24, ('airports.AirportCode', 'AHD')), (47, ('flights.SourceAirport', ' AHD')), (53, ('flights.DestAirport', ' AHD'))])
--------------------
Picklist: How many United Airlines flights go to City 'Aberdeen'?, airlines, Airline, [United Airlines]
Picklist: How many United Airlines flights go to City 'Aberdeen'?, airports, City, [Aberdeen ]
--------------------
text:  How many United Airlines flights go to City 'Aberdeen'?
sql:  SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"
ground truth values:  [('airports.City', 'Aberdeen'), ('airlines.Airline', 'United Airlines')]
matched values OrderedDict([(10, ('airlines.Airline', 'United Airlines')), (21, ('airports.City', 'Aberdeen '))])
--------------------
Picklist: Count the number of United Airlines flights that arrive in Aberdeen., airlines, Airline, [United Airlines]
Picklist: Count the number of United Airlines flights that arrive in Aberdeen., airports, City, [Aberdeen ]
--------------------
text:  Count the number of United Airlines flights that arrive in Aberdeen.
sql:  SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"
ground truth values:  [('airports.City', 'Aberdeen'), ('airlines.Airline', 'United Airlines')]
matched values OrderedDict([(10, ('airlines.Airline', 'United Airlines')), (21, ('airports.City', 'Aberdeen '))])
--------------------
Picklist: What are airlines that have some flight departing from airport 'AHD'?, airports, AirportCode, [AHD]
Picklist: What are airlines that have some flight departing from airport 'AHD'?, flights, SourceAirport, [ AHD]
Picklist: What are airlines that have some flight departing from airport 'AHD'?, flights, DestAirport, [ AHD]
--------------------
text:  What are airlines that have some flight departing from airport 'AHD'?
sql:  SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"
ground truth values:  [('flights.SourceAirport', 'AHD')]
matched values OrderedDict([(21, ('airports.AirportCode', 'AHD')), (44, ('flights.SourceAirport', ' AHD')), (50, ('flights.DestAirport', ' AHD'))])
--------------------
Picklist: Which airlines have a flight with source airport AHD?, airports, AirportCode, [AHD]
Picklist: Which airlines have a flight with source airport AHD?, flights, SourceAirport, [ AHD]
Picklist: Which airlines have a flight with source airport AHD?, flights, DestAirport, [ AHD]
--------------------
text:  Which airlines have a flight with source airport AHD?
sql:  SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"
ground truth values:  [('flights.SourceAirport', 'AHD')]
matched values OrderedDict([(21, ('airports.AirportCode', 'AHD')), (44, ('flights.SourceAirport', ' AHD')), (50, ('flights.DestAirport', ' AHD'))])
--------------------
Picklist: What are airlines that have flights arriving at airport 'AHD'?, airports, AirportCode, [AHD]
Picklist: What are airlines that have flights arriving at airport 'AHD'?, flights, SourceAirport, [ AHD]
Picklist: What are airlines that have flights arriving at airport 'AHD'?, flights, DestAirport, [ AHD]
--------------------
text:  What are airlines that have flights arriving at airport 'AHD'?
sql:  SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"
ground truth values:  [('flights.DestAirport', 'AHD')]
matched values OrderedDict([(21, ('airports.AirportCode', 'AHD')), (44, ('flights.SourceAirport', ' AHD')), (50, ('flights.DestAirport', ' AHD'))])
--------------------
Picklist: Which airlines have a flight with destination airport AHD?, airports, AirportCode, [AHD]
Picklist: Which airlines have a flight with destination airport AHD?, flights, SourceAirport, [ AHD]
Picklist: Which airlines have a flight with destination airport AHD?, flights, DestAirport, [ AHD]
 91%|█████████ | 8148/8943 [17:03<00:21, 36.37it/s] 91%|█████████ | 8152/8943 [17:03<00:22, 34.68it/s] 91%|█████████ | 8157/8943 [17:03<00:21, 36.92it/s]--------------------
text:  Which airlines have a flight with destination airport AHD?
sql:  SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"
ground truth values:  [('flights.DestAirport', 'AHD')]
matched values OrderedDict([(21, ('airports.AirportCode', 'AHD')), (44, ('flights.SourceAirport', ' AHD')), (50, ('flights.DestAirport', ' AHD'))])
--------------------
Picklist: Find all airlines that have flights from both airports 'APG' and 'CVO'., airports, AirportCode, [CVO]
Picklist: Find all airlines that have flights from both airports 'APG' and 'CVO'., airports, AirportCode, [APG]
Picklist: Find all airlines that have flights from both airports 'APG' and 'CVO'., flights, SourceAirport, [ CVO]
Picklist: Find all airlines that have flights from both airports 'APG' and 'CVO'., flights, SourceAirport, [ APG]
Picklist: Find all airlines that have flights from both airports 'APG' and 'CVO'., flights, DestAirport, [ CVO]
Picklist: Find all airlines that have flights from both airports 'APG' and 'CVO'., flights, DestAirport, [ APG]
--------------------
text:  Find all airlines that have flights from both airports 'APG' and 'CVO'.
sql:  SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
ground truth values:  [('flights.SourceAirport', 'APG'), ('flights.SourceAirport', 'CVO')]
matched values OrderedDict([(21, ('airports.AirportCode', 'CVO')), (24, ('airports.AirportCode', 'APG')), (47, ('flights.SourceAirport', ' CVO')), (50, ('flights.SourceAirport', ' APG')), (56, ('flights.DestAirport', ' CVO')), (59, ('flights.DestAirport', ' APG'))])
--------------------
Picklist: Which airlines have departing flights from both APG and CVO airports?, airports, AirportCode, [CVO]
Picklist: Which airlines have departing flights from both APG and CVO airports?, airports, AirportCode, [APG]
Picklist: Which airlines have departing flights from both APG and CVO airports?, flights, SourceAirport, [ CVO]
Picklist: Which airlines have departing flights from both APG and CVO airports?, flights, SourceAirport, [ APG]
Picklist: Which airlines have departing flights from both APG and CVO airports?, flights, DestAirport, [ CVO]
Picklist: Which airlines have departing flights from both APG and CVO airports?, flights, DestAirport, [ APG]
--------------------
text:  Which airlines have departing flights from both APG and CVO airports?
sql:  SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
ground truth values:  [('flights.SourceAirport', 'APG'), ('flights.SourceAirport', 'CVO')]
matched values OrderedDict([(21, ('airports.AirportCode', 'CVO')), (24, ('airports.AirportCode', 'APG')), (47, ('flights.SourceAirport', ' CVO')), (50, ('flights.SourceAirport', ' APG')), (56, ('flights.DestAirport', ' CVO')), (59, ('flights.DestAirport', ' APG'))])
--------------------
Picklist: Find all airlines that have flights from airport 'CVO' but not from 'APG'., airports, AirportCode, [CVO]
Picklist: Find all airlines that have flights from airport 'CVO' but not from 'APG'., airports, AirportCode, [APG]
Picklist: Find all airlines that have flights from airport 'CVO' but not from 'APG'., flights, SourceAirport, [ CVO]
Picklist: Find all airlines that have flights from airport 'CVO' but not from 'APG'., flights, SourceAirport, [ APG]
Picklist: Find all airlines that have flights from airport 'CVO' but not from 'APG'., flights, DestAirport, [ CVO]
Picklist: Find all airlines that have flights from airport 'CVO' but not from 'APG'., flights, DestAirport, [ APG]
--------------------
text:  Find all airlines that have flights from airport 'CVO' but not from 'APG'.
sql:  SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"
ground truth values:  [('flights.SourceAirport', 'CVO'), ('flights.SourceAirport', 'APG')]
matched values OrderedDict([(21, ('airports.AirportCode', 'CVO')), (24, ('airports.AirportCode', 'APG')), (47, ('flights.SourceAirport', ' CVO')), (50, ('flights.SourceAirport', ' APG')), (56, ('flights.DestAirport', ' CVO')), (59, ('flights.DestAirport', ' APG'))])
--------------------
Picklist: Which airlines have departures from CVO but not from APG airports?, airports, AirportCode, [CVO]
Picklist: Which airlines have departures from CVO but not from APG airports?, airports, AirportCode, [APG]
Picklist: Which airlines have departures from CVO but not from APG airports?, flights, SourceAirport, [ CVO]
Picklist: Which airlines have departures from CVO but not from APG airports?, flights, SourceAirport, [ APG]
Picklist: Which airlines have departures from CVO but not from APG airports?, flights, DestAirport, [ CVO]
Picklist: Which airlines have departures from CVO but not from APG airports?, flights, DestAirport, [ APG]
--------------------
text:  Which airlines have departures from CVO but not from APG airports?
sql:  SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"
ground truth values:  [('flights.SourceAirport', 'CVO'), ('flights.SourceAirport', 'APG')]
matched values OrderedDict([(21, ('airports.AirportCode', 'CVO')), (24, ('airports.AirportCode', 'APG')), (47, ('flights.SourceAirport', ' CVO')), (50, ('flights.SourceAirport', ' APG')), (56, ('flights.DestAirport', ' CVO')), (59, ('flights.DestAirport', ' APG'))])
--------------------
Picklist: What are flight numbers of Airline "United Airlines"?, airlines, Airline, [United Airlines]
Picklist: Which flight numbers correspond to United Airlines flights?, airlines, Airline, [United Airlines]
Picklist: What are flight numbers of flights departing from Airport "APG"?, airports, AirportCode, [APG]
Picklist: What are flight numbers of flights departing from Airport "APG"?, flights, SourceAirport, [ APG]
Picklist: What are flight numbers of flights departing from Airport "APG"?, flights, DestAirport, [ APG]
--------------------
text:  What are flight numbers of flights departing from Airport "APG"?
sql:  SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"
ground truth values:  [('flights.SourceAirport', 'APG')]
matched values OrderedDict([(21, ('airports.AirportCode', 'APG')), (44, ('flights.SourceAirport', ' APG')), (50, ('flights.DestAirport', ' APG'))])
--------------------
Picklist: Give the flight numbers of flights leaving from APG., airports, AirportCode, [APG]
Picklist: Give the flight numbers of flights leaving from APG., flights, SourceAirport, [ APG]
Picklist: Give the flight numbers of flights leaving from APG., flights, DestAirport, [ APG]
--------------------
text:  Give the flight numbers of flights leaving from APG.
sql:  SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"
ground truth values:  [('flights.SourceAirport', 'APG')]
matched values OrderedDict([(21, ('airports.AirportCode', 'APG')), (44, ('flights.SourceAirport', ' APG')), (50, ('flights.DestAirport', ' APG'))])
--------------------
Picklist: What are flight numbers of flights arriving at Airport "APG"?, airports, AirportCode, [APG]
Picklist: What are flight numbers of flights arriving at Airport "APG"?, flights, SourceAirport, [ APG]
Picklist: What are flight numbers of flights arriving at Airport "APG"?, flights, DestAirport, [ APG]
--------------------
text:  What are flight numbers of flights arriving at Airport "APG"?
sql:  SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"
ground truth values:  [('flights.DestAirport', 'APG')]
matched values  91%|█████████▏| 8162/8943 [17:04<00:19, 39.44it/s] 91%|█████████▏| 8167/8943 [17:04<00:19, 39.20it/s] 91%|█████████▏| 8177/8943 [17:04<00:16, 47.60it/s] 92%|█████████▏| 8187/8943 [17:04<00:13, 54.99it/s] 92%|█████████▏| 8194/8943 [17:04<00:13, 57.45it/s] 92%|█████████▏| 8204/8943 [17:04<00:11, 64.36it/s] 92%|█████████▏| 8214/8943 [17:04<00:10, 71.20it/s] 92%|█████████▏| 8223/8943 [17:04<00:09, 74.48it/s]OrderedDict([(21, ('airports.AirportCode', 'APG')), (44, ('flights.SourceAirport', ' APG')), (50, ('flights.DestAirport', ' APG'))])
--------------------
Picklist: Give the flight numbers of flights landing at APG., airports, AirportCode, [APG]
Picklist: Give the flight numbers of flights landing at APG., flights, SourceAirport, [ APG]
Picklist: Give the flight numbers of flights landing at APG., flights, DestAirport, [ APG]
--------------------
text:  Give the flight numbers of flights landing at APG.
sql:  SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"
ground truth values:  [('flights.DestAirport', 'APG')]
matched values OrderedDict([(21, ('airports.AirportCode', 'APG')), (44, ('flights.SourceAirport', ' APG')), (50, ('flights.DestAirport', ' APG'))])
--------------------
Picklist: What are flight numbers of flights departing from City "Aberdeen "?, airports, City, [Aberdeen ]
--------------------
text:  What are flight numbers of flights departing from City "Aberdeen "?
sql:  SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
ground truth values:  [('airports.City', 'Aberdeen')]
matched values OrderedDict([(18, ('airports.City', 'Aberdeen '))])
--------------------
Picklist: Give the flight numbers of flights leaving from Aberdeen., airports, City, [Aberdeen ]
--------------------
text:  Give the flight numbers of flights leaving from Aberdeen.
sql:  SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
ground truth values:  [('airports.City', 'Aberdeen')]
matched values OrderedDict([(18, ('airports.City', 'Aberdeen '))])
--------------------
Picklist: What are flight numbers of flights arriving at City "Aberdeen"?, airports, City, [Aberdeen ]
--------------------
text:  What are flight numbers of flights arriving at City "Aberdeen"?
sql:  SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
ground truth values:  [('airports.City', 'Aberdeen')]
matched values OrderedDict([(18, ('airports.City', 'Aberdeen '))])
--------------------
Picklist: Give the flight numbers of flights arriving in Aberdeen., airports, City, [Aberdeen ]
--------------------
text:  Give the flight numbers of flights arriving in Aberdeen.
sql:  SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
ground truth values:  [('airports.City', 'Aberdeen')]
matched values OrderedDict([(18, ('airports.City', 'Aberdeen '))])
--------------------
Picklist: Find the number of flights landing in the city of Aberdeen or Abilene., airports, City, [Aberdeen ]
Picklist: Find the number of flights landing in the city of Aberdeen or Abilene., airports, City, [Abilene ]
--------------------
text:  Find the number of flights landing in the city of Aberdeen or Abilene.
sql:  SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"
ground truth values:  [('airports.City', 'Aberdeen'), ('airports.City', 'Abilene')]
matched values OrderedDict([(18, ('airports.City', 'Aberdeen ')), (20, ('airports.City', 'Abilene '))])
--------------------
Picklist: How many flights land in Aberdeen or Abilene?, airports, City, [Aberdeen ]
Picklist: How many flights land in Aberdeen or Abilene?, airports, City, [Abilene ]
--------------------
text:  How many flights land in Aberdeen or Abilene?
sql:  SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"
ground truth values:  [('airports.City', 'Aberdeen'), ('airports.City', 'Abilene')]
matched values OrderedDict([(18, ('airports.City', 'Aberdeen ')), (20, ('airports.City', 'Abilene '))])
--------------------
Picklist: What is the document id, template id and description for document named "Robbin CV"?, Ref_Template_Types, Template_Type_Code, [CV]
Picklist: What is the document id, template id and description for document named "Robbin CV"?, Ref_Template_Types, Template_Type_Description, [CV]
Picklist: What is the document id, template id and description for document named "Robbin CV"?, Templates, Template_Type_Code, [CV]
Picklist: What is the document id, template id and description for document named "Robbin CV"?, Documents, Document_Name, [Robbin CV]
--------------------
text:  What is the document id, template id and description for document named "Robbin CV"?
sql:  SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  "Robbin CV"
ground truth values:  [('Documents.Document_Name', 'Robbin CV')]
matched values OrderedDict([(10, ('Ref_Template_Types.Template_Type_Code', 'CV')), (16, ('Ref_Template_Types.Template_Type_Description', 'CV')), (31, ('Templates.Template_Type_Code', 'CV')), (55, ('Documents.Document_Name', 'Robbin CV'))])
--------------------
Picklist: Return the document id, template id, and description for the document with the name Robbin CV., Ref_Template_Types, Template_Type_Code, [CV]
Picklist: Return the document id, template id, and description for the document with the name Robbin CV., Ref_Template_Types, Template_Type_Description, [CV]
Picklist: Return the document id, template id, and description for the document with the name Robbin CV., Templates, Template_Type_Code, [CV]
Picklist: Return the document id, template id, and description for the document with the name Robbin CV., Documents, Document_Name, [Robbin CV]
--------------------
text:  Return the document id, template id, and description for the document with the name Robbin CV.
sql:  SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  "Robbin CV"
ground truth values:  [('Documents.Document_Name', 'Robbin CV')]
matched values OrderedDict([(10, ('Ref_Template_Types.Template_Type_Code', 'CV')), (16, ('Ref_Template_Types.Template_Type_Description', 'CV')), (31, ('Templates.Template_Type_Code', 'CV')), (55, ('Documents.Document_Name', 'Robbin CV'))])
--------------------
Picklist: How many documents are using the template with type code 'PPT'?, Ref_Template_Types, Template_Type_Code, [PPT]
Picklist: How many documents are using the template with type code 'PPT'?, Templates, Template_Type_Code, [PPT]
--------------------
text:  How many documents are using the template with type code 'PPT'?
sql:  SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'
ground truth values:  [('Templates.Template_Type_Code', 'PPT')]
matched values OrderedDict([(10, ('Ref_Template_Types.Template_Type_Code', 'PPT')), (30, ('Templates.Template_Type_Code', 'PPT'))])
--------------------
Picklist: Count the number of documents that use the PPT template type., Ref_Template_Types, Template_Type_Code, [PPT]
Picklist: Count the number of documents that use the PPT template type., Templates, Template_Type_Code, [PPT]
--------------------
text:  Count the number of documents that use the PPT template type.
sql:  SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'
ground truth values:  [('Templates.Template_Type_Code', 'PPT')]
matched values OrderedDict([(10, ('Ref_Template_Types.Template_Type_Code', 'PPT')), (30, ('Templates.Template_Type_Code', 'PPT'))])
--------------------
Picklist: What are the ids of templates with template type code PP or PPT?, Ref_Template_Types, Template_Type_Code, [PPT]
Picklist: What are the ids of templates with template type code PP or PPT?, Ref_Template_Types, Template_Type_Code, [PP]
Picklist: What are the ids of templates with template type code PP or PPT?, Templates, Template_Type_Code, [PPT]
Picklist: What are the ids of templates with template type code PP or PPT?, Templates, Template_Type_Code, [PP]
--------------------
text:  What are the ids of templates with template type code PP or PPT?
sql:   92%|█████████▏| 8234/8943 [17:04<00:08, 80.61it/s] 92%|█████████▏| 8243/8943 [17:05<00:08, 82.36it/s] 92%|█████████▏| 8252/8943 [17:05<00:08, 77.26it/s] 92%|█████████▏| 8261/8943 [17:05<00:08, 76.57it/s] 92%|█████████▏| 8269/8943 [17:05<00:08, 76.20it/s] 93%|█████████▎| 8277/8943 [17:05<00:08, 75.31it/s] 93%|█████████▎| 8285/8943 [17:05<00:09, 73.09it/s]SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
ground truth values:  [('Templates.Template_Type_Code', 'PP'), ('Templates.Template_Type_Code', 'PPT')]
matched values OrderedDict([(10, ('Ref_Template_Types.Template_Type_Code', 'PPT')), (13, ('Ref_Template_Types.Template_Type_Code', 'PP')), (32, ('Templates.Template_Type_Code', 'PPT')), (35, ('Templates.Template_Type_Code', 'PP'))])
--------------------
Picklist: Return the ids of templates that have the code PP or PPT., Ref_Template_Types, Template_Type_Code, [PPT]
Picklist: Return the ids of templates that have the code PP or PPT., Ref_Template_Types, Template_Type_Code, [PP]
Picklist: Return the ids of templates that have the code PP or PPT., Templates, Template_Type_Code, [PPT]
Picklist: Return the ids of templates that have the code PP or PPT., Templates, Template_Type_Code, [PP]
--------------------
text:  Return the ids of templates that have the code PP or PPT.
sql:  SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
ground truth values:  [('Templates.Template_Type_Code', 'PP'), ('Templates.Template_Type_Code', 'PPT')]
matched values OrderedDict([(10, ('Ref_Template_Types.Template_Type_Code', 'PPT')), (13, ('Ref_Template_Types.Template_Type_Code', 'PP')), (32, ('Templates.Template_Type_Code', 'PPT')), (35, ('Templates.Template_Type_Code', 'PP'))])
--------------------
Picklist: How many templates have template type code CV?, Ref_Template_Types, Template_Type_Code, [CV]
Picklist: How many templates have template type code CV?, Ref_Template_Types, Template_Type_Description, [CV]
Picklist: How many templates have template type code CV?, Templates, Template_Type_Code, [CV]
--------------------
text:  How many templates have template type code CV?
sql:  SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"
ground truth values:  [('Templates.Template_Type_Code', 'CV')]
matched values OrderedDict([(10, ('Ref_Template_Types.Template_Type_Code', 'CV')), (16, ('Ref_Template_Types.Template_Type_Description', 'CV')), (31, ('Templates.Template_Type_Code', 'CV'))])
--------------------
Picklist: Count the number of templates of the type CV., Ref_Template_Types, Template_Type_Code, [CV]
Picklist: Count the number of templates of the type CV., Ref_Template_Types, Template_Type_Description, [CV]
Picklist: Count the number of templates of the type CV., Templates, Template_Type_Code, [CV]
--------------------
text:  Count the number of templates of the type CV.
sql:  SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"
ground truth values:  [('Templates.Template_Type_Code', 'CV')]
matched values OrderedDict([(10, ('Ref_Template_Types.Template_Type_Code', 'CV')), (16, ('Ref_Template_Types.Template_Type_Description', 'CV')), (31, ('Templates.Template_Type_Code', 'CV'))])
--------------------
Picklist: What is the template type code of the template used by document with the name "Data base"?, Documents, Document_Name, [Data base]
Picklist: Return the template type code of the template that is used by a document named Data base., Documents, Document_Name, [Data base]
Picklist: Show all document names using templates with template type code BK., Ref_Template_Types, Template_Type_Code, [BK]
Picklist: Show all document names using templates with template type code BK., Templates, Template_Type_Code, [BK]
--------------------
text:  Show all document names using templates with template type code BK.
sql:  SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"
ground truth values:  [('Templates.Template_Type_Code', 'BK')]
matched values OrderedDict([(10, ('Ref_Template_Types.Template_Type_Code', 'BK')), (29, ('Templates.Template_Type_Code', 'BK'))])
--------------------
Picklist: What are the names of documents that use templates with the code BK?, Ref_Template_Types, Template_Type_Code, [BK]
Picklist: What are the names of documents that use templates with the code BK?, Templates, Template_Type_Code, [BK]
--------------------
text:  What are the names of documents that use templates with the code BK?
sql:  SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"
ground truth values:  [('Templates.Template_Type_Code', 'BK')]
matched values OrderedDict([(10, ('Ref_Template_Types.Template_Type_Code', 'BK')), (29, ('Templates.Template_Type_Code', 'BK'))])
--------------------
Picklist: What is the template type descriptions for template type code "AD"., Ref_Template_Types, Template_Type_Code, [AD]
Picklist: What is the template type descriptions for template type code "AD"., Templates, Template_Type_Code, [AD]
--------------------
text:  What is the template type descriptions for template type code "AD".
sql:  SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"
ground truth values:  [('Ref_Template_Types.Template_Type_Code', 'AD')]
matched values OrderedDict([(10, ('Ref_Template_Types.Template_Type_Code', 'AD')), (29, ('Templates.Template_Type_Code', 'AD'))])
--------------------
Picklist: Return the template type description of the template type with the code AD., Ref_Template_Types, Template_Type_Code, [AD]
Picklist: Return the template type description of the template type with the code AD., Templates, Template_Type_Code, [AD]
--------------------
text:  Return the template type description of the template type with the code AD.
sql:  SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"
ground truth values:  [('Ref_Template_Types.Template_Type_Code', 'AD')]
matched values OrderedDict([(10, ('Ref_Template_Types.Template_Type_Code', 'AD')), (29, ('Templates.Template_Type_Code', 'AD'))])
--------------------
Picklist: What is the template type code for template type description "Book"., Ref_Template_Types, Template_Type_Description, [Book]
Picklist: Return the type code of the template type with the description "Book"., Ref_Template_Types, Template_Type_Description, [Book]
Picklist: What are the template ids with template type description "Presentation"., Ref_Template_Types, Template_Type_Description, [Presentation]
Picklist: Return the ids corresponding to templates with the description 'Presentation'., Ref_Template_Types, Template_Type_Description, [Presentation]
Picklist: How many paragraphs for the document with name 'Summer Show'?, Documents, Document_Name, [Summer Show]
Picklist: Count the number of paragraphs in the document named 'Summer Show'., Documents, Document_Name, [Summer Show]
Picklist: Show paragraph details for paragraph with text 'Korea ' ., Paragraphs, Paragraph_Text, [Korea]
--------------------
text:  Show paragraph details for paragraph with text 'Korea ' .
sql:  select other_details from paragraphs where paragraph_text like 'korea'
ground truth values:  []
matched values OrderedDict([(67, ('Paragraphs.Paragraph_Text', 'Korea'))])
--------------------
Picklist: What are the details for the paragraph that includes the text 'Korea ' ?, Paragraphs, Paragraph_Text, [Korea]
--------------------
text:  What are the details for the paragraph that includes the text 'Korea ' ?
sql:  select other_details from paragraphs where paragraph_text like 'korea'
ground truth values:  []
matched values OrderedDict([(67, ('Paragraphs.Paragraph_Text', 'Korea'))])
--------------------
Picklist: Show all paragraph ids and texts for the document with name 'Welcome to NY'., Documents, Document_Name, [Welcome to NY]
Picklist: What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?, Documents, Document_Name, [Welcome to NY]
Picklist: Show all paragraph texts for the document "Customer reviews"., Documents, Document_Name, [Customer reviews]
Picklist: What are the paragraph texts for the document with the name 'Customer reviews'?, Documents, Document_Name, [Customer reviews]
Picklist: Show the document id with paragraph text 'Brazil' and 'Ireland'., Paragraphs, Paragraph_Text, [Ireland]
 93%|█████████▎| 8295/8943 [17:05<00:08, 79.08it/s] 93%|█████████▎| 8305/8943 [17:05<00:07, 82.97it/s] 93%|█████████▎| 8314/8943 [17:05<00:08, 74.07it/s] 93%|█████████▎| 8322/8943 [17:06<00:08, 75.03it/s] 93%|█████████▎| 8330/8943 [17:06<00:08, 73.31it/s] 93%|█████████▎| 8338/8943 [17:06<00:08, 67.41it/s] 93%|█████████▎| 8345/8943 [17:10<01:59,  4.99it/s] 93%|█████████▎| 8350/8943 [17:13<02:44,  3.61it/s] 93%|█████████▎| 8354/8943 [17:14<03:07,  3.13it/s] 93%|█████████▎| 8357/8943 [17:16<03:38,  2.68it/s] 93%|█████████▎| 8359/8943 [17:17<04:00,  2.43it/s] 93%|█████████▎| 8361/8943 [17:18<04:32,  2.13it/s] 94%|█████████▎| 8362/8943 [17:19<05:24,  1.79it/s] 94%|█████████▎| 8363/8943 [17:19<05:11,  1.86it/s] 94%|█████████▎| 8364/8943 [17:20<05:05,  1.89it/s] 94%|█████████▎| 8365/8943 [17:20<05:15,  1.83it/s] 94%|█████████▎| 8366/8943 [17:21<05:06,  1.88it/s] 94%|█████████▎| 8367/8943 [17:21<05:36,  1.71it/s] 94%|█████████▎| 8368/8943 [17:22<05:34,  1.72it/s] 94%|█████████▎| 8369/8943 [17:23<05:38,  1.70it/s] 94%|█████████▎| 8370/8943 [17:23<05:36,  1.70it/s] 94%|█████████▎| 8371/8943 [17:24<05:08,  1.86it/s] 94%|█████████▎| 8372/8943 [17:24<04:31,  2.10it/s] 94%|█████████▎| 8373/8943 [17:25<04:42,  2.02it/s] 94%|█████████▎| 8374/8943 [17:25<05:24,  1.75it/s] 94%|█████████▎| 8375/8943 [17:26<05:53,  1.61it/s] 94%|█████████▎| 8376/8943 [17:27<06:13,  1.52it/s] 94%|█████████▎| 8377/8943 [17:27<06:09,  1.53it/s] 94%|█████████▎| 8378/8943 [17:28<05:55,  1.59it/s] 94%|█████████▎| 8379/8943 [17:29<05:33,  1.69it/s] 94%|█████████▎| 8380/8943 [17:29<05:25,  1.73it/s] 94%|█████████▎| 8381/8943 [17:30<05:16,  1.78it/s] 94%|█████████▎| 8382/8943 [17:30<05:17,  1.77it/s] 94%|█████████▎| 8383/8943 [17:31<04:46,  1.96it/s] 94%|█████████▎| 8384/8943 [17:31<04:26,  2.10it/s] 94%|█████████▍| 8385/8943 [17:31<04:33,  2.04it/s] 94%|█████████▍| 8386/8943 [17:32<04:25,  2.10it/s] 94%|█████████▍| 8387/8943 [17:32<04:22,  2.11it/s] 94%|█████████▍| 8388/8943 [17:33<04:22,  2.11it/s] 94%|█████████▍| 8389/8943 [17:33<04:15,  2.17it/s] 94%|█████████▍| 8390/8943 [17:34<04:15,  2.16it/s] 94%|█████████▍| 8391/8943 [17:34<04:06,  2.24it/s] 94%|█████████▍| 8392/8943 [17:35<03:58,  2.31it/s] 94%|█████████▍| 8393/8943 [17:35<04:17,  2.13it/s] 94%|█████████▍| 8394/8943 [17:36<04:37,  1.98it/s] 94%|█████████▍| 8395/8943 [17:36<04:58,  1.83it/s] 94%|█████████▍| 8396/8943 [17:37<05:02,  1.81it/s] 94%|█████████▍| 8397/8943 [17:38<05:33,  1.64it/s]Picklist: Show the document id with paragraph text 'Brazil' and 'Ireland'., Paragraphs, Paragraph_Text, [Brazil]
Picklist: What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?, Paragraphs, Paragraph_Text, [Ireland]
Picklist: What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?, Paragraphs, Paragraph_Text, [Brazil]
Picklist: List the name of teachers whose hometown is not `` Little Lever Urban District '' ., teacher, Hometown, [Little Lever Urban District]
Picklist: What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?, teacher, Hometown, [Little Lever Urban District]
Picklist: Show the name of the teacher for the math course., course, Course, [Math]
Picklist: What are the names of the people who teach math courses?, course, Course, [Math]
Picklist: What are the opening year and staff number of the museum named Plaza Museum?, museum, Name, [Plaza Museum]
Picklist: List the first name and birth date of all players from the country with code USA., players, last_name, [Date]
Picklist: List the first name and birth date of all players from the country with code USA., players, country_code, [USA]
Picklist: List the first name and birth date of all players from the country with code USA., matches, loser_ioc, [USA]
Picklist: List the first name and birth date of all players from the country with code USA., matches, winner_ioc, [USA]
--------------------
text:  List the first name and birth date of all players from the country with code USA.
sql:  SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
ground truth values:  [('players.country_code', 'USA')]
matched values OrderedDict([(13, ('players.last_name', 'Date')), (23, ('players.country_code', 'USA')), (52, ('matches.loser_ioc', 'USA')), (114, ('matches.winner_ioc', 'USA'))])
--------------------
Picklist: What are the first names and birth dates of players from the USA?, players, country_code, [USA]
Picklist: What are the first names and birth dates of players from the USA?, matches, loser_ioc, [USA]
Picklist: What are the first names and birth dates of players from the USA?, matches, winner_ioc, [USA]
--------------------
text:  What are the first names and birth dates of players from the USA?
sql:  SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
ground truth values:  [('players.country_code', 'USA')]
matched values OrderedDict([(21, ('players.country_code', 'USA')), (50, ('matches.loser_ioc', 'USA')), (112, ('matches.winner_ioc', 'USA'))])
--------------------
Picklist: What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?, matches, tourney_name, [Australian Open]
Picklist: What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?, matches, tourney_name, [WTA Championships]
Picklist: What are the first names and country codes for players who won both the WTA Championships and the Australian Open?, matches, tourney_name, [Australian Open]
Picklist: What are the first names and country codes for players who won both the WTA Championships and the Australian Open?, matches, tourney_name, [WTA Championships]
Picklist: List the first and last name of all players in the order of birth date., players, last_name, [Last]
Picklist: List the first and last name of all players in the order of birth date., players, last_name, [Date]
--------------------
text:  List the first and last name of all players in the order of birth date.
sql:  SELECT first_name ,  last_name FROM players ORDER BY birth_date
ground truth values:  []
matched values OrderedDict([(13, ('players.last_name', 'Last')), (15, ('players.last_name', 'Date'))])
--------------------
Picklist: What are the full names of all players, sorted by birth date?, players, last_name, [Date]
--------------------
text:  What are the full names of all players, sorted by birth date?
sql:  SELECT first_name ,  last_name FROM players ORDER BY birth_date
ground truth values:  []
matched values OrderedDict([(13, ('players.last_name', 'Date'))])
--------------------
Picklist: List the first and last name of all players who are left / L hand in the order of birth date., players, last_name, [Last]
Picklist: List the first and last name of all players who are left / L hand in the order of birth date., players, last_name, [Date]
--------------------
text:  List the first and last name of all players who are left / L hand in the order of birth date.
sql:  SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
ground truth values:  [('players.hand', 'L')]
matched values OrderedDict([(13, ('players.last_name', 'Last')), (15, ('players.last_name', 'Date'))])
--------------------
Picklist: What are the full names of all left handed players, in order of birth date?, players, last_name, [Date]
--------------------
text:  What are the full names of all left handed players, in order of birth date?
sql:  SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
ground truth values:  [('players.hand', 'L')]
matched values OrderedDict([(13, ('players.last_name', 'Date'))])
--------------------
Picklist: Find the name of the winner who has the highest rank points and participated in the Australian Open tourney., matches, tourney_name, [Australian Open]
Picklist: What is the name of the winner with the most rank points who participated in the Australian Open tournament?, matches, tourney_name, [Australian Open]
Picklist: Find the total number of tours for each ranking date., players, last_name, [Date]
--------------------
text:  Find the total number of tours for each ranking date.
sql:  SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
ground truth values:  []
matched values OrderedDict([(13, ('players.last_name', 'Date'))])
--------------------
Picklist: How many total tours were there for each ranking date?, players, last_name, [Date]
--------------------
text:  How many total tours were there for each ranking date?
sql:  SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
ground truth values:  []
matched values OrderedDict([(13, ('players.last_name', 'Date'))])
--------------------
Picklist: How many different winners both participated in the WTA Championships and were left handed?, matches, tourney_name, [WTA Championships]
--------------------
text:  How many different winners both participated in the WTA Championships and were left handed?
sql:  SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
ground truth values:  [('matches.tourney_name', 'WTA Championships'), ('matches.winner_hand', 'L')]
matched values OrderedDict([(89, ('matches.tourney_name', 'WTA Championships'))])
--------------------
Picklist: Find the number of left handed winners who participated in the WTA Championships., matches, tourney_name, [WTA Championships]
--------------------
text:  Find the number of left handed winners who participated in the WTA Championships.
sql:  SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
ground truth values:  [('matches.tourney_name', 'WTA Championships'), ('matches.winner_hand', 'L')]
matched values OrderedDict([(89, ('matches.tourney_name', 'WTA Championships'))])
--------------------
Picklist: Find the first name, country code and birth date of the winner who has the highest rank points in all matches., players, last_name, [Date]
--------------------
text:  Find the first name, country code and birth date of the winner who has the highest rank points in all matches.
sql:  SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(13, ('players.last_name', 'Date'))])
--------------------
 94%|█████████▍| 8398/8943 [17:38<06:03,  1.50it/s] 94%|█████████▍| 8399/8943 [17:39<05:19,  1.70it/s] 94%|█████████▍| 8400/8943 [17:39<04:53,  1.85it/s] 94%|█████████▍| 8409/8943 [17:39<03:24,  2.62it/s] 94%|█████████▍| 8415/8943 [17:39<02:23,  3.67it/s] 94%|█████████▍| 8423/8943 [17:40<01:41,  5.13it/s] 94%|█████████▍| 8430/8943 [17:40<01:12,  7.08it/s] 94%|█████████▍| 8436/8943 [17:40<00:53,  9.56it/s] 94%|█████████▍| 8442/8943 [17:40<00:39, 12.67it/s] 94%|█████████▍| 8448/8943 [17:40<00:31, 15.58it/s] 95%|█████████▍| 8453/8943 [17:40<00:26, 18.60it/s] 95%|█████████▍| 8458/8943 [17:40<00:21, 22.83it/s] 95%|█████████▍| 8463/8943 [17:41<00:18, 25.62it/s] 95%|█████████▍| 8468/8943 [17:41<00:16, 29.49it/s] 95%|█████████▍| 8473/8943 [17:41<00:14, 33.12it/s] 95%|█████████▍| 8480/8943 [17:41<00:11, 39.20it/s] 95%|█████████▍| 8486/8943 [17:41<00:11, 38.30it/s] 95%|█████████▍| 8493/8943 [17:41<00:10, 43.54it/s]Picklist: What is the first name, country code, and birth date of the player with the most winner rank points across all matches?, players, last_name, [Date]
--------------------
text:  What is the first name, country code, and birth date of the player with the most winner rank points across all matches?
sql:  SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
ground truth values:  []
matched values OrderedDict([(13, ('players.last_name', 'Date'))])
--------------------
Picklist: How many ships ended up being 'Captured'?, ship, disposition_of_ship, [Captured]
--------------------
text:  What are the death and injury situations caused by the ship with tonnage 't'?
sql:  SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'
ground truth values:  [('ship.tonnage', 't')]
matched values OrderedDict()
--------------------
Picklist: What are the name and results of the battles when the bulgarian commander is not 'Boril', battle, bulgarian_commander, [Boril]
Picklist: What are the different ids and names of the battles that lost any 'Brig' type shipes?, ship, ship_type, [Brig]
Picklist: What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?, battle, bulgarian_commander, [Kaloyan]
Picklist: What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?, battle, latin_commander, [Baldwin I]
Picklist: List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta', ship, name, [HMS Atalanta]
Picklist: List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta', ship, name, [Lettice]
Picklist: Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'., ship, location, [English Channel]
Picklist: How is the math course described?, Courses, course_name, [math]
Picklist: How is the math course described?, Departments, department_name, [math]
--------------------
text:  How is the math course described?
sql:  SELECT course_description FROM Courses WHERE course_name  =  'math'
ground truth values:  [('Courses.course_name', 'math')]
matched values OrderedDict([(40, ('Courses.course_name', 'math')), (56, ('Departments.department_name', 'math'))])
--------------------
Picklist: What are the descriptions for all the math courses?, Courses, course_name, [math]
Picklist: What are the descriptions for all the math courses?, Departments, department_name, [math]
--------------------
text:  What are the descriptions for all the math courses?
sql:  SELECT course_description FROM Courses WHERE course_name  =  'math'
ground truth values:  [('Courses.course_name', 'math')]
matched values OrderedDict([(40, ('Courses.course_name', 'math')), (56, ('Departments.department_name', 'math'))])
--------------------
Picklist: What is the zip code of the address in the city Port Chelsea?, Addresses, city, [Port Chelsea]
Picklist: What is the zip code for Port Chelsea?, Addresses, city, [Port Chelsea]
--------------------
text:  How many degrees does the engineering department offer?
sql:  SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'
ground truth values:  [('Departments.department_name', 'engineer')]
matched values OrderedDict()
--------------------
--------------------
text:  How many degrees does the engineering department have?
sql:  SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'
ground truth values:  [('Departments.department_name', 'engineer')]
matched values OrderedDict()
--------------------
Picklist: Who is enrolled in a Bachelor degree program? List the first name, middle name, last name., Degree_Programs, degree_summary_name, [Bachelor]
--------------------
text:  What are the first, middle, and last names for everybody enrolled in a Bachelors program?
sql:  SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'
ground truth values:  [('Degree_Programs.degree_summary_name', 'Bachelor')]
matched values OrderedDict()
--------------------
--------------------
text:  Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.
sql:  SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
ground truth values:  [('Addresses.state_province_county', 'NorthCarolina')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the last name of the students who live in North Carolina but have not registered in any degree programs?
sql:  SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
ground truth values:  [('Addresses.state_province_county', 'NorthCarolina')]
matched values OrderedDict()
--------------------
Picklist: What is the phone number of the man with the first name Timmothy and the last name Ward?, Students, first_name, [Timmothy]
Picklist: What is the phone number of the man with the first name Timmothy and the last name Ward?, Students, last_name, [Ward]
Picklist: What is the mobile phone number of the student named Timmothy Ward ?, Students, first_name, [Timmothy]
Picklist: What is the mobile phone number of the student named Timmothy Ward ?, Students, last_name, [Ward]
Picklist: Find the semester when both Master students and Bachelor students got enrolled in., Degree_Programs, degree_summary_name, [Bachelor]
Picklist: Find the semester when both Master students and Bachelor students got enrolled in., Degree_Programs, degree_summary_name, [Master]
--------------------
text:  What is the id of the semester that had both Masters and Bachelors students enrolled?
sql:  SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
ground truth values:  [('Degree_Programs.degree_summary_name', 'Master'), ('Degree_Programs.degree_summary_name', 'Bachelor')]
matched values OrderedDict()
--------------------
--------------------
text:  Describe the section h.
sql:  SELECT section_description FROM Sections WHERE section_name  =  'h'
ground truth values:  [('Sections.section_name', 'h')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the description for the section named h?
sql:  SELECT section_description FROM Sections WHERE section_name  =  'h'
ground truth values:  [('Sections.section_name', 'h')]
matched values OrderedDict()
--------------------
Picklist: Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 ., Addresses, country, [Haiti]
Picklist: What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?, Addresses, country, [Haiti]
Picklist: List all cartoon directed by "Ben Jones"., Cartoon, Directed_by, [Ben Jones]
Picklist: What are the names of all cartoons directed by Ben Jones?, Cartoon, Directed_by, [Ben Jones]
 95%|█████████▌| 8500/8943 [17:41<00:09, 48.99it/s] 95%|█████████▌| 8507/8943 [17:41<00:08, 53.35it/s] 95%|█████████▌| 8515/8943 [17:41<00:07, 58.74it/s] 95%|█████████▌| 8522/8943 [17:42<00:07, 59.06it/s] 95%|█████████▌| 8531/8943 [17:42<00:06, 64.06it/s] 95%|█████████▌| 8531/8943 [17:56<00:06, 64.06it/s] 95%|█████████▌| 8534/8943 [17:56<09:41,  1.42s/it] 96%|█████████▌| 8541/8943 [17:56<06:42,  1.00s/it] 96%|█████████▌| 8547/8943 [17:56<04:39,  1.42it/s] 96%|█████████▌| 8553/8943 [17:56<03:14,  2.00it/s] 96%|█████████▌| 8565/8943 [17:56<02:13,  2.84it/s] 96%|█████████▌| 8574/8943 [17:56<01:32,  4.00it/s] 96%|█████████▌| 8581/8943 [17:56<01:05,  5.57it/s]Picklist: How many cartoons were written by "Joseph Kuhr"?, Cartoon, Written_by, [Joseph Kuhr]
Picklist: What is the number of cartoones written by Joseph Kuhr?, Cartoon, Written_by, [Joseph Kuhr]
Picklist: List the title of all cartoon directed by "Ben Jones" or "Brandon Vietti"., Cartoon, Directed_by, [Brandon Vietti]
Picklist: List the title of all cartoon directed by "Ben Jones" or "Brandon Vietti"., Cartoon, Directed_by, [Ben Jones]
Picklist: What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?, Cartoon, Directed_by, [Brandon Vietti]
Picklist: What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?, Cartoon, Directed_by, [Ben Jones]
Picklist: What is the content of TV Channel with serial name "Sky Radio"?, TV_Channel, series_name, [Sky Radio]
Picklist: What is the content of the series Sky Radio?, TV_Channel, series_name, [Sky Radio]
Picklist: What is the Package Option of TV Channel with serial name "Sky Radio"?, TV_Channel, series_name, [Sky Radio]
Picklist: What is the Package Option of TV Channel with serial name "Sky Radio"?, TV_Channel, Package_Option, [Option]
--------------------
text:  What is the Package Option of TV Channel with serial name "Sky Radio"?
sql:  SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio"
ground truth values:  [('TV_Channel.series_name', 'Sky Radio')]
matched values OrderedDict([(10, ('TV_Channel.series_name', 'Sky Radio')), (38, ('TV_Channel.Package_Option', 'Option'))])
--------------------
Picklist: What are the Package Options of the TV Channels whose series names are Sky Radio?, TV_Channel, series_name, [Sky Radio]
Picklist: What are the Package Options of the TV Channels whose series names are Sky Radio?, TV_Channel, Package_Option, [Option]
--------------------
text:  What are the Package Options of the TV Channels whose series names are Sky Radio?
sql:  SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio"
ground truth values:  [('TV_Channel.series_name', 'Sky Radio')]
matched values OrderedDict([(10, ('TV_Channel.series_name', 'Sky Radio')), (38, ('TV_Channel.Package_Option', 'Option'))])
--------------------
Picklist: How many TV Channel using language English?, TV_Channel, Language, [English]
Picklist: How many TV Channels use the English language?, TV_Channel, Language, [English]
Picklist: What is the TV Channel that shows the cartoon "The Rise of the Blue Beetle!"? List the TV Channel's series name., Cartoon, Title, [The Rise of the Blue Beetle!]
Picklist: What is the series name of the TV Channel that shows the cartoon "The Rise of the Blue Beetle"?, Cartoon, Title, [The Rise of the Blue Beetle!]
Picklist: List the title of all  Cartoons showed on TV Channel with series name "Sky Radio"., TV_Channel, series_name, [Sky Radio]
Picklist: What is the title of all the cartools that are on the TV Channel with the series name "Sky Radio"?, TV_Channel, series_name, [Sky Radio]
Picklist: What is the air date of TV series with Episode "A Love of a Lifetime"?, TV_series, Episode, [A Love of a Lifetime]
Picklist: When did the episode "A Love of a Lifetime" air?, TV_series, Episode, [A Love of a Lifetime]
Picklist: What is Weekly Rank of TV series with Episode "A Love of a Lifetime"?, TV_series, Episode, [A Love of a Lifetime]
Picklist: What is the weekly rank for the episode "A Love of a Lifetime"?, TV_series, Episode, [A Love of a Lifetime]
Picklist: What is the TV Channel of TV series with Episode "A Love of a Lifetime"? List the TV Channel's series name., TV_series, Episode, [A Love of a Lifetime]
Picklist: What is the name of the series that has the episode "A Love of a Lifetime"?, TV_series, Episode, [A Love of a Lifetime]
Picklist: List the Episode of all  TV series showed on TV Channel with series name "Sky Radio"., TV_Channel, series_name, [Sky Radio]
Picklist: What is the episode for the TV series named "Sky Radio"?, TV_Channel, series_name, [Sky Radio]
--------------------
text:  Find the package choice and series name of the TV channel that has high definition TV.
sql:  SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"
ground truth values:  [('TV_Channel.Hight_definition_TV', 'yes')]
matched values OrderedDict()
--------------------
Picklist: What are the package options and the name of the series for the TV Channel that supports high definition TV?, TV_Channel, Package_Option, [Option]
--------------------
text:  What are the package options and the name of the series for the TV Channel that supports high definition TV?
sql:  SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"
ground truth values:  [('TV_Channel.Hight_definition_TV', 'yes')]
matched values OrderedDict([(35, ('TV_Channel.Package_Option', 'Option'))])
--------------------
Picklist: which countries' tv channels are playing some cartoon written by Todd Casey?, Cartoon, Written_by, [Todd Casey]
Picklist: What are the countries that have cartoons on TV that were written by Todd Casey?, Cartoon, Written_by, [Todd Casey]
Picklist: which countries' tv channels are not playing any cartoon written by Todd Casey?, Cartoon, Written_by, [Todd Casey]
Picklist: What are the countries that are not playing cartoons written by Todd Casey?, Cartoon, Written_by, [Todd Casey]
Picklist: Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?, Cartoon, Directed_by, [Michael Chang]
Picklist: Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?, Cartoon, Directed_by, [Ben Jones]
Picklist: What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?, Cartoon, Directed_by, [Michael Chang]
Picklist: What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?, Cartoon, Directed_by, [Ben Jones]
Picklist: find the pixel aspect ratio and nation of the tv channels that do not use English., TV_Channel, Language, [English]
Picklist: What is the pixel aspect ratio and country of origin for all TV channels that do not use English?, TV_Channel, Language, [English]
Picklist: find the id of tv channels that do not play any cartoon directed by Ben Jones., Cartoon, Directed_by, [Ben Jones]
Picklist: What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?, Cartoon, Directed_by, [Ben Jones]
Picklist: find the package option of the tv channel that do not have any cartoon directed by Ben Jones., TV_Channel, Package_Option, [Option]
Picklist: find the package option of the tv channel that do not have any cartoon directed by Ben Jones., Cartoon, Directed_by, [Ben Jones]
--------------------
text:  find the package option of the tv channel that do not have any cartoon directed by Ben Jones.
sql:  SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
ground truth values:  [('Cartoon.Directed_by', 'Ben Jones')]
matched values OrderedDict([(35, ('TV_Channel.Package_Option', 'Option')), (73, ('Cartoon.Directed_by', 'Ben Jones'))])
--------------------
Picklist: What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?, TV_Channel, Package_Option, [Option]
Picklist: What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?, Cartoon, Directed_by, [Ben Jones]
--------------------
text:  What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?
sql:  SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
ground truth values:  [('Cartoon.Directed_by', 'Ben Jones')]
matched values OrderedDict([(35, ('TV_Channel.Package_Option', 'Option')), (73, ('Cartoon.Directed_by', 'Ben Jones'))])
--------------------
Picklist: Show names of people whose nationality is not "Russia"., people, Nationality, [Russia]
 96%|█████████▌| 8592/8943 [17:57<00:45,  7.78it/s] 96%|█████████▌| 8604/8943 [17:57<00:31, 10.80it/s] 96%|█████████▋| 8614/8943 [17:57<00:27, 11.79it/s] 96%|█████████▋| 8621/8943 [17:58<00:33,  9.54it/s] 96%|█████████▋| 8626/8943 [17:59<00:37,  8.37it/s]Picklist: What are the names of people who are not from Russia?, people, Nationality, [Russia]
Picklist: What is last date created of votes from the state 'CA'?, AREA_CODE_STATE, state, [CA]
Picklist: What is last date created of votes from the state 'CA'?, VOTES, state, [CA]
--------------------
text:  What is last date created of votes from the state 'CA'?
sql:  SELECT max(created) FROM votes WHERE state  =  'CA'
ground truth values:  [('VOTES.state', 'CA')]
matched values OrderedDict([(11, ('AREA_CODE_STATE.state', 'CA')), (31, ('VOTES.state', 'CA'))])
--------------------
Picklist: What are the names of the contestants whose names are not 'Jessie Alloway', CONTESTANTS, contestant_name, [Jessie Alloway]
Picklist: What are the number of votes from state 'NY' or 'CA'?, AREA_CODE_STATE, state, [CA]
Picklist: What are the number of votes from state 'NY' or 'CA'?, AREA_CODE_STATE, state, [NY]
Picklist: What are the number of votes from state 'NY' or 'CA'?, VOTES, state, [CA]
Picklist: What are the number of votes from state 'NY' or 'CA'?, VOTES, state, [NY]
--------------------
text:  What are the number of votes from state 'NY' or 'CA'?
sql:  SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'
ground truth values:  [('VOTES.state', 'NY'), ('VOTES.state', 'CA')]
matched values OrderedDict([(11, ('AREA_CODE_STATE.state', 'CA')), (13, ('AREA_CODE_STATE.state', 'NY')), (33, ('VOTES.state', 'CA')), (35, ('VOTES.state', 'NY'))])
--------------------
Picklist: What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?, CONTESTANTS, contestant_name, [Tabatha Gehling]
Picklist: List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'., CONTESTANTS, contestant_name, [Tabatha Gehling]
Picklist: List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'., CONTESTANTS, contestant_name, [Kelly Clauss]
Picklist: Return the names of the contestants whose names contain the substring 'Al' ., AREA_CODE_STATE, state, [AL]
--------------------
text:  Return the names of the contestants whose names contain the substring 'Al' .
sql:  select contestant_name from contestants where contestant_name like "%al%"
ground truth values:  []
matched values OrderedDict([(11, ('AREA_CODE_STATE.state', 'AL'))])
--------------------
Picklist: How many countries have a republic as their form of government?, country, GovernmentForm, [Republic]
Picklist: How many countries have governments that are republics?, country, GovernmentForm, [Republic]
Picklist: What is the total surface area of the countries in the Caribbean region?, country, Region, [Caribbean]
Picklist: What is the total surface area of the countries in the Caribbean region?, countrylanguage, Language, [Caribbean]
--------------------
text:  What is the total surface area of the countries in the Caribbean region?
sql:  SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"
ground truth values:  [('country.Region', 'Caribbean')]
matched values OrderedDict([(34, ('country.Region', 'Caribbean')), (82, ('countrylanguage.Language', 'Caribbean'))])
--------------------
--------------------
text:  How much surface area do the countires in the Carribean cover together?
sql:  SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"
ground truth values:  [('country.Region', 'Caribbean')]
matched values OrderedDict()
--------------------
Picklist: Which continent is Anguilla in?, country, Name, [Anguilla]
Picklist: Which continent is Anguilla in?, country, LocalName, [Anguilla]
--------------------
text:  Which continent is Anguilla in?
sql:  SELECT Continent FROM country WHERE Name  =  "Anguilla"
ground truth values:  [('country.Name', 'Anguilla')]
matched values OrderedDict([(30, ('country.Name', 'Anguilla')), (62, ('country.LocalName', 'Anguilla'))])
--------------------
Picklist: What is the continent name which Anguilla belongs to?, country, Name, [Anguilla]
Picklist: What is the continent name which Anguilla belongs to?, country, LocalName, [Anguilla]
--------------------
text:  What is the continent name which Anguilla belongs to?
sql:  SELECT Continent FROM country WHERE Name  =  "Anguilla"
ground truth values:  [('country.Name', 'Anguilla')]
matched values OrderedDict([(30, ('country.Name', 'Anguilla')), (62, ('country.LocalName', 'Anguilla'))])
--------------------
Picklist: Which region is the city Kabul located in?, city, Name, [Kabul]
Picklist: What region is Kabul in?, city, Name, [Kabul]
Picklist: Which language is the most popular in Aruba?, country, Name, [Aruba]
Picklist: Which language is the most popular in Aruba?, country, LocalName, [Aruba]
--------------------
text:  Which language is the most popular in Aruba?
sql:  SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1
ground truth values:  [('country.Name', 'Aruba')]
matched values OrderedDict([(30, ('country.Name', 'Aruba')), (61, ('country.LocalName', 'Aruba'))])
--------------------
Picklist: What language is predominantly spoken in Aruba?, country, Name, [Aruba]
Picklist: What language is predominantly spoken in Aruba?, country, LocalName, [Aruba]
--------------------
text:  What language is predominantly spoken in Aruba?
sql:  SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1
ground truth values:  [('country.Name', 'Aruba')]
matched values OrderedDict([(30, ('country.Name', 'Aruba')), (61, ('country.LocalName', 'Aruba'))])
--------------------
Picklist: What are the population and life expectancies in Brazil?, country, Name, [Brazil]
Picklist: Give me Brazil's population and life expectancies., country, Name, [Brazil]
Picklist: What are the region and population of Angola?, country, Name, [Angola]
Picklist: What are the region and population of Angola?, country, LocalName, [Angola]
--------------------
text:  What are the region and population of Angola?
sql:  SELECT Population ,  Region FROM country WHERE Name  =  "Angola"
ground truth values:  [('country.Name', 'Angola')]
matched values OrderedDict([(30, ('country.Name', 'Angola')), (60, ('country.LocalName', 'Angola'))])
--------------------
Picklist: What region does Angola belong to and what is its population?, country, Name, [Angola]
Picklist: What region does Angola belong to and what is its population?, country, LocalName, [Angola]
--------------------
text:  What region does Angola belong to and what is its population?
sql:  SELECT Population ,  Region FROM country WHERE Name  =  "Angola"
ground truth values:  [('country.Name', 'Angola')]
matched values OrderedDict([(30, ('country.Name', 'Angola')), (60, ('country.LocalName', 'Angola'))])
--------------------
Picklist: What is the average expected life expectancy for countries in the region of Central Africa?, city, District, [Central]
Picklist: What is the average expected life expectancy for countries in the region of Central Africa?, country, Continent, [Africa]
Picklist: What is the average expected life expectancy for countries in the region of Central Africa?, country, Region, [Central Africa]
--------------------
text:  What is the average expected life expectancy for countries in the region of Central Africa?
sql:  SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"
ground truth values:  [('country.Region', 'Central Africa')]
matched values OrderedDict([(13, ('city.District', 'Central')), (34, ('country.Continent', 'Africa')), (38, ('country.Region', 'Central Africa'))])
--------------------
Picklist: How long is the people's average life expectancy in Central Africa?, city, District, [Central]
Picklist: How long is the people's average life expectancy in Central Africa?, country, Continent, [Africa]
Picklist: How long is the people's average life expectancy in Central Africa?, country, Region, [Central Africa]
--------------------
text:   97%|█████████▋| 8630/8943 [18:00<00:44,  7.08it/s] 97%|█████████▋| 8633/8943 [18:00<00:47,  6.54it/s] 97%|█████████▋| 8636/8943 [18:01<00:50,  6.05it/s] 97%|█████████▋| 8638/8943 [18:01<00:50,  6.03it/s] 97%|█████████▋| 8640/8943 [18:02<00:52,  5.80it/s] 97%|█████████▋| 8642/8943 [18:02<00:52,  5.73it/s] 97%|█████████▋| 8643/8943 [18:02<00:51,  5.84it/s] 97%|█████████▋| 8644/8943 [18:02<00:48,  6.15it/s] 97%|█████████▋| 8645/8943 [18:03<00:48,  6.08it/s] 97%|█████████▋| 8646/8943 [18:03<00:48,  6.14it/s] 97%|█████████▋| 8647/8943 [18:03<00:46,  6.30it/s] 97%|█████████▋| 8648/8943 [18:03<00:47,  6.15it/s] 97%|█████████▋| 8649/8943 [18:03<00:48,  6.01it/s] 97%|█████████▋| 8650/8943 [18:03<00:51,  5.74it/s] 97%|█████████▋| 8651/8943 [18:04<00:52,  5.56it/s] 97%|█████████▋| 8652/8943 [18:04<00:49,  5.91it/s] 97%|█████████▋| 8653/8943 [18:04<00:46,  6.27it/s] 97%|█████████▋| 8654/8943 [18:04<00:46,  6.20it/s] 97%|█████████▋| 8655/8943 [18:04<00:48,  6.00it/s] 97%|█████████▋| 8656/8943 [18:04<00:49,  5.77it/s] 97%|█████████▋| 8657/8943 [18:05<00:50,  5.61it/s] 97%|█████████▋| 8658/8943 [18:05<00:55,  5.11it/s]How long is the people's average life expectancy in Central Africa?
sql:  SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"
ground truth values:  [('country.Region', 'Central Africa')]
matched values OrderedDict([(13, ('city.District', 'Central')), (34, ('country.Continent', 'Africa')), (38, ('country.Region', 'Central Africa'))])
--------------------
Picklist: What is the name of country that has the shortest life expectancy in Asia?, country, Continent, [Asia]
Picklist: Give the name of the country in Asia with the lowest life expectancy., country, Continent, [Asia]
Picklist: What is the total population and maximum GNP in Asia?, country, Continent, [Asia]
Picklist: How many people live in Asia, and what is the largest GNP among them?, country, Continent, [Asia]
Picklist: What is the average life expectancy in African countries that are republics?, country, Continent, [Africa]
Picklist: What is the average life expectancy in African countries that are republics?, country, GovernmentForm, [Republic]
Picklist: Give the average life expectancy for countries in Africa which are republics?, country, Continent, [Africa]
Picklist: Give the average life expectancy for countries in Africa which are republics?, country, GovernmentForm, [Republic]
Picklist: What is the total surface area of the continents Asia and Europe?, country, Continent, [Europe]
Picklist: What is the total surface area of the continents Asia and Europe?, country, Continent, [Asia]
Picklist: Give the total surface area covered by countries in Asia or Europe., country, Continent, [Europe]
Picklist: Give the total surface area covered by countries in Asia or Europe., country, Continent, [Asia]
Picklist: How many people live in Gelderland district?, city, District, [Gelderland]
Picklist: What is the total population of Gelderland district?, city, District, [Gelderland]
Picklist: What is the average GNP and total population in all nations whose government is US territory?, country, GovernmentForm, [US Territory]
Picklist: What is the average GNP and total population in all nations whose government is US territory?, country, Code2, [US]
--------------------
text:  What is the average GNP and total population in all nations whose government is US territory?
sql:  SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"
ground truth values:  [('country.GovernmentForm', 'US Territory')]
matched values OrderedDict([(61, ('country.GovernmentForm', 'US Territory')), (73, ('country.Code2', 'US'))])
--------------------
Picklist: Give the mean GNP and total population of nations which are considered US territory., country, GovernmentForm, [US Territory]
Picklist: Give the mean GNP and total population of nations which are considered US territory., country, Code2, [US]
--------------------
text:  Give the mean GNP and total population of nations which are considered US territory.
sql:  SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"
ground truth values:  [('country.GovernmentForm', 'US Territory')]
matched values OrderedDict([(61, ('country.GovernmentForm', 'US Territory')), (73, ('country.Code2', 'US'))])
--------------------
Picklist: How many type of governments are in Africa?, country, Continent, [Africa]
Picklist: How many different forms of governments are there in Africa?, country, Continent, [Africa]
Picklist: What is the total number of languages used in Aruba?, country, Name, [Aruba]
Picklist: What is the total number of languages used in Aruba?, country, LocalName, [Aruba]
--------------------
text:  What is the total number of languages used in Aruba?
sql:  SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"
ground truth values:  [('country.Name', 'Aruba')]
matched values OrderedDict([(30, ('country.Name', 'Aruba')), (61, ('country.LocalName', 'Aruba'))])
--------------------
Picklist: How many languages are spoken in Aruba?, country, Name, [Aruba]
Picklist: How many languages are spoken in Aruba?, country, LocalName, [Aruba]
--------------------
text:  How many languages are spoken in Aruba?
sql:  SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"
ground truth values:  [('country.Name', 'Aruba')]
matched values OrderedDict([(30, ('country.Name', 'Aruba')), (61, ('country.LocalName', 'Aruba'))])
--------------------
Picklist: How many official languages does Afghanistan have?, country, Name, [Afghanistan]
--------------------
text:  How many official languages does Afghanistan have?
sql:  SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"
ground truth values:  [('country.Name', 'Afghanistan'), ('countrylanguage.IsOfficial', 'T')]
matched values OrderedDict([(30, ('country.Name', 'Afghanistan'))])
--------------------
Picklist: How many official languages are spoken in Afghanistan?, country, Name, [Afghanistan]
--------------------
text:  How many official languages are spoken in Afghanistan?
sql:  SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"
ground truth values:  [('country.Name', 'Afghanistan'), ('countrylanguage.IsOfficial', 'T')]
matched values OrderedDict([(30, ('country.Name', 'Afghanistan'))])
--------------------
Picklist: How many countries speak both English and Dutch?, countrylanguage, Language, [English]
Picklist: How many countries speak both English and Dutch?, countrylanguage, Language, [Dutch]
Picklist: What is the number of nations that use English and Dutch?, countrylanguage, Language, [English]
Picklist: What is the number of nations that use English and Dutch?, countrylanguage, Language, [Dutch]
Picklist: What are the names of nations speak both English and French?, countrylanguage, Language, [English]
Picklist: What are the names of nations speak both English and French?, countrylanguage, Language, [French]
Picklist: Give the names of nations that speak both English and French., countrylanguage, Language, [English]
Picklist: Give the names of nations that speak both English and French., countrylanguage, Language, [French]
Picklist: What are the names of nations where both English and French are official languages?, countrylanguage, Language, [English]
Picklist: What are the names of nations where both English and French are official languages?, countrylanguage, Language, [French]
--------------------
text:  What are the names of nations where both English and French are official languages?
sql:  SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
ground truth values:  [('countrylanguage.Language', 'English'), ('countrylanguage.IsOfficial', 'T'), ('countrylanguage.Language', 'French'), ('countrylanguage.IsOfficial', 'T')]
matched values OrderedDict([(80, ('countrylanguage.Language', 'English')), (82, ('countrylanguage.Language', 'French'))])
--------------------
Picklist: Give the names of countries with English and French as official languages., countrylanguage, Language, [English]
Picklist: Give the names of countries with English and French as official languages., countrylanguage, Language, [French]
--------------------
text:  Give the names of countries with English and French as official languages.
sql:  SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
ground truth values:   97%|█████████▋| 8659/8943 [18:05<00:57,  4.93it/s] 97%|█████████▋| 8660/8943 [18:05<00:54,  5.15it/s] 97%|█████████▋| 8661/8943 [18:05<00:49,  5.72it/s] 97%|█████████▋| 8662/8943 [18:06<00:47,  5.91it/s] 97%|█████████▋| 8663/8943 [18:06<00:44,  6.33it/s] 97%|█████████▋| 8664/8943 [18:06<00:49,  5.59it/s] 97%|█████████▋| 8665/8943 [18:06<00:52,  5.33it/s] 97%|█████████▋| 8666/8943 [18:06<00:50,  5.46it/s] 97%|█████████▋| 8667/8943 [18:06<00:51,  5.31it/s] 97%|█████████▋| 8668/8943 [18:07<00:52,  5.29it/s] 97%|█████████▋| 8669/8943 [18:07<00:52,  5.18it/s] 97%|█████████▋| 8670/8943 [18:07<00:51,  5.33it/s] 97%|█████████▋| 8671/8943 [18:07<00:48,  5.58it/s] 97%|█████████▋| 8672/8943 [18:07<00:52,  5.16it/s] 97%|█████████▋| 8673/8943 [18:08<00:55,  4.91it/s] 97%|█████████▋| 8674/8943 [18:08<00:57,  4.69it/s] 97%|█████████▋| 8675/8943 [18:08<00:58,  4.59it/s] 97%|█████████▋| 8676/8943 [18:08<00:57,  4.65it/s] 97%|█████████▋| 8677/8943 [18:08<00:54,  4.88it/s] 97%|█████████▋| 8678/8943 [18:09<00:54,  4.83it/s] 97%|█████████▋| 8679/8943 [18:09<00:56,  4.67it/s] 97%|█████████▋| 8680/8943 [18:09<00:58,  4.47it/s] 97%|█████████▋| 8681/8943 [18:09<00:58,  4.47it/s] 97%|█████████▋| 8682/8943 [18:10<00:57,  4.55it/s] 97%|█████████▋| 8683/8943 [18:10<00:54,  4.74it/s] 97%|█████████▋| 8684/8943 [18:10<00:55,  4.66it/s] 97%|█████████▋| 8685/8943 [18:10<00:55,  4.65it/s][('countrylanguage.Language', 'English'), ('countrylanguage.IsOfficial', 'T'), ('countrylanguage.Language', 'French'), ('countrylanguage.IsOfficial', 'T')]
matched values OrderedDict([(80, ('countrylanguage.Language', 'English')), (82, ('countrylanguage.Language', 'French'))])
--------------------
Picklist: What is the number of distinct continents where Chinese is spoken?, countrylanguage, Language, [Chinese]
Picklist: How many continents speak Chinese?, countrylanguage, Language, [Chinese]
Picklist: What are the regions that use English or Dutch?, countrylanguage, Language, [English]
Picklist: What are the regions that use English or Dutch?, countrylanguage, Language, [Dutch]
Picklist: Which regions speak Dutch or English?, countrylanguage, Language, [English]
Picklist: Which regions speak Dutch or English?, countrylanguage, Language, [Dutch]
Picklist: What are the countries where either English or Dutch is the official language ?, countrylanguage, Language, [English]
Picklist: What are the countries where either English or Dutch is the official language ?, countrylanguage, Language, [Dutch]
--------------------
text:  What are the countries where either English or Dutch is the official language ?
sql:  select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "english" and isofficial  =  "t" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "dutch" and isofficial  =  "t"
ground truth values:  [('countrylanguage.Language', 'english'), ('countrylanguage.IsOfficial', 't'), ('countrylanguage.Language', 'dutch'), ('countrylanguage.IsOfficial', 't')]
matched values OrderedDict([(80, ('countrylanguage.Language', 'English')), (82, ('countrylanguage.Language', 'Dutch'))])
--------------------
Picklist: Which countries have either English or Dutch as an official language?, countrylanguage, Language, [English]
Picklist: Which countries have either English or Dutch as an official language?, countrylanguage, Language, [Dutch]
--------------------
text:  Which countries have either English or Dutch as an official language?
sql:  SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND IsOfficial  =  "T" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch" AND IsOfficial  =  "T"
ground truth values:  [('countrylanguage.Language', 'English'), ('countrylanguage.IsOfficial', 'T'), ('countrylanguage.Language', 'Dutch'), ('countrylanguage.IsOfficial', 'T')]
matched values OrderedDict([(80, ('countrylanguage.Language', 'English')), (82, ('countrylanguage.Language', 'Dutch'))])
--------------------
Picklist: Which language is the most popular on the Asian continent?, country, Continent, [Asia]
Picklist: What is the language that is used by the largest number of Asian nations?, country, Continent, [Asia]
Picklist: Which languages are spoken by only one country in republic governments?, country, GovernmentForm, [Republic]
Picklist: What languages are only used by a single country with a republic government?, country, GovernmentForm, [Republic]
Picklist: Find the city with the largest population that uses English., countrylanguage, Language, [English]
Picklist: What is the most populace city that speaks English?, countrylanguage, Language, [English]
Picklist: Find the name, population and expected life length of asian country with the largest area?, country, Continent, [Asia]
Picklist: What are the name, population, and life expectancy of the largest Asian country by land?, country, Continent, [Asia]
Picklist: What is average life expectancy in the countries where English is not the official language?, countrylanguage, Language, [English]
--------------------
text:  What is average life expectancy in the countries where English is not the official language?
sql:  SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
ground truth values:  [('countrylanguage.Language', 'English'), ('countrylanguage.IsOfficial', 'T')]
matched values OrderedDict([(80, ('countrylanguage.Language', 'English'))])
--------------------
Picklist: Give the mean life expectancy of countries in which English is not the official language., countrylanguage, Language, [English]
--------------------
text:  Give the mean life expectancy of countries in which English is not the official language.
sql:  SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
ground truth values:  [('countrylanguage.Language', 'English'), ('countrylanguage.IsOfficial', 'T')]
matched values OrderedDict([(80, ('countrylanguage.Language', 'English'))])
--------------------
Picklist: What is the total number of people living in the nations that do not use English?, countrylanguage, Language, [English]
Picklist: How many people live in countries that do not speak English?, countrylanguage, Language, [English]
Picklist: What is the official language spoken in the country whose head of state is Beatrix?, country, HeadOfState, [Beatrix]
--------------------
text:  What is the official language spoken in the country whose head of state is Beatrix?
sql:  SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"
ground truth values:  [('country.HeadOfState', 'Beatrix'), ('countrylanguage.IsOfficial', 'T')]
matched values OrderedDict([(65, ('country.HeadOfState', 'Beatrix'))])
--------------------
Picklist: What is the official language used in the country the name of whose head of state is Beatrix., country, HeadOfState, [Beatrix]
--------------------
text:  What is the official language used in the country the name of whose head of state is Beatrix.
sql:  SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"
ground truth values:  [('country.HeadOfState', 'Beatrix'), ('countrylanguage.IsOfficial', 'T')]
matched values OrderedDict([(65, ('country.HeadOfState', 'Beatrix'))])
--------------------
--------------------
text:  What is the total number of unique official languages spoken in the countries that are founded before 1930?
sql:  SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"
ground truth values:  [('countrylanguage.IsOfficial', 'T')]
matched values OrderedDict()
--------------------
--------------------
text:  For the countries founded before 1930, what is the total number of distinct official languages?
sql:  SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"
ground truth values:  [('countrylanguage.IsOfficial', 'T')]
matched values OrderedDict()
--------------------
Picklist: What are the countries that have greater surface area than any country in Europe?, country, Continent, [Europe]
Picklist: Which countries have greater area than that of any country in Europe?, country, Continent, [Europe]
Picklist: What are the African countries that have a  population less than any country in Asia?, country, Continent, [Asia]
Picklist: What are the African countries that have a  population less than any country in Asia?, country, Continent, [Africa]
Picklist: Which African countries have a smaller population than that of any country in Asia?, country, Continent, [Asia]
Picklist: Which African countries have a smaller population than that of any country in Asia?, country, Continent, [Africa]
Picklist: Which Asian countries have a population that is larger than any country in Africa?, country, Continent, [Africa]
 97%|█████████▋| 8686/8943 [18:10<00:55,  4.64it/s] 97%|█████████▋| 8687/8943 [18:11<00:56,  4.49it/s] 97%|█████████▋| 8688/8943 [18:11<00:53,  4.76it/s] 97%|█████████▋| 8689/8943 [18:11<00:50,  5.04it/s] 97%|█████████▋| 8690/8943 [18:11<00:50,  4.99it/s] 97%|█████████▋| 8691/8943 [18:11<00:51,  4.89it/s] 97%|█████████▋| 8692/8943 [18:12<00:54,  4.59it/s] 97%|█████████▋| 8693/8943 [18:12<00:56,  4.46it/s] 97%|█████████▋| 8694/8943 [18:12<00:55,  4.48it/s] 97%|█████████▋| 8695/8943 [18:12<00:55,  4.47it/s] 97%|█████████▋| 8696/8943 [18:13<00:54,  4.50it/s] 97%|█████████▋| 8697/8943 [18:13<00:56,  4.33it/s] 97%|█████████▋| 8698/8943 [18:13<00:57,  4.29it/s] 97%|█████████▋| 8699/8943 [18:13<00:57,  4.26it/s] 97%|█████████▋| 8700/8943 [18:14<00:54,  4.43it/s] 97%|█████████▋| 8701/8943 [18:14<00:54,  4.47it/s] 97%|█████████▋| 8702/8943 [18:14<00:56,  4.26it/s] 97%|█████████▋| 8703/8943 [18:14<00:57,  4.16it/s] 97%|█████████▋| 8704/8943 [18:15<00:57,  4.16it/s] 97%|█████████▋| 8705/8943 [18:15<00:57,  4.11it/s] 97%|█████████▋| 8706/8943 [18:15<00:59,  3.95it/s] 97%|█████████▋| 8707/8943 [18:15<01:04,  3.65it/s] 97%|█████████▋| 8708/8943 [18:16<01:04,  3.64it/s] 97%|█████████▋| 8709/8943 [18:16<01:10,  3.33it/s] 97%|█████████▋| 8710/8943 [18:16<01:02,  3.73it/s] 97%|█████████▋| 8711/8943 [18:16<00:55,  4.15it/s] 97%|█████████▋| 8712/8943 [18:17<00:50,  4.57it/s] 97%|█████████▋| 8713/8943 [18:17<00:45,  5.10it/s] 97%|█████████▋| 8714/8943 [18:17<00:43,  5.28it/s] 97%|█████████▋| 8715/8943 [18:17<00:40,  5.58it/s] 97%|█████████▋| 8716/8943 [18:17<00:37,  6.13it/s] 97%|█████████▋| 8717/8943 [18:17<00:34,  6.57it/s] 97%|█████████▋| 8718/8943 [18:18<00:40,  5.58it/s] 97%|█████████▋| 8719/8943 [18:18<00:43,  5.18it/s] 98%|█████████▊| 8720/8943 [18:18<00:49,  4.52it/s]Picklist: Which Asian countries have a population that is larger than any country in Africa?, country, Continent, [Asia]
Picklist: What are the Asian countries which have a population larger than that of any country in Africa?, country, Continent, [Africa]
Picklist: What are the Asian countries which have a population larger than that of any country in Africa?, country, Continent, [Asia]
Picklist: What are the country codes for countries that do not speak English?, countrylanguage, Language, [English]
Picklist: Return the country codes for countries that do not speak English., countrylanguage, Language, [English]
Picklist: What are the country codes of countries where people use languages other than English?, countrylanguage, Language, [English]
Picklist: Give the country codes for countries in which people speak langauges that are not English., countrylanguage, Language, [English]
Picklist: What are the codes of the countries that do not speak English and whose government forms are not Republic?, country, GovernmentForm, [Republic]
Picklist: What are the codes of the countries that do not speak English and whose government forms are not Republic?, countrylanguage, Language, [English]
Picklist: Return the codes of countries that do not speak English and do not have Republics for governments., country, GovernmentForm, [Republic]
Picklist: Return the codes of countries that do not speak English and do not have Republics for governments., countrylanguage, Language, [English]
Picklist: Which cities are in European countries where English is not the official language?, country, Continent, [Europe]
Picklist: Which cities are in European countries where English is not the official language?, countrylanguage, Language, [English]
--------------------
text:  Which cities are in European countries where English is not the official language?
sql:  SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
ground truth values:  [('country.Continent', 'Europe'), ('countrylanguage.IsOfficial', 'T'), ('countrylanguage.Language', 'English')]
matched values OrderedDict([(32, ('country.Continent', 'Europe')), (82, ('countrylanguage.Language', 'English'))])
--------------------
Picklist: What are the names of cities in Europe for which English is not the official language?, country, Continent, [Europe]
Picklist: What are the names of cities in Europe for which English is not the official language?, countrylanguage, Language, [English]
--------------------
text:  What are the names of cities in Europe for which English is not the official language?
sql:  SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
ground truth values:  [('country.Continent', 'Europe'), ('countrylanguage.IsOfficial', 'T'), ('countrylanguage.Language', 'English')]
matched values OrderedDict([(32, ('country.Continent', 'Europe')), (82, ('countrylanguage.Language', 'English'))])
--------------------
Picklist: Which unique cities are in Asian countries where Chinese is the official language ?, country, Continent, [Asia]
Picklist: Which unique cities are in Asian countries where Chinese is the official language ?, countrylanguage, Language, [Chinese]
--------------------
text:  Which unique cities are in Asian countries where Chinese is the official language ?
sql:  select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  "asia"
ground truth values:  [('countrylanguage.IsOfficial', 't'), ('countrylanguage.Language', 'chinese'), ('country.Continent', 'asia')]
matched values OrderedDict([(32, ('country.Continent', 'Asia')), (82, ('countrylanguage.Language', 'Chinese'))])
--------------------
Picklist: Return the different names of cities that are in Asia and for which Chinese is the official language., country, Continent, [Asia]
Picklist: Return the different names of cities that are in Asia and for which Chinese is the official language., countrylanguage, Language, [Chinese]
--------------------
text:  Return the different names of cities that are in Asia and for which Chinese is the official language.
sql:  SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  "Asia"
ground truth values:  [('countrylanguage.IsOfficial', 'T'), ('countrylanguage.Language', 'Chinese'), ('country.Continent', 'Asia')]
matched values OrderedDict([(32, ('country.Continent', 'Asia')), (82, ('countrylanguage.Language', 'Chinese'))])
--------------------
Picklist: What are the name, independence year, and surface area of the country with the smallest population?, city, Name, [Independence]
--------------------
text:  What are the name, independence year, and surface area of the country with the smallest population?
sql:  SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1
ground truth values:  []
matched values OrderedDict([(8, ('city.Name', 'Independence'))])
--------------------
Picklist: Give the name, year of independence, and surface area of the country that has the lowest population., city, Name, [Independence]
--------------------
text:  Give the name, year of independence, and surface area of the country that has the lowest population.
sql:  SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1
ground truth values:  []
matched values OrderedDict([(8, ('city.Name', 'Independence'))])
--------------------
Picklist: how many countries are in Asia?, country, Continent, [Asia]
Picklist: Count the number of countries in Asia., country, Continent, [Asia]
Picklist: What are the names of the countries that are in the continent of Europe and have a population of 80000?, country, Continent, [Europe]
Picklist: Give the names of countries that are in Europe and have a population equal to 80000., country, Continent, [Europe]
Picklist: What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?, country, Continent, [North America]
Picklist: What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?, country, Region, [North America]
--------------------
text:  What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?
sql:  select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000
ground truth values:  [('country.Continent', 'north america')]
matched values OrderedDict([(32, ('country.Continent', 'North America')), (37, ('country.Region', 'North America'))])
--------------------
Picklist: Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 ., country, Continent, [North America]
Picklist: Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 ., country, Region, [North America]
--------------------
text:  Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .
sql:  select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000
ground truth values:  [('country.Continent', 'north america')]
matched values OrderedDict([(32, ('country.Continent', 'North America')), (37, ('country.Region', 'North America'))])
 98%|█████████▊| 8721/8943 [18:18<00:55,  4.04it/s] 98%|█████████▊| 8722/8943 [18:19<00:49,  4.43it/s] 98%|█████████▊| 8723/8943 [18:19<00:47,  4.64it/s] 98%|█████████▊| 8724/8943 [18:19<00:43,  5.03it/s] 98%|█████████▊| 8725/8943 [18:19<00:40,  5.37it/s] 98%|█████████▊| 8726/8943 [18:19<00:40,  5.30it/s] 98%|█████████▊| 8727/8943 [18:19<00:47,  4.59it/s] 98%|█████████▊| 8728/8943 [18:20<00:47,  4.54it/s] 98%|█████████▊| 8729/8943 [18:20<00:46,  4.65it/s] 98%|█████████▊| 8730/8943 [18:20<00:45,  4.64it/s] 98%|█████████▊| 8731/8943 [18:20<00:44,  4.71it/s] 98%|█████████▊| 8743/8943 [18:20<00:30,  6.61it/s] 98%|█████████▊| 8752/8943 [18:21<00:20,  9.15it/s] 98%|█████████▊| 8759/8943 [18:21<00:14, 12.33it/s] 98%|█████████▊| 8767/8943 [18:21<00:10, 16.41it/s] 98%|█████████▊| 8778/8943 [18:21<00:07, 21.93it/s] 98%|█████████▊| 8789/8943 [18:21<00:05, 28.65it/s] 98%|█████████▊| 8798/8943 [18:21<00:04, 35.94it/s] 98%|█████████▊| 8807/8943 [18:21<00:03, 42.19it/s] 99%|█████████▊| 8816/8943 [18:21<00:02, 49.62it/s] 99%|█████████▊| 8825/8943 [18:21<00:02, 52.91it/s] 99%|█████████▉| 8833/8943 [18:22<00:02, 47.57it/s] 99%|█████████▉| 8840/8943 [18:22<00:02, 42.23it/s] 99%|█████████▉| 8846/8943 [18:22<00:02, 39.22it/s] 99%|█████████▉| 8851/8943 [18:22<00:02, 35.73it/s] 99%|█████████▉| 8856/8943 [18:22<00:02, 35.45it/s] 99%|█████████▉| 8861/8943 [18:23<00:02, 37.23it/s] 99%|█████████▉| 8866/8943 [18:23<00:02, 37.09it/s] 99%|█████████▉| 8871/8943 [18:23<00:01, 38.07it/s] 99%|█████████▉| 8877/8943 [18:23<00:01, 42.17it/s] 99%|█████████▉| 8882/8943 [18:23<00:01, 43.34it/s] 99%|█████████▉| 8888/8943 [18:23<00:01, 45.69it/s] 99%|█████████▉| 8893/8943 [18:23<00:01, 46.79it/s]100%|█████████▉| 8899/8943 [18:23<00:00, 49.34it/s]100%|█████████▉| 8906/8943 [18:23<00:00, 52.64it/s]100%|█████████▉| 8913/8943 [18:24<00:00, 56.82it/s]100%|█████████▉| 8924/8943 [18:24<00:00, 65.48it/s]100%|█████████▉| 8933/8943 [18:24<00:00, 69.30it/s]100%|█████████▉| 8941/8943 [18:24<00:00, 68.77it/s]--------------------
Picklist: What is the total number of countries where Spanish is spoken by the largest percentage of people?, countrylanguage, Language, [Spanish]
Picklist: Count the number of countries for which Spanish is the predominantly spoken language., countrylanguage, Language, [Spanish]
Picklist: What are the codes of countries where Spanish is spoken by the largest percentage of people?, countrylanguage, Language, [Spanish]
Picklist: Return the codes of countries for which Spanish is the predominantly spoken language., countrylanguage, Language, [Spanish]
Picklist: What are the names of conductors whose nationalities are not "USA"?, conductor, Nationality, [USA]
Picklist: Return the names of conductors that do not have the nationality "USA"., conductor, Nationality, [USA]
Picklist: What are the maximum and minimum share of performances whose type is not "Live final"., performance, Type, [Live final]
Picklist: Return the maximum and minimum shares for performances that do not have the type "Live final"., performance, Type, [Live final]
Picklist: Find the number of orchestras whose record format is "CD" or "DVD"., orchestra, Major_Record_Format, [DVD]
Picklist: Find the number of orchestras whose record format is "CD" or "DVD"., orchestra, Major_Record_Format, [CD]
Picklist: Count the number of orchestras that have CD or DVD as their record format., orchestra, Major_Record_Format, [DVD]
Picklist: Count the number of orchestras that have CD or DVD as their record format., orchestra, Major_Record_Format, [CD]
Picklist: What grade is Kyle in?, Highschooler, name, [Kyle]
Picklist: Return the grade for the high schooler named Kyle., Highschooler, name, [Kyle]
Picklist: Show the ID of the high schooler named Kyle., Highschooler, name, [Kyle]
Picklist: What is Kyle's id?, Highschooler, name, [Kyle]
Picklist: Show the names of all of the high schooler Kyle's friends., Highschooler, name, [Kyle]
Picklist: Return the names of friends of the high school student Kyle., Highschooler, name, [Kyle]
Picklist: How many friends does the high school student Kyle have?, Highschooler, name, [Kyle]
Picklist: Count the number of friends Kyle has., Highschooler, name, [Kyle]
Picklist: How many likes does Kyle have?, Highschooler, name, [Kyle]
Picklist: Return the number of likes that the high schooler named Kyle has., Highschooler, name, [Kyle]
Picklist: Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone., Owners, state, [Indiana]
Picklist: Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone., Professionals, state, [Indiana]
--------------------
text:  Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.
sql:  SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
ground truth values:  [('Professionals.state', 'Indiana')]
matched values OrderedDict([(57, ('Owners.state', 'Indiana')), (128, ('Professionals.state', 'Indiana'))])
--------------------
Picklist: Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments., Owners, state, [Indiana]
Picklist: Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments., Professionals, state, [Indiana]
--------------------
text:  Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.
sql:  SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
ground truth values:  [('Professionals.state', 'Indiana')]
matched values OrderedDict([(57, ('Owners.state', 'Indiana')), (128, ('Professionals.state', 'Indiana'))])
--------------------
Picklist: Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name., Owners, state, [Virginia]
Picklist: Find the first names of owners living in Virginia and the names of dogs they own., Owners, state, [Virginia]
Picklist: List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin., Owners, state, [Wisconsin]
Picklist: List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin., Professionals, state, [Wisconsin]
Picklist: List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin., Professionals, state, [Hawaii]
--------------------
text:  List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.
sql:  SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'
ground truth values:  [('Professionals.state', 'Hawaii'), ('Professionals.state', 'Wisconsin')]
matched values OrderedDict([(57, ('Owners.state', 'Wisconsin')), (128, ('Professionals.state', 'Wisconsin')), (130, ('Professionals.state', 'Hawaii'))])
--------------------
Picklist: What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?, Owners, state, [Wisconsin]
Picklist: What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?, Professionals, state, [Wisconsin]
Picklist: What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?, Professionals, state, [Hawaii]
--------------------
text:  What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?
sql:  SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'
ground truth values:  [('Professionals.state', 'Hawaii'), ('Professionals.state', 'Wisconsin')]
matched values OrderedDict([(57, ('Owners.state', 'Wisconsin')), (128, ('Professionals.state', 'Wisconsin')), (130, ('Professionals.state', 'Hawaii'))])
--------------------
Picklist: List the name of singers whose citizenship is not "France"., singer, Citizenship, [France]
--------------------
text:  What are the names of the singers who are not French citizens?
sql:  SELECT Name FROM singer WHERE Citizenship != "France"
ground truth values:  [('singer.Citizenship', 'France')]
matched values OrderedDict()
--------------------
Picklist: What is the feature type name of feature AirCon?, Other_Available_Features, feature_name, [AirCon]
Picklist: What are the names of properties that are either houses or apartments with more than 1 room?, Ref_Property_Types, property_type_code, [Apartment]
Picklist: What are the names of properties that are either houses or apartments with more than 1 room?, Ref_Property_Types, property_type_code, [House]
Picklist: What are the names of properties that are either houses or apartments with more than 1 room?, Properties, property_type_code, [Apartment]
Picklist: What are the names of properties that are either houses or apartments with more than 1 room?, Properties, property_type_code, [House]
--------------------
text:  What are the names of properties that are either houses or apartments with more than 1 room?
sql:  SELECT property_name FROM Properties WHERE property_type_code  =  "House" UNION SELECT property_name FROM Properties WHERE property_type_code  =  "Apartment" AND room_count  >  1
ground truth values:  [('Properties.property_type_code', 'House'), ('Properties.property_type_code', 'Apartment')]
matched values 100%|██████████| 8943/8943 [18:24<00:00,  8.10it/s]
  0%|          | 0/750 [00:00<?, ?it/s]  1%|          | 4/750 [00:00<00:23, 31.32it/s]  1%|          | 8/750 [00:00<00:23, 31.78it/s]  2%|▏         | 12/750 [00:00<00:22, 32.13it/s]OrderedDict([(22, ('Ref_Property_Types.property_type_code', 'Apartment')), (24, ('Ref_Property_Types.property_type_code', 'House')), (56, ('Properties.property_type_code', 'Apartment')), (58, ('Properties.property_type_code', 'House'))])
--------------------
********** train Data Statistics ***********
OOV observed in 0/8943 examples
Denormalization skipped for 3/8943 examples
Schema truncated for 82/8943 examples
Token restored for 8943/8943 examples
+ text sizes
# text tokens (avg) = 14.124231242312423
# text tokens (min) = 3
# text tokens (max) = 45
+ input sizes
input size (avg) = 121.65123560326512
input size (min) = 31 
input size (max) = 512
+ program sizes
# program tokens (avg) = 18.903052666890304	# program whole field tokens = 18.903052666890304 (avg)	
# program tokens (min) = 3	# program whole field tokens = 3 (min)	
# program tokens (max) = 78	# program whole field tokens = 78 (max)	
max pointer span size = 10
---  value extraction performance ---
micro precision = 0.8231498464138518
micro recall = 0.8858138581385814
micro F1 = 0.8312919825834955
processing 750 examples from dev...
--------------------
text:  papers that are coauthored by Peter Mertens and Dina Barbian
sql:  SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Peter Mertens" AND t1.authorname  =  "Dina Barbian"
ground truth values:  [('author.authorName', 'Peter Mertens'), ('author.authorName', 'Dina Barbian')]
matched values OrderedDict()
--------------------
--------------------
text:  papers written by Peter Mertens and Dina Barbian
sql:  SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Peter Mertens" AND t1.authorname  =  "Dina Barbian"
ground truth values:  [('author.authorName', 'Peter Mertens'), ('author.authorName', 'Dina Barbian')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the papers that have Peter Mertens and Dina Barbian as co-authors
sql:  SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Peter Mertens" AND t1.authorname  =  "Dina Barbian"
ground truth values:  [('author.authorName', 'Peter Mertens'), ('author.authorName', 'Dina Barbian')]
matched values OrderedDict()
--------------------
--------------------
text:  What papers have Peter Mertens and Dina Barbian written ?
sql:  SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Peter Mertens" AND t1.authorname  =  "Dina Barbian"
ground truth values:  [('author.authorName', 'Peter Mertens'), ('author.authorName', 'Dina Barbian')]
matched values OrderedDict()
--------------------
--------------------
text:  what paper did Peter Mertens and Dina Barbian write together ?
sql:  SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Peter Mertens" AND t1.authorname  =  "Dina Barbian"
ground truth values:  [('author.authorName', 'Peter Mertens'), ('author.authorName', 'Dina Barbian')]
matched values OrderedDict()
--------------------
--------------------
text:  Has Peter Mertens and Dina Barbian written a paper together ?
sql:  SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Peter Mertens" AND t1.authorname  =  "Dina Barbian"
ground truth values:  [('author.authorName', 'Peter Mertens'), ('author.authorName', 'Dina Barbian')]
matched values OrderedDict()
--------------------
--------------------
text:  Papers by Peter Mertens and Dina Barbian
sql:  SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Peter Mertens" AND t1.authorname  =  "Dina Barbian"
ground truth values:  [('author.authorName', 'Peter Mertens'), ('author.authorName', 'Dina Barbian')]
matched values OrderedDict()
--------------------
--------------------
text:  papers by authors Peter Mertens and Dina Barbian
sql:  SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Peter Mertens" AND t1.authorname  =  "Dina Barbian"
ground truth values:  [('author.authorName', 'Peter Mertens'), ('author.authorName', 'Dina Barbian')]
matched values OrderedDict()
--------------------
--------------------
text:  What papers were written by authors Peter Mertens and Dina Barbian
sql:  SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Peter Mertens" AND t1.authorname  =  "Dina Barbian"
ground truth values:  [('author.authorName', 'Peter Mertens'), ('author.authorName', 'Dina Barbian')]
matched values OrderedDict()
--------------------
--------------------
text:  papers by Peter Mertens and Dina Barbian
sql:  SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Peter Mertens" AND t1.authorname  =  "Dina Barbian"
ground truth values:  [('author.authorName', 'Peter Mertens'), ('author.authorName', 'Dina Barbian')]
matched values OrderedDict()
--------------------
--------------------
text:  papers written by authors Peter Mertens and Dina Barbian
sql:  SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Peter Mertens" AND t1.authorname  =  "Dina Barbian"
ground truth values:  [('author.authorName', 'Peter Mertens'), ('author.authorName', 'Dina Barbian')]
matched values OrderedDict()
--------------------
--------------------
text:  When did Peter Mertens and Dina Barbian collaborate ?
sql:  SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Peter Mertens" AND t1.authorname  =  "Dina Barbian"
ground truth values:  [('author.authorName', 'Peter Mertens'), ('author.authorName', 'Dina Barbian')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the collaborations of Peter Mertens and Dina Barbian ?
sql:  SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Peter Mertens" AND t1.authorname  =  "Dina Barbian"
ground truth values:  [('author.authorName', 'Peter Mertens'), ('author.authorName', 'Dina Barbian')]
matched values OrderedDict()
--------------------
--------------------
text:  Have Peter Mertens and Dina Barbian written a paper together ?
sql:  SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Peter Mertens" AND t1.authorname  =  "Dina Barbian"
ground truth values:    2%|▏         | 16/750 [00:00<00:22, 32.30it/s]  3%|▎         | 20/750 [00:00<00:22, 32.36it/s]  3%|▎         | 24/750 [00:00<00:22, 32.40it/s]  4%|▎         | 28/750 [00:00<00:22, 32.24it/s][('author.authorName', 'Peter Mertens'), ('author.authorName', 'Dina Barbian')]
matched values OrderedDict()
--------------------
--------------------
text:  Peter Mertens and Dina Barbian as co-authors
sql:  SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Peter Mertens" AND t1.authorname  =  "Dina Barbian"
ground truth values:  [('author.authorName', 'Peter Mertens'), ('author.authorName', 'Dina Barbian')]
matched values OrderedDict()
--------------------
--------------------
text:  Does Peter Mertens ever collaborated with Dina Barbian ?
sql:  SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Peter Mertens" AND t1.authorname  =  "Dina Barbian"
ground truth values:  [('author.authorName', 'Peter Mertens'), ('author.authorName', 'Dina Barbian')]
matched values OrderedDict()
--------------------
--------------------
text:  Which papers have Peter Mertens and Dina Barbian as co-authors ?
sql:  SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Peter Mertens" AND t1.authorname  =  "Dina Barbian"
ground truth values:  [('author.authorName', 'Peter Mertens'), ('author.authorName', 'Dina Barbian')]
matched values OrderedDict()
--------------------
--------------------
text:  papers coauthored by Peter Mertens and Dina Barbian
sql:  SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Peter Mertens" AND t1.authorname  =  "Dina Barbian"
ground truth values:  [('author.authorName', 'Peter Mertens'), ('author.authorName', 'Dina Barbian')]
matched values OrderedDict()
--------------------
--------------------
text:  What papers have been written by Peter Mertens and Dina Barbian ?
sql:  SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Peter Mertens" AND t1.authorname  =  "Dina Barbian"
ground truth values:  [('author.authorName', 'Peter Mertens'), ('author.authorName', 'Dina Barbian')]
matched values OrderedDict()
--------------------
--------------------
text:  What papers have been written by both Peter Mertens and Dina Barbian ?
sql:  SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Peter Mertens" AND t1.authorname  =  "Dina Barbian"
ground truth values:  [('author.authorName', 'Peter Mertens'), ('author.authorName', 'Dina Barbian')]
matched values OrderedDict()
--------------------
--------------------
text:  What papers have been written by Peter Mertens and Dina Barbian .
sql:  SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Peter Mertens" AND t1.authorname  =  "Dina Barbian"
ground truth values:  [('author.authorName', 'Peter Mertens'), ('author.authorName', 'Dina Barbian')]
matched values OrderedDict()
--------------------
--------------------
text:  who has written the most syntactic parsing papers ?
sql:  SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  "syntactic parsing" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC
ground truth values:  [('keyphrase.keyphraseName', 'syntactic parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  who is the most published author in syntactic parsing ?
sql:  SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  "syntactic parsing" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC
ground truth values:  [('keyphrase.keyphraseName', 'syntactic parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  who has the most publications in syntactic parsing ?
sql:  SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  "syntactic parsing" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC
ground truth values:  [('keyphrase.keyphraseName', 'syntactic parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  who has written the most papers on syntactic parsing ?
sql:  SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  "syntactic parsing" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC
ground truth values:  [('keyphrase.keyphraseName', 'syntactic parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  List prominent scholars in syntactic parsing ?
sql:  SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  "syntactic parsing" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC
ground truth values:  [('keyphrase.keyphraseName', 'syntactic parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  who wrote the most papers on syntactic parsing ?
sql:  SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  "syntactic parsing" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC
ground truth values:  [('keyphrase.keyphraseName', 'syntactic parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  Who are the authors with the most published papers in syntactic parsing ?
sql:  SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  "syntactic parsing" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC
ground truth values:  [('keyphrase.keyphraseName', 'syntactic parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  top syntactic parsing author
sql:  SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  "syntactic parsing" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC
ground truth values:  [('keyphrase.keyphraseName', 'syntactic parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  top author in syntactic parsing
sql:    4%|▍         | 32/750 [00:00<00:22, 32.30it/s]  5%|▍         | 36/750 [00:01<00:20, 34.14it/s]  5%|▌         | 40/750 [00:01<00:19, 35.51it/s]  6%|▋         | 47/750 [00:01<00:16, 41.35it/s]SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  "syntactic parsing" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC
ground truth values:  [('keyphrase.keyphraseName', 'syntactic parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  who published the most in syntactic parsing ?
sql:  SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  "syntactic parsing" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC
ground truth values:  [('keyphrase.keyphraseName', 'syntactic parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  who published the most papers in syntactic parsing ?
sql:  SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  "syntactic parsing" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC
ground truth values:  [('keyphrase.keyphraseName', 'syntactic parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  How many citation noah a smith has ?
sql:  SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "noah a smith"
ground truth values:  [('author.authorName', 'noah a smith')]
matched values OrderedDict()
--------------------
--------------------
text:  noah a smith citation count
sql:  SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "noah a smith"
ground truth values:  [('author.authorName', 'noah a smith')]
matched values OrderedDict()
--------------------
--------------------
text:  how many citations does noah a smith have ?
sql:  SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "noah a smith"
ground truth values:  [('author.authorName', 'noah a smith')]
matched values OrderedDict()
--------------------
--------------------
text:  How many citations does noah a smith have ?
sql:  SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "noah a smith"
ground truth values:  [('author.authorName', 'noah a smith')]
matched values OrderedDict()
--------------------
--------------------
text:  number of citations of noah a smith
sql:  SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "noah a smith"
ground truth values:  [('author.authorName', 'noah a smith')]
matched values OrderedDict()
--------------------
--------------------
text:  How many citations does noah a smith have
sql:  SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "noah a smith"
ground truth values:  [('author.authorName', 'noah a smith')]
matched values OrderedDict()
--------------------
--------------------
text:  How many times was noah a smith cited ?
sql:  SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "noah a smith"
ground truth values:  [('author.authorName', 'noah a smith')]
matched values OrderedDict()
--------------------
--------------------
text:  How many citations does noah a smith has ?
sql:  SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "noah a smith"
ground truth values:  [('author.authorName', 'noah a smith')]
matched values OrderedDict()
--------------------
--------------------
text:  chi papers
sql:  SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  "chi"
ground truth values:  [('venue.venueName', 'chi')]
matched values OrderedDict()
--------------------
--------------------
text:  papers at chi
sql:  SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  "chi"
ground truth values:  [('venue.venueName', 'chi')]
matched values OrderedDict()
--------------------
--------------------
text:  papers in chi
sql:  SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  "chi"
ground truth values:  [('venue.venueName', 'chi')]
matched values OrderedDict()
--------------------
--------------------
text:  chi
sql:  SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  "chi"
ground truth values:  [('venue.venueName', 'chi')]
matched values OrderedDict()
--------------------
--------------------
text:  Papers about chi
sql:  SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  "chi"
ground truth values:  [('venue.venueName', 'chi')]
matched values OrderedDict()
--------------------
--------------------
text:  Show me chi papers .
sql:  SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  "chi"
ground truth values:  [('venue.venueName', 'chi')]
matched values OrderedDict()
--------------------
--------------------
text:  what papers did chi publish ?
sql:  SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  "chi"
ground truth values:  [('venue.venueName', 'chi')]
matched values OrderedDict()
--------------------
--------------------
text:  list papers published in chi
sql:  SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  "chi"
ground truth values:  [('venue.venueName', 'chi')]
matched values OrderedDict()
--------------------
--------------------
text:  Papers on chi
sql:  SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  "chi"
ground truth values:  [('venue.venueName', 'chi')]
matched values OrderedDict()
--------------------
--------------------
text:  Has mirella lapata written any papers in 2016 ?
sql:  SELECT DISTINCT COUNT ( t3.paperid )  ,  t2.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "mirella lapata" AND t3.year  =  2016 GROUP BY t2.authorid
ground truth values:  [('author.authorName', 'mirella lapata')]
matched values OrderedDict()
--------------------
--------------------
text:  What papers has sharon goldwater written ?
sql:  SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "sharon goldwater"
ground truth values:  [('author.authorName', 'sharon goldwater')]
matched values OrderedDict()
--------------------
  7%|▋         | 53/750 [00:01<00:15, 45.23it/s]  8%|▊         | 60/750 [00:01<00:13, 49.98it/s]  9%|▉         | 67/750 [00:01<00:12, 53.92it/s] 10%|▉         | 73/750 [00:01<00:13, 51.06it/s]--------------------
text:  What papers has written by sharon goldwater ?
sql:  SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "sharon goldwater"
ground truth values:  [('author.authorName', 'sharon goldwater')]
matched values OrderedDict()
--------------------
--------------------
text:  papers by sharon goldwater
sql:  SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "sharon goldwater"
ground truth values:  [('author.authorName', 'sharon goldwater')]
matched values OrderedDict()
--------------------
--------------------
text:  what did sharon goldwater write ?
sql:  SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "sharon goldwater"
ground truth values:  [('author.authorName', 'sharon goldwater')]
matched values OrderedDict()
--------------------
--------------------
text:  papers where sharon goldwater is an author
sql:  SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "sharon goldwater"
ground truth values:  [('author.authorName', 'sharon goldwater')]
matched values OrderedDict()
--------------------
--------------------
text:  Papers authored by sharon goldwater
sql:  SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "sharon goldwater"
ground truth values:  [('author.authorName', 'sharon goldwater')]
matched values OrderedDict()
--------------------
--------------------
text:  sharon goldwater papers
sql:  SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "sharon goldwater"
ground truth values:  [('author.authorName', 'sharon goldwater')]
matched values OrderedDict()
--------------------
--------------------
text:  Papers by sharon goldwater
sql:  SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "sharon goldwater"
ground truth values:  [('author.authorName', 'sharon goldwater')]
matched values OrderedDict()
--------------------
--------------------
text:  Papers written by sharon goldwater
sql:  SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "sharon goldwater"
ground truth values:  [('author.authorName', 'sharon goldwater')]
matched values OrderedDict()
--------------------
--------------------
text:  which papers has sharon goldwater written ?
sql:  SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "sharon goldwater"
ground truth values:  [('author.authorName', 'sharon goldwater')]
matched values OrderedDict()
--------------------
--------------------
text:  papers written by sharon goldwater
sql:  SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "sharon goldwater"
ground truth values:  [('author.authorName', 'sharon goldwater')]
matched values OrderedDict()
--------------------
--------------------
text:  What has sharon goldwater published ?
sql:  SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "sharon goldwater"
ground truth values:  [('author.authorName', 'sharon goldwater')]
matched values OrderedDict()
--------------------
--------------------
text:  Does sharon goldwater have any papers published ?
sql:  SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "sharon goldwater"
ground truth values:  [('author.authorName', 'sharon goldwater')]
matched values OrderedDict()
--------------------
--------------------
text:  sharon goldwater 's papers
sql:  SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "sharon goldwater"
ground truth values:  [('author.authorName', 'sharon goldwater')]
matched values OrderedDict()
--------------------
--------------------
text:  show me papers by sharon goldwater .
sql:  SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "sharon goldwater"
ground truth values:  [('author.authorName', 'sharon goldwater')]
matched values OrderedDict()
--------------------
--------------------
text:  What papers are authored by sharon goldwater ?
sql:  SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "sharon goldwater"
ground truth values:  [('author.authorName', 'sharon goldwater')]
matched values OrderedDict()
--------------------
--------------------
text:  papers by sharon goldwater ?
sql:  SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "sharon goldwater"
ground truth values:  [('author.authorName', 'sharon goldwater')]
matched values OrderedDict()
--------------------
--------------------
text:  What was oren etzioni 's latest paper ?
sql:  SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "oren etzioni" ORDER BY t3.year DESC
ground truth values:  [('author.authorName', 'oren etzioni')]
matched values OrderedDict()
--------------------
--------------------
text:  Latest paper by oren etzioni
sql:  SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "oren etzioni" ORDER BY t3.year DESC
ground truth values:  [('author.authorName', 'oren etzioni')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the latest paper by oren etzioni ?
sql:  SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "oren etzioni" ORDER BY t3.year DESC
ground truth values:  [('author.authorName', 'oren etzioni')]
matched values OrderedDict()
--------------------
--------------------
text:  What is oren etzioni 's latest paper ?
sql:  SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "oren etzioni" ORDER BY t3.year DESC
ground truth values:  [('author.authorName', 'oren etzioni')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the latest papers by oren etzioni ?
sql:  SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "oren etzioni" ORDER BY t3.year DESC
ground truth values:  [('author.authorName', 'oren etzioni')]
matched values OrderedDict()
--------------------
--------------------
text:  most recent papers by oren etzioni
sql:  SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "oren etzioni" ORDER BY t3.year DESC
ground truth values:  [('author.authorName', 'oren etzioni')]
matched values OrderedDict()
--------------------
--------------------
text:  are there any monte carlo simulation papers since 2011 ?
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "monte carlo simulation" AND t3.year  >  2011
ground truth values:  [('keyphrase.keyphraseName', 'monte carlo simulation')]
matched values OrderedDict()
--------------------
--------------------
text:  monte carlo simulation papers later than 2011
sql:   11%|█         | 79/750 [00:01<00:14, 47.39it/s] 11%|█         | 84/750 [00:02<00:15, 41.80it/s] 12%|█▏        | 89/750 [00:02<00:15, 42.31it/s]SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "monte carlo simulation" AND t3.year  >  2011
ground truth values:  [('keyphrase.keyphraseName', 'monte carlo simulation')]
matched values OrderedDict()
--------------------
--------------------
text:  monte carlo simulation later than 2011
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "monte carlo simulation" AND t3.year  >  2011
ground truth values:  [('keyphrase.keyphraseName', 'monte carlo simulation')]
matched values OrderedDict()
--------------------
--------------------
text:  monte carlo simulation papers published after 2011
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "monte carlo simulation" AND t3.year  >  2011
ground truth values:  [('keyphrase.keyphraseName', 'monte carlo simulation')]
matched values OrderedDict()
--------------------
--------------------
text:  monte carlo simulation papers since 2011
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "monte carlo simulation" AND t3.year  >  2011
ground truth values:  [('keyphrase.keyphraseName', 'monte carlo simulation')]
matched values OrderedDict()
--------------------
--------------------
text:  does ras bodik publish a lot ?
sql:  SELECT COUNT ( t3.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "ras bodik"
ground truth values:  [('author.authorName', 'ras bodik')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers did David M. Blei publish at AISTATS ?
sql:  SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "David M. Blei" AND t4.venuename  =  "AISTATS"
ground truth values:  [('author.authorName', 'David M. Blei'), ('venue.venueName', 'AISTATS')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers does David M. Blei have in AISTATS ?
sql:  SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "David M. Blei" AND t4.venuename  =  "AISTATS"
ground truth values:  [('author.authorName', 'David M. Blei'), ('venue.venueName', 'AISTATS')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers has David M. Blei published in AISTATS ?
sql:  SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "David M. Blei" AND t4.venuename  =  "AISTATS"
ground truth values:  [('author.authorName', 'David M. Blei'), ('venue.venueName', 'AISTATS')]
matched values OrderedDict()
--------------------
--------------------
text:  how many papers does David M. Blei have at AISTATS
sql:  SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "David M. Blei" AND t4.venuename  =  "AISTATS"
ground truth values:  [('author.authorName', 'David M. Blei'), ('venue.venueName', 'AISTATS')]
matched values OrderedDict()
--------------------
--------------------
text:  how many papers does David M. Blei have in AISTATS ?
sql:  SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "David M. Blei" AND t4.venuename  =  "AISTATS"
ground truth values:  [('author.authorName', 'David M. Blei'), ('venue.venueName', 'AISTATS')]
matched values OrderedDict()
--------------------
--------------------
text:  how many David M. Blei papers are in AISTATS ?
sql:  SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "David M. Blei" AND t4.venuename  =  "AISTATS"
ground truth values:  [('author.authorName', 'David M. Blei'), ('venue.venueName', 'AISTATS')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers David M. Blei has in AISTATS ?
sql:  SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "David M. Blei" AND t4.venuename  =  "AISTATS"
ground truth values:  [('author.authorName', 'David M. Blei'), ('venue.venueName', 'AISTATS')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers does David M. Blei have in AISTATS
sql:  SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "David M. Blei" AND t4.venuename  =  "AISTATS"
ground truth values:  [('author.authorName', 'David M. Blei'), ('venue.venueName', 'AISTATS')]
matched values OrderedDict()
--------------------
--------------------
text:  List all academic papers on machine networks for one shot learning
sql:  SELECT DISTINCT paperid FROM paper WHERE title  =  "machine networks for one shot learning"
ground truth values:  [('paper.title', 'machine networks for one shot learning')]
matched values OrderedDict()
--------------------
--------------------
text:  machine networks for one shot learning
sql:  SELECT DISTINCT paperid FROM paper WHERE title  =  "machine networks for one shot learning"
ground truth values:  [('paper.title', 'machine networks for one shot learning')]
matched values OrderedDict()
--------------------
--------------------
text:  which EMNLP 2010 papers have the most citations ?
sql:  SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  "EMNLP" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC
ground truth values:  [('venue.venueName', 'EMNLP')]
matched values OrderedDict()
--------------------
--------------------
text:  Which paper from EMNLP 2010 was cited most ?
sql:  SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  "EMNLP" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC
ground truth values:  [('venue.venueName', 'EMNLP')]
matched values OrderedDict()
--------------------
--------------------
text:  most cited EMNLP 2010 papers
sql:  SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  "EMNLP" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC
ground truth values:  [('venue.venueName', 'EMNLP')]
matched values OrderedDict()
--------------------
--------------------
text:  which EMNLP 2010 papers have been cited the most ?
sql:   13%|█▎        | 94/750 [00:02<00:17, 38.03it/s] 13%|█▎        | 99/750 [00:02<00:16, 38.81it/s] 14%|█▍        | 106/750 [00:02<00:14, 44.20it/s]SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  "EMNLP" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC
ground truth values:  [('venue.venueName', 'EMNLP')]
matched values OrderedDict()
--------------------
--------------------
text:  What papers were published at CVPR in 2016 about Class consistent multi-modal fusion with binary features applied to RGB-D Object Dataset ?
sql:  SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  "RGB-D Object Dataset" AND t3.title  =  "Class consistent multi-modal fusion with binary features" AND t3.year  =  2016 AND t4.venuename  =  "CVPR"
ground truth values:  [('dataset.datasetName', 'RGB-D Object Dataset'), ('paper.title', 'Class consistent multi-modal fusion with binary features'), ('venue.venueName', 'CVPR')]
matched values OrderedDict()
--------------------
--------------------
text:  What papers were published at CVPR '16 about Class consistent multi-modal fusion with binary features applied to RGB-D Object Dataset ?
sql:  SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  "RGB-D Object Dataset" AND t3.title  =  "Class consistent multi-modal fusion with binary features" AND t3.year  =  2016 AND t4.venuename  =  "CVPR"
ground truth values:  [('dataset.datasetName', 'RGB-D Object Dataset'), ('paper.title', 'Class consistent multi-modal fusion with binary features'), ('venue.venueName', 'CVPR')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers are in deep learning ?
sql:  SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "deep learning"
ground truth values:  [('keyphrase.keyphraseName', 'deep learning')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers are about deep learning ?
sql:  SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "deep learning"
ground truth values:  [('keyphrase.keyphraseName', 'deep learning')]
matched values OrderedDict()
--------------------
--------------------
text:  how many papers about deep learning ?
sql:  SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "deep learning"
ground truth values:  [('keyphrase.keyphraseName', 'deep learning')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers are related to deep learning ?
sql:  SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "deep learning"
ground truth values:  [('keyphrase.keyphraseName', 'deep learning')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers has Christopher D. Manning written ?
sql:  SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Christopher D. Manning"
ground truth values:  [('author.authorName', 'Christopher D. Manning')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers does Christopher D. Manning have ?
sql:  SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Christopher D. Manning"
ground truth values:  [('author.authorName', 'Christopher D. Manning')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers has Christopher D. Manning ?
sql:  SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Christopher D. Manning"
ground truth values:  [('author.authorName', 'Christopher D. Manning')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers has Christopher D. Manning published ?
sql:  SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Christopher D. Manning"
ground truth values:  [('author.authorName', 'Christopher D. Manning')]
matched values OrderedDict()
--------------------
--------------------
text:  how many papers has Christopher D. Manning written ?
sql:  SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Christopher D. Manning"
ground truth values:  [('author.authorName', 'Christopher D. Manning')]
matched values OrderedDict()
--------------------
--------------------
text:  Has Christopher D. Manning published any papers ?
sql:  SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Christopher D. Manning"
ground truth values:  [('author.authorName', 'Christopher D. Manning')]
matched values OrderedDict()
--------------------
--------------------
text:  how many papers has Christopher D. Manning published ?
sql:  SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Christopher D. Manning"
ground truth values:  [('author.authorName', 'Christopher D. Manning')]
matched values OrderedDict()
--------------------
--------------------
text:  how many papers does Christopher D. Manning have ?
sql:  SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Christopher D. Manning"
ground truth values:  [('author.authorName', 'Christopher D. Manning')]
matched values OrderedDict()
--------------------
--------------------
text:  How many paper does Christopher D. Manning have ?
sql:  SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Christopher D. Manning"
ground truth values:  [('author.authorName', 'Christopher D. Manning')]
matched values OrderedDict()
--------------------
--------------------
text:  How many publications does Christopher D. Manning have ?
sql:  SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Christopher D. Manning"
ground truth values:  [('author.authorName', 'Christopher D. Manning')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers does Christopher D. Manning have
sql:  SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Christopher D. Manning"
ground truth values:  [('author.authorName', 'Christopher D. Manning')]
matched values OrderedDict()
--------------------
--------------------
text:  number of papers written by Christopher D. Manning
sql:  SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Christopher D. Manning"
ground truth values:  [('author.authorName', 'Christopher D. Manning')]
matched values OrderedDict()
--------------------
--------------------
text:  what kind of papers does Luke Zettlemoyer publish
sql:   15%|█▍        | 112/750 [00:02<00:13, 47.13it/s] 16%|█▌        | 118/750 [00:02<00:15, 41.52it/s] 16%|█▋        | 123/750 [00:02<00:16, 38.19it/s] 17%|█▋        | 128/750 [00:03<00:15, 40.00it/s]SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  "Luke Zettlemoyer"
ground truth values:  [('author.authorName', 'Luke Zettlemoyer')]
matched values OrderedDict()
--------------------
--------------------
text:  Keyphrases used by Luke Zettlemoyer
sql:  SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  "Luke Zettlemoyer"
ground truth values:  [('author.authorName', 'Luke Zettlemoyer')]
matched values OrderedDict()
--------------------
--------------------
text:  What keywords are in papers by Luke Zettlemoyer ?
sql:  SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  "Luke Zettlemoyer"
ground truth values:  [('author.authorName', 'Luke Zettlemoyer')]
matched values OrderedDict()
--------------------
--------------------
text:  keywords used by Luke Zettlemoyer
sql:  SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  "Luke Zettlemoyer"
ground truth values:  [('author.authorName', 'Luke Zettlemoyer')]
matched values OrderedDict()
--------------------
--------------------
text:  what keywords are used by Luke Zettlemoyer
sql:  SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  "Luke Zettlemoyer"
ground truth values:  [('author.authorName', 'Luke Zettlemoyer')]
matched values OrderedDict()
--------------------
--------------------
text:  keyphrases used by Luke Zettlemoyer
sql:  SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  "Luke Zettlemoyer"
ground truth values:  [('author.authorName', 'Luke Zettlemoyer')]
matched values OrderedDict()
--------------------
--------------------
text:  keyphrases by Luke Zettlemoyer
sql:  SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  "Luke Zettlemoyer"
ground truth values:  [('author.authorName', 'Luke Zettlemoyer')]
matched values OrderedDict()
--------------------
--------------------
text:  give me the keywords used by Luke Zettlemoyer
sql:  SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  "Luke Zettlemoyer"
ground truth values:  [('author.authorName', 'Luke Zettlemoyer')]
matched values OrderedDict()
--------------------
--------------------
text:  What topic does Luke Zettlemoyer write about ?
sql:  SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  "Luke Zettlemoyer"
ground truth values:  [('author.authorName', 'Luke Zettlemoyer')]
matched values OrderedDict()
--------------------
--------------------
text:  what topics does Luke Zettlemoyer publish in
sql:  SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  "Luke Zettlemoyer"
ground truth values:  [('author.authorName', 'Luke Zettlemoyer')]
matched values OrderedDict()
--------------------
--------------------
text:  keywords in the papers written by Luke Zettlemoyer
sql:  SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  "Luke Zettlemoyer"
ground truth values:  [('author.authorName', 'Luke Zettlemoyer')]
matched values OrderedDict()
--------------------
--------------------
text:  keyphrases used by Luke Zettlemoyer .
sql:  SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  "Luke Zettlemoyer"
ground truth values:  [('author.authorName', 'Luke Zettlemoyer')]
matched values OrderedDict()
--------------------
--------------------
text:  topics used by Luke Zettlemoyer
sql:  SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  "Luke Zettlemoyer"
ground truth values:  [('author.authorName', 'Luke Zettlemoyer')]
matched values OrderedDict()
--------------------
--------------------
text:  What conference does Daniella Coelho publish in ?
sql:  SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Daniella Coelho"
ground truth values:  [('author.authorName', 'Daniella Coelho')]
matched values OrderedDict()
--------------------
--------------------
text:  conferences that Daniella Coelho has published in
sql:  SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Daniella Coelho"
ground truth values:  [('author.authorName', 'Daniella Coelho')]
matched values OrderedDict()
--------------------
--------------------
text:  In which conferences does Daniella Coelho typically publish ?
sql:  SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Daniella Coelho"
ground truth values:  [('author.authorName', 'Daniella Coelho')]
matched values OrderedDict()
--------------------
--------------------
text:  in what conferences does Daniella Coelho publish ?
sql:  SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Daniella Coelho"
ground truth values:  [('author.authorName', 'Daniella Coelho')]
matched values OrderedDict()
--------------------
--------------------
text:  What conferences does Daniella Coelho publish in ?
sql:  SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Daniella Coelho"
ground truth values:  [('author.authorName', 'Daniella Coelho')]
matched values  18%|█▊        | 134/750 [00:03<00:14, 41.84it/s] 19%|█▊        | 139/750 [00:03<00:15, 39.81it/s] 19%|█▉        | 144/750 [00:03<00:16, 36.22it/s]OrderedDict()
--------------------
--------------------
text:  At which conferences does Daniella Coelho publish ?
sql:  SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Daniella Coelho"
ground truth values:  [('author.authorName', 'Daniella Coelho')]
matched values OrderedDict()
--------------------
--------------------
text:  What conferences does Daniella Coelho submit to ?
sql:  SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Daniella Coelho"
ground truth values:  [('author.authorName', 'Daniella Coelho')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers by Ed Desmond contain the keyphrases Semantic Parsing ?
sql:  SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  "Ed Desmond" AND t4.keyphrasename  =  "Semantic Parsing"
ground truth values:  [('author.authorName', 'Ed Desmond'), ('keyphrase.keyphraseName', 'Semantic Parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers does Ed Desmond have in Semantic Parsing area ?
sql:  SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  "Ed Desmond" AND t4.keyphrasename  =  "Semantic Parsing"
ground truth values:  [('author.authorName', 'Ed Desmond'), ('keyphrase.keyphraseName', 'Semantic Parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  How many Semantic Parsing papers has Ed Desmond written ?
sql:  SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  "Ed Desmond" AND t4.keyphrasename  =  "Semantic Parsing"
ground truth values:  [('author.authorName', 'Ed Desmond'), ('keyphrase.keyphraseName', 'Semantic Parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  How many paper has Ed Desmond written about Semantic Parsing ?
sql:  SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  "Ed Desmond" AND t4.keyphrasename  =  "Semantic Parsing"
ground truth values:  [('author.authorName', 'Ed Desmond'), ('keyphrase.keyphraseName', 'Semantic Parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  What conferences did li dong submit to in 2016 ?
sql:  SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "li dong" AND t3.year  =  2016
ground truth values:  [('author.authorName', 'li dong')]
matched values OrderedDict()
--------------------
--------------------
text:  Where did li dong publish in 2016
sql:  SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "li dong" AND t3.year  =  2016
ground truth values:  [('author.authorName', 'li dong')]
matched values OrderedDict()
--------------------
--------------------
text:  What conferences did li dong publish in in 2016 ?
sql:  SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "li dong" AND t3.year  =  2016
ground truth values:  [('author.authorName', 'li dong')]
matched values OrderedDict()
--------------------
--------------------
text:  Where did li dong publish in 2016 ?
sql:  SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "li dong" AND t3.year  =  2016
ground truth values:  [('author.authorName', 'li dong')]
matched values OrderedDict()
--------------------
--------------------
text:  acl papers in 2012 on Parsing
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  "Parsing" AND t3.year  =  2012 AND t4.venuename  =  "acl"
ground truth values:  [('keyphrase.keyphraseName', 'Parsing'), ('venue.venueName', 'acl')]
matched values OrderedDict()
--------------------
--------------------
text:  What papers were published in acl in 2012 about Parsing ?
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  "Parsing" AND t3.year  =  2012 AND t4.venuename  =  "acl"
ground truth values:  [('keyphrase.keyphraseName', 'Parsing'), ('venue.venueName', 'acl')]
matched values OrderedDict()
--------------------
--------------------
text:  papers on Parsing appeared at acl last year
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  "Parsing" AND t3.year  =  2012 AND t4.venuename  =  "acl"
ground truth values:  [('keyphrase.keyphraseName', 'Parsing'), ('venue.venueName', 'acl')]
matched values OrderedDict()
--------------------
--------------------
text:  Parsing papers from acl 2012
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  "Parsing" AND t3.year  =  2012 AND t4.venuename  =  "acl"
ground truth values:  [('keyphrase.keyphraseName', 'Parsing'), ('venue.venueName', 'acl')]
matched values OrderedDict()
--------------------
--------------------
text:  papers about Parsing in acl 2012
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  "Parsing" AND t3.year  =  2012 AND t4.venuename  =  "acl"
ground truth values:  [('keyphrase.keyphraseName', 'Parsing'), ('venue.venueName', 'acl')]
matched values OrderedDict()
--------------------
--------------------
text:  acl papers in 2012 in Parsing
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  "Parsing" AND t3.year  =  2012 AND t4.venuename  =  "acl"
ground truth values:  [('keyphrase.keyphraseName', 'Parsing'), ('venue.venueName', 'acl')]
matched values OrderedDict()
--------------------
--------------------
text:  acl papers in 2012 about Parsing
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  "Parsing" AND t3.year  =  2012 AND t4.venuename  =  "acl"
ground truth values:  [('keyphrase.keyphraseName', 'Parsing'), ('venue.venueName', 'acl')]
matched values OrderedDict()
--------------------
--------------------
text:  What papers were published at acl in 2012 were about Parsing ?
sql:   20%|█▉        | 148/750 [00:03<00:18, 33.36it/s] 20%|██        | 152/750 [00:03<00:18, 31.57it/s] 21%|██        | 157/750 [00:03<00:17, 34.18it/s] 22%|██▏       | 162/750 [00:04<00:15, 37.45it/s]SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  "Parsing" AND t3.year  =  2012 AND t4.venuename  =  "acl"
ground truth values:  [('keyphrase.keyphraseName', 'Parsing'), ('venue.venueName', 'acl')]
matched values OrderedDict()
--------------------
--------------------
text:  papers on Parsing appeared at acl in 2012
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  "Parsing" AND t3.year  =  2012 AND t4.venuename  =  "acl"
ground truth values:  [('keyphrase.keyphraseName', 'Parsing'), ('venue.venueName', 'acl')]
matched values OrderedDict()
--------------------
--------------------
text:  how many Parsing papers did acl 2012 have ?
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  "Parsing" AND t3.year  =  2012 AND t4.venuename  =  "acl"
ground truth values:  [('keyphrase.keyphraseName', 'Parsing'), ('venue.venueName', 'acl')]
matched values OrderedDict()
--------------------
--------------------
text:  who published Parsing papers at acl 2012
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  "Parsing" AND t3.year  =  2012 AND t4.venuename  =  "acl"
ground truth values:  [('keyphrase.keyphraseName', 'Parsing'), ('venue.venueName', 'acl')]
matched values OrderedDict()
--------------------
--------------------
text:  which papers in acl 2012 had Parsing in them ?
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  "Parsing" AND t3.year  =  2012 AND t4.venuename  =  "acl"
ground truth values:  [('keyphrase.keyphraseName', 'Parsing'), ('venue.venueName', 'acl')]
matched values OrderedDict()
--------------------
--------------------
text:  what were some Parsing based papers in acl 2012 ?
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  "Parsing" AND t3.year  =  2012 AND t4.venuename  =  "acl"
ground truth values:  [('keyphrase.keyphraseName', 'Parsing'), ('venue.venueName', 'acl')]
matched values OrderedDict()
--------------------
--------------------
text:  List the popular publications on dependent types
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "dependent types"
ground truth values:  [('keyphrase.keyphraseName', 'dependent types')]
matched values OrderedDict()
--------------------
--------------------
text:  Which paper should I read about dependent types ?
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "dependent types"
ground truth values:  [('keyphrase.keyphraseName', 'dependent types')]
matched values OrderedDict()
--------------------
--------------------
text:  top dependent types papers
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "dependent types"
ground truth values:  [('keyphrase.keyphraseName', 'dependent types')]
matched values OrderedDict()
--------------------
--------------------
text:  List papers that has a keyword Question Answering
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Question Answering"
ground truth values:  [('keyphrase.keyphraseName', 'Question Answering')]
matched values OrderedDict()
--------------------
--------------------
text:  Question Answering research papers
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Question Answering"
ground truth values:  [('keyphrase.keyphraseName', 'Question Answering')]
matched values OrderedDict()
--------------------
--------------------
text:  papers on Question Answering
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Question Answering"
ground truth values:  [('keyphrase.keyphraseName', 'Question Answering')]
matched values OrderedDict()
--------------------
--------------------
text:  papers related to Question Answering
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Question Answering"
ground truth values:  [('keyphrase.keyphraseName', 'Question Answering')]
matched values OrderedDict()
--------------------
--------------------
text:  papers about Question Answering
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Question Answering"
ground truth values:  [('keyphrase.keyphraseName', 'Question Answering')]
matched values OrderedDict()
--------------------
--------------------
text:  Papers about Question Answering
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Question Answering"
ground truth values:  [('keyphrase.keyphraseName', 'Question Answering')]
matched values OrderedDict()
--------------------
--------------------
text:  papers published in the area of Question Answering
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Question Answering"
ground truth values:  [('keyphrase.keyphraseName', 'Question Answering')]
matched values OrderedDict()
--------------------
--------------------
text:  Question Answering experiments
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Question Answering"
ground truth values:  [('keyphrase.keyphraseName', 'Question Answering')]
matched values OrderedDict()
--------------------
--------------------
text:  Show me the papers on Question Answering
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Question Answering"
ground truth values:  [('keyphrase.keyphraseName', 'Question Answering')]
matched values OrderedDict()
--------------------
--------------------
text:  papers that used Question Answering
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Question Answering"
ground truth values:  [('keyphrase.keyphraseName', 'Question Answering')]
matched values OrderedDict()
--------------------
--------------------
 22%|██▏       | 167/750 [00:04<00:14, 40.22it/s] 23%|██▎       | 172/750 [00:04<00:13, 42.51it/s] 24%|██▎       | 177/750 [00:04<00:12, 44.20it/s] 24%|██▍       | 182/750 [00:04<00:13, 41.27it/s]text:  papers that mention Question Answering
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Question Answering"
ground truth values:  [('keyphrase.keyphraseName', 'Question Answering')]
matched values OrderedDict()
--------------------
--------------------
text:  Question Answering papers
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Question Answering"
ground truth values:  [('keyphrase.keyphraseName', 'Question Answering')]
matched values OrderedDict()
--------------------
--------------------
text:  Show me Question Answering papers .
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Question Answering"
ground truth values:  [('keyphrase.keyphraseName', 'Question Answering')]
matched values OrderedDict()
--------------------
--------------------
text:  Question Answering publications
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Question Answering"
ground truth values:  [('keyphrase.keyphraseName', 'Question Answering')]
matched values OrderedDict()
--------------------
--------------------
text:  Fetch me some papers on Question Answering
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Question Answering"
ground truth values:  [('keyphrase.keyphraseName', 'Question Answering')]
matched values OrderedDict()
--------------------
--------------------
text:  papers on Question Answering experiments
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Question Answering"
ground truth values:  [('keyphrase.keyphraseName', 'Question Answering')]
matched values OrderedDict()
--------------------
--------------------
text:  What papers talk about Question Answering ?
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Question Answering"
ground truth values:  [('keyphrase.keyphraseName', 'Question Answering')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the paper about Question Answering ?
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Question Answering"
ground truth values:  [('keyphrase.keyphraseName', 'Question Answering')]
matched values OrderedDict()
--------------------
--------------------
text:  Which papers are about about Question Answering ?
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Question Answering"
ground truth values:  [('keyphrase.keyphraseName', 'Question Answering')]
matched values OrderedDict()
--------------------
--------------------
text:  list papers that used Question Answering
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Question Answering"
ground truth values:  [('keyphrase.keyphraseName', 'Question Answering')]
matched values OrderedDict()
--------------------
--------------------
text:  papers for Question Answering
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Question Answering"
ground truth values:  [('keyphrase.keyphraseName', 'Question Answering')]
matched values OrderedDict()
--------------------
--------------------
text:  List papers that has keyword Question Answering
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Question Answering"
ground truth values:  [('keyphrase.keyphraseName', 'Question Answering')]
matched values OrderedDict()
--------------------
--------------------
text:  papers with Question Answering in keyphrases
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Question Answering"
ground truth values:  [('keyphrase.keyphraseName', 'Question Answering')]
matched values OrderedDict()
--------------------
--------------------
text:  keyphrases used by Luke S Zettlemoyer for each year
sql:  SELECT DISTINCT t2.keyphraseid  ,  t3.year FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "Luke S Zettlemoyer" ORDER BY t3.year  ,  t2.keyphraseid
ground truth values:  [('author.authorName', 'Luke S Zettlemoyer')]
matched values OrderedDict()
--------------------
--------------------
text:  recent research interests of sanjeev arora
sql:  SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  "sanjeev arora" ORDER BY t3.year DESC
ground truth values:  [('author.authorName', 'sanjeev arora')]
matched values OrderedDict()
--------------------
--------------------
text:  recent papers by sanjeev arora
sql:  SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  "sanjeev arora" ORDER BY t3.year DESC
ground truth values:  [('author.authorName', 'sanjeev arora')]
matched values OrderedDict()
--------------------
--------------------
text:  recent papers written by sanjeev arora
sql:  SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  "sanjeev arora" ORDER BY t3.year DESC
ground truth values:  [('author.authorName', 'sanjeev arora')]
matched values OrderedDict()
--------------------
--------------------
text:  list papers published by balakrishnan prabhakaran
sql:  SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "balakrishnan prabhakaran"
ground truth values:  [('author.authorName', 'balakrishnan prabhakaran')]
matched values OrderedDict()
--------------------
--------------------
text:  citation count of zachary tatlock 's papers
sql:  SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "zachary tatlock"
ground truth values:  [('author.authorName', 'zachary tatlock')]
matched values OrderedDict()
--------------------
--------------------
text:  subhasis chaudhuri
sql:   25%|██▍       | 187/750 [00:04<00:13, 41.21it/s] 26%|██▌       | 192/750 [00:04<00:14, 38.70it/s] 26%|██▌       | 196/750 [00:04<00:16, 34.04it/s] 27%|██▋       | 200/750 [00:05<00:17, 31.47it/s]SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "subhasis chaudhuri"
ground truth values:  [('author.authorName', 'subhasis chaudhuri')]
matched values OrderedDict()
--------------------
--------------------
text:  list papers by subhasis chaudhuri
sql:  SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "subhasis chaudhuri"
ground truth values:  [('author.authorName', 'subhasis chaudhuri')]
matched values OrderedDict()
--------------------
--------------------
text:  List of papers by subhasis chaudhuri
sql:  SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "subhasis chaudhuri"
ground truth values:  [('author.authorName', 'subhasis chaudhuri')]
matched values OrderedDict()
--------------------
--------------------
text:  conference papers of subhasis chaudhuri
sql:  SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "subhasis chaudhuri"
ground truth values:  [('author.authorName', 'subhasis chaudhuri')]
matched values OrderedDict()
--------------------
--------------------
text:  how many parsing papers in ACL 2014
sql:  SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  "parsing" AND t3.year  =  2014 AND t4.venuename  =  "ACL"
ground truth values:  [('keyphrase.keyphraseName', 'parsing'), ('venue.venueName', 'ACL')]
matched values OrderedDict()
--------------------
--------------------
text:  how many parsing papers appeared in the proceeeding of ACL 2014 ?
sql:  SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  "parsing" AND t3.year  =  2014 AND t4.venuename  =  "ACL"
ground truth values:  [('keyphrase.keyphraseName', 'parsing'), ('venue.venueName', 'ACL')]
matched values OrderedDict()
--------------------
--------------------
text:  how many parsing papers were published at ACL 2014 ?
sql:  SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  "parsing" AND t3.year  =  2014 AND t4.venuename  =  "ACL"
ground truth values:  [('keyphrase.keyphraseName', 'parsing'), ('venue.venueName', 'ACL')]
matched values OrderedDict()
--------------------
--------------------
text:  brian curless convolution paper
sql:  SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "brian curless" AND t5.keyphrasename  =  "convolution"
ground truth values:  [('author.authorName', 'brian curless'), ('keyphrase.keyphraseName', 'convolution')]
matched values OrderedDict()
--------------------
--------------------
text:  convolution by brian curless
sql:  SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "brian curless" AND t5.keyphrasename  =  "convolution"
ground truth values:  [('author.authorName', 'brian curless'), ('keyphrase.keyphraseName', 'convolution')]
matched values OrderedDict()
--------------------
--------------------
text:  papers by brian curless about convolution
sql:  SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "brian curless" AND t5.keyphrasename  =  "convolution"
ground truth values:  [('author.authorName', 'brian curless'), ('keyphrase.keyphraseName', 'convolution')]
matched values OrderedDict()
--------------------
--------------------
text:  brian curless 's paper about convolution
sql:  SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "brian curless" AND t5.keyphrasename  =  "convolution"
ground truth values:  [('author.authorName', 'brian curless'), ('keyphrase.keyphraseName', 'convolution')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the papers of brian curless in convolution ?
sql:  SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "brian curless" AND t5.keyphrasename  =  "convolution"
ground truth values:  [('author.authorName', 'brian curless'), ('keyphrase.keyphraseName', 'convolution')]
matched values OrderedDict()
--------------------
--------------------
text:  papers brian curless wrote about convolution
sql:  SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "brian curless" AND t5.keyphrasename  =  "convolution"
ground truth values:  [('author.authorName', 'brian curless'), ('keyphrase.keyphraseName', 'convolution')]
matched values OrderedDict()
--------------------
--------------------
text:  brian curless 's papers on convolution
sql:  SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "brian curless" AND t5.keyphrasename  =  "convolution"
ground truth values:  [('author.authorName', 'brian curless'), ('keyphrase.keyphraseName', 'convolution')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the paper about convolution from brian curless ?
sql:  SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "brian curless" AND t5.keyphrasename  =  "convolution"
ground truth values:  [('author.authorName', 'brian curless'), ('keyphrase.keyphraseName', 'convolution')]
matched values OrderedDict()
--------------------
--------------------
text:  papers by brian curless in convolution topic
sql:  SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "brian curless" AND t5.keyphrasename  =  "convolution"
ground truth values:  [('author.authorName', 'brian curless'), ('keyphrase.keyphraseName', 'convolution')]
 27%|██▋       | 204/750 [00:05<00:18, 29.85it/s] 28%|██▊       | 208/750 [00:05<00:18, 29.58it/s] 28%|██▊       | 212/750 [00:05<00:16, 31.95it/s] 29%|██▉       | 216/750 [00:05<00:15, 33.92it/s]matched values OrderedDict()
--------------------
--------------------
text:  I want the papers on keyphrase0 by brian curless
sql:  SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "brian curless" AND t5.keyphrasename  =  "convolution"
ground truth values:  [('author.authorName', 'brian curless'), ('keyphrase.keyphraseName', 'convolution')]
matched values OrderedDict()
--------------------
--------------------
text:  convolution papers by brian curless
sql:  SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "brian curless" AND t5.keyphrasename  =  "convolution"
ground truth values:  [('author.authorName', 'brian curless'), ('keyphrase.keyphraseName', 'convolution')]
matched values OrderedDict()
--------------------
--------------------
text:  What papers has brian curless written on convolution ?
sql:  SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "brian curless" AND t5.keyphrasename  =  "convolution"
ground truth values:  [('author.authorName', 'brian curless'), ('keyphrase.keyphraseName', 'convolution')]
matched values OrderedDict()
--------------------
--------------------
text:  What papers has brian curless written about convolution ?
sql:  SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "brian curless" AND t5.keyphrasename  =  "convolution"
ground truth values:  [('author.authorName', 'brian curless'), ('keyphrase.keyphraseName', 'convolution')]
matched values OrderedDict()
--------------------
--------------------
text:  convolution paper by brian curless
sql:  SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "brian curless" AND t5.keyphrasename  =  "convolution"
ground truth values:  [('author.authorName', 'brian curless'), ('keyphrase.keyphraseName', 'convolution')]
matched values OrderedDict()
--------------------
--------------------
text:  Does brian curless do convolution ?
sql:  SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "brian curless" AND t5.keyphrasename  =  "convolution"
ground truth values:  [('author.authorName', 'brian curless'), ('keyphrase.keyphraseName', 'convolution')]
matched values OrderedDict()
--------------------
--------------------
text:  What papers has Liwen Xiong written in 2015
sql:  SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Liwen Xiong" AND t3.year  =  2015
ground truth values:  [('author.authorName', 'Liwen Xiong')]
matched values OrderedDict()
--------------------
--------------------
text:  papers by Liwen Xiong in 2015
sql:  SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Liwen Xiong" AND t3.year  =  2015
ground truth values:  [('author.authorName', 'Liwen Xiong')]
matched values OrderedDict()
--------------------
--------------------
text:  What did Liwen Xiong published in 2015 ?
sql:  SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Liwen Xiong" AND t3.year  =  2015
ground truth values:  [('author.authorName', 'Liwen Xiong')]
matched values OrderedDict()
--------------------
--------------------
text:  Papers written by Liwen Xiong in 2015
sql:  SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Liwen Xiong" AND t3.year  =  2015
ground truth values:  [('author.authorName', 'Liwen Xiong')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the papers of Liwen Xiong in 2015
sql:  SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Liwen Xiong" AND t3.year  =  2015
ground truth values:  [('author.authorName', 'Liwen Xiong')]
matched values OrderedDict()
--------------------
--------------------
text:  papers by Liwen Xiong from 2015
sql:  SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Liwen Xiong" AND t3.year  =  2015
ground truth values:  [('author.authorName', 'Liwen Xiong')]
matched values OrderedDict()
--------------------
--------------------
text:  Papers published in 2015 by Liwen Xiong
sql:  SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Liwen Xiong" AND t3.year  =  2015
ground truth values:  [('author.authorName', 'Liwen Xiong')]
matched values OrderedDict()
--------------------
--------------------
text:  what has Liwen Xiong done in the past year
sql:  SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Liwen Xiong" AND t3.year  =  2015
ground truth values:  [('author.authorName', 'Liwen Xiong')]
matched values OrderedDict()
--------------------
--------------------
text:  What papers did Liwen Xiong publish last year ?
sql:  SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Liwen Xiong" AND t3.year  =  2015
ground truth values:  [('author.authorName', 'Liwen Xiong')]
matched values OrderedDict()
--------------------
--------------------
text:  papers published in 2015 by Liwen Xiong
sql:  SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Liwen Xiong" AND t3.year  =  2015
ground truth values:  [('author.authorName', 'Liwen Xiong')]
matched values OrderedDict()
--------------------
--------------------
text:  Liwen Xiong 's papers in 2015 ?
sql:  SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Liwen Xiong" AND t3.year  =  2015
ground truth values:  [('author.authorName', 'Liwen Xiong')]
matched values OrderedDict()
--------------------
--------------------
text:  Liwen Xiong 's papers in 2015
sql:  SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Liwen Xiong" AND t3.year  =  2015
ground truth values:  [('author.authorName', 'Liwen Xiong')]
matched values OrderedDict()
--------------------
--------------------
text:   29%|██▉       | 220/750 [00:05<00:14, 35.43it/s] 30%|██▉       | 224/750 [00:05<00:14, 36.04it/s] 30%|███       | 228/750 [00:05<00:15, 34.75it/s] 31%|███       | 232/750 [00:06<00:15, 34.14it/s] 31%|███▏      | 236/750 [00:06<00:15, 33.65it/s]Liwen Xiong publication 2015
sql:  SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Liwen Xiong" AND t3.year  =  2015
ground truth values:  [('author.authorName', 'Liwen Xiong')]
matched values OrderedDict()
--------------------
--------------------
text:  Papers authored by Liwen Xiong in 2015
sql:  SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Liwen Xiong" AND t3.year  =  2015
ground truth values:  [('author.authorName', 'Liwen Xiong')]
matched values OrderedDict()
--------------------
--------------------
text:  Papers from Liwen Xiong in 2015
sql:  SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Liwen Xiong" AND t3.year  =  2015
ground truth values:  [('author.authorName', 'Liwen Xiong')]
matched values OrderedDict()
--------------------
--------------------
text:  what papers are published by Liwen Xiong in 2015
sql:  SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Liwen Xiong" AND t3.year  =  2015
ground truth values:  [('author.authorName', 'Liwen Xiong')]
matched values OrderedDict()
--------------------
--------------------
text:  What TAIL paper published in NIPS ?
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  "TAIL" AND t4.venuename  =  "NIPS"
ground truth values:  [('keyphrase.keyphraseName', 'TAIL'), ('venue.venueName', 'NIPS')]
matched values OrderedDict()
--------------------
--------------------
text:  List the papers on TAIL that were published in NIPS
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  "TAIL" AND t4.venuename  =  "NIPS"
ground truth values:  [('keyphrase.keyphraseName', 'TAIL'), ('venue.venueName', 'NIPS')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the papers in NIPS about TAIL ?
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  "TAIL" AND t4.venuename  =  "NIPS"
ground truth values:  [('keyphrase.keyphraseName', 'TAIL'), ('venue.venueName', 'NIPS')]
matched values OrderedDict()
--------------------
--------------------
text:  Papers about TAIL in NIPS
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  "TAIL" AND t4.venuename  =  "NIPS"
ground truth values:  [('keyphrase.keyphraseName', 'TAIL'), ('venue.venueName', 'NIPS')]
matched values OrderedDict()
--------------------
--------------------
text:  papers at NIPS related to TAIL
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  "TAIL" AND t4.venuename  =  "NIPS"
ground truth values:  [('keyphrase.keyphraseName', 'TAIL'), ('venue.venueName', 'NIPS')]
matched values OrderedDict()
--------------------
--------------------
text:  papers about TAIL published at NIPS
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  "TAIL" AND t4.venuename  =  "NIPS"
ground truth values:  [('keyphrase.keyphraseName', 'TAIL'), ('venue.venueName', 'NIPS')]
matched values OrderedDict()
--------------------
--------------------
text:  TAIL papers in NIPS
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  "TAIL" AND t4.venuename  =  "NIPS"
ground truth values:  [('keyphrase.keyphraseName', 'TAIL'), ('venue.venueName', 'NIPS')]
matched values OrderedDict()
--------------------
--------------------
text:  papers on TAIL NIPS
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  "TAIL" AND t4.venuename  =  "NIPS"
ground truth values:  [('keyphrase.keyphraseName', 'TAIL'), ('venue.venueName', 'NIPS')]
matched values OrderedDict()
--------------------
--------------------
text:  TAIL papers used in NIPS
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  "TAIL" AND t4.venuename  =  "NIPS"
ground truth values:  [('keyphrase.keyphraseName', 'TAIL'), ('venue.venueName', 'NIPS')]
matched values OrderedDict()
--------------------
--------------------
text:  How many co-authors has Mark Steedman had ?
sql:  SELECT DISTINCT COUNT ( DISTINCT t1.authorid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname != "Mark Steedman" AND t2.paperid IN ( SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Mark Steedman" )
ground truth values:  [('author.authorName', 'Mark Steedman'), ('author.authorName', 'Mark Steedman')]
matched values OrderedDict()
--------------------
--------------------
text:  keyphrases used by Christof Dallermassl in 2000
sql:  SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "Christof Dallermassl" AND t3.year  =  2000
ground truth values:  [('author.authorName', 'Christof Dallermassl')]
matched values OrderedDict()
--------------------
--------------------
text:  Keyphrases used by Christof Dallermassl in 2000
sql:  SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "Christof Dallermassl" AND t3.year  =  2000
ground truth values:  [('author.authorName', 'Christof Dallermassl')]
matched values OrderedDict()
--------------------
--------------------
text:  keyphrases Christof Dallermassl used in papers written last year
sql:  SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "Christof Dallermassl" AND t3.year  =  2000
ground truth values:  [('author.authorName', 'Christof Dallermassl')]
matched values OrderedDict()
--------------------
--------------------
text:  What are keyphrases by Christof Dallermassl in 2000 ?
sql:  SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "Christof Dallermassl" AND t3.year  =  2000
ground truth values:  [('author.authorName', 'Christof Dallermassl')]
matched values OrderedDict()
--------------------
--------------------
text:   32%|███▏      | 240/750 [00:06<00:14, 35.16it/s] 33%|███▎      | 244/750 [00:06<00:14, 35.38it/s] 33%|███▎      | 248/750 [00:06<00:13, 36.53it/s] 34%|███▎      | 253/750 [00:06<00:13, 38.04it/s] 34%|███▍      | 258/750 [00:06<00:12, 39.75it/s]journal articles by mohammad rastegari
sql:  SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "mohammad rastegari" AND t3.journalid  >=  0
ground truth values:  [('author.authorName', 'mohammad rastegari')]
matched values OrderedDict()
--------------------
--------------------
text:  Journal Papers by mohammad rastegari
sql:  SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "mohammad rastegari" AND t3.journalid  >=  0
ground truth values:  [('author.authorName', 'mohammad rastegari')]
matched values OrderedDict()
--------------------
--------------------
text:  best paper in TACL 2014 ?
sql:  SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  "TACL" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC
ground truth values:  [('venue.venueName', 'TACL')]
matched values OrderedDict()
--------------------
--------------------
text:  What was the best paper at TACL 2014 ?
sql:  SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  "TACL" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC
ground truth values:  [('venue.venueName', 'TACL')]
matched values OrderedDict()
--------------------
--------------------
text:  who published at acl 2016 ?
sql:  SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  "acl"
ground truth values:  [('venue.venueName', 'acl')]
matched values OrderedDict()
--------------------
--------------------
text:  acl 2016 authors
sql:  SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  "acl"
ground truth values:  [('venue.venueName', 'acl')]
matched values OrderedDict()
--------------------
--------------------
text:  authors of acl 2016 papers
sql:  SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  "acl"
ground truth values:  [('venue.venueName', 'acl')]
matched values OrderedDict()
--------------------
--------------------
text:  List of authors acl 2016
sql:  SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  "acl"
ground truth values:  [('venue.venueName', 'acl')]
matched values OrderedDict()
--------------------
--------------------
text:  author published acl 2016
sql:  SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  "acl"
ground truth values:  [('venue.venueName', 'acl')]
matched values OrderedDict()
--------------------
--------------------
text:  who had papers at acl 2016 ?
sql:  SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  "acl"
ground truth values:  [('venue.venueName', 'acl')]
matched values OrderedDict()
--------------------
--------------------
text:  List of authors in acl 2016
sql:  SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  "acl"
ground truth values:  [('venue.venueName', 'acl')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers were written on Multiuser Receiver in the Decision Feedback this year ?
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Multiuser Receiver in the Decision Feedback" AND t3.year  =  2016 GROUP BY t3.paperid HAVING COUNT ( DISTINCT t1.keyphrasename )  >  1
ground truth values:  [('keyphrase.keyphraseName', 'Multiuser Receiver in the Decision Feedback')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers did Mirella Lapata cite ?
sql:  SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  "Mirella Lapata"
ground truth values:  [('author.authorName', 'Mirella Lapata')]
matched values OrderedDict()
--------------------
--------------------
text:  how many papers does Mirella Lapata cite
sql:  SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  "Mirella Lapata"
ground truth values:  [('author.authorName', 'Mirella Lapata')]
matched values OrderedDict()
--------------------
--------------------
text:  how many papers has Mirella Lapata cited ?
sql:  SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  "Mirella Lapata"
ground truth values:  [('author.authorName', 'Mirella Lapata')]
matched values OrderedDict()
--------------------
--------------------
text:  When does Michael Stonebraker publish the first VLDB paper ?
sql:  SELECT DISTINCT t3.year FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Michael Stonebraker" AND t4.venuename  =  "VLDB" ORDER BY t3.year
ground truth values:  [('author.authorName', 'Michael Stonebraker'), ('venue.venueName', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  semantic parsing dataset
sql:  SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  "semantic parsing"
ground truth values:  [('keyphrase.keyphraseName', 'semantic parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  data sets for semantic parsing
sql:  SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  "semantic parsing"
ground truth values:  [('keyphrase.keyphraseName', 'semantic parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  list datasets for semantic parsing
sql:  SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  "semantic parsing"
ground truth values:  [('keyphrase.keyphraseName', 'semantic parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  datasets for semantic parsing
sql:  SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  "semantic parsing"
ground truth values:  [('keyphrase.keyphraseName', 'semantic parsing')]
 35%|███▌      | 263/750 [00:06<00:12, 39.09it/s] 36%|███▌      | 267/750 [00:06<00:12, 39.06it/s] 36%|███▌      | 271/750 [00:07<00:12, 38.98it/s] 37%|███▋      | 275/750 [00:07<00:12, 38.56it/s] 37%|███▋      | 280/750 [00:07<00:11, 40.99it/s]matched values OrderedDict()
--------------------
--------------------
text:  Datasets with semantic parsing information
sql:  SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  "semantic parsing"
ground truth values:  [('keyphrase.keyphraseName', 'semantic parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  datasets used by semantic parsing papers
sql:  SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  "semantic parsing"
ground truth values:  [('keyphrase.keyphraseName', 'semantic parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  datasets in semantic parsing papers
sql:  SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  "semantic parsing"
ground truth values:  [('keyphrase.keyphraseName', 'semantic parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  semantic parsing datasets
sql:  SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  "semantic parsing"
ground truth values:  [('keyphrase.keyphraseName', 'semantic parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  datasets in papers about semantic parsing
sql:  SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  "semantic parsing"
ground truth values:  [('keyphrase.keyphraseName', 'semantic parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  datasets used for semantic parsing
sql:  SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  "semantic parsing"
ground truth values:  [('keyphrase.keyphraseName', 'semantic parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  large-scale datasets used in semantic parsing
sql:  SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  "semantic parsing"
ground truth values:  [('keyphrase.keyphraseName', 'semantic parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  datasets with semantic parsing
sql:  SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  "semantic parsing"
ground truth values:  [('keyphrase.keyphraseName', 'semantic parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  datasets used for evaluating semantic parsing
sql:  SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  "semantic parsing"
ground truth values:  [('keyphrase.keyphraseName', 'semantic parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  where does Peter Mertens publish ?
sql:  SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Peter Mertens"
ground truth values:  [('author.authorName', 'Peter Mertens')]
matched values OrderedDict()
--------------------
--------------------
text:  in what venues does Peter Mertens publish ?
sql:  SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Peter Mertens"
ground truth values:  [('author.authorName', 'Peter Mertens')]
matched values OrderedDict()
--------------------
--------------------
text:  Where does Peter Mertens publish ?
sql:  SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Peter Mertens"
ground truth values:  [('author.authorName', 'Peter Mertens')]
matched values OrderedDict()
--------------------
--------------------
text:  how many papers appeared at nature communications last year
sql:  SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "nature communications"
ground truth values:  [('venue.venueName', 'nature communications')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers were at nature communications 2015 ?
sql:  SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "nature communications"
ground truth values:  [('venue.venueName', 'nature communications')]
matched values OrderedDict()
--------------------
--------------------
text:  how many papers accepted in nature communications 2015
sql:  SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "nature communications"
ground truth values:  [('venue.venueName', 'nature communications')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers were published in nature communications in 2015 ?
sql:  SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "nature communications"
ground truth values:  [('venue.venueName', 'nature communications')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers on nature communications in 2015 ?
sql:  SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "nature communications"
ground truth values:  [('venue.venueName', 'nature communications')]
matched values OrderedDict()
--------------------
--------------------
text:  how many papers in nature communications 2015
sql:  SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "nature communications"
ground truth values:  [('venue.venueName', 'nature communications')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers were accepted at nature communications 2015 ?
sql:  SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "nature communications"
ground truth values:  [('venue.venueName', 'nature communications')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers are presented in nature communications 2015 ?
 38%|███▊      | 285/750 [00:07<00:10, 43.13it/s] 39%|███▊      | 290/750 [00:07<00:11, 41.19it/s] 39%|███▉      | 295/750 [00:07<00:11, 38.15it/s] 40%|████      | 300/750 [00:07<00:11, 39.36it/s]sql:  SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "nature communications"
ground truth values:  [('venue.venueName', 'nature communications')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers published in nature communications in 2015 ?
sql:  SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "nature communications"
ground truth values:  [('venue.venueName', 'nature communications')]
matched values OrderedDict()
--------------------
--------------------
text:  how many papers published in nature communications 2015 ?
sql:  SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "nature communications"
ground truth values:  [('venue.venueName', 'nature communications')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers were published in nature communications 2015 conference ?
sql:  SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "nature communications"
ground truth values:  [('venue.venueName', 'nature communications')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers was published in nature communications in 2015
sql:  SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "nature communications"
ground truth values:  [('venue.venueName', 'nature communications')]
matched values OrderedDict()
--------------------
--------------------
text:  what was the first deep learning paper ?
sql:  SELECT DISTINCT t2.datasetid  ,  t4.year FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN keyphrase AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t5.keyphrasename  =  "deep learning" ORDER BY t4.year ASC
ground truth values:  [('keyphrase.keyphraseName', 'deep learning')]
matched values OrderedDict()
--------------------
--------------------
text:  what year was the first deep learning paper published ?
sql:  SELECT DISTINCT t2.datasetid  ,  t4.year FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN keyphrase AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t5.keyphrasename  =  "deep learning" ORDER BY t4.year ASC
ground truth values:  [('keyphrase.keyphraseName', 'deep learning')]
matched values OrderedDict()
--------------------
--------------------
text:  datasets mentioned at ACL
sql:  SELECT DISTINCT t1.datasetid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  "ACL"
ground truth values:  [('venue.venueName', 'ACL')]
matched values OrderedDict()
--------------------
--------------------
text:  what datasets do papers at ACL use most ?
sql:  SELECT DISTINCT t1.datasetid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  "ACL"
ground truth values:  [('venue.venueName', 'ACL')]
matched values OrderedDict()
--------------------
--------------------
text:  the papers on semantic parsing by li dong at acl in 2016
sql:  SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN paper AS t2 ON t2.paperid  =  t5.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "li dong" AND t3.keyphrasename  =  "semantic parsing" AND t2.year  =  2016 AND t6.venuename  =  "acl"
ground truth values:  [('author.authorName', 'li dong'), ('keyphrase.keyphraseName', 'semantic parsing'), ('venue.venueName', 'acl')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers were written on convolutional neural networks in the past year ?
sql:  SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "convolutional neural networks" AND t3.year  =  2016
ground truth values:  [('keyphrase.keyphraseName', 'convolutional neural networks')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers were published on convolutional neural networks in 2016 ?
sql:  SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "convolutional neural networks" AND t3.year  =  2016
ground truth values:  [('keyphrase.keyphraseName', 'convolutional neural networks')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers were written on convolutional neural networks in 2016 ?
sql:  SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "convolutional neural networks" AND t3.year  =  2016
ground truth values:  [('keyphrase.keyphraseName', 'convolutional neural networks')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers were written on the convolutional neural networks this year ?
sql:  SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "convolutional neural networks" AND t3.year  =  2016
ground truth values:  [('keyphrase.keyphraseName', 'convolutional neural networks')]
matched values OrderedDict()
--------------------
--------------------
text:  how many papers on convolutional neural networks have been published in the past year ?
sql:  SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "convolutional neural networks" AND t3.year  =  2016
ground truth values:  [('keyphrase.keyphraseName', 'convolutional neural networks')]
matched values OrderedDict()
--------------------
--------------------
text:  What papers were written on question answering this year ?
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "question answering" AND t3.year  =  2016
ground truth values:  [('keyphrase.keyphraseName', 'question answering')]
matched values OrderedDict()
--------------------
--------------------
text:  which year had the most NIPS papers ?
sql:  SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  "NIPS" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC
ground truth values:  [('venue.venueName', 'NIPS')]
matched values OrderedDict()
--------------------
--------------------
text:  what year had the most NIPS papers ?
sql:  SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  "NIPS" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC
ground truth values:  [('venue.venueName', 'NIPS')]
matched values OrderedDict()
--------------------
--------------------
text:  what year had the most number of NIPS papers ?
sql:   41%|████      | 305/750 [00:07<00:11, 40.34it/s] 41%|████▏     | 310/750 [00:07<00:11, 39.80it/s] 42%|████▏     | 315/750 [00:08<00:10, 39.74it/s] 43%|████▎     | 320/750 [00:08<00:10, 39.63it/s]SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  "NIPS" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC
ground truth values:  [('venue.venueName', 'NIPS')]
matched values OrderedDict()
--------------------
--------------------
text:  when were most NIPS papers published ?
sql:  SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  "NIPS" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC
ground truth values:  [('venue.venueName', 'NIPS')]
matched values OrderedDict()
--------------------
--------------------
text:  who writes papers with Noah A Smith ?
sql:  SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Noah A Smith"
ground truth values:  [('author.authorName', 'Noah A Smith')]
matched values OrderedDict()
--------------------
--------------------
text:  Who is a coauthor with Noah A Smith ?
sql:  SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Noah A Smith"
ground truth values:  [('author.authorName', 'Noah A Smith')]
matched values OrderedDict()
--------------------
--------------------
text:  Who are Noah A Smith 's co-authors
sql:  SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Noah A Smith"
ground truth values:  [('author.authorName', 'Noah A Smith')]
matched values OrderedDict()
--------------------
--------------------
text:  Who has coauthored with Noah A Smith ?
sql:  SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Noah A Smith"
ground truth values:  [('author.authorName', 'Noah A Smith')]
matched values OrderedDict()
--------------------
--------------------
text:  co-authors of Noah A Smith
sql:  SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Noah A Smith"
ground truth values:  [('author.authorName', 'Noah A Smith')]
matched values OrderedDict()
--------------------
--------------------
text:  author who wrote papers with Noah A Smith
sql:  SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Noah A Smith"
ground truth values:  [('author.authorName', 'Noah A Smith')]
matched values OrderedDict()
--------------------
--------------------
text:  authors who collaborated with Noah A Smith
sql:  SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Noah A Smith"
ground truth values:  [('author.authorName', 'Noah A Smith')]
matched values OrderedDict()
--------------------
--------------------
text:  who does Noah A Smith author with ?
sql:  SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Noah A Smith"
ground truth values:  [('author.authorName', 'Noah A Smith')]
matched values OrderedDict()
--------------------
--------------------
text:  Who are Noah A Smith 's coauthors
sql:  SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Noah A Smith"
ground truth values:  [('author.authorName', 'Noah A Smith')]
matched values OrderedDict()
--------------------
--------------------
text:  who are all the co-authors of Noah A Smith ?
sql:  SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Noah A Smith"
ground truth values:  [('author.authorName', 'Noah A Smith')]
matched values OrderedDict()
--------------------
--------------------
text:  who does Noah A Smith work with ?
sql:  SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Noah A Smith"
ground truth values:  [('author.authorName', 'Noah A Smith')]
matched values OrderedDict()
--------------------
--------------------
text:  who does Noah A Smith collaborate with ?
sql:  SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Noah A Smith"
ground truth values:  [('author.authorName', 'Noah A Smith')]
matched values OrderedDict()
--------------------
--------------------
text:  Who are Noah A Smith 's coauthors ?
sql:  SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Noah A Smith"
ground truth values:  [('author.authorName', 'Noah A Smith')]
matched values OrderedDict()
--------------------
--------------------
text:  coauthors of Noah A Smith
sql:  SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Noah A Smith"
ground truth values:  [('author.authorName', 'Noah A Smith')]
matched values OrderedDict()
--------------------
--------------------
text:  what datasets did jitendra malik use ?
sql:  SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "jitendra malik"
ground truth values:  [('author.authorName', 'jitendra malik')]
matched values OrderedDict()
--------------------
--------------------
text:  what datasets are used in papers by jitendra malik
sql:  SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "jitendra malik"
ground truth values:  [('author.authorName', 'jitendra malik')]
matched values OrderedDict()
--------------------
--------------------
text:  what datasets did jitendra malik use in his papers ?
sql:  SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "jitendra malik"
ground truth values:  [('author.authorName', 'jitendra malik')]
matched values OrderedDict()
--------------------
--------------------
text:  what datasets were used by jitendra malik ?
sql:  SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "jitendra malik"
ground truth values:  [('author.authorName', 'jitendra malik')]
matched values OrderedDict()
--------------------
--------------------
 43%|████▎     | 324/750 [00:08<00:10, 39.73it/s] 44%|████▍     | 329/750 [00:08<00:10, 40.07it/s] 45%|████▍     | 334/750 [00:08<00:10, 40.62it/s] 45%|████▌     | 339/750 [00:08<00:09, 41.43it/s]text:  datasets used in papers written by jitendra malik ?
sql:  SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "jitendra malik"
ground truth values:  [('author.authorName', 'jitendra malik')]
matched values OrderedDict()
--------------------
--------------------
text:  Datasets by jitendra malik
sql:  SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "jitendra malik"
ground truth values:  [('author.authorName', 'jitendra malik')]
matched values OrderedDict()
--------------------
--------------------
text:  What datasets have jitendra malik used
sql:  SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "jitendra malik"
ground truth values:  [('author.authorName', 'jitendra malik')]
matched values OrderedDict()
--------------------
--------------------
text:  recent deep learning papers
sql:  SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "deep learning" ORDER BY t3.year DESC
ground truth values:  [('keyphrase.keyphraseName', 'deep learning')]
matched values OrderedDict()
--------------------
--------------------
text:  new deep learning papers
sql:  SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "deep learning" ORDER BY t3.year DESC
ground truth values:  [('keyphrase.keyphraseName', 'deep learning')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the latest publications on deep learning ?
sql:  SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "deep learning" ORDER BY t3.year DESC
ground truth values:  [('keyphrase.keyphraseName', 'deep learning')]
matched values OrderedDict()
--------------------
--------------------
text:  Most recent deep learning conference ?
sql:  SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "deep learning" ORDER BY t3.year DESC
ground truth values:  [('keyphrase.keyphraseName', 'deep learning')]
matched values OrderedDict()
--------------------
--------------------
text:  Show me some recent papers on deep learning ?
sql:  SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "deep learning" ORDER BY t3.year DESC
ground truth values:  [('keyphrase.keyphraseName', 'deep learning')]
matched values OrderedDict()
--------------------
--------------------
text:  What are some recent papers written in deep learning ?
sql:  SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "deep learning" ORDER BY t3.year DESC
ground truth values:  [('keyphrase.keyphraseName', 'deep learning')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the most recent paper of deep learning ?
sql:  SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "deep learning" ORDER BY t3.year DESC
ground truth values:  [('keyphrase.keyphraseName', 'deep learning')]
matched values OrderedDict()
--------------------
--------------------
text:  What are recent papers on deep learning ?
sql:  SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "deep learning" ORDER BY t3.year DESC
ground truth values:  [('keyphrase.keyphraseName', 'deep learning')]
matched values OrderedDict()
--------------------
--------------------
text:  Current research on deep learning
sql:  SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "deep learning" ORDER BY t3.year DESC
ground truth values:  [('keyphrase.keyphraseName', 'deep learning')]
matched values OrderedDict()
--------------------
--------------------
text:  latest deep learning papers
sql:  SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "deep learning" ORDER BY t3.year DESC
ground truth values:  [('keyphrase.keyphraseName', 'deep learning')]
matched values OrderedDict()
--------------------
--------------------
text:  newest deep learning papers
sql:  SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "deep learning" ORDER BY t3.year DESC
ground truth values:  [('keyphrase.keyphraseName', 'deep learning')]
matched values OrderedDict()
--------------------
--------------------
text:  What years did Pedro Domingos publish papers in ?
sql:  SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Pedro Domingos" GROUP BY t3.year
ground truth values:  [('author.authorName', 'Pedro Domingos')]
matched values OrderedDict()
--------------------
--------------------
text:  In what years did Pedro Domingos publish a paper ?
sql:  SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Pedro Domingos" GROUP BY t3.year
ground truth values:  [('author.authorName', 'Pedro Domingos')]
matched values OrderedDict()
--------------------
--------------------
text:  jamie callan 's publications by year
sql:  SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "jamie callan" ORDER BY t3.year
ground truth values:  [('author.authorName', 'jamie callan')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers does jamie callan publish each year ?
sql:  SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "jamie callan" GROUP BY t3.year
ground truth values:  [('author.authorName', 'jamie callan')]
matched values OrderedDict()
--------------------
--------------------
text:  number of papers by year from jamie callan
sql:  SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "jamie callan" GROUP BY t3.year
ground truth values:  [('author.authorName', 'jamie callan')]
matched values OrderedDict()
--------------------
--------------------
text:  how many papers jamie callan published each year ?
sql:   46%|████▌     | 344/750 [00:08<00:09, 40.93it/s] 47%|████▋     | 349/750 [00:08<00:10, 38.29it/s] 47%|████▋     | 353/750 [00:09<00:10, 36.31it/s]SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "jamie callan" GROUP BY t3.year
ground truth values:  [('author.authorName', 'jamie callan')]
matched values OrderedDict()
--------------------
--------------------
text:  who does oren etzioni cite
sql:  SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "oren etzioni"
ground truth values:  [('author.authorName', 'oren etzioni')]
matched values OrderedDict()
--------------------
--------------------
text:  what papers does oren etzioni cite
sql:  SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "oren etzioni"
ground truth values:  [('author.authorName', 'oren etzioni')]
matched values OrderedDict()
--------------------
--------------------
text:  papers citing Daniel Jurafsky
sql:  SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Daniel Jurafsky"
ground truth values:  [('author.authorName', 'Daniel Jurafsky')]
matched values OrderedDict()
--------------------
--------------------
text:  What papers cite Daniel Jurafsky ?
sql:  SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Daniel Jurafsky"
ground truth values:  [('author.authorName', 'Daniel Jurafsky')]
matched values OrderedDict()
--------------------
--------------------
text:  Which papers cite Daniel Jurafsky ?
sql:  SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Daniel Jurafsky"
ground truth values:  [('author.authorName', 'Daniel Jurafsky')]
matched values OrderedDict()
--------------------
--------------------
text:  citations for Daniel Jurafsky
sql:  SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Daniel Jurafsky"
ground truth values:  [('author.authorName', 'Daniel Jurafsky')]
matched values OrderedDict()
--------------------
--------------------
text:  journal papers for instance segmentation
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "instance segmentation" AND t3.journalid  >=  0
ground truth values:  [('keyphrase.keyphraseName', 'instance segmentation')]
matched values OrderedDict()
--------------------
--------------------
text:  who has the most papers in semantic parsing after 2005 ?
sql:  SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  "semantic parsing" AND t4.year  >  2005 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC
ground truth values:  [('keyphrase.keyphraseName', 'semantic parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  who has written the most papers on semantic parsing since 2005 ?
sql:  SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  "semantic parsing" AND t4.year  >  2005 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC
ground truth values:  [('keyphrase.keyphraseName', 'semantic parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  who published the most in semantic parsing after 2005 ?
sql:  SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  "semantic parsing" AND t4.year  >  2005 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC
ground truth values:  [('keyphrase.keyphraseName', 'semantic parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  How many citations does Dan Makumbi 's Genetic Identity paper have ?
sql:  SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t3 ON t2.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN cite AS t5 ON t4.paperid  =  t5.citedpaperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "Dan Makumbi" AND t3.keyphrasename  =  "Genetic Identity"
ground truth values:  [('author.authorName', 'Dan Makumbi'), ('keyphrase.keyphraseName', 'Genetic Identity')]
matched values OrderedDict()
--------------------
--------------------
text:  character recognition papers earlier than 2010
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "character recognition" AND t3.year  <  2010
ground truth values:  [('keyphrase.keyphraseName', 'character recognition')]
matched values OrderedDict()
--------------------
--------------------
text:  papers before 2010 about character recognition
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "character recognition" AND t3.year  <  2010
ground truth values:  [('keyphrase.keyphraseName', 'character recognition')]
matched values OrderedDict()
--------------------
--------------------
text:  character recognition papers from before 2010
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "character recognition" AND t3.year  <  2010
ground truth values:  [('keyphrase.keyphraseName', 'character recognition')]
matched values OrderedDict()
--------------------
--------------------
text:  papers about character recognition from before 2010
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "character recognition" AND t3.year  <  2010
ground truth values:  [('keyphrase.keyphraseName', 'character recognition')]
matched values OrderedDict()
--------------------
--------------------
text:  character recognition papers before 2010
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "character recognition" AND t3.year  <  2010
ground truth values:  [('keyphrase.keyphraseName', 'character recognition')]
matched values OrderedDict()
--------------------
--------------------
text:  what topics does oren etzioni write about most ?
sql:  SELECT DISTINCT COUNT ( t2.keyphraseid )  ,  t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "oren etzioni" GROUP BY t2.keyphraseid ORDER BY COUNT ( t2.keyphraseid ) DESC
 48%|████▊     | 357/750 [00:09<00:10, 36.56it/s] 48%|████▊     | 357/750 [00:26<00:10, 36.56it/s] 48%|████▊     | 360/750 [00:26<11:12,  1.73s/it] 49%|████▊     | 364/750 [00:26<07:49,  1.22s/it] 49%|████▉     | 368/750 [00:26<05:29,  1.16it/s] 50%|████▉     | 372/750 [00:26<03:51,  1.63it/s]ground truth values:  [('author.authorName', 'oren etzioni')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers related to deep learning cited the dataset ImageNet ?
sql:  SELECT DISTINCT COUNT ( t4.paperid ) FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN paperkeyphrase AS t1 ON t4.paperid  =  t1.paperid JOIN keyphrase AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t2.datasetname  =  "ImageNet" AND t5.keyphrasename  =  "deep learning"
ground truth values:  [('dataset.datasetName', 'ImageNet'), ('keyphrase.keyphraseName', 'deep learning')]
matched values OrderedDict()
--------------------
--------------------
text:  most cited papers on parsing
sql:  SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  "parsing" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC
ground truth values:  [('keyphrase.keyphraseName', 'parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  parsing top papers
sql:  SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  "parsing" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC
ground truth values:  [('keyphrase.keyphraseName', 'parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  List top papers for parsing
sql:  SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  "parsing" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC
ground truth values:  [('keyphrase.keyphraseName', 'parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  parsing papers that have the most citations
sql:  SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  "parsing" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC
ground truth values:  [('keyphrase.keyphraseName', 'parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the paper about parsing of the most citation ?
sql:  SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  "parsing" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC
ground truth values:  [('keyphrase.keyphraseName', 'parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  Paper on parsing with most citations
sql:  SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  "parsing" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC
ground truth values:  [('keyphrase.keyphraseName', 'parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  parsing papers with most citations
sql:  SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  "parsing" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC
ground truth values:  [('keyphrase.keyphraseName', 'parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  most cited parsing papers
sql:  SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  "parsing" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC
ground truth values:  [('keyphrase.keyphraseName', 'parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  what are the parsing papers that have the most citations ?
sql:  SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  "parsing" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC
ground truth values:  [('keyphrase.keyphraseName', 'parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  highly cited parsing papers
sql:  SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  "parsing" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC
ground truth values:  [('keyphrase.keyphraseName', 'parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  most cited papers for parsing
sql:  SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  "parsing" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC
ground truth values:  [('keyphrase.keyphraseName', 'parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  Most cited papers on parsing
sql:  SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  "parsing" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC
ground truth values:  [('keyphrase.keyphraseName', 'parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the most cited paper by ohad shamir ?
sql:  SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "ohad shamir" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC
ground truth values:  [('author.authorName', 'ohad shamir')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the highest cited paper by ohad shamir ?
sql:  SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "ohad shamir" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC
ground truth values:  [('author.authorName', 'ohad shamir')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the most cited paper of ohad shamir ?
sql:   50%|█████     | 376/750 [00:26<02:43,  2.29it/s] 51%|█████     | 380/750 [00:26<01:56,  3.18it/s] 51%|█████▏    | 385/750 [00:26<01:23,  4.39it/s] 52%|█████▏    | 389/750 [00:27<01:00,  5.93it/s]SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "ohad shamir" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC
ground truth values:  [('author.authorName', 'ohad shamir')]
matched values OrderedDict()
--------------------
--------------------
text:  What is ohad shamir 's highest cited paper ?
sql:  SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "ohad shamir" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC
ground truth values:  [('author.authorName', 'ohad shamir')]
matched values OrderedDict()
--------------------
--------------------
text:  What paper by ohad shamir has the most citation ?
sql:  SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "ohad shamir" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC
ground truth values:  [('author.authorName', 'ohad shamir')]
matched values OrderedDict()
--------------------
--------------------
text:  what is the most cited paper of ohad shamir ?
sql:  SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "ohad shamir" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC
ground truth values:  [('author.authorName', 'ohad shamir')]
matched values OrderedDict()
--------------------
--------------------
text:  what is ohad shamir 's most cited paper ?
sql:  SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "ohad shamir" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC
ground truth values:  [('author.authorName', 'ohad shamir')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers did michael i. jordan publish in 2016 ?
sql:  SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "michael i. jordan" AND t3.year  =  2016
ground truth values:  [('author.authorName', 'michael i. jordan')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers does michael i. jordan have in 2016 ?
sql:  SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "michael i. jordan" AND t3.year  =  2016
ground truth values:  [('author.authorName', 'michael i. jordan')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers did michael i. jordan publish in 2016
sql:  SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "michael i. jordan" AND t3.year  =  2016
ground truth values:  [('author.authorName', 'michael i. jordan')]
matched values OrderedDict()
--------------------
--------------------
text:  count of ACL papers by author
sql:  SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  "ACL" GROUP BY t1.authorid
ground truth values:  [('venue.venueName', 'ACL')]
matched values OrderedDict()
--------------------
--------------------
text:  how many ACL papers by author
sql:  SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  "ACL" GROUP BY t1.authorid
ground truth values:  [('venue.venueName', 'ACL')]
matched values OrderedDict()
--------------------
--------------------
text:  number of ACL papers by author
sql:  SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  "ACL" GROUP BY t1.authorid
ground truth values:  [('venue.venueName', 'ACL')]
matched values OrderedDict()
--------------------
--------------------
text:  who wrote the most papers for CVPR 2007
sql:  SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  "CVPR" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC
ground truth values:  [('venue.venueName', 'CVPR')]
matched values OrderedDict()
--------------------
--------------------
text:  who published papers in CVPR 2007
sql:  SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  "CVPR" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC
ground truth values:  [('venue.venueName', 'CVPR')]
matched values OrderedDict()
--------------------
--------------------
text:  who wrote the most CVPR papers in 2007
sql:  SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  "CVPR" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC
ground truth values:  [('venue.venueName', 'CVPR')]
matched values OrderedDict()
--------------------
--------------------
text:  most published author at CVPR 2007
sql:  SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  "CVPR" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC
ground truth values:  [('venue.venueName', 'CVPR')]
matched values OrderedDict()
--------------------
--------------------
text:  who published the most papers in CVPR 2007
sql:  SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  "CVPR" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC
ground truth values:  [('venue.venueName', 'CVPR')]
matched values OrderedDict()
--------------------
--------------------
text:  Who published the most papers in 2007 at CVPR ?
sql:  SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  "CVPR" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC
ground truth values:  [('venue.venueName', 'CVPR')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers in ACL 2015 ?
sql:  SELECT DISTINCT COUNT ( DISTINCT t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "ACL"
ground truth values:  [('venue.venueName', 'ACL')]
matched values OrderedDict()
--------------------
--------------------
text:  number of papers published in ACL 2015
sql:  SELECT DISTINCT COUNT ( DISTINCT t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "ACL"
ground truth values:  [('venue.venueName', 'ACL')] 53%|█████▎    | 395/750 [00:27<00:44,  8.05it/s] 53%|█████▎    | 399/750 [00:27<00:33, 10.39it/s] 54%|█████▎    | 403/750 [00:27<00:26, 13.06it/s] 54%|█████▍    | 407/750 [00:27<00:21, 15.62it/s]
matched values OrderedDict()
--------------------
--------------------
text:  What papers does Richard Ladner have in chi ?
sql:  SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Richard Ladner" AND t4.venuename  =  "chi"
ground truth values:  [('author.authorName', 'Richard Ladner'), ('venue.venueName', 'chi')]
matched values OrderedDict()
--------------------
--------------------
text:  what paper has Richard Ladner published in chi journal ?
sql:  SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Richard Ladner" AND t4.venuename  =  "chi"
ground truth values:  [('author.authorName', 'Richard Ladner'), ('venue.venueName', 'chi')]
matched values OrderedDict()
--------------------
--------------------
text:  what paper has Richard Ladner published in chi ?
sql:  SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Richard Ladner" AND t4.venuename  =  "chi"
ground truth values:  [('author.authorName', 'Richard Ladner'), ('venue.venueName', 'chi')]
matched values OrderedDict()
--------------------
--------------------
text:  papers by Richard Ladner published at chi
sql:  SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Richard Ladner" AND t4.venuename  =  "chi"
ground truth values:  [('author.authorName', 'Richard Ladner'), ('venue.venueName', 'chi')]
matched values OrderedDict()
--------------------
--------------------
text:  Does Richard Ladner publish in chi ?
sql:  SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Richard Ladner" AND t4.venuename  =  "chi"
ground truth values:  [('author.authorName', 'Richard Ladner'), ('venue.venueName', 'chi')]
matched values OrderedDict()
--------------------
--------------------
text:  What has Richard Ladner published at chi ?
sql:  SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Richard Ladner" AND t4.venuename  =  "chi"
ground truth values:  [('author.authorName', 'Richard Ladner'), ('venue.venueName', 'chi')]
matched values OrderedDict()
--------------------
--------------------
text:  What papers has Richard Ladner written at chi ?
sql:  SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Richard Ladner" AND t4.venuename  =  "chi"
ground truth values:  [('author.authorName', 'Richard Ladner'), ('venue.venueName', 'chi')]
matched values OrderedDict()
--------------------
--------------------
text:  Which paper did Richard Ladner present at chi ?
sql:  SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Richard Ladner" AND t4.venuename  =  "chi"
ground truth values:  [('author.authorName', 'Richard Ladner'), ('venue.venueName', 'chi')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the paper with the most citation about Artificial Intelligence ?
sql:  SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  "Artificial Intelligence" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citingpaperid ) DESC
ground truth values:  [('keyphrase.keyphraseName', 'Artificial Intelligence')]
matched values OrderedDict()
--------------------
--------------------
text:  Fetch me the most cited publications for Artificial Intelligence
sql:  SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  "Artificial Intelligence" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citingpaperid ) DESC
ground truth values:  [('keyphrase.keyphraseName', 'Artificial Intelligence')]
matched values OrderedDict()
--------------------
--------------------
text:  topics at ACL 2014
sql:  SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2014 AND t4.venuename  =  "ACL" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC
ground truth values:  [('venue.venueName', 'ACL')]
matched values OrderedDict()
--------------------
--------------------
text:  most common topics at NIPS 2015
sql:  SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  "NIPS" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC
ground truth values:  [('venue.venueName', 'NIPS')]
matched values OrderedDict()
--------------------
--------------------
text:  most popular topics at NIPS 2015
sql:  SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  "NIPS" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC
ground truth values:  [('venue.venueName', 'NIPS')]
matched values OrderedDict()
--------------------
--------------------
text:  hot topics at NIPS 2015
sql:  SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  "NIPS" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC
ground truth values:  [('venue.venueName', 'NIPS')]
matched values OrderedDict()
--------------------
--------------------
text:  popular topics at NIPS 2015
sql:  SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  "NIPS" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC
ground truth values:  [('venue.venueName', 'NIPS')]
matched values OrderedDict()
--------------------
--------------------
text:  which topics were most popular at NIPS 2015
sql:  SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  "NIPS" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC
ground truth values:  [('venue.venueName', 'NIPS')]
matched values OrderedDict()
--------------------
--------------------
text:  topics popular at NIPS 2015
sql:   55%|█████▍    | 411/750 [00:27<00:18, 17.99it/s] 55%|█████▌    | 416/750 [00:27<00:15, 21.88it/s] 56%|█████▌    | 421/750 [00:27<00:12, 26.26it/s] 57%|█████▋    | 425/750 [00:28<00:11, 28.71it/s] 57%|█████▋    | 429/750 [00:28<00:10, 29.74it/s]SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  "NIPS" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC
ground truth values:  [('venue.venueName', 'NIPS')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers related to deep reinforcement learning in nips ?
sql:  SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  "deep reinforcement learning" AND t4.venuename  =  "nips"
ground truth values:  [('keyphrase.keyphraseName', 'deep reinforcement learning'), ('venue.venueName', 'nips')]
matched values OrderedDict()
--------------------
--------------------
text:  Papers on WebKB
sql:  SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  "WebKB"
ground truth values:  [('dataset.datasetName', 'WebKB')]
matched values OrderedDict()
--------------------
--------------------
text:  which papers used WebKB ?
sql:  SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  "WebKB"
ground truth values:  [('dataset.datasetName', 'WebKB')]
matched values OrderedDict()
--------------------
--------------------
text:  papers about WebKB
sql:  SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  "WebKB"
ground truth values:  [('dataset.datasetName', 'WebKB')]
matched values OrderedDict()
--------------------
--------------------
text:  List the papers that used WebKB dataset
sql:  SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  "WebKB"
ground truth values:  [('dataset.datasetName', 'WebKB')]
matched values OrderedDict()
--------------------
--------------------
text:  papers using WebKB
sql:  SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  "WebKB"
ground truth values:  [('dataset.datasetName', 'WebKB')]
matched values OrderedDict()
--------------------
--------------------
text:  papers that use WebKB
sql:  SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  "WebKB"
ground truth values:  [('dataset.datasetName', 'WebKB')]
matched values OrderedDict()
--------------------
--------------------
text:  WebKB papers
sql:  SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  "WebKB"
ground truth values:  [('dataset.datasetName', 'WebKB')]
matched values OrderedDict()
--------------------
--------------------
text:  papers that used WebKB
sql:  SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  "WebKB"
ground truth values:  [('dataset.datasetName', 'WebKB')]
matched values OrderedDict()
--------------------
--------------------
text:  Papers that use the WebKB dataset
sql:  SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  "WebKB"
ground truth values:  [('dataset.datasetName', 'WebKB')]
matched values OrderedDict()
--------------------
--------------------
text:  how is the most cited author in CVPR ?
sql:  SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid JOIN cite AS t4 ON t1.paperid  =  t4.citedpaperid WHERE t3.venuename  =  "CVPR" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC
ground truth values:  [('venue.venueName', 'CVPR')]
matched values OrderedDict()
--------------------
--------------------
text:  who is the most cited author at CVPR ?
sql:  SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid JOIN cite AS t4 ON t1.paperid  =  t4.citedpaperid WHERE t3.venuename  =  "CVPR" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC
ground truth values:  [('venue.venueName', 'CVPR')]
matched values OrderedDict()
--------------------
--------------------
text:  what are some syntactic parsing papers that chris dyer did not write ?
sql:  SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != "chris dyer" AND t5.keyphrasename  =  "syntactic parsing"
ground truth values:  [('author.authorName', 'chris dyer'), ('keyphrase.keyphraseName', 'syntactic parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  are there any syntactic parsing papers not written by chris dyer ?
sql:  SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != "chris dyer" AND t5.keyphrasename  =  "syntactic parsing"
ground truth values:  [('author.authorName', 'chris dyer'), ('keyphrase.keyphraseName', 'syntactic parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  what are syntactic parsing papers not written by chris dyer
sql:  SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != "chris dyer" AND t5.keyphrasename  =  "syntactic parsing"
ground truth values:  [('author.authorName', 'chris dyer'), ('keyphrase.keyphraseName', 'syntactic parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  syntactic parsing papers not written by chris dyer
sql:  SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != "chris dyer" AND t5.keyphrasename  =  "syntactic parsing"
ground truth values:  [('author.authorName', 'chris dyer'), ('keyphrase.keyphraseName', 'syntactic parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  When was benjamin mako hill 's first publication ?
sql:  SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "benjamin mako hill" GROUP BY t3.year ORDER BY t3.year
ground truth values:  [('author.authorName', 'benjamin mako hill')]
matched values OrderedDict()
--------------------
--------------------
text:  When was benjamin mako hill 's first paper written ?
sql:   58%|█████▊    | 433/750 [00:28<00:09, 31.71it/s] 59%|█████▊    | 439/750 [00:28<00:08, 35.62it/s] 59%|█████▉    | 444/750 [00:28<00:08, 36.59it/s] 60%|█████▉    | 449/750 [00:28<00:07, 39.55it/s]SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "benjamin mako hill" GROUP BY t3.year ORDER BY t3.year
ground truth values:  [('author.authorName', 'benjamin mako hill')]
matched values OrderedDict()
--------------------
--------------------
text:  When did ameet soni publish ?
sql:  SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "ameet soni" GROUP BY t3.year ORDER BY t3.year
ground truth values:  [('author.authorName', 'ameet soni')]
matched values OrderedDict()
--------------------
--------------------
text:  Who cites Daniel A Reed the most
sql:  SELECT DISTINCT COUNT ( t4.citingpaperid )  ,  t3.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t4 ON t2.paperid  =  t4.citedpaperid JOIN writes AS t3 ON t3.paperid  =  t4.citingpaperid WHERE t1.authorname  =  "Daniel A Reed" GROUP BY t3.authorid ORDER BY COUNT ( t4.citingpaperid ) DESC
ground truth values:  [('author.authorName', 'Daniel A Reed')]
matched values OrderedDict()
--------------------
--------------------
text:  Who cites Daniel A Reed most ?
sql:  SELECT DISTINCT COUNT ( t4.citingpaperid )  ,  t3.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t4 ON t2.paperid  =  t4.citedpaperid JOIN writes AS t3 ON t3.paperid  =  t4.citingpaperid WHERE t1.authorname  =  "Daniel A Reed" GROUP BY t3.authorid ORDER BY COUNT ( t4.citingpaperid ) DESC
ground truth values:  [('author.authorName', 'Daniel A Reed')]
matched values OrderedDict()
--------------------
--------------------
text:  how many papers are in sigir ?
sql:  SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  "sigir"
ground truth values:  [('venue.venueName', 'sigir')]
matched values OrderedDict()
--------------------
--------------------
text:  how many papers does sigir have ?
sql:  SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  "sigir"
ground truth values:  [('venue.venueName', 'sigir')]
matched values OrderedDict()
--------------------
--------------------
text:  how many papers are published in sigir ?
sql:  SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  "sigir"
ground truth values:  [('venue.venueName', 'sigir')]
matched values OrderedDict()
--------------------
--------------------
text:  number of papers in sigir conference
sql:  SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  "sigir"
ground truth values:  [('venue.venueName', 'sigir')]
matched values OrderedDict()
--------------------
--------------------
text:  what papers have fewer than 5 citations by ACL papers ?
sql:  SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  "ACL" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5
ground truth values:  [('venue.venueName', 'ACL')]
matched values OrderedDict()
--------------------
--------------------
text:  ACL papers with less than 5 citations
sql:  SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  "ACL" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5
ground truth values:  [('venue.venueName', 'ACL')]
matched values OrderedDict()
--------------------
--------------------
text:  what ACL papers have less than 5 citations ?
sql:  SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  "ACL" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5
ground truth values:  [('venue.venueName', 'ACL')]
matched values OrderedDict()
--------------------
--------------------
text:  what papers have fewer than 5 citations by ACL papers
sql:  SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  "ACL" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5
ground truth values:  [('venue.venueName', 'ACL')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the 5 most recent papers of Mirella Lapata ?
sql:  SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Mirella Lapata" ORDER BY t3.year DESC LIMIT 5
ground truth values:  [('author.authorName', 'Mirella Lapata')]
matched values OrderedDict()
--------------------
--------------------
text:  What were the papers published at pldi 2015 ?
sql:  SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "pldi"
ground truth values:  [('venue.venueName', 'pldi')]
matched values OrderedDict()
--------------------
--------------------
text:  Papers from pldi 2015 conference
sql:  SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "pldi"
ground truth values:  [('venue.venueName', 'pldi')]
matched values OrderedDict()
--------------------
--------------------
text:  papers published at pldi 2015
sql:  SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "pldi"
ground truth values:  [('venue.venueName', 'pldi')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the papers from pldi 2015 ?
sql:  SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "pldi"
ground truth values:  [('venue.venueName', 'pldi')]
matched values OrderedDict()
--------------------
--------------------
text:  Papers from pldi 2015 ?
sql:  SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "pldi"
ground truth values:  [('venue.venueName', 'pldi')]
matched values OrderedDict()
--------------------
--------------------
text:  Which papers were accepted in pldi 2015 ?
sql:  SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "pldi"
ground truth values:  [('venue.venueName', 'pldi')]
matched values OrderedDict()
--------------------
--------------------
text:  What papers were published during the conference pldi 2015 ?
sql:  SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "pldi"
ground truth values:  [('venue.venueName', 'pldi')]
matched values OrderedDict()
--------------------
--------------------
text:  papers in pldi 2015
sql:  SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "pldi"
ground truth values:  [('venue.venueName', 'pldi')]
matched values OrderedDict()
--------------------
--------------------
text:  List of papers in pldi 2015
sql:  SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "pldi"
ground truth values:  [('venue.venueName', 'pldi')]
matched values OrderedDict()
--------------------
--------------------
text:  pldi papers in 2015
sql:  SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "pldi"
ground truth values:   61%|██████    | 454/750 [00:28<00:07, 42.15it/s] 61%|██████    | 459/750 [00:28<00:06, 44.14it/s] 62%|██████▏   | 464/750 [00:28<00:06, 45.41it/s] 63%|██████▎   | 469/750 [00:29<00:06, 42.28it/s] 63%|██████▎   | 474/750 [00:29<00:06, 39.97it/s] 64%|██████▍   | 479/750 [00:29<00:07, 38.48it/s][('venue.venueName', 'pldi')]
matched values OrderedDict()
--------------------
--------------------
text:  what papers are published in pldi 2015
sql:  SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "pldi"
ground truth values:  [('venue.venueName', 'pldi')]
matched values OrderedDict()
--------------------
--------------------
text:  papers from pldi 2015
sql:  SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "pldi"
ground truth values:  [('venue.venueName', 'pldi')]
matched values OrderedDict()
--------------------
--------------------
text:  pldi papers 2015
sql:  SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "pldi"
ground truth values:  [('venue.venueName', 'pldi')]
matched values OrderedDict()
--------------------
--------------------
text:  pldi 2015 conference
sql:  SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "pldi"
ground truth values:  [('venue.venueName', 'pldi')]
matched values OrderedDict()
--------------------
--------------------
text:  pldi best paper award 2015
sql:  SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "pldi"
ground truth values:  [('venue.venueName', 'pldi')]
matched values OrderedDict()
--------------------
--------------------
text:  pldi 2015 list of papers
sql:  SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  "pldi"
ground truth values:  [('venue.venueName', 'pldi')]
matched values OrderedDict()
--------------------
--------------------
text:  ACL papers in 2016 with neural attention in the title
sql:  SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.title LIKE "neural attention" AND t1.year  =  2016 AND t2.venuename  =  "ACL"
ground truth values:  [('venue.venueName', 'ACL')]
matched values OrderedDict()
--------------------
--------------------
text:  Who writes a lot of papers in Machine Learning ?
sql:  SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename  =  "Machine Learning" GROUP BY t1.authorname ORDER BY COUNT ( DISTINCT t3.paperid ) DESC
ground truth values:  [('keyphrase.keyphraseName', 'Machine Learning')]
matched values OrderedDict()
--------------------
--------------------
text:  how many papers by dan klein are cited by michael i. jordan
sql:  SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN cite AS t5 ON t3.paperid  =  t5.citedpaperid JOIN writes AS t4 ON t4.paperid  =  t5.citingpaperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "michael i. jordan" AND t1.authorname  =  "dan klein"
ground truth values:  [('author.authorName', 'michael i. jordan'), ('author.authorName', 'dan klein')]
matched values OrderedDict()
--------------------
--------------------
text:  how many of dan klein 's papers cite michael i. jordan
sql:  SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN cite AS t5 ON t3.paperid  =  t5.citedpaperid JOIN writes AS t4 ON t4.paperid  =  t5.citingpaperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "michael i. jordan" AND t1.authorname  =  "dan klein"
ground truth values:  [('author.authorName', 'michael i. jordan'), ('author.authorName', 'dan klein')]
matched values OrderedDict()
--------------------
--------------------
text:  who else was on the paper with Ameet Soni and Ras Bodik ?
sql:  SELECT DISTINCT t5.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN writes AS t5 ON t5.paperid  =  t4.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  "Ameet Soni" AND t1.authorname  =  "Ras Bodik"
ground truth values:  [('author.authorName', 'Ameet Soni'), ('author.authorName', 'Ras Bodik')]
matched values OrderedDict()
--------------------
--------------------
text:  2014 papers using ImageNet
sql:  SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  "ImageNet" AND t3.year  =  2014
ground truth values:  [('dataset.datasetName', 'ImageNet')]
matched values OrderedDict()
--------------------
--------------------
text:  What journals are Takashi Matsumoto 's articles published in ?
sql:  SELECT DISTINCT t3.journalid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Takashi Matsumoto" GROUP BY t3.journalid
ground truth values:  [('author.authorName', 'Takashi Matsumoto')]
matched values OrderedDict()
--------------------
--------------------
text:  What journals has Takashi Matsumoto published in ?
sql:  SELECT DISTINCT t3.journalid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Takashi Matsumoto" GROUP BY t3.journalid
ground truth values:  [('author.authorName', 'Takashi Matsumoto')]
matched values OrderedDict()
--------------------
--------------------
text:  In what scholarly journals does Takashi Matsumoto publish ?
sql:  SELECT DISTINCT t3.journalid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Takashi Matsumoto" GROUP BY t3.journalid
ground truth values:  [('author.authorName', 'Takashi Matsumoto')]
matched values OrderedDict()
--------------------
--------------------
text:  What authors wrote papers about Bacterial Wilt in 2016 ?
sql:  SELECT DISTINCT t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid JOIN author AS t5 ON t3.authorid  =  t5.authorid WHERE t2.keyphrasename  =  "Bacterial Wilt" AND t4.year  =  2016
ground truth values:  [('keyphrase.keyphraseName', 'Bacterial Wilt')]
matched values OrderedDict()
--------------------
--------------------
text:  Who wrote on the topic of Bacterial Wilt in 2016 ?
sql:  SELECT DISTINCT t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid JOIN author AS t5 ON t3.authorid  =  t5.authorid WHERE t2.keyphrasename  =  "Bacterial Wilt" AND t4.year  =  2016
ground truth values:  [('keyphrase.keyphraseName', 'Bacterial Wilt')]
matched values OrderedDict()
--------------------
--------------------
text:  When did Luke S Zettlemoyer publish ?
sql:  SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Luke S Zettlemoyer" ORDER BY t3.year
ground truth values:  [('author.authorName', 'Luke S Zettlemoyer')]
matched values OrderedDict()
--------------------
--------------------
text:  question answering 2016 papers
sql:  SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "question answering" AND t3.year  =  2016
ground truth values:  [('keyphrase.keyphraseName', 'question answering')]
matched values OrderedDict()
--------------------
--------------------
text:  What papers were written on question answering in 2016 ?
sql:   65%|██████▍   | 484/750 [00:29<00:07, 37.46it/s] 65%|██████▌   | 488/750 [00:29<00:08, 29.38it/s] 66%|██████▌   | 493/750 [00:29<00:07, 32.73it/s]SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "question answering" AND t3.year  =  2016
ground truth values:  [('keyphrase.keyphraseName', 'question answering')]
matched values OrderedDict()
--------------------
--------------------
text:  Find journals about Temporal Data .
sql:  SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Temporal Data" GROUP BY t3.journalid
ground truth values:  [('keyphrase.keyphraseName', 'Temporal Data')]
matched values OrderedDict()
--------------------
--------------------
text:  List the journals related to Temporal Data
sql:  SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Temporal Data" GROUP BY t3.journalid
ground truth values:  [('keyphrase.keyphraseName', 'Temporal Data')]
matched values OrderedDict()
--------------------
--------------------
text:  which ACL 2014 papers about Parsing used Jeopardy! Questions ?
sql:  SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  "Jeopardy! Questions" AND t1.keyphrasename  =  "Parsing" AND t2.year  =  2014 AND t6.venuename  =  "ACL"
ground truth values:  [('dataset.datasetName', 'Jeopardy! Questions'), ('keyphrase.keyphraseName', 'Parsing'), ('venue.venueName', 'ACL')]
matched values OrderedDict()
--------------------
--------------------
text:  Parsing papers using Jeopardy! Questions published at ACL 2014
sql:  SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  "Jeopardy! Questions" AND t1.keyphrasename  =  "Parsing" AND t2.year  =  2014 AND t6.venuename  =  "ACL"
ground truth values:  [('dataset.datasetName', 'Jeopardy! Questions'), ('keyphrase.keyphraseName', 'Parsing'), ('venue.venueName', 'ACL')]
matched values OrderedDict()
--------------------
--------------------
text:  Parsing papers from ACL 2014 using Jeopardy! Questions
sql:  SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  "Jeopardy! Questions" AND t1.keyphrasename  =  "Parsing" AND t2.year  =  2014 AND t6.venuename  =  "ACL"
ground truth values:  [('dataset.datasetName', 'Jeopardy! Questions'), ('keyphrase.keyphraseName', 'Parsing'), ('venue.venueName', 'ACL')]
matched values OrderedDict()
--------------------
--------------------
text:  Parsing papers from ACL 2014 that used Jeopardy! Questions
sql:  SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  "Jeopardy! Questions" AND t1.keyphrasename  =  "Parsing" AND t2.year  =  2014 AND t6.venuename  =  "ACL"
ground truth values:  [('dataset.datasetName', 'Jeopardy! Questions'), ('keyphrase.keyphraseName', 'Parsing'), ('venue.venueName', 'ACL')]
matched values OrderedDict()
--------------------
--------------------
text:  papers about Parsing that used Jeopardy! Questions and were published at ACL 2014
sql:  SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  "Jeopardy! Questions" AND t1.keyphrasename  =  "Parsing" AND t2.year  =  2014 AND t6.venuename  =  "ACL"
ground truth values:  [('dataset.datasetName', 'Jeopardy! Questions'), ('keyphrase.keyphraseName', 'Parsing'), ('venue.venueName', 'ACL')]
matched values OrderedDict()
--------------------
--------------------
text:  in what journals does linda shapiro publish ?
sql:  SELECT DISTINCT t2.journalid FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "linda shapiro"
ground truth values:  [('author.authorName', 'linda shapiro')]
matched values OrderedDict()
--------------------
--------------------
text:  Which journals did linda shapiro submit papers to ?
sql:  SELECT DISTINCT t2.journalid FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "linda shapiro"
ground truth values:  [('author.authorName', 'linda shapiro')]
matched values OrderedDict()
--------------------
--------------------
text:  NIPS authors
sql:  SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  "NIPS"
ground truth values:  [('venue.venueName', 'NIPS')]
matched values OrderedDict()
--------------------
--------------------
text:  who are the authors at NIPS ?
sql:  SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  "NIPS"
ground truth values:  [('venue.venueName', 'NIPS')]
matched values OrderedDict()
--------------------
--------------------
text:  who authored papers at NIPS ?
sql:  SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  "NIPS"
ground truth values:  [('venue.venueName', 'NIPS')]
matched values OrderedDict()
--------------------
--------------------
text:  who publishes in NIPS ?
sql:  SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  "NIPS"
ground truth values:  [('venue.venueName', 'NIPS')]
matched values OrderedDict()
--------------------
--------------------
text:  who has papers at NIPS ?
sql:  SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  "NIPS"
ground truth values:  [('venue.venueName', 'NIPS')]
matched values OrderedDict()
--------------------
--------------------
text:  which venue publishes the most papers about deep learning
sql:  SELECT DISTINCT COUNT ( t3.paperid )  ,  t4.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  "deep learning" GROUP BY t4.venueid ORDER BY COUNT ( t3.paperid ) DESC
ground truth values:  [('keyphrase.keyphraseName', 'deep learning')]
matched values OrderedDict()
--------------------
--------------------
text:  How many publications were added to the Cell journal this year ?
sql:  SELECT DISTINCT COUNT ( t3.paperid ) FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN paperkeyphrase AS t1 ON t3.paperid  =  t1.paperid WHERE t2.journalname  =  "Cell" AND t3.year  =  2015
ground truth values:   66%|██████▋   | 498/750 [00:29<00:07, 34.83it/s] 67%|██████▋   | 502/750 [00:30<00:07, 33.79it/s] 67%|██████▋   | 506/750 [00:30<00:07, 34.60it/s] 68%|██████▊   | 511/750 [00:30<00:06, 36.44it/s] 69%|██████▉   | 516/750 [00:30<00:06, 38.09it/s][('journal.journalName', 'Cell')]
matched values OrderedDict()
--------------------
--------------------
text:  How many articles were published in the Cell journal in 2015 ?
sql:  SELECT DISTINCT COUNT ( t3.paperid ) FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN paperkeyphrase AS t1 ON t3.paperid  =  t1.paperid WHERE t2.journalname  =  "Cell" AND t3.year  =  2015
ground truth values:  [('journal.journalName', 'Cell')]
matched values OrderedDict()
--------------------
--------------------
text:  What are all the publication titles by Donald E Knuth ?
sql:  SELECT DISTINCT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Donald E Knuth"
ground truth values:  [('author.authorName', 'Donald E Knuth')]
matched values OrderedDict()
--------------------
--------------------
text:  papers published in eccv 2016 by ali farhadi
sql:  SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "ali farhadi" AND t3.year  =  2016 AND t4.venuename  =  "eccv"
ground truth values:  [('author.authorName', 'ali farhadi'), ('venue.venueName', 'eccv')]
matched values OrderedDict()
--------------------
--------------------
text:  Does ali farhadi have a paper in eccv in 2016 ?
sql:  SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "ali farhadi" AND t3.year  =  2016 AND t4.venuename  =  "eccv"
ground truth values:  [('author.authorName', 'ali farhadi'), ('venue.venueName', 'eccv')]
matched values OrderedDict()
--------------------
--------------------
text:  papers of ali farhadi in eccv 2016
sql:  SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "ali farhadi" AND t3.year  =  2016 AND t4.venuename  =  "eccv"
ground truth values:  [('author.authorName', 'ali farhadi'), ('venue.venueName', 'eccv')]
matched values OrderedDict()
--------------------
--------------------
text:  What are some papers dealing with Semantic Data in YAGO ?
sql:  SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t1 ON t3.datasetid  =  t1.datasetid JOIN paperkeyphrase AS t2 ON t2.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid WHERE t1.datasetname  =  "YAGO" AND t4.keyphrasename  =  "Semantic Data"
ground truth values:  [('dataset.datasetName', 'YAGO'), ('keyphrase.keyphraseName', 'Semantic Data')]
matched values OrderedDict()
--------------------
--------------------
text:  Who has published more papers in chi ?
sql:  SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  "chi" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC
ground truth values:  [('venue.venueName', 'chi')]
matched values OrderedDict()
--------------------
--------------------
text:  Who has written the most papers at chi ?
sql:  SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  "chi" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC
ground truth values:  [('venue.venueName', 'chi')]
matched values OrderedDict()
--------------------
--------------------
text:  how is the most prolific author in chi ?
sql:  SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  "chi" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC
ground truth values:  [('venue.venueName', 'chi')]
matched values OrderedDict()
--------------------
--------------------
text:  who published the most at chi
sql:  SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  "chi" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC
ground truth values:  [('venue.venueName', 'chi')]
matched values OrderedDict()
--------------------
--------------------
text:  conferences that mention ImageNet
sql:  SELECT DISTINCT t3.venueid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  "ImageNet"
ground truth values:  [('dataset.datasetName', 'ImageNet')]
matched values OrderedDict()
--------------------
--------------------
text:  first deep learning paper
sql:  SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "deep learning" GROUP BY t3.year ORDER BY t3.year ASC
ground truth values:  [('keyphrase.keyphraseName', 'deep learning')]
matched values OrderedDict()
--------------------
--------------------
text:  What was the first paper on deep learning written ?
sql:  SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "deep learning" GROUP BY t3.year ORDER BY t3.year ASC
ground truth values:  [('keyphrase.keyphraseName', 'deep learning')]
matched values OrderedDict()
--------------------
--------------------
text:  When was deep learning proposed ?
sql:  SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "deep learning" GROUP BY t3.year ORDER BY t3.year ASC
ground truth values:  [('keyphrase.keyphraseName', 'deep learning')]
matched values OrderedDict()
--------------------
--------------------
text:  when was the first deep learning paper published ?
sql:  SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "deep learning" GROUP BY t3.year ORDER BY t3.year ASC
ground truth values:  [('keyphrase.keyphraseName', 'deep learning')]
matched values OrderedDict()
--------------------
--------------------
text:  what papers were published in Academic radiology in 1995 ?
sql:  SELECT DISTINCT t2.paperid FROM paper AS t2 JOIN journal AS t1 ON t2.journalid  =  t1.journalid WHERE t1.journalname  =  "Academic radiology" AND t2.year  =  1995
ground truth values:  [('journal.journalName', 'Academic radiology')]
matched values OrderedDict()
--------------------
--------------------
text:  what papers do parsing papers typically cite ?
sql:  SELECT DISTINCT t4.citedpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid WHERE t1.keyphrasename  =  "parsing"
ground truth values:  [('keyphrase.keyphraseName', 'parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  papers typically cited by parsing papers
sql:  SELECT DISTINCT t4.citedpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid WHERE t1.keyphrasename  =  "parsing"
ground truth values:  [('keyphrase.keyphraseName', 'parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  venue for Trophic Cascade
sql:   69%|██████▉   | 521/750 [00:30<00:05, 40.25it/s] 70%|███████   | 526/750 [00:30<00:05, 41.66it/s] 71%|███████   | 531/750 [00:30<00:05, 42.18it/s] 71%|███████▏  | 536/750 [00:30<00:05, 37.67it/s]SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Trophic Cascade"
ground truth values:  [('keyphrase.keyphraseName', 'Trophic Cascade')]
matched values OrderedDict()
--------------------
--------------------
text:  conferences for Trophic Cascade
sql:  SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Trophic Cascade"
ground truth values:  [('keyphrase.keyphraseName', 'Trophic Cascade')]
matched values OrderedDict()
--------------------
--------------------
text:  what conferences are related to Trophic Cascade
sql:  SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Trophic Cascade"
ground truth values:  [('keyphrase.keyphraseName', 'Trophic Cascade')]
matched values OrderedDict()
--------------------
--------------------
text:  What was the conference name that approved Trophic Cascade ?
sql:  SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Trophic Cascade"
ground truth values:  [('keyphrase.keyphraseName', 'Trophic Cascade')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers were written on question answering in 2011 through 2016 ?
sql:  SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "question answering" AND t3.year  >=  2011
ground truth values:  [('keyphrase.keyphraseName', 'question answering')]
matched values OrderedDict()
--------------------
--------------------
text:  What are the best NLP conferences ?
sql:  SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  "NLP" GROUP BY t3.venueid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC
ground truth values:  [('keyphrase.keyphraseName', 'NLP')]
matched values OrderedDict()
--------------------
--------------------
text:  ACL papers by author
sql:  SELECT DISTINCT t2.paperid  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  "ACL"
ground truth values:  [('venue.venueName', 'ACL')]
matched values OrderedDict()
--------------------
--------------------
text:  what keyphrase does Brian DeRenzi write about that gets most citations ?
sql:  SELECT DISTINCT t1.keyphrasename  ,  SUM ( t3.numcitedby ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  "Brian DeRenzi" GROUP BY t1.keyphrasename ORDER BY SUM ( t3.numcitedby ) DESC
ground truth values:  [('author.authorName', 'Brian DeRenzi')]
matched values OrderedDict()
--------------------
--------------------
text:  main topics of work by Brian DeRenzi
sql:  SELECT DISTINCT t1.keyphrasename  ,  SUM ( t3.numcitedby ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  "Brian DeRenzi" GROUP BY t1.keyphrasename ORDER BY SUM ( t3.numcitedby ) DESC
ground truth values:  [('author.authorName', 'Brian DeRenzi')]
matched values OrderedDict()
--------------------
--------------------
text:  When was Michael Stonebraker GIS Database published ?
sql:  SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "Michael Stonebraker" AND t5.keyphrasename  =  "GIS Database"
ground truth values:  [('author.authorName', 'Michael Stonebraker'), ('keyphrase.keyphraseName', 'GIS Database')]
matched values OrderedDict()
--------------------
--------------------
text:  When did Michael Stonebraker publish his GIS Database paper ?
sql:  SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "Michael Stonebraker" AND t5.keyphrasename  =  "GIS Database"
ground truth values:  [('author.authorName', 'Michael Stonebraker'), ('keyphrase.keyphraseName', 'GIS Database')]
matched values OrderedDict()
--------------------
--------------------
text:  When does Michael Stonebraker publish the GIS Database paper ?
sql:  SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  "Michael Stonebraker" AND t5.keyphrasename  =  "GIS Database"
ground truth values:  [('author.authorName', 'Michael Stonebraker'), ('keyphrase.keyphraseName', 'GIS Database')]
matched values OrderedDict()
--------------------
--------------------
text:  In 2010 what journal published an article about Trophic Cascade ?
sql:  SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "Trophic Cascade" AND t3.year  =  2010 GROUP BY t3.journalid
ground truth values:  [('keyphrase.keyphraseName', 'Trophic Cascade')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the most popular paper this year in CVPR ?
sql:  SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2016 AND t2.venuename  =  "CVPR" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citingpaperid ) DESC
ground truth values:  [('venue.venueName', 'CVPR')]
matched values OrderedDict()
--------------------
--------------------
text:  How many citations does luke zettlemoyer have per year
sql:  SELECT DISTINCT COUNT ( t4.citedpaperid )  ,  t3.year FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "luke zettlemoyer" GROUP BY t3.year
ground truth values:  [('author.authorName', 'luke zettlemoyer')]
matched values OrderedDict()
--------------------
--------------------
text:  authors working on ImageNet
sql:  SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t1 ON t3.datasetid  =  t1.datasetid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN writes AS t2 ON t2.paperid  =  t4.paperid WHERE t1.datasetname  =  "ImageNet" GROUP BY t2.paperid
ground truth values:  [('dataset.datasetName', 'ImageNet')]
matched values OrderedDict()
--------------------
--------------------
text:  Eric C. Kerrigan 's Liquid Automatica paper
sql:  SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t5.paperid JOIN paper AS t2 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid JOIN venue AS t6 ON t6.venueid  =  t2.venueid WHERE t1.authorname  =  "Eric C. Kerrigan" AND t3.keyphrasename  =  "Liquid" AND t6.venuename  =  "Automatica"
 72%|███████▏  | 540/750 [00:31<00:05, 36.35it/s] 73%|███████▎  | 544/750 [00:31<00:06, 34.06it/s] 73%|███████▎  | 548/750 [00:31<00:06, 32.36it/s] 74%|███████▎  | 552/750 [00:31<00:06, 31.11it/s] 74%|███████▍  | 556/750 [00:31<00:05, 32.74it/s]ground truth values:  [('author.authorName', 'Eric C. Kerrigan'), ('keyphrase.keyphraseName', 'Liquid'), ('venue.venueName', 'Automatica')]
matched values OrderedDict()
--------------------
--------------------
text:  Where did sergey levine publish his last paper ?
sql:  SELECT DISTINCT t3.venueid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "sergey levine" GROUP BY t3.venueid  ,  t3.year ORDER BY t3.year DESC
ground truth values:  [('author.authorName', 'sergey levine')]
matched values OrderedDict()
--------------------
--------------------
text:  keyphrases used by dan klein in his emnlp papers
sql:  SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid JOIN writes AS t5 ON t5.paperid  =  t3.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid WHERE t1.authorname  =  "dan klein" AND t4.venuename  =  "emnlp"
ground truth values:  [('author.authorName', 'dan klein'), ('venue.venueName', 'emnlp')]
matched values OrderedDict()
--------------------
--------------------
text:  Who are the prominent researchers in Neutralizing Antibody in 2012 ?
sql:  SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  "Neutralizing Antibody" AND t4.year  =  2012 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC
ground truth values:  [('keyphrase.keyphraseName', 'Neutralizing Antibody')]
matched values OrderedDict()
--------------------
--------------------
text:  the papers at eccv in 2014 using ImageNet dataset
sql:  SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  "ImageNet" AND t3.year  =  2014 AND t4.venuename  =  "eccv"
ground truth values:  [('dataset.datasetName', 'ImageNet'), ('venue.venueName', 'eccv')]
matched values OrderedDict()
--------------------
--------------------
text:  which papers in eccv 2014 use ImageNet ?
sql:  SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  "ImageNet" AND t3.year  =  2014 AND t4.venuename  =  "eccv"
ground truth values:  [('dataset.datasetName', 'ImageNet'), ('venue.venueName', 'eccv')]
matched values OrderedDict()
--------------------
--------------------
text:  eccv 2014 papers using ImageNet
sql:  SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  "ImageNet" AND t3.year  =  2014 AND t4.venuename  =  "eccv"
ground truth values:  [('dataset.datasetName', 'ImageNet'), ('venue.venueName', 'eccv')]
matched values OrderedDict()
--------------------
--------------------
text:  Euclidean Distance papers citing NIPS papers
sql:  SELECT DISTINCT t5.citingpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN cite AS t5 ON t2.paperid  =  t5.citingpaperid JOIN paper AS t3 ON t3.paperid  =  t5.citedpaperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  "Euclidean Distance" AND t4.venuename  =  "NIPS"
ground truth values:  [('keyphrase.keyphraseName', 'Euclidean Distance'), ('venue.venueName', 'NIPS')]
matched values OrderedDict()
--------------------
--------------------
text:  top authors working on ImageNet ?
sql:  SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t4 ON t4.paperid  =  t2.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t1.datasetname  =  "ImageNet" GROUP BY t3.paperid ORDER BY COUNT ( t4.paperid ) DESC
ground truth values:  [('dataset.datasetName', 'ImageNet')]
matched values OrderedDict()
--------------------
--------------------
text:  how many ACL 2012 papers have more than 7 citations ?
sql:  SELECT DISTINCT ( t1.paperid )  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2012 AND t2.venuename  =  "ACL" GROUP BY t1.paperid HAVING COUNT ( t3.citingpaperid )  >  7
ground truth values:  [('venue.venueName', 'ACL')]
matched values OrderedDict()
--------------------
--------------------
text:  What was the topic of best paper in 2012 EMNLP-CoNLL ?
sql:  SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t1.keyphraseid  ,  t2.paperid FROM paper AS t2 JOIN cite AS t4 ON t2.paperid  =  t4.citedpaperid JOIN paperkeyphrase AS t1 ON t2.paperid  =  t1.paperid JOIN venue AS t3 ON t3.venueid  =  t2.venueid WHERE t2.year  =  2012 AND t3.venuename  =  "EMNLP-CoNLL" GROUP BY t2.paperid  ,  t1.keyphraseid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC
ground truth values:  [('venue.venueName', 'EMNLP-CoNLL')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers has Noah Smith co-authored since 2009 ?
sql:  SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname != "Noah Smith" AND t3.year  >  2009 AND t2.paperid IN ( SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname LIKE "Noah Smith" )
ground truth values:  [('author.authorName', 'Noah Smith')]
matched values OrderedDict()
--------------------
--------------------
text:  Number of ACL papers with more than 2 citations
sql:  SELECT DISTINCT COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  "ACL" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  >  2
ground truth values:  [('venue.venueName', 'ACL')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the name of Eric C. Kerrigan 's Liquid Automatica paper ?
sql:  SELECT DISTINCT t2.title FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t5.paperid JOIN paper AS t2 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid JOIN venue AS t6 ON t6.venueid  =  t2.venueid WHERE t1.authorname LIKE "Eric C. Kerrigan" AND t3.keyphrasename  =  "Liquid" AND t6.venuename  =  "Automatica"
ground truth values:  [('keyphrase.keyphraseName', 'Liquid'), ('venue.venueName', 'Automatica')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers used ImageNet datasets in cvpr ?
sql:  SELECT DISTINCT COUNT ( t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  "ImageNet" AND t4.venuename  =  "cvpr"
ground truth values:  [('dataset.datasetName', 'ImageNet'), ('venue.venueName', 'cvpr')]
matched values OrderedDict()
--------------------
--------------------
text:  What venues are for Neuroscience ?
sql:  SELECT DISTINCT venueid FROM venue WHERE venuename  =  "Neuroscience"
ground truth values:  [('venue.venueName', 'Neuroscience')]
matched values OrderedDict()
--------------------
--------------------
text:  When was the last time Mary Crainie published a paper ?
sql:  SELECT DISTINCT MAX ( t3.year ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Mary Crainie"
ground truth values:  [('author.authorName', 'Mary Crainie')]
matched values OrderedDict()
--------------------
--------------------
text:   75%|███████▍  | 560/750 [00:31<00:05, 32.95it/s] 75%|███████▌  | 565/750 [00:31<00:05, 35.86it/s] 76%|███████▌  | 570/750 [00:31<00:04, 37.79it/s] 77%|███████▋  | 581/750 [00:32<00:03, 46.96it/s]I want the co-authors of papers on Machine Translation Output with Philipp Koehn
sql:  SELECT DISTINCT t1.authorid FROM paperkeyphrase AS t6 JOIN keyphrase AS t3 ON t6.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t6.paperid JOIN writes AS t5 ON t5.paperid  =  t4.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid JOIN author AS t2 ON t4.authorid  =  t2.authorid WHERE t2.authorname  =  "Philipp Koehn" AND t3.keyphrasename  =  "Machine Translation Output"
ground truth values:  [('author.authorName', 'Philipp Koehn'), ('keyphrase.keyphraseName', 'Machine Translation Output')]
matched values OrderedDict()
--------------------
--------------------
text:  How many papers does Samuel Madden publish outside of PVLDB area ?
sql:  SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  "Samuel Madden" AND t4.venuename != "PVLDB"
ground truth values:  [('author.authorName', 'Samuel Madden'), ('venue.venueName', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  which journal did Donald E Knuth publish his last paper ?
sql:  SELECT DISTINCT t3.journalid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Donald E Knuth" GROUP BY t3.journalid  ,  t3.year ORDER BY t3.year DESC
ground truth values:  [('author.authorName', 'Donald E Knuth')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the venue of Fracture of acrylic bone cement ?
sql:  SELECT DISTINCT venueid FROM paper WHERE title  =  "Fracture of acrylic bone cement"
ground truth values:  [('paper.title', 'Fracture of acrylic bone cement')]
matched values OrderedDict()
--------------------
--------------------
text:  How many authors published at sigcse in 2010 ?
sql:  SELECT DISTINCT COUNT ( t2.paperid ) FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2010 AND t3.venuename  =  "sigcse"
ground truth values:  [('venue.venueName', 'sigcse')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the year of publication of " A Switching Architecture For ISDN " ?
sql:  SELECT DISTINCT title  ,  YEAR FROM paper WHERE title  =  "A Switching Architecture For ISDN"
ground truth values:  [('paper.title', 'A Switching Architecture For ISDN')]
matched values OrderedDict()
--------------------
--------------------
text:  what keywords are used by papers at uist
sql:  SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  "uist"
ground truth values:  [('venue.venueName', 'uist')]
matched values OrderedDict()
--------------------
--------------------
text:  Give me the papers written by Su-In Lee before 2012 .
sql:  SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  "Su-In Lee" AND t3.year  <  2012
ground truth values:  [('author.authorName', 'Su-In Lee')]
matched values OrderedDict()
--------------------
--------------------
text:  papers in semantic parsing for each year
sql:  SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  "semantic parsing" GROUP BY t3.year ORDER BY t3.year DESC
ground truth values:  [('keyphrase.keyphraseName', 'semantic parsing')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the most cited paper at sigcomm ?
sql:  SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  "sigcomm" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citingpaperid ) DESC
ground truth values:  [('venue.venueName', 'sigcomm')]
matched values OrderedDict()
--------------------
--------------------
text:  What is the name of Ranjit Jhala 's Liquid Haskell paper ?
sql:  SELECT DISTINCT t3.title FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN paper AS t3 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname LIKE "Ranjit Jhala" AND t5.keyphrasename  =  "Liquid Haskell"
ground truth values:  [('keyphrase.keyphraseName', 'Liquid Haskell')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the homepage of PVLDB .
sql:  SELECT homepage FROM journal WHERE name  =  "PVLDB"
ground truth values:  [('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the homepage of " H. V. Jagadish " .
sql:  SELECT homepage FROM author WHERE name  =  "H. V. Jagadish"
ground truth values:  [('author.name', 'H. V. Jagadish')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the abstract of " Making database systems usable " .
sql:  SELECT abstract FROM publication WHERE title  =  "Making database systems usable"
ground truth values:  [('publication.title', 'Making database systems usable')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the year of " Making database systems usable "
sql:  SELECT YEAR FROM publication WHERE title  =  "Making database systems usable"
ground truth values:  [('publication.title', 'Making database systems usable')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the year of " Making database systems usable " .
sql:  SELECT YEAR FROM publication WHERE title  =  "Making database systems usable"
ground truth values:  [('publication.title', 'Making database systems usable')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the homepage of the VLDB conference .
sql:  SELECT homepage FROM conference WHERE name  =  "VLDB"
ground truth values:  [('conference.name', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me all the organizations in " North America " .
sql:  SELECT name FROM organization WHERE continent  =  "North America"
ground truth values:  [('organization.continent', 'North America')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the homepage of " University of Michigan " .
sql:  SELECT homepage FROM organization WHERE name  =  "University of Michigan"
ground truth values:  [('organization.name', 'University of Michigan')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of references of " Making database systems usable " .
sql:  SELECT reference_num FROM publication WHERE title  =  "Making database systems usable"
ground truth values:  [('publication.title', 'Making database systems usable')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the references of " Making database systems usable " .
sql:  SELECT reference_num FROM publication WHERE title  =  "Making database systems usable"
ground truth values:  [('publication.title', 'Making database systems usable')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of citations of " Making database systems usable " .
sql:  SELECT citation_num FROM publication WHERE title  =  "Making database systems usable"
ground truth values:  [('publication.title', 'Making database systems usable')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the citations of " Making database systems usable " .
sql:   78%|███████▊  | 587/750 [00:32<00:03, 50.04it/s] 79%|███████▉  | 593/750 [00:32<00:03, 45.60it/s] 80%|███████▉  | 599/750 [00:32<00:03, 45.75it/s] 81%|████████  | 605/750 [00:32<00:03, 45.56it/s]SELECT citation_num FROM publication WHERE title  =  "Making database systems usable"
ground truth values:  [('publication.title', 'Making database systems usable')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the authors who have papers in PVLDB 2010 .
sql:  SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  "PVLDB" AND t4.year  =  2010
ground truth values:  [('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the authors who have papers in PVLDB after 2010 .
sql:  SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  "PVLDB" AND t4.year  >  2010
ground truth values:  [('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the authors who have papers in VLDB conference in 2002 .
sql:  SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  "VLDB" AND t4.year  =  2002
ground truth values:  [('conference.name', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the authors who have papers in VLDB conference before 2002 .
sql:  SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  "VLDB" AND t4.year  <  2002
ground truth values:  [('conference.name', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the authors who have papers in VLDB conference before 2002 after 1995 .
sql:  SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  "VLDB" AND t4.year  <  2002 AND t4.year  >  1995
ground truth values:  [('conference.name', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the area of PVLDB .
sql:  SELECT t3.name FROM DOMAIN AS t3 JOIN domain_journal AS t1 ON t3.did  =  t1.did JOIN journal AS t2 ON t2.jid  =  t1.jid WHERE t2.name  =  "PVLDB"
ground truth values:  [('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the authors who have papers in PVLDB .
sql:  SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  "PVLDB"
ground truth values:  [('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the organization " H. V. Jagadish " is in .
sql:  SELECT t2.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid WHERE t1.name  =  "H. V. Jagadish"
ground truth values:  [('author.name', 'H. V. Jagadish')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the conferences, which have papers by " H. V. Jagadish " .
sql:  SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  "H. V. Jagadish"
ground truth values:  [('author.name', 'H. V. Jagadish')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the journals, which have papers by " H. V. Jagadish " .
sql:  SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  "H. V. Jagadish"
ground truth values:  [('author.name', 'H. V. Jagadish')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the domain where " H. V. Jagadish " is focused .
sql:  SELECT t2.name FROM domain_author AS t3 JOIN author AS t1 ON t3.aid  =  t1.aid JOIN DOMAIN AS t2 ON t2.did  =  t3.did WHERE t1.name  =  "H. V. Jagadish"
ground truth values:  [('author.name', 'H. V. Jagadish')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the authors of " Making database systems usable " .
sql:  SELECT t1.name FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t3.title  =  "Making database systems usable"
ground truth values:  [('publication.title', 'Making database systems usable')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the conference, which published " Making database systems usable " .
sql:  SELECT t1.name FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t2.title  =  "Making database systems usable"
ground truth values:  [('publication.title', 'Making database systems usable')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the papers by " H. V. Jagadish " .
sql:  SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  "H. V. Jagadish"
ground truth values:  [('author.name', 'H. V. Jagadish')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the papers on VLDB conference .
sql:  SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  "VLDB"
ground truth values:  [('conference.name', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the papers on PVLDB .
sql:  SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  "PVLDB"
ground truth values:  [('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the papers on PVLDB after 2000 .
sql:  SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  "PVLDB" AND t2.year  >  2000
ground truth values:  [('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the papers on VLDB conference after 2000 .
sql:  SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  "VLDB" AND t2.year  >  2000
ground truth values:  [('conference.name', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the papers by " H. V. Jagadish " on PVLDB .
sql:  SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  "H. V. Jagadish" AND t2.name  =  "PVLDB"
ground truth values:  [('author.name', 'H. V. Jagadish'), ('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the papers by " H. V. Jagadish " on VLDB conference .
sql:  SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  "H. V. Jagadish" AND t2.name  =  "VLDB"
ground truth values:  [('author.name', 'H. V. Jagadish'), ('conference.name', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the papers by " H. V. Jagadish " after 2000 .
sql:  SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  "H. V. Jagadish" AND t3.year  >  2000
ground truth values:  [('author.name', 'H. V. Jagadish')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the papers by " H. V. Jagadish " on PVLDB after 2000 .
sql:   81%|████████▏ | 610/750 [00:32<00:03, 40.60it/s] 82%|████████▏ | 615/750 [00:32<00:03, 41.13it/s] 83%|████████▎ | 620/750 [00:32<00:03, 37.68it/s] 83%|████████▎ | 624/750 [00:33<00:03, 38.15it/s]SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  "H. V. Jagadish" AND t2.name  =  "PVLDB" AND t4.year  >  2000
ground truth values:  [('author.name', 'H. V. Jagadish'), ('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the papers by " H. V. Jagadish " on VLDB conference after 2000 .
sql:  SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  "H. V. Jagadish" AND t2.name  =  "VLDB" AND t4.year  >  2000
ground truth values:  [('author.name', 'H. V. Jagadish'), ('conference.name', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the area of the VLDB conference .
sql:  SELECT t2.name FROM domain_conference AS t3 JOIN conference AS t1 ON t3.cid  =  t1.cid JOIN DOMAIN AS t2 ON t2.did  =  t3.did WHERE t1.name  =  "VLDB"
ground truth values:  [('conference.name', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the authors who have papers in the VLDB conference .
sql:  SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  "VLDB"
ground truth values:  [('conference.name', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me all the keywords in Databases area .
sql:  SELECT t1.keyword FROM DOMAIN AS t3 JOIN domain_keyword AS t2 ON t3.did  =  t2.did JOIN keyword AS t1 ON t1.kid  =  t2.kid WHERE t3.name  =  "Databases"
ground truth values:  [('domain.name', 'Databases')]
matched values OrderedDict()
--------------------
--------------------
text:  return me all the papers, which contain the keyword " Natural Language " .
sql:  SELECT t3.title FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  "Natural Language"
ground truth values:  [('keyword.keyword', 'Natural Language')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the keywords of " Making database systems usable " .
sql:  SELECT t1.keyword FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t3.pid WHERE t2.title  =  "Making database systems usable"
ground truth values:  [('publication.title', 'Making database systems usable')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the keywords related to " H. V. Jagadish " .
sql:  SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  "H. V. Jagadish"
ground truth values:  [('author.name', 'H. V. Jagadish')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the keywords in VLDB conference .
sql:  SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  "VLDB"
ground truth values:  [('conference.name', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the keywords in PVLDB .
sql:  SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  "PVLDB"
ground truth values:  [('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the keywords in the papers of " University of Michigan " .
sql:  SELECT t1.keyword FROM organization AS t6 JOIN author AS t2 ON t6.oid  =  t2.oid JOIN writes AS t4 ON t4.aid  =  t2.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN publication_keyword AS t3 ON t5.pid  =  t3.pid JOIN keyword AS t1 ON t3.kid  =  t1.kid WHERE t6.name  =  "University of Michigan"
ground truth values:  [('organization.name', 'University of Michigan')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the papers of " H. V. Jagadish " containing keyword " User Study " .
sql:  SELECT t5.title FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t5 ON t5.pid  =  t3.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  "H. V. Jagadish" AND t1.keyword  =  "User Study"
ground truth values:  [('author.name', 'H. V. Jagadish'), ('keyword.keyword', 'User Study')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the papers in PVLDB containing keyword " Keyword search " .
sql:  SELECT t4.title FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t2.pid JOIN journal AS t3 ON t4.jid  =  t3.jid WHERE t3.name  =  "PVLDB" AND t1.keyword  =  "Keyword search"
ground truth values:  [('journal.name', 'PVLDB'), ('keyword.keyword', 'Keyword search')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the papers in VLDB conference containing keyword " Information Retrieval " .
sql:  SELECT t4.title FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t3.pid JOIN conference AS t2 ON t4.cid  =  t2.cid WHERE t2.name  =  "VLDB" AND t1.keyword  =  "Information Retrieval"
ground truth values:  [('conference.name', 'VLDB'), ('keyword.keyword', 'Information Retrieval')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the authors who have papers containing keyword " Relational Database " .
sql:  SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  "Relational Database"
ground truth values:  [('keyword.keyword', 'Relational Database')]
matched values OrderedDict()
--------------------
--------------------
text:  return me all the organizations in Databases area .
sql:  SELECT t2.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  "Databases"
ground truth values:  [('domain.name', 'Databases')]
matched values OrderedDict()
--------------------
--------------------
text:  return me all the organizations in Databases area located in " North America " .
sql:  SELECT t2.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  "Databases" AND t2.continent  =  "North America"
ground truth values:  [('domain.name', 'Databases'), ('organization.continent', 'North America')]
matched values OrderedDict()
--------------------
--------------------
text:  return me all the researchers in " University of Michigan " .
sql:  SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid WHERE t2.name  =  "University of Michigan"
ground truth values:  [('organization.name', 'University of Michigan')]
matched values OrderedDict()
--------------------
--------------------
text:  return me all the researchers in Databases area in " University of Michigan " .
sql:  SELECT t1.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  "Databases" AND t2.name  =  "University of Michigan"
ground truth values:  [('domain.name', 'Databases'), ('organization.name', 'University of Michigan')]
matched values OrderedDict()
--------------------
--------------------
text:   84%|████████▎ | 628/750 [00:33<00:03, 36.14it/s] 84%|████████▍ | 632/750 [00:33<00:03, 34.92it/s] 85%|████████▍ | 636/750 [00:33<00:03, 34.52it/s] 85%|████████▌ | 641/750 [00:33<00:03, 36.09it/s]return me all the papers in " University of Michigan " .
sql:  SELECT t4.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  "University of Michigan"
ground truth values:  [('organization.name', 'University of Michigan')]
matched values OrderedDict()
--------------------
--------------------
text:  return me all the papers after 2000 in " University of Michigan " .
sql:  SELECT t4.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  "University of Michigan" AND t4.year  >  2000
ground truth values:  [('organization.name', 'University of Michigan')]
matched values OrderedDict()
--------------------
--------------------
text:  return me all the papers in VLDB conference in " University of Michigan " .
sql:  SELECT t5.title FROM organization AS t3 JOIN author AS t1 ON t3.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN conference AS t2 ON t5.cid  =  t2.cid WHERE t2.name  =  "VLDB" AND t3.name  =  "University of Michigan"
ground truth values:  [('conference.name', 'VLDB'), ('organization.name', 'University of Michigan')]
matched values OrderedDict()
--------------------
--------------------
text:  return me all the papers in PVLDB in " University of Michigan " .
sql:  SELECT t5.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  "PVLDB" AND t2.name  =  "University of Michigan"
ground truth values:  [('journal.name', 'PVLDB'), ('organization.name', 'University of Michigan')]
matched values OrderedDict()
--------------------
--------------------
text:  return me all the papers in PVLDB after 2000 in " University of Michigan " .
sql:  SELECT t5.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  "PVLDB" AND t2.name  =  "University of Michigan" AND t5.year  >  2000
ground truth values:  [('journal.name', 'PVLDB'), ('organization.name', 'University of Michigan')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the paper in Databases area with more than 200 citations .
sql:  SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  "Databases" AND t3.citation_num  >  200
ground truth values:  [('domain.name', 'Databases')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the paper in PVLDB with more than 200 citations .
sql:  SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  "PVLDB" AND t2.citation_num  >  200
ground truth values:  [('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the paper in VLDB conference with more than 200 citations .
sql:  SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  "VLDB" AND t2.citation_num  >  200
ground truth values:  [('conference.name', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the paper by " H. V. Jagadish " with more than 200 citations .
sql:  SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  "H. V. Jagadish" AND t3.citation_num  >  200
ground truth values:  [('author.name', 'H. V. Jagadish')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the papers by " H. V. Jagadish " on PVLDB with more than 200 citations .
sql:  SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  "H. V. Jagadish" AND t2.name  =  "PVLDB" AND t4.citation_num  >  200
ground truth values:  [('author.name', 'H. V. Jagadish'), ('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the papers by " H. V. Jagadish " on VLDB conference with more than 200 citations .
sql:  SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  "H. V. Jagadish" AND t2.name  =  "VLDB" AND t4.citation_num  >  200
ground truth values:  [('author.name', 'H. V. Jagadish'), ('conference.name', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the paper after 2000 in Databases area with more than 200 citations .
sql:  SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  "Databases" AND t3.citation_num  >  200 AND t3.year  >  2000
ground truth values:  [('domain.name', 'Databases')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the paper after 2000 in PVLDB with more than 200 citations .
sql:  SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  "PVLDB" AND t2.citation_num  >  200 AND t2.year  >  2000
ground truth values:  [('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the paper after 2000 in VLDB conference with more than 200 citations .
sql:  SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  "VLDB" AND t2.citation_num  >  200 AND t2.year  >  2000
ground truth values:  [('conference.name', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of conferences which have papers by " H. V. Jagadish " .
sql:  SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  "H. V. Jagadish"
ground truth values:  [('author.name', 'H. V. Jagadish')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of journals which have papers by " H. V. Jagadish " .
sql:  SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  "H. V. Jagadish"
ground truth values:  [('author.name', 'H. V. Jagadish')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of papers written by " H. V. Jagadish " in each year .
sql:  SELECT COUNT ( DISTINCT t3.title )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  "H. V. Jagadish" GROUP BY t3.year
ground truth values:  [('author.name', 'H. V. Jagadish')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of authors of " Making database systems usable " .
sql:  SELECT COUNT ( DISTINCT t1.name ) FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t3.title  =  "Making database systems usable"
ground truth values:  [('publication.title', 'Making database systems usable')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of citations of " Making database systems usable " in each year .
sql:  SELECT YEAR  ,  SUM ( citation_num ) FROM publication WHERE title  =  "Making database systems usable" GROUP BY YEAR
ground truth values:  [('publication.title', 'Making database systems usable')]
matched values OrderedDict()
--------------------
--------------------
text:   86%|████████▌ | 646/750 [00:33<00:02, 38.35it/s] 87%|████████▋ | 652/750 [00:33<00:02, 42.78it/s] 88%|████████▊ | 657/750 [00:33<00:02, 38.55it/s] 88%|████████▊ | 663/750 [00:34<00:02, 40.96it/s]return me the number of citations of " Making database systems usable " before 2010 .
sql:  SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t3 JOIN cite AS t1 ON t3.pid  =  t1.cited JOIN publication AS t2 ON t2.pid  =  t1.citing WHERE t3.title  =  "Making database systems usable" AND t2.year  <  2010
ground truth values:  [('publication.title', 'Making database systems usable')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of papers by " H. V. Jagadish " .
sql:  SELECT COUNT ( DISTINCT t3.title ) FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  "H. V. Jagadish"
ground truth values:  [('author.name', 'H. V. Jagadish')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of papers on VLDB conference .
sql:  SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  "VLDB"
ground truth values:  [('conference.name', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of papers on PVLDB .
sql:  SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  "PVLDB"
ground truth values:  [('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of papers on PVLDB after 2000 .
sql:  SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  "PVLDB" AND t2.year  >  2000
ground truth values:  [('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of papers on VLDB conference after 2000 .
sql:  SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  "VLDB" AND t2.year  >  2000
ground truth values:  [('conference.name', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of papers by " H. V. Jagadish " on PVLDB .
sql:  SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  "H. V. Jagadish" AND t2.name  =  "PVLDB"
ground truth values:  [('author.name', 'H. V. Jagadish'), ('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of papers by " H. V. Jagadish " on VLDB conference .
sql:  SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  "H. V. Jagadish" AND t2.name  =  "VLDB"
ground truth values:  [('author.name', 'H. V. Jagadish'), ('conference.name', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of papers by " H. V. Jagadish " after 2000 .
sql:  SELECT COUNT ( DISTINCT t3.title ) FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  "H. V. Jagadish" AND t3.year  >  2000
ground truth values:  [('author.name', 'H. V. Jagadish')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of papers by " H. V. Jagadish " on PVLDB after 2000 .
sql:  SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  "H. V. Jagadish" AND t2.name  =  "PVLDB" AND t4.year  >  2000
ground truth values:  [('author.name', 'H. V. Jagadish'), ('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of papers by " H. V. Jagadish " on VLDB conference after 2000 .
sql:  SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  "H. V. Jagadish" AND t2.name  =  "VLDB" AND t4.year  >  2000
ground truth values:  [('author.name', 'H. V. Jagadish'), ('conference.name', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of keywords in Databases area .
sql:  SELECT COUNT ( DISTINCT t1.keyword ) FROM DOMAIN AS t3 JOIN domain_keyword AS t2 ON t3.did  =  t2.did JOIN keyword AS t1 ON t1.kid  =  t2.kid WHERE t3.name  =  "Databases"
ground truth values:  [('domain.name', 'Databases')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of papers which contain the keyword " Natural Language " .
sql:  SELECT COUNT ( DISTINCT t3.title ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  "Natural Language"
ground truth values:  [('keyword.keyword', 'Natural Language')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of the keywords of " Making database systems usable " .
sql:  SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t3.pid WHERE t2.title  =  "Making database systems usable"
ground truth values:  [('publication.title', 'Making database systems usable')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of the keywords related to " H. V. Jagadish " .
sql:  SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  "H. V. Jagadish"
ground truth values:  [('author.name', 'H. V. Jagadish')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of keywords in VLDB conference .
sql:  SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  "VLDB"
ground truth values:  [('conference.name', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of keywords in PVLDB .
sql:  SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  "PVLDB"
ground truth values:  [('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of keywords in the papers of " University of Michigan " .
sql:  SELECT COUNT ( DISTINCT t1.keyword ) FROM organization AS t6 JOIN author AS t2 ON t6.oid  =  t2.oid JOIN writes AS t4 ON t4.aid  =  t2.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN publication_keyword AS t3 ON t5.pid  =  t3.pid JOIN keyword AS t1 ON t3.kid  =  t1.kid WHERE t6.name  =  "University of Michigan"
ground truth values:  [('organization.name', 'University of Michigan')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of the papers of " H. V. Jagadish " containing keyword " User Study " .
sql:  SELECT COUNT ( DISTINCT t5.title ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t5 ON t5.pid  =  t3.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  "H. V. Jagadish" AND t1.keyword  =  "User Study"
ground truth values:  [('author.name', 'H. V. Jagadish'), ('keyword.keyword', 'User Study')]
matched values OrderedDict()
--------------------
--------------------
text:   89%|████████▉ | 668/750 [00:34<00:02, 37.40it/s] 90%|████████▉ | 674/750 [00:34<00:01, 40.16it/s] 91%|█████████ | 679/750 [00:34<00:01, 36.26it/s] 91%|█████████ | 683/750 [00:34<00:01, 35.82it/s]return me the number of papers in PVLDB containing keyword " Keyword search " .
sql:  SELECT COUNT ( DISTINCT t4.title ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t2.pid JOIN journal AS t3 ON t4.jid  =  t3.jid WHERE t3.name  =  "PVLDB" AND t1.keyword  =  "Keyword search"
ground truth values:  [('journal.name', 'PVLDB'), ('keyword.keyword', 'Keyword search')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of papers in VLDB conference containing keyword " Information Retrieval " .
sql:  SELECT COUNT ( DISTINCT t4.title ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t3.pid JOIN conference AS t2 ON t4.cid  =  t2.cid WHERE t2.name  =  "VLDB" AND t1.keyword  =  "Information Retrieval"
ground truth values:  [('conference.name', 'VLDB'), ('keyword.keyword', 'Information Retrieval')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of authors who have papers containing keyword " Relational Database " .
sql:  SELECT COUNT ( DISTINCT t2.name ) FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  "Relational Database"
ground truth values:  [('keyword.keyword', 'Relational Database')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the total citations of the papers containing keyword " Natural Language "
sql:  SELECT SUM ( t3.citation_num ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  "Natural Language"
ground truth values:  [('keyword.keyword', 'Natural Language')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of the organizations in " North America " .
sql:  SELECT COUNT ( DISTINCT name ) FROM organization WHERE continent  =  "North America"
ground truth values:  [('organization.continent', 'North America')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of organizations in Databases area .
sql:  SELECT COUNT ( DISTINCT t2.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  "Databases"
ground truth values:  [('domain.name', 'Databases')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of organizations in Databases area located in " North America " .
sql:  SELECT COUNT ( DISTINCT t2.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  "Databases" AND t2.continent  =  "North America"
ground truth values:  [('domain.name', 'Databases'), ('organization.continent', 'North America')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of papers in " University of Michigan " .
sql:  SELECT COUNT ( DISTINCT t4.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  "University of Michigan"
ground truth values:  [('organization.name', 'University of Michigan')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of papers in " University of Michigan " in Databases area .
sql:  SELECT COUNT ( DISTINCT t4.title ) FROM domain_author AS t6 JOIN author AS t1 ON t6.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t6.did JOIN domain_publication AS t2 ON t3.did  =  t2.did JOIN organization AS t5 ON t5.oid  =  t1.oid JOIN publication AS t4 ON t4.pid  =  t2.pid WHERE t3.name  =  "Databases" AND t5.name  =  "University of Michigan"
ground truth values:  [('domain.name', 'Databases'), ('organization.name', 'University of Michigan')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of papers after 2000 in " University of Michigan " .
sql:  SELECT COUNT ( DISTINCT t4.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  "University of Michigan" AND t4.year  >  2000
ground truth values:  [('organization.name', 'University of Michigan')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of papers in VLDB conference in " University of Michigan " .
sql:  SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t3 JOIN author AS t1 ON t3.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN conference AS t2 ON t5.cid  =  t2.cid WHERE t2.name  =  "VLDB" AND t3.name  =  "University of Michigan"
ground truth values:  [('conference.name', 'VLDB'), ('organization.name', 'University of Michigan')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of papers in PVLDB in " University of Michigan " .
sql:  SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  "PVLDB" AND t2.name  =  "University of Michigan"
ground truth values:  [('journal.name', 'PVLDB'), ('organization.name', 'University of Michigan')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of papers in PVLDB after 2000 in " University of Michigan " .
sql:  SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  "PVLDB" AND t2.name  =  "University of Michigan" AND t5.year  >  2000
ground truth values:  [('journal.name', 'PVLDB'), ('organization.name', 'University of Michigan')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the total citations of the papers in " University of Michigan " .
sql:  SELECT SUM ( t4.citation_num ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  "University of Michigan"
ground truth values:  [('organization.name', 'University of Michigan')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of researchers in " University of Michigan " .
sql:  SELECT COUNT ( DISTINCT t1.name ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid WHERE t2.name  =  "University of Michigan"
ground truth values:  [('organization.name', 'University of Michigan')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of researchers in Databases area in " University of Michigan " .
sql:  SELECT COUNT ( DISTINCT t1.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  "Databases" AND t2.name  =  "University of Michigan"
ground truth values:  [('domain.name', 'Databases'), ('organization.name', 'University of Michigan')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of authors who have papers in PVLDB .
sql:  SELECT COUNT ( DISTINCT t1.name ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  "PVLDB"
ground truth values:  [('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:   92%|█████████▏| 688/750 [00:34<00:01, 38.16it/s] 93%|█████████▎| 694/750 [00:34<00:01, 42.00it/s] 93%|█████████▎| 700/750 [00:35<00:01, 42.26it/s]return me the number of authors who have papers in the VLDB conference .
sql:  SELECT COUNT ( DISTINCT t1.name ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  "VLDB"
ground truth values:  [('conference.name', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of papers published on PVLDB before 2000 .
sql:  SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  "PVLDB" AND t2.year  <  2000
ground truth values:  [('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of papers published in the VLDB conference before 2000 .
sql:  SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  "VLDB" AND t2.year  <  2000
ground truth values:  [('conference.name', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the total citations of all the papers in PVLDB .
sql:  SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  "PVLDB"
ground truth values:  [('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the citations of each paper in PVLDB .
sql:  SELECT t2.citation_num FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  "PVLDB"
ground truth values:  [('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the total citations of papers in PVLDB in 2005 .
sql:  SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  "PVLDB" AND t2.year  =  2005
ground truth values:  [('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the total citations of papers in PVLDB before 2005 .
sql:  SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  "PVLDB" AND t2.year  <  2005
ground truth values:  [('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the total citations of papers in PVLDB in each year .
sql:  SELECT t2.year  ,  SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  "PVLDB" GROUP BY t2.year
ground truth values:  [('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of papers published in PVLDB in each year .
sql:  SELECT COUNT ( DISTINCT t2.title )  ,  t2.year FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  "PVLDB" GROUP BY t2.year
ground truth values:  [('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the total citations of all the papers in the VLDB conference .
sql:  SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  "VLDB"
ground truth values:  [('conference.name', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the citations of each paper in the VLDB conference .
sql:  SELECT t2.citation_num FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  "VLDB"
ground truth values:  [('conference.name', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the total citations of papers in the VLDB conference in 2005 .
sql:  SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  "VLDB" AND t2.year  =  2005
ground truth values:  [('conference.name', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the total citations of papers in the VLDB conference before 2005 .
sql:  SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  "VLDB" AND t2.year  <  2005
ground truth values:  [('conference.name', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the total citations of papers in the VLDB conference in each year .
sql:  SELECT t2.year  ,  SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  "VLDB" GROUP BY t2.year
ground truth values:  [('conference.name', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of papers published in the VLDB conference in each year .
sql:  SELECT COUNT ( DISTINCT t2.title )  ,  t2.year FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  "VLDB" GROUP BY t2.year
ground truth values:  [('conference.name', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the authors who have cooperated both with " H. V. Jagadish " and " Divesh Srivastava " .
sql:  SELECT t2.name FROM writes AS t4 JOIN author AS t2 ON t4.aid  =  t2.aid JOIN publication AS t7 ON t4.pid  =  t7.pid JOIN writes AS t5 ON t5.pid  =  t7.pid JOIN writes AS t6 ON t6.pid  =  t7.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t3 ON t6.aid  =  t3.aid WHERE t1.name  =  "H. V. Jagadish" AND t3.name  =  "Divesh Srivastava"
ground truth values:  [('author.name', 'H. V. Jagadish'), ('author.name', 'Divesh Srivastava')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the authors who have cooperated with " H. V. Jagadish " after 2000 .
sql:  SELECT t2.name FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  "H. V. Jagadish" AND t5.year  >  2000
ground truth values:  [('author.name', 'H. V. Jagadish')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the papers written by " H. V. Jagadish " and " Divesh Srivastava " .
sql:  SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  "H. V. Jagadish" AND t1.name  =  "Divesh Srivastava"
ground truth values:  [('author.name', 'H. V. Jagadish'), ('author.name', 'Divesh Srivastava')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the papers written by " H. V. Jagadish " and " Yunyao Li " after 2005 .
sql:  SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  "H. V. Jagadish" AND t1.name  =  "Yunyao Li" AND t5.year  >  2005
ground truth values:  [('author.name', 'H. V. Jagadish'), ('author.name', 'Yunyao Li')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the papers written by " H. V. Jagadish " and " Yunyao Li " on PVLDB .
sql:  SELECT t6.title FROM publication AS t6 JOIN journal AS t4 ON t6.jid  =  t4.jid JOIN writes AS t3 ON t3.pid  =  t6.pid JOIN writes AS t5 ON t5.pid  =  t6.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  "H. V. Jagadish" AND t1.name  =  "Yunyao Li" AND t4.name  =  "PVLDB"
ground truth values:  [('author.name', 'H. V. Jagadish'), ('author.name', 'Yunyao Li'), ('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the papers written by " H. V. Jagadish " and " Yunyao Li " on PVLDB after 2005 .
sql:   94%|█████████▍| 705/750 [00:35<00:01, 34.43it/s] 95%|█████████▍| 709/750 [00:35<00:01, 31.76it/s] 95%|█████████▌| 713/750 [00:35<00:01, 29.14it/s] 96%|█████████▌| 717/750 [00:35<00:01, 28.77it/s]SELECT t6.title FROM publication AS t6 JOIN journal AS t4 ON t6.jid  =  t4.jid JOIN writes AS t3 ON t3.pid  =  t6.pid JOIN writes AS t5 ON t5.pid  =  t6.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  "H. V. Jagadish" AND t1.name  =  "Yunyao Li" AND t4.name  =  "PVLDB" AND t6.year  >  2005
ground truth values:  [('author.name', 'H. V. Jagadish'), ('author.name', 'Yunyao Li'), ('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the authors who have cooperated with " H. V. Jagadish " .
sql:  SELECT t2.name FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  "H. V. Jagadish"
ground truth values:  [('author.name', 'H. V. Jagadish')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the papers written by " H. V. Jagadish " and " Divesh Srivastava " before 2000 .
sql:  SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  "H. V. Jagadish" AND t1.name  =  "Divesh Srivastava" AND t5.year  <  2000
ground truth values:  [('author.name', 'H. V. Jagadish'), ('author.name', 'Divesh Srivastava')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the authors who have cited the papers by " H. V. Jagadish " .
sql:  SELECT t2.name FROM publication AS t7 JOIN cite AS t5 ON t7.pid  =  t5.citing JOIN publication AS t6 ON t6.pid  =  t5.cited JOIN writes AS t3 ON t3.pid  =  t7.pid JOIN writes AS t4 ON t4.pid  =  t6.pid JOIN author AS t2 ON t3.aid  =  t2.aid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  "H. V. Jagadish"
ground truth values:  [('author.name', 'H. V. Jagadish')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of papers written by " H. V. Jagadish " and " Divesh Srivastava " .
sql:  SELECT COUNT ( DISTINCT t5.title ) FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  "H. V. Jagadish" AND t1.name  =  "Divesh Srivastava"
ground truth values:  [('author.name', 'H. V. Jagadish'), ('author.name', 'Divesh Srivastava')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of papers written by " H. V. Jagadish " and " Divesh Srivastava " before 2000 .
sql:  SELECT COUNT ( DISTINCT t5.title ) FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  "H. V. Jagadish" AND t1.name  =  "Divesh Srivastava" AND t5.year  <  2000
ground truth values:  [('author.name', 'H. V. Jagadish'), ('author.name', 'Divesh Srivastava')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of papers written by " H. V. Jagadish " , " Yunyao Li " , and " Cong Yu " .
sql:  SELECT COUNT ( DISTINCT t7.title ) FROM writes AS t4 JOIN author AS t2 ON t4.aid  =  t2.aid JOIN publication AS t7 ON t4.pid  =  t7.pid JOIN writes AS t5 ON t5.pid  =  t7.pid JOIN writes AS t6 ON t6.pid  =  t7.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t3 ON t6.aid  =  t3.aid WHERE t2.name  =  "Cong Yu" AND t1.name  =  "H. V. Jagadish" AND t3.name  =  "Yunyao Li"
ground truth values:  [('author.name', 'Cong Yu'), ('author.name', 'H. V. Jagadish'), ('author.name', 'Yunyao Li')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of authors who have cooperated with " H. V. Jagadish " .
sql:  SELECT COUNT ( DISTINCT t2.name ) FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  "H. V. Jagadish"
ground truth values:  [('author.name', 'H. V. Jagadish')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the number of authors who have cited the papers by " H. V. Jagadish " .
sql:  SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t7 JOIN cite AS t5 ON t7.pid  =  t5.citing JOIN publication AS t6 ON t6.pid  =  t5.cited JOIN writes AS t3 ON t3.pid  =  t7.pid JOIN writes AS t4 ON t4.pid  =  t6.pid JOIN author AS t2 ON t3.aid  =  t2.aid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  "H. V. Jagadish"
ground truth values:  [('author.name', 'H. V. Jagadish')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the papers written by " H. V. Jagadish " and " Divesh Srivastava " with more than 200 citations .
sql:  SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  "H. V. Jagadish" AND t1.name  =  "Divesh Srivastava" AND t5.citation_num  >  200
ground truth values:  [('author.name', 'H. V. Jagadish'), ('author.name', 'Divesh Srivastava')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the author who has the most number of papers containing keyword " Relational Database " .
sql:  SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  "Relational Database" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1
ground truth values:  [('keyword.keyword', 'Relational Database')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the conference that has the most number of papers containing keyword " Relational Database " .
sql:  SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t1.keyword  =  "Relational Database" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1
ground truth values:  [('keyword.keyword', 'Relational Database')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the conference, which has the most number of papers containing keyword " Relational Database " .
sql:  SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t1.keyword  =  "Relational Database" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1
ground truth values:  [('keyword.keyword', 'Relational Database')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the journal that has the most number of papers containing keyword " Relational Database " .
sql:  SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t1.keyword  =  "Relational Database" GROUP BY t3.name ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1
ground truth values:  [('keyword.keyword', 'Relational Database')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the journal, which has the most number of papers containing keyword " Relational Database " .
sql:  SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t1.keyword  =  "Relational Database" GROUP BY t3.name ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1
ground truth values:  [('keyword.keyword', 'Relational Database')]
matched values OrderedDict()
--------------------
 96%|█████████▌| 721/750 [00:35<00:00, 29.32it/s] 97%|█████████▋| 725/750 [00:35<00:00, 27.96it/s] 97%|█████████▋| 729/750 [00:36<00:00, 28.75it/s] 98%|█████████▊| 734/750 [00:36<00:00, 32.74it/s]--------------------
text:  return me the keyword, which have been contained by the most number of papers in VLDB conference .
sql:  SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  "VLDB" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1
ground truth values:  [('conference.name', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the keyword, which have been contained by the most number of papers in PVLDB .
sql:  SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  "PVLDB" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1
ground truth values:  [('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the keyword, which have been contained by the most number of papers by " H. V. Jagadish " .
sql:  SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  "H. V. Jagadish" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1
ground truth values:  [('author.name', 'H. V. Jagadish')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the author in the " University of Michigan " whose papers have the most total citations .
sql:  SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  "University of Michigan" GROUP BY t1.name ORDER BY SUM ( t4.citation_num ) DESC LIMIT 1
ground truth values:  [('organization.name', 'University of Michigan')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the author in the " University of Michigan " whose papers in Databases area have the most total citations .
sql:  SELECT t1.name FROM DOMAIN AS t4 JOIN domain_publication AS t2 ON t4.did  =  t2.did JOIN publication AS t5 ON t5.pid  =  t2.pid JOIN writes AS t3 ON t3.pid  =  t5.pid JOIN author AS t1 ON t3.aid  =  t1.aid JOIN organization AS t6 ON t6.oid  =  t1.oid WHERE t4.name  =  "Databases" AND t6.name  =  "University of Michigan" GROUP BY t1.name ORDER BY SUM ( t5.citation_num ) DESC LIMIT 1
ground truth values:  [('domain.name', 'Databases'), ('organization.name', 'University of Michigan')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the papers written by " H. V. Jagadish " and " Divesh Srivastava " with the most number of citations .
sql:  SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  "Divesh Srivastava" AND t1.name  =  "H. V. Jagadish" ORDER BY t5.citation_num DESC LIMIT 1
ground truth values:  [('author.name', 'Divesh Srivastava'), ('author.name', 'H. V. Jagadish')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the conferences, which have more than 10 papers by " H. V. Jagadish " .
sql:  SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  "H. V. Jagadish" GROUP BY t2.name HAVING COUNT ( DISTINCT t4.title )  >  10
ground truth values:  [('author.name', 'H. V. Jagadish')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the conference, which have the most number of papers by " H. V. Jagadish " .
sql:  SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  "H. V. Jagadish" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1
ground truth values:  [('author.name', 'H. V. Jagadish')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the journals, which have more than 10 papers by " H. V. Jagadish " .
sql:  SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  "H. V. Jagadish" GROUP BY t2.name HAVING COUNT ( DISTINCT t4.title )  >  10
ground truth values:  [('author.name', 'H. V. Jagadish')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the journal, which have the most number of papers by " H. V. Jagadish " .
sql:  SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  "H. V. Jagadish" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1
ground truth values:  [('author.name', 'H. V. Jagadish')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the paper in Databases area with the most citations .
sql:  SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  "Databases" ORDER BY t3.citation_num DESC LIMIT 1
ground truth values:  [('domain.name', 'Databases')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the paper in PVLDB with the most citations .
sql:  SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  "PVLDB" ORDER BY t2.citation_num DESC LIMIT 1
ground truth values:  [('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the paper in VLDB conference with the most citations .
sql:  SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  "VLDB" ORDER BY t2.citation_num DESC LIMIT 1
ground truth values:  [('conference.name', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the paper by " H. V. Jagadish " with the most citations .
sql:  SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  "H. V. Jagadish" ORDER BY t3.citation_num DESC LIMIT 1
ground truth values:  [('author.name', 'H. V. Jagadish')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the paper after 2000 in Databases area with the most citations .
sql:  SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  "Databases" AND t3.year  >  2000 ORDER BY t3.citation_num DESC LIMIT 1
ground truth values:  [('domain.name', 'Databases')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the paper after 2000 in PVLDB with the most citations .
sql:  SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  "PVLDB" AND t2.year  >  2000 ORDER BY t2.citation_num DESC LIMIT 1
ground truth values:  [('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the paper after 2000 in VLDB conference with the most citations .
sql:  SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  "VLDB" AND t2.year  >  2000 ORDER BY t2.citation_num DESC LIMIT 1
ground truth values:  [('conference.name', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the authors who have more than 10 papers in PVLDB .
sql:   99%|█████████▊| 739/750 [00:36<00:00, 34.26it/s] 99%|█████████▉| 743/750 [00:36<00:00, 32.75it/s]100%|█████████▉| 747/750 [00:36<00:00, 31.70it/s]100%|██████████| 750/750 [00:36<00:00, 20.43it/s]
SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  "PVLDB" GROUP BY t1.name HAVING COUNT ( DISTINCT t4.title )  >  10
ground truth values:  [('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the authors who have the most number of papers in PVLDB .
sql:  SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  "PVLDB" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1
ground truth values:  [('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the authors who have more than 10 papers containing keyword " Relational Database " .
sql:  SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  "Relational Database" GROUP BY t2.name HAVING COUNT ( DISTINCT t3.title )  >  10
ground truth values:  [('keyword.keyword', 'Relational Database')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the conferences, which have more than 60 papers containing keyword " Relational Database " .
sql:  SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t1.keyword  =  "Relational Database" GROUP BY t2.name HAVING COUNT ( DISTINCT t3.title )  >  60
ground truth values:  [('keyword.keyword', 'Relational Database')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the journals, which have more than 60 papers containing keyword " Relational Database " .
sql:  SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t1.keyword  =  "Relational Database" GROUP BY t3.name HAVING COUNT ( DISTINCT t2.title )  >  60
ground truth values:  [('keyword.keyword', 'Relational Database')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the keywords, which have been contained by more than 100 papers in VLDB conference .
sql:  SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  "VLDB" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t3.title )  >  100
ground truth values:  [('conference.name', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the keywords, which have been contained by more than 100 papers in PVLDB .
sql:  SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  "PVLDB" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t2.title )  >  100
ground truth values:  [('journal.name', 'PVLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the keywords, which have been contained by more than 10 papers of " H. V. Jagadish " .
sql:  SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  "H. V. Jagadish" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t3.title )  >  10
ground truth values:  [('author.name', 'H. V. Jagadish')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the authors who have more than 10 papers in the VLDB conference .
sql:  SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  "VLDB" GROUP BY t1.name HAVING COUNT ( DISTINCT t4.title )  >  10
ground truth values:  [('conference.name', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the author who has the most number of papers in the VLDB conference .
sql:  SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  "VLDB" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1
ground truth values:  [('conference.name', 'VLDB')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the author in the " University of Michigan " whose papers have more than 5000 total citations .
sql:  SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  "University of Michigan" GROUP BY t1.name HAVING SUM ( t4.citation_num )  >  5000
ground truth values:  [('organization.name', 'University of Michigan')]
matched values OrderedDict()
--------------------
--------------------
text:  return me the author in the " University of Michigan " in Databases area whose papers have more than 5000 total citations .
sql:  SELECT t1.name FROM domain_author AS t6 JOIN author AS t1 ON t6.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t6.did JOIN organization AS t5 ON t5.oid  =  t1.oid JOIN writes AS t2 ON t2.aid  =  t1.aid JOIN publication AS t4 ON t2.pid  =  t4.pid WHERE t3.name  =  "Databases" AND t5.name  =  "University of Michigan" GROUP BY t1.name HAVING SUM ( t4.citation_num )  >  5000
ground truth values:  [('domain.name', 'Databases'), ('organization.name', 'University of Michigan')]
matched values OrderedDict()
--------------------
********** dev Data Statistics ***********
OOV observed in 0/750 examples
Denormalization skipped for 0/750 examples
Schema truncated for 0/750 examples
Token restored for 750/750 examples
+ text sizes
# text tokens (avg) = 11.164
# text tokens (min) = 1
# text tokens (max) = 32
+ input sizes
input size (avg) = 131.128
input size (min) = 113 
input size (max) = 177
+ program sizes
# program tokens (avg) = 35.38666666666666	# program whole field tokens = 35.38666666666666 (avg)	
# program tokens (min) = 6	# program whole field tokens = 6 (min)	
# program tokens (max) = 75	# program whole field tokens = 75 (max)	
max pointer span size = 0
---  value extraction performance ---
micro precision = 0.05333333333333334
micro recall = 0.05333333333333334
micro F1 = 0.05333333333333334
Processed data dumped to data/spider/spider.bridge.question-split.ppl-0.85.2.dn.eo.bert.pkl
