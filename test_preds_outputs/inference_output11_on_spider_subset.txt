run python3 -m src.experiments     --inference     --data_dir data/spider     --db_dir data/spider/database     --dataset_name spider     --question_split          --question_only               --denormalize_sql               --table_shuffling     --use_lstm_encoder     --use_meta_data_encoding          --sql_consistency_check          --use_picklist     --anchor_text_match_threshold 0.85               --top_k_picklist_matches 2     --process_sql_in_execution_order               --num_random_tables_added 0                         --save_best_model_only     --schema_augmentation_factor 1          --data_augmentation_factor 1          --vocab_min_freq 0     --text_vocab_min_freq 0     --program_vocab_min_freq 0     --num_values_per_field 0     --max_in_seq_len 512     --max_out_seq_len 60     --model bridge     --num_steps 100000     --curriculum_interval 0     --num_peek_steps 1000     --num_accumulation_steps 2     --train_batch_size 8     --dev_batch_size 8     --encoder_input_dim 1024     --encoder_hidden_dim 400     --decoder_input_dim 400     --num_rnn_layers 1     --num_const_attn_layers 0     --emb_dropout_rate 0.3     --pretrained_lm_dropout_rate 0     --rnn_layer_dropout_rate 0     --rnn_weight_dropout_rate 0     --cross_attn_dropout_rate 0     --cross_attn_num_heads 8     --res_input_dropout_rate 0.2     --res_layer_dropout_rate 0     --ff_input_dropout_rate 0.4     --ff_hidden_dropout_rate 0.0     --pretrained_transformer bert-large-uncased          --bert_finetune_rate 0.00006     --learning_rate 0.0005     --learning_rate_scheduler inverse-square     --trans_learning_rate_scheduler inverse-square     --warmup_init_lr 0.0005     --warmup_init_ft_lr 0.00003     --num_warmup_steps 4000     --grad_norm 0.3     --decoding_algorithm beam-search     --beam_size 16     --bs_alpha 1.05     --gpu 0     --checkpoint_path /home/shelunts/thesis/TabularSemantingParsing/model/spider.bridge.lstm.meta.ts.ppl-0.85.2.dn.eo.feat.bert-large-uncased.xavier-1024-400-400-8-2-0.0005-inv-sqr-0.0005-4000-6e-05-inv-sqr-3e-05-4000-0.3-0.3-0.0-0.0-1-8-0.0-0.0-res-0.2-0.0-ff-0.4-0.0.220119-195756.tg05/model-best.16.tar
2022-01-24 13:18:10.726770: I tensorflow/stream_executor/platform/default/dso_loader.cc:53] Successfully opened dynamic library libcudart.so.11.0
  0%|          | 0/13 [00:00<?, ?it/s]/usr/lib/python3/dist-packages/torch/_tensor.py:575: UserWarning: floor_divide is deprecated, and will be removed in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values.
To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor'). (Triggered internally at  ../aten/src/ATen/native/BinaryOps.cpp:461.)
  return torch.floor_divide(self, other)
  8%|▊         | 1/13 [00:01<00:17,  1.44s/it] 15%|█▌        | 2/13 [00:02<00:14,  1.32s/it]Model directory exists: /home/shelunts/thesis/TabularSemantingParsing/model/spider.bridge.lstm.meta.ts.ppl-0.85.2.dn.eo.feat.bert-large-uncased.xavier-1024-400-400-8-2-0.0005-inv-sqr-0.0005-4000-6e-05-inv-sqr-3e-05-4000-0.3-0.3-0.0-0.0-1-8-0.0-0.0-res-0.2-0.0-ff-0.4-0.0
Visualization directory exists: /home/shelunts/thesis/TabularSemantingParsing/viz/spider.bridge.lstm.meta.ts.ppl-0.85.2.dn.eo.feat.bert-large-uncased.xavier-1024-400-400-8-2-0.0005-inv-sqr-0.0005-4000-6e-05-inv-sqr-3e-05-4000-0.3-0.3-0.0-0.0-1-8-0.0-0.0-res-0.2-0.0-ff-0.4-0.0
* text vocab size = 30522
* program vocab size = 99

pretrained_transformer = bert-large-uncased
fix_pretrained_transformer_parameters = False

bridge module created
loading preprocessed data: data/spider/spider.bridge.question-split.ppl-0.85.2.dn.eo.bert.pkl
100 dev examples loaded
=> loading checkpoint '/home/shelunts/thesis/TabularSemantingParsing/model/spider.bridge.lstm.meta.ts.ppl-0.85.2.dn.eo.feat.bert-large-uncased.xavier-1024-400-400-8-2-0.0005-inv-sqr-0.0005-4000-6e-05-inv-sqr-3e-05-4000-0.3-0.3-0.0-0.0-1-8-0.0-0.0-res-0.2-0.0-ff-0.4-0.0.220119-195756.tg05/model-best.16.tar'
0 pre-computed prediction order reconstruction cached
Parsing error: from Charges select Charges.charge_amount order by Charges.charge_type desc limit limit 1
Parsing error: from Charges select Charges.charge_amount order by Charges.charge_amount desc limit limit 1
Parsing error: from Charges select Charges.charge_amount order by Charges.charge_type desc limit desc
Example 17
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'What is the charge amount of the most expensive charge type?'
NL tokens: [b'what', b'is', b'the', b'charge', b'amount', b'of', b'the', b'most', b'expensive', b'charge', b'type', b'?']
NL tokens (original): [b'What', b'is', b'the', b'charge', b'amount', b'of', b'the', b'most', b'expensive', b'charge', b'type', b'?']
['[CLS]', 'what', 'is', 'the', 'charge', 'amount', 'of', 'the', 'most', 'expensive', 'charge', 'type', '?', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT max(charge_amount) FROM Charges'
Target TF-P tokens: from Charges select max (Charges.charge_amount)

[WRONG] [easy] Pred 0:	b'SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_type DESC LIMIT 1' (-0.080) (length=10)
[WRONG] [easy] Pred 1:	b'SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_amount DESC LIMIT 1' (-0.636) (length=10)
[WRONG] [easy] Pred 2:	b'SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = (SELECT Charges.charge_type FROM Charges ORDER BY Charges.charge_type DESC LIMIT 1)' (-3.020) (length=19)
[WRONG] [easy] Pred 3:	b'SELECT Charges.charge_amount FROM Charges GROUP BY Charges.charge_type ORDER BY MAX(Charges.charge_amount) DESC LIMIT 1' (-3.833) (length=15)
[WRONG] [easy] Pred 4:	b'SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = (SELECT Charges.charge_type FROM Charges ORDER BY Charges.charge_type DESC LIMIT 1) ORDER BY Charges.charge_amount DESC LIMIT 1' (-3.945) (length=24)
[WRONG] [easy] Pred 5:	b'SELECT Charges.charge_amount FROM Charges GROUP BY Charges.charge_type ORDER BY COUNT(*) DESC LIMIT 1' (-4.611) (length=15)
[WRONG] [easy] Pred 6:	b'SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_type DESC LIMIT 1' (-4.683) (length=12)
[WRONG] [easy] Pred 7:	b'SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_amount DESC LIMIT 1' (-4.940) (length=12)
[WRONG] [easy] Pred 8:	b'SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_type DESC LIMIT 3' (-5.160) (length=10)
[WRONG] [easy] Pred 9:	b'SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_amount DESC LIMIT 3' (-5.546) (length=10)
[WRONG] [easy] Pred 10:	b'SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_type ASC LIMIT 1' (-5.599) (length=10)
[WRONG] [easy] Pred 11:	b'SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = (SELECT Charges.charge_type FROM Charges ORDER BY Charges.charge_type DESC LIMIT 3)' (-5.781) (length=19)
[WRONG] [easy] Pred 12:	b'SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_amount ASC LIMIT 1' (-6.122) (length=10)
Error Case 1

Example 19
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'Show the names of students who have at least 2 likes.'
NL tokens: [b'show', b'the', b'names', b'of', b'students', b'who', b'have', b'at', b'least', b'2', b'likes', b'.']
NL tokens (original): [b'Show', b'the', b'names', b'of', b'students', b'who', b'have', b'at', b'least', b'2', b'likes', b'.']
['[CLS]', 'show', 'the', 'names', 'of', 'students', 'who', 'have', 'at', 'least', '2', 'likes', '.', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2'
Target TF-P tokens: from Likes join Highschooler on Likes.student_id = Highschooler.ID group by Likes.student_id having count (*) >= 2 select Highschooler.name

[WRONG] [medium] Pred 0:	b'SELECT Likes.student_id FROM Likes GROUP BY Likes.student_id HAVING COUNT(*) >= 2' (-0.024) (length=14)
[CORRE] [medium] Pred 1:	b'SELECT Highschooler.name FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID GROUP BY Likes.student_id HAVING COUNT(*) >= 2' (-0.674) (length=20)
Error Case 2

Parsing error: from Transcripts select Transcripts.transcript_date , (Transcripts select Transcripts.transcript_date order by Transcripts.transcript_date limit 1
Parsing error: from Transcripts select Transcripts.transcript_date , (Transcripts.transcript_id-Transcripts.other_details order by Transcripts.transcript_date limit 1
Parsing error: from Transcripts select Transcripts.transcript_date , (Transcripts order by Transcripts.transcript_date limit 1
Parsing error: from Transcripts select Transcripts.transcript_date , (*-Transcripts.other_details order by Transcripts.transcript_date limit 1
Example 21
student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b'What is the earliest date of a transcript release, and what details can you tell me?'
NL tokens: [b'what', b'is', b'the', b'earliest', b'date', b'of', b'a', b'transcript', b'release', b',', b'and', b'what', b'details', b'can', b'you', b'tell', b'me', b'?']
NL tokens (original): [b'What', b'is', b'the', b'earliest', b'date', b'of', b'a', b'transcript', b'release', b',', b'and', b'what', b'details', b'can', b'you', b'tell', b'me', b'?']
 23%|██▎       | 3/13 [00:05<00:18,  1.89s/it]['[CLS]', 'what', 'is', 'the', 'earliest', 'date', 'of', 'a', 'transcript', 'release', ',', 'and', 'what', 'details', 'can', 'you', 'tell', 'me', '?', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b'SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1'
Target TF-P tokens: from Transcripts select Transcripts.transcript_date , Transcripts.other_details order by Transcripts.transcript_date asc limit 1

[WRONG] [medium] Pred 0:	b'SELECT Transcripts.transcript_date, (Transcripts.transcript_date - Transcripts.other_details) FROM Transcripts ORDER BY (Transcripts.transcript_date - Transcripts.other_details) LIMIT 1' (-0.162) (length=19)
[WRONG] [medium] Pred 1:	b'SELECT Transcripts.transcript_date, (Transcripts.transcript_date - Transcripts.other_details) FROM Transcripts ORDER BY Transcripts.transcript_date LIMIT 1' (-0.858) (length=15)
[WRONG] [medium] Pred 2:	b'SELECT Transcripts.transcript_date, (Transcripts.transcript_id - Transcripts.other_details) FROM Transcripts ORDER BY (Transcripts.transcript_date - Transcripts.other_details) LIMIT 1' (-0.906) (length=19)
[WRONG] [medium] Pred 3:	b'SELECT Transcripts.transcript_date, (Transcripts.transcript_date - Transcripts.other_details) FROM Transcripts ORDER BY (Transcripts.transcript_date - Transcripts.transcript_date) LIMIT 1' (-1.206) (length=19)
[CORRE] [medium] Pred 4:	b'SELECT Transcripts.transcript_date, Transcripts.other_details FROM Transcripts ORDER BY Transcripts.transcript_date LIMIT 1' (-1.494) (length=11)
Error Case 3

Example 24
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What are the population, name and leader of the country with the largest area?'
NL tokens: [b'what', b'are', b'the', b'population', b',', b'name', b'and', b'leader', b'of', b'the', b'country', b'with', b'the', b'largest', b'area', b'?']
NL tokens (original): [b'What', b'are', b'the', b'population', b',', b'name', b'and', b'leader', b'of', b'the', b'country', b'with', b'the', b'largest', b'area', b'?']
['[CLS]', 'what', 'are', 'the', 'population', ',', 'name', 'and', 'leader', 'of', 'the', 'country', 'with', 'the', 'largest', 'area', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1'
Target TF-P tokens: from country select country.Name , country.Population , country.HeadOfState order by country.SurfaceArea desc limit 1

[WRONG] [medium] Pred 0:	b'SELECT country.Population, country.Name, country.Region FROM country ORDER BY country.Region DESC LIMIT 1' (-0.002) (length=14)
[WRONG] [medium] Pred 1:	b'SELECT country.Population, country.Name, country.Continent FROM country ORDER BY country.Region DESC LIMIT 1' (-1.561) (length=14)
[WRONG] [medium] Pred 2:	b'SELECT country.Population, country.Name, country.GNP FROM country ORDER BY country.Region DESC LIMIT 1' (-2.098) (length=14)
[WRONG] [medium] Pred 3:	b'SELECT country.Population, country.Name, country.GNPOld FROM country ORDER BY country.Region DESC LIMIT 1' (-2.319) (length=14)
[WRONG] [medium] Pred 4:	b'SELECT country.Population, country.Name, country.LifeExpectancy FROM country ORDER BY country.Region DESC LIMIT 1' (-2.391) (length=14)
[WRONG] [medium] Pred 5:	b'SELECT country.Population, country.Name, country.SurfaceArea FROM country ORDER BY country.Region DESC LIMIT 1' (-2.419) (length=14)
[WRONG] [medium] Pred 6:	b'SELECT country.Population, country.Name, country.Code2 FROM country ORDER BY country.Region DESC LIMIT 1' (-2.448) (length=14)
[WRONG] [medium] Pred 7:	b'SELECT country.Population, country.Name, country.Code FROM country ORDER BY country.Region DESC LIMIT 1' (-2.457) (length=14)
[WRONG] [medium] Pred 8:	b'SELECT country.Population, country.Name, country.Capital FROM country ORDER BY country.Region DESC LIMIT 1' (-2.845) (length=14)
[WRONG] [medium] Pred 9:	b'SELECT country.Population, country.Name FROM country ORDER BY country.Region DESC LIMIT 1' (-3.133) (length=14)
[WRONG] [medium] Pred 10:	b'SELECT country.Population, country.Name, country.HeadOfState FROM country ORDER BY country.Region DESC LIMIT 1' (-3.834) (length=14)
[WRONG] [medium] Pred 11:	b'SELECT country.Population, country.Name, country.IndepYear FROM country ORDER BY country.Region DESC LIMIT 1' (-3.944) (length=14)
[WRONG] [medium] Pred 12:	b'SELECT country.Population, country.Name, country.GovernmentForm FROM country ORDER BY country.Region DESC LIMIT 1' (-4.230) (length=14)
[WRONG] [medium] Pred 13:	b'SELECT country.Population, country.Name, "city" FROM country ORDER BY country.Region DESC LIMIT 1' (-4.275) (length=14)
[WRONG] [medium] Pred 14:	b'SELECT country.Population, country.Name, "area" FROM country ORDER BY country.Region DESC LIMIT 1' (-4.573) (length=14)
[WRONG] [medium] Pred 15:	b'SELECT country.Population, country.Name, country.LocalName FROM country ORDER BY country.Region DESC LIMIT 1' (-4.649) (length=14)
Error Case 4

Example 25
poker_player
 +-- poker_player (poker player)
 |   +-- Poker_Player_ID (poker player id) [PRIMARY]
 |   +-- People_ID (people id) [FOREIGN]
 |   +-- Final_Table_Made (final table made)
 |   +-- Best_Finish (best finish)
 |   +-- Money_Rank (money rank)
 |   +-- Earnings (earnings)
 +-- people (people)
     +-- People_ID (people id) [PRIMARY] [FOREIGN]
     +-- Nationality (nationality)
     +-- Name (name)
     +-- Birth_Date (birth date)
     +-- Height (height)
NL: b'What are the names of poker players, ordered ascending by the number of final tables they have made?'
NL tokens: [b'what', b'are', b'the', b'names', b'of', b'poker', b'players', b',', b'ordered', b'ascending', b'by', b'the', b'number', b'of', b'final', b'tables', b'they', b'have', b'made', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'of', b'poker', b'players', b',', b'ordered', b'ascending', b'by', b'the', b'number', b'of', b'final', b'tables', b'they', b'have', b'made', b'?']
['[CLS]', 'what', 'are', 'the', 'names', 'of', 'poker', 'players', ',', 'ordered', 'ascending', 'by', 'the', 'number', 'of', 'final', 'tables', 'they', 'have', 'made', '?', '[SEP]', '*', '[unused50]', 'poker', 'player', '[unused51]', 'poker', 'player', 'id', '[unused51]', 'people', 'id', '[unused51]', 'final', 'table', 'made', '[unused51]', 'best', 'finish', '[unused51]', 'money', 'rank', '[unused51]', 'earnings', '[unused50]', 'people', '[unused51]', 'people', 'id', '[unused51]', 'nationality', '[unused51]', 'name', '[unused51]', 'birth', 'date', '[unused51]', 'height', '[SEP]']
Target 0: b'SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made'
Target TF-P tokens: from people join poker_player on people.People_ID = poker_player.People_ID select people.Name order by poker_player.Final_Table_Made

[WRONG] [medium] Pred 0:	b'SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY people.Name ORDER BY COUNT(*) ASC' (-0.048) (length=19)
[WRONG] [medium] Pred 1:	b'SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY people.Name ORDER BY SUM(poker_player.Final_Table_Made) ASC' (-0.442) (length=19)
[WRONG] [medium] Pred 2:	b'SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY people.Name ORDER BY AVG(poker_player.Final_Table_Made) ASC' (-0.900) (length=19)
[WRONG] [medium] Pred 3:	b'SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY people.Name ORDER BY SUM(poker_player.Final_Table_Made)' (-1.059) (length=18)
[WRONG] [medium] Pred 4:	b'SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY people.Name ORDER BY AVG(poker_player.Final_Table_Made)' (-1.832) (length=18)
[CORRE] [medium] Pred 5:	b'SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Final_Table_Made ASC' (-2.233) (length=14)
Error Case 5

Parsing error: from singer join song on singer.Singer_ID = song.Singer_ID where singer.Net_Worth_Millions > than 300000 select distinct singer.Name
Parsing error: from singer join song on singer.Singer_ID = song.Singer_ID where singer.Net_Worth_Millions > 300000 : ? select distinct singer.Name
Parsing error: from singer join song on singer.Singer_ID = song.Singer_ID where singer.Net_Worth_Millions > 300000 select intersect distinct singer.Name
Example 26
singer
 +-- singer (singer)
 |   +-- Singer_ID (singer id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Birth_Year (birth year)
 |   +-- Net_Worth_Millions (net worth millions)
 |   +-- Citizenship (citizenship)
 +-- song (song)
     +-- Song_ID (song id) [PRIMARY]
     +-- Title (title)
     +-- Singer_ID (singer id) [FOREIGN]
     +-- Sales (sales)
     +-- Highest_Position (highest position)
NL: b'what are the different names of the singers that have sales more than 300000?'
NL tokens: [b'what', b'are', b'the', b'different', b'names', b'of', b'the', b'singers', b'that', b'have', b'sales', b'more', b'than', b'3000', b'##00', b'?']
NL tokens (original): [b'what', b'are', b'the', b'different', b'names', b'of', b'the', b'singers', b'that', b'have', b'sales', b'more', b'than', b'3000', b'##00', b'?']
['[CLS]', 'what', 'are', 'the', 'different', 'names', 'of', 'the', 'singers', 'that', 'have', 'sales', 'more', 'than', '3000', '##00', '?', '[SEP]', '*', '[unused50]', 'singer', '[unused51]', 'singer', 'id', '[unused51]', 'name', '[unused51]', 'birth', 'year', '[unused51]', 'net', 'worth', 'millions', '[unused51]', 'citizenship', '[unused50]', 'song', '[unused51]', 'song', 'id', '[unused51]', 'title', '[unused51]', 'singer', 'id', '[unused51]', 'sales', '[unused51]', 'highest', 'position', '[SEP]']
Target 0: b'SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000'
Target TF-P tokens: from singer join song on singer.Singer_ID = song.Singer_ID where song.Sales > 300000 select distinct singer.Name

[WRONG] [medium] Pred 0:	b'SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Net_Worth_Millions > 300000' (-0.001) (length=17)
[WRONG] [medium] Pred 1:	b'SELECT DISTINCT singer.Name FROM singer WHERE singer.Net_Worth_Millions > 300000' (-2.198) (length=11)
[WRONG] [medium] Pred 2:	b'SELECT MIN(singer.Name) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Net_Worth_Millions > 300000' (-3.411) (length=19)
[WRONG] [medium] Pred 3:	b'SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Net_Worth_Millions > 300000' (-3.467) (length=23)
[WRONG] [medium] Pred 4:	b'SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Net_Worth_Millions > 300000 AND singer.Citizenship = "different"' (-3.673) (length=23)
[WRONG] [medium] Pred 5:	b'SELECT COUNT(DISTINCT singer.Name) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Net_Worth_Millions > 300000' (-3.766) (length=20)
[WRONG] [medium] Pred 6:	b'SELECT MIN(DISTINCT singer.Name) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Net_Worth_Millions > 300000' (-3.940) (length=20)
[WRONG] [medium] Pred 7:	b'SELECT "select distinct singer.Name" FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Net_Worth_Millions > 300000' (-4.053) (length=19)
[WRONG] [medium] Pred 8:	b'SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Net_Worth_Millions > 300000 GROUP BY singer.Name' (-4.071) (length=19)
[WRONG] [medium] Pred 9:	b'SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Net_Worth_Millions > 300000 ORDER BY singer.Name' (-4.127) (length=19)
[WRONG] [medium] Pred 10:	b'SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Net_Worth_Millions >= 300000' (-4.355) (length=17)
 31%|███       | 4/13 [00:11<00:26,  2.99s/it][CORRE] [medium] Pred 11:	b'SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000' (-4.413) (length=17)
Error Case 6

Parsing error: from Templates where Templates.Date_Effective_From > than 5 select Templates.Version_Number , Templates.Template_Type_Code
Example 30
cre_Doc_Template_Mgt
 +-- Ref_Template_Types (reference template types)
 |   +-- Template_Type_Code (template type code) [PRIMARY] [FOREIGN]
 |   +-- Template_Type_Description (template type description)
 +-- Templates (templates)
 |   +-- Template_ID (template id) [PRIMARY] [FOREIGN]
 |   +-- Version_Number (version number)
 |   +-- Template_Type_Code (template type code) [FOREIGN]
 |   +-- Date_Effective_From (date effective from)
 |   +-- Date_Effective_To (date effective to)
 |   +-- Template_Details (template details)
 +-- Documents (documents)
 |   +-- Document_ID (document id) [PRIMARY] [FOREIGN]
 |   +-- Template_ID (template id) [FOREIGN]
 |   +-- Document_Name (document name)
 |   +-- Document_Description (document description)
 |   +-- Other_Details (other details)
 +-- Paragraphs (paragraphs)
     +-- Paragraph_ID (paragraph id) [PRIMARY]
     +-- Document_ID (document id) [FOREIGN]
     +-- Paragraph_Text (paragraph text)
     +-- Other_Details (other details)
NL: b'What is the version number and template type code for the template with version number later than 5?'
NL tokens: [b'what', b'is', b'the', b'version', b'number', b'and', b'template', b'type', b'code', b'for', b'the', b'template', b'with', b'version', b'number', b'later', b'than', b'5', b'?']
NL tokens (original): [b'What', b'is', b'the', b'version', b'number', b'and', b'template', b'type', b'code', b'for', b'the', b'template', b'with', b'version', b'number', b'later', b'than', b'5', b'?']
['[CLS]', 'what', 'is', 'the', 'version', 'number', 'and', 'template', 'type', 'code', 'for', 'the', 'template', 'with', 'version', 'number', 'later', 'than', '5', '?', '[SEP]', '*', '[unused50]', 'reference', 'template', 'types', '[unused51]', 'template', 'type', 'code', '[unused51]', 'template', 'type', 'description', '[unused50]', 'template', '##s', '[unused51]', 'template', 'id', '[unused51]', 'version', 'number', '[unused51]', 'template', 'type', 'code', '[unused51]', 'date', 'effective', 'from', '[unused51]', 'date', 'effective', 'to', '[unused51]', 'template', 'details', '[unused50]', 'documents', '[unused51]', 'document', 'id', '[unused51]', 'template', 'id', '[unused51]', 'document', 'name', '[unused51]', 'document', 'description', '[unused51]', 'other', 'details', '[unused50]', 'paragraph', '##s', '[unused51]', 'paragraph', 'id', '[unused51]', 'document', 'id', '[unused51]', 'paragraph', 'text', '[unused51]', 'other', 'details', '[SEP]']
Target 0: b'SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5'
Target TF-P tokens: from Templates where Templates.Version_Number > 5 select Templates.Version_Number , Templates.Template_Type_Code

[WRONG] [medium] Pred 0:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > 5' (-0.000) (length=11)
[WRONG] [medium] Pred 1:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_To > 5' (-2.483) (length=11)
[WRONG] [medium] Pred 2:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Template_ID > 5' (-3.141) (length=11)
[WRONG] [medium] Pred 3:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates JOIN Templates ON Templates.Template_ID = Templates.Template_ID WHERE Templates.Date_Effective_From > 5' (-3.592) (length=17)
[WRONG] [medium] Pred 4:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > "5 %"' (-3.694) (length=14)
[WRONG] [medium] Pred 5:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Template_Details > 5' (-4.110) (length=11)
[WRONG] [medium] Pred 6:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > MOD(5, Templates.Template_Type_Code)' (-4.354) (length=13)
[CORRE] [medium] Pred 7:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5' (-4.424) (length=11)
Error Case 7

Example 33
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b"Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state."
NL tokens: [b'which', b'professionals', b'live', b'in', b'a', b'city', b'containing', b'the', b'sub', b'##st', b'##ring', b"'", b'west', b"'", b'?', b'list', b'his', b'or', b'her', b'role', b',', b'street', b',', b'city', b'and', b'state', b'.']
NL tokens (original): [b'Which', b'professionals', b'live', b'in', b'a', b'city', b'containing', b'the', b'sub', b'##st', b'##ring', b"'", b'West', b"'", b'?', b'List', b'his', b'or', b'her', b'role', b',', b'street', b',', b'city', b'and', b'state', b'.']
['[CLS]', 'which', 'professionals', 'live', 'in', 'a', 'city', 'containing', 'the', 'sub', '##st', '##ring', "'", 'west', "'", '?', 'list', 'his', 'or', 'her', 'role', ',', 'street', ',', 'city', 'and', 'state', '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b"SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"
Target TF-P tokens: from Professionals where Professionals.city like "% West %" select Professionals.role_code , Professionals.street , Professionals.city , Professionals.state

[WRONG] [medium] Pred 0:	b'SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.city LIKE "% West %"' (-0.124) (length=17)
[WRONG] [medium] Pred 1:	b'SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE "% West %"' (-0.246) (length=17)
[WRONG] [medium] Pred 2:	b'SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.role_code LIKE "% West %"' (-1.788) (length=17)
[WRONG] [medium] Pred 3:	b'SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.street LIKE "% West %"' (-1.794) (length=17)
[WRONG] [medium] Pred 4:	b'SELECT Professionals.role_code, Professionals.street, Professionals.city FROM Professionals WHERE Professionals.first_name LIKE "% West %"' (-1.821) (length=17)
[WRONG] [medium] Pred 5:	b'SELECT Professionals.role_code, Professionals.street, Professionals.city FROM Professionals WHERE Professionals.city LIKE "% West %"' (-1.824) (length=17)
[WRONG] [medium] Pred 6:	b'SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE "% West %"' (-2.507) (length=19)
[WRONG] [medium] Pred 7:	b'SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE "% West %" AND Professionals.city LIKE "% West %"' (-2.654) (length=25)
[WRONG] [medium] Pred 8:	b'SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.city LIKE "% West %" AND Professionals.city LIKE "% West %"' (-2.700) (length=25)
[CORRE] [medium] Pred 9:	b'SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.city LIKE "% West %"' (-2.756) (length=19)
Error Case 8

ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Continent']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'city', 'on': {'eq': ['country.Code', 'country.Continent']}}]
Parsing error: from country select country.Name , country.Region order by country.Region desc limit with
Parsing error: from country select country.Name , country.Region select country.Region order by country.Region desc limit 5
ERROR: "country.Continent" appeared in FROM clause and is not a table
Parsing error: from country , country.Region order by country.Region desc limit 5
Parsing error: from country select country.Name , country.Region order by country.Region desc limit ?
Example 34
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What are the names and areas of countries with the top 5 largest area?'
NL tokens: [b'what', b'are', b'the', b'names', b'and', b'areas', b'of', b'countries', b'with', b'the', b'top', b'5', b'largest', b'area', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'and', b'areas', b'of', b'countries', b'with', b'the', b'top', b'5', b'largest', b'area', b'?']
['[CLS]', 'what', 'are', 'the', 'names', 'and', 'areas', 'of', 'countries', 'with', 'the', 'top', '5', 'largest', 'area', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5'
Target TF-P tokens: from country select country.Name , country.SurfaceArea order by country.SurfaceArea desc limit 5

[WRONG] [medium] Pred 0:	b'SELECT country.Name, country.Region FROM country ORDER BY country.Region DESC LIMIT 5' (-0.000) (length=12)
[WRONG] [medium] Pred 1:	b'SELECT country.Name, country.Region FROM country ORDER BY country.Region DESC LIMIT 5' (-4.115) (length=14)
[WRONG] [medium] Pred 2:	b'SELECT country.Name, country.Region FROM country ORDER BY country.Region DESC LIMIT "top"' (-4.208) (length=12)
[WRONG] [medium] Pred 3:	b'SELECT country.Name, country.Region FROM country ORDER BY country.Region DESC LIMIT "largest"' (-4.505) (length=12)
 38%|███▊      | 5/13 [00:16<00:30,  3.75s/it][WRONG] [medium] Pred 4:	b'SELECT country.Name, country.Region FROM country ORDER BY country.Region DESC LIMIT "area"' (-4.517) (length=12)
[WRONG] [medium] Pred 5:	b'SELECT country.Name, country.Region FROM country ORDER BY country.Region DESC LIMIT "the"' (-4.908) (length=12)
[WRONG] [medium] Pred 6:	b'SELECT country.Name, country.Region FROM country ORDER BY country.Continent DESC LIMIT 5' (-5.105) (length=12)
[WRONG] [medium] Pred 7:	b'SELECT country.Name, country.Region FROM country ORDER BY country.Region ASC LIMIT 5' (-5.794) (length=12)
[WRONG] [medium] Pred 8:	b'SELECT country.Name, country.Region FROM country ORDER BY country.SurfaceArea DESC LIMIT 5' (-5.875) (length=12)
Error Case 9

ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Continent']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Continent']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.GNP']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.GNPOld']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.GNP']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Code2']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.GNPOld']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.IndepYear']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.GovernmentForm']}}]
Example 36
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?'
NL tokens: [b'what', b'are', b'the', b'country', b'codes', b'of', b'the', b'different', b'countries', b',', b'and', b'what', b'are', b'the', b'languages', b'spoken', b'by', b'the', b'greatest', b'percentage', b'of', b'people', b'for', b'each', b'?']
NL tokens (original): [b'What', b'are', b'the', b'country', b'codes', b'of', b'the', b'different', b'countries', b',', b'and', b'what', b'are', b'the', b'languages', b'spoken', b'by', b'the', b'greatest', b'percentage', b'of', b'people', b'for', b'each', b'?']
['[CLS]', 'what', 'are', 'the', 'country', 'codes', 'of', 'the', 'different', 'countries', ',', 'and', 'what', 'are', 'the', 'languages', 'spoken', 'by', 'the', 'greatest', 'percentage', 'of', 'people', 'for', 'each', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode'
Target TF-P tokens: from countrylanguage group by countrylanguage.CountryCode select countrylanguage.Language , countrylanguage.CountryCode , max (countrylanguage.Percentage)

[WRONG] [medium] Pred 0:	b'SELECT countrylanguage.CountryCode, MAX(countrylanguage.Percentage) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY countrylanguage.CountryCode' (-0.521) (length=18)
[WRONG] [medium] Pred 1:	b'SELECT country.Code, MAX(countrylanguage.Percentage) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY countrylanguage.CountryCode' (-0.920) (length=18)
[WRONG] [medium] Pred 2:	b'SELECT countrylanguage.CountryCode, MAX(countrylanguage.Percentage) FROM countrylanguage GROUP BY countrylanguage.CountryCode' (-1.038) (length=12)
[WRONG] [medium] Pred 3:	b'SELECT countrylanguage.CountryCode, MAX(countrylanguage.Percentage) FROM countrylanguage GROUP BY countrylanguage.CountryCode' (-1.768) (length=17)
[WRONG] [medium] Pred 4:	b'SELECT countrylanguage.CountryCode, MAX(countrylanguage.Percentage) FROM country JOIN countrylanguage ON country.Code = countrylanguage.IsOfficial GROUP BY countrylanguage.CountryCode' (-2.017) (length=18)
[WRONG] [medium] Pred 5:	b'SELECT countrylanguage.CountryCode, MAX(countrylanguage.Percentage) FROM country JOIN countrylanguage ON country.Code = countrylanguage.Language GROUP BY countrylanguage.CountryCode' (-2.036) (length=18)
[CORRE] [medium] Pred 6:	b'SELECT countrylanguage.CountryCode, MAX(countrylanguage.Percentage), countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.CountryCode' (-2.289) (length=14)
Error Case 10

ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
Example 46
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'Which makers designed more than 3 car models? List full name and the id.'
NL tokens: [b'which', b'makers', b'designed', b'more', b'than', b'3', b'car', b'models', b'?', b'list', b'full', b'name', b'and', b'the', b'id', b'.']
NL tokens (original): [b'Which', b'makers', b'designed', b'more', b'than', b'3', b'car', b'models', b'?', b'List', b'full', b'name', b'and', b'the', b'id', b'.']
 46%|████▌     | 6/13 [00:21<00:28,  4.10s/it]['[CLS]', 'which', 'makers', 'designed', 'more', 'than', '3', 'car', 'models', '?', 'list', 'full', 'name', 'and', 'the', 'id', '.', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3'
Target TF-P tokens: from car_makers join model_list on car_makers.Id = model_list.Maker group by car_makers.Id having count (*) > 3 select car_makers.FullName , car_makers.Id

[WRONG] [medium] Pred 0:	b'SELECT car_makers.Maker, car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-0.001) (length=24)
[WRONG] [medium] Pred 1:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-1.133) (length=22)
[WRONG] [medium] Pred 2:	b'SELECT car_makers.Maker, car_makers.FullName, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-1.345) (length=24)
[WRONG] [medium] Pred 3:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3 INTERSECT SELECT car_makers.Maker, car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-1.525) (length=46)
[WRONG] [medium] Pred 4:	b'SELECT car_makers.Maker, car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker HAVING COUNT(*) > 3' (-1.622) (length=24)
[WRONG] [medium] Pred 5:	b'SELECT car_makers.Maker, car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON model_list.Maker = car_makers.Id GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-1.769) (length=24)
[WRONG] [medium] Pred 6:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3 INTERSECT SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-1.914) (length=44)
[WRONG] [medium] Pred 7:	b'SELECT car_makers.Maker, car_makers.FullName, car_makers.Id FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-2.136) (length=24)
[WRONG] [medium] Pred 8:	b'SELECT car_makers.Maker, car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-2.374) (length=30)
[WRONG] [medium] Pred 9:	b'SELECT car_makers.Maker, car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY model_list.Maker HAVING COUNT(*) > 3' (-2.520) (length=24)
[WRONG] [medium] Pred 10:	b'SELECT car_makers.Maker, car_makers.FullName, car_makers.Id, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-2.521) (length=26)
[WRONG] [medium] Pred 11:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3 INTERSECT SELECT car_makers.Maker, car_makers.FullName, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-2.525) (length=46)
[WRONG] [medium] Pred 12:	b'SELECT car_makers.Maker, car_makers.FullName, car_makers.Id FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id GROUP BY model_list.Maker HAVING COUNT(*) > 3' (-2.574) (length=24)
[WRONG] [medium] Pred 13:	b'SELECT car_makers.Maker, car_makers.FullName, model_list.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-2.577) (length=24)
[WRONG] [medium] Pred 14:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker HAVING COUNT(*) > 3' (-2.593) (length=22)
[WRONG] [medium] Pred 15:	b'SELECT car_makers.Maker, car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) < 3' (-2.976) (length=24)
Error Case 11

Parsing error: from Templates join Documents on Templates.Template_ID = Documents.Template_ID where Templates.Date_Effective_From > "VALUE-distinct Documents.Document_Description) select distinct Templates.Template_Details"
Parsing error: from Templates join Documents on Templates.Template_ID = Documents.Template_ID where Templates.Date_Effective_From > "VALUE-VALUE) select distinct Templates.Template_Details"
Parsing error: from Templates join Documents on Templates.Template_ID = Documents.Template_ID where Templates.Date_Effective_From > "VALUE select distinct Templates.Template_Details"
Parsing error: from Templates join Documents on Templates.Template_ID = Documents.Template_ID where Templates.Date_Effective_From > "VALUE-VALUE-VALUE VALUE : VALUE : distinct Templates.Template_Type_Code"
Parsing error: from Templates join Documents on Templates.Template_ID = Documents.Template_ID where Templates.Date_Effective_From > "VALUE select distinct Documents.Document_Description"
Parsing error: from Templates join Documents on Templates.Template_ID = Documents.Template_ID where Templates.Date_Effective_From > "VALUE-distinct Documents.Document_Description) select distinct Templates.Template_Type_Code"
Example 48
cre_Doc_Template_Mgt
 +-- Ref_Template_Types (reference template types)
 |   +-- Template_Type_Code (template type code) [PRIMARY] [FOREIGN]
 |   +-- Template_Type_Description (template type description)
 +-- Templates (templates)
 |   +-- Template_ID (template id) [PRIMARY] [FOREIGN]
 |   +-- Version_Number (version number)
 |   +-- Template_Type_Code (template type code) [FOREIGN]
 |   +-- Date_Effective_From (date effective from)
 |   +-- Date_Effective_To (date effective to)
 |   +-- Template_Details (template details)
 +-- Documents (documents)
 |   +-- Document_ID (document id) [PRIMARY] [FOREIGN]
 |   +-- Template_ID (template id) [FOREIGN]
 |   +-- Document_Name (document name)
 |   +-- Document_Description (document description)
 |   +-- Other_Details (other details)
 +-- Paragraphs (paragraphs)
     +-- Paragraph_ID (paragraph id) [PRIMARY]
     +-- Document_ID (document id) [FOREIGN]
     +-- Paragraph_Text (paragraph text)
     +-- Other_Details (other details)
NL: b'Return the different descriptions for templates that have been used in a document.'
NL tokens: [b'return', b'the', b'different', b'descriptions', b'for', b'template', b'##s', b'that', b'have', b'been', b'used', b'in', b'a', b'document', b'.']
NL tokens (original): [b'Return', b'the', b'different', b'descriptions', b'for', b'template', b'##s', b'that', b'have', b'been', b'used', b'in', b'a', b'document', b'.']
['[CLS]', 'return', 'the', 'different', 'descriptions', 'for', 'template', '##s', 'that', 'have', 'been', 'used', 'in', 'a', 'document', '.', '[SEP]', '*', '[unused50]', 'reference', 'template', 'types', '[unused51]', 'template', 'type', 'code', '[unused51]', 'template', 'type', 'description', '[unused50]', 'template', '##s', '[unused51]', 'template', 'id', '[unused51]', 'version', 'number', '[unused51]', 'template', 'type', 'code', '[unused51]', 'date', 'effective', 'from', '[unused51]', 'date', 'effective', 'to', '[unused51]', 'template', 'details', '[unused50]', 'documents', '[unused51]', 'document', 'id', '[unused51]', 'template', 'id', '[unused51]', 'document', 'name', '[unused51]', 'document', 'description', '[unused51]', 'other', 'details', '[unused50]', 'paragraph', '##s', '[unused51]', 'paragraph', 'id', '[unused51]', 'document', 'id', '[unused51]', 'paragraph', 'text', '[unused51]', 'other', 'details', '[SEP]']
Target 0: b'SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID'
Target TF-P tokens: from Ref_Template_Types join Templates on Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code join Documents on Templates.Template_ID = Documents.Template_ID select distinct Ref_Template_Types.Template_Type_Description

[WRONG] [medium] Pred 0:	b'SELECT DISTINCT Templates.Template_Details FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID' (-0.214) (length=12)
[WRONG] [medium] Pred 1:	b'SELECT DISTINCT Documents.Document_Description FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID' (-0.492) (length=12)
[WRONG] [medium] Pred 2:	b'SELECT DISTINCT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID' (-0.498) (length=12)
[WRONG] [medium] Pred 3:	b'SELECT DISTINCT Templates.Template_Details FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Templates.Date_Effective_From > "VALUE-VALUE-VALUE VALUE : VALUE"' (-3.113) (length=25)
[WRONG] [medium] Pred 4:	b'SELECT DISTINCT Templates.Date_Effective_To FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID' (-3.274) (length=12)
[WRONG] [medium] Pred 5:	b'SELECT DISTINCT Documents.Document_Description FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Templates.Date_Effective_From > "VALUE-VALUE-VALUE VALUE : VALUE"' (-3.527) (length=25)
[WRONG] [medium] Pred 6:	b'SELECT DISTINCT Templates.Template_Details FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Templates.Date_Effective_From > "VALUE-VALUE-VALUE VALUE : VALUE : VALUE"' (-3.552) (length=27)
[WRONG] [medium] Pred 7:	b'SELECT DISTINCT Templates.Template_Details FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Templates.Date_Effective_From > "VALUE %"' (-3.593) (length=19)
[WRONG] [medium] Pred 8:	b'SELECT DISTINCT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Templates.Date_Effective_From > "VALUE-VALUE-VALUE VALUE : VALUE"' (-3.654) (length=25)
[WRONG] [medium] Pred 9:	b'SELECT DISTINCT Templates.Template_Details FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Templates.Date_Effective_From > "VALUE :"' (-3.892) (length=19)
Error Case 12

Example 49
singer
 +-- singer (singer)
 |   +-- Singer_ID (singer id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Birth_Year (birth year)
 |   +-- Net_Worth_Millions (net worth millions)
 |   +-- Citizenship (citizenship)
 +-- song (song)
     +-- Song_ID (song id) [PRIMARY]
     +-- Title (title)
     +-- Singer_ID (singer id) [FOREIGN]
     +-- Sales (sales)
     +-- Highest_Position (highest position)
NL: b'Show the names of singers that have more than one song.'
NL tokens: [b'show', b'the', b'names', b'of', b'singers', b'that', b'have', b'more', b'than', b'one', b'song', b'.']
NL tokens (original): [b'Show', b'the', b'names', b'of', b'singers', b'that', b'have', b'more', b'than', b'one', b'song', b'.']
['[CLS]', 'show', 'the', 'names', 'of', 'singers', 'that', 'have', 'more', 'than', 'one', 'song', '.', '[SEP]', '*', '[unused50]', 'singer', '[unused51]', 'singer', 'id', '[unused51]', 'name', '[unused51]', 'birth', 'year', '[unused51]', 'net', 'worth', 'millions', '[unused51]', 'citizenship', '[unused50]', 'song', '[unused51]', 'song', 'id', '[unused51]', 'title', '[unused51]', 'singer', 'id', '[unused51]', 'sales', '[unused51]', 'highest', 'position', '[SEP]']
Target 0: b'SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1'
Target TF-P tokens: from singer join song on singer.Singer_ID = song.Singer_ID group by singer.Name having count (*) > 1 select singer.Name

[WRONG] [medium] Pred 0:	b'SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY song.Singer_ID HAVING COUNT(*) > 1' (-0.066) (length=20)
[CORRE] [medium] Pred 1:	b'SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name HAVING COUNT(*) > 1' (-0.304) (length=20)
Error Case 13

Parsing error: from country select country.Name , country.SurfaceArea select country.Name , country.SurfaceArea order by country.Population limit 1
Example 50
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What are the name, independence year, and surface area of the country with the smallest population?'
NL tokens: [b'what', b'are', b'the', b'name', b',', b'independence', b'year', b',', b'and', b'surface', b'area', b'of', b'the', b'country', b'with', b'the', b'smallest', b'population', b'?']
NL tokens (original): [b'What', b'are', b'the', b'name', b',', b'independence', b'year', b',', b'and', b'surface', b'area', b'of', b'the', b'country', b'with', b'the', b'smallest', b'population', b'?']
['[CLS]', 'what', 'are', 'the', 'name', ',', 'independence', 'year', ',', 'and', 'surface', 'area', 'of', 'the', 'country', 'with', 'the', 'smallest', 'population', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused49]', 'independence', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1'
Target TF-P tokens: from country select country.Name , country.SurfaceArea , country.IndepYear order by country.Population limit 1

[WRONG] [medium] Pred 0:	b'SELECT country.Name, country.Region, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1' (-0.219) (length=13)
[WRONG] [medium] Pred 1:	b'SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1' (-0.388) (length=13)
[WRONG] [medium] Pred 2:	b'SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1' (-0.750) (length=11)
[WRONG] [medium] Pred 3:	b'SELECT country.Name, country.Population, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1' (-0.836) (length=13)
[WRONG] [medium] Pred 4:	b'SELECT country.Name, country.SurfaceArea, country.Continent FROM country ORDER BY country.Population LIMIT 1' (-1.407) (length=13)
[WRONG] [medium] Pred 5:	b'SELECT country.Name, country.Continent, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1' (-2.036) (length=13)
[WRONG] [medium] Pred 6:	b'SELECT country.Name, country.SurfaceArea, country.Region FROM country ORDER BY country.Population LIMIT 1' (-2.191) (length=13)
[WRONG] [medium] Pred 7:	b'SELECT country.Name, country.Region, country.SurfaceArea FROM country ORDER BY country.Population ASC LIMIT 1' (-2.493) (length=14)
[WRONG] [medium] Pred 8:	b'SELECT country.Name, country.Population, country.Continent FROM country ORDER BY country.Population LIMIT 1' (-2.819) (length=13)
[WRONG] [medium] Pred 9:	b'SELECT country.Name, country.Population, country.Region FROM country ORDER BY country.Population LIMIT 1' (-2.860) (length=13)
[WRONG] [medium] Pred 10:	b'SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.Population ASC LIMIT 1' (-2.937) (length=14)
[WRONG] [medium] Pred 11:	b'SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.Population ASC LIMIT 1' (-3.142) (length=12)
[WRONG] [medium] Pred 12:	b'SELECT country.Name, country.SurfaceArea, country.Population FROM country ORDER BY country.Population LIMIT 1' (-3.197) (length=13)
[WRONG] [medium] Pred 13:	b'SELECT country.Name, country.Population, country.SurfaceArea FROM country ORDER BY country.Population ASC LIMIT 1' (-3.264) (length=14)
[WRONG] [medium] Pred 14:	b'SELECT country.Name, country.SurfaceArea, country.Code FROM country ORDER BY country.Population LIMIT 1' (-3.644) (length=13)
Error Case 14

Parsing error: from car_makers join model_list on car_makers.Id = model_list.Maker group by car_makers.Id having count (*) > 3 select car_makers.Maker) select car_makers.Maker , car_makers.Id
Parsing error: from car_makers join model_list on car_makers.Id = model_list.Maker group by car_makers.Id having count (*) having limit 3 select car_makers.Maker , car_makers.Id
Parsing error: from car_makers join model_list on car_makers.Id = model_list.Maker group by car_makers.Id having having (model_list.Model) > 3 select car_makers.Maker , car_makers.Id
Example 52
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What are the names and ids of all makers with more than 3 models?'
NL tokens: [b'what', b'are', b'the', b'names', b'and', b'id', b'##s', b'of', b'all', b'makers', b'with', b'more', b'than', b'3', b'models', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'and', b'id', b'##s', b'of', b'all', b'makers', b'with', b'more', b'than', b'3', b'models', b'?']
['[CLS]', 'what', 'are', 'the', 'names', 'and', 'id', '##s', 'of', 'all', 'makers', 'with', 'more', 'than', '3', 'models', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3'
Target TF-P tokens: from car_makers join model_list on car_makers.Id = model_list.Maker group by car_makers.Id having count (*) > 3 select car_makers.FullName , car_makers.Id

[WRONG] [medium] Pred 0:	b'SELECT car_makers.Maker, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-0.000) (length=22)
[WRONG] [medium] Pred 1:	b'SELECT car_makers.Maker, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY model_list.Maker HAVING COUNT(*) > 3' (-1.879) (length=22)
[WRONG] [medium] Pred 2:	b'SELECT car_makers.Maker, car_makers.Id FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id GROUP BY model_list.Maker HAVING COUNT(*) > 3' (-1.926) (length=22)
[WRONG] [medium] Pred 3:	b'SELECT car_makers.Maker, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.MakeId GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-2.958) (length=28)
[WRONG] [medium] Pred 4:	b'SELECT car_makers.Maker, car_makers.Id FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-2.962) (length=22)
[WRONG] [medium] Pred 5:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-3.058) (length=22)
[WRONG] [medium] Pred 6:	b'SELECT car_makers.Maker, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) >= 3' (-3.216) (length=22)
[WRONG] [medium] Pred 7:	b'SELECT car_makers.Maker, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) < 3' (-3.226) (length=22)
[WRONG] [medium] Pred 8:	b'SELECT car_makers.Maker, MIN(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-3.243) (length=25)
[WRONG] [medium] Pred 9:	b'SELECT car_makers.Maker, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY model_list.Model HAVING COUNT(*) > 3' (-3.249) (length=22)
[WRONG] [medium] Pred 10:	b'SELECT car_makers.Maker, "min" AS car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-3.260) (length=23)
[WRONG] [medium] Pred 11:	b'SELECT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-3.314) (length=20)
 54%|█████▍    | 7/13 [00:27<00:28,  4.67s/it][CORRE] [medium] Pred 12:	b'SELECT car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-3.754) (length=22)
Error Case 15

Parsing error: from Pets join Has_Pet on Pets.PetID = Has_Pet.PetID join Student on Has_Pet.StuID = Student.StuID where Student.Age > 20 select count (*) select count (*)
string indices must be integers
string indices must be integers
Parsing error: from Pets in join Has_Pet on Pets.PetID = Has_Pet.PetID join Student on Has_Pet.StuID = Student.StuID where Student.Age > 20 select count (*)
Parsing error: from Pets join Has_Pet on Pets.PetID = Has_Pet.PetID 5 join Student on Has_Pet.StuID = Student.StuID where Student.Age > 20 select count (*)
string indices must be integers
Example 56
pets_1
 +-- Student (student)
 |   +-- StuID (student id) [PRIMARY] [FOREIGN]
 |   +-- LName (last name)
 |   +-- Fname (first name)
 |   +-- Age (age)
 |   +-- Sex (sex)
 |   +-- Major (major)
 |   +-- Advisor (advisor)
 |   +-- city_code (city code)
 +-- Has_Pet (has pet)
 |   +-- StuID (student id) [FOREIGN]
 |   +-- PetID (pet id) [FOREIGN]
 +-- Pets (pets)
     +-- PetID (pet id) [PRIMARY] [FOREIGN]
     +-- PetType (pet type)
     +-- pet_age (pet age)
     +-- weight (weight)
NL: b'Find number of pets owned by students who are older than 20.'
NL tokens: [b'find', b'number', b'of', b'pets', b'owned', b'by', b'students', b'who', b'are', b'older', b'than', b'20', b'.']
NL tokens (original): [b'Find', b'number', b'of', b'pets', b'owned', b'by', b'students', b'who', b'are', b'older', b'than', b'20', b'.']
['[CLS]', 'find', 'number', 'of', 'pets', 'owned', 'by', 'students', 'who', 'are', 'older', 'than', '20', '.', '[SEP]', '*', '[unused50]', 'student', '[unused51]', 'student', 'id', '[unused51]', 'last', 'name', '[unused51]', 'first', 'name', '[unused51]', 'age', '[unused51]', 'sex', '[unused51]', 'major', '[unused51]', 'advisor', '[unused51]', 'city', 'code', '[unused50]', 'has', 'pet', '[unused51]', 'student', 'id', '[unused51]', 'pet', 'id', '[unused50]', 'pets', '[unused51]', 'pet', 'id', '[unused51]', 'pet', 'type', '[unused51]', 'pet', 'age', '[unused51]', 'weight', '[SEP]']
Target 0: b'SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20'
Target TF-P tokens: from Student join Has_Pet on Student.StuID = Has_Pet.StuID where Student.Age > 20 select count (*)

[WRONG] [medium] Pred 0:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20' (-0.000) (length=24)
[WRONG] [medium] Pred 1:	b'SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20' (-2.231) (length=24)
[WRONG] [medium] Pred 2:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.pet_age > 20' (-2.352) (length=24)
[WRONG] [medium] Pred 3:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20' (-2.614) (length=30)
[WRONG] [medium] Pred 4:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20 OR Student.Age > 20' (-2.641) (length=28)
[WRONG] [medium] Pred 5:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20 AND Student.Age > 20' (-2.964) (length=28)
[WRONG] [medium] Pred 6:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID WHERE Has_Pet.StuID IN (SELECT Student.StuID FROM Student WHERE Student.Age > 20)' (-2.982) (length=27)
[WRONG] [medium] Pred 7:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20 AND Pets.pet_age > 20' (-2.990) (length=28)
[WRONG] [medium] Pred 8:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20 GROUP BY Pets.PetID' (-3.130) (length=26)
[WRONG] [medium] Pred 9:	b'SELECT COUNT(*), Pets.PetID FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20' (-3.136) (length=26)
Error Case 16

Parsing error: from Dogs where Dogs.abandoned_yn = yes "and Dogs.weight = 1 select Dogs.name , Dogs.age , Dogs.weight"
Parsing error: from Dogs where Dogs.abandoned_yn = yes null and Dogs.weight = 1 select Dogs.name , Dogs.age , Dogs.weight
Parsing error: from Dogs where Dogs.abandoned_yn = yes null and Dogs.weight = 0 select Dogs.name , Dogs.age , Dogs.weight
Example 57
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.'
NL tokens: [b'what', b'are', b'the', b'dog', b'name', b',', b'age', b'and', b'weight', b'of', b'the', b'dogs', b'that', b'were', b'abandoned', b'?', b'note', b'that', b'1', b'stands', b'for', b'yes', b',', b'and', b'0', b'stands', b'for', b'no', b'in', b'the', b'tables', b'.']
NL tokens (original): [b'What', b'are', b'the', b'dog', b'name', b',', b'age', b'and', b'weight', b'of', b'the', b'dogs', b'that', b'were', b'abandoned', b'?', b'Note', b'that', b'1', b'stands', b'for', b'yes', b',', b'and', b'0', b'stands', b'for', b'no', b'in', b'the', b'tables', b'.']
['[CLS]', 'what', 'are', 'the', 'dog', 'name', ',', 'age', 'and', 'weight', 'of', 'the', 'dogs', 'that', 'were', 'abandoned', '?', 'note', 'that', '1', 'stands', 'for', 'yes', ',', 'and', '0', 'stands', 'for', 'no', 'in', 'the', 'tables', '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1'
Target TF-P tokens: from Dogs where Dogs.abandoned_yn = 1 select Dogs.name , Dogs.age , Dogs.weight

[WRONG] [medium] Pred 0:	b'SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1 AND Dogs.weight = 0' (-0.230) (length=17)
[WRONG] [medium] Pred 1:	b'SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1 INTERSECT SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1 AND Dogs.weight = 0' (-0.743) (length=30)
[WRONG] [medium] Pred 2:	b'SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1 INTERSECT SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = "yes" AND Dogs.weight = 0' (-0.775) (length=30)
[CORRE] [medium] Pred 3:	b'SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1' (-0.940) (length=13)
Error Case 17

Example 58
pets_1
 +-- Student (student)
 |   +-- StuID (student id) [PRIMARY] [FOREIGN]
 |   +-- LName (last name)
 |   +-- Fname (first name)
 |   +-- Age (age)
 |   +-- Sex (sex)
 |   +-- Major (major)
 |   +-- Advisor (advisor)
 |   +-- city_code (city code)
 +-- Has_Pet (has pet)
 |   +-- StuID (student id) [FOREIGN]
 |   +-- PetID (pet id) [FOREIGN]
 +-- Pets (pets)
     +-- PetID (pet id) [PRIMARY] [FOREIGN]
     +-- PetType (pet type)
     +-- pet_age (pet age)
     +-- weight (weight)
NL: b'What is the id and weight of every pet who is older than 1?'
NL tokens: [b'what', b'is', b'the', b'id', b'and', b'weight', b'of', b'every', b'pet', b'who', b'is', b'older', b'than', b'1', b'?']
NL tokens (original): [b'What', b'is', b'the', b'id', b'and', b'weight', b'of', b'every', b'pet', b'who', b'is', b'older', b'than', b'1', b'?']
['[CLS]', 'what', 'is', 'the', 'id', 'and', 'weight', 'of', 'every', 'pet', 'who', 'is', 'older', 'than', '1', '?', '[SEP]', '*', '[unused50]', 'student', '[unused51]', 'student', 'id', '[unused51]', 'last', 'name', '[unused51]', 'first', 'name', '[unused51]', 'age', '[unused51]', 'sex', '[unused51]', 'major', '[unused51]', 'advisor', '[unused51]', 'city', 'code', '[unused50]', 'has', 'pet', '[unused51]', 'student', 'id', '[unused51]', 'pet', 'id', '[unused50]', 'pets', '[unused51]', 'pet', 'id', '[unused51]', 'pet', 'type', '[unused51]', 'pet', 'age', '[unused51]', 'weight', '[SEP]']
Target 0: b'SELECT petid ,  weight FROM pets WHERE pet_age  >  1'
Target TF-P tokens: from Pets where Pets.pet_age > 1 select Pets.PetID , Pets.weight

[WRONG] [medium] Pred 0:	b'SELECT Pets.PetID, Pets.weight FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID WHERE Pets.pet_age > 1' (-0.155) (length=17)
[CORRE] [medium] Pred 1:	b'SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1' (-0.281) (length=11)
Error Case 18

Parsing error: from singer where singer.Is_male = "French" select avg (singer.Age) in (from singer where singer.Is_male = "French" select max (singer.Age)) select avg (singer.Age) , min (singer.Age) , singer.Age
Parsing error: from singer where singer.Is_male = "French" select avg (singer.Age) in (from singer where singer.Is_male = "French" select avg (singer.Age)) select avg (singer.Age) , min (singer.Age) , singer.Age
Parsing error: from singer where singer.Is_male = "French" select avg (singer.Age) in (from singer where singer.Is_male = "French" select avg (singer.Age)) select avg (singer.Age) , min (singer.Age) , max (singer.Age)
Parsing error: from singer where singer.Is_male = "French" select avg (singer.Age) in (from singer where singer.Is_male = "French" select max (singer.Age)) select avg (singer.Age) , min (singer.Age) , max (singer.Age)
Parsing error: from singer where singer.Is_male = "French" select avg (singer.Age) in (from singer where singer.Is_male = "French" select avg (singer.Age)) select avg (singer.Age) , min (singer.Age)
Parsing error: from singer where singer.Is_male = "French" select avg (singer.Age) in (from singer where singer.Is_male = "French" select min (singer.Age)) select avg (singer.Age) , min (singer.Age) , singer.Age
Parsing error: from singer where singer.Is_male = "French" select avg (singer.Age) in (from singer where singer.Is_male = "French" select max (singer.Age)) select avg (singer.Age) , min (singer.Age)
Parsing error: from singer where singer.Is_male = "French" select avg (singer.Age) in (from singer where singer.Is_male = "French" select max (singer.Age)) select avg (singer.Age) , min (singer.Age) , singer.Singer_ID
Parsing error: from singer where singer.Is_male = "French" select avg (singer.Age) in (from singer where singer.Is_male = "French" select min (singer.Age)) select avg (singer.Age) , min (singer.Age) , max (singer.Age)
Parsing error: from singer where singer.Is_male = "French" select avg (singer.Age) in (from singer where singer.Is_male = "French" select singer.Age) select avg (singer.Age) , min (singer.Age)
Parsing error: from singer where singer.Is_male = "French" select avg (singer.Age) in (from singer where singer.Is_male = "French" select max (singer.Age)) select avg (singer.Age) , min (singer.Age) , singer.Is_male
Parsing error: from singer where singer.Is_male = "French" select avg (singer.Age) in (from singer where singer.Is_male = "French" select singer.Age) select avg (singer.Age) , min (singer.Age) , max (singer.Age)
Parsing error: from singer where singer.Is_male = "French" select avg (singer.Age) in (from singer where singer.Is_male = "French" select min (singer.Age)) select avg (singer.Age) , min (singer.Age)
Example 60
 62%|██████▏   | 8/13 [00:39<00:34,  6.94s/it]concert_singer
 +-- stadium (stadium)
 |   +-- Stadium_ID (stadium id) [PRIMARY] [FOREIGN]
 |   +-- Location (location)
 |   +-- Name (name)
 |   +-- Capacity (capacity)
 |   +-- Highest (highest)
 |   +-- Lowest (lowest)
 |   +-- Average (average)
 +-- singer (singer)
 |   +-- Singer_ID (singer id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Country (country)
 |   +-- Song_Name (song name)
 |   +-- Song_release_year (song release year)
 |   +-- Age (age)
 |   +-- Is_male (is male)
 +-- concert (concert)
 |   +-- concert_ID (concert id) [PRIMARY] [FOREIGN]
 |   +-- concert_Name (concert name)
 |   +-- Theme (theme)
 |   +-- Stadium_ID (stadium id) [FOREIGN]
 |   +-- Year (year)
 +-- singer_in_concert (singer in concert)
     +-- concert_ID (concert id) [PRIMARY] [FOREIGN]
     +-- Singer_ID (singer id) [FOREIGN]
NL: b'What is the average, minimum, and maximum age for all French singers?'
NL tokens: [b'what', b'is', b'the', b'average', b',', b'minimum', b',', b'and', b'maximum', b'age', b'for', b'all', b'french', b'singers', b'?']
NL tokens (original): [b'What', b'is', b'the', b'average', b',', b'minimum', b',', b'and', b'maximum', b'age', b'for', b'all', b'French', b'singers', b'?']
['[CLS]', 'what', 'is', 'the', 'average', ',', 'minimum', ',', 'and', 'maximum', 'age', 'for', 'all', 'french', 'singers', '?', '[SEP]', '*', '[unused50]', 'stadium', '[unused51]', 'stadium', 'id', '[unused51]', 'location', '[unused51]', 'name', '[unused51]', 'capacity', '[unused51]', 'highest', '[unused51]', 'lowest', '[unused51]', 'average', '[unused50]', 'singer', '[unused51]', 'singer', 'id', '[unused51]', 'name', '[unused51]', 'country', '[unused51]', 'song', 'name', '[unused51]', 'song', 'release', 'year', '[unused51]', 'age', '[unused51]', 'is', 'male', '[unused50]', 'concert', '[unused51]', 'concert', 'id', '[unused51]', 'concert', 'name', '[unused51]', 'theme', '[unused51]', 'stadium', 'id', '[unused51]', 'year', '[unused50]', 'singer', 'in', 'concert', '[unused51]', 'concert', 'id', '[unused51]', 'singer', 'id', '[SEP]']
Target 0: b"SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"
Target TF-P tokens: from singer where singer.Country = "VALUE" select avg (singer.Age) , min (singer.Age) , max (singer.Age)

[WRONG] [medium] Pred 0:	b'SELECT AVG(singer.Age), MIN(singer.Age), MAX(singer.Age) FROM singer WHERE singer.Is_male = "French"' (-0.000) (length=24)
[WRONG] [medium] Pred 1:	b'SELECT AVG(singer.Age), MIN(singer.Age), MAX(singer.Age) FROM singer WHERE singer.Is_male = "French" AND singer.Age = (SELECT MAX(singer.Age) FROM singer WHERE singer.Is_male = "French")' (-1.855) (length=42)
[WRONG] [medium] Pred 2:	b'SELECT AVG(singer.Age), MIN(singer.Age), singer.Age FROM singer WHERE singer.Is_male = "French" AND singer.Age = (SELECT MAX(singer.Age) FROM singer WHERE singer.Is_male = "French")' (-1.945) (length=39)
Error Case 19

Example 64
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'How many countries does each continent have? List the continent id, continent name and the number of countries.'
NL tokens: [b'how', b'many', b'countries', b'does', b'each', b'continent', b'have', b'?', b'list', b'the', b'continent', b'id', b',', b'continent', b'name', b'and', b'the', b'number', b'of', b'countries', b'.']
NL tokens (original): [b'How', b'many', b'countries', b'does', b'each', b'continent', b'have', b'?', b'List', b'the', b'continent', b'id', b',', b'continent', b'name', b'and', b'the', b'number', b'of', b'countries', b'.']
['[CLS]', 'how', 'many', 'countries', 'does', 'each', 'continent', 'have', '?', 'list', 'the', 'continent', 'id', ',', 'continent', 'name', 'and', 'the', 'number', 'of', 'countries', '.', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId'
Target TF-P tokens: from continents join countries on continents.ContId = countries.Continent group by continents.ContId select continents.ContId , continents.Continent , count (*)

[WRONG] [medium] Pred 0:	b'SELECT continents.Continent, countries.CountryName, COUNT(*) FROM continents JOIN countries ON countries.Continent = continents.ContId GROUP BY countries.Continent' (-0.133) (length=20)
[WRONG] [medium] Pred 1:	b'SELECT continents.Continent, countries.CountryName, COUNT(*) FROM countries JOIN continents ON countries.Continent = continents.ContId GROUP BY countries.Continent' (-0.192) (length=20)
[CORRE] [medium] Pred 2:	b'SELECT continents.Continent, countries.Continent, COUNT(*) FROM countries JOIN continents ON countries.Continent = continents.ContId GROUP BY countries.Continent' (-0.949) (length=20)
Error Case 20

Parsing error: from country where country.Region > (from country where country.Continent = "Europe" select max (country.Region)) and country.Continent = "in (*)"
Parsing error: from country where country.Region > (from country join country.Code = country.GNP where country.Continent = "Europe" select max (country.Region)) select country.Name
Example 69
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Which countries have greater area than that of any country in Europe?'
NL tokens: [b'which', b'countries', b'have', b'greater', b'area', b'than', b'that', b'of', b'any', b'country', b'in', b'europe', b'?']
NL tokens (original): [b'Which', b'countries', b'have', b'greater', b'area', b'than', b'that', b'of', b'any', b'country', b'in', b'Europe', b'?']
 69%|██████▉   | 9/13 [00:48<00:29,  7.46s/it]['[CLS]', 'which', 'countries', 'have', 'greater', 'area', 'than', 'that', 'of', 'any', 'country', 'in', 'europe', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused49]', 'europe', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")'
Target TF-P tokens: from country where country.SurfaceArea > (from country where country.Continent = "Europe" select min (country.SurfaceArea)) select country.Name

[WRONG] [hard] Pred 0:	b'SELECT country.Name FROM country WHERE country.Region > (SELECT MAX(country.Region) FROM country WHERE country.Continent = "Europe")' (-0.000) (length=23)
[WRONG] [hard] Pred 1:	b'SELECT country.Continent FROM country WHERE country.Region > (SELECT MAX(country.Region) FROM country WHERE country.Continent = "Europe")' (-1.888) (length=23)
[WRONG] [hard] Pred 2:	b'SELECT country.Region FROM country WHERE country.Region > (SELECT MAX(country.Region) FROM country WHERE country.Continent = "Europe")' (-2.109) (length=23)
[WRONG] [hard] Pred 3:	b'SELECT DISTINCT country.Name FROM country WHERE country.Region > (SELECT MAX(country.Region) FROM country WHERE country.Continent = "Europe")' (-2.323) (length=24)
[WRONG] [hard] Pred 4:	b'SELECT country.Name FROM country WHERE country.Region > (SELECT MAX(country.Region) FROM country WHERE country.Continent = "Europe") AND country.Continent = "Europe"' (-2.348) (length=29)
[WRONG] [hard] Pred 5:	b'SELECT country.Name FROM country WHERE country.Region > (SELECT MIN(country.Region) FROM country WHERE country.Continent = "Europe")' (-2.460) (length=23)
[WRONG] [hard] Pred 6:	b'SELECT country.Name FROM country WHERE country.Region > (SELECT MAX(country.Region) FROM country WHERE country.Continent = "Europe") AND country.Continent = "country"' (-2.892) (length=29)
[WRONG] [hard] Pred 7:	b'SELECT country.Name, country.Continent FROM country WHERE country.Region > (SELECT MAX(country.Region) FROM country WHERE country.Continent = "Europe")' (-2.932) (length=25)
[WRONG] [hard] Pred 8:	b'SELECT country.Name FROM country WHERE country.Region > (SELECT MAX(country.Region) FROM country WHERE country.Continent = "Europe") AND country.Continent = "any"' (-2.955) (length=29)
[WRONG] [hard] Pred 9:	b'SELECT country.Name FROM country WHERE country.Region < (SELECT MAX(country.Region) FROM country WHERE country.Continent = "Europe")' (-2.985) (length=23)
[WRONG] [hard] Pred 10:	b'SELECT country.Name FROM country WHERE country.Region > (SELECT country.Region FROM country WHERE country.Continent = "Europe")' (-2.993) (length=22)
[WRONG] [hard] Pred 11:	b'SELECT AVG(country.Region) FROM country WHERE country.Region > (SELECT MAX(country.Region) FROM country WHERE country.Continent = "Europe")' (-3.128) (length=26)
[WRONG] [hard] Pred 12:	b'SELECT country.Name FROM country WHERE country.Region > (SELECT MAX(country.Region) FROM country WHERE country.Continent = "VALUE")' (-3.163) (length=23)
[WRONG] [hard] Pred 13:	b'SELECT country.Name FROM country WHERE country.Region > (SELECT SUM(country.Region) FROM country WHERE country.Continent = "Europe")' (-3.351) (length=23)
Error Case 21

Parsing error: from stadium join concert on stadium.Stadium_ID = concert.Stadium_ID select count (*) union from stadium on stadium.Stadium_ID = concert.Stadium_ID select count (*)
ERROR: table "stadium" in field expression stadium.Capacity is not in the current scope
Parsing error: from stadium join concert on stadium.Stadium_ID = concert.Stadium_ID order by count (*) desc limit 1
Parsing error: from stadium join concert on stadium.Stadium_ID = concert.Stadium_ID select count (*) desc limit 1
Parsing error: from stadium join concert on stadium.Stadium_ID = concert.Stadium_ID select count (*) asc limit 1
Parsing error: from stadium join concert on stadium.Stadium_ID = concert.Stadium_ID select count (*) : stadium.Stadium_ID
Example 73
concert_singer
 +-- stadium (stadium)
 |   +-- Stadium_ID (stadium id) [PRIMARY] [FOREIGN]
 |   +-- Location (location)
 |   +-- Name (name)
 |   +-- Capacity (capacity)
 |   +-- Highest (highest)
 |   +-- Lowest (lowest)
 |   +-- Average (average)
 +-- singer (singer)
 |   +-- Singer_ID (singer id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Country (country)
 |   +-- Song_Name (song name)
 |   +-- Song_release_year (song release year)
 |   +-- Age (age)
 |   +-- Is_male (is male)
 +-- concert (concert)
 |   +-- concert_ID (concert id) [PRIMARY] [FOREIGN]
 |   +-- concert_Name (concert name)
 |   +-- Theme (theme)
 |   +-- Stadium_ID (stadium id) [FOREIGN]
 |   +-- Year (year)
 +-- singer_in_concert (singer in concert)
     +-- concert_ID (concert id) [PRIMARY] [FOREIGN]
     +-- Singer_ID (singer id) [FOREIGN]
NL: b'What are the number of concerts that occurred in the stadium with the largest capacity ?'
NL tokens: [b'what', b'are', b'the', b'number', b'of', b'concerts', b'that', b'occurred', b'in', b'the', b'stadium', b'with', b'the', b'largest', b'capacity', b'?']
NL tokens (original): [b'What', b'are', b'the', b'number', b'of', b'concerts', b'that', b'occurred', b'in', b'the', b'stadium', b'with', b'the', b'largest', b'capacity', b'?']
['[CLS]', 'what', 'are', 'the', 'number', 'of', 'concerts', 'that', 'occurred', 'in', 'the', 'stadium', 'with', 'the', 'largest', 'capacity', '?', '[SEP]', '*', '[unused50]', 'stadium', '[unused51]', 'stadium', 'id', '[unused51]', 'location', '[unused51]', 'name', '[unused51]', 'capacity', '[unused51]', 'highest', '[unused51]', 'lowest', '[unused51]', 'average', '[unused50]', 'singer', '[unused51]', 'singer', 'id', '[unused51]', 'name', '[unused51]', 'country', '[unused51]', 'song', 'name', '[unused51]', 'song', 'release', 'year', '[unused51]', 'age', '[unused51]', 'is', 'male', '[unused50]', 'concert', '[unused51]', 'concert', 'id', '[unused51]', 'concert', 'name', '[unused51]', 'theme', '[unused51]', 'stadium', 'id', '[unused51]', 'year', '[unused50]', 'singer', 'in', 'concert', '[unused51]', 'concert', 'id', '[unused51]', 'singer', 'id', '[SEP]']
Target 0: b'select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)'
Target TF-P tokens: from concert where concert.Stadium_ID = (from stadium select stadium.Stadium_ID order by stadium.Capacity desc limit 1) select count (*)

[WRONG] [hard] Pred 0:	b'SELECT COUNT(*) FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID' (-0.006) (length=14)
[WRONG] [hard] Pred 1:	b'SELECT COUNT(*) FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID ORDER BY stadium.Capacity DESC LIMIT 1' (-1.100) (length=19)
[WRONG] [hard] Pred 2:	b'SELECT COUNT(*) FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE stadium.Capacity = (SELECT MAX(stadium.Capacity) FROM stadium)' (-1.164) (length=26)
[WRONG] [hard] Pred 3:	b'SELECT COUNT(*) FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID ORDER BY stadium.Capacity DESC LIMIT 1' (-1.338) (length=19)
[WRONG] [hard] Pred 4:	b'SELECT COUNT(*) FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE stadium.Capacity = (SELECT MAX(stadium.Capacity) FROM stadium)' (-1.353) (length=26)
[WRONG] [hard] Pred 5:	b'SELECT COUNT(*) FROM stadium ORDER BY stadium.Capacity DESC LIMIT 1' (-1.672) (length=13)
 77%|███████▋  | 10/13 [00:52<00:19,  6.36s/it][WRONG] [hard] Pred 6:	b'SELECT COUNT(*) FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY concert.Stadium_ID ORDER BY MAX(stadium.Capacity) DESC LIMIT 1' (-2.473) (length=24)
[WRONG] [hard] Pred 7:	b'SELECT COUNT(*) FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID' (-2.672) (length=14)
[WRONG] [hard] Pred 8:	b'SELECT COUNT(*) FROM stadium WHERE stadium.Capacity = (SELECT MAX(stadium.Capacity) FROM stadium)' (-2.963) (length=20)
[WRONG] [hard] Pred 9:	b'SELECT COUNT(*) FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY concert.Stadium_ID ORDER BY stadium.Capacity DESC LIMIT 1' (-2.993) (length=21)
Error Case 22

Example 82
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?'
NL tokens: [b'what', b'is', b'the', b'total', b'population', b'and', b'average', b'area', b'of', b'countries', b'in', b'the', b'continent', b'of', b'north', b'america', b'whose', b'area', b'is', b'bigger', b'than', b'3000', b'?']
NL tokens (original): [b'What', b'is', b'the', b'total', b'population', b'and', b'average', b'area', b'of', b'countries', b'in', b'the', b'continent', b'of', b'North', b'America', b'whose', b'area', b'is', b'bigger', b'than', b'3000', b'?']
['[CLS]', 'what', 'is', 'the', 'total', 'population', 'and', 'average', 'area', 'of', 'countries', 'in', 'the', 'continent', 'of', 'north', 'america', 'whose', 'area', 'is', 'bigger', 'than', '3000', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused49]', 'north', 'america', '[unused51]', 'region', '[unused49]', 'north', 'america', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000'
Target TF-P tokens: from country where country.Continent = "North America" and country.SurfaceArea > 3000 select sum (country.Population) , avg (country.SurfaceArea)

[WRONG] [hard] Pred 0:	b'SELECT AVG(country.Population) FROM country WHERE country.Continent = "North America" AND country.Region = "North America"' (-0.098) (length=27)
[WRONG] [hard] Pred 1:	b'SELECT AVG(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.Region = "North America"' (-0.191) (length=27)
[WRONG] [hard] Pred 2:	b'SELECT AVG(country.Population) FROM country WHERE country.Continent = "North America" AND country.Region = "North America" AND country.Region > 3000' (-0.634) (length=31)
[WRONG] [hard] Pred 3:	b'SELECT AVG(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.Region = "North America" AND country.Region > 3000' (-0.637) (length=31)
[WRONG] [hard] Pred 4:	b'SELECT SUM(country.Population), AVG(country.Population) FROM country WHERE country.Continent = "North America" AND country.Region = "North America" AND country.Region > 3000' (-0.807) (length=31)
[WRONG] [hard] Pred 5:	b'SELECT AVG(country.Population) FROM country WHERE country.Continent = "North America" AND country.Region > "North America"' (-0.812) (length=27)
[WRONG] [hard] Pred 6:	b'SELECT AVG(country.Population) FROM country WHERE country.Continent = "North America" AND country.Region > 3000' (-0.866) (length=24)
[WRONG] [hard] Pred 7:	b'SELECT AVG(country.Population) FROM country WHERE country.Continent = "North America" AND country.Region = 3000' (-0.866) (length=26)
[WRONG] [hard] Pred 8:	b'SELECT AVG(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.Region > "North America"' (-0.895) (length=27)
[WRONG] [hard] Pred 9:	b'SELECT AVG(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.Region = 3000' (-0.898) (length=26)
[WRONG] [hard] Pred 10:	b'SELECT AVG(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.Region = "North America" AND country.SurfaceArea > 3000' (-0.947) (length=31)
[WRONG] [hard] Pred 11:	b'SELECT AVG(country.Population) FROM country WHERE country.Continent = "North America" AND country.Region = "North America" AND country.SurfaceArea > 3000' (-0.948) (length=31)
[WRONG] [hard] Pred 12:	b'SELECT AVG(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.Region > 3000' (-0.950) (length=24)
[WRONG] [hard] Pred 13:	b'SELECT SUM(country.Population), AVG(country.Population) FROM country WHERE country.Continent = "North America" AND country.Region = "North America" AND country.Region > 3000' (-0.971) (length=33)
[WRONG] [hard] Pred 14:	b'SELECT SUM(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.Region = "North America" AND country.Region > 3000' (-0.975) (length=31)
[WRONG] [hard] Pred 15:	b'SELECT SUM(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.Region = "North America" AND country.Region > 3000' (-1.020) (length=33)
Error Case 23

Parsing error: from countries join car_makers on countries.CountryId = car_makers.Country group by countries.Continent having count (*)) select countries.CountryName , count (*)
Parsing error: from countries join car_makers on countries.CountryId = car_makers.Country group by countries.Continent having count (*) , countries.Continent
Example 83
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What is the name of each continent and how many car makers are there in each one?'
NL tokens: [b'what', b'is', b'the', b'name', b'of', b'each', b'continent', b'and', b'how', b'many', b'car', b'makers', b'are', b'there', b'in', b'each', b'one', b'?']
NL tokens (original): [b'What', b'is', b'the', b'name', b'of', b'each', b'continent', b'and', b'how', b'many', b'car', b'makers', b'are', b'there', b'in', b'each', b'one', b'?']
['[CLS]', 'what', 'is', 'the', 'name', 'of', 'each', 'continent', 'and', 'how', 'many', 'car', 'makers', 'are', 'there', 'in', 'each', 'one', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent'
Target TF-P tokens: from continents join countries on continents.ContId = countries.Continent join car_makers on countries.CountryId = car_makers.Country group by continents.Continent select continents.Continent , count (*)

[WRONG] [hard] Pred 0:	b'SELECT countries.CountryName, COUNT(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent' (-1.029) (length=18)
[WRONG] [hard] Pred 1:	b'SELECT countries.CountryName, COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.Continent' (-2.231) (length=18)
[WRONG] [hard] Pred 2:	b'SELECT continents.Continent, COUNT(*) FROM continents JOIN car_makers ON continents.ContId = car_makers.Country GROUP BY continents.Continent' (-2.480) (length=18)
[WRONG] [hard] Pred 3:	b'SELECT countries.Continent, COUNT(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent' (-2.961) (length=18)
[WRONG] [hard] Pred 4:	b'SELECT countries.CountryName, COUNT(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent HAVING COUNT(*) > 1' (-3.626) (length=25)
[WRONG] [hard] Pred 5:	b'SELECT countries.CountryName, COUNT(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName' (-3.732) (length=18)
[WRONG] [hard] Pred 6:	b'SELECT countries.CountryName, COUNT(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent HAVING COUNT(*) = 1' (-3.938) (length=25)
[WRONG] [hard] Pred 7:	b'SELECT countries.Continent, COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.Continent' (-4.000) (length=18)
[WRONG] [hard] Pred 8:	b'SELECT COUNT(*), countries.Continent FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country' (-4.258) (length=16)
[WRONG] [hard] Pred 9:	b'SELECT countries.CountryName, COUNT(*) FROM countries JOIN car_makers ON countries.Continent = car_makers.Country GROUP BY countries.Continent' (-4.506) (length=18)
[WRONG] [hard] Pred 10:	b'SELECT countries.CountryName, COUNT(*), countries.Continent FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent' (-4.614) (length=20)
[WRONG] [hard] Pred 11:	b'SELECT countries.CountryName, COUNT(*), car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent' (-4.944) (length=20)
[WRONG] [hard] Pred 12:	b'SELECT COUNT(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country' (-4.952) (length=14)
[WRONG] [hard] Pred 13:	b'SELECT countries.CountryName, COUNT(*), 1 FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent' (-5.230) (length=20)
Error Case 24

Parsing error: from cars_data where cars_data.Cylinders = 3 select max (cars_data.Horsepower) , in (*)
Parsing error: from cars_data where cars_data.Cylinders = 3 select max (cars_data.Horsepower) , limit from car_names where cars_data.Cylinders = 3 select max (cars_data.Horsepower) , car_names.Make
Parsing error: from cars_data where cars_data.Cylinders = 3 select max (cars_data.Horsepower) , limit 1
Parsing error: from cars_data where cars_data.Cylinders = 3 select max (cars_data.Horsepower) , limit from car_names where cars_data.Cylinders = 3 select max (cars_data.Horsepower) , car_names.MakeId
Parsing error: from cars_data where cars_data.Cylinders = 3 select max (cars_data.Horsepower) , join car_makers on cars_data.Id = car_makers.Id where cars_data.Cylinders = 3 select max (cars_data.Horsepower) , car_makers.Maker
Parsing error: from cars_data where cars_data.Cylinders = 3 select max (cars_data.Horsepower) , join car_makers on cars_data.Id = car_makers.Id where cars_data.Cylinders = 3 select max (cars_data.Horsepower) , min (cars_data.Cylinders)
Example 84
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What is the maximum horsepower and the make of the car models with 3 cylinders?'
NL tokens: [b'what', b'is', b'the', b'maximum', b'horsepower', b'and', b'the', b'make', b'of', b'the', b'car', b'models', b'with', b'3', b'cylinders', b'?']
NL tokens (original): [b'What', b'is', b'the', b'maximum', b'horsepower', b'and', b'the', b'make', b'of', b'the', b'car', b'models', b'with', b'3', b'cylinders', b'?']
['[CLS]', 'what', 'is', 'the', 'maximum', 'horsepower', 'and', 'the', 'make', 'of', 'the', 'car', 'models', 'with', '3', 'cylinders', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1'
Target TF-P tokens: from car_names join cars_data on car_names.MakeId = cars_data.Id where cars_data.Cylinders = 3 select cars_data.Horsepower , car_names.Make order by cars_data.Horsepower desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT MAX(cars_data.Horsepower), COUNT(*) FROM cars_data WHERE cars_data.Cylinders = 3' (-3.000) (length=17)
[WRONG] [extra] Pred 1:	b'SELECT MAX(cars_data.Horsepower), "yes" FROM cars_data WHERE cars_data.Cylinders = 3' (-3.365) (length=14)
[WRONG] [extra] Pred 2:	b'SELECT MAX(cars_data.Horsepower), MAX(cars_data.Cylinders) FROM cars_data WHERE cars_data.Cylinders = 3' (-3.519) (length=17)
[WRONG] [extra] Pred 3:	b'SELECT MAX(cars_data.Horsepower), MIN(cars_data.Cylinders) FROM cars_data WHERE cars_data.Cylinders = 3' (-3.637) (length=17)
[WRONG] [extra] Pred 4:	b'SELECT MAX(cars_data.Horsepower), MAX(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 3' (-3.779) (length=17)
[WRONG] [extra] Pred 5:	b'SELECT MAX(cars_data.Horsepower), MIN(car_makers.Maker) FROM cars_data JOIN car_makers ON cars_data.Id = car_makers.Id WHERE cars_data.Cylinders = 3' (-3.853) (length=23)
[WRONG] [extra] Pred 6:	b'SELECT MAX(cars_data.Horsepower), MAX(car_makers.Maker) FROM cars_data JOIN car_makers ON cars_data.Id = car_makers.Id WHERE cars_data.Cylinders = 3' (-3.873) (length=23)
[WRONG] [extra] Pred 7:	b'SELECT MAX(cars_data.Horsepower), MIN(cars_data.Cylinders) FROM cars_data JOIN car_makers ON cars_data.Id = car_makers.Id WHERE cars_data.Cylinders = 3' (-3.912) (length=23)
[WRONG] [extra] Pred 8:	b'SELECT MAX(cars_data.Horsepower), MIN(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 3' (-4.030) (length=17)
[WRONG] [extra] Pred 9:	b'SELECT MAX(cars_data.Horsepower), MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 3' (-4.036) (length=17)
Error Case 25

ERROR: table "Students" in field expression Students.student_id is not in the current scope
ERROR: table "Students" in field expression Students.student_id is not in the current scope
ERROR: table "Students" in field expression Students.last_name is not in the current scope
ERROR: table "Students" in field expression Students.last_name is not in the current scope
ERROR: table "Students" in field expression Students.last_name is not in the current scope
Parsing error: from Students where Students.student_id = in (from Addresses where Addresses.state_province_county = "North Carolina" select Students.student_id) select Students.last_name
ERROR: table "Students" in field expression Students.last_name is not in the current scope
Parsing error: from Students where Students.student_id = in (from Student_Enrolment where Student_Enrolment.degree_program_id = "North Carolina" select Student_Enrolment.student_id) select Students.last_name
ERROR: table "Students" in field expression Students.last_name is not in the current scope
ERROR: table "Students" in field expression Students.last_name is not in the current scope
Parsing error: from Students where Students.student_id = "North Carolina" select Students.last_name except from Addresses where Addresses.state_province_county = "registered in (*)"
Parsing error: from Students where Students.student_id = "North Carolina" select Students.last_name except from Students where Students.student_id not in (from Addresses where Degree_Programs on Degree_Programs select Addresses.address_id) select Students.last_name
ERROR: table "Students" in field expression Students.student_id is not in the current scope
Example 85
student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b'What are the last name of the students who live in North Carolina but have not registered in any degree programs?'
NL tokens: [b'what', b'are', b'the', b'last', b'name', b'of', b'the', b'students', b'who', b'live', b'in', b'north', b'carolina', b'but', b'have', b'not', b'registered', b'in', b'any', b'degree', b'programs', b'?']
NL tokens (original): [b'What', b'are', b'the', b'last', b'name', b'of', b'the', b'students', b'who', b'live', b'in', b'North', b'Carolina', b'but', b'have', b'not', b'registered', b'in', b'any', b'degree', b'programs', b'?']
['[CLS]', 'what', 'are', 'the', 'last', 'name', 'of', 'the', 'students', 'who', 'live', 'in', 'north', 'carolina', 'but', 'have', 'not', 'registered', 'in', 'any', 'degree', 'programs', '?', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b"SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"
Target TF-P tokens: from Students join Addresses on Students.current_address_id = Addresses.address_id where Addresses.state_province_county = "North VALUE VALUE VALUE" select Students.last_name except from Students join Student_Enrolment on Students.student_id = Student_Enrolment.student_id select distinct Students.last_name

[WRONG] [extra] Pred 0:	b'SELECT Students.last_name FROM Students WHERE Students.student_id = "North Carolina" EXCEPT SELECT Students.last_name FROM Students WHERE Students.student_id NOT IN (SELECT Student_Enrolment.student_id FROM Student_Enrolment)' (-1.911) (length=27)
[WRONG] [extra] Pred 1:	b'SELECT Students.last_name FROM Students WHERE Students.student_id = "North Carolina" EXCEPT SELECT Students.last_name FROM Students WHERE Students.student_id NOT IN (SELECT Addresses.address_id FROM Addresses WHERE Addresses.state_province_county = "North Carolina")' (-2.166) (length=34)
[WRONG] [extra] Pred 2:	b'SELECT Students.last_name FROM Students WHERE Students.student_id IN (SELECT Student_Enrolment.student_id FROM Student_Enrolment WHERE Student_Enrolment.degree_program_id = "North Carolina")' (-2.363) (length=21)
Error Case 26

ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.Viewers_m']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.Viewers_m']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_series.id', 'Cartoon.id']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_Channel.Content']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.18_49_Rating_Share']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.Viewers_m']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_series.id', 'Cartoon.id']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.Viewers_m']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.Viewers_m']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.Viewers_m']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.Viewers_m']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.Viewers_m']}}]
Example 86
tvshow
 +-- TV_Channel (tv channel)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- series_name (series name)
 |   +-- Country (country)
 |   +-- Language (language)
 |   +-- Content (content)
 |   +-- Pixel_aspect_ratio_PAR (pixel aspect ratio par)
 |   +-- Hight_definition_TV (hight definition tv)
 |   +-- Pay_per_view_PPV (pay per view ppv)
 |   +-- Package_Option (package option)
 +-- TV_series (tv series)
 |   +-- id (id) [PRIMARY]
 |   +-- Episode (episode)
 |   +-- Air_Date (air date)
 |   +-- Rating (rating)
 |   +-- Share (share)
 |   +-- 18_49_Rating_Share (18 49 rating share)
 |   +-- Viewers_m (viewers m)
 |   +-- Weekly_Rank (weekly rank)
 |   +-- Channel (channel) [FOREIGN]
 +-- Cartoon (cartoon)
     +-- id (id) [PRIMARY]
     +-- Title (title)
     +-- Directed_by (directed by)
     +-- Written_by (written by)
     +-- Original_air_date (original air date)
     +-- Production_code (production code)
     +-- Channel (channel) [FOREIGN]
NL: b'What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?'
 85%|████████▍ | 11/13 [01:11<00:20, 10.14s/it]NL tokens: [b'what', b'is', b'the', b'series', b'name', b'and', b'country', b'of', b'all', b'tv', b'channels', b'that', b'are', b'playing', b'cartoons', b'directed', b'by', b'ben', b'jones', b'and', b'cartoons', b'directed', b'by', b'michael', b'chang', b'?']
NL tokens (original): [b'What', b'is', b'the', b'series', b'name', b'and', b'country', b'of', b'all', b'TV', b'channels', b'that', b'are', b'playing', b'cartoons', b'directed', b'by', b'Ben', b'Jones', b'and', b'cartoons', b'directed', b'by', b'Michael', b'Chang', b'?']
['[CLS]', 'what', 'is', 'the', 'series', 'name', 'and', 'country', 'of', 'all', 'tv', 'channels', 'that', 'are', 'playing', 'cartoons', 'directed', 'by', 'ben', 'jones', 'and', 'cartoons', 'directed', 'by', 'michael', 'chang', '?', '[SEP]', '*', '[unused50]', 'tv', 'channel', '[unused51]', 'id', '[unused51]', 'series', 'name', '[unused51]', 'country', '[unused51]', 'language', '[unused51]', 'content', '[unused51]', 'pixel', 'aspect', 'ratio', 'par', '[unused51]', 'high', '##t', 'definition', 'tv', '[unused51]', 'pay', 'per', 'view', 'pp', '##v', '[unused51]', 'package', 'option', '[unused50]', 'tv', 'series', '[unused51]', 'id', '[unused51]', 'episode', '[unused51]', 'air', 'date', '[unused51]', 'rating', '[unused51]', 'share', '[unused51]', '18', '49', 'rating', 'share', '[unused51]', 'viewers', 'm', '[unused51]', 'weekly', 'rank', '[unused51]', 'channel', '[unused50]', 'cartoon', '[unused51]', 'id', '[unused51]', 'title', '[unused51]', 'directed', 'by', '[unused49]', 'michael', 'chang', '[unused49]', 'ben', 'jones', '[unused51]', 'written', 'by', '[unused51]', 'original', 'air', 'date', '[unused51]', 'production', 'code', '[unused51]', 'channel', '[SEP]']
Target 0: b"SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'"
Target TF-P tokens: from TV_Channel join Cartoon on TV_Channel.id = Cartoon.Channel where Cartoon.Directed_by = "Michael Chang" select TV_Channel.series_name , TV_Channel.Country intersect from TV_Channel join Cartoon on TV_Channel.id = Cartoon.Channel where Cartoon.Directed_by = "Ben Jones" select TV_Channel.series_name , TV_Channel.Country

[WRONG] [extra] Pred 0:	b'SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = "Ben Jones" INTERSECT SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.Directed_by = "Michael Chang"' (-0.215) (length=52)
[WRONG] [extra] Pred 1:	b'SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.Directed_by = "Ben Jones" INTERSECT SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.Directed_by = "Michael Chang"' (-0.256) (length=52)
[WRONG] [extra] Pred 2:	b'SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.id WHERE Cartoon.Directed_by = "Ben Jones" INTERSECT SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.Directed_by = "Michael Chang"' (-0.400) (length=52)
Error Case 27

ERROR: Join condition does not match with table: ['Highschooler', {'join': 'Likes', 'on': {'eq': ['Likes.liked_id', 'Likes.student_id']}}]
Example 87
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'Give the name of the student with the most likes.'
NL tokens: [b'give', b'the', b'name', b'of', b'the', b'student', b'with', b'the', b'most', b'likes', b'.']
NL tokens (original): [b'Give', b'the', b'name', b'of', b'the', b'student', b'with', b'the', b'most', b'likes', b'.']
['[CLS]', 'give', 'the', 'name', 'of', 'the', 'student', 'with', 'the', 'most', 'likes', '.', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from Likes join Highschooler on Likes.student_id = Highschooler.ID group by Likes.student_id select Highschooler.name order by count (*) desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id ORDER BY Likes.liked_id DESC LIMIT 1' (-0.249) (length=16)
[WRONG] [extra] Pred 1:	b'SELECT Likes.student_id FROM Likes ORDER BY Likes.liked_id DESC LIMIT 1' (-0.595) (length=10)
[WRONG] [extra] Pred 2:	b'SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id ORDER BY Likes.liked_id DESC LIMIT 1' (-0.629) (length=16)
[CORRE] [extra] Pred 3:	b'SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Likes.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.041) (length=21)
Error Case 28

Parsing error: from players join tourney Championships "select players.country_code , players.first_name intersect from players join Australian Open" select players.country_code , players.first_name
Parsing error: from players join tour VALUE "select players.country_code , players.first_name intersect from players join Australian Open" select players.country_code , players.first_name
Parsing error: from players join matches on players.player_id = matches.winner_id where matches.tourney_name = "tourney VALUE" select players.country_code , players.first_name intersect from players join Australian Open "select players.country_code , players.first_name"
Parsing error: from players join matches on players.player_id = matches.winner_id where matches.tourney_name = "tour WTA VALUE" select players.country_code , players.first_name intersect from players join Australian Open "select players.country_code , players.first_name"
Parsing error: from players join tour WTA Championships "select players.country_code , players.first_name intersect from players join Australian Open" select players.country_code , players.first_name
Parsing error: from players join tour Championships "select players.country_code , players.first_name intersect from players join Australian Open" select players.country_code , players.first_name
Parsing error: from players join tourney Championships "select players.country_code , players.first_name intersect from players join matches on players.player_id = matches.winner_id where matches.tourney_name =" Australian Open "select players.country_code , players.first_name"
Parsing error: from players join matches on players.player_id = matches.winner_id where matches.tourney_name = "tour WTA" select players.country_code , players.first_name intersect from players join Australian Open "select players.country_code , players.first_name"
Parsing error: from players join WTA Championships "select players.country_code , players.first_name intersect from players join Australian Open" select players.country_code , players.first_name
Parsing error: from players join tourney Championships "select players.country_code , players.first_name intersect from players join players.first_name =" Australian Open "select players.country_code , players.first_name"
Parsing error: from players join Australian Open "select players.country_code , players.first_name intersect from players join Australian Open" select players.country_code , players.first_name
Parsing error: from players join players.last_name = "tourney" select players.country_code , players.first_name intersect from players join Australian Open "select players.country_code , players.first_name"
ERROR: "{'name': 'select players.country_code , players.first_name intersect from players join Australian Open', 'value': 'WTA', 'is_table': True}" appeared in FROM clause and is not a table
Parsing error: from players join tourney Championships "select players.country_code , players.first_name intersect from players join players.last_name =" Australian Open "select players.country_code , players.first_name"
Parsing error: from players join players.last_name join tourney Championships "select players.country_code , players.first_name intersect from players join Australian Open" select players.country_code , players.first_name
Parsing error: from players join tour 0 "select players.country_code , players.first_name intersect from players join Australian Open" select players.country_code , players.first_name
Example 89
wta_1
 +-- players (players)
 |   +-- player_id (player id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- hand (hand)
 |   +-- birth_date (birth date)
 |   +-- country_code (country code)
 +-- matches (matches)
 |   +-- best_of (best of)
 |   +-- draw_size (draw size)
 |   +-- loser_age (loser age)
 |   +-- loser_entry (loser entry)
 |   +-- loser_hand (loser hand)
 |   +-- loser_ht (loser ht)
 |   +-- loser_id (loser id) [FOREIGN]
 |   +-- loser_ioc (loser ioc)
 |   +-- loser_name (loser name)
 |   +-- loser_rank (loser rank)
 |   +-- loser_rank_points (loser rank points)
 |   +-- loser_seed (loser seed)
 |   +-- match_num (match num)
 |   +-- minutes (minutes)
 |   +-- round (round)
 |   +-- score (score)
 |   +-- surface (surface)
 |   +-- tourney_date (tourney date)
 |   +-- tourney_id (tourney id)
 |   +-- tourney_level (tourney level)
 |   +-- tourney_name (tourney name)
 |   +-- winner_age (winner age)
 |   +-- winner_entry (winner entry)
 |   +-- winner_hand (winner hand)
 |   +-- winner_ht (winner ht)
 |   +-- winner_id (winner id) [FOREIGN]
 |   +-- winner_ioc (winner ioc)
 |   +-- winner_name (winner name)
 |   +-- winner_rank (winner rank)
 |   +-- winner_rank_points (winner rank points)
 |   +-- winner_seed (winner seed)
 |   +-- year (year)
 +-- rankings (rankings)
     +-- ranking_date (ranking date)
     +-- ranking (ranking)
     +-- player_id (player id) [FOREIGN]
     +-- ranking_points (ranking points)
     +-- tours (tours)
NL: b'What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?'
NL tokens: [b'what', b'are', b'the', b'country', b'code', b'and', b'first', b'name', b'of', b'the', b'players', b'who', b'won', b'in', b'both', b'tour', b'##ney', b'wta', b'championships', b'and', b'australian', b'open', b'?']
NL tokens (original): [b'What', b'are', b'the', b'country', b'code', b'and', b'first', b'name', b'of', b'the', b'players', b'who', b'won', b'in', b'both', b'tour', b'##ney', b'WTA', b'Championships', b'and', b'Australian', b'Open', b'?']
['[CLS]', 'what', 'are', 'the', 'country', 'code', 'and', 'first', 'name', 'of', 'the', 'players', 'who', 'won', 'in', 'both', 'tour', '##ney', 'wta', 'championships', 'and', 'australian', 'open', '?', '[SEP]', '*', '[unused50]', 'players', '[unused51]', 'player', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'hand', '[unused51]', 'birth', 'date', '[unused51]', 'country', 'code', '[unused50]', 'matches', '[unused51]', 'best', 'of', '[unused51]', 'draw', 'size', '[unused51]', 'loser', 'age', '[unused51]', 'loser', 'entry', '[unused51]', 'loser', 'hand', '[unused51]', 'loser', 'h', '##t', '[unused51]', 'loser', 'id', '[unused51]', 'loser', 'ioc', '[unused51]', 'loser', 'name', '[unused51]', 'loser', 'rank', '[unused51]', 'loser', 'rank', 'points', '[unused51]', 'loser', 'seed', '[unused51]', 'match', 'nu', '##m', '[unused51]', 'minutes', '[unused51]', 'round', '[unused51]', 'score', '[unused51]', 'surface', '[unused51]', 'tour', '##ney', 'date', '[unused51]', 'tour', '##ney', 'id', '[unused51]', 'tour', '##ney', 'level', '[unused51]', 'tour', '##ney', 'name', '[unused49]', 'wta', 'championships', '[unused49]', 'australian', 'open', '[unused51]', 'winner', 'age', '[unused51]', 'winner', 'entry', '[unused51]', 'winner', 'hand', '[unused51]', 'winner', 'h', '##t', '[unused51]', 'winner', 'id', '[unused51]', 'winner', 'ioc', '[unused51]', 'winner', 'name', '[unused51]', 'winner', 'rank', '[unused51]', 'winner', 'rank', 'points', '[unused51]', 'winner', 'seed', '[unused51]', 'year', '[unused50]', 'rankings', '[unused51]', 'ranking', 'date', '[unused51]', 'ranking', '[unused51]', 'player', 'id', '[unused51]', 'ranking', 'points', '[unused51]', 'tours', '[SEP]']
Target 0: b"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'"
Target TF-P tokens: from players join matches on players.player_id = matches.winner_id where matches.tourney_name = "WTA Championships" select players.country_code , players.first_name intersect from players join matches on players.player_id = matches.winner_id where matches.tourney_name = "Australian Open" select players.country_code , players.first_name

[WRONG] extra Pred 0:	No valid output! (0.000)
Error Case 29

Example 90
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Which Asian countries have a population that is larger than any country in Africa?'
NL tokens: [b'which', b'asian', b'countries', b'have', b'a', b'population', b'that', b'is', b'larger', b'than', b'any', b'country', b'in', b'africa', b'?']
NL tokens (original): [b'Which', b'Asian', b'countries', b'have', b'a', b'population', b'that', b'is', b'larger', b'than', b'any', b'country', b'in', b'Africa', b'?']
['[CLS]', 'which', 'asian', 'countries', 'have', 'a', 'population', 'that', 'is', 'larger', 'than', 'any', 'country', 'in', 'africa', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused49]', 'africa', '[unused49]', 'asia', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  "Africa")'
Target TF-P tokens: from country where country.Continent = "VALUE" and country.Population > (from country where country.Continent = "Africa" select max (country.Population)) select country.Name

[WRONG] [extra] Pred 0:	b'SELECT country.Name FROM country WHERE country.Population > (SELECT MAX(country.Population) FROM country WHERE country.Continent = "Africa")' (-0.005) (length=23)
[CORRE] [extra] Pred 1:	b'SELECT country.Name FROM country WHERE country.Population > (SELECT MAX(country.Population) FROM country WHERE country.Continent = "Africa") AND country.Continent = "Asian"' (-0.803) (length=29)
Error Case 30

ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['city.CountryCode', 'country.Code']}}]
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['city.CountryCode', 'country.Code']}}]
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['city.CountryCode', 'country.Code']}}]
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['city.CountryCode', 'country.Code']}}]
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['city.CountryCode', 'country.Code']}}]
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['city.CountryCode', 'country.Code']}}]
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['city.CountryCode', 'country.Code']}}]
ERROR: table "city" in field expression city.Name is not in the current scope
ERROR: table "city" in field expression city.Name is not in the current scope
ERROR: table "city" in field expression city.Name is not in the current scope
Example 91
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What are the names of cities in Europe for which English is not the official language?'
NL tokens: [b'what', b'are', b'the', b'names', b'of', b'cities', b'in', b'europe', b'for', b'which', b'english', b'is', b'not', b'the', b'official', b'language', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'of', b'cities', b'in', b'Europe', b'for', b'which', b'English', b'is', b'not', b'the', b'official', b'language', b'?']
['[CLS]', 'what', 'are', 'the', 'names', 'of', 'cities', 'in', 'europe', 'for', 'which', 'english', 'is', 'not', 'the', 'official', 'language', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused49]', 'europe', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused49]', 'english', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b"SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"
Target TF-P tokens: from country join city on city.CountryCode = country.Code where country.Continent = "Europe" and country.Name not in (from country join countrylanguage on country.Code = countrylanguage.CountryCode where countrylanguage.IsOfficial = "t" and countrylanguage.Language = "English" select country.Name) select distinct city.Name

[WRONG] [extra] Pred 0:	b'SELECT city.Name FROM city WHERE city.CountryCode = "Europe" EXCEPT SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = "English"' (-2.553) (length=28)
[WRONG] [extra] Pred 1:	b'SELECT city.Name FROM city WHERE city.CountryCode = "English" EXCEPT SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = "English"' (-3.012) (length=28)
[WRONG] [extra] Pred 2:	b'SELECT city.Name FROM city WHERE city.CountryCode = "Europe" EXCEPT SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = "official"' (-3.101) (length=28)
[WRONG] [extra] Pred 3:	b'SELECT city.Name FROM city WHERE city.CountryCode = "Europe" EXCEPT SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = "the"' (-3.301) (length=28)
[WRONG] [extra] Pred 4:	b'SELECT city.Name FROM city WHERE city.CountryCode = "Europe" AND city.CountryCode != "the"' (-3.477) (length=17)
[WRONG] [extra] Pred 5:	b'SELECT city.Name FROM city WHERE city.CountryCode = "Europe" AND city.CountryCode != "official"' (-3.624) (length=17)
Error Case 31

ERROR: table "country" in field expression country.Continent is not in the current scope
ERROR: table "country" in field expression country.Code is not in the current scope
Parsing error: from country where country.Continent not = (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select sum (country.Population)
ERROR: table "countrylanguage" in field expression countrylanguage.CountryCode is not in the current scope
Parsing error: from country where country.Continent is in (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select sum (country.Population)
Parsing error: from country where country.Continent not in (from countrylanguage where countrylanguage.Language = "English" select country) select countrylanguage.CountryCode) select sum (country.Population)
Parsing error: from country where country.Continent except (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select sum (country.Population)
Parsing error: from country where country.Continent not = (from countrylanguage where countrylanguage.Language = "English" select country.Continent) select sum (country.Population)
Parsing error: from country where country.Continent having in (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select sum (country.Population)
ERROR: table "country" in field expression country.Continent is not in the current scope
Parsing error: from country where country.Continent not = "English" select sum (country.Population)
Example 92
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What is the total number of people living in the nations that do not use English?'
NL tokens: [b'what', b'is', b'the', b'total', b'number', b'of', b'people', b'living', b'in', b'the', b'nations', b'that', b'do', b'not', b'use', b'english', b'?']
NL tokens (original): [b'What', b'is', b'the', b'total', b'number', b'of', b'people', b'living', b'in', b'the', b'nations', b'that', b'do', b'not', b'use', b'English', b'?']
['[CLS]', 'what', 'is', 'the', 'total', 'number', 'of', 'people', 'living', 'in', 'the', 'nations', 'that', 'do', 'not', 'use', 'english', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused49]', 'english', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")'
Target TF-P tokens: from country where country.Name not in (from country join countrylanguage on country.Code = countrylanguage.CountryCode where countrylanguage.Language = "English" select country.Name) select sum (country.Population)

[WRONG] [extra] Pred 0:	b'SELECT SUM(country.Population) FROM country WHERE country.Continent NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")' (-0.046) (length=24)
[WRONG] [extra] Pred 1:	b'SELECT SUM(country.Population) FROM country WHERE country.Continent != "English"' (-1.167) (length=14)
[WRONG] [extra] Pred 2:	b'SELECT SUM(country.Population) FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.Continent WHERE countrylanguage.Language != "English"' (-2.110) (length=20)
[WRONG] [extra] Pred 3:	b'SELECT SUM(country.Population), country.Continent FROM country WHERE country.Continent NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")' (-2.384) (length=26)
[WRONG] [extra] Pred 4:	b'SELECT SUM(country.Population) FROM country WHERE country.Continent IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")' (-2.735) (length=23)
Error Case 32

Example 93
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b"Which professional did not operate any treatment on dogs? List the professional's id, role and email."
NL tokens: [b'which', b'professional', b'did', b'not', b'operate', b'any', b'treatment', b'on', b'dogs', b'?', b'list', b'the', b'professional', b"'", b's', b'id', b',', b'role', b'and', b'email', b'.']
NL tokens (original): [b'Which', b'professional', b'did', b'not', b'operate', b'any', b'treatment', b'on', b'dogs', b'?', b'List', b'the', b'professional', b"'", b's', b'id', b',', b'role', b'and', b'email', b'.']
['[CLS]', 'which', 'professional', 'did', 'not', 'operate', 'any', 'treatment', 'on', 'dogs', '?', 'list', 'the', 'professional', "'", 's', 'id', ',', 'role', 'and', 'email', '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id'
Target TF-P tokens: from Professionals select Professionals.professional_id , Professionals.role_code , Professionals.email_address except from Professionals join Treatments on Professionals.professional_id = Treatments.professional_id select Professionals.professional_id , Professionals.role_code , Professionals.email_address

[WRONG] [extra] Pred 0:	b'SELECT Professionals.professional_id, Professionals.role_code, Professionals.email_address FROM Professionals' (-0.012) (length=9)
[CORRE] [extra] Pred 1:	b'SELECT Professionals.professional_id, Professionals.role_code, Professionals.email_address FROM Professionals EXCEPT SELECT Professionals.professional_id, Professionals.role_code, Professionals.email_address FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id' (-0.685) (length=24)
Error Case 33

Example 94
student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b'For each semester, what is the name and id of the one with the most students registered?'
NL tokens: [b'for', b'each', b'semester', b',', b'what', b'is', b'the', b'name', b'and', b'id', b'of', b'the', b'one', b'with', b'the', b'most', b'students', b'registered', b'?']
NL tokens (original): [b'For', b'each', b'semester', b',', b'what', b'is', b'the', b'name', b'and', b'id', b'of', b'the', b'one', b'with', b'the', b'most', b'students', b'registered', b'?']
['[CLS]', 'for', 'each', 'semester', ',', 'what', 'is', 'the', 'name', 'and', 'id', 'of', 'the', 'one', 'with', 'the', 'most', 'students', 'registered', '?', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b'SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from Semesters join Student_Enrolment on Semesters.semester_id = Student_Enrolment.semester_id group by Semesters.semester_id select Semesters.semester_name , Semesters.semester_id order by count (*) desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT Semesters.semester_name, Semesters.semester_id FROM Semesters JOIN Students ON Semesters.semester_id = Students.current_address_id GROUP BY Semesters.semester_id ORDER BY COUNT(*) DESC LIMIT 1' (-0.945) (length=23)
[WRONG] [extra] Pred 1:	b'SELECT Semesters.semester_name, Semesters.semester_id FROM Semesters JOIN Students ON Semesters.semester_id = Students.permanent_address_id GROUP BY Semesters.semester_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.154) (length=23)
[CORRE] [extra] Pred 2:	b'SELECT Semesters.semester_name, Semesters.semester_id FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY Semesters.semester_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.727) (length=23)
Error Case 34

ERROR: Join condition does not match with table: ['countries', {'join': 'car_names', 'on': {'eq': ['countries.CountryId', 'car_makers.Country']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'car_names', 'on': {'eq': ['countries.CountryId', 'car_makers.Country']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'car_names', 'on': {'eq': ['countries.CountryId', 'car_makers.Country']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'car_names', 'on': {'eq': ['countries.CountryId', 'car_makers.Country']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'model_list', 'on': {'eq': ['countries.CountryId', 'car_makers.Country']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'car_names', 'on': {'eq': ['countries.CountryId', 'car_makers.Country']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'car_names', 'on': {'eq': ['countries.CountryId', 'car_makers.Country']}}]
ERROR: table "car_makers" in field expression car_makers.Maker is not in the current scope
Example 95
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?'
NL tokens: [b'what', b'are', b'the', b'id', b'##s', b'and', b'names', b'of', b'all', b'countries', b'that', b'either', b'have', b'more', b'than', b'3', b'car', b'makers', b'or', b'produce', b'fiat', b'model', b'?']
NL tokens (original): [b'What', b'are', b'the', b'id', b'##s', b'and', b'names', b'of', b'all', b'countries', b'that', b'either', b'have', b'more', b'than', b'3', b'car', b'makers', b'or', b'produce', b'fiat', b'model', b'?']
['[CLS]', 'what', 'are', 'the', 'id', '##s', 'and', 'names', 'of', 'all', 'countries', 'that', 'either', 'have', 'more', 'than', '3', 'car', 'makers', 'or', 'produce', 'fiat', 'model', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused49]', 'fiat', '[unused51]', 'full', 'name', '[unused49]', 'fiat', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused49]', 'fiat', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused49]', 'fiat', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b"select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat'"
 92%|█████████▏| 12/13 [01:24<00:11, 11.13s/it]Target TF-P tokens: from countries join car_makers on countries.CountryId = car_makers.Country group by countries.CountryId having count (*) > 3 select countries.CountryId , countries.CountryName union from countries join car_makers on countries.CountryId = car_makers.Country join model_list on car_makers.Id = model_list.Maker where model_list.Model = "fiat" select countries.CountryId , countries.CountryName

[WRONG] [extra] Pred 0:	b'SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) > 3 UNION SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Maker = "fiat"' (-0.518) (length=41)
[WRONG] [extra] Pred 1:	b'SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) > 3 UNION SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.FullName = "fiat"' (-0.719) (length=41)
[WRONG] [extra] Pred 2:	b'SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) > 3 UNION SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Maker = "fiat"' (-0.906) (length=41)
[WRONG] [extra] Pred 3:	b'SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) > 3 UNION SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.FullName = "fiat"' (-1.135) (length=41)
[WRONG] [extra] Pred 4:	b'SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) > 3 EXCEPT SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Maker = "fiat"' (-1.370) (length=41)
[WRONG] [extra] Pred 5:	b'SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) > 3 UNION SELECT car_makers.Country, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Maker = "fiat"' (-1.381) (length=41)
[WRONG] [extra] Pred 6:	b'SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) > 3 EXCEPT SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.FullName = "fiat"' (-1.575) (length=41)
[WRONG] [extra] Pred 7:	b'SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) > 3 UNION SELECT car_makers.Country, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.FullName = "fiat"' (-1.584) (length=41)
Error Case 35

ERROR: Join condition does not match with table: ['car_makers', {'join': 'car_names', 'on': {'eq': ['car_makers.Id', 'car_names.MakeId']}}, {'join': 'cars_data', 'on': {'eq': ['car_names.Model', 'car_names.Model']}}]
ERROR: Join condition does not match with table: ['car_names', {'join': 'car_makers', 'on': {'eq': ['car_makers.Id', 'car_makers.Id']}}]
ERROR: Join condition does not match with table: ['car_makers', {'join': 'car_names', 'on': {'eq': ['car_makers.Id', 'car_names.MakeId']}}, {'join': 'cars_data', 'on': {'eq': ['car_names.Model', 'car_names.Model']}}]
Example 96
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'Find the name of the makers that produced some cars in the year of 1970?'
NL tokens: [b'find', b'the', b'name', b'of', b'the', b'makers', b'that', b'produced', b'some', b'cars', b'in', b'the', b'year', b'of', b'1970', b'?']
NL tokens (original): [b'Find', b'the', b'name', b'of', b'the', b'makers', b'that', b'produced', b'some', b'cars', b'in', b'the', b'year', b'of', b'1970', b'?']
['[CLS]', 'find', 'the', 'name', 'of', 'the', 'makers', 'that', 'produced', 'some', 'cars', 'in', 'the', 'year', 'of', '1970', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b"SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"
Target TF-P tokens: from car_makers join model_list on car_makers.Id = model_list.Maker join car_names on model_list.Model = car_names.Model join cars_data on car_names.MakeId = cars_data.Id where cars_data.Year = "1970" select distinct car_makers.Maker

[WRONG] [extra] Pred 0:	b'SELECT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Make = 1970' (-2.661) (length=15)
[WRONG] [extra] Pred 1:	b'SELECT DISTINCT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Make = 1970' (-3.618) (length=16)
[WRONG] [extra] Pred 2:	b'SELECT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id WHERE cars_data.Year = 1970' (-3.725) (length=21)
[WRONG] [extra] Pred 3:	b'SELECT car_makers.Maker FROM car_names JOIN car_makers ON car_names.MakeId = car_makers.Id WHERE car_names.Make = 1970' (-3.990) (length=15)
[WRONG] [extra] Pred 4:	b'SELECT DISTINCT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id WHERE cars_data.Year = 1970' (-4.308) (length=22)
[WRONG] [extra] Pred 5:	b'SELECT car_makers.Maker FROM car_names JOIN car_makers ON car_makers.Id = car_names.MakeId WHERE car_names.Make = 1970' (-5.076) (length=15)
[WRONG] [extra] Pred 6:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Make = 1970' (-5.312) (length=17)
100%|██████████| 13/13 [01:27<00:00,  8.75s/it]
[WRONG] [extra] Pred 7:	b'SELECT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id WHERE cars_data.Year = 1970 AND car_makers.FullName = year' (-5.330) (length=27)
[WRONG] [extra] Pred 8:	b'SELECT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Make = 1970 INTERSECT SELECT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Make = 1970' (-5.772) (length=30)
[WRONG] [extra] Pred 9:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id WHERE cars_data.Year = 1970' (-5.795) (length=23)
[WRONG] [extra] Pred 10:	b'SELECT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN car_names ON car_names.Model = car_names.Model WHERE car_names.Make = 1970' (-5.970) (length=21)
[WRONG] [extra] Pred 11:	b'SELECT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Make = 1970 ORDER BY car_makers.FullName' (-6.002) (length=17)
[WRONG] [extra] Pred 12:	b'SELECT DISTINCT car_makers.Maker, car_makers.FullName FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Make = 1970' (-6.089) (length=18)
Error Case 36

Example 99
flight_2
 +-- airlines (airlines)
 |   +-- uid (airline id) [PRIMARY]
 |   +-- Airline (airline name) [FOREIGN]
 |   +-- Abbreviation (abbreviation)
 |   +-- Country (country)
 +-- airports (airports)
 |   +-- AirportCode (airport code) [PRIMARY] [FOREIGN]
 |   +-- City (city)
 |   +-- AirportName (airport name)
 |   +-- Country (country)
 |   +-- CountryAbbrev (country abbrev)
 +-- flights (flights)
     +-- Airline (airline) [PRIMARY] [FOREIGN]
     +-- FlightNo (flight number)
     +-- SourceAirport (source airport) [FOREIGN]
     +-- DestAirport (destination airport) [FOREIGN]
NL: b'Which city has the most frequent destination airport?'
NL tokens: [b'which', b'city', b'has', b'the', b'most', b'frequent', b'destination', b'airport', b'?']
NL tokens (original): [b'Which', b'city', b'has', b'the', b'most', b'frequent', b'destination', b'airport', b'?']
['[CLS]', 'which', 'city', 'has', 'the', 'most', 'frequent', 'destination', 'airport', '?', '[SEP]', '*', '[unused50]', 'airlines', '[unused51]', 'airline', 'id', '[unused51]', 'airline', 'name', '[unused51]', 'abbreviation', '[unused51]', 'country', '[unused50]', 'airports', '[unused51]', 'city', '[unused51]', 'airport', 'code', '[unused51]', 'airport', 'name', '[unused51]', 'country', '[unused51]', 'country', 'ab', '##bre', '##v', '[unused50]', 'flights', '[unused51]', 'airline', '[unused51]', 'flight', 'number', '[unused51]', 'source', 'airport', '[unused51]', 'destination', 'airport', '[SEP]']
Target 0: b'SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from airports join flights on airports.AirportCode = flights.DestAirport group by airports.City select airports.City order by count (*) desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT airports.City FROM airports GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1' (-0.047) (length=15)
[CORRE] [extra] Pred 1:	b'SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1' (-0.411) (length=21)
Error Case 37

Model predictions saved to /home/shelunts/thesis/TabularSemantingParsing/model/spider.bridge.lstm.meta.ts.ppl-0.85.2.dn.eo.feat.bert-large-uncased.xavier-1024-400-400-8-2-0.0005-inv-sqr-0.0005-4000-6e-05-inv-sqr-3e-05-4000-0.3-0.3-0.0-0.0-1-8-0.0-0.0-res-0.2-0.0-ff-0.4-0.0/predictions.16.1.05.dev.txt
DEV set performance
Top-1 exact match: 0.630
Top-2 exact match: 0.690
Top-3 exact match: 0.710
Top-5 exact match: 0.740
Top-10 exact match: 0.780
Table error: -0.070
