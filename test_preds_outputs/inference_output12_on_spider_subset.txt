run python3 -m src.experiments     --inference     --data_dir data/spider     --db_dir data/spider/database     --dataset_name spider     --question_split          --question_only               --denormalize_sql               --table_shuffling     --use_lstm_encoder     --use_meta_data_encoding          --sql_consistency_check          --use_picklist     --anchor_text_match_threshold 0.85               --top_k_picklist_matches 2     --process_sql_in_execution_order               --num_random_tables_added 0                         --save_best_model_only     --schema_augmentation_factor 1          --data_augmentation_factor 1          --vocab_min_freq 0     --text_vocab_min_freq 0     --program_vocab_min_freq 0     --num_values_per_field 0     --max_in_seq_len 512     --max_out_seq_len 60     --model bridge     --num_steps 100000     --curriculum_interval 0     --num_peek_steps 1000     --num_accumulation_steps 2     --train_batch_size 8     --dev_batch_size 8     --encoder_input_dim 1024     --encoder_hidden_dim 400     --decoder_input_dim 400     --num_rnn_layers 1     --num_const_attn_layers 0     --emb_dropout_rate 0.3     --pretrained_lm_dropout_rate 0     --rnn_layer_dropout_rate 0     --rnn_weight_dropout_rate 0     --cross_attn_dropout_rate 0     --cross_attn_num_heads 8     --res_input_dropout_rate 0.2     --res_layer_dropout_rate 0     --ff_input_dropout_rate 0.4     --ff_hidden_dropout_rate 0.0     --pretrained_transformer bert-large-uncased          --bert_finetune_rate 0.00006     --learning_rate 0.0005     --learning_rate_scheduler inverse-square     --trans_learning_rate_scheduler inverse-square     --warmup_init_lr 0.0005     --warmup_init_ft_lr 0.00003     --num_warmup_steps 4000     --grad_norm 0.3     --decoding_algorithm beam-search     --beam_size 16     --bs_alpha 1.05     --gpu 0     --checkpoint_path /home/shelunts/thesis/TabularSemantingParsing/model/spider.bridge.lstm.meta.ts.ppl-0.85.2.dn.eo.feat.bert-large-uncased.xavier-1024-400-400-8-2-0.0005-inv-sqr-0.0005-4000-6e-05-inv-sqr-3e-05-4000-0.3-0.3-0.0-0.0-1-8-0.0-0.0-res-0.2-0.0-ff-0.4-0.0.220119-195756.tg05/model-best.16.tar
2022-01-24 13:29:30.994156: I tensorflow/stream_executor/platform/default/dso_loader.cc:53] Successfully opened dynamic library libcudart.so.11.0
  0%|          | 0/13 [00:00<?, ?it/s]/usr/lib/python3/dist-packages/torch/_tensor.py:575: UserWarning: floor_divide is deprecated, and will be removed in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values.
To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor'). (Triggered internally at  ../aten/src/ATen/native/BinaryOps.cpp:461.)
  return torch.floor_divide(self, other)
  8%|▊         | 1/13 [00:01<00:18,  1.55s/it] 15%|█▌        | 2/13 [00:03<00:19,  1.80s/it] 23%|██▎       | 3/13 [00:05<00:17,  1.73s/it]Model directory exists: /home/shelunts/thesis/TabularSemantingParsing/model/spider.bridge.lstm.meta.ts.ppl-0.85.2.dn.eo.feat.bert-large-uncased.xavier-1024-400-400-8-2-0.0005-inv-sqr-0.0005-4000-6e-05-inv-sqr-3e-05-4000-0.3-0.3-0.0-0.0-1-8-0.0-0.0-res-0.2-0.0-ff-0.4-0.0
Visualization directory exists: /home/shelunts/thesis/TabularSemantingParsing/viz/spider.bridge.lstm.meta.ts.ppl-0.85.2.dn.eo.feat.bert-large-uncased.xavier-1024-400-400-8-2-0.0005-inv-sqr-0.0005-4000-6e-05-inv-sqr-3e-05-4000-0.3-0.3-0.0-0.0-1-8-0.0-0.0-res-0.2-0.0-ff-0.4-0.0
* text vocab size = 30522
* program vocab size = 99

pretrained_transformer = bert-large-uncased
fix_pretrained_transformer_parameters = False

bridge module created
loading preprocessed data: data/spider/spider.bridge.question-split.ppl-0.85.2.dn.eo.bert.pkl
100 dev examples loaded
=> loading checkpoint '/home/shelunts/thesis/TabularSemantingParsing/model/spider.bridge.lstm.meta.ts.ppl-0.85.2.dn.eo.feat.bert-large-uncased.xavier-1024-400-400-8-2-0.0005-inv-sqr-0.0005-4000-6e-05-inv-sqr-3e-05-4000-0.3-0.3-0.0-0.0-1-8-0.0-0.0-res-0.2-0.0-ff-0.4-0.0.220119-195756.tg05/model-best.16.tar'
0 pre-computed prediction order reconstruction cached
Parsing error: from TV_Channel join TV_series on TV_Channel.id = TV_series.Channel limit TV_series on TV_Channel.id = TV_series.Channel where TV_Channel.series_name = "Sky Radio" select TV_Channel.Package_Option
Example 14
tvshow
 +-- TV_Channel (tv channel)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- series_name (series name)
 |   +-- Country (country)
 |   +-- Language (language)
 |   +-- Content (content)
 |   +-- Pixel_aspect_ratio_PAR (pixel aspect ratio par)
 |   +-- Hight_definition_TV (hight definition tv)
 |   +-- Pay_per_view_PPV (pay per view ppv)
 |   +-- Package_Option (package option)
 +-- TV_series (tv series)
 |   +-- id (id) [PRIMARY]
 |   +-- Episode (episode)
 |   +-- Air_Date (air date)
 |   +-- Rating (rating)
 |   +-- Share (share)
 |   +-- 18_49_Rating_Share (18 49 rating share)
 |   +-- Viewers_m (viewers m)
 |   +-- Weekly_Rank (weekly rank)
 |   +-- Channel (channel) [FOREIGN]
 +-- Cartoon (cartoon)
     +-- id (id) [PRIMARY]
     +-- Title (title)
     +-- Directed_by (directed by)
     +-- Written_by (written by)
     +-- Original_air_date (original air date)
     +-- Production_code (production code)
     +-- Channel (channel) [FOREIGN]
NL: b'What are the Package Options of the TV Channels whose series names are Sky Radio?'
NL tokens: [b'what', b'are', b'the', b'package', b'options', b'of', b'the', b'tv', b'channels', b'whose', b'series', b'names', b'are', b'sky', b'radio', b'?']
NL tokens (original): [b'What', b'are', b'the', b'Package', b'Options', b'of', b'the', b'TV', b'Channels', b'whose', b'series', b'names', b'are', b'Sky', b'Radio', b'?']
['[CLS]', 'what', 'are', 'the', 'package', 'options', 'of', 'the', 'tv', 'channels', 'whose', 'series', 'names', 'are', 'sky', 'radio', '?', '[SEP]', '*', '[unused50]', 'tv', 'channel', '[unused51]', 'id', '[unused51]', 'series', 'name', '[unused49]', 'sky', 'radio', '[unused51]', 'country', '[unused51]', 'language', '[unused51]', 'content', '[unused51]', 'pixel', 'aspect', 'ratio', 'par', '[unused51]', 'high', '##t', 'definition', 'tv', '[unused51]', 'pay', 'per', 'view', 'pp', '##v', '[unused51]', 'package', 'option', '[unused49]', 'option', '[unused50]', 'tv', 'series', '[unused51]', 'id', '[unused51]', 'episode', '[unused51]', 'air', 'date', '[unused51]', 'rating', '[unused51]', 'share', '[unused51]', '18', '49', 'rating', 'share', '[unused51]', 'viewers', 'm', '[unused51]', 'weekly', 'rank', '[unused51]', 'channel', '[unused50]', 'cartoon', '[unused51]', 'id', '[unused51]', 'title', '[unused51]', 'directed', 'by', '[unused51]', 'written', 'by', '[unused51]', 'original', 'air', 'date', '[unused51]', 'production', 'code', '[unused51]', 'channel', '[SEP]']
Target 0: b'SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio"'
Target TF-P tokens: from TV_Channel where TV_Channel.series_name = "Sky Radio" select TV_Channel.Package_Option

[WRONG] [easy] Pred 0:	b'SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = "Sky Radio"' (-0.000) (length=18)
[WRONG] [easy] Pred 1:	b'SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = "Sky Radio" INTERSECT SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = "Sky Radio"' (-2.231) (length=36)
[WRONG] [easy] Pred 2:	b'SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = "Sky Radio"' (-2.459) (length=24)
[WRONG] [easy] Pred 3:	b'SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = "Sky Radio" AND TV_series.Channel = "Sky Radio"' (-2.828) (length=25)
[WRONG] [easy] Pred 4:	b'SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = "Sky Radio" AND TV_series.Channel = "TV"' (-3.151) (length=24)
[WRONG] [easy] Pred 5:	b'SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = "Sky Radio" OR TV_Channel.series_name = "Sky Radio"' (-3.195) (length=25)
[WRONG] [easy] Pred 6:	b'SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"' (-3.756) (length=18)
[CORRE] [easy] Pred 7:	b'SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.series_name = "Sky Radio"' (-3.911) (length=12)
Error Case 1

Example 24
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Give the mean GNP and total population of nations which are considered US territory.'
NL tokens: [b'give', b'the', b'mean', b'g', b'##np', b'and', b'total', b'population', b'of', b'nations', b'which', b'are', b'considered', b'us', b'territory', b'.']
NL tokens (original): [b'Give', b'the', b'mean', b'G', b'##NP', b'and', b'total', b'population', b'of', b'nations', b'which', b'are', b'considered', b'US', b'territory', b'.']
['[CLS]', 'give', 'the', 'mean', 'g', '##np', 'and', 'total', 'population', 'of', 'nations', 'which', 'are', 'considered', 'us', 'territory', '.', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused49]', 'us', 'territory', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused49]', 'us', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"'
Target TF-P tokens: from country where country.GovernmentForm = "US territory" select avg (country.GNP) , sum (country.Population)

[WRONG] [medium] Pred 0:	b'SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.GovernmentForm = "US territory"' (-0.046) (length=20)
[WRONG] [medium] Pred 1:	b'SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.Continent = "US territory"' (-0.389) (length=20)
[WRONG] [medium] Pred 2:	b'SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.GovernmentForm = "US US"' (-1.150) (length=20)
[WRONG] [medium] Pred 3:	b'SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.GovernmentForm = "US US VALUE"' (-1.342) (length=21)
[WRONG] [medium] Pred 4:	b'SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.GovernmentForm = "US VALUE"' (-1.422) (length=20)
[WRONG] [medium] Pred 5:	b'SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.Continent = "US US VALUE"' (-1.569) (length=21)
[WRONG] [medium] Pred 6:	b'SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.Continent = "US US"' (-1.594) (length=20)
[WRONG] [medium] Pred 7:	b'SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.Continent = "US VALUE"' (-2.167) (length=20)
[WRONG] [medium] Pred 8:	b'SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.GovernmentForm = "US"' (-2.423) (length=19)
[CORRE] [medium] Pred 9:	b'SELECT AVG(country.GNP), SUM(country.Population) FROM country WHERE country.GovernmentForm = "US territory"' (-2.491) (length=20)
Error Case 2

ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Code2']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Continent']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Code2']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Continent']}}]
Example 25
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'How many official languages are spoken in Afghanistan?'
NL tokens: [b'how', b'many', b'official', b'languages', b'are', b'spoken', b'in', b'afghanistan', b'?']
NL tokens (original): [b'How', b'many', b'official', b'languages', b'are', b'spoken', b'in', b'Afghanistan', b'?']
['[CLS]', 'how', 'many', 'official', 'languages', 'are', 'spoken', 'in', 'afghanistan', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused49]', 'afghanistan', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"'
Target TF-P tokens: from country join countrylanguage on country.Code = countrylanguage.CountryCode where country.Name = "Afghanistan" and countrylanguage.IsOfficial = "t" select count (*)

[WRONG] [medium] Pred 0:	b'SELECT COUNT(*) FROM country WHERE country.Name = "Afghanistan"' (-1.513) (length=14)
[WRONG] [medium] Pred 1:	b'SELECT COUNT(DISTINCT countrylanguage.IsOfficial) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = "Afghanistan"' (-3.337) (length=21)
[WRONG] [medium] Pred 2:	b'SELECT COUNT(countrylanguage.IsOfficial) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = "Afghanistan"' (-3.369) (length=20)
[WRONG] [medium] Pred 3:	b'SELECT COUNT(DISTINCT countrylanguage.IsOfficial) FROM countrylanguage JOIN country ON countrylanguage.Language = country.Code WHERE country.Name = "Afghanistan"' (-3.369) (length=21)
[WRONG] [medium] Pred 4:	b'SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = "Afghanistan"' (-3.553) (length=21)
[WRONG] [medium] Pred 5:	b'SELECT COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = "Afghanistan"' (-3.577) (length=20)
[WRONG] [medium] Pred 6:	b'SELECT COUNT(countrylanguage.IsOfficial) FROM countrylanguage JOIN country ON countrylanguage.Language = country.Code WHERE country.Name = "Afghanistan"' (-3.585) (length=20)
[WRONG] [medium] Pred 7:	b'SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage JOIN country ON countrylanguage.Language = country.Code WHERE country.Name = "Afghanistan"' (-3.629) (length=21)
[WRONG] [medium] Pred 8:	b'SELECT COUNT(*) FROM countrylanguage JOIN country ON countrylanguage.Language = country.Code WHERE country.Name = "Afghanistan"' (-3.632) (length=20)
[WRONG] [medium] Pred 9:	b'SELECT COUNT(*) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = "Afghanistan"' (-3.931) (length=20)
Error Case 3

Example 26
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'Which makers designed more than 3 car models? List full name and the id.'
NL tokens: [b'which', b'makers', b'designed', b'more', b'than', b'3', b'car', b'models', b'?', b'list', b'full', b'name', b'and', b'the', b'id', b'.']
NL tokens (original): [b'Which', b'makers', b'designed', b'more', b'than', b'3', b'car', b'models', b'?', b'List', b'full', b'name', b'and', b'the', b'id', b'.']
['[CLS]', 'which', 'makers', 'designed', 'more', 'than', '3', 'car', 'models', '?', 'list', 'full', 'name', 'and', 'the', 'id', '.', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3'
Target TF-P tokens: from car_makers join model_list on car_makers.Id = model_list.Maker group by car_makers.Id having count (*) > 3 select car_makers.FullName , car_makers.Id

[WRONG] [medium] Pred 0:	b'SELECT car_makers.Maker, car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-0.001) (length=24)
[WRONG] [medium] Pred 1:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-1.133) (length=22)
[WRONG] [medium] Pred 2:	b'SELECT car_makers.Maker, car_makers.FullName, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-1.345) (length=24)
[WRONG] [medium] Pred 3:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3 INTERSECT SELECT car_makers.Maker, car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-1.525) (length=46)
[WRONG] [medium] Pred 4:	b'SELECT car_makers.Maker, car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker HAVING COUNT(*) > 3' (-1.622) (length=24)
[WRONG] [medium] Pred 5:	b'SELECT car_makers.Maker, car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON model_list.Maker = car_makers.Id GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-1.769) (length=24)
[WRONG] [medium] Pred 6:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3 INTERSECT SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-1.914) (length=44)
[WRONG] [medium] Pred 7:	b'SELECT car_makers.Maker, car_makers.FullName, car_makers.Id FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-2.136) (length=24)
[WRONG] [medium] Pred 8:	b'SELECT car_makers.Maker, car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-2.374) (length=30)
[WRONG] [medium] Pred 9:	b'SELECT car_makers.Maker, car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY model_list.Maker HAVING COUNT(*) > 3' (-2.520) (length=24)
[WRONG] [medium] Pred 10:	b'SELECT car_makers.Maker, car_makers.FullName, car_makers.Id, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-2.521) (length=26)
[WRONG] [medium] Pred 11:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3 INTERSECT SELECT car_makers.Maker, car_makers.FullName, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-2.525) (length=46)
[WRONG] [medium] Pred 12:	b'SELECT car_makers.Maker, car_makers.FullName, car_makers.Id FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id GROUP BY model_list.Maker HAVING COUNT(*) > 3' (-2.574) (length=24)
[WRONG] [medium] Pred 13:	b'SELECT car_makers.Maker, car_makers.FullName, model_list.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-2.577) (length=24)
[WRONG] [medium] Pred 14:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker HAVING COUNT(*) > 3' (-2.593) (length=22)
[WRONG] [medium] Pred 15:	b'SELECT car_makers.Maker, car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) < 3' (-2.976) (length=24)
Error Case 4

Example 27
tvshow
 +-- TV_Channel (tv channel)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- series_name (series name)
 |   +-- Country (country)
 |   +-- Language (language)
 |   +-- Content (content)
 |   +-- Pixel_aspect_ratio_PAR (pixel aspect ratio par)
 |   +-- Hight_definition_TV (hight definition tv)
 |   +-- Pay_per_view_PPV (pay per view ppv)
 |   +-- Package_Option (package option)
 +-- TV_series (tv series)
 |   +-- id (id) [PRIMARY]
 |   +-- Episode (episode)
 |   +-- Air_Date (air date)
 |   +-- Rating (rating)
 |   +-- Share (share)
 |   +-- 18_49_Rating_Share (18 49 rating share)
 |   +-- Viewers_m (viewers m)
 |   +-- Weekly_Rank (weekly rank)
 |   +-- Channel (channel) [FOREIGN]
 +-- Cartoon (cartoon)
     +-- id (id) [PRIMARY]
     +-- Title (title)
     +-- Directed_by (directed by)
     +-- Written_by (written by)
     +-- Original_air_date (original air date)
     +-- Production_code (production code)
     +-- Channel (channel) [FOREIGN]
NL: b'What is the TV Channel of TV series with Episode "A Love of a Lifetime"? List the TV Channel\'s series name.'
NL tokens: [b'what', b'is', b'the', b'tv', b'channel', b'of', b'tv', b'series', b'with', b'episode', b'"', b'a', b'love', b'of', b'a', b'lifetime', b'"', b'?', b'list', b'the', b'tv', b'channel', b"'", b's', b'series', b'name', b'.']
NL tokens (original): [b'What', b'is', b'the', b'TV', b'Channel', b'of', b'TV', b'series', b'with', b'Episode', b'"', b'A', b'Love', b'of', b'a', b'Lifetime', b'"', b'?', b'List', b'the', b'TV', b'Channel', b"'", b's', b'series', b'name', b'.']
['[CLS]', 'what', 'is', 'the', 'tv', 'channel', 'of', 'tv', 'series', 'with', 'episode', '"', 'a', 'love', 'of', 'a', 'lifetime', '"', '?', 'list', 'the', 'tv', 'channel', "'", 's', 'series', 'name', '.', '[SEP]', '*', '[unused50]', 'tv', 'channel', '[unused51]', 'id', '[unused51]', 'series', 'name', '[unused51]', 'country', '[unused51]', 'language', '[unused51]', 'content', '[unused51]', 'pixel', 'aspect', 'ratio', 'par', '[unused51]', 'high', '##t', 'definition', 'tv', '[unused51]', 'pay', 'per', 'view', 'pp', '##v', '[unused51]', 'package', 'option', '[unused50]', 'tv', 'series', '[unused51]', 'id', '[unused51]', 'episode', '[unused49]', 'a', 'love', 'of', 'a', 'lifetime', '[unused51]', 'air', 'date', '[unused51]', 'rating', '[unused51]', 'share', '[unused51]', '18', '49', 'rating', 'share', '[unused51]', 'viewers', 'm', '[unused51]', 'weekly', 'rank', '[unused51]', 'channel', '[unused50]', 'cartoon', '[unused51]', 'id', '[unused51]', 'title', '[unused51]', 'directed', 'by', '[unused51]', 'written', 'by', '[unused51]', 'original', 'air', 'date', '[unused51]', 'production', 'code', '[unused51]', 'channel', '[SEP]']
Target 0: b'SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime"'
Target TF-P tokens: from TV_Channel join TV_series on TV_Channel.id = TV_series.Channel where TV_series.Episode = "A Love of A Lifetime" select TV_Channel.series_name

[WRONG] [medium] Pred 0:	b'SELECT TV_series.Channel FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = "A Love of A Lifetime"' (-0.113) (length=21)
[WRONG] [medium] Pred 1:	b'SELECT TV_series.Channel FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = "A Love of A Lifetime"' (-0.201) (length=21)
[WRONG] [medium] Pred 2:	b'SELECT TV_series.Channel FROM TV_series WHERE TV_series.Episode = "A Love of A Lifetime"' (-1.172) (length=15)
[WRONG] [medium] Pred 3:	b'SELECT TV_series.Channel, TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = "A Love of A Lifetime"' (-1.794) (length=23)
[WRONG] [medium] Pred 4:	b'SELECT TV_series.Channel FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = "A Love of A Lifetime" INTERSECT SELECT TV_series.Channel FROM TV_series WHERE TV_series.Episode = "A Love of A Lifetime"' (-1.811) (length=36)
[WRONG] [medium] Pred 5:	b'SELECT TV_series.Channel, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = "A Love of A Lifetime"' (-1.843) (length=23)
[CORRE] [medium] Pred 6:	b'SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = "A Love of A Lifetime"' (-2.293) (length=21)
Error Case 5

ERROR: table "Likes" in field expression Likes.liked_id is not in the current scope
Example 28
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'What are the names of high schoolers who have likes, and how many likes does each have?'
NL tokens: [b'what', b'are', b'the', b'names', b'of', b'high', b'school', b'##ers', b'who', b'have', b'likes', b',', b'and', b'how', b'many', b'likes', b'does', b'each', b'have', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'of', b'high', b'school', b'##ers', b'who', b'have', b'likes', b',', b'and', b'how', b'many', b'likes', b'does', b'each', b'have', b'?']
['[CLS]', 'what', 'are', 'the', 'names', 'of', 'high', 'school', '##ers', 'who', 'have', 'likes', ',', 'and', 'how', 'many', 'likes', 'does', 'each', 'have', '?', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id'
Target TF-P tokens: from Likes join Highschooler on Likes.student_id = Highschooler.ID group by Likes.student_id select Highschooler.name , count (*)

[WRONG] [medium] Pred 0:	b'SELECT Highschooler.name, SUM(Likes.liked_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name' (-0.109) (length=18)
[WRONG] [medium] Pred 1:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name' (-0.256) (length=18)
[WRONG] [medium] Pred 2:	b'SELECT Highschooler.name, SUM(Likes.liked_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Highschooler.name' (-1.302) (length=18)
[WRONG] [medium] Pred 3:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Highschooler.name' (-1.432) (length=18)
[WRONG] [medium] Pred 4:	b'SELECT Highschooler.name, Likes.liked_id FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id' (-2.088) (length=13)
[WRONG] [medium] Pred 5:	b'SELECT Highschooler.name, 4, SUM(Likes.liked_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name' (-2.206) (length=20)
[WRONG] [medium] Pred 6:	b'SELECT Highschooler.name, AVG(Likes.liked_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name' (-2.501) (length=18)
[WRONG] [medium] Pred 7:	b'SELECT Highschooler.name, MAX(Likes.liked_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name' (-2.511) (length=18)
[WRONG] [medium] Pred 8:	b'SELECT Highschooler.name, 4, COUNT(*) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name' (-2.547) (length=20)
[WRONG] [medium] Pred 9:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Likes.liked_id' (-2.715) (length=18)
[WRONG] [medium] Pred 10:	b'SELECT Highschooler.name, SUM(Likes.liked_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Likes.liked_id' (-2.755) (length=18)
[WRONG] [medium] Pred 11:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Likes.liked_id' (-2.784) (length=18)
[WRONG] [medium] Pred 12:	b'SELECT Highschooler.name, SUM(Likes.liked_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Likes.liked_id' (-2.851) (length=18)
[WRONG] [medium] Pred 13:	b'SELECT Highschooler.name, SUM(Likes.liked_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID' (-2.927) (length=18)
[WRONG] [medium] Pred 14:	b'SELECT DISTINCT Highschooler.name, Likes.liked_id FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id' (-3.143) (length=14)
Error Case 6

ERROR: Join condition does not match with table: ['players', {'join': 'matches', 'on': {'eq': ['matches.winner_id', 'matches.loser_id']}}]
ERROR: Join condition does not match with table: ['players', {'join': 'matches', 'on': {'eq': ['matches.winner_id', 'matches.loser_id']}}]
ERROR: Join condition does not match with table: ['players', {'join': 'matches', 'on': {'eq': ['matches.winner_id', 'matches.loser_id']}}]
 31%|███       | 4/13 [00:18<00:44,  4.97s/it]ERROR: Join condition does not match with table: ['players', {'join': 'matches', 'on': {'eq': ['matches.winner_id', 'matches.loser_ht']}}]
ERROR: Join condition does not match with table: ['players', {'join': 'matches', 'on': {'eq': ['matches.winner_id', 'matches.winner_id']}}]
Example 31
wta_1
 +-- players (players)
 |   +-- player_id (player id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- hand (hand)
 |   +-- birth_date (birth date)
 |   +-- country_code (country code)
 +-- matches (matches)
 |   +-- best_of (best of)
 |   +-- draw_size (draw size)
 |   +-- loser_age (loser age)
 |   +-- loser_entry (loser entry)
 |   +-- loser_hand (loser hand)
 |   +-- loser_ht (loser ht)
 |   +-- loser_id (loser id) [FOREIGN]
 |   +-- loser_ioc (loser ioc)
 |   +-- loser_name (loser name)
 |   +-- loser_rank (loser rank)
 |   +-- loser_rank_points (loser rank points)
 |   +-- loser_seed (loser seed)
 |   +-- match_num (match num)
 |   +-- minutes (minutes)
 |   +-- round (round)
 |   +-- score (score)
 |   +-- surface (surface)
 |   +-- tourney_date (tourney date)
 |   +-- tourney_id (tourney id)
 |   +-- tourney_level (tourney level)
 |   +-- tourney_name (tourney name)
 |   +-- winner_age (winner age)
 |   +-- winner_entry (winner entry)
 |   +-- winner_hand (winner hand)
 |   +-- winner_ht (winner ht)
 |   +-- winner_id (winner id) [FOREIGN]
 |   +-- winner_ioc (winner ioc)
 |   +-- winner_name (winner name)
 |   +-- winner_rank (winner rank)
 |   +-- winner_rank_points (winner rank points)
 |   +-- winner_seed (winner seed)
 |   +-- year (year)
 +-- rankings (rankings)
     +-- ranking_date (ranking date)
     +-- ranking (ranking)
     +-- player_id (player id) [FOREIGN]
     +-- ranking_points (ranking points)
     +-- tours (tours)
NL: b'What are the names of the winner and loser who played in the longest match?'
NL tokens: [b'what', b'are', b'the', b'names', b'of', b'the', b'winner', b'and', b'loser', b'who', b'played', b'in', b'the', b'longest', b'match', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'of', b'the', b'winner', b'and', b'loser', b'who', b'played', b'in', b'the', b'longest', b'match', b'?']
['[CLS]', 'what', 'are', 'the', 'names', 'of', 'the', 'winner', 'and', 'loser', 'who', 'played', 'in', 'the', 'longest', 'match', '?', '[SEP]', '*', '[unused50]', 'players', '[unused51]', 'player', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'hand', '[unused51]', 'birth', 'date', '[unused51]', 'country', 'code', '[unused50]', 'matches', '[unused51]', 'best', 'of', '[unused51]', 'draw', 'size', '[unused51]', 'loser', 'age', '[unused51]', 'loser', 'entry', '[unused51]', 'loser', 'hand', '[unused51]', 'loser', 'h', '##t', '[unused51]', 'loser', 'id', '[unused51]', 'loser', 'ioc', '[unused51]', 'loser', 'name', '[unused51]', 'loser', 'rank', '[unused51]', 'loser', 'rank', 'points', '[unused51]', 'loser', 'seed', '[unused51]', 'match', 'nu', '##m', '[unused51]', 'minutes', '[unused51]', 'round', '[unused51]', 'score', '[unused51]', 'surface', '[unused51]', 'tour', '##ney', 'date', '[unused51]', 'tour', '##ney', 'id', '[unused51]', 'tour', '##ney', 'level', '[unused51]', 'tour', '##ney', 'name', '[unused51]', 'winner', 'age', '[unused51]', 'winner', 'entry', '[unused51]', 'winner', 'hand', '[unused51]', 'winner', 'h', '##t', '[unused51]', 'winner', 'id', '[unused51]', 'winner', 'ioc', '[unused51]', 'winner', 'name', '[unused51]', 'winner', 'rank', '[unused51]', 'winner', 'rank', 'points', '[unused51]', 'winner', 'seed', '[unused51]', 'year', '[unused50]', 'rankings', '[unused51]', 'ranking', 'date', '[unused51]', 'ranking', '[unused51]', 'player', 'id', '[unused51]', 'ranking', 'points', '[unused51]', 'tours', '[SEP]']
Target 0: b'SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1'
Target TF-P tokens: from matches select matches.winner_name , matches.loser_name order by matches.minutes desc limit 1

[WRONG] [medium] Pred 0:	b'SELECT matches.winner_name, matches.loser_name FROM players JOIN matches ON matches.winner_id = players.player_id ORDER BY matches.year DESC LIMIT 1' (-0.850) (length=18)
[WRONG] [medium] Pred 1:	b'SELECT matches.winner_name, matches.loser_name FROM players JOIN matches ON players.player_id = matches.loser_id ORDER BY matches.year DESC LIMIT 1' (-0.942) (length=18)
[WRONG] [medium] Pred 2:	b'SELECT matches.winner_name, matches.loser_name FROM matches ORDER BY matches.year DESC LIMIT 1' (-1.558) (length=12)
[WRONG] [medium] Pred 3:	b'SELECT matches.winner_name, matches.loser_name FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY matches.year DESC LIMIT 1' (-1.639) (length=18)
[WRONG] [medium] Pred 4:	b'SELECT matches.winner_name, matches.loser_name FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY matches.year DESC LIMIT 1' (-1.741) (length=18)
[WRONG] [medium] Pred 5:	b'SELECT matches.winner_name, matches.loser_ioc FROM players JOIN matches ON players.player_id = matches.loser_id ORDER BY matches.year DESC LIMIT 1' (-1.965) (length=18)
[WRONG] [medium] Pred 6:	b'SELECT matches.winner_name, matches.loser_ioc FROM players JOIN matches ON matches.winner_id = players.player_id ORDER BY matches.year DESC LIMIT 1' (-2.215) (length=18)
[WRONG] [medium] Pred 7:	b'SELECT matches.winner_name, matches.loser_ht FROM players JOIN matches ON players.player_id = matches.loser_id ORDER BY matches.year DESC LIMIT 1' (-2.812) (length=18)
[WRONG] [medium] Pred 8:	b'SELECT matches.winner_name, matches.loser_ioc FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY matches.year DESC LIMIT 1' (-2.890) (length=18)
[WRONG] [medium] Pred 9:	b'SELECT matches.winner_name, matches.loser_ioc FROM matches ORDER BY matches.year DESC LIMIT 1' (-3.117) (length=12)
[WRONG] [medium] Pred 10:	b'SELECT matches.winner_name, matches.loser_ht FROM matches ORDER BY matches.year DESC LIMIT 1' (-3.747) (length=12)
Error Case 7

ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
argument of type 'int' is not iterable
ERROR: Join condition does not match with table: ['Highschooler', {'join': 'Friend', 'on': {'eq': ['Highschooler.ID', 'Highschooler.ID']}}]
ERROR: invalid JOIN field "Highschooler": ['Highschooler', {'join': 'Friend', 'on': {'eq': ['Highschooler.ID', 'Highschooler']}}]
Parsing error: from Highschooler join Friend on Highschooler.ID = Friend.student_id group by Highschooler.ID order by count (*) >= 3 select Highschooler.name
Example 36
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'What are the names of high schoolers who have 3 or more friends?'
NL tokens: [b'what', b'are', b'the', b'names', b'of', b'high', b'school', b'##ers', b'who', b'have', b'3', b'or', b'more', b'friends', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'of', b'high', b'school', b'##ers', b'who', b'have', b'3', b'or', b'more', b'friends', b'?']
['[CLS]', 'what', 'are', 'the', 'names', 'of', 'high', 'school', '##ers', 'who', 'have', '3', 'or', 'more', 'friends', '?', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3'
Target TF-P tokens: from Friend join Highschooler on Friend.student_id = Highschooler.ID group by Friend.student_id having count (*) >= 3 select Highschooler.name

 38%|███▊      | 5/13 [00:21<00:36,  4.61s/it][WRONG] [medium] Pred 0:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING COUNT(*) >= 3' (-0.159) (length=20)
[WRONG] [medium] Pred 1:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id GROUP BY Highschooler.ID HAVING COUNT(*) >= 3' (-0.357) (length=20)
[WRONG] [medium] Pred 2:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY "Highschooler" HAVING COUNT(*) >= 3' (-1.979) (length=20)
[WRONG] [medium] Pred 3:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Friend.friend_id HAVING COUNT(*) >= 3' (-2.367) (length=20)
[WRONG] [medium] Pred 4:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Friend.friend_id HAVING COUNT(*) >= 3' (-2.500) (length=22)
[WRONG] [medium] Pred 5:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id GROUP BY "Highschooler" HAVING COUNT(*) >= 3' (-2.631) (length=20)
[WRONG] [medium] Pred 6:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id GROUP BY Friend.friend_id HAVING COUNT(*) >= 3' (-2.697) (length=20)
[WRONG] [medium] Pred 7:	b'SELECT DISTINCT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING COUNT(*) >= 3' (-2.977) (length=21)
[WRONG] [medium] Pred 8:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id GROUP BY Highschooler.ID, Friend.friend_id HAVING COUNT(*) >= 3' (-3.032) (length=22)
[WRONG] [medium] Pred 9:	b'SELECT DISTINCT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id GROUP BY Highschooler.ID HAVING COUNT(*) >= 3' (-3.142) (length=21)
[CORRE] [medium] Pred 10:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Friend.student_id HAVING COUNT(*) >= 3' (-3.159) (length=20)
Error Case 8

Parsing error: from Highschooler join Friend on Highschooler.ID = Friend.student_id group by Highschooler.name group by Highschooler.name select Highschooler.name , count (*)
Parsing error: from Highschooler join Friend on Highschooler.ID = Friend.student_id group by Highschooler.name having count (*) , Highschooler.name
Parsing error: from Highschooler , Friend on Highschooler.ID = Friend.student_id group by Highschooler.name select Highschooler.name , count (*)
Parsing error: from Highschooler join Friend on Highschooler.ID = Friend.student_id group by Highschooler.name select Highschooler.name , count (*) , group by Highschooler.name
Parsing error: from Highschooler join Friend on Highschooler.ID = Friend.student_id group by Highschooler.name select Highschooler.name , count (*) ,
Example 41
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'Show the names of high school students and their corresponding number of friends.'
NL tokens: [b'show', b'the', b'names', b'of', b'high', b'school', b'students', b'and', b'their', b'corresponding', b'number', b'of', b'friends', b'.']
NL tokens (original): [b'Show', b'the', b'names', b'of', b'high', b'school', b'students', b'and', b'their', b'corresponding', b'number', b'of', b'friends', b'.']
['[CLS]', 'show', 'the', 'names', 'of', 'high', 'school', 'students', 'and', 'their', 'corresponding', 'number', 'of', 'friends', '.', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id'
Target TF-P tokens: from Friend join Highschooler on Friend.student_id = Highschooler.ID group by Friend.student_id select Highschooler.name , count (*)

[WRONG] [medium] Pred 0:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name' (-0.000) (length=18)
[WRONG] [medium] Pred 1:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID' (-1.858) (length=18)
[WRONG] [medium] Pred 2:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name' (-2.385) (length=23)
[WRONG] [medium] Pred 3:	b'SELECT Highschooler.name, COUNT(*), Friend.friend_id FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name' (-2.526) (length=20)
[WRONG] [medium] Pred 4:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id JOIN Highschooler ON Friend.friend_id = Highschooler.ID GROUP BY Highschooler.name' (-2.692) (length=24)
[WRONG] [medium] Pred 5:	b'SELECT Highschooler.name, COUNT(*), 1 FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name' (-3.013) (length=20)
[WRONG] [medium] Pred 6:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name, Friend.friend_id' (-3.041) (length=20)
[WRONG] [medium] Pred 7:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY "Highschooler"' (-3.861) (length=18)
[WRONG] [medium] Pred 8:	b'SELECT Highschooler.name, COUNT(Friend.friend_id) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name' (-4.036) (length=18)
[WRONG] [medium] Pred 9:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name AND Friend.friend_id' (-4.088) (length=20)
[WRONG] [medium] Pred 10:	b'SELECT COUNT(*), Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID' (-4.293) (length=18)
Error Case 9

ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Continent']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'city', 'on': {'eq': ['country.Code', 'country.Continent']}}]
Parsing error: from country select country.Name , country.Region order by country.Region desc limit with
Parsing error: from country select country.Name , country.Region select country.Region order by country.Region desc limit 5
ERROR: "country.Continent" appeared in FROM clause and is not a table
Parsing error: from country , country.Region order by country.Region desc limit 5
Parsing error: from country select country.Name , country.Region order by country.Region desc limit ?
Example 43
 46%|████▌     | 6/13 [00:25<00:30,  4.33s/it]world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What are the names and areas of countries with the top 5 largest area?'
NL tokens: [b'what', b'are', b'the', b'names', b'and', b'areas', b'of', b'countries', b'with', b'the', b'top', b'5', b'largest', b'area', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'and', b'areas', b'of', b'countries', b'with', b'the', b'top', b'5', b'largest', b'area', b'?']
['[CLS]', 'what', 'are', 'the', 'names', 'and', 'areas', 'of', 'countries', 'with', 'the', 'top', '5', 'largest', 'area', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5'
Target TF-P tokens: from country select country.Name , country.SurfaceArea order by country.SurfaceArea desc limit 5

[WRONG] [medium] Pred 0:	b'SELECT country.Name, country.Region FROM country ORDER BY country.Region DESC LIMIT 5' (-0.000) (length=12)
[WRONG] [medium] Pred 1:	b'SELECT country.Name, country.Region FROM country ORDER BY country.Region DESC LIMIT 5' (-4.115) (length=14)
[WRONG] [medium] Pred 2:	b'SELECT country.Name, country.Region FROM country ORDER BY country.Region DESC LIMIT "top"' (-4.208) (length=12)
[WRONG] [medium] Pred 3:	b'SELECT country.Name, country.Region FROM country ORDER BY country.Region DESC LIMIT "largest"' (-4.505) (length=12)
[WRONG] [medium] Pred 4:	b'SELECT country.Name, country.Region FROM country ORDER BY country.Region DESC LIMIT "area"' (-4.517) (length=12)
[WRONG] [medium] Pred 5:	b'SELECT country.Name, country.Region FROM country ORDER BY country.Region DESC LIMIT "the"' (-4.908) (length=12)
[WRONG] [medium] Pred 6:	b'SELECT country.Name, country.Region FROM country ORDER BY country.Continent DESC LIMIT 5' (-5.105) (length=12)
[WRONG] [medium] Pred 7:	b'SELECT country.Name, country.Region FROM country ORDER BY country.Region ASC LIMIT 5' (-5.794) (length=12)
[WRONG] [medium] Pred 8:	b'SELECT country.Name, country.Region FROM country ORDER BY country.SurfaceArea DESC LIMIT 5' (-5.875) (length=12)
Error Case 10

ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}]
ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}]
ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}]
ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}]
ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}]
ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}]
Example 48
flight_2
 +-- airlines (airlines)
 |   +-- uid (airline id) [PRIMARY]
 |   +-- Airline (airline name) [FOREIGN]
 |   +-- Abbreviation (abbreviation)
 |   +-- Country (country)
 +-- airports (airports)
 |   +-- AirportCode (airport code) [PRIMARY] [FOREIGN]
 |   +-- City (city)
 |   +-- AirportName (airport name)
 |   +-- Country (country)
 |   +-- CountryAbbrev (country abbrev)
 +-- flights (flights)
     +-- Airline (airline) [PRIMARY] [FOREIGN]
     +-- FlightNo (flight number)
     +-- SourceAirport (source airport) [FOREIGN]
     +-- DestAirport (destination airport) [FOREIGN]
NL: b'Return the number of United Airlines flights leaving from AHD Airport.'
NL tokens: [b'return', b'the', b'number', b'of', b'united', b'airlines', b'flights', b'leaving', b'from', b'ah', b'##d', b'airport', b'.']
NL tokens (original): [b'Return', b'the', b'number', b'of', b'United', b'Airlines', b'flights', b'leaving', b'from', b'AH', b'##D', b'Airport', b'.']
['[CLS]', 'return', 'the', 'number', 'of', 'united', 'airlines', 'flights', 'leaving', 'from', 'ah', '##d', 'airport', '.', '[SEP]', '*', '[unused50]', 'airlines', '[unused51]', 'airline', 'id', '[unused51]', 'airline', 'name', '[unused49]', 'united', 'airlines', '[unused51]', 'abbreviation', '[unused51]', 'country', '[unused50]', 'airports', '[unused51]', 'city', '[unused51]', 'airport', 'code', '[unused49]', 'ah', '##d', '[unused51]', 'airport', 'name', '[unused51]', 'country', '[unused51]', 'country', 'ab', '##bre', '##v', '[unused50]', 'flights', '[unused51]', 'airline', '[unused51]', 'flight', 'number', '[unused51]', 'source', 'airport', '[unused49]', 'ah', '##d', '[unused51]', 'destination', 'airport', '[unused49]', 'ah', '##d', '[SEP]']
Target 0: b'SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"'
Target TF-P tokens: from airlines join flights on flights.Airline = airlines.uid where airlines.Airline = "United Airlines" and flights.SourceAirport = "AHD" select count (*)

[WRONG] [medium] Pred 0:	b'SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = "AHD" AND flights.DestAirport = "United Airlines"' (-0.187) (length=28)
[WRONG] [medium] Pred 1:	b'SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = "AHD" AND flights.DestAirport = "UnitedD"' (-1.459) (length=28)
[WRONG] [medium] Pred 2:	b'SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = "AHD" AND flights.SourceAirport = "United Airlines"' (-1.714) (length=28)
[WRONG] [medium] Pred 3:	b'SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = "AHD" AND flights.FlightNo = "VALUE" AND flights.DestAirport = "United Airlines"' (-1.764) (length=32)
[WRONG] [medium] Pred 4:	b'SELECT COUNT(*) FROM airlines JOIN flights ON airlines.Airline = flights.Airline WHERE flights.SourceAirport = "AHD" AND flights.DestAirport = "United Airlines"' (-1.803) (length=28)
[CORRE] [medium] Pred 5:	b'SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE airlines.Airline = "AHD" AND flights.DestAirport = "United Airlines"' (-1.888) (length=28)
Error Case 11

Example 50
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'Return the number of likes that the high schooler named Kyle has.'
NL tokens: [b'return', b'the', b'number', b'of', b'likes', b'that', b'the', b'high', b'school', b'##er', b'named', b'kyle', b'has', b'.']
NL tokens (original): [b'Return', b'the', b'number', b'of', b'likes', b'that', b'the', b'high', b'school', b'##er', b'named', b'Kyle', b'has', b'.']
['[CLS]', 'return', 'the', 'number', 'of', 'likes', 'that', 'the', 'high', 'school', '##er', 'named', 'kyle', 'has', '.', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused49]', 'kyle', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"'
Target TF-P tokens: from Likes join Highschooler on Likes.student_id = Highschooler.ID where Highschooler.name = "Kyle" select count (*)

[WRONG] [medium] Pred 0:	b'SELECT Likes.liked_id FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id WHERE Highschooler.name = "Kyle"' (-0.039) (length=17)
[CORRE] [medium] Pred 1:	b'SELECT COUNT(*) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id WHERE Highschooler.name = "Kyle"' (-0.452) (length=20)
Error Case 12

Example 52
cre_Doc_Template_Mgt
 +-- Ref_Template_Types (reference template types)
 |   +-- Template_Type_Code (template type code) [PRIMARY] [FOREIGN]
 |   +-- Template_Type_Description (template type description)
 +-- Templates (templates)
 |   +-- Template_ID (template id) [PRIMARY] [FOREIGN]
 |   +-- Version_Number (version number)
 |   +-- Template_Type_Code (template type code) [FOREIGN]
 |   +-- Date_Effective_From (date effective from)
 |   +-- Date_Effective_To (date effective to)
 |   +-- Template_Details (template details)
 +-- Documents (documents)
 |   +-- Document_ID (document id) [PRIMARY] [FOREIGN]
 |   +-- Template_ID (template id) [FOREIGN]
 |   +-- Document_Name (document name)
 |   +-- Document_Description (document description)
 |   +-- Other_Details (other details)
 +-- Paragraphs (paragraphs)
     +-- Paragraph_ID (paragraph id) [PRIMARY]
     +-- Document_ID (document id) [FOREIGN]
     +-- Paragraph_Text (paragraph text)
     +-- Other_Details (other details)
NL: b'Return the lowest version number, along with its corresponding template type code.'
NL tokens: [b'return', b'the', b'lowest', b'version', b'number', b',', b'along', b'with', b'its', b'corresponding', b'template', b'type', b'code', b'.']
NL tokens (original): [b'Return', b'the', b'lowest', b'version', b'number', b',', b'along', b'with', b'its', b'corresponding', b'template', b'type', b'code', b'.']
['[CLS]', 'return', 'the', 'lowest', 'version', 'number', ',', 'along', 'with', 'its', 'corresponding', 'template', 'type', 'code', '.', '[SEP]', '*', '[unused50]', 'reference', 'template', 'types', '[unused51]', 'template', 'type', 'code', '[unused51]', 'template', 'type', 'description', '[unused50]', 'template', '##s', '[unused51]', 'template', 'id', '[unused51]', 'version', 'number', '[unused51]', 'template', 'type', 'code', '[unused51]', 'date', 'effective', 'from', '[unused51]', 'date', 'effective', 'to', '[unused51]', 'template', 'details', '[unused50]', 'documents', '[unused51]', 'document', 'id', '[unused51]', 'template', 'id', '[unused51]', 'document', 'name', '[unused51]', 'document', 'description', '[unused51]', 'other', 'details', '[unused50]', 'paragraph', '##s', '[unused51]', 'paragraph', 'id', '[unused51]', 'document', 'id', '[unused51]', 'paragraph', 'text', '[unused51]', 'other', 'details', '[SEP]']
Target 0: b'SELECT min(Version_Number) ,  template_type_code FROM Templates'
Target TF-P tokens: from Templates select min (Templates.Version_Number) , Templates.Template_Type_Code

[WRONG] [medium] Pred 0:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Version_Number LIMIT 1' (-0.001) (length=11)
[WRONG] [medium] Pred 1:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Version_Number ASC LIMIT 1' (-2.304) (length=12)
[WRONG] [medium] Pred 2:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Date_Effective_To LIMIT 1' (-2.473) (length=11)
[WRONG] [medium] Pred 3:	b'SELECT Templates.Version_Number, Templates.Date_Effective_To FROM Templates ORDER BY Templates.Version_Number LIMIT 1' (-3.264) (length=11)
[WRONG] [medium] Pred 4:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Version_Number LIMIT 1' (-3.543) (length=13)
[WRONG] [medium] Pred 5:	b'SELECT MIN(Templates.Version_Number), Templates.Template_Type_Code FROM Templates ORDER BY Templates.Version_Number LIMIT 1' (-3.763) (length=14)
[WRONG] [medium] Pred 6:	b'SELECT MAX(Templates.Version_Number), Templates.Template_Type_Code FROM Templates ORDER BY Templates.Version_Number LIMIT 1' (-3.832) (length=14)
[CORRE] [medium] Pred 7:	b'SELECT MIN(Templates.Version_Number), Templates.Template_Type_Code FROM Templates' (-4.103) (length=10)
Error Case 13

Parsing error: from visitor join membership "on visitor.ID = 4 select visitor.Name , visitor.Level_of_membership order by visitor.Age"
Parsing error: from visitor where visitor.Age > 4 select visitor.Name) , visitor.Level_of_membership order by visitor.Age
Parsing error: from visitor where visitor.Age > 4 select visitor.Name select visitor.Name , visitor.Level_of_membership order by visitor.Age
Example 54
museum_visit
 +-- museum (museum)
 |   +-- Museum_ID (museum id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Num_of_Staff (num of staff)
 |   +-- Open_Year (open year)
 +-- visitor (customer)
 |   +-- ID (customer id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Level_of_membership (level of membership)
 |   +-- Age (age)
 +-- visit (visit)
     +-- Museum_ID (museum id) [PRIMARY] [FOREIGN]
     +-- visitor_ID (customer id) [FOREIGN]
     +-- Num_of_Ticket (num of ticket)
     +-- Total_spent (total spent)
NL: b'Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.'
NL tokens: [b'find', b'the', b'name', b'and', b'membership', b'level', b'of', b'the', b'visitors', b'whose', b'membership', b'level', b'is', b'higher', b'than', b'4', b',', b'and', b'sort', b'by', b'their', b'age', b'from', b'old', b'to', b'young', b'.']
NL tokens (original): [b'Find', b'the', b'name', b'and', b'membership', b'level', b'of', b'the', b'visitors', b'whose', b'membership', b'level', b'is', b'higher', b'than', b'4', b',', b'and', b'sort', b'by', b'their', b'age', b'from', b'old', b'to', b'young', b'.']
['[CLS]', 'find', 'the', 'name', 'and', 'membership', 'level', 'of', 'the', 'visitors', 'whose', 'membership', 'level', 'is', 'higher', 'than', '4', ',', 'and', 'sort', 'by', 'their', 'age', 'from', 'old', 'to', 'young', '.', '[SEP]', '*', '[unused50]', 'museum', '[unused51]', 'museum', 'id', '[unused51]', 'name', '[unused51]', 'nu', '##m', 'of', 'staff', '[unused51]', 'open', 'year', '[unused50]', 'customer', '[unused51]', 'customer', 'id', '[unused51]', 'name', '[unused51]', 'level', 'of', 'membership', '[unused51]', 'age', '[unused50]', 'visit', '[unused51]', 'museum', 'id', '[unused51]', 'customer', 'id', '[unused51]', 'nu', '##m', 'of', 'ticket', '[unused51]', 'total', 'spent', '[SEP]']
Target 0: b'SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC'
Target TF-P tokens: from visitor where visitor.Level_of_membership > 4 select visitor.Name , visitor.Level_of_membership order by visitor.Age desc

[WRONG] [medium] Pred 0:	b'SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Age > 4 ORDER BY visitor.Age' (-0.000) (length=13)
[WRONG] [medium] Pred 1:	b'SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Age > 4 ORDER BY visitor.Level_of_membership' (-2.942) (length=13)
[WRONG] [medium] Pred 2:	b'SELECT visitor.Name FROM visitor WHERE visitor.Age > 4 ORDER BY visitor.Level_of_membership' (-3.252) (length=11)
[WRONG] [medium] Pred 3:	b'SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Age > 4 ORDER BY visitor.Age DESC' (-3.767) (length=14)
[WRONG] [medium] Pred 4:	b'SELECT visitor.Name, visitor.Level_of_membership FROM visitor JOIN visitor ON visitor.ID = visitor.Level_of_membership WHERE visitor.Age > 4 ORDER BY visitor.Age' (-3.998) (length=19)
[WRONG] [medium] Pred 5:	b'SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Age > 4 AND visitor.Age > 4 ORDER BY visitor.Age' (-4.277) (length=17)
[WRONG] [medium] Pred 6:	b'SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Age' (-4.405) (length=13)
[WRONG] [medium] Pred 7:	b'SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Age > 4 ORDER BY visitor.Age,visitor.Level_of_membership' (-4.447) (length=15)
[WRONG] [medium] Pred 8:	b'SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Age > 4 ORDER BY visitor.Age ASC' (-4.457) (length=14)
[WRONG] [medium] Pred 9:	b'SELECT visitor.Name, visitor.Level_of_membership FROM visitor JOIN visitor ON visitor.ID = visitor.Level_of_membership WHERE visitor.Age > 4 ORDER BY visitor.Level_of_membership' (-4.934) (length=19)
[WRONG] [medium] Pred 10:	b'SELECT "visitor.Name.visitor.Level_of_membership" FROM visitor WHERE visitor.Age > 4 ORDER BY visitor.Age' (-4.970) (length=13)
[WRONG] [medium] Pred 11:	b'SELECT visitor.Name, visitor.Level_of_membership FROM visitor HAVING visitor.Age > 4 ORDER BY visitor.Age' (-4.997) (length=13)
[WRONG] [medium] Pred 12:	b'SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Age > 40 ORDER BY visitor.Age' (-5.001) (length=14)
Error Case 14

Parsing error: from Professionals join Treatments on Professionals.professional_id = Treatments.professional_id where Treatments.treatment_type_code in (from Professionals join Treatments on Professionals.professional_id = Treatments.professional_id select Professionals.first_name , Professionals.last_name
Parsing error: from Professionals join Treatments on Professionals.professional_id = Treatments.professional_id where Treatments.treatment_type_code in (from Professionals join Treatments on Professionals.professional_id = Treatments.professional_id select Professionals.first_name , Professionals.first_name
Parsing error: from Professionals join Treatments on Professionals.professional_id = Treatments.professional_id where Treatments.treatment_type_code in (from Professionals join Treatments on Professionals.professional_id = Treatments.professional_id select Professionals.first_name , Professionals.email_address
Example 55
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b"What are each professional's first name and description of the treatment they have performed?"
NL tokens: [b'what', b'are', b'each', b'professional', b"'", b's', b'first', b'name', b'and', b'description', b'of', b'the', b'treatment', b'they', b'have', b'performed', b'?']
NL tokens (original): [b'What', b'are', b'each', b'professional', b"'", b's', b'first', b'name', b'and', b'description', b'of', b'the', b'treatment', b'they', b'have', b'performed', b'?']
['[CLS]', 'what', 'are', 'each', 'professional', "'", 's', 'first', 'name', 'and', 'description', 'of', 'the', 'treatment', 'they', 'have', 'performed', '?', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code'
Target TF-P tokens: from Professionals join Treatments on Professionals.professional_id = Treatments.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code select distinct Professionals.first_name , Treatment_Types.treatment_type_description

 54%|█████▍    | 7/13 [00:34<00:35,  5.84s/it][WRONG] [medium] Pred 0:	b'SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.treatment_type_code IN (SELECT Professionals.professional_id FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id)' (-5.048) (length=28)
[WRONG] [medium] Pred 1:	b'SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.date_of_treatment LIKE "% and VALUE %"' (-5.142) (length=22)
[WRONG] [medium] Pred 2:	b'SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.treatment_type_code IN (SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id)' (-5.151) (length=28)
[WRONG] [medium] Pred 3:	b'SELECT Professionals.first_name, Treatments.cost_of_treatment FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id' (-5.157) (length=13)
[WRONG] [medium] Pred 4:	b'SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment LIKE "% and VALUE %"' (-5.211) (length=22)
[WRONG] [medium] Pred 5:	b'SELECT Professionals.first_name, Treatments.date_of_treatment FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id' (-5.534) (length=13)
[WRONG] [medium] Pred 6:	b'SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.date_of_treatment LIKE "% performed %"' (-5.576) (length=21)
[WRONG] [medium] Pred 7:	b'SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.date_of_treatment LIKE "% the %"' (-5.610) (length=21)
[WRONG] [medium] Pred 8:	b'SELECT Professionals.first_name, Professionals.email_address FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id' (-5.689) (length=13)
[WRONG] [medium] Pred 9:	b'SELECT Professionals.first_name, Professionals.last_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id' (-5.729) (length=13)
[WRONG] [medium] Pred 10:	b'SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment LIKE "% performed %"' (-5.771) (length=21)
[WRONG] [medium] Pred 11:	b'SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment LIKE "% the %"' (-5.817) (length=21)
[WRONG] [medium] Pred 12:	b'SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.date_of_treatment LIKE "% have %"' (-5.873) (length=21)
Error Case 15

Example 58
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b"Find the role, street, city and state of the professionals living in a city that contains the substring 'West'."
NL tokens: [b'find', b'the', b'role', b',', b'street', b',', b'city', b'and', b'state', b'of', b'the', b'professionals', b'living', b'in', b'a', b'city', b'that', b'contains', b'the', b'sub', b'##st', b'##ring', b"'", b'west', b"'", b'.']
NL tokens (original): [b'Find', b'the', b'role', b',', b'street', b',', b'city', b'and', b'state', b'of', b'the', b'professionals', b'living', b'in', b'a', b'city', b'that', b'contains', b'the', b'sub', b'##st', b'##ring', b"'", b'West', b"'", b'.']
['[CLS]', 'find', 'the', 'role', ',', 'street', ',', 'city', 'and', 'state', 'of', 'the', 'professionals', 'living', 'in', 'a', 'city', 'that', 'contains', 'the', 'sub', '##st', '##ring', "'", 'west', "'", '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b"SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"
Target TF-P tokens: from Professionals where Professionals.city like "% West %" select Professionals.role_code , Professionals.street , Professionals.city , Professionals.state

 62%|██████▏   | 8/13 [00:36<00:23,  4.61s/it][WRONG] [medium] Pred 0:	b'SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE "% West %"' (-0.002) (length=19)
[WRONG] [medium] Pred 1:	b'SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE "% West %"' (-1.249) (length=17)
[WRONG] [medium] Pred 2:	b'SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.street LIKE "% West %"' (-2.338) (length=19)
[CORRE] [medium] Pred 3:	b'SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.city LIKE "% West %"' (-2.425) (length=19)
Error Case 16

ERROR: Join condition does not match with table: ['Highschooler', {'join': 'Friend', 'on': {'eq': ['Likes.liked_id', 'Highschooler.ID']}}]
ERROR: Join condition does not match with table: ['Likes', {'join': 'Highschooler', 'on': {'eq': ['Likes.student_id', 'Highschooler.ID']}}, {'join': 'Friend', 'on': {'eq': ['Likes.liked_id', 'Highschooler.ID']}}]
ERROR: Join condition does not match with table: ['Highschooler', {'join': 'Friend', 'on': {'eq': ['Friend.friend_id', 'Friend.student_id']}}]
ERROR: Join condition does not match with table: ['Likes', {'join': 'Highschooler', 'on': {'eq': ['Likes.student_id', 'Highschooler.ID']}}, {'join': 'Friend', 'on': {'eq': ['Likes.liked_id', 'Highschooler.ID']}}]
ERROR: Join condition does not match with table: ['Highschooler', {'join': 'Friend', 'on': {'eq': ['Likes.liked_id', 'Highschooler.ID']}}]
ERROR: table "Likes" in field expression Likes.student_id is not in the current scope
Example 68
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'Show name of all students who have some friends and also are liked by someone else.'
NL tokens: [b'show', b'name', b'of', b'all', b'students', b'who', b'have', b'some', b'friends', b'and', b'also', b'are', b'liked', b'by', b'someone', b'else', b'.']
NL tokens (original): [b'Show', b'name', b'of', b'all', b'students', b'who', b'have', b'some', b'friends', b'and', b'also', b'are', b'liked', b'by', b'someone', b'else', b'.']
['[CLS]', 'show', 'name', 'of', 'all', 'students', 'who', 'have', 'some', 'friends', 'and', 'also', 'are', 'liked', 'by', 'someone', 'else', '.', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id'
Target TF-P tokens: from Friend join Highschooler on Friend.student_id = Highschooler.ID select Highschooler.name intersect from Likes join Highschooler on Likes.liked_id = Highschooler.ID select Highschooler.name

[WRONG] [hard] Pred 0:	b'SELECT Likes.student_id FROM Likes INTERSECT SELECT Likes.student_id FROM Likes INTERSECT SELECT Likes.liked_id FROM Likes' (-0.818) (length=15)
[WRONG] [hard] Pred 1:	b'SELECT Likes.student_id FROM Likes INTERSECT SELECT Likes.student_id FROM Likes' (-1.045) (length=10)
[WRONG] [hard] Pred 2:	b'SELECT Highschooler.name FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID INTERSECT SELECT Likes.student_id FROM Likes' (-1.063) (length=16)
[WRONG] [hard] Pred 3:	b'SELECT Highschooler.name FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID INTERSECT SELECT Highschooler.name FROM Highschooler JOIN Friend ON Friend.friend_id = Highschooler.ID' (-1.141) (length=22)
[WRONG] [hard] Pred 4:	b'SELECT Highschooler.name FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID INTERSECT SELECT Likes.liked_id FROM Likes' (-1.169) (length=16)
[WRONG] [hard] Pred 5:	b'SELECT Likes.student_id FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID INTERSECT SELECT Likes.liked_id FROM Likes' (-1.285) (length=16)
[WRONG] [hard] Pred 6:	b'SELECT Highschooler.name FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID INTERSECT SELECT Highschooler.name FROM Highschooler JOIN Likes ON Likes.liked_id = Highschooler.ID' (-1.417) (length=22)
[WRONG] [hard] Pred 7:	b'SELECT Likes.student_id FROM Likes INTERSECT SELECT Likes.liked_id FROM Likes' (-1.426) (length=10)
[WRONG] [hard] Pred 8:	b'SELECT Highschooler.name FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID JOIN Friend ON Friend.friend_id = Highschooler.ID INTERSECT SELECT Highschooler.name FROM Highschooler JOIN Friend ON Friend.friend_id = Highschooler.ID' (-1.458) (length=28)
[WRONG] [hard] Pred 9:	b'SELECT Likes.student_id FROM Likes JOIN Friend ON Likes.student_id = Friend.student_id INTERSECT SELECT Likes.liked_id FROM Likes' (-1.636) (length=16)
Error Case 17

ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Capital']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Code2']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.Language']}}]
ERROR: invalid JOIN field "country": ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country']}}]
ERROR: invalid JOIN field "country": ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'country']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.IndepYear']}}]
Example 69
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Which languages are spoken by only one country in republic governments?'
NL tokens: [b'which', b'languages', b'are', b'spoken', b'by', b'only', b'one', b'country', b'in', b'republic', b'governments', b'?']
NL tokens (original): [b'Which', b'languages', b'are', b'spoken', b'by', b'only', b'one', b'country', b'in', b'republic', b'governments', b'?']
['[CLS]', 'which', 'languages', 'are', 'spoken', 'by', 'only', 'one', 'country', 'in', 'republic', 'governments', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused49]', 'republic', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1'
Target TF-P tokens: from country join countrylanguage on country.Code = countrylanguage.CountryCode where country.GovernmentForm = "republic" group by countrylanguage.Language having count (*) = 1 select countrylanguage.Language

[WRONG] [hard] Pred 0:	b'SELECT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language HAVING COUNT(*) = 1' (-0.000) (length=14)
[WRONG] [hard] Pred 1:	b'SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY countrylanguage.Language HAVING COUNT(*) = 1' (-2.162) (length=20)
[WRONG] [hard] Pred 2:	b'SELECT countrylanguage.Language FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.Code2 GROUP BY countrylanguage.Language HAVING COUNT(*) = 1' (-2.899) (length=20)
[WRONG] [hard] Pred 3:	b'SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.Language = country.Code GROUP BY countrylanguage.Language HAVING COUNT(*) = 1' (-2.981) (length=20)
[WRONG] [hard] Pred 4:	b'SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.Language GROUP BY countrylanguage.Language HAVING COUNT(*) = 1' (-3.006) (length=20)
[WRONG] [hard] Pred 5:	b'SELECT countrylanguage.Language FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.Capital GROUP BY countrylanguage.Language HAVING COUNT(*) = 1' (-3.090) (length=20)
[WRONG] [hard] Pred 6:	b'SELECT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language ORDER BY COUNT(*) = 1' (-4.311) (length=14)
[WRONG] [hard] Pred 7:	b'SELECT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language HAVING COUNT(*) = "one"' (-4.455) (length=14)
[WRONG] [hard] Pred 8:	b'SELECT DISTINCT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language HAVING COUNT(*) = 1' (-4.504) (length=15)
Error Case 18

Example 70
course_teach
 +-- course (course)
 |   +-- Course_ID (course id) [PRIMARY] [FOREIGN]
 |   +-- Staring_Date (staring date)
 |   +-- Course (course)
 +-- teacher (teacher)
 |   +-- Teacher_ID (teacher id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Age (age)
 |   +-- Hometown (hometown)
 +-- course_arrange (course arrange)
     +-- Course_ID (course id) [PRIMARY] [FOREIGN]
     +-- Teacher_ID (teacher id) [FOREIGN]
     +-- Grade (grade)
NL: b'What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?'
NL tokens: [b'what', b'are', b'the', b'names', b'of', b'the', b'teachers', b'and', b'the', b'courses', b'they', b'teach', b'in', b'ascending', b'alphabet', b'##ical', b'order', b'by', b'the', b'name', b'of', b'the', b'teacher', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'of', b'the', b'teachers', b'and', b'the', b'courses', b'they', b'teach', b'in', b'ascending', b'alphabet', b'##ical', b'order', b'by', b'the', b'name', b'of', b'the', b'teacher', b'?']
['[CLS]', 'what', 'are', 'the', 'names', 'of', 'the', 'teachers', 'and', 'the', 'courses', 'they', 'teach', 'in', 'ascending', 'alphabet', '##ical', 'order', 'by', 'the', 'name', 'of', 'the', 'teacher', '?', '[SEP]', '*', '[unused50]', 'course', '[unused51]', 'course', 'id', '[unused51]', 'staring', 'date', '[unused51]', 'course', '[unused50]', 'teacher', '[unused51]', 'teacher', 'id', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'hometown', '[unused50]', 'course', 'arrange', '[unused51]', 'course', 'id', '[unused51]', 'teacher', 'id', '[unused51]', 'grade', '[SEP]']
Target 0: b'SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name'
Target TF-P tokens: from course_arrange join course on course_arrange.Course_ID = course.Course_ID join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID select teacher.Name , course.Course order by teacher.Name

[WRONG] [hard] Pred 0:	b'SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID ORDER BY teacher.Name ASC' (-1.609) (length=16)
[WRONG] [hard] Pred 1:	b'SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID ORDER BY teacher.Name' (-2.232) (length=15)
[WRONG] [hard] Pred 2:	b'SELECT teacher.Name, "course_arrange" FROM teacher ORDER BY teacher.Name ASC' (-3.107) (length=10)
[WRONG] [hard] Pred 3:	b'SELECT teacher.Name FROM teacher ORDER BY teacher.Name ASC' (-3.319) (length=10)
[WRONG] [hard] Pred 4:	b'SELECT teacher.Name FROM teacher JOIN teacher ON teacher.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name ASC' (-3.698) (length=16)
[WRONG] [hard] Pred 5:	b'SELECT teacher.Name, "course_arrange" FROM teacher ORDER BY teacher.Name' (-3.858) (length=9)
[WRONG] [hard] Pred 6:	b'SELECT teacher.Name FROM teacher JOIN course_arrange ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name ASC' (-3.984) (length=16)
[WRONG] [hard] Pred 7:	b'SELECT teacher.Name FROM teacher JOIN teacher ON teacher.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name' (-4.027) (length=15)
[WRONG] [hard] Pred 8:	b'SELECT teacher.Name, teacher.Age FROM teacher ORDER BY teacher.Name ASC' (-4.282) (length=10)
[WRONG] [hard] Pred 9:	b'SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name ASC' (-4.357) (length=16)
[WRONG] [hard] Pred 10:	b'SELECT teacher.Name FROM teacher JOIN course_arrange ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name' (-4.591) (length=15)
[WRONG] [hard] Pred 11:	b'SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name' (-4.600) (length=15)
[WRONG] [hard] Pred 12:	b'SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID ORDER BY teacher.Name,teacher.Name' (-4.702) (length=17)
[WRONG] [hard] Pred 13:	b'SELECT teacher.Name, teacher.Age FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID ORDER BY teacher.Name ASC' (-4.853) (length=16)
[WRONG] [hard] Pred 14:	b'SELECT teacher.Name, "course_arrange" FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID ORDER BY teacher.Name' (-5.026) (length=15)
[WRONG] [hard] Pred 15:	b'SELECT teacher.Name, teacher.Age FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID ORDER BY teacher.Name' (-5.083) (length=15)
Error Case 19

Parsing error: from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID select teacher.Name , teacher.Name order by teacher.Name asc limit
Example 71
 69%|██████▉   | 9/13 [00:44<00:22,  5.51s/it]course_teach
 +-- course (course)
 |   +-- Course_ID (course id) [PRIMARY] [FOREIGN]
 |   +-- Staring_Date (staring date)
 |   +-- Course (course)
 +-- teacher (teacher)
 |   +-- Teacher_ID (teacher id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Age (age)
 |   +-- Hometown (hometown)
 +-- course_arrange (course arrange)
     +-- Course_ID (course id) [PRIMARY] [FOREIGN]
     +-- Teacher_ID (teacher id) [FOREIGN]
     +-- Grade (grade)
NL: b"Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name."
NL tokens: [b'show', b'names', b'of', b'teachers', b'and', b'the', b'courses', b'they', b'are', b'arranged', b'to', b'teach', b'in', b'ascending', b'alphabet', b'##ical', b'order', b'of', b'the', b'teacher', b"'", b's', b'name', b'.']
NL tokens (original): [b'Show', b'names', b'of', b'teachers', b'and', b'the', b'courses', b'they', b'are', b'arranged', b'to', b'teach', b'in', b'ascending', b'alphabet', b'##ical', b'order', b'of', b'the', b'teacher', b"'", b's', b'name', b'.']
['[CLS]', 'show', 'names', 'of', 'teachers', 'and', 'the', 'courses', 'they', 'are', 'arranged', 'to', 'teach', 'in', 'ascending', 'alphabet', '##ical', 'order', 'of', 'the', 'teacher', "'", 's', 'name', '.', '[SEP]', '*', '[unused50]', 'course', '[unused51]', 'course', 'id', '[unused51]', 'staring', 'date', '[unused51]', 'course', '[unused50]', 'teacher', '[unused51]', 'teacher', 'id', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'hometown', '[unused50]', 'course', 'arrange', '[unused51]', 'course', 'id', '[unused51]', 'teacher', 'id', '[unused51]', 'grade', '[SEP]']
Target 0: b'SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name'
Target TF-P tokens: from course_arrange join course on course_arrange.Course_ID = course.Course_ID join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID select teacher.Name , course.Course order by teacher.Name

[WRONG] [hard] Pred 0:	b'SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name ASC' (-0.000) (length=16)
[WRONG] [hard] Pred 1:	b'SELECT teacher.Name, "course_arrange" FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name ASC' (-2.066) (length=16)
[WRONG] [hard] Pred 2:	b'SELECT teacher.Name, course_arrange.Teacher_ID FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name ASC' (-2.812) (length=16)
[WRONG] [hard] Pred 3:	b'SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name' (-2.871) (length=15)
[WRONG] [hard] Pred 4:	b'SELECT teacher.Name, teacher.Age FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name ASC' (-3.325) (length=16)
[WRONG] [hard] Pred 5:	b'SELECT teacher.Name, course_arrange.Teacher_ID FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID GROUP BY course_arrange.Teacher_ID ORDER BY MIN(teacher.Name) ASC' (-3.390) (length=21)
[WRONG] [hard] Pred 6:	b'SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID ORDER BY teacher.Name ASC' (-3.611) (length=16)
[WRONG] [hard] Pred 7:	b'SELECT teacher.Name, teacher.Hometown FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name ASC' (-3.648) (length=16)
[WRONG] [hard] Pred 8:	b'SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID WHERE teacher.Name IS NULL ORDER BY teacher.Name' (-3.671) (length=19)
[WRONG] [hard] Pred 9:	b'SELECT teacher.Name, course_arrange.Grade FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name ASC' (-3.872) (length=16)
[WRONG] [hard] Pred 10:	b'SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID WHERE teacher.Name IS NULL ORDER BY teacher.Name ASC' (-3.994) (length=20)
[WRONG] [hard] Pred 11:	b'SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name DESC' (-4.034) (length=16)
[WRONG] [hard] Pred 12:	b'SELECT teacher.Name, course_arrange.Course_ID FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name ASC' (-4.069) (length=16)
[WRONG] [hard] Pred 13:	b'SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name ASC' (-4.083) (length=18)
[WRONG] [hard] Pred 14:	b'SELECT teacher.Name, course_arrange.Teacher_ID FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID GROUP BY course_arrange.Teacher_ID ORDER BY teacher.Name' (-4.184) (length=17)
Error Case 20

ERROR: table "countrylanguage" in field expression countrylanguage.CountryCode is not in the current scope
Parsing error: from country where country.Code not = (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select country.Code
ERROR: table "countrylanguage" in field expression countrylanguage.CountryCode is not in the current scope
Parsing error: from country where country.Code not = (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select countrylanguage.CountryCode
Parsing error: from country where country.Code != in (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select country.Code
Parsing error: from country where country.Code having in (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select country.Code
Parsing error: from country where country.Code != in (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select countrylanguage.CountryCode
Parsing error: from country except country.Code except from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode
Parsing error: from country no country.Code except from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode
Example 72
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What are the country codes for countries that do not speak English?'
NL tokens: [b'what', b'are', b'the', b'country', b'codes', b'for', b'countries', b'that', b'do', b'not', b'speak', b'english', b'?']
NL tokens (original): [b'What', b'are', b'the', b'country', b'codes', b'for', b'countries', b'that', b'do', b'not', b'speak', b'English', b'?']
['[CLS]', 'what', 'are', 'the', 'country', 'codes', 'for', 'countries', 'that', 'do', 'not', 'speak', 'english', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused49]', 'english', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"'
Target TF-P tokens: from countrylanguage select countrylanguage.CountryCode except from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode

[WRONG] [hard] Pred 0:	b'SELECT country.Code FROM country WHERE country.Code NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")' (-0.213) (length=21)
[WRONG] [hard] Pred 1:	b'SELECT country.Code FROM country WHERE country.Continent != "English"' (-0.742) (length=11)
[WRONG] [hard] Pred 2:	b'SELECT country.Code FROM country WHERE country.Continent != "English" EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English"' (-0.789) (length=22)
[WRONG] [hard] Pred 3:	b'SELECT country.Code FROM country WHERE country.Continent NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")' (-1.672) (length=21)
[WRONG] [hard] Pred 4:	b'SELECT country.Code FROM country EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English"' (-1.763) (length=16)
[WRONG] [hard] Pred 5:	b'SELECT country.Code FROM country WHERE country.Code != "English"' (-2.275) (length=11)
[WRONG] [hard] Pred 6:	b'SELECT country.Code FROM country WHERE country.Continent != "English" INTERSECT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English"' (-2.503) (length=22)
Error Case 21

ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Code2']}}]
Example 77
orchestra
 +-- conductor (conductor)
 |   +-- Conductor_ID (conductor id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Age (age)
 |   +-- Nationality (nationality)
 |   +-- Year_of_Work (year of work)
 +-- orchestra (orchestra)
 |   +-- Orchestra_ID (orchestra id) [PRIMARY] [FOREIGN]
 |   +-- Orchestra (orchestra)
 |   +-- Conductor_ID (conductor id) [FOREIGN]
 |   +-- Record_Company (record company)
 |   +-- Year_of_Founded (year of founded)
 |   +-- Major_Record_Format (major record format)
 +-- performance (performance)
 |   +-- Performance_ID (performance id) [PRIMARY] [FOREIGN]
 |   +-- Orchestra_ID (orchestra id) [FOREIGN]
 |   +-- Type (type)
 |   +-- Date (date)
 |   +-- Official_ratings_(millions) (official ratings (millions))
 |   +-- Weekly_rank (weekly rank)
 |   +-- Share (share)
 +-- show (show)
     +-- Show_ID (show id)
     +-- Performance_ID (performance id) [FOREIGN]
     +-- If_first_show (if first show)
     +-- Result (result)
     +-- Attendance (attendance)
NL: b'What are the orchestras that do not have any performances?'
NL tokens: [b'what', b'are', b'the', b'orchestras', b'that', b'do', b'not', b'have', b'any', b'performances', b'?']
NL tokens (original): [b'What', b'are', b'the', b'orchestras', b'that', b'do', b'not', b'have', b'any', b'performances', b'?']
['[CLS]', 'what', 'are', 'the', 'orchestras', 'that', 'do', 'not', 'have', 'any', 'performances', '?', '[SEP]', '*', '[unused50]', 'conductor', '[unused51]', 'conductor', 'id', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'nationality', '[unused51]', 'year', 'of', 'work', '[unused50]', 'orchestra', '[unused51]', 'orchestra', 'id', '[unused51]', 'orchestra', '[unused51]', 'conductor', 'id', '[unused51]', 'record', 'company', '[unused51]', 'year', 'of', 'founded', '[unused51]', 'major', 'record', 'format', '[unused50]', 'performance', '[unused51]', 'performance', 'id', '[unused51]', 'orchestra', 'id', '[unused51]', 'type', '[unused51]', 'date', '[unused51]', 'official', 'ratings', '(', 'millions', ')', '[unused51]', 'weekly', 'rank', '[unused51]', 'share', '[unused50]', 'show', '[unused51]', 'show', 'id', '[unused51]', 'performance', 'id', '[unused51]', 'if', 'first', 'show', '[unused51]', 'result', '[unused51]', 'attendance', '[SEP]']
Target 0: b'SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)'
Target TF-P tokens: from orchestra where orchestra.Orchestra_ID not in (from performance select performance.Orchestra_ID) select orchestra.Orchestra

[WRONG] [hard] Pred 0:	b'SELECT orchestra.Orchestra FROM orchestra EXCEPT SELECT orchestra.Orchestra FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID' (-0.034) (length=16)
[CORRE] [hard] Pred 1:	b'SELECT orchestra.Orchestra FROM orchestra WHERE orchestra.Orchestra_ID NOT IN (SELECT performance.Orchestra_ID FROM performance)' (-0.658) (length=15)
Error Case 22

ERROR: Join condition does not match with table: ['country', {'join': 'city', 'on': {'eq': ['country.Code', 'country.GNPOld']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'city', 'on': {'eq': ['country.Code', 'country.GNP']}}]
Parsing error: from country where country.Continent = "asian" and country.LifeExpectancy = (from country and country.Continent = "asian" select max (country.Region)) select country.Name , country.Population , country.LifeExpectancy
ERROR: Join condition does not match with table: ['country', {'join': 'city', 'on': {'eq': ['country.Code', 'country.GNPOld']}}]
Parsing error: from country join country.Continent = "asian" and country.LifeExpectancy = (from country where country.Continent = "asian" select max (country.Region)) select country.Name , country.Population , country.LifeExpectancy
Parsing error: from country where country.Continent = "asian" and country.LifeExpectancy = (from country where country.Continent = "asian" select max (country.Region)) select country.Name , country.Population avg country.LifeExpectancy
Example 78
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Find the name, population and expected life length of asian country with the largest area?'
NL tokens: [b'find', b'the', b'name', b',', b'population', b'and', b'expected', b'life', b'length', b'of', b'asian', b'country', b'with', b'the', b'largest', b'area', b'?']
NL tokens (original): [b'Find', b'the', b'name', b',', b'population', b'and', b'expected', b'life', b'length', b'of', b'asian', b'country', b'with', b'the', b'largest', b'area', b'?']
['[CLS]', 'find', 'the', 'name', ',', 'population', 'and', 'expected', 'life', 'length', 'of', 'asian', 'country', 'with', 'the', 'largest', 'area', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused49]', 'asia', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1'
Target TF-P tokens: from country where country.Continent = "VALUE" select country.Name , country.Population , country.LifeExpectancy order by country.SurfaceArea desc limit 1

[WRONG] [hard] Pred 0:	b'SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = "asian" AND country.LifeExpectancy = (SELECT MAX(country.Region) FROM country WHERE country.Continent = "asian")' (-0.000) (length=33)
[WRONG] [hard] Pred 1:	b'SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = "asian" AND country.LifeExpectancy = (SELECT MAX(country.LifeExpectancy) FROM country WHERE country.Continent = "asian")' (-1.002) (length=33)
[WRONG] [hard] Pred 2:	b'SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = "asian" AND country.Population = (SELECT MAX(country.Region) FROM country WHERE country.Continent = "asian")' (-1.360) (length=33)
[WRONG] [hard] Pred 3:	b'SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = "asian" AND country.Region = (SELECT MAX(country.Region) FROM country WHERE country.Continent = "asian")' (-1.494) (length=33)
[WRONG] [hard] Pred 4:	b'SELECT country.Name, country.Population FROM country WHERE country.Continent = "asian" AND country.LifeExpectancy = (SELECT MAX(country.Region) FROM country WHERE country.Continent = "asian")' (-1.572) (length=31)
[WRONG] [hard] Pred 5:	b'SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = "asian" AND country.LifeExpectancy = (SELECT MAX(country.Population) FROM country WHERE country.Continent = "asian")' (-2.060) (length=33)
[WRONG] [hard] Pred 6:	b'SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = "asian" AND country.LifeExpectancy <= (SELECT MAX(country.Region) FROM country WHERE country.Continent = "asian")' (-2.061) (length=33)
[WRONG] [hard] Pred 7:	b'SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = "asian" AND country.LifeExpectancy = (SELECT MIN(country.Region) FROM country WHERE country.Continent = "asian")' (-2.217) (length=33)
[WRONG] [hard] Pred 8:	b'SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = "asian" AND country.LifeExpectancy = (SELECT MAX(country.Region) FROM country GROUP BY country.Continent)' (-2.241) (length=29)
[WRONG] [hard] Pred 9:	b'SELECT country.Name, country.Population, country.GNPOld FROM country WHERE country.Continent = "asian" AND country.LifeExpectancy = (SELECT MAX(country.Region) FROM country WHERE country.Continent = "asian")' (-2.318) (length=33)
Error Case 23

Parsing error: from cars_data where cars_data.Accelerate > (from cars_data select max (cars_data.Accelerate)) order by count (*) desc limit 1
Parsing error: from cars_data where cars_data.Accelerate > (from cars_data select max (cars_data.Accelerate)) select count (*) : cars_data.Horsepower desc limit 1
Parsing error: from cars_data where cars_data.Accelerate > (from cars_data select max max cars_data.Accelerate)) select count (*)
Parsing error: from cars_data where cars_data.Accelerate > (from cars_data select desc (cars_data.Accelerate)) select count (*)
Parsing error: from cars_data having where cars_data.Accelerate > (from cars_data select max (cars_data.Accelerate)) select count (*)
Parsing error: from cars_data where cars_data.Accelerate > (from cars_data select max (cars_data.Accelerate)) select count (*) : cars_data.Horsepower
Example 79
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'How many cars have a larger accelerate than the car with the largest horsepower?'
NL tokens: [b'how', b'many', b'cars', b'have', b'a', b'larger', b'accelerate', b'than', b'the', b'car', b'with', b'the', b'largest', b'horsepower', b'?']
NL tokens (original): [b'How', b'many', b'cars', b'have', b'a', b'larger', b'accelerate', b'than', b'the', b'car', b'with', b'the', b'largest', b'horsepower', b'?']
['[CLS]', 'how', 'many', 'cars', 'have', 'a', 'larger', 'accelerate', 'than', 'the', 'car', 'with', 'the', 'largest', 'horsepower', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 )'
Target TF-P tokens: from cars_data where cars_data.Accelerate > (from cars_data select cars_data.Accelerate order by cars_data.Horsepower desc limit 1) select count (*)

[WRONG] [hard] Pred 0:	b'SELECT COUNT(*) FROM cars_data WHERE cars_data.Accelerate > (SELECT MAX(cars_data.Accelerate) FROM cars_data)' (-0.000) (length=20)
[WRONG] [hard] Pred 1:	b'SELECT COUNT(*) FROM cars_data WHERE cars_data.Accelerate > (SELECT MAX(cars_data.Accelerate) FROM cars_data) AND cars_data.Horsepower = (SELECT MAX(cars_data.Accelerate) FROM cars_data)' (-2.745) (length=32)
 77%|███████▋  | 10/13 [01:03<00:29,  9.77s/it][WRONG] [hard] Pred 2:	b'SELECT COUNT(*) FROM cars_data JOIN cars_data ON cars_data.Id = cars_data.Id WHERE cars_data.Accelerate > (SELECT MAX(cars_data.Accelerate) FROM cars_data)' (-2.765) (length=26)
[WRONG] [hard] Pred 3:	b'SELECT COUNT(*) FROM cars_data WHERE cars_data.Accelerate > (SELECT MAX(cars_data.Accelerate) FROM cars_data) AND cars_data.Horsepower = (SELECT MAX(cars_data.Horsepower) FROM cars_data)' (-2.843) (length=32)
[WRONG] [hard] Pred 4:	b'SELECT COUNT(*) FROM cars_data WHERE cars_data.Accelerate > (SELECT MAX(cars_data.Horsepower) FROM cars_data)' (-3.021) (length=20)
[WRONG] [hard] Pred 5:	b'SELECT COUNT(*) FROM cars_data WHERE cars_data.Accelerate > (SELECT MAX(cars_data.Accelerate) FROM cars_data) ORDER BY cars_data.Accelerate DESC LIMIT 1' (-3.205) (length=25)
[WRONG] [hard] Pred 6:	b'SELECT COUNT(*), cars_data.Horsepower FROM cars_data WHERE cars_data.Accelerate > (SELECT MAX(cars_data.Accelerate) FROM cars_data)' (-3.432) (length=22)
[WRONG] [hard] Pred 7:	b'SELECT COUNT(*) FROM cars_data WHERE cars_data.Accelerate > (SELECT MAX(cars_data.Accelerate) FROM cars_data) LIMIT 1' (-3.672) (length=22)
[WRONG] [hard] Pred 8:	b'SELECT COUNT(*) FROM cars_data WHERE cars_data.Accelerate > (SELECT MIN(cars_data.Accelerate) FROM cars_data)' (-3.735) (length=20)
[WRONG] [hard] Pred 9:	b'SELECT COUNT(*) FROM cars_data WHERE cars_data.Accelerate < (SELECT MAX(cars_data.Accelerate) FROM cars_data)' (-3.954) (length=20)
Error Case 24

Parsing error: from Student where Student.StuID in (from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "dog" select Has_Pet.StuID except from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "cat" select Has_Pet.StuID) and Student.StuID not in (from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "cat" select
ERROR: table "Pets" in field expression Pets.PetType is not in the current scope
Parsing error: from Student where Student.StuID in (from Has_Pet and Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "cat" select Has_Pet.StuID) select Student.Fname , Student.Age
Parsing error: from Student where Student.StuID in (from Has_Pet intersect join Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "cat" select Has_Pet.StuID) select Student.Fname , Student.Age
Example 86
pets_1
 +-- Student (student)
 |   +-- StuID (student id) [PRIMARY] [FOREIGN]
 |   +-- LName (last name)
 |   +-- Fname (first name)
 |   +-- Age (age)
 |   +-- Sex (sex)
 |   +-- Major (major)
 |   +-- Advisor (advisor)
 |   +-- city_code (city code)
 +-- Has_Pet (has pet)
 |   +-- StuID (student id) [FOREIGN]
 |   +-- PetID (pet id) [FOREIGN]
 +-- Pets (pets)
     +-- PetID (pet id) [PRIMARY] [FOREIGN]
     +-- PetType (pet type)
     +-- pet_age (pet age)
     +-- weight (weight)
NL: b'Find the first name and age of students who have a dog but do not have a cat as a pet.'
NL tokens: [b'find', b'the', b'first', b'name', b'and', b'age', b'of', b'students', b'who', b'have', b'a', b'dog', b'but', b'do', b'not', b'have', b'a', b'cat', b'as', b'a', b'pet', b'.']
NL tokens (original): [b'Find', b'the', b'first', b'name', b'and', b'age', b'of', b'students', b'who', b'have', b'a', b'dog', b'but', b'do', b'not', b'have', b'a', b'cat', b'as', b'a', b'pet', b'.']
['[CLS]', 'find', 'the', 'first', 'name', 'and', 'age', 'of', 'students', 'who', 'have', 'a', 'dog', 'but', 'do', 'not', 'have', 'a', 'cat', 'as', 'a', 'pet', '.', '[SEP]', '*', '[unused50]', 'student', '[unused51]', 'student', 'id', '[unused51]', 'last', 'name', '[unused51]', 'first', 'name', '[unused51]', 'age', '[unused51]', 'sex', '[unused51]', 'major', '[unused51]', 'advisor', '[unused51]', 'city', 'code', '[unused50]', 'has', 'pet', '[unused51]', 'student', 'id', '[unused51]', 'pet', 'id', '[unused50]', 'pets', '[unused51]', 'pet', 'id', '[unused51]', 'pet', 'type', '[unused49]', 'dog', '[unused49]', 'cat', '[unused51]', 'pet', 'age', '[unused51]', 'weight', '[SEP]']
Target 0: b"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
Target TF-P tokens: from Student join Has_Pet on Student.StuID = Has_Pet.StuID join Pets on Pets.PetID = Has_Pet.PetID where Pets.PetType = "dog" and Student.StuID not in (from Student join Has_Pet on Student.StuID = Has_Pet.StuID join Pets on Pets.PetID = Has_Pet.PetID where Pets.PetType = "cat" select Student.StuID) select Student.Fname , Student.Age

[WRONG] [extra] Pred 0:	b'SELECT Student.Fname, Student.Age FROM Student WHERE Student.StuID IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat")' (-0.005) (length=28)
[WRONG] [extra] Pred 1:	b'SELECT Student.Fname, Student.Age FROM Student WHERE Student.StuID IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "dog" EXCEPT SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat")' (-0.433) (length=45)
[WRONG] [extra] Pred 2:	b'SELECT Student.Fname, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat")' (-0.735) (length=29)
[WRONG] [extra] Pred 3:	b'SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Has_Pet.PetID != "VALUE" EXCEPT SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat"' (-1.222) (length=42)
[WRONG] [extra] Pred 4:	b'SELECT Student.Fname, Student.Age FROM Student WHERE Student.StuID IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat") AND Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat")' (-1.338) (length=50)
[WRONG] [extra] Pred 5:	b'SELECT Student.Fname, Student.Age FROM Student WHERE Student.StuID IN (SELECT Has_Pet.StuID FROM Has_Pet) EXCEPT SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat"' (-1.561) (length=41)
[WRONG] [extra] Pred 6:	b'SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Has_Pet.PetID IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat")' (-1.668) (length=34)
[WRONG] [extra] Pred 7:	b'SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Has_Pet.PetID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat")' (-1.707) (length=35)
[WRONG] [extra] Pred 8:	b'SELECT Student.Fname, Student.Age FROM Student EXCEPT SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat"' (-1.831) (length=32)
[WRONG] [extra] Pred 9:	b'SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Has_Pet.PetID = (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat")' (-1.854) (length=34)
[WRONG] [extra] Pred 10:	b'SELECT Student.Fname, Student.Age FROM Student WHERE Student.StuID IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "dog" EXCEPT SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat") AND Student.StuID != "cat"' (-1.944) (length=49)
 85%|████████▍ | 11/13 [01:17<00:21, 10.89s/it][WRONG] [extra] Pred 11:	b'SELECT DISTINCT Student.Fname, Student.Age FROM Student WHERE Student.StuID IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "dog" EXCEPT SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat")' (-2.036) (length=46)
Error Case 25

Example 87
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'What is the name of the high schooler who has the greatest number of friends?'
NL tokens: [b'what', b'is', b'the', b'name', b'of', b'the', b'high', b'school', b'##er', b'who', b'has', b'the', b'greatest', b'number', b'of', b'friends', b'?']
NL tokens (original): [b'What', b'is', b'the', b'name', b'of', b'the', b'high', b'school', b'##er', b'who', b'has', b'the', b'greatest', b'number', b'of', b'friends', b'?']
['[CLS]', 'what', 'is', 'the', 'name', 'of', 'the', 'high', 'school', '##er', 'who', 'has', 'the', 'greatest', 'number', 'of', 'friends', '?', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from Friend join Highschooler on Friend.student_id = Highschooler.ID group by Friend.student_id select Highschooler.name order by count (*) desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID ORDER BY COUNT(*) DESC LIMIT 1' (-0.018) (length=21)
[WRONG] [extra] Pred 1:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY "Highschooler" ORDER BY COUNT(*) DESC LIMIT 1' (-0.703) (length=21)
[CORRE] [extra] Pred 2:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Friend.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-0.927) (length=21)
Error Case 26

ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Owners.owner_id', 'Dogs.owner_id']}}, {'join': 'Charges', 'on': {'eq': ['Dogs.dog_id', 'Dogs.breed_code']}}]
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Owners.owner_id', 'Dogs.owner_id']}}, {'join': 'Charges', 'on': {'eq': ['Dogs.dog_id', 'Dogs.size_code']}}]
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Owners.owner_id', 'Dogs.owner_id']}}, {'join': 'Charges', 'on': {'eq': ['Dogs.dog_id', 'Dogs.owner_id']}}]
ERROR: table "Owners" in field expression Owners.owner_id is not in the current scope
ERROR: table "Owners" in field expression Owners.owner_id is not in the current scope
ERROR: table "Dogs" in field expression Dogs.owner_id is not in the current scope
ERROR: table "Dogs" in field expression Dogs.owner_id is not in the current scope
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Owners.owner_id', 'Dogs.owner_id']}}, {'join': 'Charges', 'on': {'eq': ['Dogs.dog_id', 'Dogs.breed_code']}}]
Parsing error: from Owners join Dogs on Owners.owner_id = Dogs.owner_id join Charges on Dogs.dog_id = Dogs.breed_code group by Owners.owner_id select Owners.owner_id , Owners.zip_code order by sum (Charges.charge_amount) desc limit 1 : 1
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Owners.owner_id', 'Dogs.owner_id']}}, {'join': 'Charges', 'on': {'eq': ['Dogs.dog_id', 'Dogs.breed_code']}}]
Parsing error: from Owners join Dogs on Owners.owner_id = Dogs.owner_id join Charges on Dogs.dog_id = Dogs.breed_code group by Owners.owner_id select Owners.owner_id , Owners.zip_code order by sum (Charges.charge_amount) desc desc limit 1
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Owners.owner_id', 'Dogs.owner_id']}}, {'join': 'Charges', 'on': {'eq': ['Dogs.dog_id', 'Dogs.breed_code']}}]
Parsing error: from Owners join Dogs on Owners.owner_id = Dogs.owner_id join Charges on Dogs.dog_id = Dogs.breed_code group by Owners.owner_id select Owners.owner_id , Owners.zip_code order by sum (Charges.charge_amount) desc limit 1 , Owners.zip_code
Parsing error: from Owners join Dogs on Owners.owner_id = Dogs.owner_id join Charges on Dogs.dog_id = Dogs.breed_code group by Owners.owner_id select Owners.owner_id , Owners.zip_code order by sum (Charges.charge_amount) desc 1
ERROR: table "Owners" in field expression Owners.owner_id is not in the current scope
Parsing error: from Owners join Dogs on Owners.owner_id = Dogs.owner_id where Dogs.date_arrived = (from Dogs group by Owners.owner_id select Dogs.owner_id order by sum (*) desc limit 1) select Owners.owner_id , Owners.zip_code order by Owners.zip_code desc sum 1
Example 89
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.'
NL tokens: [b'which', b'owner', b'has', b'paid', b'the', b'largest', b'amount', b'of', b'money', b'in', b'total', b'for', b'their', b'dogs', b'?', b'show', b'the', b'owner', b'id', b'and', b'zip', b'code', b'.']
NL tokens (original): [b'Which', b'owner', b'has', b'paid', b'the', b'largest', b'amount', b'of', b'money', b'in', b'total', b'for', b'their', b'dogs', b'?', b'Show', b'the', b'owner', b'id', b'and', b'zip', b'code', b'.']
['[CLS]', 'which', 'owner', 'has', 'paid', 'the', 'largest', 'amount', 'of', 'money', 'in', 'total', 'for', 'their', 'dogs', '?', 'show', 'the', 'owner', 'id', 'and', 'zip', 'code', '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1'
Target TF-P tokens: from Owners join Dogs on Owners.owner_id = Dogs.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id group by Owners.owner_id select Owners.owner_id , Owners.zip_code order by sum (Treatments.cost_of_treatment) desc limit 1

[WRONG] extra Pred 0:	No valid output! (0.000)
Error Case 27

ERROR: Join condition does not match with table: ['car_makers', {'join': 'car_names', 'on': {'eq': ['car_names.MakeId', 'car_names.Model']}}, {'join': 'car_makers', 'on': {'eq': ['car_makers.Id', 'car_makers.Id']}}]
Example 93
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?'
NL tokens: [b'which', b'distinctive', b'models', b'are', b'produced', b'by', b'maker', b'with', b'the', b'full', b'name', b'general', b'motors', b'or', b'weighing', b'more', b'than', b'350', b'##0', b'?']
NL tokens (original): [b'Which', b'distinctive', b'models', b'are', b'produced', b'by', b'maker', b'with', b'the', b'full', b'name', b'General', b'Motors', b'or', b'weighing', b'more', b'than', b'350', b'##0', b'?']
['[CLS]', 'which', 'distinctive', 'models', 'are', 'produced', 'by', 'maker', 'with', 'the', 'full', 'name', 'general', 'motors', 'or', 'weighing', 'more', 'than', '350', '##0', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused49]', 'general', 'motors', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b"SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500"
Target TF-P tokens: from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join cars_data on car_names.MakeId = cars_data.Id where car_makers.FullName = "General Motors" or cars_data.Weight > 3500 select distinct model_list.Model

[WRONG] [extra] Pred 0:	b'SELECT DISTINCT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-1.281) (length=26)
[WRONG] [extra] Pred 1:	b'SELECT DISTINCT model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-2.171) (length=26)
[WRONG] [extra] Pred 2:	b'SELECT DISTINCT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = "full General Motors" OR car_makers.FullName = 3500' (-2.437) (length=27)
[WRONG] [extra] Pred 3:	b'SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-2.441) (length=32)
[WRONG] [extra] Pred 4:	b'SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON car_makers.Id = car_makers.Id WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-2.515) (length=32)
[WRONG] [extra] Pred 5:	b'SELECT DISTINCT model_list.Model FROM model_list JOIN car_makers ON model_list.Model = car_makers.Id WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-2.561) (length=26)
[WRONG] [extra] Pred 6:	b'SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON car_makers.Id = car_names.MakeId WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-2.616) (length=32)
[WRONG] [extra] Pred 7:	b'SELECT DISTINCT model_list.Model, model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-4.238) (length=28)
[WRONG] [extra] Pred 8:	b'SELECT DISTINCT car_names.Model FROM car_makers JOIN car_names ON car_makers.Id = car_names.Model JOIN car_makers ON car_makers.Id = car_makers.Id WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-4.424) (length=32)
[WRONG] [extra] Pred 9:	b'SELECT DISTINCT car_names.Model FROM car_makers JOIN car_names ON car_makers.Id = car_names.Model JOIN car_makers ON car_makers.Id = car_names.MakeId WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-4.647) (length=32)
[WRONG] [extra] Pred 10:	b'SELECT DISTINCT car_names.Make FROM car_makers JOIN car_names ON car_makers.Id = car_names.Model JOIN car_makers ON car_makers.Id = car_makers.Id WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-4.665) (length=32)
[WRONG] [extra] Pred 11:	b'SELECT DISTINCT car_names.Model FROM car_makers JOIN car_names ON car_makers.Id = car_names.Model JOIN car_makers ON car_makers.Id = car_makers.Country WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-4.738) (length=32)
[WRONG] [extra] Pred 12:	b'SELECT DISTINCT car_names.Model FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-4.834) (length=32)
[WRONG] [extra] Pred 13:	b'SELECT DISTINCT car_names.Make FROM car_makers JOIN car_names ON car_makers.Id = car_names.Model JOIN car_makers ON car_makers.Id = car_names.MakeId WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-4.890) (length=32)
[WRONG] [extra] Pred 14:	b'SELECT DISTINCT car_names.Model FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON car_makers.Id = car_makers.Id WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-4.891) (length=32)
Error Case 28

Parsing error: from visitor where visitor.ID not in (from visit on visit.visitor_ID in (from museum where museum.Open_Year > 2010 select visit.visitor_ID) select count (*)) select count (distinct visit.visitor_ID)
string indices must be integers
Parsing error: from visitor where visitor.ID not in (from visit and museum on visit.Museum_ID > museum.Museum_ID where museum.Open_Year > 2010 select visit.visitor_ID) select count (distinct visit.visitor_ID)
Parsing error: from visitor where visitor.ID not in (from visit and museum on visit.Museum_ID > museum.Museum_ID where museum.Open_Year > 2010 select visit.visitor_ID) select count (distinct visitor.ID)
Parsing error: from visitor where visitor.ID not in (from visit and museum on visit.Museum_ID > museum.Museum_ID where museum.Open_Year > 2010 select visit.visitor_ID) select count (*)
Parsing error: from visitor where visitor.ID not in (from visit on visit.visitor_ID in (from museum where museum.Open_Year > 2010 select visit.visitor_ID) select count (*)) select count (distinct visitor.ID)
string indices must be integers
Parsing error: from visitor where visitor.ID not in (from visit on visit.visitor_ID in (from museum where museum.Open_Year > 2010 select visit.visitor_ID) select count (*)) select count (distinct visit.visitor_ID) select count (*)
string indices must be integers
string indices must be integers
Parsing error: from visitor where visitor.ID not in (from visit and museum on visit.Museum_ID > 2010 select visit.visitor_ID) select count (distinct visit.visitor_ID)
ERROR: table "visitor" in field expression visitor.ID is not in the current scope
ERROR: table "visit" in field expression visit.visitor_ID is not in the current scope
Parsing error: from visitor where visitor.ID not in (from visit and museum on visit.Museum_ID > 2010 select visit.visitor_ID) select count (*)
Example 94
museum_visit
 +-- museum (museum)
 |   +-- Museum_ID (museum id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Num_of_Staff (num of staff)
 |   +-- Open_Year (open year)
 +-- visitor (customer)
 |   +-- ID (customer id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Level_of_membership (level of membership)
 |   +-- Age (age)
 +-- visit (visit)
     +-- Museum_ID (museum id) [PRIMARY] [FOREIGN]
     +-- visitor_ID (customer id) [FOREIGN]
     +-- Num_of_Ticket (num of ticket)
     +-- Total_spent (total spent)
NL: b'Find the number of visitors who did not visit any museum opened after 2010.'
NL tokens: [b'find', b'the', b'number', b'of', b'visitors', b'who', b'did', b'not', b'visit', b'any', b'museum', b'opened', b'after', b'2010', b'.']
NL tokens (original): [b'Find', b'the', b'number', b'of', b'visitors', b'who', b'did', b'not', b'visit', b'any', b'museum', b'opened', b'after', b'2010', b'.']
['[CLS]', 'find', 'the', 'number', 'of', 'visitors', 'who', 'did', 'not', 'visit', 'any', 'museum', 'opened', 'after', '2010', '.', '[SEP]', '*', '[unused50]', 'museum', '[unused51]', 'museum', 'id', '[unused51]', 'name', '[unused51]', 'nu', '##m', 'of', 'staff', '[unused51]', 'open', 'year', '[unused50]', 'customer', '[unused51]', 'customer', 'id', '[unused51]', 'name', '[unused51]', 'level', 'of', 'membership', '[unused51]', 'age', '[unused50]', 'visit', '[unused51]', 'museum', 'id', '[unused51]', 'customer', 'id', '[unused51]', 'nu', '##m', 'of', 'ticket', '[unused51]', 'total', 'spent', '[SEP]']
Target 0: b'SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)'
Target TF-P tokens: from visitor where visitor.ID not in (from museum join visit on museum.Museum_ID = visit.Museum_ID where museum.Open_Year > 2010 select visit.visitor_ID) select count (*)

[WRONG] [extra] Pred 0:	b'SELECT COUNT(*) FROM visitor WHERE visitor.ID NOT IN (SELECT visit.visitor_ID FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year > 2010)' (-2.624) (length=28)
[WRONG] [extra] Pred 1:	b'SELECT COUNT(DISTINCT visitor.ID) FROM visitor WHERE visitor.ID NOT IN (SELECT visit.visitor_ID FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year > 2010)' (-2.857) (length=29)
Error Case 29

Example 95
student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b'Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.'
NL tokens: [b'which', b'student', b'has', b'enrolled', b'for', b'the', b'most', b'times', b'in', b'any', b'program', b'?', b'list', b'the', b'id', b',', b'first', b'name', b',', b'middle', b'name', b',', b'last', b'name', b',', b'the', b'number', b'of', b'enrollment', b'##s', b'and', b'student', b'id', b'.']
NL tokens (original): [b'Which', b'student', b'has', b'enrolled', b'for', b'the', b'most', b'times', b'in', b'any', b'program', b'?', b'List', b'the', b'id', b',', b'first', b'name', b',', b'middle', b'name', b',', b'last', b'name', b',', b'the', b'number', b'of', b'enrollment', b'##s', b'and', b'student', b'id', b'.']
['[CLS]', 'which', 'student', 'has', 'enrolled', 'for', 'the', 'most', 'times', 'in', 'any', 'program', '?', 'list', 'the', 'id', ',', 'first', 'name', ',', 'middle', 'name', ',', 'last', 'name', ',', 'the', 'number', 'of', 'enrollment', '##s', 'and', 'student', 'id', '.', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b'SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from Students join Student_Enrolment on Students.student_id = Student_Enrolment.student_id group by Students.student_id select Students.student_id , Students.first_name , Students.middle_name , Students.last_name , count (*) , Students.student_id order by count (*) desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT Students.first_name, Students.last_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-0.007) (length=28)
[WRONG] [extra] Pred 1:	b'SELECT Student_Enrolment.student_id, Students.first_name, Students.last_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-0.529) (length=30)
[WRONG] [extra] Pred 2:	b'SELECT Student_Enrolment.student_id, Students.first_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.399) (length=28)
 92%|█████████▏| 12/13 [01:36<00:13, 13.35s/it][WRONG] [extra] Pred 3:	b'SELECT Students.first_name, Students.last_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id UNION SELECT Student_Enrolment.student_id, Students.first_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.503) (length=48)
[WRONG] [extra] Pred 4:	b'SELECT Students.first_name, Students.last_name, COUNT(*), Student_Enrolment.student_id FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.680) (length=30)
[WRONG] [extra] Pred 5:	b'SELECT Students.first_name, COUNT(*), Student_Enrolment.student_id FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.696) (length=28)
[WRONG] [extra] Pred 6:	b'SELECT Student_Enrolment.student_id, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.751) (length=28)
[WRONG] [extra] Pred 7:	b'SELECT Students.first_name, Students.middle_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.997) (length=28)
[WRONG] [extra] Pred 8:	b'SELECT Student_Enrolment.student_id, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.076) (length=26)
[WRONG] [extra] Pred 9:	b'SELECT Student_Enrolment.student_id, Students.middle_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.123) (length=28)
[WRONG] [extra] Pred 10:	b'SELECT Student_Enrolment.student_id, Students.first_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.155) (length=25)
[WRONG] [extra] Pred 11:	b'SELECT Students.first_name, Students.last_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id UNION SELECT Student_Enrolment.student_id, Students.first_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id' (-2.256) (length=40)
[WRONG] [extra] Pred 12:	b'SELECT Students.first_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.397) (length=26)
[WRONG] [extra] Pred 13:	b'SELECT Students.first_name, Students.last_name, COUNT(*) + Student_Enrolment.student_id FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.534) (length=30)
[WRONG] [extra] Pred 14:	b'SELECT Students.first_name, Students.last_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) ASC LIMIT 1' (-2.670) (length=28)
[WRONG] [extra] Pred 15:	b'SELECT Students.first_name, Students.last_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) LIMIT 1' (-2.671) (length=27)
Error Case 30

Example 97
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Which African countries have a smaller population than that of any country in Asia?'
NL tokens: [b'which', b'african', b'countries', b'have', b'a', b'smaller', b'population', b'than', b'that', b'of', b'any', b'country', b'in', b'asia', b'?']
NL tokens (original): [b'Which', b'African', b'countries', b'have', b'a', b'smaller', b'population', b'than', b'that', b'of', b'any', b'country', b'in', b'Asia', b'?']
['[CLS]', 'which', 'african', 'countries', 'have', 'a', 'smaller', 'population', 'than', 'that', 'of', 'any', 'country', 'in', 'asia', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused49]', 'asia', '[unused49]', 'africa', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  "Asia")'
Target TF-P tokens: from country where country.Continent = "VALUE" and country.Population < (from country where country.Continent = "Asia" select min (country.Population)) select country.Name

[WRONG] [extra] Pred 0:	b'SELECT country.Name FROM country WHERE country.Population < (SELECT MIN(country.Population) FROM country WHERE country.Continent = "Asia")' (-0.001) (length=23)
[WRONG] [extra] Pred 1:	b'SELECT country.Name FROM country WHERE country.Population < (SELECT MAX(country.Population) FROM country WHERE country.Continent = "Asia")' (-1.145) (length=23)
[CORRE] [extra] Pred 2:	b'SELECT country.Name FROM country WHERE country.Population < (SELECT MIN(country.Population) FROM country WHERE country.Continent = "Asia") AND country.Continent = "Asia"' (-1.808) (length=29)
Error Case 31

Example 98
100%|██████████| 13/13 [01:39<00:00, 10.29s/it]
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'Who owns the youngest dog? Give me his or her last name.'
NL tokens: [b'who', b'owns', b'the', b'youngest', b'dog', b'?', b'give', b'me', b'his', b'or', b'her', b'last', b'name', b'.']
NL tokens (original): [b'Who', b'owns', b'the', b'youngest', b'dog', b'?', b'Give', b'me', b'his', b'or', b'her', b'last', b'name', b'.']
['[CLS]', 'who', 'owns', 'the', 'youngest', 'dog', '?', 'give', 'me', 'his', 'or', 'her', 'last', 'name', '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )'
Target TF-P tokens: from Owners join Dogs on Owners.owner_id = Dogs.owner_id where Dogs.age = (from Dogs select max (Dogs.age)) select Owners.last_name

[WRONG] [extra] Pred 0:	b'SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.age DESC LIMIT 1' (-0.297) (length=16)
[WRONG] [extra] Pred 1:	b'SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.date_of_birth DESC LIMIT 1' (-0.431) (length=16)
[WRONG] [extra] Pred 2:	b'SELECT Owners.last_name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id ORDER BY Dogs.age DESC LIMIT 1' (-0.554) (length=16)
[WRONG] [extra] Pred 3:	b'SELECT Owners.last_name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id ORDER BY Dogs.date_of_birth DESC LIMIT 1' (-1.021) (length=16)
[CORRE] [extra] Pred 4:	b'SELECT Owners.last_name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id WHERE Dogs.age = (SELECT MAX(Dogs.age) FROM Dogs)' (-2.144) (length=23)
Error Case 32

Model predictions saved to /home/shelunts/thesis/TabularSemantingParsing/model/spider.bridge.lstm.meta.ts.ppl-0.85.2.dn.eo.feat.bert-large-uncased.xavier-1024-400-400-8-2-0.0005-inv-sqr-0.0005-4000-6e-05-inv-sqr-3e-05-4000-0.3-0.3-0.0-0.0-1-8-0.0-0.0-res-0.2-0.0-ff-0.4-0.0/predictions.16.1.05.dev.txt
DEV set performance
Top-1 exact match: 0.680
Top-2 exact match: 0.700
Top-3 exact match: 0.720
Top-5 exact match: 0.740
Top-10 exact match: 0.790
Table error: -0.100
