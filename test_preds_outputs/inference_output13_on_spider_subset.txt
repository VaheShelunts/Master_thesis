run python3 -m src.experiments     --inference     --data_dir data/spider     --db_dir data/spider/database     --dataset_name spider     --question_split          --question_only               --denormalize_sql               --table_shuffling     --use_lstm_encoder     --use_meta_data_encoding          --sql_consistency_check          --use_picklist     --anchor_text_match_threshold 0.85               --top_k_picklist_matches 2     --process_sql_in_execution_order               --num_random_tables_added 0                         --save_best_model_only     --schema_augmentation_factor 1          --data_augmentation_factor 1          --vocab_min_freq 0     --text_vocab_min_freq 0     --program_vocab_min_freq 0     --num_values_per_field 0     --max_in_seq_len 512     --max_out_seq_len 60     --model bridge     --num_steps 100000     --curriculum_interval 0     --num_peek_steps 1000     --num_accumulation_steps 2     --train_batch_size 8     --dev_batch_size 8     --encoder_input_dim 1024     --encoder_hidden_dim 400     --decoder_input_dim 400     --num_rnn_layers 1     --num_const_attn_layers 0     --emb_dropout_rate 0.3     --pretrained_lm_dropout_rate 0     --rnn_layer_dropout_rate 0     --rnn_weight_dropout_rate 0     --cross_attn_dropout_rate 0     --cross_attn_num_heads 8     --res_input_dropout_rate 0.2     --res_layer_dropout_rate 0     --ff_input_dropout_rate 0.4     --ff_hidden_dropout_rate 0.0     --pretrained_transformer bert-large-uncased          --bert_finetune_rate 0.00006     --learning_rate 0.0005     --learning_rate_scheduler inverse-square     --trans_learning_rate_scheduler inverse-square     --warmup_init_lr 0.0005     --warmup_init_ft_lr 0.00003     --num_warmup_steps 4000     --grad_norm 0.3     --decoding_algorithm beam-search     --beam_size 16     --bs_alpha 1.05     --gpu 0     --checkpoint_path /home/shelunts/thesis/TabularSemantingParsing/model/spider.bridge.lstm.meta.ts.ppl-0.85.2.dn.eo.feat.bert-large-uncased.xavier-1024-400-400-8-2-0.0005-inv-sqr-0.0005-4000-6e-05-inv-sqr-3e-05-4000-0.3-0.3-0.0-0.0-1-8-0.0-0.0-res-0.2-0.0-ff-0.4-0.0.220119-195756.tg05/model-best.16.tar
2022-01-24 13:33:18.626404: I tensorflow/stream_executor/platform/default/dso_loader.cc:53] Successfully opened dynamic library libcudart.so.11.0
  0%|          | 0/13 [00:00<?, ?it/s]/usr/lib/python3/dist-packages/torch/_tensor.py:575: UserWarning: floor_divide is deprecated, and will be removed in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values.
To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor'). (Triggered internally at  ../aten/src/ATen/native/BinaryOps.cpp:461.)
  return torch.floor_divide(self, other)
  8%|▊         | 1/13 [00:01<00:18,  1.52s/it]Model directory exists: /home/shelunts/thesis/TabularSemantingParsing/model/spider.bridge.lstm.meta.ts.ppl-0.85.2.dn.eo.feat.bert-large-uncased.xavier-1024-400-400-8-2-0.0005-inv-sqr-0.0005-4000-6e-05-inv-sqr-3e-05-4000-0.3-0.3-0.0-0.0-1-8-0.0-0.0-res-0.2-0.0-ff-0.4-0.0
Visualization directory exists: /home/shelunts/thesis/TabularSemantingParsing/viz/spider.bridge.lstm.meta.ts.ppl-0.85.2.dn.eo.feat.bert-large-uncased.xavier-1024-400-400-8-2-0.0005-inv-sqr-0.0005-4000-6e-05-inv-sqr-3e-05-4000-0.3-0.3-0.0-0.0-1-8-0.0-0.0-res-0.2-0.0-ff-0.4-0.0
* text vocab size = 30522
* program vocab size = 99

pretrained_transformer = bert-large-uncased
fix_pretrained_transformer_parameters = False

bridge module created
loading preprocessed data: data/spider/spider.bridge.question-split.ppl-0.85.2.dn.eo.bert.pkl
100 dev examples loaded
=> loading checkpoint '/home/shelunts/thesis/TabularSemantingParsing/model/spider.bridge.lstm.meta.ts.ppl-0.85.2.dn.eo.feat.bert-large-uncased.xavier-1024-400-400-8-2-0.0005-inv-sqr-0.0005-4000-6e-05-inv-sqr-3e-05-4000-0.3-0.3-0.0-0.0-1-8-0.0-0.0-res-0.2-0.0-ff-0.4-0.0.220119-195756.tg05/model-best.16.tar'
0 pre-computed prediction order reconstruction cached
Parsing error: from Charges where Charges.charge_type = (from Charges group by Charges.charge_type select Charges.charge_type order by max (Charges.charge_amount) desc limit 1) select Charges.charge_amount union from Charges select Charges.charge_amount desc limit 1
ERROR: Join condition does not match with table: ['Charges', {'join': 'Sizes', 'on': {'eq': ['Charges.charge_type', 'Charges.charge_type']}}]
Parsing error: from Charges on Charges.charge_type = (from Charges select Charges.charge_type order by Charges.charge_amount desc limit 1) select Charges.charge_amount
Example 11
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'How much does the most expensive charge type costs?'
NL tokens: [b'how', b'much', b'does', b'the', b'most', b'expensive', b'charge', b'type', b'costs', b'?']
NL tokens (original): [b'How', b'much', b'does', b'the', b'most', b'expensive', b'charge', b'type', b'costs', b'?']
['[CLS]', 'how', 'much', 'does', 'the', 'most', 'expensive', 'charge', 'type', 'costs', '?', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT max(charge_amount) FROM Charges'
Target TF-P tokens: from Charges select max (Charges.charge_amount)

[WRONG] [easy] Pred 0:	b'SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_amount DESC LIMIT 1' (-0.010) (length=10)
[WRONG] [easy] Pred 1:	b'SELECT Charges.charge_amount FROM Charges GROUP BY Charges.charge_type ORDER BY MAX(Charges.charge_amount) DESC LIMIT 1' (-1.148) (length=15)
[WRONG] [easy] Pred 2:	b'SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = (SELECT Charges.charge_type FROM Charges ORDER BY Charges.charge_amount DESC LIMIT 1)' (-1.566) (length=19)
[WRONG] [easy] Pred 3:	b'SELECT Charges.charge_type FROM Charges GROUP BY Charges.charge_type ORDER BY SUM(Charges.charge_amount) DESC LIMIT 1' (-1.604) (length=15)
[WRONG] [easy] Pred 4:	b'SELECT Charges.charge_amount FROM Charges GROUP BY Charges.charge_type ORDER BY SUM(Charges.charge_amount) DESC LIMIT 1' (-1.695) (length=15)
[WRONG] [easy] Pred 5:	b'SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = (SELECT Charges.charge_type FROM Charges GROUP BY Charges.charge_type ORDER BY MAX(Charges.charge_amount) DESC LIMIT 1)' (-1.964) (length=24)
[WRONG] [easy] Pred 6:	b'SELECT Charges.charge_type FROM Charges GROUP BY Charges.charge_type ORDER BY MAX(Charges.charge_amount) DESC LIMIT 1' (-1.972) (length=15)
[WRONG] [easy] Pred 7:	b'SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = (SELECT Charges.charge_type FROM Charges GROUP BY Charges.charge_type ORDER BY MAX(Charges.charge_amount) DESC LIMIT 1) ORDER BY Charges.charge_amount DESC LIMIT 1' (-2.502) (length=29)
[WRONG] [easy] Pred 8:	b'SELECT Charges.charge_type FROM Charges ORDER BY Charges.charge_amount DESC LIMIT 1' (-2.712) (length=10)
[WRONG] [easy] Pred 9:	b'SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = (SELECT Charges.charge_type FROM Charges GROUP BY Charges.charge_type ORDER BY MAX(Charges.charge_amount) DESC LIMIT 1) UNION SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_amount DESC LIMIT 1' (-2.823) (length=34)
[WRONG] [easy] Pred 10:	b'SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = (SELECT Charges.charge_type FROM Charges ORDER BY Charges.charge_amount DESC LIMIT 1) ORDER BY Charges.charge_amount DESC LIMIT 1' (-2.886) (length=24)
[WRONG] [easy] Pred 11:	b'SELECT Charges.charge_type FROM Charges WHERE Charges.charge_type = (SELECT Charges.charge_type FROM Charges GROUP BY Charges.charge_type ORDER BY MAX(Charges.charge_amount) DESC LIMIT 1)' (-3.081) (length=24)
[WRONG] [easy] Pred 12:	b'SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = (SELECT Charges.charge_type FROM Charges ORDER BY Charges.charge_type DESC LIMIT 1)' (-3.145) (length=19)
Error Case 1

Example 13
student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b'Whose permanent address is different from his or her current address? List his or her first name.'
NL tokens: [b'whose', b'permanent', b'address', b'is', b'different', b'from', b'his', b'or', b'her', b'current', b'address', b'?', b'list', b'his', b'or', b'her', b'first', b'name', b'.']
NL tokens (original): [b'Whose', b'permanent', b'address', b'is', b'different', b'from', b'his', b'or', b'her', b'current', b'address', b'?', b'List', b'his', b'or', b'her', b'first', b'name', b'.']
['[CLS]', 'whose', 'permanent', 'address', 'is', 'different', 'from', 'his', 'or', 'her', 'current', 'address', '?', 'list', 'his', 'or', 'her', 'first', 'name', '.', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b'SELECT first_name FROM Students WHERE current_address_id != permanent_address_id'
Target TF-P tokens: from Students where Students.current_address_id != Students.permanent_address_id select Students.first_name

[WRONG] [easy] Pred 0:	b'SELECT DISTINCT Students.first_name FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id' (-0.000) (length=12)
[WRONG] [easy] Pred 1:	b'SELECT Students.first_name FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id GROUP BY Students.permanent_address_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.869) (length=21)
[WRONG] [easy] Pred 2:	b'SELECT DISTINCT Students.first_name FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id WHERE Addresses.line_1 = "no"' (-2.943) (length=18)
[WRONG] [easy] Pred 3:	b'SELECT DISTINCT Students.first_name FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id WHERE Addresses.line_1 = "VALUE"' (-3.232) (length=18)
[WRONG] [easy] Pred 4:	b'SELECT DISTINCT Students.first_name FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id WHERE Addresses.line_2 = "no"' (-3.342) (length=18)
[WRONG] [easy] Pred 5:	b'SELECT DISTINCT Students.first_name FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id' (-3.356) (length=12)
 15%|█▌        | 2/13 [00:07<00:31,  2.82s/it][WRONG] [easy] Pred 6:	b'SELECT DISTINCT Students.first_name FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id WHERE Addresses.city = "no"' (-3.380) (length=18)
[WRONG] [easy] Pred 7:	b'SELECT Students.first_name, COUNT(*) FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id GROUP BY Students.permanent_address_id' (-3.465) (length=18)
[WRONG] [easy] Pred 8:	b'SELECT DISTINCT Students.first_name FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id WHERE Addresses.other_address_details = "no"' (-3.471) (length=18)
[WRONG] [easy] Pred 9:	b'SELECT DISTINCT Students.first_name FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id WHERE Addresses.line_3 = "no"' (-3.489) (length=18)
[WRONG] [easy] Pred 10:	b'SELECT DISTINCT Students.first_name FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id WHERE Addresses.city = "VALUE"' (-3.527) (length=18)
[WRONG] [easy] Pred 11:	b'SELECT DISTINCT Students.first_name FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id WHERE Addresses.line_2 = "VALUE"' (-3.580) (length=18)
[WRONG] [easy] Pred 12:	b'SELECT Students.first_name FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id GROUP BY Students.permanent_address_id ORDER BY DISTINCT Students.first_name' (-3.615) (length=16)
[WRONG] [easy] Pred 13:	b'SELECT DISTINCT Students.first_name FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id WHERE Students.current_address_id = 0' (-3.736) (length=16)
[WRONG] [easy] Pred 14:	b'SELECT Students.first_name FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id GROUP BY Students.permanent_address_id ORDER BY COUNT(*) DESC' (-3.740) (length=19)
[WRONG] [easy] Pred 15:	b'SELECT DISTINCT Students.first_name FROM Students' (-3.827) (length=6)
Error Case 2

ERROR: Join condition does not match with table: ['Cartoon', {'join': 'TV_series', 'on': {'eq': ['Cartoon.Channel', 'Cartoon.id']}}, {'join': 'TV_Channel', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}]
ERROR: Join condition does not match with table: ['Cartoon', {'join': 'TV_series', 'on': {'eq': ['Cartoon.Channel', 'Cartoon.id']}}, {'join': 'TV_Channel', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}]
ERROR: Join condition does not match with table: ['Cartoon', {'join': 'TV_series', 'on': {'eq': ['Cartoon.Channel', 'Cartoon.id']}}, {'join': 'TV_Channel', 'on': {'eq': ['Cartoon.Channel', 'TV_Channel.id']}}]
ERROR: Join condition does not match with table: ['Cartoon', {'join': 'TV_series', 'on': {'eq': ['Cartoon.Channel', 'Cartoon.id']}}, {'join': 'TV_Channel', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}]
ERROR: Join condition does not match with table: ['Cartoon', {'join': 'TV_series', 'on': {'eq': ['Cartoon.Channel', 'Cartoon.id']}}, {'join': 'TV_Channel', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}]
ERROR: Join condition does not match with table: ['Cartoon', {'join': 'TV_series', 'on': {'eq': ['Cartoon.Channel', 'Cartoon.id']}}, {'join': 'TV_Channel', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}]
ERROR: Join condition does not match with table: ['Cartoon', {'join': 'TV_series', 'on': {'eq': ['Cartoon.Channel', 'Cartoon.id']}}, {'join': 'TV_Channel', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}]
Example 20
tvshow
 +-- TV_Channel (tv channel)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- series_name (series name)
 |   +-- Country (country)
 |   +-- Language (language)
 |   +-- Content (content)
 |   +-- Pixel_aspect_ratio_PAR (pixel aspect ratio par)
 |   +-- Hight_definition_TV (hight definition tv)
 |   +-- Pay_per_view_PPV (pay per view ppv)
 |   +-- Package_Option (package option)
 +-- TV_series (tv series)
 |   +-- id (id) [PRIMARY]
 |   +-- Episode (episode)
 |   +-- Air_Date (air date)
 |   +-- Rating (rating)
 |   +-- Share (share)
 |   +-- 18_49_Rating_Share (18 49 rating share)
 |   +-- Viewers_m (viewers m)
 |   +-- Weekly_Rank (weekly rank)
 |   +-- Channel (channel) [FOREIGN]
 +-- Cartoon (cartoon)
     +-- id (id) [PRIMARY]
     +-- Title (title)
     +-- Directed_by (directed by)
     +-- Written_by (written by)
     +-- Original_air_date (original air date)
     +-- Production_code (production code)
     +-- Channel (channel) [FOREIGN]
NL: b'What are the countries that have cartoons on TV that were written by Todd Casey?'
NL tokens: [b'what', b'are', b'the', b'countries', b'that', b'have', b'cartoons', b'on', b'tv', b'that', b'were', b'written', b'by', b'todd', b'casey', b'?']
NL tokens (original): [b'What', b'are', b'the', b'countries', b'that', b'have', b'cartoons', b'on', b'TV', b'that', b'were', b'written', b'by', b'Todd', b'Casey', b'?']
['[CLS]', 'what', 'are', 'the', 'countries', 'that', 'have', 'cartoons', 'on', 'tv', 'that', 'were', 'written', 'by', 'todd', 'casey', '?', '[SEP]', '*', '[unused50]', 'tv', 'channel', '[unused51]', 'id', '[unused51]', 'series', 'name', '[unused51]', 'country', '[unused51]', 'language', '[unused51]', 'content', '[unused51]', 'pixel', 'aspect', 'ratio', 'par', '[unused51]', 'high', '##t', 'definition', 'tv', '[unused51]', 'pay', 'per', 'view', 'pp', '##v', '[unused51]', 'package', 'option', '[unused50]', 'tv', 'series', '[unused51]', 'id', '[unused51]', 'episode', '[unused51]', 'air', 'date', '[unused51]', 'rating', '[unused51]', 'share', '[unused51]', '18', '49', 'rating', 'share', '[unused51]', 'viewers', 'm', '[unused51]', 'weekly', 'rank', '[unused51]', 'channel', '[unused50]', 'cartoon', '[unused51]', 'id', '[unused51]', 'title', '[unused51]', 'directed', 'by', '[unused51]', 'written', 'by', '[unused49]', 'todd', 'casey', '[unused51]', 'original', 'air', 'date', '[unused51]', 'production', 'code', '[unused51]', 'channel', '[SEP]']
Target 0: b"SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
Target TF-P tokens: from TV_Channel join Cartoon on TV_Channel.id = Cartoon.Channel where Cartoon.Written_by = "Todd Casey" select TV_Channel.Country

[WRONG] [medium] Pred 0:	b'SELECT TV_Channel.Country FROM Cartoon JOIN TV_series ON TV_series.Channel = Cartoon.id JOIN TV_Channel ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = "Todd Casey" AND Cartoon.Written_by = "TV"' (-1.472) (length=30)
[WRONG] [medium] Pred 1:	b'SELECT TV_Channel.Country FROM Cartoon JOIN TV_series ON TV_series.Channel = Cartoon.id JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = "Todd Casey" AND Cartoon.Written_by = "TV"' (-1.494) (length=30)
[WRONG] [medium] Pred 2:	b'SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = "Todd Casey" AND Cartoon.Written_by = "TV"' (-1.667) (length=24)
[WRONG] [medium] Pred 3:	b'SELECT TV_Channel.Country FROM Cartoon JOIN TV_series ON TV_series.Channel = Cartoon.id JOIN TV_Channel ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = "Todd Casey" AND TV_Channel.Content = "TV"' (-1.737) (length=30)
[WRONG] [medium] Pred 4:	b'SELECT TV_Channel.Country FROM Cartoon JOIN TV_series ON TV_series.Channel = Cartoon.id JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = "Todd Casey" AND TV_Channel.Content = "TV"' (-1.741) (length=30)
[WRONG] [medium] Pred 5:	b'SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = "Todd Casey" AND TV_Channel.Content = "TV"' (-1.832) (length=24)
[WRONG] [medium] Pred 6:	b'SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = "Todd Casey" AND Cartoon.Written_by = "TV"' (-2.086) (length=24)
[WRONG] [medium] Pred 7:	b'SELECT TV_Channel.Country FROM Cartoon JOIN TV_series ON TV_series.Channel = Cartoon.id JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = "Todd Casey"' (-2.173) (length=24)
 23%|██▎       | 3/13 [00:13<00:37,  3.79s/it][WRONG] [medium] Pred 8:	b'SELECT DISTINCT TV_Channel.Country FROM Cartoon JOIN TV_series ON TV_series.Channel = Cartoon.id JOIN TV_Channel ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = "Todd Casey" AND Cartoon.Written_by = "TV"' (-2.863) (length=31)
Error Case 3

ERROR: table "country" in field expression country.IndepYear is not in the current scope
ERROR: table "country" in field expression country.IndepYear is not in the current scope
ERROR: table "country" in field expression country.IndepYear is not in the current scope
ERROR: table "country" in field expression country.IndepYear is not in the current scope
ERROR: table "country" in field expression country.IndepYear is not in the current scope
ERROR: table "country" in field expression country.IndepYear is not in the current scope
ERROR: table "country" in field expression country.IndepYear is not in the current scope
ERROR: table "country" in field expression country.IndepYear is not in the current scope
ERROR: table "country" in field expression country.IndepYear is not in the current scope
Parsing error: from country join countrylanguage on country.Code = countrylanguage.CountryCode where country.Name like "(country.IndepYear) and country.Name"
ERROR: table "country" in field expression country.IndepYear is not in the current scope
Example 26
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'For the countries founded before 1930, what is the total number of distinct official languages?'
NL tokens: [b'for', b'the', b'countries', b'founded', b'before', b'1930', b',', b'what', b'is', b'the', b'total', b'number', b'of', b'distinct', b'official', b'languages', b'?']
NL tokens (original): [b'For', b'the', b'countries', b'founded', b'before', b'1930', b',', b'what', b'is', b'the', b'total', b'number', b'of', b'distinct', b'official', b'languages', b'?']
['[CLS]', 'for', 'the', 'countries', 'founded', 'before', '1930', ',', 'what', 'is', 'the', 'total', 'number', 'of', 'distinct', 'official', 'languages', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"'
Target TF-P tokens: from country join countrylanguage on country.Code = countrylanguage.CountryCode where country.IndepYear < 1930 and countrylanguage.IsOfficial = "t" select count (distinct countrylanguage.Language)

[WRONG] [medium] Pred 0:	b'SELECT COUNT(DISTINCT countrylanguage.Language), country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 1930 GROUP BY country.Name' (-1.509) (length=23)
[WRONG] [medium] Pred 1:	b'SELECT COUNT(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name IN (SELECT country.Name FROM country WHERE country.IndepYear < 1930)' (-1.624) (length=28)
[WRONG] [medium] Pred 2:	b'SELECT COUNT(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name LIKE "(1930 %"' (-1.860) (length=23)
[WRONG] [medium] Pred 3:	b'SELECT COUNT(DISTINCT country.Name) FROM country WHERE country.IndepYear < 1930' (-2.237) (length=13)
[WRONG] [medium] Pred 4:	b'SELECT COUNT(DISTINCT country.Name) FROM country WHERE country.Name IN (SELECT country.Name FROM country WHERE country.IndepYear < 1930)' (-2.321) (length=22)
Error Case 4

'on'
'on'
'on'
'on'
'on'
'on'
'on'
'on'
'on'
Parsing error: from performance join orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID group by conductor.Name having count (*) > 1 select conductor.Name intersect from performance join conductor on orchestra.Conductor_ID = conductor.Conductor_ID group by conductor.Name having count (*) having limit 1) select conductor.Name
'on'
Parsing error: from performance join orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID group by conductor.Name having count (*) > 1 select conductor.Name intersect from performance join conductor on orchestra.Conductor_ID = conductor.Conductor_ID group by conductor.Name having count (*) having 1
'on'
Parsing error: from performance join orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID group by conductor.Name having count (*) > 1 select conductor.Name intersect from performance join conductor on orchestra.Conductor_ID = conductor.Conductor_ID group by conductor.Name having count (*) having 1 select conductor.Name
Example 28
orchestra
 +-- conductor (conductor)
 |   +-- Conductor_ID (conductor id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Age (age)
 |   +-- Nationality (nationality)
 |   +-- Year_of_Work (year of work)
 +-- orchestra (orchestra)
 |   +-- Orchestra_ID (orchestra id) [PRIMARY] [FOREIGN]
 |   +-- Orchestra (orchestra)
 |   +-- Conductor_ID (conductor id) [FOREIGN]
 |   +-- Record_Company (record company)
 |   +-- Year_of_Founded (year of founded)
 |   +-- Major_Record_Format (major record format)
 +-- performance (performance)
 |   +-- Performance_ID (performance id) [PRIMARY] [FOREIGN]
 |   +-- Orchestra_ID (orchestra id) [FOREIGN]
 |   +-- Type (type)
 |   +-- Date (date)
 |   +-- Official_ratings_(millions) (official ratings (millions))
 |   +-- Weekly_rank (weekly rank)
 |   +-- Share (share)
 +-- show (show)
     +-- Show_ID (show id)
     +-- Performance_ID (performance id) [FOREIGN]
     +-- If_first_show (if first show)
     +-- Result (result)
     +-- Attendance (attendance)
NL: b'What are the names of conductors who have conducted at more than one orchestra?'
NL tokens: [b'what', b'are', b'the', b'names', b'of', b'conductors', b'who', b'have', b'conducted', b'at', b'more', b'than', b'one', b'orchestra', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'of', b'conductors', b'who', b'have', b'conducted', b'at', b'more', b'than', b'one', b'orchestra', b'?']
 31%|███       | 4/13 [00:23<00:50,  5.64s/it]['[CLS]', 'what', 'are', 'the', 'names', 'of', 'conductors', 'who', 'have', 'conducted', 'at', 'more', 'than', 'one', 'orchestra', '?', '[SEP]', '*', '[unused50]', 'conductor', '[unused51]', 'conductor', 'id', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'nationality', '[unused51]', 'year', 'of', 'work', '[unused50]', 'orchestra', '[unused51]', 'orchestra', 'id', '[unused51]', 'orchestra', '[unused51]', 'conductor', 'id', '[unused51]', 'record', 'company', '[unused51]', 'year', 'of', 'founded', '[unused51]', 'major', 'record', 'format', '[unused50]', 'performance', '[unused51]', 'performance', 'id', '[unused51]', 'orchestra', 'id', '[unused51]', 'type', '[unused51]', 'date', '[unused51]', 'official', 'ratings', '(', 'millions', ')', '[unused51]', 'weekly', 'rank', '[unused51]', 'share', '[unused50]', 'show', '[unused51]', 'show', 'id', '[unused51]', 'performance', 'id', '[unused51]', 'if', 'first', 'show', '[unused51]', 'result', '[unused51]', 'attendance', '[SEP]']
Target 0: b'SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1'
Target TF-P tokens: from conductor join orchestra on conductor.Conductor_ID = orchestra.Conductor_ID group by orchestra.Conductor_ID having count (*) > 1 select conductor.Name

[WRONG] [medium] Pred 0:	b'SELECT conductor.Name FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Name HAVING COUNT(*) > 1' (-3.685) (length=26)
[WRONG] [medium] Pred 1:	b'SELECT conductor.Name FROM performance JOIN orchestra ON orchestra.Orchestra = performance.Performance_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Name HAVING COUNT(*) > 1' (-4.370) (length=26)
Error Case 5

ERROR: table "course" in field expression course.Course is not in the current scope
ERROR: table "course_arrange" in field expression course_arrange.Teacher_ID is not in the current scope
ERROR: table "teacher" in field expression teacher.Name is not in the current scope
ERROR: table "course" in field expression course.Course is not in the current scope
ERROR: table "course_arrange" in field expression course_arrange.Teacher_ID is not in the current scope
Parsing error: from teacher join course_arrange on teacher.Teacher_ID = course_arrange.Teacher_ID where teacher.Age = "and course on teacher.Teacher_ID = course_arrange.Teacher_ID select teacher.Name , course.Course"
Parsing error: from teacher join course_arrange on teacher.Teacher_ID = course_arrange.Teacher_ID where teacher.Age = "and course on course_arrange.Course_ID = course.Course_ID select teacher.Name , course.Course"
Parsing error: from teacher join course_arrange on teacher.Teacher_ID = course_arrange.Teacher_ID where teacher.Age = "and course on teacher.Teacher_ID = course.Course select teacher.Name , course.Course"
Example 34
employee_hire_evaluation
 +-- employee (employee)
 |   +-- Employee_ID (employee id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Age (age)
 |   +-- City (city)
 +-- shop (shop)
 |   +-- Shop_ID (shop id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Location (location)
 |   +-- District (district)
 |   +-- Number_products (number products)
 |   +-- Manager_name (manager name)
 +-- hiring (hiring)
 |   +-- Employee_ID (employee id) [PRIMARY] [FOREIGN]
 |   +-- Shop_ID (shop id) [FOREIGN]
 |   +-- Start_from (start from)
 |   +-- Is_full_time (is full time)
 +-- evaluation (evaluation)
     +-- Employee_ID (employee id) [PRIMARY] [FOREIGN]
     +-- Year_awarded (year awarded)
     +-- Bonus (bonus)
NL: b'For each shop, return the number of employees working there and the name of the shop.'
NL tokens: [b'for', b'each', b'shop', b',', b'return', b'the', b'number', b'of', b'employees', b'working', b'there', b'and', b'the', b'name', b'of', b'the', b'shop', b'.']
NL tokens (original): [b'For', b'each', b'shop', b',', b'return', b'the', b'number', b'of', b'employees', b'working', b'there', b'and', b'the', b'name', b'of', b'the', b'shop', b'.']
['[CLS]', 'for', 'each', 'shop', ',', 'return', 'the', 'number', 'of', 'employees', 'working', 'there', 'and', 'the', 'name', 'of', 'the', 'shop', '.', '[SEP]', '*', '[unused50]', 'employee', '[unused51]', 'employee', 'id', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'city', '[unused50]', 'shop', '[unused51]', 'shop', 'id', '[unused51]', 'name', '[unused51]', 'location', '[unused51]', 'district', '[unused51]', 'number', 'products', '[unused51]', 'manager', 'name', '[unused50]', 'hiring', '[unused51]', 'shop', 'id', '[unused51]', 'employee', 'id', '[unused51]', 'start', 'from', '[unused51]', 'is', 'full', 'time', '[unused50]', 'evaluation', '[unused51]', 'employee', 'id', '[unused51]', 'year', 'awarded', '[unused51]', 'bonus', '[SEP]']
Target 0: b'SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name'
Target TF-P tokens: from hiring join shop on hiring.Shop_ID = shop.Shop_ID group by shop.Name select count (*) , shop.Name

[WRONG] [medium] Pred 0:	b'SELECT COUNT(*), shop.Name FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY hiring.Shop_ID' (-0.005) (length=18)
[WRONG] [medium] Pred 1:	b'SELECT hiring.Is_full_time, COUNT(*) FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY hiring.Shop_ID' (-1.040) (length=18)
[WRONG] [medium] Pred 2:	b'SELECT COUNT(*), shop.Name FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY shop.Shop_ID' (-1.443) (length=18)
[WRONG] [medium] Pred 3:	b'SELECT shop.Name, COUNT(*) FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY hiring.Shop_ID' (-1.930) (length=18)
[WRONG] [medium] Pred 4:	b'SELECT shop.Manager_name, COUNT(*) FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY hiring.Shop_ID' (-2.409) (length=18)
[CORRE] [medium] Pred 5:	b'SELECT COUNT(*), shop.Name FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY shop.Name' (-2.688) (length=18)
Error Case 6

Example 36
cre_Doc_Template_Mgt
 +-- Ref_Template_Types (reference template types)
 |   +-- Template_Type_Code (template type code) [PRIMARY] [FOREIGN]
 |   +-- Template_Type_Description (template type description)
 +-- Templates (templates)
 |   +-- Template_ID (template id) [PRIMARY] [FOREIGN]
 |   +-- Version_Number (version number)
 |   +-- Template_Type_Code (template type code) [FOREIGN]
 |   +-- Date_Effective_From (date effective from)
 |   +-- Date_Effective_To (date effective to)
 |   +-- Template_Details (template details)
 +-- Documents (documents)
 |   +-- Document_ID (document id) [PRIMARY] [FOREIGN]
 |   +-- Template_ID (template id) [FOREIGN]
 |   +-- Document_Name (document name)
 |   +-- Document_Description (document description)
 |   +-- Other_Details (other details)
 +-- Paragraphs (paragraphs)
     +-- Paragraph_ID (paragraph id) [PRIMARY]
     +-- Document_ID (document id) [FOREIGN]
     +-- Paragraph_Text (paragraph text)
     +-- Other_Details (other details)
NL: b'Show all template type codes and the number of documents using each type.'
NL tokens: [b'show', b'all', b'template', b'type', b'codes', b'and', b'the', b'number', b'of', b'documents', b'using', b'each', b'type', b'.']
NL tokens (original): [b'Show', b'all', b'template', b'type', b'codes', b'and', b'the', b'number', b'of', b'documents', b'using', b'each', b'type', b'.']
 38%|███▊      | 5/13 [00:26<00:40,  5.01s/it]['[CLS]', 'show', 'all', 'template', 'type', 'codes', 'and', 'the', 'number', 'of', 'documents', 'using', 'each', 'type', '.', '[SEP]', '*', '[unused50]', 'reference', 'template', 'types', '[unused51]', 'template', 'type', 'code', '[unused51]', 'template', 'type', 'description', '[unused50]', 'template', '##s', '[unused51]', 'template', 'id', '[unused51]', 'version', 'number', '[unused51]', 'template', 'type', 'code', '[unused51]', 'date', 'effective', 'from', '[unused51]', 'date', 'effective', 'to', '[unused51]', 'template', 'details', '[unused50]', 'documents', '[unused51]', 'document', 'id', '[unused51]', 'template', 'id', '[unused51]', 'document', 'name', '[unused51]', 'document', 'description', '[unused51]', 'other', 'details', '[unused50]', 'paragraph', '##s', '[unused51]', 'paragraph', 'id', '[unused51]', 'document', 'id', '[unused51]', 'paragraph', 'text', '[unused51]', 'other', 'details', '[SEP]']
Target 0: b'SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code'
Target TF-P tokens: from Templates join Documents on Templates.Template_ID = Documents.Template_ID group by Templates.Template_Type_Code select Templates.Template_Type_Code , count (*)

[WRONG] [medium] Pred 0:	b'SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code' (-0.000) (length=12)
[WRONG] [medium] Pred 1:	b'SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code HAVING COUNT(*) > 1' (-3.579) (length=19)
[WRONG] [medium] Pred 2:	b'SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code' (-3.696) (length=17)
[CORRE] [medium] Pred 3:	b'SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_Type_Code' (-4.355) (length=18)
Error Case 7

Parsing error: from Pets join Has_Pet on Pets.PetID = Has_Pet.PetID join Student on Has_Pet.StuID = Student.StuID where Student.Age > 20 select count (*) select count (*)
string indices must be integers
string indices must be integers
Parsing error: from Pets in join Has_Pet on Pets.PetID = Has_Pet.PetID join Student on Has_Pet.StuID = Student.StuID where Student.Age > 20 select count (*)
Parsing error: from Pets join Has_Pet on Pets.PetID = Has_Pet.PetID 5 join Student on Has_Pet.StuID = Student.StuID where Student.Age > 20 select count (*)
string indices must be integers
Example 41
pets_1
 +-- Student (student)
 |   +-- StuID (student id) [PRIMARY] [FOREIGN]
 |   +-- LName (last name)
 |   +-- Fname (first name)
 |   +-- Age (age)
 |   +-- Sex (sex)
 |   +-- Major (major)
 |   +-- Advisor (advisor)
 |   +-- city_code (city code)
 +-- Has_Pet (has pet)
 |   +-- StuID (student id) [FOREIGN]
 |   +-- PetID (pet id) [FOREIGN]
 +-- Pets (pets)
     +-- PetID (pet id) [PRIMARY] [FOREIGN]
     +-- PetType (pet type)
     +-- pet_age (pet age)
     +-- weight (weight)
NL: b'Find number of pets owned by students who are older than 20.'
NL tokens: [b'find', b'number', b'of', b'pets', b'owned', b'by', b'students', b'who', b'are', b'older', b'than', b'20', b'.']
NL tokens (original): [b'Find', b'number', b'of', b'pets', b'owned', b'by', b'students', b'who', b'are', b'older', b'than', b'20', b'.']
['[CLS]', 'find', 'number', 'of', 'pets', 'owned', 'by', 'students', 'who', 'are', 'older', 'than', '20', '.', '[SEP]', '*', '[unused50]', 'student', '[unused51]', 'student', 'id', '[unused51]', 'last', 'name', '[unused51]', 'first', 'name', '[unused51]', 'age', '[unused51]', 'sex', '[unused51]', 'major', '[unused51]', 'advisor', '[unused51]', 'city', 'code', '[unused50]', 'has', 'pet', '[unused51]', 'student', 'id', '[unused51]', 'pet', 'id', '[unused50]', 'pets', '[unused51]', 'pet', 'id', '[unused51]', 'pet', 'type', '[unused51]', 'pet', 'age', '[unused51]', 'weight', '[SEP]']
Target 0: b'SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20'
Target TF-P tokens: from Student join Has_Pet on Student.StuID = Has_Pet.StuID where Student.Age > 20 select count (*)

[WRONG] [medium] Pred 0:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20' (-0.000) (length=24)
[WRONG] [medium] Pred 1:	b'SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20' (-2.231) (length=24)
[WRONG] [medium] Pred 2:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.pet_age > 20' (-2.352) (length=24)
[WRONG] [medium] Pred 3:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20' (-2.614) (length=30)
[WRONG] [medium] Pred 4:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20 OR Student.Age > 20' (-2.641) (length=28)
[WRONG] [medium] Pred 5:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20 AND Student.Age > 20' (-2.964) (length=28)
[WRONG] [medium] Pred 6:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID WHERE Has_Pet.StuID IN (SELECT Student.StuID FROM Student WHERE Student.Age > 20)' (-2.982) (length=27)
[WRONG] [medium] Pred 7:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20 AND Pets.pet_age > 20' (-2.990) (length=28)
[WRONG] [medium] Pred 8:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20 GROUP BY Pets.PetID' (-3.130) (length=26)
[WRONG] [medium] Pred 9:	b'SELECT COUNT(*), Pets.PetID FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20' (-3.136) (length=26)
Error Case 8

ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['Cartoon', {'join': 'TV_series', 'on': {'eq': ['Cartoon.id', 'Cartoon.Channel']}}, {'join': 'TV_Channel', 'on': {'eq': ['TV_series.Channel', 'TV_Channel.id']}}]
ERROR: Join condition does not match with table: ['Cartoon', {'join': 'TV_series', 'on': {'eq': ['Cartoon.id', 'Cartoon.Channel']}}, {'join': 'TV_Channel', 'on': {'eq': ['Cartoon.Channel', 'TV_Channel.id']}}]
ERROR: invalid JOIN field "Cartoon": ['Cartoon', {'join': 'TV_series', 'on': {'eq': ['TV_series.Channel', 'Cartoon']}}, {'join': 'TV_Channel', 'on': {'eq': ['TV_series.Channel', 'TV_Channel.id']}}]
ERROR: invalid JOIN field "Cartoon": ['Cartoon', {'join': 'TV_series', 'on': {'eq': ['TV_series.Channel', 'Cartoon']}}, {'join': 'TV_Channel', 'on': {'eq': ['Cartoon.Channel', 'TV_Channel.id']}}]
ERROR: Join condition does not match with table: ['Cartoon', {'join': 'TV_series', 'on': {'eq': ['TV_series.Channel', 'TV_series.id']}}, {'join': 'TV_Channel', 'on': {'eq': ['TV_series.Channel', 'TV_Channel.id']}}]
ERROR: Join condition does not match with table: ['Cartoon', {'join': 'TV_series', 'on': {'eq': ['TV_series.Channel', 'TV_series.id']}}, {'join': 'TV_Channel', 'on': {'eq': ['Cartoon.Channel', 'TV_Channel.id']}}]
ERROR: invalid JOIN field "TV_series": ['Cartoon', {'join': 'TV_series', 'on': {'eq': ['Cartoon.id', 'TV_series']}}, {'join': 'TV_Channel', 'on': {'eq': ['TV_series.Channel', 'TV_Channel.id']}}]
Example 47
 46%|████▌     | 6/13 [00:33<00:37,  5.40s/it]tvshow
 +-- TV_Channel (tv channel)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- series_name (series name)
 |   +-- Country (country)
 |   +-- Language (language)
 |   +-- Content (content)
 |   +-- Pixel_aspect_ratio_PAR (pixel aspect ratio par)
 |   +-- Hight_definition_TV (hight definition tv)
 |   +-- Pay_per_view_PPV (pay per view ppv)
 |   +-- Package_Option (package option)
 +-- TV_series (tv series)
 |   +-- id (id) [PRIMARY]
 |   +-- Episode (episode)
 |   +-- Air_Date (air date)
 |   +-- Rating (rating)
 |   +-- Share (share)
 |   +-- 18_49_Rating_Share (18 49 rating share)
 |   +-- Viewers_m (viewers m)
 |   +-- Weekly_Rank (weekly rank)
 |   +-- Channel (channel) [FOREIGN]
 +-- Cartoon (cartoon)
     +-- id (id) [PRIMARY]
     +-- Title (title)
     +-- Directed_by (directed by)
     +-- Written_by (written by)
     +-- Original_air_date (original air date)
     +-- Production_code (production code)
     +-- Channel (channel) [FOREIGN]
NL: b'List the title of all  Cartoons showed on TV Channel with series name "Sky Radio".'
NL tokens: [b'list', b'the', b'title', b'of', b'all', b'cartoons', b'showed', b'on', b'tv', b'channel', b'with', b'series', b'name', b'"', b'sky', b'radio', b'"', b'.']
NL tokens (original): [b'List', b'the', b'title', b'of', b'all', b'Cartoons', b'showed', b'on', b'TV', b'Channel', b'with', b'series', b'name', b'"', b'Sky', b'Radio', b'"', b'.']
['[CLS]', 'list', 'the', 'title', 'of', 'all', 'cartoons', 'showed', 'on', 'tv', 'channel', 'with', 'series', 'name', '"', 'sky', 'radio', '"', '.', '[SEP]', '*', '[unused50]', 'tv', 'channel', '[unused51]', 'id', '[unused51]', 'series', 'name', '[unused49]', 'sky', 'radio', '[unused51]', 'country', '[unused51]', 'language', '[unused51]', 'content', '[unused51]', 'pixel', 'aspect', 'ratio', 'par', '[unused51]', 'high', '##t', 'definition', 'tv', '[unused51]', 'pay', 'per', 'view', 'pp', '##v', '[unused51]', 'package', 'option', '[unused50]', 'tv', 'series', '[unused51]', 'id', '[unused51]', 'episode', '[unused51]', 'air', 'date', '[unused51]', 'rating', '[unused51]', 'share', '[unused51]', '18', '49', 'rating', 'share', '[unused51]', 'viewers', 'm', '[unused51]', 'weekly', 'rank', '[unused51]', 'channel', '[unused50]', 'cartoon', '[unused51]', 'id', '[unused51]', 'title', '[unused51]', 'directed', 'by', '[unused51]', 'written', 'by', '[unused51]', 'original', 'air', 'date', '[unused51]', 'production', 'code', '[unused51]', 'channel', '[SEP]']
Target 0: b'SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio"'
Target TF-P tokens: from TV_Channel join Cartoon on TV_Channel.id = Cartoon.Channel where TV_Channel.series_name = "Sky Radio" select Cartoon.Title

[WRONG] [medium] Pred 0:	b'SELECT Cartoon.Title FROM Cartoon JOIN TV_series ON Cartoon.id = TV_series.Channel JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"' (-0.312) (length=24)
[WRONG] [medium] Pred 1:	b'SELECT Cartoon.Title FROM Cartoon JOIN TV_series ON Cartoon.id = TV_series.Channel JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"' (-0.490) (length=24)
[WRONG] [medium] Pred 2:	b'SELECT Cartoon.Title FROM TV_series JOIN Cartoon ON TV_series.Channel = Cartoon.id JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"' (-1.636) (length=24)
[WRONG] [medium] Pred 3:	b'SELECT Cartoon.Title FROM Cartoon JOIN TV_series ON TV_series.Channel = Cartoon.id JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"' (-1.730) (length=24)
[WRONG] [medium] Pred 4:	b'SELECT Cartoon.Title FROM Cartoon JOIN TV_series ON TV_series.Channel = Cartoon.id JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"' (-1.793) (length=24)
[WRONG] [medium] Pred 5:	b'SELECT Cartoon.Title FROM TV_series JOIN Cartoon ON TV_series.Channel = Cartoon.id JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"' (-1.798) (length=24)
[WRONG] [medium] Pred 6:	b'SELECT Cartoon.Title FROM Cartoon JOIN TV_series ON Cartoon.id = TV_series.Channel JOIN TV_Channel ON TV_Channel.id = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"' (-2.109) (length=24)
[WRONG] [medium] Pred 7:	b'SELECT Cartoon.Title FROM Cartoon JOIN TV_series ON Cartoon.id = TV_series.Channel JOIN TV_Channel ON TV_Channel.id = Cartoon.Channel WHERE TV_Channel.series_name = "Sky Radio"' (-2.281) (length=24)
[WRONG] [medium] Pred 8:	b'SELECT Cartoon.Title FROM Cartoon JOIN TV_series ON Cartoon.id = TV_series.Episode JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"' (-2.412) (length=24)
Error Case 9

Parsing error: from Addresses where Addresses.line_1 = 1 select Addresses.other_address_details intersect from Addresses where Addresses.line_1 = line 2 VALUE VALUE "select Addresses.other_address_details"
Parsing error: from Addresses where Addresses.line_1 = 1 select Addresses.other_address_details intersect from Addresses where Addresses.line_1 = line line 2 "select Addresses.other_address_details"
Example 54
student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b'what are all the addresses including line 1 and line 2?'
NL tokens: [b'what', b'are', b'all', b'the', b'addresses', b'including', b'line', b'1', b'and', b'line', b'2', b'?']
NL tokens (original): [b'what', b'are', b'all', b'the', b'addresses', b'including', b'line', b'1', b'and', b'line', b'2', b'?']
['[CLS]', 'what', 'are', 'all', 'the', 'addresses', 'including', 'line', '1', 'and', 'line', '2', '?', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b'SELECT line_1 ,  line_2 FROM addresses'
Target TF-P tokens: from Addresses select Addresses.line_1 , Addresses.line_2

[WRONG] [medium] Pred 0:	b'SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_1 = 1 INTERSECT SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_1 = line 2' (-0.363) (length=21)
[WRONG] [medium] Pred 1:	b'SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_1 = 1 INTERSECT SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_1 = 2' (-0.377) (length=20)
[WRONG] [medium] Pred 2:	b'SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 = 1 INTERSECT SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_1 = line 2' (-0.395) (length=21)
[WRONG] [medium] Pred 3:	b'SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 = 1 INTERSECT SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_1 = 2' (-0.491) (length=20)
[WRONG] [medium] Pred 4:	b'SELECT Addresses.address_id FROM Addresses WHERE Addresses.line_1 = 1 INTERSECT SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_1 = 2' (-0.598) (length=20)
[WRONG] [medium] Pred 5:	b'SELECT Addresses.address_id FROM Addresses WHERE Addresses.line_1 = 1 INTERSECT SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_2 = 2' (-0.614) (length=20)
[WRONG] [medium] Pred 6:	b'SELECT Addresses.address_id FROM Addresses WHERE Addresses.line_1 = 1 INTERSECT SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_1 = line 2' (-0.637) (length=21)
[WRONG] [medium] Pred 7:	b'SELECT Addresses.address_id FROM Addresses WHERE Addresses.line_1 = 1 INTERSECT SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_2 = line 2' (-0.649) (length=21)
[WRONG] [medium] Pred 8:	b'SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_1 = 1 INTERSECT SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_1 = 2' (-0.706) (length=18)
[WRONG] [medium] Pred 9:	b'SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 = 1 INTERSECT SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_1 = 2' (-0.993) (length=18)
[WRONG] [medium] Pred 10:	b'SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_1 = 1 INTERSECT SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_2 = line 2' (-1.027) (length=21)
[WRONG] [medium] Pred 11:	b'SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_1 = 1 INTERSECT SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_2 = 2' (-1.050) (length=20)
[WRONG] [medium] Pred 12:	b'SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 = 1 INTERSECT SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_1 = "line"' (-1.406) (length=18)
[WRONG] [medium] Pred 13:	b'SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 = 1 INTERSECT SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_1 = 1' (-1.472) (length=18)
Error Case 10

ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Code2']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Continent']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Code2']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Continent']}}]
Example 55
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'How many official languages are spoken in Afghanistan?'
NL tokens: [b'how', b'many', b'official', b'languages', b'are', b'spoken', b'in', b'afghanistan', b'?']
NL tokens (original): [b'How', b'many', b'official', b'languages', b'are', b'spoken', b'in', b'Afghanistan', b'?']
 54%|█████▍    | 7/13 [00:38<00:32,  5.37s/it]['[CLS]', 'how', 'many', 'official', 'languages', 'are', 'spoken', 'in', 'afghanistan', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused49]', 'afghanistan', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"'
Target TF-P tokens: from country join countrylanguage on country.Code = countrylanguage.CountryCode where country.Name = "Afghanistan" and countrylanguage.IsOfficial = "t" select count (*)

[WRONG] [medium] Pred 0:	b'SELECT COUNT(*) FROM country WHERE country.Name = "Afghanistan"' (-1.513) (length=14)
[WRONG] [medium] Pred 1:	b'SELECT COUNT(DISTINCT countrylanguage.IsOfficial) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = "Afghanistan"' (-3.337) (length=21)
[WRONG] [medium] Pred 2:	b'SELECT COUNT(countrylanguage.IsOfficial) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = "Afghanistan"' (-3.369) (length=20)
[WRONG] [medium] Pred 3:	b'SELECT COUNT(DISTINCT countrylanguage.IsOfficial) FROM countrylanguage JOIN country ON countrylanguage.Language = country.Code WHERE country.Name = "Afghanistan"' (-3.369) (length=21)
[WRONG] [medium] Pred 4:	b'SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = "Afghanistan"' (-3.553) (length=21)
[WRONG] [medium] Pred 5:	b'SELECT COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = "Afghanistan"' (-3.577) (length=20)
[WRONG] [medium] Pred 6:	b'SELECT COUNT(countrylanguage.IsOfficial) FROM countrylanguage JOIN country ON countrylanguage.Language = country.Code WHERE country.Name = "Afghanistan"' (-3.585) (length=20)
[WRONG] [medium] Pred 7:	b'SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage JOIN country ON countrylanguage.Language = country.Code WHERE country.Name = "Afghanistan"' (-3.629) (length=21)
[WRONG] [medium] Pred 8:	b'SELECT COUNT(*) FROM countrylanguage JOIN country ON countrylanguage.Language = country.Code WHERE country.Name = "Afghanistan"' (-3.632) (length=20)
[WRONG] [medium] Pred 9:	b'SELECT COUNT(*) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = "Afghanistan"' (-3.931) (length=20)
Error Case 11

Example 56
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b"What are each owner's first name, last name, and the size of their dog?"
NL tokens: [b'what', b'are', b'each', b'owner', b"'", b's', b'first', b'name', b',', b'last', b'name', b',', b'and', b'the', b'size', b'of', b'their', b'dog', b'?']
NL tokens (original): [b'What', b'are', b'each', b'owner', b"'", b's', b'first', b'name', b',', b'last', b'name', b',', b'and', b'the', b'size', b'of', b'their', b'dog', b'?']
['[CLS]', 'what', 'are', 'each', 'owner', "'", 's', 'first', 'name', ',', 'last', 'name', ',', 'and', 'the', 'size', 'of', 'their', 'dog', '?', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id'
Target TF-P tokens: from Owners join Dogs on Owners.owner_id = Dogs.owner_id select Owners.first_name , Owners.last_name , Dogs.size_code

 62%|██████▏   | 8/13 [00:42<00:24,  4.98s/it][WRONG] [medium] Pred 0:	b'SELECT Owners.first_name, Owners.last_name, MAX(Dogs.size_code) FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id' (-1.369) (length=20)
[CORRE] [medium] Pred 1:	b'SELECT Owners.first_name, Owners.last_name, Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id' (-1.978) (length=15)
Error Case 12

Example 59
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'Show the names of high schoolers who have at least 3 friends.'
NL tokens: [b'show', b'the', b'names', b'of', b'high', b'school', b'##ers', b'who', b'have', b'at', b'least', b'3', b'friends', b'.']
NL tokens (original): [b'Show', b'the', b'names', b'of', b'high', b'school', b'##ers', b'who', b'have', b'at', b'least', b'3', b'friends', b'.']
['[CLS]', 'show', 'the', 'names', 'of', 'high', 'school', '##ers', 'who', 'have', 'at', 'least', '3', 'friends', '.', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3'
Target TF-P tokens: from Friend join Highschooler on Friend.student_id = Highschooler.ID group by Friend.student_id having count (*) >= 3 select Highschooler.name

[WRONG] [medium] Pred 0:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING COUNT(*) >= 3' (-0.017) (length=20)
[WRONG] [medium] Pred 1:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING COUNT(*) >= 3 INTERSECT SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING COUNT(*) >= 3' (-1.793) (length=40)
[WRONG] [medium] Pred 2:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY "Highschooler" HAVING COUNT(*) >= 3' (-2.048) (length=20)
[CORRE] [medium] Pred 3:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Friend.student_id HAVING COUNT(*) >= 3' (-2.149) (length=20)
Error Case 13

Parsing error: from stadium select max max (stadium.Capacity) , avg (stadium.Average)
Parsing error: from stadium select max (stadium.Capacity) in (from stadium select stadium.Average
Parsing error: from stadium select max (stadium.Capacity) (avg (stadium.Average)
Parsing error: from stadium select max (stadium.Capacity)) , avg (stadium.Average)
Parsing error: from stadium select on (stadium.Capacity) , avg (stadium.Average)
Parsing error: from stadium select on max (stadium.Capacity) , avg (stadium.Average)
Parsing error: from stadium select max (stadium.Capacity) , avg (stadium.Average) ,
Example 60
concert_singer
 +-- stadium (stadium)
 |   +-- Stadium_ID (stadium id) [PRIMARY] [FOREIGN]
 |   +-- Location (location)
 |   +-- Name (name)
 |   +-- Capacity (capacity)
 |   +-- Highest (highest)
 |   +-- Lowest (lowest)
 |   +-- Average (average)
 +-- singer (singer)
 |   +-- Singer_ID (singer id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Country (country)
 |   +-- Song_Name (song name)
 |   +-- Song_release_year (song release year)
 |   +-- Age (age)
 |   +-- Is_male (is male)
 +-- concert (concert)
 |   +-- concert_ID (concert id) [PRIMARY] [FOREIGN]
 |   +-- concert_Name (concert name)
 |   +-- Theme (theme)
 |   +-- Stadium_ID (stadium id) [FOREIGN]
 |   +-- Year (year)
 +-- singer_in_concert (singer in concert)
     +-- concert_ID (concert id) [PRIMARY] [FOREIGN]
     +-- Singer_ID (singer id) [FOREIGN]
NL: b'What is the maximum capacity and the average of all stadiums ?'
NL tokens: [b'what', b'is', b'the', b'maximum', b'capacity', b'and', b'the', b'average', b'of', b'all', b'stadiums', b'?']
NL tokens (original): [b'What', b'is', b'the', b'maximum', b'capacity', b'and', b'the', b'average', b'of', b'all', b'stadiums', b'?']
['[CLS]', 'what', 'is', 'the', 'maximum', 'capacity', 'and', 'the', 'average', 'of', 'all', 'stadiums', '?', '[SEP]', '*', '[unused50]', 'stadium', '[unused51]', 'stadium', 'id', '[unused51]', 'location', '[unused51]', 'name', '[unused51]', 'capacity', '[unused51]', 'highest', '[unused51]', 'lowest', '[unused51]', 'average', '[unused50]', 'singer', '[unused51]', 'singer', 'id', '[unused51]', 'name', '[unused51]', 'country', '[unused51]', 'song', 'name', '[unused51]', 'song', 'release', 'year', '[unused51]', 'age', '[unused51]', 'is', 'male', '[unused50]', 'concert', '[unused51]', 'concert', 'id', '[unused51]', 'concert', 'name', '[unused51]', 'theme', '[unused51]', 'stadium', 'id', '[unused51]', 'year', '[unused50]', 'singer', 'in', 'concert', '[unused51]', 'concert', 'id', '[unused51]', 'singer', 'id', '[SEP]']
Target 0: b'select max(capacity), average from stadium'
Target TF-P tokens: from stadium select max (stadium.Capacity) , stadium.Average

[WRONG] [medium] Pred 0:	b'SELECT MAX(stadium.Capacity), AVG(stadium.Average) FROM stadium' (-0.000) (length=13)
[WRONG] [medium] Pred 1:	b'SELECT MAX(stadium.Capacity), AVG(stadium.Average) FROM stadium' (-3.006) (length=18)
[WRONG] [medium] Pred 2:	b'SELECT MAX(stadium.Capacity), AVG(stadium.Average) FROM stadium WHERE stadium.Capacity = (SELECT MAX(stadium.Capacity) FROM stadium)' (-3.555) (length=25)
[WRONG] [medium] Pred 3:	b'SELECT MAX(stadium.Capacity), MAX(stadium.Average), stadium.Average FROM stadium GROUP BY stadium.Capacity' (-4.835) (length=17)
[WRONG] [medium] Pred 4:	b'SELECT MAX(stadium.Capacity), AVG(stadium.Average), stadium.Average FROM stadium GROUP BY stadium.Capacity' (-5.180) (length=17)
[WRONG] [medium] Pred 5:	b'SELECT SUM(stadium.Capacity), AVG(stadium.Average) FROM stadium' (-5.348) (length=13)
[WRONG] [medium] Pred 6:	b'SELECT MAX(stadium.Capacity), MIN(stadium.Average) FROM stadium' (-5.732) (length=13)
[WRONG] [medium] Pred 7:	b'SELECT MIN(stadium.Capacity), AVG(stadium.Average) FROM stadium' (-5.760) (length=13)
[WRONG] [medium] Pred 8:	b'SELECT MAX(stadium.Capacity), AVG(stadium.Average), stadium.Average FROM stadium WHERE stadium.Capacity = (SELECT MAX(stadium.Capacity) FROM stadium)' (-5.839) (length=27)
Error Case 14

Parsing error: from cars_data select avg (cars_data.Edispl) ,
Parsing error: from cars_data select 10 (cars_data.Edispl)
Parsing error: from cars_data select 12 (cars_data.Edispl)
Parsing error: from cars_data select / (cars_data.Edispl)
Example 64
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What is the average edispl for all volvos?'
NL tokens: [b'what', b'is', b'the', b'average', b'ed', b'##is', b'##pl', b'for', b'all', b'volvo', b'##s', b'?']
NL tokens (original): [b'What', b'is', b'the', b'average', b'ed', b'##is', b'##pl', b'for', b'all', b'volvo', b'##s', b'?']
['[CLS]', 'what', 'is', 'the', 'average', 'ed', '##is', '##pl', 'for', 'all', 'volvo', '##s', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused49]', 'volvo', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused49]', 'volvo', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused49]', 'volvo', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b"SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"
Target TF-P tokens: from car_names join cars_data on car_names.MakeId = cars_data.Id where car_names.Model = "volvo" select avg (cars_data.Edispl)

[WRONG] [medium] Pred 0:	b'SELECT AVG(cars_data.Edispl) FROM cars_data' (-0.000) (length=8)
[WRONG] [medium] Pred 1:	b'SELECT AVG(cars_data.Edispl) FROM cars_data' (-5.906) (length=13)
[WRONG] [medium] Pred 2:	b'SELECT AVG(cars_data.Edispl), MIN(cars_data.Edispl) FROM cars_data' (-6.019) (length=13)
[WRONG] [medium] Pred 3:	b'SELECT AVG(cars_data.Edispl) FROM cars_data INTERSECT SELECT AVG(cars_data.Edispl) FROM cars_data' (-6.197) (length=16)
[WRONG] [medium] Pred 4:	b'SELECT AVG(cars_data.Edispl), SUM(cars_data.Edispl) FROM cars_data' (-6.746) (length=13)
[WRONG] [medium] Pred 5:	b'SELECT AVG(cars_data.Edispl), cars_data.Id FROM cars_data' (-6.866) (length=10)
[WRONG] [medium] Pred 6:	b'SELECT AVG(cars_data.Edispl) FROM cars_data INTERSECT SELECT cars_data.Edispl FROM cars_data' (-6.945) (length=15)
[WRONG] [medium] Pred 7:	b'SELECT AVG(cars_data.Edispl) FROM cars_data ORDER BY cars_data.Edispl' (-7.612) (length=10)
[WRONG] [medium] Pred 8:	b'SELECT AVG(cars_data.Edispl) FROM cars_data INTERSECT SELECT cars_data.Edispl FROM cars_data' (-7.772) (length=13)
[WRONG] [medium] Pred 9:	b'SELECT SUM(cars_data.Edispl) FROM cars_data' (-8.209) (length=8)
[WRONG] [medium] Pred 10:	b'SELECT AVG(cars_data.Edispl - cars_data.Year) FROM cars_data' (-8.408) (length=10)
[WRONG] [medium] Pred 11:	b'SELECT AVG(cars_data.Edispl - cars_data.Cylinders) FROM cars_data' (-8.541) (length=10)
Error Case 15

ERROR: table "TV_Channel" in field expression TV_Channel.Country is not in the current scope
Parsing error: from Cartoon select except from *) except from Cartoon where Cartoon.Written_by = "Todd Casey" select Cartoon.Channel
Parsing error: from Cartoon select TV_series except distinct Cartoon.Channel except from Cartoon where Cartoon.Written_by = "Todd Casey" select Cartoon.Channel
Parsing error: from Cartoon select TV_series except distinct Cartoon.Title except from Cartoon where Cartoon.Written_by = "Todd Casey" select Cartoon.Channel
Parsing error: from Cartoon select except from * except from Cartoon where Cartoon.Written_by = "Todd Casey" select Cartoon.Channel
Example 67
tvshow
 +-- TV_Channel (tv channel)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- series_name (series name)
 |   +-- Country (country)
 |   +-- Language (language)
 |   +-- Content (content)
 |   +-- Pixel_aspect_ratio_PAR (pixel aspect ratio par)
 |   +-- Hight_definition_TV (hight definition tv)
 |   +-- Pay_per_view_PPV (pay per view ppv)
 |   +-- Package_Option (package option)
 +-- TV_series (tv series)
 |   +-- id (id) [PRIMARY]
 |   +-- Episode (episode)
 |   +-- Air_Date (air date)
 |   +-- Rating (rating)
 |   +-- Share (share)
 |   +-- 18_49_Rating_Share (18 49 rating share)
 |   +-- Viewers_m (viewers m)
 |   +-- Weekly_Rank (weekly rank)
 |   +-- Channel (channel) [FOREIGN]
 +-- Cartoon (cartoon)
     +-- id (id) [PRIMARY]
     +-- Title (title)
     +-- Directed_by (directed by)
     +-- Written_by (written by)
     +-- Original_air_date (original air date)
     +-- Production_code (production code)
     +-- Channel (channel) [FOREIGN]
NL: b'What are the countries that are not playing cartoons written by Todd Casey?'
NL tokens: [b'what', b'are', b'the', b'countries', b'that', b'are', b'not', b'playing', b'cartoons', b'written', b'by', b'todd', b'casey', b'?']
NL tokens (original): [b'What', b'are', b'the', b'countries', b'that', b'are', b'not', b'playing', b'cartoons', b'written', b'by', b'Todd', b'Casey', b'?']
['[CLS]', 'what', 'are', 'the', 'countries', 'that', 'are', 'not', 'playing', 'cartoons', 'written', 'by', 'todd', 'casey', '?', '[SEP]', '*', '[unused50]', 'tv', 'channel', '[unused51]', 'id', '[unused51]', 'series', 'name', '[unused51]', 'country', '[unused51]', 'language', '[unused51]', 'content', '[unused51]', 'pixel', 'aspect', 'ratio', 'par', '[unused51]', 'high', '##t', 'definition', 'tv', '[unused51]', 'pay', 'per', 'view', 'pp', '##v', '[unused51]', 'package', 'option', '[unused50]', 'tv', 'series', '[unused51]', 'id', '[unused51]', 'episode', '[unused51]', 'air', 'date', '[unused51]', 'rating', '[unused51]', 'share', '[unused51]', '18', '49', 'rating', 'share', '[unused51]', 'viewers', 'm', '[unused51]', 'weekly', 'rank', '[unused51]', 'channel', '[unused50]', 'cartoon', '[unused51]', 'id', '[unused51]', 'title', '[unused51]', 'directed', 'by', '[unused51]', 'written', 'by', '[unused49]', 'todd', 'casey', '[unused51]', 'original', 'air', 'date', '[unused51]', 'production', 'code', '[unused51]', 'channel', '[SEP]']
Target 0: b"SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
Target TF-P tokens: from TV_Channel select TV_Channel.Country except from TV_Channel join Cartoon on TV_Channel.id = Cartoon.Channel where Cartoon.Written_by = "Todd Casey" select TV_Channel.Country

[WRONG] [hard] Pred 0:	b'SELECT TV_Channel.Country FROM TV_Channel EXCEPT SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Written_by = "Todd Casey"' (-4.020) (length=17)
[WRONG] [hard] Pred 1:	b'SELECT Cartoon.Channel FROM Cartoon EXCEPT SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Written_by = "Todd Casey"' (-4.144) (length=17)
[WRONG] [hard] Pred 2:	b'SELECT * FROM Cartoon EXCEPT SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Written_by = "Todd Casey"' (-4.224) (length=17)
[WRONG] [hard] Pred 3:	b'SELECT Cartoon.Original_air_date FROM Cartoon EXCEPT SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Written_by = "Todd Casey"' (-4.245) (length=17)
[WRONG] [hard] Pred 4:	b'SELECT TV_Channel.Country FROM TV_Channel EXCEPT SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Written_by = "Todd Casey"' (-4.527) (length=17)
[WRONG] [hard] Pred 5:	b'SELECT Cartoon.Production_code FROM Cartoon EXCEPT SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Written_by = "Todd Casey"' (-4.589) (length=17)
[WRONG] [hard] Pred 6:	b'SELECT * FROM Cartoon EXCEPT SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Written_by = "Todd Casey"' (-4.597) (length=17)
[WRONG] [hard] Pred 7:	b'SELECT "What" FROM Cartoon EXCEPT SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Written_by = "Todd Casey"' (-4.602) (length=17)
[WRONG] [hard] Pred 8:	b'SELECT Cartoon.Title FROM Cartoon EXCEPT SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Written_by = "Todd Casey"' (-4.661) (length=17)
[WRONG] [hard] Pred 9:	b'SELECT Cartoon.Channel FROM Cartoon EXCEPT SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Written_by = "Todd Casey"' (-4.728) (length=17)
[WRONG] [hard] Pred 10:	b'SELECT Cartoon.Original_air_date FROM Cartoon EXCEPT SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Written_by = "Todd Casey"' (-4.796) (length=17)
Error Case 16

ERROR: Join condition does not match with table: ['cars_data', {'join': 'car_names', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
Parsing error: from cars_data order by cars_data.Horsepower = (from cars_data select min (cars_data.Horsepower)) order by cars_data.Horsepower limit 1
Parsing error: from cars_data where cars_data.Horsepower = (from cars_data select min (cars_data.Horsepower)) order by cars_data.Horsepower limit 1
Parsing error: from cars_data yes min (cars_data.Horsepower) order by (cars_data.Horsepower) limit 1
ERROR: Join condition does not match with table: ['cars_data', {'join': 'model_list', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
Parsing error: from cars_data yes min (cars_data.Horsepower) order by (cars_data.Cylinders) limit 1
Parsing error: from cars_data yes min (cars_data.Horsepower) order by (cars_data.Id) limit 1
Parsing error: from cars_data no cars_data.Horsepower order by (cars_data.Horsepower-cars_data.Horsepower) limit 1
Parsing error: from cars_data no cars_data.Horsepower order by (cars_data.Horsepower-cars_data.Cylinders) limit 1
Parsing error: from cars_data order by cars_data.Horsepower = (from cars_data select min (cars_data.Horsepower)) order by cars_data.Horsepower = limit 1
Parsing error: from cars_data order by cars_data.Horsepower = (from cars_data select min (cars_data.Horsepower)) order by cars_data.Horsepower desc limit 1
Parsing error: from cars_data order by cars_data.Horsepower = (from cars_data select min (cars_data.Horsepower)) order by cars_data.Horsepower asc limit 1
Parsing error: from cars_data order by cars_data.Horsepower = (from cars_data select min (cars_data.Horsepower)) order by cars_data.Horsepower < limit 1
Parsing error: from cars_data order by cars_data.Horsepower = (from cars_data select min (cars_data.Horsepower)) order by cars_data.Cylinders limit 1
Parsing error: from cars_data where cars_data.Horsepower = (from cars_data select min (cars_data.Horsepower)) order by cars_data.Cylinders limit 1
Parsing error: from cars_data order by cars_data.Horsepower = (from cars_data select min (cars_data.Horsepower)) order by cars_data.Id limit 1
Example 68
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What is the model of the car with the smallest amount of horsepower?'
NL tokens: [b'what', b'is', b'the', b'model', b'of', b'the', b'car', b'with', b'the', b'smallest', b'amount', b'of', b'horsepower', b'?']
NL tokens (original): [b'What', b'is', b'the', b'model', b'of', b'the', b'car', b'with', b'the', b'smallest', b'amount', b'of', b'horsepower', b'?']
['[CLS]', 'what', 'is', 'the', 'model', 'of', 'the', 'car', 'with', 'the', 'smallest', 'amount', 'of', 'horsepower', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1'
Target TF-P tokens: from car_names join cars_data on car_names.MakeId = cars_data.Id select car_names.Model order by cars_data.Horsepower asc limit 1

[WRONG] hard Pred 0:	No valid output! (0.000)
Error Case 17

Example 69
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What are the countries that have greater surface area than any country in Europe?'
NL tokens: [b'what', b'are', b'the', b'countries', b'that', b'have', b'greater', b'surface', b'area', b'than', b'any', b'country', b'in', b'europe', b'?']
NL tokens (original): [b'What', b'are', b'the', b'countries', b'that', b'have', b'greater', b'surface', b'area', b'than', b'any', b'country', b'in', b'Europe', b'?']
['[CLS]', 'what', 'are', 'the', 'countries', 'that', 'have', 'greater', 'surface', 'area', 'than', 'any', 'country', 'in', 'europe', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused49]', 'europe', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")'
Target TF-P tokens: from country where country.SurfaceArea > (from country where country.Continent = "Europe" select min (country.SurfaceArea)) select country.Name

[WRONG] [hard] Pred 0:	b'SELECT country.Name FROM country WHERE country.SurfaceArea > (SELECT MAX(country.SurfaceArea) FROM country WHERE country.Continent = "Europe")' (-0.000) (length=23)
[WRONG] [hard] Pred 1:	b'SELECT DISTINCT country.Name FROM country WHERE country.SurfaceArea > (SELECT MAX(country.SurfaceArea) FROM country WHERE country.Continent = "Europe")' (-2.130) (length=24)
[WRONG] [hard] Pred 2:	b'SELECT country.Name FROM country WHERE country.SurfaceArea > (SELECT MAX(country.SurfaceArea) FROM country WHERE country.Continent = "Europe") AND country.Continent = "Europe"' (-2.249) (length=29)
 69%|██████▉   | 9/13 [00:48<00:20,  5.13s/it][CORRE] [hard] Pred 3:	b'SELECT country.Name FROM country WHERE country.SurfaceArea > (SELECT MIN(country.SurfaceArea) FROM country WHERE country.Continent = "Europe")' (-2.418) (length=23)
Error Case 18

Parsing error: from cars_data yes min (cars_data.Horsepower) order by (cars_data.Horsepower) limit 1
Parsing error: from cars_data yes max (cars_data.Horsepower) order by (cars_data.Horsepower) limit 1
Parsing error: from cars_data yes max (cars_data.Horsepower) order by (cars_data.Id) limit 1
Parsing error: from cars_data yes max (cars_data.Horsepower) = (from cars_data select cars_data.Id order by cars_data.Horsepower limit 1
Parsing error: from cars_data yes max (cars_data.Horsepower) = (from cars_data select min (cars_data.Horsepower)) order by cars_data.Horsepower limit 1
Parsing error: from cars_data no cars_data.Horsepower order by (cars_data.Horsepower) limit 1
Parsing error: from cars_data yes max (cars_data.Horsepower) = (from cars_data select cars_data.Id order by cars_data.Horsepower limit 1) order by cars_data.Horsepower limit 1
Parsing error: from cars_data yes max (cars_data.Horsepower) = (from cars_data select cars_data.Id order by cars_data.Horsepower limit 1 : the
Parsing error: from cars_data yes max (cars_data.Horsepower) = (from cars_data select cars_data.Id order by cars_data.Horsepower limit 1 : the : ? "select cars_data.Horsepower"
Parsing error: from cars_data yes max (cars_data.Horsepower) = (from cars_data select cars_data.Id order by cars_data.Horsepower limit 1 : the : the "select cars_data.Horsepower"
Parsing error: from cars_data yes max (cars_data.Horsepower) = (from cars_data select cars_data.Id order by cars_data.Horsepower limit 1 : the : has "select cars_data.Horsepower"
Example 71
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'Which model of the car has the minimum horsepower?'
NL tokens: [b'which', b'model', b'of', b'the', b'car', b'has', b'the', b'minimum', b'horsepower', b'?']
NL tokens (original): [b'Which', b'model', b'of', b'the', b'car', b'has', b'the', b'minimum', b'horsepower', b'?']
['[CLS]', 'which', 'model', 'of', 'the', 'car', 'has', 'the', 'minimum', 'horsepower', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1'
Target TF-P tokens: from car_names join cars_data on car_names.MakeId = cars_data.Id select car_names.Model order by cars_data.Horsepower asc limit 1

[WRONG] [hard] Pred 0:	b'SELECT MAX(cars_data.Horsepower) FROM cars_data ORDER BY cars_data.Horsepower LIMIT 1' (-6.225) (length=12)
[WRONG] [hard] Pred 1:	b'SELECT MIN(cars_data.Horsepower) FROM cars_data ORDER BY cars_data.Horsepower LIMIT 1' (-6.527) (length=12)
[WRONG] [hard] Pred 2:	b'SELECT SUM(cars_data.Horsepower) FROM cars_data ORDER BY cars_data.Horsepower LIMIT 1' (-6.638) (length=12)
[WRONG] [hard] Pred 3:	b'SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Horsepower LIMIT 1' (-7.205) (length=9)
[WRONG] [hard] Pred 4:	b'SELECT MIN(cars_data.Horsepower) FROM cars_data' (-7.423) (length=8)
Error Case 19

ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Capital']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Code2']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.Language']}}]
ERROR: invalid JOIN field "country": ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country']}}]
ERROR: invalid JOIN field "country": ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'country']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.IndepYear']}}]
Example 72
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Which languages are spoken by only one country in republic governments?'
NL tokens: [b'which', b'languages', b'are', b'spoken', b'by', b'only', b'one', b'country', b'in', b'republic', b'governments', b'?']
NL tokens (original): [b'Which', b'languages', b'are', b'spoken', b'by', b'only', b'one', b'country', b'in', b'republic', b'governments', b'?']
['[CLS]', 'which', 'languages', 'are', 'spoken', 'by', 'only', 'one', 'country', 'in', 'republic', 'governments', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused49]', 'republic', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1'
Target TF-P tokens: from country join countrylanguage on country.Code = countrylanguage.CountryCode where country.GovernmentForm = "republic" group by countrylanguage.Language having count (*) = 1 select countrylanguage.Language

[WRONG] [hard] Pred 0:	b'SELECT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language HAVING COUNT(*) = 1' (-0.000) (length=14)
[WRONG] [hard] Pred 1:	b'SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY countrylanguage.Language HAVING COUNT(*) = 1' (-2.162) (length=20)
[WRONG] [hard] Pred 2:	b'SELECT countrylanguage.Language FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.Code2 GROUP BY countrylanguage.Language HAVING COUNT(*) = 1' (-2.899) (length=20)
[WRONG] [hard] Pred 3:	b'SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.Language = country.Code GROUP BY countrylanguage.Language HAVING COUNT(*) = 1' (-2.981) (length=20)
[WRONG] [hard] Pred 4:	b'SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.Language GROUP BY countrylanguage.Language HAVING COUNT(*) = 1' (-3.006) (length=20)
[WRONG] [hard] Pred 5:	b'SELECT countrylanguage.Language FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.Capital GROUP BY countrylanguage.Language HAVING COUNT(*) = 1' (-3.090) (length=20)
[WRONG] [hard] Pred 6:	b'SELECT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language ORDER BY COUNT(*) = 1' (-4.311) (length=14)
[WRONG] [hard] Pred 7:	b'SELECT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language HAVING COUNT(*) = "one"' (-4.455) (length=14)
[WRONG] [hard] Pred 8:	b'SELECT DISTINCT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language HAVING COUNT(*) = 1' (-4.504) (length=15)
Error Case 20

Example 75
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?'
NL tokens: [b'what', b'is', b'the', b'total', b'population', b'and', b'average', b'area', b'of', b'countries', b'in', b'the', b'continent', b'of', b'north', b'america', b'whose', b'area', b'is', b'bigger', b'than', b'3000', b'?']
NL tokens (original): [b'What', b'is', b'the', b'total', b'population', b'and', b'average', b'area', b'of', b'countries', b'in', b'the', b'continent', b'of', b'North', b'America', b'whose', b'area', b'is', b'bigger', b'than', b'3000', b'?']
['[CLS]', 'what', 'is', 'the', 'total', 'population', 'and', 'average', 'area', 'of', 'countries', 'in', 'the', 'continent', 'of', 'north', 'america', 'whose', 'area', 'is', 'bigger', 'than', '3000', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused49]', 'north', 'america', '[unused51]', 'region', '[unused49]', 'north', 'america', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000'
Target TF-P tokens: from country where country.Continent = "North America" and country.SurfaceArea > 3000 select sum (country.Population) , avg (country.SurfaceArea)

[WRONG] [hard] Pred 0:	b'SELECT AVG(country.Population) FROM country WHERE country.Continent = "North America" AND country.Region = "North America"' (-0.098) (length=27)
[WRONG] [hard] Pred 1:	b'SELECT AVG(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.Region = "North America"' (-0.191) (length=27)
[WRONG] [hard] Pred 2:	b'SELECT AVG(country.Population) FROM country WHERE country.Continent = "North America" AND country.Region = "North America" AND country.Region > 3000' (-0.634) (length=31)
[WRONG] [hard] Pred 3:	b'SELECT AVG(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.Region = "North America" AND country.Region > 3000' (-0.637) (length=31)
[WRONG] [hard] Pred 4:	b'SELECT SUM(country.Population), AVG(country.Population) FROM country WHERE country.Continent = "North America" AND country.Region = "North America" AND country.Region > 3000' (-0.807) (length=31)
[WRONG] [hard] Pred 5:	b'SELECT AVG(country.Population) FROM country WHERE country.Continent = "North America" AND country.Region > "North America"' (-0.812) (length=27)
[WRONG] [hard] Pred 6:	b'SELECT AVG(country.Population) FROM country WHERE country.Continent = "North America" AND country.Region > 3000' (-0.866) (length=24)
[WRONG] [hard] Pred 7:	b'SELECT AVG(country.Population) FROM country WHERE country.Continent = "North America" AND country.Region = 3000' (-0.866) (length=26)
[WRONG] [hard] Pred 8:	b'SELECT AVG(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.Region > "North America"' (-0.895) (length=27)
[WRONG] [hard] Pred 9:	b'SELECT AVG(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.Region = 3000' (-0.898) (length=26)
[WRONG] [hard] Pred 10:	b'SELECT AVG(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.Region = "North America" AND country.SurfaceArea > 3000' (-0.947) (length=31)
[WRONG] [hard] Pred 11:	b'SELECT AVG(country.Population) FROM country WHERE country.Continent = "North America" AND country.Region = "North America" AND country.SurfaceArea > 3000' (-0.948) (length=31)
[WRONG] [hard] Pred 12:	b'SELECT AVG(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.Region > 3000' (-0.950) (length=24)
[WRONG] [hard] Pred 13:	b'SELECT SUM(country.Population), AVG(country.Population) FROM country WHERE country.Continent = "North America" AND country.Region = "North America" AND country.Region > 3000' (-0.971) (length=33)
[WRONG] [hard] Pred 14:	b'SELECT SUM(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.Region = "North America" AND country.Region > 3000' (-0.975) (length=31)
 77%|███████▋  | 10/13 [00:58<00:19,  6.65s/it][WRONG] [hard] Pred 15:	b'SELECT SUM(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.Region = "North America" AND country.Region > 3000' (-1.020) (length=33)
Error Case 21

ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Dogs.breed_code', 'Professionals.professional_id']}}]
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Dogs.breed_code', 'Professionals.professional_id']}}]
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Dogs.breed_code', 'Professionals.professional_id']}}]
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Dogs.breed_code', 'Professionals.professional_id']}}]
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Dogs.breed_code', 'Professionals.professional_id']}}]
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Dogs.breed_code', 'Professionals.professional_id']}}]
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Dogs.breed_code', 'Professionals.professional_id']}}]
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Dogs.breed_code', 'Professionals.professional_id']}}]
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Dogs.breed_code', 'Dogs.dog_id']}}]
Example 77
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'Which first names are used for professionals or owners but are not used as dog names?'
NL tokens: [b'which', b'first', b'names', b'are', b'used', b'for', b'professionals', b'or', b'owners', b'but', b'are', b'not', b'used', b'as', b'dog', b'names', b'?']
NL tokens (original): [b'Which', b'first', b'names', b'are', b'used', b'for', b'professionals', b'or', b'owners', b'but', b'are', b'not', b'used', b'as', b'dog', b'names', b'?']
['[CLS]', 'which', 'first', 'names', 'are', 'used', 'for', 'professionals', 'or', 'owners', 'but', 'are', 'not', 'used', 'as', 'dog', 'names', '?', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs'
Target TF-P tokens: from Professionals select Professionals.first_name union from Owners select Owners.first_name except from Dogs select Dogs.name

[WRONG] [hard] Pred 0:	b'SELECT Professionals.first_name FROM Professionals UNION SELECT Professionals.first_name FROM Professionals JOIN Dogs ON Professionals.professional_id = Dogs.owner_id' (-1.162) (length=16)
[WRONG] [hard] Pred 1:	b'SELECT Professionals.first_name FROM Professionals UNION SELECT Professionals.first_name FROM Owners JOIN Professionals ON Owners.first_name = Professionals.professional_id' (-1.557) (length=16)
[WRONG] [hard] Pred 2:	b'SELECT Professionals.first_name FROM Professionals UNION SELECT Owners.first_name FROM Owners JOIN Professionals ON Owners.first_name = Professionals.professional_id' (-2.109) (length=16)
[WRONG] [hard] Pred 3:	b'SELECT Professionals.first_name FROM Professionals WHERE Professionals.role_code IS NOT NULL UNION SELECT Professionals.first_name FROM Professionals JOIN Dogs ON Professionals.professional_id = Dogs.owner_id' (-2.248) (length=21)
[WRONG] [hard] Pred 4:	b'SELECT Professionals.first_name FROM Professionals UNION SELECT Dogs.name FROM Dogs' (-2.249) (length=10)
[WRONG] [hard] Pred 5:	b'SELECT Professionals.first_name FROM Professionals UNION SELECT Owners.first_name FROM Owners' (-2.356) (length=10)
[WRONG] [hard] Pred 6:	b'SELECT Professionals.first_name FROM Professionals UNION SELECT Dogs.name FROM Professionals JOIN Dogs ON Professionals.professional_id = Dogs.owner_id' (-2.769) (length=16)
Error Case 22

ERROR: table "Friend" in field expression Friend.friend_id is not in the current scope
ERROR: table "Friend" in field expression Friend.friend_id is not in the current scope
Parsing error: from Highschooler join Friend on Highschooler.ID = Friend.student_id where Friend.friend_id in (from Highschooler select avg (Friend.friend_id)) select intersect from Highschooler select avg (Highschooler.grade)
ERROR: table "Friend" in field expression Friend.friend_id is not in the current scope
ERROR: table "Friend" in field expression Friend.friend_id is not in the current scope
ERROR: table "Friend" in field expression Friend.friend_id is not in the current scope
Example 83
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'Find the average grade of all students who have some friends.'
NL tokens: [b'find', b'the', b'average', b'grade', b'of', b'all', b'students', b'who', b'have', b'some', b'friends', b'.']
NL tokens (original): [b'Find', b'the', b'average', b'grade', b'of', b'all', b'students', b'who', b'have', b'some', b'friends', b'.']
['[CLS]', 'find', 'the', 'average', 'grade', 'of', 'all', 'students', 'who', 'have', 'some', 'friends', '.', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)'
Target TF-P tokens: from Highschooler where Highschooler.ID in (from Friend join Highschooler on Friend.student_id = Highschooler.ID select Friend.student_id) select avg (Highschooler.grade)

[WRONG] [hard] Pred 0:	b'SELECT AVG(Highschooler.grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id' (-0.001) (length=14)
[WRONG] [hard] Pred 1:	b'SELECT AVG(Highschooler.grade) FROM Highschooler' (-2.416) (length=8)
[WRONG] [hard] Pred 2:	b'SELECT AVG(Highschooler.grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.friend_id IN (SELECT DISTINCT Highschooler.grade FROM Highschooler)' (-2.757) (length=24)
[WRONG] [hard] Pred 3:	b'SELECT AVG(Highschooler.grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.friend_id IN (SELECT DISTINCT Highschooler.ID FROM Highschooler)' (-2.801) (length=24)
[WRONG] [hard] Pred 4:	b'SELECT AVG(Highschooler.grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id JOIN Highschooler ON Friend.friend_id = Highschooler.ID' (-2.824) (length=20)
[WRONG] [hard] Pred 5:	b'SELECT DISTINCT Highschooler.grade FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.friend_id IN (SELECT AVG(Highschooler.grade) FROM Highschooler)' (-2.839) (length=24)
[WRONG] [hard] Pred 6:	b'SELECT AVG(Highschooler.grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.friend_id = 0' (-3.024) (length=18)
[WRONG] [hard] Pred 7:	b'SELECT AVG(Highschooler.grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id JOIN Friend ON Friend.friend_id = Highschooler.ID' (-3.061) (length=20)
[WRONG] [hard] Pred 8:	b'SELECT DISTINCT Highschooler.grade FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id' (-3.157) (length=12)
[WRONG] [hard] Pred 9:	b'SELECT AVG(Highschooler.grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id' (-3.226) (length=19)
Error Case 23

Example 84
flight_2
 +-- airlines (airlines)
 |   +-- uid (airline id) [PRIMARY]
 |   +-- Airline (airline name) [FOREIGN]
 |   +-- Abbreviation (abbreviation)
 |   +-- Country (country)
 +-- airports (airports)
 |   +-- AirportCode (airport code) [PRIMARY] [FOREIGN]
 |   +-- City (city)
 |   +-- AirportName (airport name)
 |   +-- Country (country)
 |   +-- CountryAbbrev (country abbrev)
 +-- flights (flights)
     +-- Airline (airline) [PRIMARY] [FOREIGN]
     +-- FlightNo (flight number)
     +-- SourceAirport (source airport) [FOREIGN]
     +-- DestAirport (destination airport) [FOREIGN]
NL: b'Which city is the most frequent source airport?'
NL tokens: [b'which', b'city', b'is', b'the', b'most', b'frequent', b'source', b'airport', b'?']
NL tokens (original): [b'Which', b'city', b'is', b'the', b'most', b'frequent', b'source', b'airport', b'?']
['[CLS]', 'which', 'city', 'is', 'the', 'most', 'frequent', 'source', 'airport', '?', '[SEP]', '*', '[unused50]', 'airlines', '[unused51]', 'airline', 'id', '[unused51]', 'airline', 'name', '[unused51]', 'abbreviation', '[unused51]', 'country', '[unused50]', 'airports', '[unused51]', 'city', '[unused51]', 'airport', 'code', '[unused51]', 'airport', 'name', '[unused51]', 'country', '[unused51]', 'country', 'ab', '##bre', '##v', '[unused50]', 'flights', '[unused51]', 'airline', '[unused51]', 'flight', 'number', '[unused51]', 'source', 'airport', '[unused51]', 'destination', 'airport', '[SEP]']
Target 0: b'SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from airports join flights on airports.AirportCode = flights.SourceAirport group by airports.City select airports.City order by count (*) desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT airports.City FROM airports GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1' (-0.000) (length=15)
[CORRE] [extra] Pred 1:	b'SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1' (-2.202) (length=21)
Error Case 24

Example 85
student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b'Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.'
NL tokens: [b'which', b'student', b'has', b'enrolled', b'for', b'the', b'most', b'times', b'in', b'any', b'program', b'?', b'list', b'the', b'id', b',', b'first', b'name', b',', b'middle', b'name', b',', b'last', b'name', b',', b'the', b'number', b'of', b'enrollment', b'##s', b'and', b'student', b'id', b'.']
NL tokens (original): [b'Which', b'student', b'has', b'enrolled', b'for', b'the', b'most', b'times', b'in', b'any', b'program', b'?', b'List', b'the', b'id', b',', b'first', b'name', b',', b'middle', b'name', b',', b'last', b'name', b',', b'the', b'number', b'of', b'enrollment', b'##s', b'and', b'student', b'id', b'.']
['[CLS]', 'which', 'student', 'has', 'enrolled', 'for', 'the', 'most', 'times', 'in', 'any', 'program', '?', 'list', 'the', 'id', ',', 'first', 'name', ',', 'middle', 'name', ',', 'last', 'name', ',', 'the', 'number', 'of', 'enrollment', '##s', 'and', 'student', 'id', '.', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b'SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from Students join Student_Enrolment on Students.student_id = Student_Enrolment.student_id group by Students.student_id select Students.student_id , Students.first_name , Students.middle_name , Students.last_name , count (*) , Students.student_id order by count (*) desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT Students.first_name, Students.last_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-0.007) (length=28)
[WRONG] [extra] Pred 1:	b'SELECT Student_Enrolment.student_id, Students.first_name, Students.last_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-0.529) (length=30)
[WRONG] [extra] Pred 2:	b'SELECT Student_Enrolment.student_id, Students.first_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.399) (length=28)
[WRONG] [extra] Pred 3:	b'SELECT Students.first_name, Students.last_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id UNION SELECT Student_Enrolment.student_id, Students.first_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.503) (length=48)
[WRONG] [extra] Pred 4:	b'SELECT Students.first_name, Students.last_name, COUNT(*), Student_Enrolment.student_id FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.680) (length=30)
[WRONG] [extra] Pred 5:	b'SELECT Students.first_name, COUNT(*), Student_Enrolment.student_id FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.696) (length=28)
[WRONG] [extra] Pred 6:	b'SELECT Student_Enrolment.student_id, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.751) (length=28)
[WRONG] [extra] Pred 7:	b'SELECT Students.first_name, Students.middle_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.997) (length=28)
[WRONG] [extra] Pred 8:	b'SELECT Student_Enrolment.student_id, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.076) (length=26)
[WRONG] [extra] Pred 9:	b'SELECT Student_Enrolment.student_id, Students.middle_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.123) (length=28)
[WRONG] [extra] Pred 10:	b'SELECT Student_Enrolment.student_id, Students.first_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.155) (length=25)
[WRONG] [extra] Pred 11:	b'SELECT Students.first_name, Students.last_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id UNION SELECT Student_Enrolment.student_id, Students.first_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id' (-2.256) (length=40)
[WRONG] [extra] Pred 12:	b'SELECT Students.first_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.397) (length=26)
[WRONG] [extra] Pred 13:	b'SELECT Students.first_name, Students.last_name, COUNT(*) + Student_Enrolment.student_id FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.534) (length=30)
[WRONG] [extra] Pred 14:	b'SELECT Students.first_name, Students.last_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) ASC LIMIT 1' (-2.670) (length=28)
[WRONG] [extra] Pred 15:	b'SELECT Students.first_name, Students.last_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) LIMIT 1' (-2.671) (length=27)
Error Case 25

ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Owners.owner_id', 'Dogs.owner_id']}}, {'join': 'Charges', 'on': {'eq': ['Dogs.dog_id', 'Dogs.breed_code']}}]
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Owners.owner_id', 'Dogs.owner_id']}}, {'join': 'Charges', 'on': {'eq': ['Dogs.dog_id', 'Dogs.size_code']}}]
Parsing error: from Owners join Dogs on Owners.owner_id = Dogs.owner_id group by Owners.owner_id select Owners.owner_id , Owners.zip_code order by 4 sum (Dogs.owner_id) desc limit 1
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Owners.owner_id', 'Dogs.owner_id']}}, {'join': 'Sizes', 'on': {'eq': ['Dogs.dog_id', 'Dogs.breed_code']}}]
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Owners.owner_id', 'Dogs.owner_id']}}, {'join': 'Sizes', 'on': {'eq': ['Dogs.dog_id', 'Dogs.size_code']}}]
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Owners.owner_id', 'Dogs.owner_id']}}, {'join': 'Sizes', 'on': {'eq': ['Dogs.dog_id', 'Dogs.breed_code']}}]
Example 87
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.'
NL tokens: [b'find', b'the', b'owner', b'id', b'and', b'zip', b'code', b'of', b'the', b'owner', b'who', b'spent', b'the', b'most', b'money', b'in', b'total', b'for', b'his', b'or', b'her', b'dogs', b'.']
NL tokens (original): [b'Find', b'the', b'owner', b'id', b'and', b'zip', b'code', b'of', b'the', b'owner', b'who', b'spent', b'the', b'most', b'money', b'in', b'total', b'for', b'his', b'or', b'her', b'dogs', b'.']
 85%|████████▍ | 11/13 [01:09<00:15,  7.94s/it]['[CLS]', 'find', 'the', 'owner', 'id', 'and', 'zip', 'code', 'of', 'the', 'owner', 'who', 'spent', 'the', 'most', 'money', 'in', 'total', 'for', 'his', 'or', 'her', 'dogs', '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1'
Target TF-P tokens: from Owners join Dogs on Owners.owner_id = Dogs.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id group by Owners.owner_id select Owners.owner_id , Owners.zip_code order by sum (Treatments.cost_of_treatment) desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY SUM(Dogs.date_arrived) DESC LIMIT 1' (-2.151) (length=23)
[WRONG] [extra] Pred 1:	b'SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.266) (length=23)
[WRONG] [extra] Pred 2:	b'SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY SUM(Dogs.date_departed) DESC LIMIT 1' (-2.288) (length=23)
[WRONG] [extra] Pred 3:	b'SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY SUM(Dogs.date_adopted) DESC LIMIT 1' (-2.463) (length=23)
[WRONG] [extra] Pred 4:	b'SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY SUM(*) DESC LIMIT 1' (-2.735) (length=23)
[WRONG] [extra] Pred 5:	b'SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY SUM(Dogs.owner_id) DESC LIMIT 1' (-2.790) (length=23)
[WRONG] [extra] Pred 6:	b'SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY 4 DESC LIMIT 1' (-3.483) (length=20)
[WRONG] [extra] Pred 7:	b'SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY SUM(Dogs.date_of_birth) DESC LIMIT 1' (-3.689) (length=23)
[WRONG] [extra] Pred 8:	b'SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY SUM(Dogs.weight) DESC LIMIT 1' (-3.764) (length=23)
[WRONG] [extra] Pred 9:	b'SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY 10 DESC LIMIT 1' (-3.983) (length=20)
Error Case 26

ERROR: table "cars_data" in field expression cars_data.Accelerate is not in the current scope
ERROR: Join condition does not match with table: ['model_list', {'join': 'cars_data', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
ERROR: Join condition does not match with table: ['model_list', {'join': 'cars_data', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
ERROR: Join condition does not match with table: ['cars_data', {'join': 'car_makers', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
ERROR: Join condition does not match with table: ['model_list', {'join': 'cars_data', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
ERROR: Join condition does not match with table: ['model_list', {'join': 'cars_data', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
ERROR: Join condition does not match with table: ['model_list', {'join': 'cars_data', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
ERROR: Join condition does not match with table: ['cars_data', {'join': 'car_makers', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
Parsing error: from cars_data where cars_data.Accelerate = (from cars_data y "select min (cars_data.Accelerate)) select sum (cars_data.Cylinders)"
ERROR: table "cars_data" in field expression cars_data.Accelerate is not in the current scope
ERROR: Join condition does not match with table: ['cars_data', {'join': 'car_makers', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
Example 88
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'For a volvo model, how many cylinders does the version with least accelerate have?'
NL tokens: [b'for', b'a', b'volvo', b'model', b',', b'how', b'many', b'cylinders', b'does', b'the', b'version', b'with', b'least', b'accelerate', b'have', b'?']
NL tokens (original): [b'For', b'a', b'volvo', b'model', b',', b'how', b'many', b'cylinders', b'does', b'the', b'version', b'with', b'least', b'accelerate', b'have', b'?']
['[CLS]', 'for', 'a', 'volvo', 'model', ',', 'how', 'many', 'cylinders', 'does', 'the', 'version', 'with', 'least', 'accelerate', 'have', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused49]', 'volvo', '[unused51]', 'full', 'name', '[unused49]', 'volvo', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused49]', 'volvo', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused49]', 'volvo', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b"SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"
Target TF-P tokens: from cars_data join car_names on cars_data.Id = car_names.MakeId where car_names.Model = "volvo" select cars_data.Cylinders order by cars_data.Accelerate asc limit 1

[WRONG] [extra] Pred 0:	b'SELECT cars_data.Cylinders FROM cars_data WHERE cars_data.Accelerate = (SELECT MIN(cars_data.Accelerate) FROM cars_data)' (-1.519) (length=17)
[WRONG] [extra] Pred 1:	b'SELECT SUM(cars_data.Cylinders) FROM cars_data WHERE cars_data.Accelerate = (SELECT MIN(cars_data.Accelerate) FROM cars_data)' (-2.314) (length=20)
[WRONG] [extra] Pred 2:	b'SELECT cars_data.Cylinders FROM cars_data WHERE cars_data.Accelerate = (SELECT MIN(cars_data.Accelerate) FROM cars_data) ORDER BY cars_data.Cylinders LIMIT 1' (-2.355) (length=21)
[WRONG] [extra] Pred 3:	b'SELECT cars_data.Cylinders FROM cars_data WHERE cars_data.Accelerate = (SELECT MIN(cars_data.Accelerate) FROM cars_data) ORDER BY cars_data.Accelerate LIMIT 1' (-2.561) (length=21)
[WRONG] [extra] Pred 4:	b'SELECT cars_data.Cylinders FROM cars_data WHERE cars_data.Accelerate = (SELECT MIN(cars_data.Accelerate) FROM cars_data JOIN car_makers ON cars_data.Id = car_makers.Id WHERE car_makers.FullName = "volvo")' (-2.930) (length=29)
Error Case 27

'on'
ERROR: table "Owners" in field expression Owners.owner_id is not in the current scope
ERROR: table "Owners" in field expression Owners.owner_id is not in the current scope
'on'
Example 89
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.'
NL tokens: [b'which', b'owner', b'has', b'paid', b'for', b'the', b'most', b'treatments', b'on', b'his', b'or', b'her', b'dogs', b'?', b'list', b'the', b'owner', b'id', b'and', b'last', b'name', b'.']
NL tokens (original): [b'Which', b'owner', b'has', b'paid', b'for', b'the', b'most', b'treatments', b'on', b'his', b'or', b'her', b'dogs', b'?', b'List', b'the', b'owner', b'id', b'and', b'last', b'name', b'.']
['[CLS]', 'which', 'owner', 'has', 'paid', 'for', 'the', 'most', 'treatments', 'on', 'his', 'or', 'her', 'dogs', '?', 'list', 'the', 'owner', 'id', 'and', 'last', 'name', '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from Owners join Dogs on Owners.owner_id = Dogs.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id group by Owners.owner_id select Owners.owner_id , Owners.last_name order by count (*) desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Treatments ON Owners.owner_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY COUNT(*) DESC LIMIT 1' (-0.283) (length=23)
[WRONG] [extra] Pred 1:	b'SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Treatments ON Owners.owner_id = Treatments.dog_id GROUP BY Owners.owner_id UNION SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Treatments ON Owners.owner_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.410) (length=38)
[WRONG] [extra] Pred 2:	b'SELECT Owners.owner_id, Owners.last_name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Treatments ON Dogs.breed_code = Treatments.treatment_id JOIN Owners ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.613) (length=35)
[CORRE] [extra] Pred 3:	b'SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY COUNT(*) DESC LIMIT 1' (-3.035) (length=29)
Error Case 28

'on'
ERROR: Join condition does not match with table: ['performance', {'join': 'orchestra', 'on': {'eq': ['orchestra.Conductor_ID', 'orchestra.Orchestra_ID']}}, {'join': 'conductor', 'on': {'eq': ['orchestra.Conductor_ID', 'conductor.Conductor_ID']}}]
ERROR: Join condition does not match with table: ['performance', {'join': 'orchestra', 'on': {'eq': ['performance.Orchestra_ID', 'performance.Performance_ID']}}, {'join': 'conductor', 'on': {'eq': ['orchestra.Conductor_ID', 'conductor.Conductor_ID']}}]
ERROR: Join condition does not match with table: ['performance', {'join': 'orchestra', 'on': {'eq': ['orchestra.Conductor_ID', 'orchestra.Orchestra_ID']}}, {'join': 'conductor', 'on': {'eq': ['orchestra.Conductor_ID', 'conductor.Conductor_ID']}}]
Example 93
orchestra
 +-- conductor (conductor)
 |   +-- Conductor_ID (conductor id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Age (age)
 |   +-- Nationality (nationality)
 |   +-- Year_of_Work (year of work)
 +-- orchestra (orchestra)
 |   +-- Orchestra_ID (orchestra id) [PRIMARY] [FOREIGN]
 |   +-- Orchestra (orchestra)
 |   +-- Conductor_ID (conductor id) [FOREIGN]
 |   +-- Record_Company (record company)
 |   +-- Year_of_Founded (year of founded)
 |   +-- Major_Record_Format (major record format)
 +-- performance (performance)
 |   +-- Performance_ID (performance id) [PRIMARY] [FOREIGN]
 |   +-- Orchestra_ID (orchestra id) [FOREIGN]
 |   +-- Type (type)
 |   +-- Date (date)
 |   +-- Official_ratings_(millions) (official ratings (millions))
 |   +-- Weekly_rank (weekly rank)
 |   +-- Share (share)
 +-- show (show)
     +-- Show_ID (show id)
     +-- Performance_ID (performance id) [FOREIGN]
     +-- If_first_show (if first show)
     +-- Result (result)
     +-- Attendance (attendance)
NL: b'What is the name of the conductor who has conducted the most orchestras?'
NL tokens: [b'what', b'is', b'the', b'name', b'of', b'the', b'conductor', b'who', b'has', b'conducted', b'the', b'most', b'orchestras', b'?']
NL tokens (original): [b'What', b'is', b'the', b'name', b'of', b'the', b'conductor', b'who', b'has', b'conducted', b'the', b'most', b'orchestras', b'?']
['[CLS]', 'what', 'is', 'the', 'name', 'of', 'the', 'conductor', 'who', 'has', 'conducted', 'the', 'most', 'orchestras', '?', '[SEP]', '*', '[unused50]', 'conductor', '[unused51]', 'conductor', 'id', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'nationality', '[unused51]', 'year', 'of', 'work', '[unused50]', 'orchestra', '[unused51]', 'orchestra', 'id', '[unused51]', 'orchestra', '[unused51]', 'conductor', 'id', '[unused51]', 'record', 'company', '[unused51]', 'year', 'of', 'founded', '[unused51]', 'major', 'record', 'format', '[unused50]', 'performance', '[unused51]', 'performance', 'id', '[unused51]', 'orchestra', 'id', '[unused51]', 'type', '[unused51]', 'date', '[unused51]', 'official', 'ratings', '(', 'millions', ')', '[unused51]', 'weekly', 'rank', '[unused51]', 'share', '[unused50]', 'show', '[unused51]', 'show', 'id', '[unused51]', 'performance', 'id', '[unused51]', 'if', 'first', 'show', '[unused51]', 'result', '[unused51]', 'attendance', '[SEP]']
Target 0: b'SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1'
Target TF-P tokens: from conductor join orchestra on conductor.Conductor_ID = orchestra.Conductor_ID group by orchestra.Conductor_ID select conductor.Name order by count (*) desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT conductor.Name FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1' (-2.900) (length=27)
[WRONG] [extra] Pred 1:	b'SELECT conductor.Name FROM performance JOIN orchestra ON orchestra.Orchestra = performance.Performance_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1' (-3.239) (length=27)
[WRONG] [extra] Pred 2:	b'SELECT conductor.Name FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Name ORDER BY COUNT(*) DESC LIMIT 1' (-3.299) (length=27)
[WRONG] [extra] Pred 3:	b'SELECT conductor.Name FROM performance JOIN orchestra ON orchestra.Orchestra = performance.Performance_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Name ORDER BY COUNT(*) DESC LIMIT 1' (-3.693) (length=27)
[WRONG] [extra] Pred 4:	b'SELECT conductor.Name FROM performance JOIN orchestra ON orchestra.Conductor_ID = performance.Performance_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1' (-3.848) (length=27)
[WRONG] [extra] Pred 5:	b'SELECT conductor.Name FROM performance JOIN orchestra ON orchestra.Orchestra = performance.Orchestra_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1' (-3.995) (length=27)
[CORRE] [extra] Pred 6:	b'SELECT conductor.Name FROM orchestra JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1' (-4.067) (length=21)
Error Case 29

ERROR: table "model_list" in field expression model_list.Model is not in the current scope
ERROR: Join condition does not match with table: ['cars_data', {'join': 'car_names', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
ERROR: Join condition does not match with table: ['model_list', {'join': 'cars_data', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
ERROR: Join condition does not match with table: ['cars_data', {'join': 'car_names', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
ERROR: table "cars_data" in field expression cars_data.Accelerate is not in the current scope
ERROR: table "cars_data" in field expression cars_data.Accelerate is not in the current scope
ERROR: table "model_list" in field expression model_list.Model is not in the current scope
ERROR: table "cars_data" in field expression cars_data.Accelerate is not in the current scope
ERROR: table "cars_data" in field expression cars_data.Accelerate is not in the current scope
ERROR: Join condition does not match with table: ['model_list', {'join': 'cars_data', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
ERROR: Join condition does not match with table: ['model_list', {'join': 'cars_data', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
ERROR: table "model_list" in field expression model_list.Model is not in the current scope
ERROR: Join condition does not match with table: ['model_list', {'join': 'cars_data', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
ERROR: table "model_list" in field expression model_list.Model is not in the current scope
ERROR: Join condition does not match with table: ['model_list', {'join': 'cars_data', 'on': {'eq': ['model_list.ModelId', 'model_list.ModelId']}}]
ERROR: table "cars_data" in field expression cars_data.Accelerate is not in the current scope
Example 94
 92%|█████████▏| 12/13 [01:32<00:12, 12.67s/it]car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'For model volvo, how many cylinders does the car with the least accelerate have?'
NL tokens: [b'for', b'model', b'volvo', b',', b'how', b'many', b'cylinders', b'does', b'the', b'car', b'with', b'the', b'least', b'accelerate', b'have', b'?']
NL tokens (original): [b'For', b'model', b'volvo', b',', b'how', b'many', b'cylinders', b'does', b'the', b'car', b'with', b'the', b'least', b'accelerate', b'have', b'?']
['[CLS]', 'for', 'model', 'volvo', ',', 'how', 'many', 'cylinders', 'does', 'the', 'car', 'with', 'the', 'least', 'accelerate', 'have', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused49]', 'volvo', '[unused51]', 'full', 'name', '[unused49]', 'volvo', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused49]', 'volvo', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused49]', 'volvo', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b"SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"
Target TF-P tokens: from cars_data join car_names on cars_data.Id = car_names.MakeId where car_names.Model = "volvo" select cars_data.Cylinders order by cars_data.Accelerate asc limit 1

[WRONG] extra Pred 0:	No valid output! (0.000)
Error Case 30

Example 97
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'Who owns the youngest dog? Give me his or her last name.'
NL tokens: [b'who', b'owns', b'the', b'youngest', b'dog', b'?', b'give', b'me', b'his', b'or', b'her', b'last', b'name', b'.']
NL tokens (original): [b'Who', b'owns', b'the', b'youngest', b'dog', b'?', b'Give', b'me', b'his', b'or', b'her', b'last', b'name', b'.']
['[CLS]', 'who', 'owns', 'the', 'youngest', 'dog', '?', 'give', 'me', 'his', 'or', 'her', 'last', 'name', '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )'
Target TF-P tokens: from Owners join Dogs on Owners.owner_id = Dogs.owner_id where Dogs.age = (from Dogs select max (Dogs.age)) select Owners.last_name

[WRONG] [extra] Pred 0:	b'SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.age DESC LIMIT 1' (-0.297) (length=16)
[WRONG] [extra] Pred 1:	b'SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.date_of_birth DESC LIMIT 1' (-0.431) (length=16)
[WRONG] [extra] Pred 2:	b'SELECT Owners.last_name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id ORDER BY Dogs.age DESC LIMIT 1' (-0.554) (length=16)
[WRONG] [extra] Pred 3:	b'SELECT Owners.last_name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id ORDER BY Dogs.date_of_birth DESC LIMIT 1' (-1.021) (length=16)
100%|██████████| 13/13 [01:44<00:00, 12.20s/it]
[CORRE] [extra] Pred 4:	b'SELECT Owners.last_name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id WHERE Dogs.age = (SELECT MAX(Dogs.age) FROM Dogs)' (-2.144) (length=23)
Error Case 31

ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
Parsing error: from Dogs + Dogs.breed_code = (from Breeds join Treatments on Breeds.breed_code = Treatments.dog_id group by Dogs.breed_code select Dogs.breed_code order by count (*) asc limit 1) select Dogs.name , Treatments.date_of_treatment union from Breeds join Treatments on Breeds.breed_code = Treatments.dog_id group by Dogs.breed_code select Dogs.name , Treatments.date_of_treatment order by count (*) asc limit 1
ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
Example 99
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'Which dogs are of the rarest breed? Show their names and treatment dates.'
NL tokens: [b'which', b'dogs', b'are', b'of', b'the', b'rare', b'##st', b'breed', b'?', b'show', b'their', b'names', b'and', b'treatment', b'dates', b'.']
NL tokens (original): [b'Which', b'dogs', b'are', b'of', b'the', b'rare', b'##st', b'breed', b'?', b'Show', b'their', b'names', b'and', b'treatment', b'dates', b'.']
['[CLS]', 'which', 'dogs', 'are', 'of', 'the', 'rare', '##st', 'breed', '?', 'show', 'their', 'names', 'and', 'treatment', 'dates', '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )'
Target TF-P tokens: from Dogs join Treatments on Dogs.dog_id = Treatments.dog_id where Dogs.breed_code = (from Dogs group by Dogs.breed_code select Dogs.breed_code order by count (*) asc limit 1) select Dogs.name , Treatments.date_of_treatment

[WRONG] [extra] Pred 0:	b'SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.breed_code ORDER BY COUNT(*) ASC LIMIT 1' (-0.887) (length=23)
Error Case 32

Model predictions saved to /home/shelunts/thesis/TabularSemantingParsing/model/spider.bridge.lstm.meta.ts.ppl-0.85.2.dn.eo.feat.bert-large-uncased.xavier-1024-400-400-8-2-0.0005-inv-sqr-0.0005-4000-6e-05-inv-sqr-3e-05-4000-0.3-0.3-0.0-0.0-1-8-0.0-0.0-res-0.2-0.0-ff-0.4-0.0/predictions.16.1.05.dev.txt
DEV set performance
Top-1 exact match: 0.680
Top-2 exact match: 0.700
Top-3 exact match: 0.700
Top-5 exact match: 0.750
Top-10 exact match: 0.770
Table error: -0.060
