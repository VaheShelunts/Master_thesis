run python3 -m src.experiments     --inference     --data_dir data/spider     --db_dir data/spider/database     --dataset_name spider     --question_split          --question_only               --denormalize_sql               --table_shuffling     --use_lstm_encoder     --use_meta_data_encoding          --sql_consistency_check          --use_picklist     --anchor_text_match_threshold 0.85               --top_k_picklist_matches 2     --process_sql_in_execution_order               --num_random_tables_added 0                         --save_best_model_only     --schema_augmentation_factor 1          --data_augmentation_factor 1          --vocab_min_freq 0     --text_vocab_min_freq 0     --program_vocab_min_freq 0     --num_values_per_field 0     --max_in_seq_len 512     --max_out_seq_len 60     --model bridge     --num_steps 100000     --curriculum_interval 0     --num_peek_steps 1000     --num_accumulation_steps 2     --train_batch_size 8     --dev_batch_size 8     --encoder_input_dim 1024     --encoder_hidden_dim 400     --decoder_input_dim 400     --num_rnn_layers 1     --num_const_attn_layers 0     --emb_dropout_rate 0.3     --pretrained_lm_dropout_rate 0     --rnn_layer_dropout_rate 0     --rnn_weight_dropout_rate 0     --cross_attn_dropout_rate 0     --cross_attn_num_heads 8     --res_input_dropout_rate 0.2     --res_layer_dropout_rate 0     --ff_input_dropout_rate 0.4     --ff_hidden_dropout_rate 0.0     --pretrained_transformer bert-large-uncased          --bert_finetune_rate 0.00006     --learning_rate 0.0005     --learning_rate_scheduler inverse-square     --trans_learning_rate_scheduler inverse-square     --warmup_init_lr 0.0005     --warmup_init_ft_lr 0.00003     --num_warmup_steps 4000     --grad_norm 0.3     --decoding_algorithm beam-search     --beam_size 16     --bs_alpha 1.05     --gpu 0     --checkpoint_path /home/shelunts/thesis/TabularSemantingParsing/model/spider.bridge.lstm.meta.ts.ppl-0.85.2.dn.eo.feat.bert-large-uncased.xavier-1024-400-400-8-2-0.0005-inv-sqr-0.0005-4000-6e-05-inv-sqr-3e-05-4000-0.3-0.3-0.0-0.0-1-8-0.0-0.0-res-0.2-0.0-ff-0.4-0.0.220119-195756.tg05/model-best.16.tar
2022-01-22 12:54:02.637690: I tensorflow/stream_executor/platform/default/dso_loader.cc:53] Successfully opened dynamic library libcudart.so.11.0
  0%|          | 0/130 [00:00<?, ?it/s]/usr/lib/python3/dist-packages/torch/_tensor.py:575: UserWarning: floor_divide is deprecated, and will be removed in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values.
To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor'). (Triggered internally at  ../aten/src/ATen/native/BinaryOps.cpp:461.)
  return torch.floor_divide(self, other)
  1%|          | 1/130 [00:08<18:17,  8.51s/it]  2%|▏         | 2/130 [00:09<13:06,  6.14s/it]Model directory exists: /home/shelunts/thesis/TabularSemantingParsing/model/spider.bridge.lstm.meta.ts.ppl-0.85.2.dn.eo.feat.bert-large-uncased.xavier-1024-400-400-8-2-0.0005-inv-sqr-0.0005-4000-6e-05-inv-sqr-3e-05-4000-0.3-0.3-0.0-0.0-1-8-0.0-0.0-res-0.2-0.0-ff-0.4-0.0
Visualization directory exists: /home/shelunts/thesis/TabularSemantingParsing/viz/spider.bridge.lstm.meta.ts.ppl-0.85.2.dn.eo.feat.bert-large-uncased.xavier-1024-400-400-8-2-0.0005-inv-sqr-0.0005-4000-6e-05-inv-sqr-3e-05-4000-0.3-0.3-0.0-0.0-1-8-0.0-0.0-res-0.2-0.0-ff-0.4-0.0
* text vocab size = 30522
* program vocab size = 99

pretrained_transformer = bert-large-uncased
fix_pretrained_transformer_parameters = False

bridge module created
loading preprocessed data: data/spider/spider.bridge.question-split.ppl-0.85.2.dn.eo.bert.pkl
1034 dev examples loaded
=> loading checkpoint '/home/shelunts/thesis/TabularSemantingParsing/model/spider.bridge.lstm.meta.ts.ppl-0.85.2.dn.eo.feat.bert-large-uncased.xavier-1024-400-400-8-2-0.0005-inv-sqr-0.0005-4000-6e-05-inv-sqr-3e-05-4000-0.3-0.3-0.0-0.0-1-8-0.0-0.0-res-0.2-0.0-ff-0.4-0.0.220119-195756.tg05/model-best.16.tar'
0 pre-computed prediction order reconstruction cached
Parsing error: from singer where singer.Is_male = "French" select avg (singer.Age) in (from singer where singer.Is_male = "French" select max (singer.Age)) select avg (singer.Age) , min (singer.Age) , singer.Age
Parsing error: from singer where singer.Is_male = "French" select avg (singer.Age) in (from singer where singer.Is_male = "French" select avg (singer.Age)) select avg (singer.Age) , min (singer.Age) , singer.Age
Parsing error: from singer where singer.Is_male = "French" select avg (singer.Age) in (from singer where singer.Is_male = "French" select avg (singer.Age)) select avg (singer.Age) , min (singer.Age) , max (singer.Age)
Parsing error: from singer where singer.Is_male = "French" select avg (singer.Age) in (from singer where singer.Is_male = "French" select max (singer.Age)) select avg (singer.Age) , min (singer.Age) , max (singer.Age)
Parsing error: from singer where singer.Is_male = "French" select avg (singer.Age) in (from singer where singer.Is_male = "French" select avg (singer.Age)) select avg (singer.Age) , min (singer.Age)
Parsing error: from singer where singer.Is_male = "French" select avg (singer.Age) in (from singer where singer.Is_male = "French" select min (singer.Age)) select avg (singer.Age) , min (singer.Age) , singer.Age
Parsing error: from singer where singer.Is_male = "French" select avg (singer.Age) in (from singer where singer.Is_male = "French" select max (singer.Age)) select avg (singer.Age) , min (singer.Age)
Parsing error: from singer where singer.Is_male = "French" select avg (singer.Age) in (from singer where singer.Is_male = "French" select max (singer.Age)) select avg (singer.Age) , min (singer.Age) , singer.Singer_ID
Parsing error: from singer where singer.Is_male = "French" select avg (singer.Age) in (from singer where singer.Is_male = "French" select min (singer.Age)) select avg (singer.Age) , min (singer.Age) , max (singer.Age)
Parsing error: from singer where singer.Is_male = "French" select avg (singer.Age) in (from singer where singer.Is_male = "French" select singer.Age) select avg (singer.Age) , min (singer.Age)
Parsing error: from singer where singer.Is_male = "French" select avg (singer.Age) in (from singer where singer.Is_male = "French" select max (singer.Age)) select avg (singer.Age) , min (singer.Age) , singer.Is_male
Parsing error: from singer where singer.Is_male = "French" select avg (singer.Age) in (from singer where singer.Is_male = "French" select singer.Age) select avg (singer.Age) , min (singer.Age) , max (singer.Age)
Parsing error: from singer where singer.Is_male = "French" select avg (singer.Age) in (from singer where singer.Is_male = "French" select min (singer.Age)) select avg (singer.Age) , min (singer.Age)
Example 5
concert_singer
 +-- stadium (stadium)
 |   +-- Stadium_ID (stadium id) [PRIMARY] [FOREIGN]
 |   +-- Location (location)
 |   +-- Name (name)
 |   +-- Capacity (capacity)
 |   +-- Highest (highest)
 |   +-- Lowest (lowest)
 |   +-- Average (average)
 +-- singer (singer)
 |   +-- Singer_ID (singer id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Country (country)
 |   +-- Song_Name (song name)
 |   +-- Song_release_year (song release year)
 |   +-- Age (age)
 |   +-- Is_male (is male)
 +-- concert (concert)
 |   +-- concert_ID (concert id) [PRIMARY] [FOREIGN]
 |   +-- concert_Name (concert name)
 |   +-- Theme (theme)
 |   +-- Stadium_ID (stadium id) [FOREIGN]
 |   +-- Year (year)
 +-- singer_in_concert (singer in concert)
     +-- concert_ID (concert id) [PRIMARY] [FOREIGN]
     +-- Singer_ID (singer id) [FOREIGN]
NL: b'What is the average, minimum, and maximum age for all French singers?'
NL tokens: [b'what', b'is', b'the', b'average', b',', b'minimum', b',', b'and', b'maximum', b'age', b'for', b'all', b'french', b'singers', b'?']
NL tokens (original): [b'What', b'is', b'the', b'average', b',', b'minimum', b',', b'and', b'maximum', b'age', b'for', b'all', b'French', b'singers', b'?']
['[CLS]', 'what', 'is', 'the', 'average', ',', 'minimum', ',', 'and', 'maximum', 'age', 'for', 'all', 'french', 'singers', '?', '[SEP]', '*', '[unused50]', 'stadium', '[unused51]', 'stadium', 'id', '[unused51]', 'location', '[unused51]', 'name', '[unused51]', 'capacity', '[unused51]', 'highest', '[unused51]', 'lowest', '[unused51]', 'average', '[unused50]', 'singer', '[unused51]', 'singer', 'id', '[unused51]', 'name', '[unused51]', 'country', '[unused51]', 'song', 'name', '[unused51]', 'song', 'release', 'year', '[unused51]', 'age', '[unused51]', 'is', 'male', '[unused50]', 'concert', '[unused51]', 'concert', 'id', '[unused51]', 'concert', 'name', '[unused51]', 'theme', '[unused51]', 'stadium', 'id', '[unused51]', 'year', '[unused50]', 'singer', 'in', 'concert', '[unused51]', 'concert', 'id', '[unused51]', 'singer', 'id', '[SEP]']
Target 0: b"SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"
Target TF-P tokens: from singer where singer.Country = "VALUE" select avg (singer.Age) , min (singer.Age) , max (singer.Age)

[WRONG] [medium] Pred 0:	b'SELECT AVG(singer.Age), MIN(singer.Age), MAX(singer.Age) FROM singer WHERE singer.Is_male = "French"' (-0.000) (length=24)
[WRONG] [medium] Pred 1:	b'SELECT AVG(singer.Age), MIN(singer.Age), MAX(singer.Age) FROM singer WHERE singer.Is_male = "French" AND singer.Age = (SELECT MAX(singer.Age) FROM singer WHERE singer.Is_male = "French")' (-1.855) (length=42)
[WRONG] [medium] Pred 2:	b'SELECT AVG(singer.Age), MIN(singer.Age), singer.Age FROM singer WHERE singer.Is_male = "French" AND singer.Age = (SELECT MAX(singer.Age) FROM singer WHERE singer.Is_male = "French")' (-1.945) (length=39)
Error Case 1

Parsing error: from stadium select max max (stadium.Capacity) , avg (stadium.Average)
Parsing error: from stadium select max (stadium.Capacity) in (from stadium select stadium.Average
Parsing error: from stadium select max (stadium.Capacity) (avg (stadium.Average)
Parsing error: from stadium select max (stadium.Capacity)) , avg (stadium.Average)
Parsing error: from stadium select on (stadium.Capacity) , avg (stadium.Average)
Parsing error: from stadium select on max (stadium.Capacity) , avg (stadium.Average)
Parsing error: from stadium select max (stadium.Capacity) , avg (stadium.Average) ,
Example 16
  2%|▏         | 3/130 [00:12<11:31,  5.45s/it]  3%|▎         | 4/130 [00:13<08:29,  4.05s/it]  4%|▍         | 5/130 [00:15<07:06,  3.41s/it]concert_singer
 +-- stadium (stadium)
 |   +-- Stadium_ID (stadium id) [PRIMARY] [FOREIGN]
 |   +-- Location (location)
 |   +-- Name (name)
 |   +-- Capacity (capacity)
 |   +-- Highest (highest)
 |   +-- Lowest (lowest)
 |   +-- Average (average)
 +-- singer (singer)
 |   +-- Singer_ID (singer id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Country (country)
 |   +-- Song_Name (song name)
 |   +-- Song_release_year (song release year)
 |   +-- Age (age)
 |   +-- Is_male (is male)
 +-- concert (concert)
 |   +-- concert_ID (concert id) [PRIMARY] [FOREIGN]
 |   +-- concert_Name (concert name)
 |   +-- Theme (theme)
 |   +-- Stadium_ID (stadium id) [FOREIGN]
 |   +-- Year (year)
 +-- singer_in_concert (singer in concert)
     +-- concert_ID (concert id) [PRIMARY] [FOREIGN]
     +-- Singer_ID (singer id) [FOREIGN]
NL: b'What is the maximum capacity and the average of all stadiums ?'
NL tokens: [b'what', b'is', b'the', b'maximum', b'capacity', b'and', b'the', b'average', b'of', b'all', b'stadiums', b'?']
NL tokens (original): [b'What', b'is', b'the', b'maximum', b'capacity', b'and', b'the', b'average', b'of', b'all', b'stadiums', b'?']
['[CLS]', 'what', 'is', 'the', 'maximum', 'capacity', 'and', 'the', 'average', 'of', 'all', 'stadiums', '?', '[SEP]', '*', '[unused50]', 'stadium', '[unused51]', 'stadium', 'id', '[unused51]', 'location', '[unused51]', 'name', '[unused51]', 'capacity', '[unused51]', 'highest', '[unused51]', 'lowest', '[unused51]', 'average', '[unused50]', 'singer', '[unused51]', 'singer', 'id', '[unused51]', 'name', '[unused51]', 'country', '[unused51]', 'song', 'name', '[unused51]', 'song', 'release', 'year', '[unused51]', 'age', '[unused51]', 'is', 'male', '[unused50]', 'concert', '[unused51]', 'concert', 'id', '[unused51]', 'concert', 'name', '[unused51]', 'theme', '[unused51]', 'stadium', 'id', '[unused51]', 'year', '[unused50]', 'singer', 'in', 'concert', '[unused51]', 'concert', 'id', '[unused51]', 'singer', 'id', '[SEP]']
Target 0: b'select max(capacity), average from stadium'
Target TF-P tokens: from stadium select max (stadium.Capacity) , stadium.Average

[WRONG] [medium] Pred 0:	b'SELECT MAX(stadium.Capacity), AVG(stadium.Average) FROM stadium' (-0.000) (length=13)
[WRONG] [medium] Pred 1:	b'SELECT MAX(stadium.Capacity), AVG(stadium.Average) FROM stadium' (-3.006) (length=18)
[WRONG] [medium] Pred 2:	b'SELECT MAX(stadium.Capacity), AVG(stadium.Average) FROM stadium WHERE stadium.Capacity = (SELECT MAX(stadium.Capacity) FROM stadium)' (-3.555) (length=25)
[WRONG] [medium] Pred 3:	b'SELECT MAX(stadium.Capacity), MAX(stadium.Average), stadium.Average FROM stadium GROUP BY stadium.Capacity' (-4.835) (length=17)
[WRONG] [medium] Pred 4:	b'SELECT MAX(stadium.Capacity), AVG(stadium.Average), stadium.Average FROM stadium GROUP BY stadium.Capacity' (-5.180) (length=17)
[WRONG] [medium] Pred 5:	b'SELECT SUM(stadium.Capacity), AVG(stadium.Average) FROM stadium' (-5.348) (length=13)
[WRONG] [medium] Pred 6:	b'SELECT MAX(stadium.Capacity), MIN(stadium.Average) FROM stadium' (-5.732) (length=13)
[WRONG] [medium] Pred 7:	b'SELECT MIN(stadium.Capacity), AVG(stadium.Average) FROM stadium' (-5.760) (length=13)
[WRONG] [medium] Pred 8:	b'SELECT MAX(stadium.Capacity), AVG(stadium.Average), stadium.Average FROM stadium WHERE stadium.Capacity = (SELECT MAX(stadium.Capacity) FROM stadium)' (-5.839) (length=27)
Error Case 2

Example 19
concert_singer
 +-- stadium (stadium)
 |   +-- Stadium_ID (stadium id) [PRIMARY] [FOREIGN]
 |   +-- Location (location)
 |   +-- Name (name)
 |   +-- Capacity (capacity)
 |   +-- Highest (highest)
 |   +-- Lowest (lowest)
 |   +-- Average (average)
 +-- singer (singer)
 |   +-- Singer_ID (singer id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Country (country)
 |   +-- Song_Name (song name)
 |   +-- Song_release_year (song release year)
 |   +-- Age (age)
 |   +-- Is_male (is male)
 +-- concert (concert)
 |   +-- concert_ID (concert id) [PRIMARY] [FOREIGN]
 |   +-- concert_Name (concert name)
 |   +-- Theme (theme)
 |   +-- Stadium_ID (stadium id) [FOREIGN]
 |   +-- Year (year)
 +-- singer_in_concert (singer in concert)
     +-- concert_ID (concert id) [PRIMARY] [FOREIGN]
     +-- Singer_ID (singer id) [FOREIGN]
NL: b'What is the name and capacity for the stadium with the highest average attendance?'
NL tokens: [b'what', b'is', b'the', b'name', b'and', b'capacity', b'for', b'the', b'stadium', b'with', b'the', b'highest', b'average', b'attendance', b'?']
NL tokens (original): [b'What', b'is', b'the', b'name', b'and', b'capacity', b'for', b'the', b'stadium', b'with', b'the', b'highest', b'average', b'attendance', b'?']
['[CLS]', 'what', 'is', 'the', 'name', 'and', 'capacity', 'for', 'the', 'stadium', 'with', 'the', 'highest', 'average', 'attendance', '?', '[SEP]', '*', '[unused50]', 'stadium', '[unused51]', 'stadium', 'id', '[unused51]', 'location', '[unused51]', 'name', '[unused51]', 'capacity', '[unused51]', 'highest', '[unused51]', 'lowest', '[unused51]', 'average', '[unused50]', 'singer', '[unused51]', 'singer', 'id', '[unused51]', 'name', '[unused51]', 'country', '[unused51]', 'song', 'name', '[unused51]', 'song', 'release', 'year', '[unused51]', 'age', '[unused51]', 'is', 'male', '[unused50]', 'concert', '[unused51]', 'concert', 'id', '[unused51]', 'concert', 'name', '[unused51]', 'theme', '[unused51]', 'stadium', 'id', '[unused51]', 'year', '[unused50]', 'singer', 'in', 'concert', '[unused51]', 'concert', 'id', '[unused51]', 'singer', 'id', '[SEP]']
Target 0: b'SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1'
Target TF-P tokens: from stadium select stadium.Name , stadium.Capacity order by stadium.Average desc limit 1

[WRONG] [medium] Pred 0:	b'SELECT stadium.Name, stadium.Capacity FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID GROUP BY concert.Stadium_ID ORDER BY AVG(stadium.Average) DESC LIMIT 1' (-0.065) (length=23)
[CORRE] [medium] Pred 1:	b'SELECT stadium.Name, stadium.Capacity FROM stadium ORDER BY stadium.Average DESC LIMIT 1' (-0.436) (length=12)
Error Case 3

Parsing error: from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on concert on singer_in_concert.concert_ID = concert.concert_ID where concert.Year = 2014 select singer.Name
Parsing error: from stadium join concert on stadium.Stadium_ID = concert.Stadium_ID select count (*) union from stadium on stadium.Stadium_ID = concert.Stadium_ID select count (*)
ERROR: table "stadium" in field expression stadium.Capacity is not in the current scope
Parsing error: from stadium join concert on stadium.Stadium_ID = concert.Stadium_ID select count (*) : stadium.Stadium_ID order by stadium.Capacity desc limit 1
Parsing error: from stadium join concert on stadium.Stadium_ID = concert.Stadium_ID select count (*) desc limit 1
Parsing error: from stadium join concert on stadium.Stadium_ID = concert.Stadium_ID order by count (*) desc limit 1
Parsing error: from stadium join concert on stadium.Stadium_ID = concert.Stadium_ID select count (*) asc limit 1
Parsing error: from stadium join concert on stadium.Stadium_ID = concert.Stadium_ID select count (*) union limit 1
Example 43
concert_singer
 +-- stadium (stadium)
 |   +-- Stadium_ID (stadium id) [PRIMARY] [FOREIGN]
 |   +-- Location (location)
 |   +-- Name (name)
 |   +-- Capacity (capacity)
 |   +-- Highest (highest)
 |   +-- Lowest (lowest)
 |   +-- Average (average)
 +-- singer (singer)
 |   +-- Singer_ID (singer id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Country (country)
 |   +-- Song_Name (song name)
 |   +-- Song_release_year (song release year)
 |   +-- Age (age)
 |   +-- Is_male (is male)
 +-- concert (concert)
 |   +-- concert_ID (concert id) [PRIMARY] [FOREIGN]
 |   +-- concert_Name (concert name)
 |   +-- Theme (theme)
 |   +-- Stadium_ID (stadium id) [FOREIGN]
 |   +-- Year (year)
 +-- singer_in_concert (singer in concert)
     +-- concert_ID (concert id) [PRIMARY] [FOREIGN]
     +-- Singer_ID (singer id) [FOREIGN]
NL: b'Find the number of concerts happened in the stadium with the highest capacity .'
NL tokens: [b'find', b'the', b'number', b'of', b'concerts', b'happened', b'in', b'the', b'stadium', b'with', b'the', b'highest', b'capacity', b'.']
NL tokens (original): [b'Find', b'the', b'number', b'of', b'concerts', b'happened', b'in', b'the', b'stadium', b'with', b'the', b'highest', b'capacity', b'.']
['[CLS]', 'find', 'the', 'number', 'of', 'concerts', 'happened', 'in', 'the', 'stadium', 'with', 'the', 'highest', 'capacity', '.', '[SEP]', '*', '[unused50]', 'stadium', '[unused51]', 'stadium', 'id', '[unused51]', 'location', '[unused51]', 'name', '[unused51]', 'capacity', '[unused51]', 'highest', '[unused51]', 'lowest', '[unused51]', 'average', '[unused50]', 'singer', '[unused51]', 'singer', 'id', '[unused51]', 'name', '[unused51]', 'country', '[unused51]', 'song', 'name', '[unused51]', 'song', 'release', 'year', '[unused51]', 'age', '[unused51]', 'is', 'male', '[unused50]', 'concert', '[unused51]', 'concert', 'id', '[unused51]', 'concert', 'name', '[unused51]', 'theme', '[unused51]', 'stadium', 'id', '[unused51]', 'year', '[unused50]', 'singer', 'in', 'concert', '[unused51]', 'concert', 'id', '[unused51]', 'singer', 'id', '[SEP]']
Target 0: b'select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)'
Target TF-P tokens: from concert where concert.Stadium_ID = (from stadium select stadium.Stadium_ID order by stadium.Capacity desc limit 1) select count (*)

[WRONG] [hard] Pred 0:	b'SELECT COUNT(*) FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID' (-0.022) (length=14)
[WRONG] [hard] Pred 1:	b'SELECT COUNT(*) FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID ORDER BY stadium.Capacity DESC LIMIT 1' (-0.727) (length=19)
[WRONG] [hard] Pred 2:	b'SELECT COUNT(*) FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID ORDER BY stadium.Capacity DESC LIMIT 1' (-0.862) (length=19)
[WRONG] [hard] Pred 3:	b'SELECT COUNT(*) FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE stadium.Capacity = (SELECT MAX(stadium.Capacity) FROM stadium)' (-1.297) (length=26)
[WRONG] [hard] Pred 4:	b'SELECT COUNT(*) FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE stadium.Capacity = (SELECT MAX(stadium.Capacity) FROM stadium)' (-1.498) (length=26)
[WRONG] [hard] Pred 5:	b'SELECT COUNT(*) FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY concert.Stadium_ID ORDER BY MAX(stadium.Capacity) DESC LIMIT 1' (-2.516) (length=24)
[WRONG] [hard] Pred 6:	b'SELECT COUNT(*) FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY concert.Stadium_ID ORDER BY stadium.Capacity DESC LIMIT 1' (-2.687) (length=21)
[WRONG] [hard] Pred 7:	b'SELECT COUNT(*) FROM stadium ORDER BY stadium.Capacity DESC LIMIT 1' (-2.745) (length=13)
[WRONG] [hard] Pred 8:	b'SELECT COUNT(*) FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID' (-3.073) (length=14)
Error Case 4

Parsing error: from stadium join concert on stadium.Stadium_ID = concert.Stadium_ID select count (*) union from stadium on stadium.Stadium_ID = concert.Stadium_ID select count (*)
ERROR: table "stadium" in field expression stadium.Capacity is not in the current scope
Parsing error: from stadium join concert on stadium.Stadium_ID = concert.Stadium_ID order by count (*) desc limit 1
Parsing error: from stadium join concert on stadium.Stadium_ID = concert.Stadium_ID select count (*) desc limit 1
Parsing error: from stadium join concert on stadium.Stadium_ID = concert.Stadium_ID select count (*) asc limit 1
Parsing error: from stadium join concert on stadium.Stadium_ID = concert.Stadium_ID select count (*) : stadium.Stadium_ID
Example 44
concert_singer
 +-- stadium (stadium)
 |   +-- Stadium_ID (stadium id) [PRIMARY] [FOREIGN]
 |   +-- Location (location)
 |   +-- Name (name)
 |   +-- Capacity (capacity)
 |   +-- Highest (highest)
 |   +-- Lowest (lowest)
 |   +-- Average (average)
 +-- singer (singer)
 |   +-- Singer_ID (singer id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Country (country)
 |   +-- Song_Name (song name)
 |   +-- Song_release_year (song release year)
 |   +-- Age (age)
 |   +-- Is_male (is male)
 +-- concert (concert)
 |   +-- concert_ID (concert id) [PRIMARY] [FOREIGN]
 |   +-- concert_Name (concert name)
 |   +-- Theme (theme)
 |   +-- Stadium_ID (stadium id) [FOREIGN]
 |   +-- Year (year)
 +-- singer_in_concert (singer in concert)
     +-- concert_ID (concert id) [PRIMARY] [FOREIGN]
     +-- Singer_ID (singer id) [FOREIGN]
NL: b'What are the number of concerts that occurred in the stadium with the largest capacity ?'
NL tokens: [b'what', b'are', b'the', b'number', b'of', b'concerts', b'that', b'occurred', b'in', b'the', b'stadium', b'with', b'the', b'largest', b'capacity', b'?']
NL tokens (original): [b'What', b'are', b'the', b'number', b'of', b'concerts', b'that', b'occurred', b'in', b'the', b'stadium', b'with', b'the', b'largest', b'capacity', b'?']
['[CLS]', 'what', 'are', 'the', 'number', 'of', 'concerts', 'that', 'occurred', 'in', 'the', 'stadium', 'with', 'the', 'largest', 'capacity', '?', '[SEP]', '*', '[unused50]', 'stadium', '[unused51]', 'stadium', 'id', '[unused51]', 'location', '[unused51]', 'name', '[unused51]', 'capacity', '[unused51]', 'highest', '[unused51]', 'lowest', '[unused51]', 'average', '[unused50]', 'singer', '[unused51]', 'singer', 'id', '[unused51]', 'name', '[unused51]', 'country', '[unused51]', 'song', 'name', '[unused51]', 'song', 'release', 'year', '[unused51]', 'age', '[unused51]', 'is', 'male', '[unused50]', 'concert', '[unused51]', 'concert', 'id', '[unused51]', 'concert', 'name', '[unused51]', 'theme', '[unused51]', 'stadium', 'id', '[unused51]', 'year', '[unused50]', 'singer', 'in', 'concert', '[unused51]', 'concert', 'id', '[unused51]', 'singer', 'id', '[SEP]']
Target 0: b'select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)'
Target TF-P tokens: from concert where concert.Stadium_ID = (from stadium select stadium.Stadium_ID order by stadium.Capacity desc limit 1) select count (*)

[WRONG] [hard] Pred 0:	b'SELECT COUNT(*) FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID' (-0.006) (length=14)
[WRONG] [hard] Pred 1:	b'SELECT COUNT(*) FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID ORDER BY stadium.Capacity DESC LIMIT 1' (-1.100) (length=19)
[WRONG] [hard] Pred 2:	b'SELECT COUNT(*) FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE stadium.Capacity = (SELECT MAX(stadium.Capacity) FROM stadium)' (-1.164) (length=26)
[WRONG] [hard] Pred 3:	b'SELECT COUNT(*) FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID ORDER BY stadium.Capacity DESC LIMIT 1' (-1.338) (length=19)
[WRONG] [hard] Pred 4:	b'SELECT COUNT(*) FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE stadium.Capacity = (SELECT MAX(stadium.Capacity) FROM stadium)' (-1.353) (length=26)
[WRONG] [hard] Pred 5:	b'SELECT COUNT(*) FROM stadium ORDER BY stadium.Capacity DESC LIMIT 1' (-1.672) (length=13)
[WRONG] [hard] Pred 6:	b'SELECT COUNT(*) FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY concert.Stadium_ID ORDER BY MAX(stadium.Capacity) DESC LIMIT 1' (-2.473) (length=24)
[WRONG] [hard] Pred 7:	b'SELECT COUNT(*) FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID' (-2.672) (length=14)
[WRONG] [hard] Pred 8:	b'SELECT COUNT(*) FROM stadium WHERE stadium.Capacity = (SELECT MAX(stadium.Capacity) FROM stadium)' (-2.963) (length=20)
[WRONG] [hard] Pred 9:	b'SELECT COUNT(*) FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY concert.Stadium_ID ORDER BY stadium.Capacity DESC LIMIT 1' (-2.993) (length=21)
Error Case 5

Example 47
  5%|▍         | 6/130 [00:22<09:20,  4.52s/it]pets_1
 +-- Student (student)
 |   +-- StuID (student id) [PRIMARY] [FOREIGN]
 |   +-- LName (last name)
 |   +-- Fname (first name)
 |   +-- Age (age)
 |   +-- Sex (sex)
 |   +-- Major (major)
 |   +-- Advisor (advisor)
 |   +-- city_code (city code)
 +-- Has_Pet (has pet)
 |   +-- StuID (student id) [FOREIGN]
 |   +-- PetID (pet id) [FOREIGN]
 +-- Pets (pets)
     +-- PetID (pet id) [PRIMARY] [FOREIGN]
     +-- PetType (pet type)
     +-- pet_age (pet age)
     +-- weight (weight)
NL: b'Find the weight of the youngest dog.'
NL tokens: [b'find', b'the', b'weight', b'of', b'the', b'youngest', b'dog', b'.']
NL tokens (original): [b'Find', b'the', b'weight', b'of', b'the', b'youngest', b'dog', b'.']
['[CLS]', 'find', 'the', 'weight', 'of', 'the', 'youngest', 'dog', '.', '[SEP]', '*', '[unused50]', 'student', '[unused51]', 'student', 'id', '[unused51]', 'last', 'name', '[unused51]', 'first', 'name', '[unused51]', 'age', '[unused51]', 'sex', '[unused51]', 'major', '[unused51]', 'advisor', '[unused51]', 'city', 'code', '[unused50]', 'has', 'pet', '[unused51]', 'student', 'id', '[unused51]', 'pet', 'id', '[unused50]', 'pets', '[unused51]', 'pet', 'id', '[unused51]', 'pet', 'type', '[unused49]', 'dog', '[unused51]', 'pet', 'age', '[unused51]', 'weight', '[SEP]']
Target 0: b'SELECT weight FROM pets ORDER BY pet_age LIMIT 1'
Target TF-P tokens: from Pets select Pets.weight order by Pets.pet_age limit 1

[WRONG] [medium] Pred 0:	b'SELECT Pets.weight FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID ORDER BY Student.Age ASC LIMIT 1' (-0.104) (length=22)
[WRONG] [medium] Pred 1:	b'SELECT Pets.weight FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID ORDER BY Pets.pet_age ASC LIMIT 1' (-0.381) (length=22)
[WRONG] [medium] Pred 2:	b'SELECT Pets.weight FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID ORDER BY Student.Age LIMIT 1' (-0.938) (length=21)
[WRONG] [medium] Pred 3:	b'SELECT Pets.weight FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID ORDER BY Pets.pet_age LIMIT 1' (-1.310) (length=21)
[WRONG] [medium] Pred 4:	b'SELECT Pets.weight FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID ORDER BY Student.Age DESC LIMIT 1' (-1.764) (length=22)
[WRONG] [medium] Pred 5:	b'SELECT Pets.weight FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID ORDER BY Pets.pet_age ASC LIMIT 1' (-1.946) (length=16)
[WRONG] [medium] Pred 6:	b'SELECT Pets.weight FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age = (SELECT MIN(Student.Age) FROM Student)' (-1.971) (length=29)
[WRONG] [medium] Pred 7:	b'SELECT Pets.weight FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID ORDER BY Pets.pet_age DESC LIMIT 1' (-2.096) (length=22)
[CORRE] [medium] Pred 8:	b'SELECT Pets.weight FROM Pets ORDER BY Pets.pet_age ASC LIMIT 1' (-2.118) (length=10)
Error Case 6

Example 48
pets_1
 +-- Student (student)
 |   +-- StuID (student id) [PRIMARY] [FOREIGN]
 |   +-- LName (last name)
 |   +-- Fname (first name)
 |   +-- Age (age)
 |   +-- Sex (sex)
 |   +-- Major (major)
 |   +-- Advisor (advisor)
 |   +-- city_code (city code)
 +-- Has_Pet (has pet)
 |   +-- StuID (student id) [FOREIGN]
 |   +-- PetID (pet id) [FOREIGN]
 +-- Pets (pets)
     +-- PetID (pet id) [PRIMARY] [FOREIGN]
     +-- PetType (pet type)
     +-- pet_age (pet age)
     +-- weight (weight)
NL: b'How much does the youngest dog weigh?'
NL tokens: [b'how', b'much', b'does', b'the', b'youngest', b'dog', b'weigh', b'?']
NL tokens (original): [b'How', b'much', b'does', b'the', b'youngest', b'dog', b'weigh', b'?']
['[CLS]', 'how', 'much', 'does', 'the', 'youngest', 'dog', 'weigh', '?', '[SEP]', '*', '[unused50]', 'student', '[unused51]', 'student', 'id', '[unused51]', 'last', 'name', '[unused51]', 'first', 'name', '[unused51]', 'age', '[unused51]', 'sex', '[unused51]', 'major', '[unused51]', 'advisor', '[unused51]', 'city', 'code', '[unused50]', 'has', 'pet', '[unused51]', 'student', 'id', '[unused51]', 'pet', 'id', '[unused50]', 'pets', '[unused51]', 'pet', 'id', '[unused51]', 'pet', 'type', '[unused49]', 'dog', '[unused51]', 'pet', 'age', '[unused51]', 'weight', '[SEP]']
Target 0: b'SELECT weight FROM pets ORDER BY pet_age LIMIT 1'
Target TF-P tokens: from Pets select Pets.weight order by Pets.pet_age limit 1

[WRONG] [medium] Pred 0:	b'SELECT Pets.weight FROM Pets ORDER BY Pets.weight ASC LIMIT 1' (-0.071) (length=10)
[CORRE] [medium] Pred 1:	b'SELECT Pets.weight FROM Pets ORDER BY Pets.pet_age ASC LIMIT 1' (-0.795) (length=10)
Error Case 7

Parsing error: from Pets join Has_Pet on Pets.PetID = Has_Pet.PetID join Student on Has_Pet.StuID = Student.StuID where Student.Age > 20 select count (*) select count (*)
string indices must be integers
string indices must be integers
Parsing error: from Pets in join Has_Pet on Pets.PetID = Has_Pet.PetID join Student on Has_Pet.StuID = Student.StuID where Student.Age > 20 select count (*)
Parsing error: from Pets join Has_Pet on Pets.PetID = Has_Pet.PetID 5 join Student on Has_Pet.StuID = Student.StuID where Student.Age > 20 select count (*)
string indices must be integers
Example 51
pets_1
 +-- Student (student)
 |   +-- StuID (student id) [PRIMARY] [FOREIGN]
 |   +-- LName (last name)
 |   +-- Fname (first name)
 |   +-- Age (age)
 |   +-- Sex (sex)
 |   +-- Major (major)
 |   +-- Advisor (advisor)
 |   +-- city_code (city code)
 +-- Has_Pet (has pet)
 |   +-- StuID (student id) [FOREIGN]
 |   +-- PetID (pet id) [FOREIGN]
 +-- Pets (pets)
     +-- PetID (pet id) [PRIMARY] [FOREIGN]
     +-- PetType (pet type)
     +-- pet_age (pet age)
     +-- weight (weight)
NL: b'Find number of pets owned by students who are older than 20.'
NL tokens: [b'find', b'number', b'of', b'pets', b'owned', b'by', b'students', b'who', b'are', b'older', b'than', b'20', b'.']
NL tokens (original): [b'Find', b'number', b'of', b'pets', b'owned', b'by', b'students', b'who', b'are', b'older', b'than', b'20', b'.']
['[CLS]', 'find', 'number', 'of', 'pets', 'owned', 'by', 'students', 'who', 'are', 'older', 'than', '20', '.', '[SEP]', '*', '[unused50]', 'student', '[unused51]', 'student', 'id', '[unused51]', 'last', 'name', '[unused51]', 'first', 'name', '[unused51]', 'age', '[unused51]', 'sex', '[unused51]', 'major', '[unused51]', 'advisor', '[unused51]', 'city', 'code', '[unused50]', 'has', 'pet', '[unused51]', 'student', 'id', '[unused51]', 'pet', 'id', '[unused50]', 'pets', '[unused51]', 'pet', 'id', '[unused51]', 'pet', 'type', '[unused51]', 'pet', 'age', '[unused51]', 'weight', '[SEP]']
Target 0: b'SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20'
Target TF-P tokens: from Student join Has_Pet on Student.StuID = Has_Pet.StuID where Student.Age > 20 select count (*)

[WRONG] [medium] Pred 0:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20' (-0.000) (length=24)
[WRONG] [medium] Pred 1:	b'SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20' (-2.231) (length=24)
[WRONG] [medium] Pred 2:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.pet_age > 20' (-2.352) (length=24)
[WRONG] [medium] Pred 3:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20' (-2.614) (length=30)
[WRONG] [medium] Pred 4:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20 OR Student.Age > 20' (-2.641) (length=28)
[WRONG] [medium] Pred 5:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20 AND Student.Age > 20' (-2.964) (length=28)
[WRONG] [medium] Pred 6:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID WHERE Has_Pet.StuID IN (SELECT Student.StuID FROM Student WHERE Student.Age > 20)' (-2.982) (length=27)
[WRONG] [medium] Pred 7:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20 AND Pets.pet_age > 20' (-2.990) (length=28)
[WRONG] [medium] Pred 8:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20 GROUP BY Pets.PetID' (-3.130) (length=26)
[WRONG] [medium] Pred 9:	b'SELECT COUNT(*), Pets.PetID FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20' (-3.136) (length=26)
Error Case 8

Parsing error: from Pets join Has_Pet on Pets.PetID = Has_Pet.PetID join Student on Has_Pet.StuID = Student.StuID where Student.Age > 20 select count (*) select count (*)
Parsing error: from Pets in join Has_Pet on Pets.PetID = Has_Pet.PetID join Student on Has_Pet.StuID = Student.StuID where Student.Age > 20 select count (*)
Parsing error: from Pets join Has_Pet on Pets.PetID = Has_Pet.PetID join Student on Has_Pet.StuID = Student.StuID where Student.Age > 20 : Student.Age > 20 select count (*)
string indices must be integers
string indices must be integers
string indices must be integers
Parsing error: from Pets join Has_Pet on Pets.PetID = Has_Pet.PetID 5 join Student on Has_Pet.StuID = Student.StuID where Student.Age > 20 select count (*)
string indices must be integers
Example 52
pets_1
 +-- Student (student)
 |   +-- StuID (student id) [PRIMARY] [FOREIGN]
 |   +-- LName (last name)
 |   +-- Fname (first name)
 |   +-- Age (age)
 |   +-- Sex (sex)
 |   +-- Major (major)
 |   +-- Advisor (advisor)
 |   +-- city_code (city code)
 +-- Has_Pet (has pet)
 |   +-- StuID (student id) [FOREIGN]
 |   +-- PetID (pet id) [FOREIGN]
 +-- Pets (pets)
     +-- PetID (pet id) [PRIMARY] [FOREIGN]
     +-- PetType (pet type)
     +-- pet_age (pet age)
     +-- weight (weight)
NL: b'How many pets are owned by students that have an age greater than 20?'
NL tokens: [b'how', b'many', b'pets', b'are', b'owned', b'by', b'students', b'that', b'have', b'an', b'age', b'greater', b'than', b'20', b'?']
NL tokens (original): [b'How', b'many', b'pets', b'are', b'owned', b'by', b'students', b'that', b'have', b'an', b'age', b'greater', b'than', b'20', b'?']
['[CLS]', 'how', 'many', 'pets', 'are', 'owned', 'by', 'students', 'that', 'have', 'an', 'age', 'greater', 'than', '20', '?', '[SEP]', '*', '[unused50]', 'student', '[unused51]', 'student', 'id', '[unused51]', 'last', 'name', '[unused51]', 'first', 'name', '[unused51]', 'age', '[unused51]', 'sex', '[unused51]', 'major', '[unused51]', 'advisor', '[unused51]', 'city', 'code', '[unused50]', 'has', 'pet', '[unused51]', 'student', 'id', '[unused51]', 'pet', 'id', '[unused50]', 'pets', '[unused51]', 'pet', 'id', '[unused51]', 'pet', 'type', '[unused51]', 'pet', 'age', '[unused51]', 'weight', '[SEP]']
Target 0: b'SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20'
Target TF-P tokens: from Student join Has_Pet on Student.StuID = Has_Pet.StuID where Student.Age > 20 select count (*)

[WRONG] [medium] Pred 0:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20' (-0.000) (length=24)
[WRONG] [medium] Pred 1:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID WHERE Has_Pet.StuID IN (SELECT Student.StuID FROM Student WHERE Student.Age > 20)' (-2.507) (length=27)
[WRONG] [medium] Pred 2:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.pet_age > 20' (-2.604) (length=24)
[WRONG] [medium] Pred 3:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20' (-2.643) (length=30)
[WRONG] [medium] Pred 4:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20 OR Student.Age > 20' (-2.735) (length=28)
[WRONG] [medium] Pred 5:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20 AND Student.Age > 20' (-2.841) (length=28)
[WRONG] [medium] Pred 6:	b'SELECT COUNT(*), Pets.pet_age FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20' (-2.980) (length=26)
[WRONG] [medium] Pred 7:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20 GROUP BY Pets.PetID' (-3.033) (length=26)
Error Case 9

Parsing error: from Pets join Has_Pet on Pets.PetID = Has_Pet.PetID join Student on Has_Pet.StuID = Student.StuID where Student.Sex = "F" and Pets.pet_age = limit 1 select count (*)
Parsing error: from Pets join Has_Pet on Pets.PetID = Has_Pet.PetID join Student on Has_Pet.StuID = Student.StuID where Student.Sex = "F" and Pets.pet_age = limit 5 select count (*)
Example 53
pets_1
 +-- Student (student)
 |   +-- StuID (student id) [PRIMARY] [FOREIGN]
 |   +-- LName (last name)
 |   +-- Fname (first name)
 |   +-- Age (age)
 |   +-- Sex (sex)
 |   +-- Major (major)
 |   +-- Advisor (advisor)
 |   +-- city_code (city code)
 +-- Has_Pet (has pet)
 |   +-- StuID (student id) [FOREIGN]
 |   +-- PetID (pet id) [FOREIGN]
 +-- Pets (pets)
     +-- PetID (pet id) [PRIMARY] [FOREIGN]
     +-- PetType (pet type)
     +-- pet_age (pet age)
     +-- weight (weight)
NL: b'Find the number of dog pets that are raised by female students (with sex F).'
NL tokens: [b'find', b'the', b'number', b'of', b'dog', b'pets', b'that', b'are', b'raised', b'by', b'female', b'students', b'(', b'with', b'sex', b'f', b')', b'.']
NL tokens (original): [b'Find', b'the', b'number', b'of', b'dog', b'pets', b'that', b'are', b'raised', b'by', b'female', b'students', b'(', b'with', b'sex', b'F', b')', b'.']
['[CLS]', 'find', 'the', 'number', 'of', 'dog', 'pets', 'that', 'are', 'raised', 'by', 'female', 'students', '(', 'with', 'sex', 'f', ')', '.', '[SEP]', '*', '[unused50]', 'student', '[unused51]', 'student', 'id', '[unused51]', 'last', 'name', '[unused51]', 'first', 'name', '[unused51]', 'age', '[unused51]', 'sex', '[unused51]', 'major', '[unused51]', 'advisor', '[unused51]', 'city', 'code', '[unused50]', 'has', 'pet', '[unused51]', 'student', 'id', '[unused51]', 'pet', 'id', '[unused50]', 'pets', '[unused51]', 'pet', 'id', '[unused51]', 'pet', 'type', '[unused49]', 'dog', '[unused51]', 'pet', 'age', '[unused51]', 'weight', '[SEP]']
Target 0: b"SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"
Target TF-P tokens: from Student join Has_Pet on Student.StuID = Has_Pet.StuID join Pets on Has_Pet.PetID = Pets.PetID where Student.Sex = "F" and Pets.PetType = "dog" select count (*)

[WRONG] [hard] Pred 0:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Sex = "F" AND Pets.pet_age = "dog"' (-0.036) (length=32)
[WRONG] [hard] Pred 1:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Sex = "F" AND Student.Sex = "dog"' (-0.471) (length=32)
[WRONG] [hard] Pred 2:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Sex = "F" AND Pets.pet_age = 1' (-0.574) (length=30)
  5%|▌         | 7/130 [00:31<12:03,  5.88s/it][CORRE] [hard] Pred 3:	b'SELECT COUNT(*) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Sex = "F" AND Pets.PetType = "dog"' (-0.618) (length=32)
Error Case 10

ERROR: table "Pets" in field expression Pets.pet_age is not in the current scope
Parsing error: from Student no Student.StuID not in (from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "cat" select Has_Pet.StuID) select Student.Major , Student.Age
ERROR: table "Pets" in field expression Pets.pet_age is not in the current scope
Parsing error: from Student where Student.StuID not in (from Has_Pet and Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "cat" select Has_Pet.StuID) select Student.Major , Student.Age
Parsing error: from Student except Student.StuID not in (from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "cat" select Has_Pet.StuID) select Student.Major , Student.Age
Parsing error: from Student where Student.StuID not in (from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "cat" select Has_Pet.StuID) select Student.Major) select Student.Major , Student.Age
Example 61
pets_1
 +-- Student (student)
 |   +-- StuID (student id) [PRIMARY] [FOREIGN]
 |   +-- LName (last name)
 |   +-- Fname (first name)
 |   +-- Age (age)
 |   +-- Sex (sex)
 |   +-- Major (major)
 |   +-- Advisor (advisor)
 |   +-- city_code (city code)
 +-- Has_Pet (has pet)
 |   +-- StuID (student id) [FOREIGN]
 |   +-- PetID (pet id) [FOREIGN]
 +-- Pets (pets)
     +-- PetID (pet id) [PRIMARY] [FOREIGN]
     +-- PetType (pet type)
     +-- pet_age (pet age)
     +-- weight (weight)
NL: b'Find the major and age of students who do not have a cat pet.'
NL tokens: [b'find', b'the', b'major', b'and', b'age', b'of', b'students', b'who', b'do', b'not', b'have', b'a', b'cat', b'pet', b'.']
NL tokens (original): [b'Find', b'the', b'major', b'and', b'age', b'of', b'students', b'who', b'do', b'not', b'have', b'a', b'cat', b'pet', b'.']
['[CLS]', 'find', 'the', 'major', 'and', 'age', 'of', 'students', 'who', 'do', 'not', 'have', 'a', 'cat', 'pet', '.', '[SEP]', '*', '[unused50]', 'student', '[unused51]', 'student', 'id', '[unused51]', 'last', 'name', '[unused51]', 'first', 'name', '[unused51]', 'age', '[unused51]', 'sex', '[unused51]', 'major', '[unused51]', 'advisor', '[unused51]', 'city', 'code', '[unused50]', 'has', 'pet', '[unused51]', 'student', 'id', '[unused51]', 'pet', 'id', '[unused50]', 'pets', '[unused51]', 'pet', 'id', '[unused51]', 'pet', 'type', '[unused49]', 'cat', '[unused51]', 'pet', 'age', '[unused51]', 'weight', '[SEP]']
Target 0: b"SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
Target TF-P tokens: from Student where Student.StuID not in (from Student join Has_Pet on Student.StuID = Has_Pet.StuID join Pets on Pets.PetID = Has_Pet.PetID where Pets.PetType = "cat" select Student.StuID) select Student.Major , Student.Age

[WRONG] [extra] Pred 0:	b'SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat")' (-0.000) (length=29)
[WRONG] [extra] Pred 1:	b'SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat") AND Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat")' (-1.146) (length=51)
[WRONG] [extra] Pred 2:	b'SELECT Student.StuID, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat") AND Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat")' (-1.996) (length=51)
[WRONG] [extra] Pred 3:	b'SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat") AND Student.StuID != "cat"' (-2.073) (length=35)
[WRONG] [extra] Pred 4:	b'SELECT Student.Major, Student.Age FROM Student EXCEPT SELECT Student.Major, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat"' (-2.188) (length=32)
[WRONG] [extra] Pred 5:	b'SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat") GROUP BY Student.StuID' (-2.199) (length=31)
[WRONG] [extra] Pred 6:	b'SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat") AND Student.StuID != "cat"' (-2.224) (length=33)
[WRONG] [extra] Pred 7:	b'SELECT Student.StuID, Student.Major FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat") AND Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat")' (-2.292) (length=51)
[WRONG] [extra] Pred 8:	b'SELECT Student.Major, Student.StuID FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat") AND Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat")' (-2.323) (length=51)
[WRONG] [extra] Pred 9:	b'SELECT Student.StuID, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat")' (-2.403) (length=29)
Error Case 11

Parsing error: from Student no Student.StuID not in (from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "cat" select Has_Pet.StuID) select Student.Major , Student.Age
Parsing error: from Student except from Student where Student.StuID not in (from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "cat" select Has_Pet.StuID) select Student.Major , Student.Age
Parsing error: from Student where Student.StuID not in (from Has_Pet and Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "cat" select Has_Pet.StuID) select Student.Major , Student.Age
ERROR: table "Pets" in field expression Pets.pet_age is not in the current scope
Parsing error: from Student except where Student.StuID not in (from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "cat" select Has_Pet.StuID) select Student.Major , Student.Age
Parsing error: from Student except Student where Student.StuID not in (from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "cat" select Has_Pet.StuID) select Student.Major , Student.Age
Parsing error: from Student where Student.StuID not in (from Has_Pet intersect join Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "cat" select Has_Pet.StuID) select Student.Major , Student.Age
Parsing error: from Student where Student.StuID != in (from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "cat" select Has_Pet.StuID) select Student.Major , Student.Age
string indices must be integers
Example 62
pets_1
 +-- Student (student)
 |   +-- StuID (student id) [PRIMARY] [FOREIGN]
 |   +-- LName (last name)
 |   +-- Fname (first name)
 |   +-- Age (age)
 |   +-- Sex (sex)
 |   +-- Major (major)
 |   +-- Advisor (advisor)
 |   +-- city_code (city code)
 +-- Has_Pet (has pet)
 |   +-- StuID (student id) [FOREIGN]
 |   +-- PetID (pet id) [FOREIGN]
 +-- Pets (pets)
     +-- PetID (pet id) [PRIMARY] [FOREIGN]
     +-- PetType (pet type)
     +-- pet_age (pet age)
     +-- weight (weight)
NL: b'What major is every student who does not own a cat as a pet, and also how old are they?'
  6%|▌         | 8/130 [00:55<22:39, 11.14s/it]NL tokens: [b'what', b'major', b'is', b'every', b'student', b'who', b'does', b'not', b'own', b'a', b'cat', b'as', b'a', b'pet', b',', b'and', b'also', b'how', b'old', b'are', b'they', b'?']
NL tokens (original): [b'What', b'major', b'is', b'every', b'student', b'who', b'does', b'not', b'own', b'a', b'cat', b'as', b'a', b'pet', b',', b'and', b'also', b'how', b'old', b'are', b'they', b'?']
['[CLS]', 'what', 'major', 'is', 'every', 'student', 'who', 'does', 'not', 'own', 'a', 'cat', 'as', 'a', 'pet', ',', 'and', 'also', 'how', 'old', 'are', 'they', '?', '[SEP]', '*', '[unused50]', 'student', '[unused51]', 'student', 'id', '[unused51]', 'last', 'name', '[unused51]', 'first', 'name', '[unused51]', 'age', '[unused51]', 'sex', '[unused51]', 'major', '[unused51]', 'advisor', '[unused51]', 'city', 'code', '[unused50]', 'has', 'pet', '[unused51]', 'student', 'id', '[unused51]', 'pet', 'id', '[unused50]', 'pets', '[unused51]', 'pet', 'id', '[unused51]', 'pet', 'type', '[unused49]', 'cat', '[unused51]', 'pet', 'age', '[unused51]', 'weight', '[SEP]']
Target 0: b"SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
Target TF-P tokens: from Student where Student.StuID not in (from Student join Has_Pet on Student.StuID = Has_Pet.StuID join Pets on Pets.PetID = Has_Pet.PetID where Pets.PetType = "cat" select Student.StuID) select Student.Major , Student.Age

[WRONG] [extra] Pred 0:	b'SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat")' (-0.000) (length=29)
[WRONG] [extra] Pred 1:	b'SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat") AND Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat")' (-1.431) (length=51)
[WRONG] [extra] Pred 2:	b'SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat") GROUP BY Student.StuID' (-1.957) (length=31)
[WRONG] [extra] Pred 3:	b'SELECT Student.Major, Student.Age FROM Student EXCEPT SELECT Student.Major, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat"' (-2.043) (length=32)
[WRONG] [extra] Pred 4:	b'SELECT Student.Major, MAX(Student.Age) FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat") GROUP BY Student.StuID' (-2.145) (length=34)
[WRONG] [extra] Pred 5:	b'SELECT Student.StuID, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat")' (-2.318) (length=29)
[WRONG] [extra] Pred 6:	b'SELECT Student.StuID, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat") AND Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat")' (-2.345) (length=51)
Error Case 12

Parsing error: from Student no Student.StuID not in (from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "cat" select Has_Pet.StuID) select Student.StuID
Parsing error: from Student and Student.StuID not in (from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "cat" select Has_Pet.StuID) select Student.StuID
Parsing error: from Student select Student.StuID except from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "cat" select Has_Pet.StuID) select Student.StuID
Parsing error: from Student where Student.StuID != in (from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "cat" select Has_Pet.StuID) select Student.StuID
Parsing error: from Student no Student.StuID except from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "cat" select Has_Pet.StuID
ERROR: table "Has_Pet" in field expression Has_Pet.StuID is not in the current scope
Parsing error: from Student except distinct Student.StuID except from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "cat" select Has_Pet.StuID
Parsing error: from Student where Student.StuID not in (from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "cat" select Has_Pet.StuID) select Student.StuID) select Student.StuID
ERROR: table "Pets" in field expression Pets.PetType is not in the current scope
Parsing error: from Student select Student.StuID except from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "cat" select Has_Pet.StuID select Student.StuID
Parsing error: from Student no Student.StuID except from Has_Pet where Has_Pet.PetID = "cat" select Has_Pet.StuID
ERROR: table "Student" in field expression Student.StuID is not in the current scope
Example 63
pets_1
 +-- Student (student)
 |   +-- StuID (student id) [PRIMARY] [FOREIGN]
 |   +-- LName (last name)
 |   +-- Fname (first name)
 |   +-- Age (age)
 |   +-- Sex (sex)
 |   +-- Major (major)
 |   +-- Advisor (advisor)
 |   +-- city_code (city code)
 +-- Has_Pet (has pet)
 |   +-- StuID (student id) [FOREIGN]
 |   +-- PetID (pet id) [FOREIGN]
 +-- Pets (pets)
     +-- PetID (pet id) [PRIMARY] [FOREIGN]
     +-- PetType (pet type)
     +-- pet_age (pet age)
     +-- weight (weight)
NL: b'Find the id of students who do not have a cat pet.'
NL tokens: [b'find', b'the', b'id', b'of', b'students', b'who', b'do', b'not', b'have', b'a', b'cat', b'pet', b'.']
NL tokens (original): [b'Find', b'the', b'id', b'of', b'students', b'who', b'do', b'not', b'have', b'a', b'cat', b'pet', b'.']
['[CLS]', 'find', 'the', 'id', 'of', 'students', 'who', 'do', 'not', 'have', 'a', 'cat', 'pet', '.', '[SEP]', '*', '[unused50]', 'student', '[unused51]', 'student', 'id', '[unused51]', 'last', 'name', '[unused51]', 'first', 'name', '[unused51]', 'age', '[unused51]', 'sex', '[unused51]', 'major', '[unused51]', 'advisor', '[unused51]', 'city', 'code', '[unused50]', 'has', 'pet', '[unused51]', 'student', 'id', '[unused51]', 'pet', 'id', '[unused50]', 'pets', '[unused51]', 'pet', 'id', '[unused51]', 'pet', 'type', '[unused49]', 'cat', '[unused51]', 'pet', 'age', '[unused51]', 'weight', '[SEP]']
Target 0: b"SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'"
Target TF-P tokens: from Student select Student.StuID except from Student join Has_Pet on Student.StuID = Has_Pet.StuID join Pets on Pets.PetID = Has_Pet.PetID where Pets.PetType = "cat" select Student.StuID

[WRONG] [hard] Pred 0:	b'SELECT Student.StuID FROM Student EXCEPT SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat"' (-0.003) (length=22)
[WRONG] [hard] Pred 1:	b'SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat")' (-0.884) (length=27)
[WRONG] [hard] Pred 2:	b'SELECT Student.StuID FROM Student EXCEPT SELECT Has_Pet.StuID FROM Has_Pet WHERE Has_Pet.PetID = "cat"' (-2.664) (length=16)
[WRONG] [hard] Pred 3:	b'SELECT Student.StuID FROM Student EXCEPT SELECT Has_Pet.StuID FROM Has_Pet WHERE Has_Pet.PetID = 1' (-3.126) (length=14)
Error Case 13

Parsing error: from Student select Student.StuID except from Has_Pet and Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "VALUE" select Has_Pet.StuID
Parsing error: from Student select Student.StuID except from Has_Pet + Has_Pet.StuID in (from Pets where Pets.PetType = "VALUE" select Has_Pet.StuID) select Student.StuID
ERROR: invalid JOIN field "VALUE": ['Has_Pet', {'join': 'Pets', 'on': {'and': [{'eq': ['Has_Pet.PetID', 'Pets.PetID']}, {'eq': ['Pets.PetType', 'VALUE']}]}}]
Parsing error: from Student select Student.StuID except from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "VALUE" select Has_Pet.StuID) select Student.StuID
ERROR: Join condition does not match with table: ['Has_Pet', {'join': 'Pets', 'on': {'and': [{'eq': ['Has_Pet.PetID', 'Pets.PetID']}, {'eq': ['Has_Pet.StuID', 'Student.StuID']}]}}]
ERROR: Join condition does not match with table: ['Has_Pet', {'join': 'Pets', 'on': {'and': [{'eq': ['Has_Pet.PetID', 'Pets.PetID']}, {'eq': ['Has_Pet.StuID', 'Student.StuID']}]}}]
ERROR: invalid JOIN field "{'eq': ['Has_Pet.PetID', {'sub': ['Pets.PetID', 'Pets.PetType']}]}": ['Has_Pet', {'join': 'Pets', 'on': {'eq': [{'eq': ['Has_Pet.PetID', {'sub': ['Pets.PetID', 'Pets.PetType']}]}, 'VALUE']}}]
ERROR: table "Student" in field expression Student.StuID is not in the current scope
Example 64
pets_1
 +-- Student (student)
 |   +-- StuID (student id) [PRIMARY] [FOREIGN]
 |   +-- LName (last name)
 |   +-- Fname (first name)
 |   +-- Age (age)
 |   +-- Sex (sex)
 |   +-- Major (major)
 |   +-- Advisor (advisor)
 |   +-- city_code (city code)
 +-- Has_Pet (has pet)
 |   +-- StuID (student id) [FOREIGN]
 |   +-- PetID (pet id) [FOREIGN]
 +-- Pets (pets)
     +-- PetID (pet id) [PRIMARY] [FOREIGN]
     +-- PetType (pet type)
     +-- pet_age (pet age)
     +-- weight (weight)
NL: b'What are the ids of the students who do not own cats as pets?'
NL tokens: [b'what', b'are', b'the', b'id', b'##s', b'of', b'the', b'students', b'who', b'do', b'not', b'own', b'cats', b'as', b'pets', b'?']
NL tokens (original): [b'What', b'are', b'the', b'id', b'##s', b'of', b'the', b'students', b'who', b'do', b'not', b'own', b'cats', b'as', b'pets', b'?']
['[CLS]', 'what', 'are', 'the', 'id', '##s', 'of', 'the', 'students', 'who', 'do', 'not', 'own', 'cats', 'as', 'pets', '?', '[SEP]', '*', '[unused50]', 'student', '[unused51]', 'student', 'id', '[unused51]', 'last', 'name', '[unused51]', 'first', 'name', '[unused51]', 'age', '[unused51]', 'sex', '[unused51]', 'major', '[unused51]', 'advisor', '[unused51]', 'city', 'code', '[unused50]', 'has', 'pet', '[unused51]', 'student', 'id', '[unused51]', 'pet', 'id', '[unused50]', 'pets', '[unused51]', 'pet', 'id', '[unused51]', 'pet', 'type', '[unused49]', 'cat', '[unused51]', 'pet', 'age', '[unused51]', 'weight', '[SEP]']
Target 0: b"SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'"
Target TF-P tokens: from Student select Student.StuID except from Student join Has_Pet on Student.StuID = Has_Pet.StuID join Pets on Pets.PetID = Has_Pet.PetID where Pets.PetType = "VALUE" select Student.StuID

[WRONG] [hard] Pred 0:	b'SELECT Student.StuID FROM Student EXCEPT SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "VALUE"' (-0.010) (length=22)
[WRONG] [hard] Pred 1:	b'SELECT Student.StuID FROM Student EXCEPT SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "VALUE VALUE"' (-0.932) (length=23)
[WRONG] [hard] Pred 2:	b'SELECT Student.StuID FROM Student EXCEPT SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID' (-1.296) (length=16)
[WRONG] [hard] Pred 3:	b'SELECT Student.StuID FROM Student EXCEPT SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "VALUE1"' (-1.613) (length=23)
[WRONG] [hard] Pred 4:	b'SELECT Student.StuID FROM Student EXCEPT SELECT Has_Pet.StuID FROM Has_Pet' (-1.625) (length=10)
[WRONG] [hard] Pred 5:	b'SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "VALUE")' (-2.141) (length=27)
[WRONG] [hard] Pred 6:	b'SELECT Student.StuID FROM Student EXCEPT SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "VALUE :"' (-2.196) (length=23)
[WRONG] [hard] Pred 7:	b'SELECT Student.StuID FROM Student EXCEPT SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "VALUE ="' (-2.584) (length=23)
Error Case 14

Parsing error: from Student where Student.StuID in (from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "dog" select Has_Pet.StuID except from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "cat" select Has_Pet.StuID) and Student.StuID not in (from Has_Pet join Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "cat" select
ERROR: table "Pets" in field expression Pets.PetType is not in the current scope
Parsing error: from Student where Student.StuID in (from Has_Pet and Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "cat" select Has_Pet.StuID) select Student.Fname , Student.Age
Parsing error: from Student where Student.StuID in (from Has_Pet intersect join Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "cat" select Has_Pet.StuID) select Student.Fname , Student.Age
Example 65
pets_1
 +-- Student (student)
 |   +-- StuID (student id) [PRIMARY] [FOREIGN]
 |   +-- LName (last name)
 |   +-- Fname (first name)
 |   +-- Age (age)
 |   +-- Sex (sex)
 |   +-- Major (major)
 |   +-- Advisor (advisor)
 |   +-- city_code (city code)
 +-- Has_Pet (has pet)
 |   +-- StuID (student id) [FOREIGN]
 |   +-- PetID (pet id) [FOREIGN]
 +-- Pets (pets)
     +-- PetID (pet id) [PRIMARY] [FOREIGN]
     +-- PetType (pet type)
     +-- pet_age (pet age)
     +-- weight (weight)
NL: b'Find the first name and age of students who have a dog but do not have a cat as a pet.'
NL tokens: [b'find', b'the', b'first', b'name', b'and', b'age', b'of', b'students', b'who', b'have', b'a', b'dog', b'but', b'do', b'not', b'have', b'a', b'cat', b'as', b'a', b'pet', b'.']
NL tokens (original): [b'Find', b'the', b'first', b'name', b'and', b'age', b'of', b'students', b'who', b'have', b'a', b'dog', b'but', b'do', b'not', b'have', b'a', b'cat', b'as', b'a', b'pet', b'.']
['[CLS]', 'find', 'the', 'first', 'name', 'and', 'age', 'of', 'students', 'who', 'have', 'a', 'dog', 'but', 'do', 'not', 'have', 'a', 'cat', 'as', 'a', 'pet', '.', '[SEP]', '*', '[unused50]', 'student', '[unused51]', 'student', 'id', '[unused51]', 'last', 'name', '[unused51]', 'first', 'name', '[unused51]', 'age', '[unused51]', 'sex', '[unused51]', 'major', '[unused51]', 'advisor', '[unused51]', 'city', 'code', '[unused50]', 'has', 'pet', '[unused51]', 'student', 'id', '[unused51]', 'pet', 'id', '[unused50]', 'pets', '[unused51]', 'pet', 'id', '[unused51]', 'pet', 'type', '[unused49]', 'dog', '[unused49]', 'cat', '[unused51]', 'pet', 'age', '[unused51]', 'weight', '[SEP]']
Target 0: b"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
Target TF-P tokens: from Student join Has_Pet on Student.StuID = Has_Pet.StuID join Pets on Pets.PetID = Has_Pet.PetID where Pets.PetType = "dog" and Student.StuID not in (from Student join Has_Pet on Student.StuID = Has_Pet.StuID join Pets on Pets.PetID = Has_Pet.PetID where Pets.PetType = "cat" select Student.StuID) select Student.Fname , Student.Age

[WRONG] [extra] Pred 0:	b'SELECT Student.Fname, Student.Age FROM Student WHERE Student.StuID IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat")' (-0.005) (length=28)
[WRONG] [extra] Pred 1:	b'SELECT Student.Fname, Student.Age FROM Student WHERE Student.StuID IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "dog" EXCEPT SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat")' (-0.433) (length=45)
[WRONG] [extra] Pred 2:	b'SELECT Student.Fname, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat")' (-0.735) (length=29)
[WRONG] [extra] Pred 3:	b'SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Has_Pet.PetID != "VALUE" EXCEPT SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat"' (-1.222) (length=42)
[WRONG] [extra] Pred 4:	b'SELECT Student.Fname, Student.Age FROM Student WHERE Student.StuID IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat") AND Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat")' (-1.338) (length=50)
[WRONG] [extra] Pred 5:	b'SELECT Student.Fname, Student.Age FROM Student WHERE Student.StuID IN (SELECT Has_Pet.StuID FROM Has_Pet) EXCEPT SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat"' (-1.561) (length=41)
[WRONG] [extra] Pred 6:	b'SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Has_Pet.PetID IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat")' (-1.668) (length=34)
[WRONG] [extra] Pred 7:	b'SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Has_Pet.PetID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat")' (-1.707) (length=35)
[WRONG] [extra] Pred 8:	b'SELECT Student.Fname, Student.Age FROM Student EXCEPT SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat"' (-1.831) (length=32)
[WRONG] [extra] Pred 9:	b'SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Has_Pet.PetID = (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat")' (-1.854) (length=34)
[WRONG] [extra] Pred 10:	b'SELECT Student.Fname, Student.Age FROM Student WHERE Student.StuID IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "dog" EXCEPT SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat") AND Student.StuID != "cat"' (-1.944) (length=49)
[WRONG] [extra] Pred 11:	b'SELECT DISTINCT Student.Fname, Student.Age FROM Student WHERE Student.StuID IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "dog" EXCEPT SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat")' (-2.036) (length=46)
Error Case 15

ERROR: table "Has_Pet" in field expression Has_Pet.StuID is not in the current scope
Parsing error: from Student where Student.StuID in (from Has_Pet and Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "cat" select Has_Pet.StuID) select Student.Fname
ERROR: Join condition does not match with table: ['Student', {'join': 'Pets', 'on': {'eq': ['Student.StuID', 'Has_Pet.StuID']}}]
Parsing error: from Student where Student.StuID in (from Has_Pet intersect join Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "cat" select Has_Pet.StuID) select Student.Fname
Parsing error: from Student where Student.StuID in (from Has_Pet except from Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "cat" select Has_Pet.StuID) select Student.Fname
Parsing error: from Student where Student.StuID in (from Has_Pet except from Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "cat" select Has_Pet.StuID) select Student.StuID
Parsing error: from Student where Student.StuID in (from Has_Pet from Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "cat" select Has_Pet.StuID) select Student.Fname
ERROR: table "Has_Pet" in field expression Has_Pet.StuID is not in the current scope
Parsing error: from Student where Student.StuID in (from Has_Pet no in (Pets on Has_Pet.PetID = Pets.PetID where Pets.PetType = "cat" select Has_Pet.StuID) select Student.StuID
Example 66
pets_1
 +-- Student (student)
 |   +-- StuID (student id) [PRIMARY] [FOREIGN]
 |   +-- LName (last name)
 |   +-- Fname (first name)
 |   +-- Age (age)
 |   +-- Sex (sex)
 |   +-- Major (major)
 |   +-- Advisor (advisor)
 |   +-- city_code (city code)
 +-- Has_Pet (has pet)
 |   +-- StuID (student id) [FOREIGN]
 |   +-- PetID (pet id) [FOREIGN]
 +-- Pets (pets)
     +-- PetID (pet id) [PRIMARY] [FOREIGN]
     +-- PetType (pet type)
     +-- pet_age (pet age)
     +-- weight (weight)
NL: b'What is the first name of every student who has a dog but does not have a cat?'
NL tokens: [b'what', b'is', b'the', b'first', b'name', b'of', b'every', b'student', b'who', b'has', b'a', b'dog', b'but', b'does', b'not', b'have', b'a', b'cat', b'?']
NL tokens (original): [b'What', b'is', b'the', b'first', b'name', b'of', b'every', b'student', b'who', b'has', b'a', b'dog', b'but', b'does', b'not', b'have', b'a', b'cat', b'?']
['[CLS]', 'what', 'is', 'the', 'first', 'name', 'of', 'every', 'student', 'who', 'has', 'a', 'dog', 'but', 'does', 'not', 'have', 'a', 'cat', '?', '[SEP]', '*', '[unused50]', 'student', '[unused51]', 'student', 'id', '[unused51]', 'last', 'name', '[unused51]', 'first', 'name', '[unused51]', 'age', '[unused51]', 'sex', '[unused51]', 'major', '[unused51]', 'advisor', '[unused51]', 'city', 'code', '[unused50]', 'has', 'pet', '[unused51]', 'student', 'id', '[unused51]', 'pet', 'id', '[unused50]', 'pets', '[unused51]', 'pet', 'id', '[unused51]', 'pet', 'type', '[unused49]', 'dog', '[unused49]', 'cat', '[unused51]', 'pet', 'age', '[unused51]', 'weight', '[SEP]']
Target 0: b"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
Target TF-P tokens: from Student join Has_Pet on Student.StuID = Has_Pet.StuID join Pets on Pets.PetID = Has_Pet.PetID where Pets.PetType = "dog" and Student.StuID not in (from Student join Has_Pet on Student.StuID = Has_Pet.StuID join Pets on Pets.PetID = Has_Pet.PetID where Pets.PetType = "cat" select Student.StuID) select Student.Fname , Student.Age

[WRONG] [extra] Pred 0:	b'SELECT Student.Fname FROM Student WHERE Student.StuID IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat")' (-0.409) (length=26)
[WRONG] [extra] Pred 1:	b'SELECT Student.Fname FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat")' (-0.845) (length=27)
[WRONG] [extra] Pred 2:	b'SELECT Student.Fname FROM Student WHERE Student.StuID IN (SELECT Has_Pet.StuID FROM Has_Pet) EXCEPT SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat"' (-1.003) (length=37)
[WRONG] [extra] Pred 3:	b'SELECT Student.StuID FROM Student WHERE Student.StuID IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat")' (-1.438) (length=26)
[WRONG] [extra] Pred 4:	b'SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat")' (-1.482) (length=27)
[WRONG] [extra] Pred 5:	b'SELECT Student.Fname FROM Student EXCEPT SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat"' (-1.793) (length=28)
  7%|▋         | 9/130 [01:14<27:12, 13.49s/it]  8%|▊         | 10/130 [01:16<19:58,  9.99s/it][WRONG] [extra] Pred 6:	b'SELECT Student.Fname FROM Student WHERE Student.StuID IN (SELECT Has_Pet.StuID FROM Has_Pet) EXCEPT SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Has_Pet.PetID = "cat"' (-1.863) (length=31)
Error Case 16

Example 70
pets_1
 +-- Student (student)
 |   +-- StuID (student id) [PRIMARY] [FOREIGN]
 |   +-- LName (last name)
 |   +-- Fname (first name)
 |   +-- Age (age)
 |   +-- Sex (sex)
 |   +-- Major (major)
 |   +-- Advisor (advisor)
 |   +-- city_code (city code)
 +-- Has_Pet (has pet)
 |   +-- StuID (student id) [FOREIGN]
 |   +-- PetID (pet id) [FOREIGN]
 +-- Pets (pets)
     +-- PetID (pet id) [PRIMARY] [FOREIGN]
     +-- PetType (pet type)
     +-- pet_age (pet age)
     +-- weight (weight)
NL: b'What is the id and weight of every pet who is older than 1?'
NL tokens: [b'what', b'is', b'the', b'id', b'and', b'weight', b'of', b'every', b'pet', b'who', b'is', b'older', b'than', b'1', b'?']
NL tokens (original): [b'What', b'is', b'the', b'id', b'and', b'weight', b'of', b'every', b'pet', b'who', b'is', b'older', b'than', b'1', b'?']
['[CLS]', 'what', 'is', 'the', 'id', 'and', 'weight', 'of', 'every', 'pet', 'who', 'is', 'older', 'than', '1', '?', '[SEP]', '*', '[unused50]', 'student', '[unused51]', 'student', 'id', '[unused51]', 'last', 'name', '[unused51]', 'first', 'name', '[unused51]', 'age', '[unused51]', 'sex', '[unused51]', 'major', '[unused51]', 'advisor', '[unused51]', 'city', 'code', '[unused50]', 'has', 'pet', '[unused51]', 'student', 'id', '[unused51]', 'pet', 'id', '[unused50]', 'pets', '[unused51]', 'pet', 'id', '[unused51]', 'pet', 'type', '[unused51]', 'pet', 'age', '[unused51]', 'weight', '[SEP]']
Target 0: b'SELECT petid ,  weight FROM pets WHERE pet_age  >  1'
Target TF-P tokens: from Pets where Pets.pet_age > 1 select Pets.PetID , Pets.weight

[WRONG] [medium] Pred 0:	b'SELECT Pets.PetID, Pets.weight FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID WHERE Pets.pet_age > 1' (-0.155) (length=17)
[CORRE] [medium] Pred 1:	b'SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1' (-0.281) (length=11)
Error Case 17

Parsing error: from Student join Has_Pet on Student.StuID = Has_Pet.StuID where Student.Age = 3 and Student.Age = age cat "select Student.LName"
Parsing error: from Student join Has_Pet on Student.StuID = Has_Pet.StuID where Student.Age = 3 and Student.Age
Parsing error: from Student join Has_Pet on Student.StuID = Has_Pet.StuID where Student.Age = 3 where Student.Age = 3 select Student.LName
Parsing error: from Student join Has_Pet on Student.StuID = Has_Pet.StuID where Student.Age = 3 and Student.Age = is select Student.LName
Parsing error: from Student join Has_Pet on Student.StuID = Has_Pet.StuID where Student.Age = 3 and Student.Age = a cat "select Student.LName"
Parsing error: from Student join Has_Pet on Student.StuID = Has_Pet.StuID where Student.Age = 3 and Student.Age : 3 select Student.LName
Example 83
pets_1
 +-- Student (student)
 |   +-- StuID (student id) [PRIMARY] [FOREIGN]
 |   +-- LName (last name)
 |   +-- Fname (first name)
 |   +-- Age (age)
 |   +-- Sex (sex)
 |   +-- Major (major)
 |   +-- Advisor (advisor)
 |   +-- city_code (city code)
 +-- Has_Pet (has pet)
 |   +-- StuID (student id) [FOREIGN]
 |   +-- PetID (pet id) [FOREIGN]
 +-- Pets (pets)
     +-- PetID (pet id) [PRIMARY] [FOREIGN]
     +-- PetType (pet type)
     +-- pet_age (pet age)
     +-- weight (weight)
NL: b'Find the last name of the student who has a cat that is age 3.'
NL tokens: [b'find', b'the', b'last', b'name', b'of', b'the', b'student', b'who', b'has', b'a', b'cat', b'that', b'is', b'age', b'3', b'.']
NL tokens (original): [b'Find', b'the', b'last', b'name', b'of', b'the', b'student', b'who', b'has', b'a', b'cat', b'that', b'is', b'age', b'3', b'.']
['[CLS]', 'find', 'the', 'last', 'name', 'of', 'the', 'student', 'who', 'has', 'a', 'cat', 'that', 'is', 'age', '3', '.', '[SEP]', '*', '[unused50]', 'student', '[unused51]', 'student', 'id', '[unused51]', 'last', 'name', '[unused51]', 'first', 'name', '[unused51]', 'age', '[unused51]', 'sex', '[unused51]', 'major', '[unused51]', 'advisor', '[unused51]', 'city', 'code', '[unused50]', 'has', 'pet', '[unused51]', 'student', 'id', '[unused51]', 'pet', 'id', '[unused50]', 'pets', '[unused51]', 'pet', 'id', '[unused51]', 'pet', 'type', '[unused49]', 'cat', '[unused51]', 'pet', 'age', '[unused51]', 'weight', '[SEP]']
Target 0: b"SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"
Target TF-P tokens: from Student join Has_Pet on Student.StuID = Has_Pet.StuID join Pets on Pets.PetID = Has_Pet.PetID where Pets.pet_age = 3 and Pets.PetType = "cat" select Student.LName

[WRONG] [hard] Pred 0:	b'SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.Age = 3 AND Student.Age = 3' (-0.026) (length=19)
[WRONG] [hard] Pred 1:	b'SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.Age = 3 AND Student.Age = "cat"' (-0.624) (length=19)
[WRONG] [hard] Pred 2:	b'SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Has_Pet.PetID = 3 AND Student.Age = 3' (-1.945) (length=19)
[WRONG] [hard] Pred 3:	b'SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = "cat" AND Student.Age = 3' (-2.258) (length=27)
[WRONG] [hard] Pred 4:	b'SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.Age = 3 AND Student.Age' (-2.519) (length=17)
[WRONG] [hard] Pred 5:	b'SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Has_Pet.PetID = 3 AND Student.Age = "cat"' (-2.717) (length=19)
[WRONG] [hard] Pred 6:	b'SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.Age = 3 AND Student.Age != 3' (-2.823) (length=19)
[WRONG] [hard] Pred 7:	b'SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.Age = 3 AND Student.Age > 3' (-3.013) (length=19)
[WRONG] [hard] Pred 8:	b'SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.Age = 3 AND Student.Age <= 3' (-3.083) (length=19)
[WRONG] [hard] Pred 9:	b'SELECT Student.LName FROM Student WHERE Student.Age = 3' (-3.279) (length=9)
Error Case 18

Parsing error: from Student join Has_Pet on Student.StuID = Has_Pet.StuID where Student.Age = 3 and Student.Age
Parsing error: from Student join Has_Pet on Student.StuID = Has_Pet.StuID where Student.Age = 3 and Student.Age : 3 select Student.LName
Parsing error: from Student join Has_Pet on Student.StuID = Has_Pet.StuID where Student.Age = 3 and Student.Age = is select Student.LName
Parsing error: from Student and Has_Pet on Student.StuID = Has_Pet.StuID where Student.Age = 3 and Student.Age = 3 select Student.LName
Parsing error: from Student join Has_Pet on Student.StuID = Has_Pet.StuID where Student.Age = 3 and Student.Age) select Student.LName
Example 84
pets_1
 +-- Student (student)
 |   +-- StuID (student id) [PRIMARY] [FOREIGN]
 |   +-- LName (last name)
 |   +-- Fname (first name)
 |   +-- Age (age)
 |   +-- Sex (sex)
 |   +-- Major (major)
 |   +-- Advisor (advisor)
 |   +-- city_code (city code)
 +-- Has_Pet (has pet)
 |   +-- StuID (student id) [FOREIGN]
 |   +-- PetID (pet id) [FOREIGN]
 +-- Pets (pets)
     +-- PetID (pet id) [PRIMARY] [FOREIGN]
     +-- PetType (pet type)
     +-- pet_age (pet age)
     +-- weight (weight)
NL: b'What is the last name of the student who has a cat that is 3 years old?'
NL tokens: [b'what', b'is', b'the', b'last', b'name', b'of', b'the', b'student', b'who', b'has', b'a', b'cat', b'that', b'is', b'3', b'years', b'old', b'?']
NL tokens (original): [b'What', b'is', b'the', b'last', b'name', b'of', b'the', b'student', b'who', b'has', b'a', b'cat', b'that', b'is', b'3', b'years', b'old', b'?']
  8%|▊         | 11/130 [01:22<17:43,  8.94s/it]['[CLS]', 'what', 'is', 'the', 'last', 'name', 'of', 'the', 'student', 'who', 'has', 'a', 'cat', 'that', 'is', '3', 'years', 'old', '?', '[SEP]', '*', '[unused50]', 'student', '[unused51]', 'student', 'id', '[unused51]', 'last', 'name', '[unused51]', 'first', 'name', '[unused51]', 'age', '[unused51]', 'sex', '[unused51]', 'major', '[unused51]', 'advisor', '[unused51]', 'city', 'code', '[unused50]', 'has', 'pet', '[unused51]', 'student', 'id', '[unused51]', 'pet', 'id', '[unused50]', 'pets', '[unused51]', 'pet', 'id', '[unused51]', 'pet', 'type', '[unused49]', 'cat', '[unused51]', 'pet', 'age', '[unused51]', 'weight', '[SEP]']
Target 0: b"SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"
Target TF-P tokens: from Student join Has_Pet on Student.StuID = Has_Pet.StuID join Pets on Pets.PetID = Has_Pet.PetID where Pets.pet_age = 3 and Pets.PetType = "cat" select Student.LName

[WRONG] [hard] Pred 0:	b'SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.Age = 3 AND Student.Age = 3' (-0.015) (length=19)
[WRONG] [hard] Pred 1:	b'SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.Age = 3 AND Student.Age = "cat"' (-0.658) (length=19)
[WRONG] [hard] Pred 2:	b'SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.Age = 3 AND Student.Age' (-1.976) (length=17)
[WRONG] [hard] Pred 3:	b'SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.Age = 3 AND Student.Age > 3' (-2.169) (length=19)
[WRONG] [hard] Pred 4:	b'SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.Age = 3 AND Student.Age <= 3' (-2.381) (length=19)
[WRONG] [hard] Pred 5:	b'SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.Age = 3 AND Student.Age != 3' (-2.516) (length=19)
[WRONG] [hard] Pred 6:	b'SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.Age = 3 AND Student.Age > "cat"' (-2.633) (length=19)
[WRONG] [hard] Pred 7:	b'SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.Age = 3 AND Student.Age = "old"' (-2.729) (length=19)
[WRONG] [hard] Pred 8:	b'SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.Age = 3 AND Student.Age = Has_Pet.StuID' (-2.792) (length=19)
[WRONG] [hard] Pred 9:	b'SELECT DISTINCT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.Age = 3 AND Student.Age = "cat"' (-3.043) (length=20)
[WRONG] [hard] Pred 10:	b'SELECT DISTINCT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.Age = 3 AND Student.Age = 3' (-3.063) (length=20)
Error Case 19

Example 89
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'How many countries does each continent have? List the continent id, continent name and the number of countries.'
NL tokens: [b'how', b'many', b'countries', b'does', b'each', b'continent', b'have', b'?', b'list', b'the', b'continent', b'id', b',', b'continent', b'name', b'and', b'the', b'number', b'of', b'countries', b'.']
NL tokens (original): [b'How', b'many', b'countries', b'does', b'each', b'continent', b'have', b'?', b'List', b'the', b'continent', b'id', b',', b'continent', b'name', b'and', b'the', b'number', b'of', b'countries', b'.']
['[CLS]', 'how', 'many', 'countries', 'does', 'each', 'continent', 'have', '?', 'list', 'the', 'continent', 'id', ',', 'continent', 'name', 'and', 'the', 'number', 'of', 'countries', '.', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId'
Target TF-P tokens: from continents join countries on continents.ContId = countries.Continent group by continents.ContId select continents.ContId , continents.Continent , count (*)

[WRONG] [medium] Pred 0:	b'SELECT continents.Continent, countries.CountryName, COUNT(*) FROM continents JOIN countries ON countries.Continent = continents.ContId GROUP BY countries.Continent' (-0.133) (length=20)
[WRONG] [medium] Pred 1:	b'SELECT continents.Continent, countries.CountryName, COUNT(*) FROM countries JOIN continents ON countries.Continent = continents.ContId GROUP BY countries.Continent' (-0.192) (length=20)
[CORRE] [medium] Pred 2:	b'SELECT continents.Continent, countries.Continent, COUNT(*) FROM countries JOIN continents ON countries.Continent = continents.ContId GROUP BY countries.Continent' (-0.949) (length=20)
Error Case 20

ERROR: Join condition does not match with table: ['continents', {'join': 'countries', 'on': {'eq': ['countries.Continent', 'countries.CountryId']}}]
ERROR: Join condition does not match with table: ['continents', {'join': 'countries', 'on': {'eq': ['countries.CountryId', 'countries.Continent']}}]
ERROR: Join condition does not match with table: ['continents', {'join': 'countries', 'on': {'eq': ['countries.CountryId', 'countries.Continent']}}]
ERROR: Join condition does not match with table: ['continents', {'join': 'countries', 'on': {'eq': ['countries.CountryId', 'countries.Continent']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'continents', 'on': {'eq': ['countries.Continent', 'countries.CountryId']}}]
Example 90
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'For each continent, list its id, name, and how many countries it has?'
NL tokens: [b'for', b'each', b'continent', b',', b'list', b'its', b'id', b',', b'name', b',', b'and', b'how', b'many', b'countries', b'it', b'has', b'?']
NL tokens (original): [b'For', b'each', b'continent', b',', b'list', b'its', b'id', b',', b'name', b',', b'and', b'how', b'many', b'countries', b'it', b'has', b'?']
['[CLS]', 'for', 'each', 'continent', ',', 'list', 'its', 'id', ',', 'name', ',', 'and', 'how', 'many', 'countries', 'it', 'has', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId'
Target TF-P tokens: from continents join countries on continents.ContId = countries.Continent group by continents.ContId select continents.ContId , continents.Continent , count (*)

[WRONG] [medium] Pred 0:	b'SELECT continents.Continent, countries.CountryName, COUNT(*) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY countries.CountryId' (-0.165) (length=20)
[WRONG] [medium] Pred 1:	b'SELECT continents.Continent, countries.CountryName, COUNT(*) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY countries.Continent' (-0.321) (length=20)
[WRONG] [medium] Pred 2:	b'SELECT continents.Continent, countries.CountryName, COUNT(*) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.Continent, countries.CountryName' (-0.359) (length=22)
[WRONG] [medium] Pred 3:	b'SELECT continents.Continent, countries.CountryName, COUNT(*) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.Continent' (-0.735) (length=20)
[WRONG] [medium] Pred 4:	b'SELECT continents.Continent, countries.CountryName, COUNT(*) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.Continent, countries.CountryId' (-0.886) (length=22)
[WRONG] [medium] Pred 5:	b'SELECT continents.Continent, countries.CountryName, COUNT(*) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId' (-1.392) (length=20)
[WRONG] [medium] Pred 6:	b'SELECT continents.Continent, countries.CountryName, COUNT(*) FROM countries JOIN continents ON countries.Continent = continents.ContId GROUP BY countries.Continent' (-1.435) (length=20)
[WRONG] [medium] Pred 7:	b'SELECT continents.Continent, countries.CountryName, COUNT(*) FROM continents JOIN countries ON countries.Continent = continents.ContId GROUP BY countries.Continent' (-1.586) (length=20)
[WRONG] [medium] Pred 8:	b'SELECT continents.Continent, COUNT(*) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.Continent, continents.ContId, countries.CountryName' (-1.897) (length=22)
[WRONG] [medium] Pred 9:	b'SELECT continents.Continent, COUNT(*) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.Continent, countries.CountryId, countries.CountryName' (-2.344) (length=22)
[WRONG] [medium] Pred 10:	b'SELECT continents.Continent, COUNT(*) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY countries.Continent' (-2.788) (length=18)
Error Case 21

Parsing error: from car_makers join model_list on car_makers.Id = model_list.Maker group by car_makers.Maker , car_makers.FullName , count (*) , car_makers.FullName , count (*)
Example 93
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'How many models does each car maker produce? List maker full name, id and the number.'
NL tokens: [b'how', b'many', b'models', b'does', b'each', b'car', b'maker', b'produce', b'?', b'list', b'maker', b'full', b'name', b',', b'id', b'and', b'the', b'number', b'.']
NL tokens (original): [b'How', b'many', b'models', b'does', b'each', b'car', b'maker', b'produce', b'?', b'List', b'maker', b'full', b'name', b',', b'id', b'and', b'the', b'number', b'.']
['[CLS]', 'how', 'many', 'models', 'does', 'each', 'car', 'maker', 'produce', '?', 'list', 'maker', 'full', 'name', ',', 'id', 'and', 'the', 'number', '.', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id'
Target TF-P tokens: from car_makers join model_list on car_makers.Id = model_list.Maker group by car_makers.Id select car_makers.FullName , car_makers.Id , count (*)

[WRONG] [medium] Pred 0:	b'SELECT car_makers.Maker, car_makers.FullName, COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id' (-0.005) (length=20)
[CORRE] [medium] Pred 1:	b'SELECT car_makers.FullName, car_makers.Id, COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id' (-1.682) (length=20)
Error Case 22

Example 94
  9%|▉         | 12/130 [01:26<14:51,  7.55s/it]car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What is the full name of each car maker, along with its id and how many models it produces?'
NL tokens: [b'what', b'is', b'the', b'full', b'name', b'of', b'each', b'car', b'maker', b',', b'along', b'with', b'its', b'id', b'and', b'how', b'many', b'models', b'it', b'produces', b'?']
NL tokens (original): [b'What', b'is', b'the', b'full', b'name', b'of', b'each', b'car', b'maker', b',', b'along', b'with', b'its', b'id', b'and', b'how', b'many', b'models', b'it', b'produces', b'?']
['[CLS]', 'what', 'is', 'the', 'full', 'name', 'of', 'each', 'car', 'maker', ',', 'along', 'with', 'its', 'id', 'and', 'how', 'many', 'models', 'it', 'produces', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id'
Target TF-P tokens: from car_makers join model_list on car_makers.Id = model_list.Maker group by car_makers.Id select car_makers.FullName , car_makers.Id , count (*)

[WRONG] [medium] Pred 0:	b'SELECT car_makers.Maker, car_makers.FullName, COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id' (-0.466) (length=20)
[CORRE] [medium] Pred 1:	b'SELECT car_makers.FullName, car_makers.Id, COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id' (-1.190) (length=20)
Error Case 23

Parsing error: from cars_data yes min (cars_data.Horsepower) order by (cars_data.Horsepower) limit 1
Parsing error: from cars_data yes max (cars_data.Horsepower) order by (cars_data.Horsepower) limit 1
Parsing error: from cars_data yes max (cars_data.Horsepower) order by (cars_data.Id) limit 1
Parsing error: from cars_data yes max (cars_data.Horsepower) = (from cars_data select cars_data.Id order by cars_data.Horsepower limit 1
Parsing error: from cars_data yes max (cars_data.Horsepower) = (from cars_data select min (cars_data.Horsepower)) order by cars_data.Horsepower limit 1
Parsing error: from cars_data no cars_data.Horsepower order by (cars_data.Horsepower) limit 1
Parsing error: from cars_data yes max (cars_data.Horsepower) = (from cars_data select cars_data.Id order by cars_data.Horsepower limit 1) order by cars_data.Horsepower limit 1
Parsing error: from cars_data yes max (cars_data.Horsepower) = (from cars_data select cars_data.Id order by cars_data.Horsepower limit 1 : the
Parsing error: from cars_data yes max (cars_data.Horsepower) = (from cars_data select cars_data.Id order by cars_data.Horsepower limit 1 : the : ? "select cars_data.Horsepower"
Parsing error: from cars_data yes max (cars_data.Horsepower) = (from cars_data select cars_data.Id order by cars_data.Horsepower limit 1 : the : the "select cars_data.Horsepower"
Parsing error: from cars_data yes max (cars_data.Horsepower) = (from cars_data select cars_data.Id order by cars_data.Horsepower limit 1 : the : has "select cars_data.Horsepower"
Example 95
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'Which model of the car has the minimum horsepower?'
NL tokens: [b'which', b'model', b'of', b'the', b'car', b'has', b'the', b'minimum', b'horsepower', b'?']
NL tokens (original): [b'Which', b'model', b'of', b'the', b'car', b'has', b'the', b'minimum', b'horsepower', b'?']
['[CLS]', 'which', 'model', 'of', 'the', 'car', 'has', 'the', 'minimum', 'horsepower', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1'
Target TF-P tokens: from car_names join cars_data on car_names.MakeId = cars_data.Id select car_names.Model order by cars_data.Horsepower asc limit 1

[WRONG] [hard] Pred 0:	b'SELECT MAX(cars_data.Horsepower) FROM cars_data ORDER BY cars_data.Horsepower LIMIT 1' (-6.225) (length=12)
[WRONG] [hard] Pred 1:	b'SELECT MIN(cars_data.Horsepower) FROM cars_data ORDER BY cars_data.Horsepower LIMIT 1' (-6.527) (length=12)
[WRONG] [hard] Pred 2:	b'SELECT SUM(cars_data.Horsepower) FROM cars_data ORDER BY cars_data.Horsepower LIMIT 1' (-6.638) (length=12)
[WRONG] [hard] Pred 3:	b'SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Horsepower LIMIT 1' (-7.205) (length=9)
[WRONG] [hard] Pred 4:	b'SELECT MIN(cars_data.Horsepower) FROM cars_data' (-7.423) (length=8)
Error Case 24

ERROR: Join condition does not match with table: ['cars_data', {'join': 'car_names', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
Parsing error: from cars_data order by cars_data.Horsepower = (from cars_data select min (cars_data.Horsepower)) order by cars_data.Horsepower limit 1
Parsing error: from cars_data where cars_data.Horsepower = (from cars_data select min (cars_data.Horsepower)) order by cars_data.Horsepower limit 1
Parsing error: from cars_data yes min (cars_data.Horsepower) order by (cars_data.Horsepower) limit 1
ERROR: Join condition does not match with table: ['cars_data', {'join': 'model_list', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
Parsing error: from cars_data yes min (cars_data.Horsepower) order by (cars_data.Cylinders) limit 1
Parsing error: from cars_data yes min (cars_data.Horsepower) order by (cars_data.Id) limit 1
Parsing error: from cars_data no cars_data.Horsepower order by (cars_data.Horsepower-cars_data.Horsepower) limit 1
Parsing error: from cars_data no cars_data.Horsepower order by (cars_data.Horsepower-cars_data.Cylinders) limit 1
Parsing error: from cars_data order by cars_data.Horsepower = (from cars_data select min (cars_data.Horsepower)) order by cars_data.Horsepower = limit 1
Parsing error: from cars_data order by cars_data.Horsepower = (from cars_data select min (cars_data.Horsepower)) order by cars_data.Horsepower desc limit 1
Parsing error: from cars_data order by cars_data.Horsepower = (from cars_data select min (cars_data.Horsepower)) order by cars_data.Horsepower asc limit 1
Parsing error: from cars_data order by cars_data.Horsepower = (from cars_data select min (cars_data.Horsepower)) order by cars_data.Horsepower < limit 1
Parsing error: from cars_data order by cars_data.Horsepower = (from cars_data select min (cars_data.Horsepower)) order by cars_data.Cylinders limit 1
Parsing error: from cars_data where cars_data.Horsepower = (from cars_data select min (cars_data.Horsepower)) order by cars_data.Cylinders limit 1
Parsing error: from cars_data order by cars_data.Horsepower = (from cars_data select min (cars_data.Horsepower)) order by cars_data.Id limit 1
Example 96
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What is the model of the car with the smallest amount of horsepower?'
NL tokens: [b'what', b'is', b'the', b'model', b'of', b'the', b'car', b'with', b'the', b'smallest', b'amount', b'of', b'horsepower', b'?']
NL tokens (original): [b'What', b'is', b'the', b'model', b'of', b'the', b'car', b'with', b'the', b'smallest', b'amount', b'of', b'horsepower', b'?']
['[CLS]', 'what', 'is', 'the', 'model', 'of', 'the', 'car', 'with', 'the', 'smallest', 'amount', 'of', 'horsepower', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1'
Target TF-P tokens: from car_names join cars_data on car_names.MakeId = cars_data.Id select car_names.Model order by cars_data.Horsepower asc limit 1

[WRONG] hard Pred 0:	No valid output! (0.000)
Error Case 25

ERROR: table "cars_data" in field expression cars_data.Weight is not in the current scope
Parsing error: from cars_data where cars_data.Weight < (from cars_data select avg (cars_data.Weight)) select intersect from car_names where cars_data.Weight < (from cars_data select avg (cars_data.Weight)) select car_names.Model
ERROR: table "cars_data" in field expression cars_data.Weight is not in the current scope
ERROR: table "cars_data" in field expression cars_data.Weight is not in the current scope
ERROR: table "cars_data" in field expression cars_data.Weight is not in the current scope
ERROR: table "cars_data" in field expression cars_data.Weight is not in the current scope
ERROR: Join condition does not match with table: ['cars_data', {'join': 'model_list', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
ERROR: table "cars_data" in field expression cars_data.Weight is not in the current scope
ERROR: table "cars_data" in field expression cars_data.Weight is not in the current scope
Parsing error: from cars_data where cars_data.Weight < (from cars_data select avg (cars_data.Weight)) select intersect from car_names group by car_names.Model select car_names.Model
Parsing error: from cars_data where cars_data.Weight < (from cars_data select avg (cars_data.Weight)) having avg (cars_data.Weight)
ERROR: table "cars_data" in field expression cars_data.Weight is not in the current scope
Parsing error: from cars_data where cars_data.Weight < (from cars_data select avg (cars_data.Weight)) and cars_data.Id in (from cars_data group by cars_data.Id select cars_data.Id
Parsing error: from cars_data where cars_data.Weight < (from cars_data select avg (cars_data.Weight)) having min (cars_data.Weight)
ERROR: table "cars_data" in field expression cars_data.Weight is not in the current scope
Example 97
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'Find the model of the car whose weight is below the average weight.'
NL tokens: [b'find', b'the', b'model', b'of', b'the', b'car', b'whose', b'weight', b'is', b'below', b'the', b'average', b'weight', b'.']
NL tokens (original): [b'Find', b'the', b'model', b'of', b'the', b'car', b'whose', b'weight', b'is', b'below', b'the', b'average', b'weight', b'.']
['[CLS]', 'find', 'the', 'model', 'of', 'the', 'car', 'whose', 'weight', 'is', 'below', 'the', 'average', 'weight', '.', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)'
Target TF-P tokens: from car_names join cars_data on car_names.MakeId = cars_data.Id where cars_data.Weight < (from cars_data select avg (cars_data.Weight)) select car_names.Model

[WRONG] [extra] Pred 0:	b'SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Weight < (SELECT AVG(cars_data.Weight) FROM cars_data)' (-4.500) (length=20)
Error Case 26

ERROR: table "cars_data" in field expression cars_data.Weight is not in the current scope
ERROR: table "cars_data" in field expression cars_data.Weight is not in the current scope
ERROR: table "cars_data" in field expression cars_data.Weight is not in the current scope
Parsing error: from cars_data where cars_data.Weight < (from cars_data select avg (cars_data.Weight)) select intersect from car_names where cars_data.Weight < (from cars_data select avg (cars_data.Weight)) select car_names.Model
ERROR: table "cars_data" in field expression cars_data.Weight is not in the current scope
Parsing error: from cars_data where cars_data.Weight < (from cars_data select avg (cars_data.Weight)) : cars_data.Id in (from cars_data where cars_data.Weight < (from car_names select avg (cars_data.Weight)) select car_names.Model) select car_names.Model
ERROR: table "cars_data" in field expression cars_data.Weight is not in the current scope
ERROR: Join condition does not match with table: ['cars_data', {'join': 'car_names', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
Parsing error: from cars_data from car_names on cars_data.Id = cars_data.Id where cars_data.Weight < (from cars_data select avg (cars_data.Weight)) select car_names.Model
ERROR: table "cars_data" in field expression cars_data.Weight is not in the current scope
ERROR: table "cars_data" in field expression cars_data.Weight is not in the current scope
Parsing error: from cars_data where cars_data.Weight < (from cars_data select avg (cars_data.Weight)) select intersect from cars_data where cars_data.Weight < (from car_names select avg (cars_data.Weight)) select car_names.Model
Parsing error: from cars_data where cars_data.Weight < (from cars_data select avg (cars_data.Weight)) select intersect from car_names where cars_data.Weight < (from car_names select avg (cars_data.Weight)) select car_names.Model
ERROR: table "cars_data" in field expression cars_data.Weight is not in the current scope
ERROR: table "cars_data" in field expression cars_data.Weight is not in the current scope
ERROR: table "cars_data" in field expression cars_data.Weight is not in the current scope
Example 98
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What is the model for the car with a weight smaller than the average?'
NL tokens: [b'what', b'is', b'the', b'model', b'for', b'the', b'car', b'with', b'a', b'weight', b'smaller', b'than', b'the', b'average', b'?']
NL tokens (original): [b'What', b'is', b'the', b'model', b'for', b'the', b'car', b'with', b'a', b'weight', b'smaller', b'than', b'the', b'average', b'?']
['[CLS]', 'what', 'is', 'the', 'model', 'for', 'the', 'car', 'with', 'a', 'weight', 'smaller', 'than', 'the', 'average', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)'
Target TF-P tokens: from car_names join cars_data on car_names.MakeId = cars_data.Id where cars_data.Weight < (from cars_data select avg (cars_data.Weight)) select car_names.Model

[WRONG] extra Pred 0:	No valid output! (0.000)
Error Case 27

ERROR: Join condition does not match with table: ['car_makers', {'join': 'car_names', 'on': {'eq': ['car_makers.Id', 'car_names.MakeId']}}, {'join': 'cars_data', 'on': {'eq': ['car_names.Model', 'car_names.Model']}}]
ERROR: Join condition does not match with table: ['car_names', {'join': 'car_makers', 'on': {'eq': ['car_makers.Id', 'car_makers.Id']}}]
ERROR: Join condition does not match with table: ['car_makers', {'join': 'car_names', 'on': {'eq': ['car_makers.Id', 'car_names.MakeId']}}, {'join': 'cars_data', 'on': {'eq': ['car_names.Model', 'car_names.Model']}}]
Example 99
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'Find the name of the makers that produced some cars in the year of 1970?'
NL tokens: [b'find', b'the', b'name', b'of', b'the', b'makers', b'that', b'produced', b'some', b'cars', b'in', b'the', b'year', b'of', b'1970', b'?']
NL tokens (original): [b'Find', b'the', b'name', b'of', b'the', b'makers', b'that', b'produced', b'some', b'cars', b'in', b'the', b'year', b'of', b'1970', b'?']
['[CLS]', 'find', 'the', 'name', 'of', 'the', 'makers', 'that', 'produced', 'some', 'cars', 'in', 'the', 'year', 'of', '1970', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b"SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"
Target TF-P tokens: from car_makers join model_list on car_makers.Id = model_list.Maker join car_names on model_list.Model = car_names.Model join cars_data on car_names.MakeId = cars_data.Id where cars_data.Year = "1970" select distinct car_makers.Maker

[WRONG] [extra] Pred 0:	b'SELECT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Make = 1970' (-2.661) (length=15)
[WRONG] [extra] Pred 1:	b'SELECT DISTINCT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Make = 1970' (-3.618) (length=16)
[WRONG] [extra] Pred 2:	b'SELECT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id WHERE cars_data.Year = 1970' (-3.725) (length=21)
[WRONG] [extra] Pred 3:	b'SELECT car_makers.Maker FROM car_names JOIN car_makers ON car_names.MakeId = car_makers.Id WHERE car_names.Make = 1970' (-3.990) (length=15)
[WRONG] [extra] Pred 4:	b'SELECT DISTINCT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id WHERE cars_data.Year = 1970' (-4.308) (length=22)
[WRONG] [extra] Pred 5:	b'SELECT car_makers.Maker FROM car_names JOIN car_makers ON car_makers.Id = car_names.MakeId WHERE car_names.Make = 1970' (-5.076) (length=15)
[WRONG] [extra] Pred 6:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Make = 1970' (-5.312) (length=17)
[WRONG] [extra] Pred 7:	b'SELECT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id WHERE cars_data.Year = 1970 AND car_makers.FullName = year' (-5.330) (length=27)
[WRONG] [extra] Pred 8:	b'SELECT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Make = 1970 INTERSECT SELECT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Make = 1970' (-5.772) (length=30)
[WRONG] [extra] Pred 9:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id WHERE cars_data.Year = 1970' (-5.795) (length=23)
[WRONG] [extra] Pred 10:	b'SELECT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN car_names ON car_names.Model = car_names.Model WHERE car_names.Make = 1970' (-5.970) (length=21)
[WRONG] [extra] Pred 11:	b'SELECT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Make = 1970 ORDER BY car_makers.FullName' (-6.002) (length=17)
[WRONG] [extra] Pred 12:	b'SELECT DISTINCT car_makers.Maker, car_makers.FullName FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Make = 1970' (-6.089) (length=18)
Error Case 28

ERROR: Join condition does not match with table: ['car_makers', {'join': 'car_names', 'on': {'eq': ['car_makers.Id', 'car_makers.Id']}}]
ERROR: Join condition does not match with table: ['car_names', {'join': 'car_makers', 'on': {'eq': ['car_makers.Id', 'car_makers.Id']}}]
ERROR: Join condition does not match with table: ['car_makers', {'join': 'car_names', 'on': {'eq': ['car_makers.Id', 'car_makers.Id']}}]
ERROR: table "car_names" in field expression car_names.Make is not in the current scope
argument of type 'int' is not iterable
argument of type 'int' is not iterable
Example 100
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What is the name of the different car makers who produced a car in 1970?'
NL tokens: [b'what', b'is', b'the', b'name', b'of', b'the', b'different', b'car', b'makers', b'who', b'produced', b'a', b'car', b'in', b'1970', b'?']
NL tokens (original): [b'What', b'is', b'the', b'name', b'of', b'the', b'different', b'car', b'makers', b'who', b'produced', b'a', b'car', b'in', b'1970', b'?']
['[CLS]', 'what', 'is', 'the', 'name', 'of', 'the', 'different', 'car', 'makers', 'who', 'produced', 'a', 'car', 'in', '1970', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b"SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'"
Target TF-P tokens: from car_makers join model_list on car_makers.Id = model_list.Maker join car_names on model_list.Model = car_names.Model join cars_data on car_names.MakeId = cars_data.Id where cars_data.Year = "1970" select distinct car_makers.Maker

[WRONG] [extra] Pred 0:	b'SELECT DISTINCT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Make = 1970' (-1.095) (length=16)
[WRONG] [extra] Pred 1:	b'SELECT DISTINCT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.Model WHERE car_names.Make = 1970' (-3.390) (length=16)
[WRONG] [extra] Pred 2:	b'SELECT DISTINCT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.Make WHERE car_names.Make = 1970' (-3.495) (length=16)
[WRONG] [extra] Pred 3:	b'SELECT DISTINCT car_makers.Maker FROM car_names JOIN car_makers ON car_names.Make = car_makers.Id WHERE car_names.Make = 1970' (-3.901) (length=16)
[WRONG] [extra] Pred 4:	b'SELECT DISTINCT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.MakeId = 1970' (-3.910) (length=16)
[WRONG] [extra] Pred 5:	b'SELECT DISTINCT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Make = 1970 INTERSECT SELECT DISTINCT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Make = 1970' (-4.124) (length=32)
[WRONG] [extra] Pred 6:	b'SELECT DISTINCT car_makers.Maker FROM car_names JOIN car_makers ON car_names.MakeId = car_makers.Id WHERE car_names.Make = 1970' (-4.608) (length=16)
[WRONG] [extra] Pred 7:	b'SELECT DISTINCT car_makers.Maker FROM car_names JOIN car_makers ON car_names.Model = car_makers.Id WHERE car_names.Make = 1970' (-4.625) (length=16)
[WRONG] [extra] Pred 8:	b'SELECT DISTINCT car_makers.Maker, car_makers.FullName FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Make = 1970' (-4.861) (length=18)
[WRONG] [extra] Pred 9:	b'SELECT DISTINCT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN car_names ON car_names.Model = car_names.MakeId WHERE car_names.Make = 1970' (-4.935) (length=22)
Error Case 29

ERROR: Join condition does not match with table: ['car_names', {'join': 'cars_data', 'on': {'eq': ['car_names.Model', 'car_names.MakeId']}}]
ERROR: Join condition does not match with table: ['cars_data', {'join': 'car_names', 'on': {'eq': ['car_names.Model', 'car_names.MakeId']}}]
ERROR: Join condition does not match with table: ['car_names', {'join': 'cars_data', 'on': {'eq': ['car_names.MakeId', 'car_names.Model']}}]
ERROR: Join condition does not match with table: ['car_names', {'join': 'cars_data', 'on': {'eq': ['car_names.MakeId', 'car_names.MakeId']}}]
ERROR: Join condition does not match with table: ['car_names', {'join': 'cars_data', 'on': {'eq': ['car_names.Model', 'car_names.Model']}}]
ERROR: Join condition does not match with table: ['car_names', {'join': 'cars_data', 'on': {'eq': ['car_names.Model', 'car_names.MakeId']}}]
ERROR: Join condition does not match with table: ['car_names', {'join': 'cars_data', 'on': {'eq': ['car_names.Model', 'car_names.MakeId']}}]
ERROR: Join condition does not match with table: ['car_names', {'join': 'cars_data', 'on': {'eq': ['car_names.Model', 'car_names.MakeId']}}]
ERROR: Join condition does not match with table: ['cars_data', {'join': 'car_names', 'on': {'eq': ['car_names.Model', 'car_names.MakeId']}}]
Parsing error: from car_names join cars_data on car_names.Model = cars_data.Id select car_names.Make , cars_data.Year order by cars_data.Year limit ?
Example 101
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'Find the make and production time of the cars that were produced in the earliest year?'
NL tokens: [b'find', b'the', b'make', b'and', b'production', b'time', b'of', b'the', b'cars', b'that', b'were', b'produced', b'in', b'the', b'earliest', b'year', b'?']
NL tokens (original): [b'Find', b'the', b'make', b'and', b'production', b'time', b'of', b'the', b'cars', b'that', b'were', b'produced', b'in', b'the', b'earliest', b'year', b'?']
['[CLS]', 'find', 'the', 'make', 'and', 'production', 'time', 'of', 'the', 'cars', 'that', 'were', 'produced', 'in', 'the', 'earliest', 'year', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA)'
Target TF-P tokens: from cars_data join car_names on cars_data.Id = car_names.MakeId where cars_data.Year = (from cars_data select min (cars_data.Year)) select car_names.Make , cars_data.Year

[WRONG] [extra] Pred 0:	b'SELECT car_names.Make, cars_data.Year FROM car_names JOIN cars_data ON car_names.Model = cars_data.Id ORDER BY cars_data.Year LIMIT 1' (-2.745) (length=17)
[WRONG] [extra] Pred 1:	b'SELECT car_names.Make, cars_data.Year FROM cars_data JOIN car_names ON car_names.Model = cars_data.Id ORDER BY cars_data.Year LIMIT 1' (-4.091) (length=17)
[WRONG] [extra] Pred 2:	b'SELECT car_names.Make, cars_data.Year FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.Year LIMIT 1' (-4.179) (length=17)
[WRONG] [extra] Pred 3:	b'SELECT car_names.Make, cars_data.Year FROM car_names JOIN cars_data ON car_names.Model = cars_data.Id ORDER BY cars_data.Year ASC LIMIT 1' (-5.027) (length=18)
[WRONG] [extra] Pred 4:	b'SELECT car_names.Make, cars_data.Year FROM car_names JOIN cars_data ON car_names.Model = cars_data.Id ORDER BY cars_data.Year DESC LIMIT 1' (-5.673) (length=18)
[WRONG] [extra] Pred 5:	b'SELECT car_names.Make, cars_data.Year FROM car_names JOIN cars_data ON car_names.Model = cars_data.Id ORDER BY cars_data.Year LIMIT 1' (-5.711) (length=19)
Error Case 30

ERROR: table "car_names" in field expression car_names.Make is not in the current scope
ERROR: table "car_names" in field expression car_names.Make is not in the current scope
Parsing error: from car_makers join car_names on car_makers.Id = car_names.MakeId where car_names.Make = "carr" and car_names.Make order by car_makers.Maker limit 1
Example 102
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What is the maker of the carr produced in the earliest year and what year was it?'
NL tokens: [b'what', b'is', b'the', b'maker', b'of', b'the', b'carr', b'produced', b'in', b'the', b'earliest', b'year', b'and', b'what', b'year', b'was', b'it', b'?']
NL tokens (original): [b'What', b'is', b'the', b'maker', b'of', b'the', b'carr', b'produced', b'in', b'the', b'earliest', b'year', b'and', b'what', b'year', b'was', b'it', b'?']
['[CLS]', 'what', 'is', 'the', 'maker', 'of', 'the', 'carr', 'produced', 'in', 'the', 'earliest', 'year', 'and', 'what', 'year', 'was', 'it', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA)'
Target TF-P tokens: from cars_data join car_names on cars_data.Id = car_names.MakeId where cars_data.Year = (from cars_data select min (cars_data.Year)) select car_names.Make , cars_data.Year

[WRONG] [extra] Pred 0:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_makers.FullName = "carr" AND car_names.Make = "carr"' (-0.200) (length=25)
[WRONG] [extra] Pred 1:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_makers.Maker = "carr" AND car_names.Make = "carr"' (-0.211) (length=25)
[WRONG] [extra] Pred 2:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Make = "carr" AND car_names.Make = "carr"' (-0.358) (length=25)
[WRONG] [extra] Pred 3:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_makers.Maker = "carr" AND car_makers.FullName = "carr"' (-0.686) (length=25)
[WRONG] [extra] Pred 4:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_makers.FullName = "carr" AND car_names.Make = "VALUE"' (-0.891) (length=25)
[WRONG] [extra] Pred 5:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Make = "carr" AND car_names.Make = "VALUE"' (-0.994) (length=25)
[WRONG] [extra] Pred 6:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_makers.FullName = "carr" AND car_makers.FullName = "carr"' (-1.020) (length=25)
[WRONG] [extra] Pred 7:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_makers.Country = "carr" AND car_names.Make = "carr"' (-1.051) (length=25)
[WRONG] [extra] Pred 8:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_makers.FullName = "carr" AND car_names.Make = (SELECT car_makers.Maker FROM car_makers WHERE car_makers.FullName = "carr")' (-1.083) (length=34)
[WRONG] [extra] Pred 9:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_makers.Maker = "carr" AND car_names.Make = "VALUE"' (-1.142) (length=25)
[WRONG] [extra] Pred 10:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Make = "carr" AND car_makers.FullName = "carr"' (-1.182) (length=25)
[WRONG] [extra] Pred 11:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers WHERE car_makers.FullName = "carr" AND car_makers.FullName = "carr"' (-1.186) (length=19)
[WRONG] [extra] Pred 12:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Model = "carr" AND car_names.Make = "carr"' (-1.213) (length=25)
Error Case 31

ERROR: Join condition does not match with table: ['model_list', {'join': 'cars_data', 'on': {'eq': ['model_list.Model', 'model_list.ModelId']}}]
ERROR: Join condition does not match with table: ['car_names', {'join': 'model_list', 'on': {'eq': ['model_list.Model', 'model_list.ModelId']}}]
ERROR: Join condition does not match with table: ['car_names', {'join': 'model_list', 'on': {'eq': ['model_list.Model', 'model_list.ModelId']}}]
ERROR: Join condition does not match with table: ['car_names', {'join': 'model_list', 'on': {'eq': ['model_list.Model', 'model_list.ModelId']}}]
Parsing error: from model_list and model_list.Model > 1980 select distinct model_list.Model
Parsing error: from model_list on model_list.Model > 1980 select distinct model_list.Model
ERROR: Join condition does not match with table: ['car_names', {'join': 'model_list', 'on': {'eq': ['model_list.Model', 'model_list.ModelId']}}]
Example 103
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'Which distinct car models are the produced after 1980?'
NL tokens: [b'which', b'distinct', b'car', b'models', b'are', b'the', b'produced', b'after', b'1980', b'?']
NL tokens (original): [b'Which', b'distinct', b'car', b'models', b'are', b'the', b'produced', b'after', b'1980', b'?']
['[CLS]', 'which', 'distinct', 'car', 'models', 'are', 'the', 'produced', 'after', '1980', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980'
Target TF-P tokens: from model_list join car_names on model_list.Model = car_names.Model join cars_data on car_names.MakeId = cars_data.Id where cars_data.Year > 1980 select distinct model_list.Model

[WRONG] [hard] Pred 0:	b'SELECT DISTINCT model_list.Model FROM model_list WHERE model_list.Model > 1980' (-5.473) (length=10)
[WRONG] [hard] Pred 1:	b'SELECT DISTINCT car_names.Model FROM car_names WHERE car_names.Make > 1980' (-6.233) (length=10)
 10%|█         | 13/130 [02:05<32:51, 16.85s/it][WRONG] [hard] Pred 2:	b'SELECT DISTINCT model_list.Model FROM model_list JOIN cars_data ON model_list.Model = cars_data.Id WHERE cars_data.Year > 1980' (-6.238) (length=16)
[WRONG] [hard] Pred 3:	b'SELECT DISTINCT model_list.Model FROM model_list WHERE model_list.Maker > 1980' (-6.322) (length=10)
[WRONG] [hard] Pred 4:	b'SELECT DISTINCT car_names.Model FROM car_names WHERE car_names.MakeId > 1980' (-6.831) (length=10)
[WRONG] [hard] Pred 5:	b'SELECT DISTINCT model_list.Model FROM model_list WHERE model_list.ModelId > 1980' (-7.894) (length=10)
[WRONG] [hard] Pred 6:	b'SELECT DISTINCT car_names.Model FROM car_names JOIN model_list ON model_list.Model = car_names.MakeId WHERE car_names.MakeId > 1980' (-8.079) (length=16)
[WRONG] [hard] Pred 7:	b'SELECT DISTINCT car_names.Model FROM car_names JOIN model_list ON model_list.Model = car_names.MakeId WHERE car_names.Make > 1980' (-8.266) (length=16)
[WRONG] [hard] Pred 8:	b'SELECT DISTINCT model_list.Model FROM model_list JOIN model_list ON model_list.Model = model_list.ModelId WHERE model_list.Maker > 1980' (-8.795) (length=16)
Error Case 32

Parsing error: from model_list where cars_data on model_list.Model = cars_data.Id where cars_data.Year > 1980 select distinct model_list.Model
Parsing error: from model_list where cars_data on model_list.Maker = cars_data.Id where cars_data.Year > 1980 select distinct model_list.Model
ERROR: Join condition does not match with table: ['model_list', {'join': 'cars_data', 'on': {'eq': ['model_list.Model', 'model_list.ModelId']}}]
ERROR: Join condition does not match with table: ['model_list', {'join': 'cars_data', 'on': {'eq': ['model_list.Model', 'cars_data.Id']}}, {'join': 'car_names', 'on': {'eq': ['model_list.Maker', 'cars_data.Id']}}]
Example 104
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What are the different models for the cards produced after 1980?'
NL tokens: [b'what', b'are', b'the', b'different', b'models', b'for', b'the', b'cards', b'produced', b'after', b'1980', b'?']
NL tokens (original): [b'What', b'are', b'the', b'different', b'models', b'for', b'the', b'cards', b'produced', b'after', b'1980', b'?']
['[CLS]', 'what', 'are', 'the', 'different', 'models', 'for', 'the', 'cards', 'produced', 'after', '1980', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980'
Target TF-P tokens: from model_list join car_names on model_list.Model = car_names.Model join cars_data on car_names.MakeId = cars_data.Id where cars_data.Year > 1980 select distinct model_list.Model

[WRONG] [hard] Pred 0:	b'SELECT DISTINCT model_list.Model FROM model_list WHERE model_list.Maker > 1980' (-3.944) (length=10)
[WRONG] [hard] Pred 1:	b'SELECT DISTINCT model_list.Model FROM model_list JOIN cars_data ON model_list.Model = cars_data.Id WHERE cars_data.Year > 1980' (-4.079) (length=16)
[WRONG] [hard] Pred 2:	b'SELECT DISTINCT model_list.Model FROM model_list WHERE model_list.ModelId > 1980' (-4.997) (length=10)
[CORRE] [hard] Pred 3:	b'SELECT DISTINCT model_list.Model FROM model_list JOIN cars_data ON model_list.Model = cars_data.Id JOIN car_names ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980' (-5.773) (length=22)
Error Case 33

Parsing error: from car_makers join countries on car_makers.Country = countries.CountryId group by countries.Continent having count (*) , car_makers.Country select countries.CountryName , count (*)
Parsing error: from car_makers join countries on car_makers.Country = countries.CountryId group by countries.Continent having count (*) , countries.Continent select countries.CountryName , count (*)
ERROR: Join condition does not match with table: ['countries', {'join': 'car_makers', 'on': {'eq': ['countries.Continent', 'countries.CountryId']}}]
Parsing error: from car_makers join countries on car_makers.Country = countries.CountryId group by countries.Continent having count (*) , car_makers.Country
ERROR: Join condition does not match with table: ['car_makers', {'join': 'countries', 'on': {'eq': ['countries.Continent', 'countries.CountryId']}}]
Parsing error: from car_makers join countries on car_makers.Country = countries.CountryId group by countries.Continent having count (*) , countries.Continent
Example 105
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'How many car makers are there in each continents? List the continent name and the count.'
NL tokens: [b'how', b'many', b'car', b'makers', b'are', b'there', b'in', b'each', b'continents', b'?', b'list', b'the', b'continent', b'name', b'and', b'the', b'count', b'.']
NL tokens (original): [b'How', b'many', b'car', b'makers', b'are', b'there', b'in', b'each', b'continents', b'?', b'List', b'the', b'continent', b'name', b'and', b'the', b'count', b'.']
['[CLS]', 'how', 'many', 'car', 'makers', 'are', 'there', 'in', 'each', 'continents', '?', 'list', 'the', 'continent', 'name', 'and', 'the', 'count', '.', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent'
Target TF-P tokens: from continents join countries on continents.ContId = countries.Continent join car_makers on countries.CountryId = car_makers.Country group by continents.Continent select continents.Continent , count (*)

[WRONG] [hard] Pred 0:	b'SELECT countries.CountryName, COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.Continent' (-0.192) (length=18)
[WRONG] [hard] Pred 1:	b'SELECT countries.CountryName, COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY car_makers.Country' (-1.693) (length=18)
[WRONG] [hard] Pred 2:	b'SELECT countries.CountryName, COUNT(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent' (-2.082) (length=18)
[WRONG] [hard] Pred 3:	b'SELECT countries.CountryName, COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.CountryName' (-3.114) (length=18)
[WRONG] [hard] Pred 4:	b'SELECT countries.CountryName, COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.Continent' (-3.542) (length=23)
[WRONG] [hard] Pred 5:	b'SELECT continents.Continent, COUNT(*) FROM continents JOIN car_makers ON continents.ContId = car_makers.Country GROUP BY continents.Continent' (-3.551) (length=18)
[WRONG] [hard] Pred 6:	b'SELECT continents.Continent, COUNT(*) FROM car_makers JOIN continents ON car_makers.Country = continents.ContId GROUP BY continents.Continent' (-3.608) (length=18)
[WRONG] [hard] Pred 7:	b'SELECT countries.CountryName, COUNT(*), 1 FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.Continent' (-3.713) (length=20)
[WRONG] [hard] Pred 8:	b'SELECT countries.CountryName, COUNT(*), * FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.Continent' (-3.868) (length=22)
[WRONG] [hard] Pred 9:	b'SELECT countries.CountryName, COUNT(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName' (-4.417) (length=18)
Error Case 34

Parsing error: from countries join car_makers on countries.CountryId = car_makers.Country group by countries.Continent having count (*)) select countries.CountryName , count (*)
Parsing error: from countries join car_makers on countries.CountryId = car_makers.Country group by countries.Continent having count (*) , countries.Continent
Example 106
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What is the name of each continent and how many car makers are there in each one?'
NL tokens: [b'what', b'is', b'the', b'name', b'of', b'each', b'continent', b'and', b'how', b'many', b'car', b'makers', b'are', b'there', b'in', b'each', b'one', b'?']
NL tokens (original): [b'What', b'is', b'the', b'name', b'of', b'each', b'continent', b'and', b'how', b'many', b'car', b'makers', b'are', b'there', b'in', b'each', b'one', b'?']
['[CLS]', 'what', 'is', 'the', 'name', 'of', 'each', 'continent', 'and', 'how', 'many', 'car', 'makers', 'are', 'there', 'in', 'each', 'one', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent'
Target TF-P tokens: from continents join countries on continents.ContId = countries.Continent join car_makers on countries.CountryId = car_makers.Country group by continents.Continent select continents.Continent , count (*)

[WRONG] [hard] Pred 0:	b'SELECT countries.CountryName, COUNT(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent' (-1.029) (length=18)
[WRONG] [hard] Pred 1:	b'SELECT countries.CountryName, COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.Continent' (-2.231) (length=18)
[WRONG] [hard] Pred 2:	b'SELECT continents.Continent, COUNT(*) FROM continents JOIN car_makers ON continents.ContId = car_makers.Country GROUP BY continents.Continent' (-2.480) (length=18)
[WRONG] [hard] Pred 3:	b'SELECT countries.Continent, COUNT(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent' (-2.961) (length=18)
[WRONG] [hard] Pred 4:	b'SELECT countries.CountryName, COUNT(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent HAVING COUNT(*) > 1' (-3.626) (length=25)
[WRONG] [hard] Pred 5:	b'SELECT countries.CountryName, COUNT(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName' (-3.732) (length=18)
[WRONG] [hard] Pred 6:	b'SELECT countries.CountryName, COUNT(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent HAVING COUNT(*) = 1' (-3.938) (length=25)
[WRONG] [hard] Pred 7:	b'SELECT countries.Continent, COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.Continent' (-4.000) (length=18)
[WRONG] [hard] Pred 8:	b'SELECT COUNT(*), countries.Continent FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country' (-4.258) (length=16)
[WRONG] [hard] Pred 9:	b'SELECT countries.CountryName, COUNT(*) FROM countries JOIN car_makers ON countries.Continent = car_makers.Country GROUP BY countries.Continent' (-4.506) (length=18)
[WRONG] [hard] Pred 10:	b'SELECT countries.CountryName, COUNT(*), countries.Continent FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent' (-4.614) (length=20)
[WRONG] [hard] Pred 11:	b'SELECT countries.CountryName, COUNT(*), car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent' (-4.944) (length=20)
[WRONG] [hard] Pred 12:	b'SELECT COUNT(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country' (-4.952) (length=14)
[WRONG] [hard] Pred 13:	b'SELECT countries.CountryName, COUNT(*), 1 FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent' (-5.230) (length=20)
Error Case 35

Parsing error: from car_makers join model_list on car_makers.Id = model_list.Maker group by car_makers.Maker group by car_makers.Maker select count (*) , car_makers.FullName
Parsing error: from car_makers join model_list on car_makers.Id = model_list.Maker group by car_makers.Maker group by car_makers.Maker select count (*) , car_makers.Maker
Parsing error: from car_makers join model_list on car_makers.Id = model_list.Maker group by car_makers.Maker , car_makers.Maker , count (*) , car_makers.Maker
Parsing error: from car_makers join model_list on car_makers.Id = model_list.Maker group by car_makers.Maker , count (*) , car_makers.FullName
Parsing error: from car_makers join model_list on car_makers.Id = model_list.Maker group by car_makers.Maker , count (*) , car_makers.Maker
Parsing error: from car_makers join model_list on car_makers.Id = model_list.Maker group by car_makers.Maker , car_makers.Maker , count (*) , car_makers.FullName
Parsing error: from car_makers join model_list on car_makers.Id = model_list.Maker group by car_makers.Maker , car_makers.Maker = count (*) , car_makers.Maker
Example 109
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'How many car models are produced by each maker ? Only list the count and the maker full name .'
NL tokens: [b'how', b'many', b'car', b'models', b'are', b'produced', b'by', b'each', b'maker', b'?', b'only', b'list', b'the', b'count', b'and', b'the', b'maker', b'full', b'name', b'.']
NL tokens (original): [b'How', b'many', b'car', b'models', b'are', b'produced', b'by', b'each', b'maker', b'?', b'Only', b'list', b'the', b'count', b'and', b'the', b'maker', b'full', b'name', b'.']
['[CLS]', 'how', 'many', 'car', 'models', 'are', 'produced', 'by', 'each', 'maker', '?', 'only', 'list', 'the', 'count', 'and', 'the', 'maker', 'full', 'name', '.', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id'
Target TF-P tokens: from model_list join car_makers on model_list.Maker = car_makers.Id group by car_makers.Id select count (*) , car_makers.FullName

[WRONG] [medium] Pred 0:	b'SELECT COUNT(*), car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker' (-0.093) (length=18)
[WRONG] [medium] Pred 1:	b'SELECT COUNT(*), car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker' (-0.327) (length=18)
[WRONG] [medium] Pred 2:	b'SELECT COUNT(*), car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker, car_makers.FullName' (-0.775) (length=20)
[WRONG] [medium] Pred 3:	b'SELECT COUNT(*), car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker, car_makers.FullName' (-0.917) (length=20)
[WRONG] [medium] Pred 4:	b'SELECT COUNT(*), car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker, car_makers.FullName' (-1.203) (length=22)
[WRONG] [medium] Pred 5:	b'SELECT COUNT(*), car_makers.Maker, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker' (-1.986) (length=20)
[WRONG] [medium] Pred 6:	b'SELECT COUNT(*), car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker, car_makers.FullName' (-2.026) (length=22)
[WRONG] [medium] Pred 7:	b'SELECT COUNT(*), car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker' (-2.313) (length=20)
[WRONG] [medium] Pred 8:	b'SELECT COUNT(*), car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker' (-2.357) (length=20)
Error Case 36

ERROR: Join condition does not match with table: ['car_makers', {'join': 'model_list', 'on': {'eq': ['model_list.Model', 'model_list.Model']}}]
ERROR: Join condition does not match with table: ['car_makers', {'join': 'model_list', 'on': {'eq': ['model_list.Model', 'model_list.Model']}}]
ERROR: Join condition does not match with table: ['car_makers', {'join': 'model_list', 'on': {'eq': ['model_list.Model', 'model_list.Maker']}}]
ERROR: Join condition does not match with table: ['car_makers', {'join': 'model_list', 'on': {'eq': ['model_list.Model', 'model_list.Maker']}}]
Example 110
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What is the number of car models that are produced by each maker and what is the id and full name of each maker?'
NL tokens: [b'what', b'is', b'the', b'number', b'of', b'car', b'models', b'that', b'are', b'produced', b'by', b'each', b'maker', b'and', b'what', b'is', b'the', b'id', b'and', b'full', b'name', b'of', b'each', b'maker', b'?']
NL tokens (original): [b'What', b'is', b'the', b'number', b'of', b'car', b'models', b'that', b'are', b'produced', b'by', b'each', b'maker', b'and', b'what', b'is', b'the', b'id', b'and', b'full', b'name', b'of', b'each', b'maker', b'?']
['[CLS]', 'what', 'is', 'the', 'number', 'of', 'car', 'models', 'that', 'are', 'produced', 'by', 'each', 'maker', 'and', 'what', 'is', 'the', 'id', 'and', 'full', 'name', 'of', 'each', 'maker', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id'
Target TF-P tokens: from model_list join car_makers on model_list.Maker = car_makers.Id group by car_makers.Id select count (*) , car_makers.FullName , car_makers.Id

[WRONG] [medium] Pred 0:	b'SELECT COUNT(*), car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id' (-0.020) (length=18)
[WRONG] [medium] Pred 1:	b'SELECT COUNT(*), car_makers.Maker, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id' (-1.068) (length=20)
[WRONG] [medium] Pred 2:	b'SELECT COUNT(*), car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id' (-1.377) (length=18)
[WRONG] [medium] Pred 3:	b'SELECT COUNT(*), car_makers.FullName FROM car_makers JOIN model_list ON model_list.Maker = car_makers.Id GROUP BY car_makers.Id' (-1.390) (length=18)
[WRONG] [medium] Pred 4:	b'SELECT COUNT(*), car_makers.FullName FROM car_makers JOIN model_list ON model_list.Model = car_makers.Id GROUP BY car_makers.Id' (-2.212) (length=18)
[WRONG] [medium] Pred 5:	b'SELECT COUNT(*), car_makers.Maker, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker, car_makers.FullName' (-2.348) (length=22)
[WRONG] [medium] Pred 6:	b'SELECT COUNT(*), car_makers.Maker, car_makers.FullName FROM car_makers JOIN model_list ON model_list.Maker = car_makers.Id GROUP BY car_makers.Id' (-2.370) (length=20)
[WRONG] [medium] Pred 7:	b'SELECT COUNT(*), car_makers.Maker FROM car_makers JOIN model_list ON model_list.Maker = car_makers.Id GROUP BY car_makers.Id' (-2.451) (length=18)
[WRONG] [medium] Pred 8:	b'SELECT COUNT(*), car_makers.Maker, car_makers.FullName FROM car_makers JOIN model_list ON model_list.Model = car_makers.Id GROUP BY car_makers.Id' (-2.618) (length=20)
[WRONG] [medium] Pred 9:	b'SELECT COUNT(*), car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker, car_makers.FullName' (-2.758) (length=20)
[WRONG] [medium] Pred 10:	b'SELECT car_makers.Maker, car_makers.FullName, COUNT(*) FROM car_makers JOIN model_list ON model_list.Maker = car_makers.Id GROUP BY car_makers.Id' (-2.824) (length=20)
[WRONG] [medium] Pred 11:	b'SELECT COUNT(*), car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker, car_makers.FullName' (-2.830) (length=20)
Error Case 37

Parsing error: from car_names where car_names.Make = "amc hornet sportabout)" and car_names.MakeId = (from car_names where car_names.Make = "amc hornet sportaboutout)" select car_names.MakeId
Parsing error: from car_names where car_names.Make = "amc hornet sportabout)" and car_names.MakeId = (from car_names where car_names.Make = "amc hornet sportaboutout ()" select car_names.MakeId
Parsing error: from car_names where car_names.Make = "amc hornet sportabout)" and car_names.MakeId = (from car_names where car_names.Make = "amc hornet sportabout ()" select car_names.MakeId
Parsing error: from car_names where car_names.Make = "amc hornet sportabout)" and car_names.MakeId = (from car_names where car_names.Make = "amc hornet sportaboutout)" select car_names.Model
Parsing error: from car_names where car_names.Make = "amc hornet sportabout)" and car_names.MakeId = (from car_names where car_names.Make = "amc hornet sportabout ()" select car_names.MakeId)
Parsing error: from car_names where car_names.Make = "amc hornet sportabout)" and car_names.MakeId = (from car_names where car_names.Make = "amc hornet sportaboutout)" select car_names.MakeId)
Parsing error: from car_names where car_names.Make = "amc hornet sportabout)" and car_names.MakeId = (from car_names where car_names.Make = "amc hornet sportaboutout ()" select car_names.MakeId) having count (*)
Parsing error: from car_names where car_names.Make = "amc hornet sportabout)" and car_names.MakeId = (from car_names where car_names.Make = "amc hornet sportabout ()" select car_names.MakeId) and car_names.MakeId = "amc hornet sportabout ()" and car_names.MakeId = "sw ()" and car_names.MakeId = "sw)"
Parsing error: from car_names where car_names.Make = "amc hornet sportabout)" and car_names.MakeId = (from car_names where car_names.Make = "amc hornet sportabout ()" select car_names.MakeId) and car_names.MakeId = "amc hornet sportaboutout ()" and car_names.MakeId = "sw)" and car_names.MakeId = "sw)"
Parsing error: from car_names where car_names.Make = "amc hornet sportabout)" and car_names.MakeId = (from car_names where car_names.Make = "amc hornet sportabout ()" select car_names.MakeId) and car_names.MakeId = "amc hornet sportabout ()" and car_names.MakeId = "sw ()" and car_names.MakeId = "amc hornet"
Parsing error: from car_names where car_names.Make = "amc hornet sportabout)" and car_names.MakeId = (from car_names where car_names.Make = "amc hornet sportabout ()" select car_names.MakeId) and car_names.MakeId = "amc hornet sportaboutout ()" and car_names.MakeId = "sw)" and car_names.MakeId = "amc hornet"
Parsing error: from car_names where car_names.Make = "amc hornet sportabout)" and car_names.MakeId = (from car_names where car_names.Make = "amc hornet sportabout ()" select car_names.MakeId) and car_names.MakeId = "amc hornet sportaboutout ()" and car_names.MakeId = "sw ()" and car_names.MakeId = "sw"
Parsing error: from car_names where car_names.Make = "amc hornet sportabout)" and car_names.MakeId = (from car_names where car_names.Make = "amc hornet sportabout ()" select car_names.MakeId) and car_names.MakeId = "amc hornet sportabout ()" and car_names.MakeId = "sw ()" and car_names.MakeId = "sw ("
Parsing error: from car_names where car_names.Make = "amc hornet sportabout)" and car_names.MakeId = (from car_names where car_names.Make = "amc hornet sportabout ()" select car_names.MakeId) and car_names.MakeId = "amc hornet sportaboutout ()" and car_names.MakeId = "sw)" and car_names.MakeId = "sw ("
Parsing error: from car_names where car_names.Make = "amc hornet sportabout)" and car_names.MakeId = (from car_names where car_names.Make = "amc hornet sportabout ()" select car_names.MakeId) and car_names.MakeId = "amc hornet sportaboutout ()" and car_names.MakeId = "sw ()" and car_names.MakeId = "amc"
Parsing error: from car_names where car_names.Make = "amc hornet sportabout)" and car_names.MakeId = (from car_names where car_names.Make = "amc hornet sportabout ()" select car_names.MakeId) and car_names.MakeId = "amc hornet sportabout ()" and car_names.MakeId = "sw ()" and car_names.MakeId = "amc sport"
Example 111
 11%|█         | 14/130 [02:27<35:39, 18.45s/it]car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What is the accelerate of the car make amc hornet sportabout (sw)?'
NL tokens: [b'what', b'is', b'the', b'accelerate', b'of', b'the', b'car', b'make', b'amc', b'hornet', b'sport', b'##ab', b'##out', b'(', b'sw', b')', b'?']
NL tokens (original): [b'What', b'is', b'the', b'accelerate', b'of', b'the', b'car', b'make', b'amc', b'hornet', b'sport', b'##ab', b'##out', b'(', b'sw', b')', b'?']
['[CLS]', 'what', 'is', 'the', 'accelerate', 'of', 'the', 'car', 'make', 'amc', 'hornet', 'sport', '##ab', '##out', '(', 'sw', ')', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused49]', 'amc', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused49]', 'amc', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused49]', 'amc', '[unused51]', 'make', '[unused49]', 'amc', 'hornet', '[unused49]', 'amc', 'hornet', 'sport', '##ab', '##out', '(', 'sw', ')', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b"SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"
Target TF-P tokens: from cars_data join car_names on cars_data.Id = car_names.MakeId where car_names.Make = "amc hornet sportabout (sw)" select cars_data.Accelerate

[WRONG] medium Pred 0:	No valid output! (0.000)
Error Case 38

Parsing error: from car_names where car_names.Make = "amc hornet sportaboutout)" and car_names.MakeId = "amc hornet sportabout" and car_names.MakeId = amc sportabout "and car_names.MakeId =" amc hornet sportabout "and car_names.MakeId =" sw) "and car_names.MakeId =" amc hornet sportabout "select"
Parsing error: from car_names where car_names.Make = "amc hornet sportabout)" and car_names.MakeId = "amc hornet sportabout" and car_names.MakeId = amc sportabout "and car_names.MakeId =" amc hornet sportabout "and car_names.MakeId = limit VALUE000" and car_names.MakeId = "amc hornet sportabout"
Parsing error: from car_names where car_names.Make = "amc hornet sportabout)" and car_names.MakeId = "amc hornet sportabout" and car_names.MakeId = amc sportabout "and car_names.MakeId =" amc hornet sportabout "and car_names.MakeId = limit VALUE0000" and car_names.MakeId = "amc hornet sportabout"
Parsing error: from car_names where car_names.Make = "amc hornet sportaboutout)" and car_names.MakeId = "amc hornet sportabout" and car_names.MakeId = amc sportabout "and car_names.MakeId =" amc hornet sportabout "and car_names.MakeId =" sw () "and car_names.MakeId =" amc hornet sportabout ""
Parsing error: from car_names where car_names.Make = "amc hornet sportabout)" and car_names.MakeId = "amc hornet sportabout" and car_names.MakeId = amc sportabout "and car_names.MakeId =" amc hornet sportabout "and car_names.MakeId = limit VALUE000" and car_names.MakeId = "amc hornet sportabout)"
Parsing error: from car_names where car_names.Make = "amc hornet sportaboutout)" and car_names.MakeId = "amc hornet sportabout" and car_names.MakeId = amc sportabout "and car_names.MakeId =" amc hornet sportabout "and car_names.MakeId =" sw) "and car_names.MakeId =" amc hornet sportabout "and"
Parsing error: from car_names where car_names.Make = "amc hornet sportaboutout)" and car_names.MakeId = "amc hornet sportabout" and car_names.MakeId = amc sportabout "and car_names.MakeId =" amc hornet sportabout "and car_names.MakeId =" sw) "and car_names.MakeId =" amc hornet sportabout) ""
Parsing error: from car_names where car_names.Make = "amc hornet sportaboutout)" and car_names.MakeId = "amc hornet sportabout" and car_names.MakeId = amc sportabout "and car_names.MakeId =" amc hornet sportabout "and car_names.MakeId =" sw) ""
Parsing error: from car_names where car_names.Make = "amc hornet sportaboutout)" and car_names.MakeId = "amc hornet sportabout" and car_names.MakeId = amc sportabout "and car_names.MakeId =" amc hornet sportabout "and car_names.MakeId =" sw) "and car_names.MakeId =" amc hornet sportababout ""
Parsing error: from car_names where car_names.Make = "amc hornet sportabout)" and car_names.MakeId = "amc hornet sportabout" and car_names.MakeId = amc sportabout "and car_names.MakeId =" amc hornet sportabout "and car_names.MakeId = limit VALUE000" and car_names.MakeId = "amc hornet sportababout"
Parsing error: from car_names where car_names.Make = "amc hornet sportabout)" and car_names.MakeId = "amc hornet sportabout" and car_names.MakeId = amc sportabout "and car_names.MakeId =" amc hornet sportabout "and car_names.MakeId = limit VALUE000" and car_names.MakeId = "amc hornet sportaboutout"
Parsing error: from car_names where car_names.Make = "amc hornet sportaboutout)" and car_names.MakeId = "amc hornet sportabout" and car_names.MakeId = amc sportabout "and car_names.MakeId =" amc hornet sportabout "and car_names.MakeId =" sw) "and car_names.MakeId =" amc hornet sportaboutout ""
Parsing error: from car_names where car_names.Make = "amc hornet sportabout)" and car_names.MakeId = "amc hornet sportabout" and car_names.MakeId = amc sportabout "and car_names.MakeId =" amc hornet sportabout "and car_names.MakeId = limit VALUE0000" and car_names.MakeId = "amc sportabout"
Parsing error: from car_names where car_names.Make = "amc hornet sportabout)" and car_names.MakeId = "amc hornet sportabout" and car_names.MakeId = amc sportabout "and car_names.MakeId =" amc hornet sportabout "and car_names.MakeId = limit VALUE0000" and car_names.MakeId = "amc hornet sportabab"
Parsing error: from car_names where car_names.Make = "amc hornet sportabout)" and car_names.MakeId = "amc hornet sportabout" and car_names.MakeId = amc sportabout "and car_names.MakeId =" amc hornet sportabout "and car_names.MakeId = limit VALUE000" and car_names.MakeId = "amc hornet sportabout ("
Parsing error: from car_names where car_names.Make = "amc hornet sportaboutout)" and car_names.MakeId = "amc hornet sportabout" and car_names.MakeId = amc sportabout "and car_names.MakeId =" amc hornet sportabout "and car_names.MakeId =" sw) "and car_names.MakeId =" amc hornet sportabout (""
Example 112
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'How much does the car accelerate that makes amc hornet sportabout (sw)?'
NL tokens: [b'how', b'much', b'does', b'the', b'car', b'accelerate', b'that', b'makes', b'amc', b'hornet', b'sport', b'##ab', b'##out', b'(', b'sw', b')', b'?']
NL tokens (original): [b'How', b'much', b'does', b'the', b'car', b'accelerate', b'that', b'makes', b'amc', b'hornet', b'sport', b'##ab', b'##out', b'(', b'sw', b')', b'?']
['[CLS]', 'how', 'much', 'does', 'the', 'car', 'accelerate', 'that', 'makes', 'amc', 'hornet', 'sport', '##ab', '##out', '(', 'sw', ')', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused49]', 'amc', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused49]', 'amc', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused49]', 'amc', '[unused51]', 'make', '[unused49]', 'amc', 'hornet', '[unused49]', 'amc', 'hornet', 'sport', '##ab', '##out', '(', 'sw', ')', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b"SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'"
Target TF-P tokens: from cars_data join car_names on cars_data.Id = car_names.MakeId where car_names.Make = "amc hornet sportabout (sw)" select cars_data.Accelerate

[WRONG] medium Pred 0:	No valid output! (0.000)
Error Case 39

ERROR: Join condition does not match with table: ['countries', {'join': 'model_list', 'on': {'eq': ['countries.CountryId', 'countries.Continent']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'continents', 'on': {'eq': ['countries.CountryId', 'countries.Continent']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'car_names', 'on': {'eq': ['countries.CountryId', 'countries.Continent']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'cars_data', 'on': {'eq': ['countries.CountryId', 'countries.Continent']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'car_makers', 'on': {'eq': ['countries.CountryId', 'countries.Continent']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'continents', 'on': {'eq': ['countries.Continent', 'countries.CountryId']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'continents', 'on': {'eq': ['countries.CountryId', 'countries.Continent']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'continents', 'on': {'eq': ['countries.CountryId', 'countries.Continent']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'continents', 'on': {'eq': ['countries.CountryId', 'countries.Continent']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'continents', 'on': {'eq': ['countries.CountryId', 'countries.Continent']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'model_list', 'on': {'eq': ['countries.CountryId', 'countries.Continent']}}, {'join': 'continents', 'on': {'eq': ['countries.CountryId', 'countries.Continent']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'continents', 'on': {'eq': ['countries.CountryId', 'countries.Continent']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'continents', 'on': {'eq': ['countries.CountryId', 'countries.Continent']}}]
Parsing error: from countries >= continents on countries.CountryId = countries.Continent where countries.CountryName = "usa" select count (*)
Example 115
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'How many car models are produced in the usa?'
NL tokens: [b'how', b'many', b'car', b'models', b'are', b'produced', b'in', b'the', b'usa', b'?']
NL tokens (original): [b'How', b'many', b'car', b'models', b'are', b'produced', b'in', b'the', b'usa', b'?']
['[CLS]', 'how', 'many', 'car', 'models', 'are', 'produced', 'in', 'the', 'usa', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused49]', 'usa', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b"SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"
Target TF-P tokens: from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where countries.CountryName = "usa" select count (*)

[WRONG] [hard] Pred 0:	b'SELECT COUNT(*) FROM countries WHERE countries.CountryName = "usa"' (-2.324) (length=14)
[WRONG] [hard] Pred 1:	b'SELECT COUNT(*) FROM countries JOIN continents ON continents.ContId = countries.Continent WHERE countries.CountryName = "usa"' (-2.515) (length=20)
Error Case 40

ERROR: Join condition does not match with table: ['countries', {'join': 'continents', 'on': {'eq': ['countries.CountryId', 'countries.Continent']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'continents', 'on': {'eq': ['countries.CountryId', 'countries.Continent']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'model_list', 'on': {'eq': ['countries.CountryId', 'countries.Continent']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'continents', 'on': {'eq': ['countries.Continent', 'countries.CountryId']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'continents', 'on': {'eq': ['countries.CountryId', 'countries.Continent']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'continents', 'on': {'eq': ['countries.Continent', 'countries.CountryId']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'model_list', 'on': {'eq': ['countries.CountryId', 'countries.Continent']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'continents', 'on': {'eq': ['countries.CountryId', 'countries.Continent']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'continents', 'on': {'eq': ['countries.CountryId', 'countries.Continent']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'car_makers', 'on': {'eq': ['countries.CountryId', 'countries.Continent']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'continents', 'on': {'eq': ['countries.CountryId', 'countries.Continent']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'cars_data', 'on': {'eq': ['countries.CountryId', 'countries.Continent']}}]
Example 116
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What is the count of the car models produced in the United States?'
NL tokens: [b'what', b'is', b'the', b'count', b'of', b'the', b'car', b'models', b'produced', b'in', b'the', b'united', b'states', b'?']
NL tokens (original): [b'What', b'is', b'the', b'count', b'of', b'the', b'car', b'models', b'produced', b'in', b'the', b'United', b'States', b'?']
['[CLS]', 'what', 'is', 'the', 'count', 'of', 'the', 'car', 'models', 'produced', 'in', 'the', 'united', 'states', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b"SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'"
Target TF-P tokens: from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where countries.CountryName = "VALUE" select count (*)

[WRONG] [hard] Pred 0:	b'SELECT COUNT(*) FROM countries JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = "VALUE"' (-2.573) (length=20)
[WRONG] [hard] Pred 1:	b'SELECT COUNT(*) FROM countries JOIN continents ON continents.ContId = countries.Continent WHERE continents.Continent = "VALUE"' (-2.659) (length=20)
[WRONG] [hard] Pred 2:	b'SELECT COUNT(*) FROM countries JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = "VALUE VALUE"' (-2.780) (length=21)
[WRONG] [hard] Pred 3:	b'SELECT COUNT(*) FROM countries WHERE countries.CountryName = "VALUE"' (-4.086) (length=14)
Error Case 41

Parsing error: from cars_data where cars_data.Cylinders = 4 : cars_data.Horsepower = "average" select avg (cars_data.Horsepower)
Parsing error: from cars_data where cars_data.Cylinders = 4 : cars_data.Cylinders = 4 select avg (cars_data.Horsepower)
Parsing error: from cars_data where cars_data.Cylinders = 4 : avg (cars_data.Horsepower)
Parsing error: from cars_data where cars_data.Cylinders = 4 select / (cars_data.Horsepower)
Example 118
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What is the average miles per gallon of all the cards with 4 cylinders?'
NL tokens: [b'what', b'is', b'the', b'average', b'miles', b'per', b'gallon', b'of', b'all', b'the', b'cards', b'with', b'4', b'cylinders', b'?']
NL tokens (original): [b'What', b'is', b'the', b'average', b'miles', b'per', b'gallon', b'of', b'all', b'the', b'cards', b'with', b'4', b'cylinders', b'?']
['[CLS]', 'what', 'is', 'the', 'average', 'miles', 'per', 'gallon', 'of', 'all', 'the', 'cards', 'with', '4', 'cylinders', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4'
Target TF-P tokens: from cars_data where cars_data.Cylinders = 4 select avg (cars_data.MPG)

[WRONG] [easy] Pred 0:	b'SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 4' (-0.000) (length=12)
[WRONG] [easy] Pred 1:	b'SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 4 AND cars_data.Horsepower = "average"' (-3.614) (length=18)
[WRONG] [easy] Pred 2:	b'SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 4 INTERSECT SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 4' (-3.633) (length=24)
 12%|█▏        | 15/130 [02:41<32:55, 17.18s/it][WRONG] [easy] Pred 3:	b'SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 4' (-4.008) (length=17)
[WRONG] [easy] Pred 4:	b'SELECT AVG(cars_data.Horsepower) FROM cars_data JOIN cars_data ON cars_data.Id = cars_data.Id WHERE cars_data.Cylinders = 4' (-4.025) (length=18)
[WRONG] [easy] Pred 5:	b'SELECT AVG(cars_data.Horsepower), cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders = 4' (-4.045) (length=14)
[WRONG] [easy] Pred 6:	b'SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 4 AND cars_data.Cylinders = 4' (-4.676) (length=16)
[WRONG] [easy] Pred 7:	b'SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 4 AND cars_data.Horsepower = "?"' (-4.750) (length=18)
[WRONG] [easy] Pred 8:	b'SELECT AVG(cars_data.Horsepower), cars_data.Id FROM cars_data WHERE cars_data.Cylinders = 4' (-4.791) (length=14)
[WRONG] [easy] Pred 9:	b'SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 4 GROUP BY cars_data.Horsepower' (-4.900) (length=14)
[WRONG] [easy] Pred 10:	b'SELECT AVG(cars_data.Horsepower), cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders = 4 GROUP BY cars_data.Horsepower' (-4.979) (length=16)
[WRONG] [easy] Pred 11:	b'SELECT AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 4 AND cars_data.Horsepower = 1' (-5.157) (length=16)
Error Case 42

Example 119
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What is the smallest weight of the car produced with 8 cylinders on 1974 ?'
NL tokens: [b'what', b'is', b'the', b'smallest', b'weight', b'of', b'the', b'car', b'produced', b'with', b'8', b'cylinders', b'on', b'1974', b'?']
NL tokens (original): [b'What', b'is', b'the', b'smallest', b'weight', b'of', b'the', b'car', b'produced', b'with', b'8', b'cylinders', b'on', b'1974', b'?']
['[CLS]', 'what', 'is', 'the', 'smallest', 'weight', 'of', 'the', 'car', 'produced', 'with', '8', 'cylinders', 'on', '1974', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'select min(weight) from cars_data where cylinders  =  8 and year  =  1974'
Target TF-P tokens: from cars_data where cars_data.Cylinders = 8 and cars_data.Year = 1974 select min (cars_data.Weight)

[WRONG] [medium] Pred 0:	b'SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Cylinders = 1974' (-0.197) (length=13)
[WRONG] [medium] Pred 1:	b'SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974' (-0.517) (length=13)
[WRONG] [medium] Pred 2:	b'SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 1974 AND cars_data.Cylinders = 8' (-0.819) (length=13)
[WRONG] [medium] Pred 3:	b'SELECT cars_data.Weight FROM cars_data WHERE cars_data.Year = 8 AND cars_data.Cylinders = 1974' (-0.824) (length=13)
[WRONG] [medium] Pred 4:	b'SELECT cars_data.Weight FROM cars_data WHERE cars_data.Year = 1974 AND cars_data.Cylinders = 8' (-1.047) (length=13)
[WRONG] [medium] Pred 5:	b'SELECT cars_data.Weight FROM cars_data WHERE cars_data.Year = 8 AND cars_data.Year = 1974' (-1.061) (length=13)
[WRONG] [medium] Pred 6:	b'SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Cylinders = 8' (-1.196) (length=13)
[WRONG] [medium] Pred 7:	b'SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 1974 AND cars_data.Year = 8' (-1.419) (length=13)
[WRONG] [medium] Pred 8:	b'SELECT cars_data.Weight FROM cars_data WHERE cars_data.Year = 1974 AND cars_data.Year = 8' (-1.605) (length=13)
[WRONG] [medium] Pred 9:	b'SELECT cars_data.Weight FROM cars_data WHERE cars_data.Year = 8 AND cars_data.Cylinders = 8' (-1.717) (length=13)
[WRONG] [medium] Pred 10:	b'SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Cylinders <= 1974' (-1.836) (length=13)
[WRONG] [medium] Pred 11:	b'SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Year = 8' (-1.854) (length=13)
[WRONG] [medium] Pred 12:	b'SELECT cars_data.Weight FROM cars_data WHERE cars_data.Year = 8 AND cars_data.Year = 8' (-2.381) (length=13)
[WRONG] [medium] Pred 13:	b'SELECT cars_data.Weight FROM cars_data WHERE cars_data.Year = 8 AND cars_data.Cylinders <= 1974' (-2.813) (length=13)
[WRONG] [medium] Pred 14:	b'SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 1974 ORDER BY cars_data.Weight LIMIT 1' (-2.915) (length=13)
[WRONG] [medium] Pred 15:	b'SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 1974 AND cars_data.Cylinders = 1974' (-3.019) (length=13)
Error Case 43

Example 120
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What is the minimum weight of the car with 8 cylinders produced in 1974 ?'
NL tokens: [b'what', b'is', b'the', b'minimum', b'weight', b'of', b'the', b'car', b'with', b'8', b'cylinders', b'produced', b'in', b'1974', b'?']
NL tokens (original): [b'What', b'is', b'the', b'minimum', b'weight', b'of', b'the', b'car', b'with', b'8', b'cylinders', b'produced', b'in', b'1974', b'?']
['[CLS]', 'what', 'is', 'the', 'minimum', 'weight', 'of', 'the', 'car', 'with', '8', 'cylinders', 'produced', 'in', '1974', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'select min(weight) from cars_data where cylinders  =  8 and year  =  1974'
Target TF-P tokens: from cars_data where cars_data.Cylinders = 8 and cars_data.Year = 1974 select min (cars_data.Weight)

[WRONG] [medium] Pred 0:	b'SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Cylinders = 1974' (-0.341) (length=16)
[CORRE] [medium] Pred 1:	b'SELECT MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974' (-0.386) (length=16)
Error Case 44

ERROR: table "model_list" in field expression model_list.Model is not in the current scope
ERROR: table "car_makers" in field expression car_makers.Maker is not in the current scope
ERROR: table "car_makers" in field expression car_makers.Maker is not in the current scope
Parsing error: from car_makers select car_makers.Maker is from model_list select model_list.Maker
ERROR: table "car_makers" in field expression car_makers.Maker is not in the current scope
Example 121
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What are all the makers and models?'
NL tokens: [b'what', b'are', b'all', b'the', b'makers', b'and', b'models', b'?']
NL tokens (original): [b'What', b'are', b'all', b'the', b'makers', b'and', b'models', b'?']
['[CLS]', 'what', 'are', 'all', 'the', 'makers', 'and', 'models', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT Maker ,  Model FROM MODEL_LIST'
Target TF-P tokens: from model_list select model_list.Maker , model_list.Model

[WRONG] [medium] Pred 0:	b'SELECT car_makers.Maker FROM car_makers UNION SELECT model_list.Maker FROM model_list' (-1.813) (length=10)
[WRONG] [medium] Pred 1:	b'SELECT car_makers.Maker FROM car_makers UNION SELECT model_list.Model FROM model_list' (-2.744) (length=10)
[WRONG] [medium] Pred 2:	b'SELECT car_makers.Maker FROM car_makers INTERSECT SELECT model_list.Maker FROM model_list' (-4.120) (length=10)
[WRONG] [medium] Pred 3:	b'SELECT car_makers.Maker FROM car_makers UNION SELECT model_list.Maker, model_list.Model FROM model_list' (-4.957) (length=12)
[WRONG] [medium] Pred 4:	b'SELECT car_makers.Maker FROM car_makers EXCEPT SELECT model_list.Maker FROM model_list' (-5.189) (length=10)
[WRONG] [medium] Pred 5:	b'SELECT car_makers.Maker FROM car_makers INTERSECT SELECT model_list.Model FROM model_list' (-5.213) (length=10)
[WRONG] [medium] Pred 6:	b'SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker' (-5.676) (length=13)
[WRONG] [medium] Pred 7:	b'SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Model' (-5.861) (length=13)
[WRONG] [medium] Pred 8:	b'SELECT car_makers.Maker FROM car_makers WHERE car_makers.Id = (SELECT model_list.Maker FROM model_list)' (-6.124) (length=14)
[WRONG] [medium] Pred 9:	b'SELECT car_makers.Maker FROM car_makers WHERE car_makers.FullName = "makers VALUE" UNION SELECT car_makers.Maker FROM car_makers' (-6.130) (length=17)
[WRONG] [medium] Pred 10:	b'SELECT car_makers.Maker FROM car_makers' (-6.236) (length=5)
Error Case 45

ERROR: table "model_list" in field expression model_list.Model is not in the current scope
ERROR: table "model_list" in field expression model_list.Model is not in the current scope
ERROR: table "model_list" in field expression model_list.Model is not in the current scope
Example 122
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What are the makers and models?'
NL tokens: [b'what', b'are', b'the', b'makers', b'and', b'models', b'?']
NL tokens (original): [b'What', b'are', b'the', b'makers', b'and', b'models', b'?']
['[CLS]', 'what', 'are', 'the', 'makers', 'and', 'models', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT Maker ,  Model FROM MODEL_LIST'
Target TF-P tokens: from model_list select model_list.Maker , model_list.Model

[WRONG] [medium] Pred 0:	b'SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker' (-5.078) (length=13)
[WRONG] [medium] Pred 1:	b'SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Model' (-5.406) (length=13)
[CORRE] [medium] Pred 2:	b'SELECT model_list.Maker, model_list.Model FROM model_list' (-5.734) (length=7)
Error Case 46

Parsing error: from countries join car_makers on countries.CountryId = car_makers.Country where car_makers.Maker = "VALUE distinct countries.CountryName , countries.CountryId"
ERROR: Join condition does not match with table: ['countries', {'join': 'car_makers', 'on': {'eq': ['countries.CountryId', 'countries.Continent']}}]
Example 123
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What are the countries having at least one car maker? List name and id.'
NL tokens: [b'what', b'are', b'the', b'countries', b'having', b'at', b'least', b'one', b'car', b'maker', b'?', b'list', b'name', b'and', b'id', b'.']
NL tokens (original): [b'What', b'are', b'the', b'countries', b'having', b'at', b'least', b'one', b'car', b'maker', b'?', b'List', b'name', b'and', b'id', b'.']
['[CLS]', 'what', 'are', 'the', 'countries', 'having', 'at', 'least', 'one', 'car', 'maker', '?', 'list', 'name', 'and', 'id', '.', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1'
Target TF-P tokens: from countries join car_makers on countries.CountryId = car_makers.Country group by countries.CountryId having count (*) >= 1 select countries.CountryName , countries.CountryId

[WRONG] [medium] Pred 0:	b'SELECT DISTINCT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country' (-0.022) (length=14)
[WRONG] [medium] Pred 1:	b'SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country' (-0.898) (length=13)
[WRONG] [medium] Pred 2:	b'SELECT DISTINCT countries.CountryName, countries.Continent FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country' (-1.356) (length=14)
[WRONG] [medium] Pred 3:	b'SELECT countries.CountryName, countries.Continent FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country' (-2.460) (length=13)
[WRONG] [medium] Pred 4:	b'SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Maker = "VALUE"' (-2.852) (length=19)
[WRONG] [medium] Pred 5:	b'SELECT countries.CountryName, car_makers.Maker FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country' (-2.891) (length=13)
[WRONG] [medium] Pred 6:	b'SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Maker = "VALUE VALUE"' (-3.112) (length=20)
[WRONG] [medium] Pred 7:	b'SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.CountryId IN (SELECT car_makers.Country FROM car_makers)' (-3.308) (length=22)
[WRONG] [medium] Pred 8:	b'SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Maker LIKE "% VALUE %"' (-3.349) (length=21)
[WRONG] [medium] Pred 9:	b'SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId' (-3.492) (length=15)
[WRONG] [medium] Pred 10:	b'SELECT DISTINCT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Maker = "VALUE"' (-3.670) (length=20)
[WRONG] [medium] Pred 11:	b'SELECT countries.CountryName, countries.Continent FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.CountryId IN (SELECT car_makers.Country FROM car_makers)' (-3.719) (length=22)
[WRONG] [medium] Pred 12:	b'SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country' (-3.767) (length=13)
[WRONG] [medium] Pred 13:	b'SELECT DISTINCT countries.CountryName, countries.CountryId, car_makers.Maker FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country' (-4.109) (length=16)
Error Case 47

Parsing error: from countries join car_makers on countries.CountryId = car_makers.Country where car_makers.FullName in (from countries join car_makers on countries.CountryId = car_makers.Country select countries.CountryName , countries.CountryId
Example 124
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What are the names and ids of all countries with at least one car maker?'
NL tokens: [b'what', b'are', b'the', b'names', b'and', b'id', b'##s', b'of', b'all', b'countries', b'with', b'at', b'least', b'one', b'car', b'maker', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'and', b'id', b'##s', b'of', b'all', b'countries', b'with', b'at', b'least', b'one', b'car', b'maker', b'?']
 12%|█▏        | 16/130 [02:48<26:40, 14.04s/it]['[CLS]', 'what', 'are', 'the', 'names', 'and', 'id', '##s', 'of', 'all', 'countries', 'with', 'at', 'least', 'one', 'car', 'maker', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1'
Target TF-P tokens: from countries join car_makers on countries.CountryId = car_makers.Country group by countries.CountryId having count (*) >= 1 select countries.CountryName , countries.CountryId

[WRONG] [medium] Pred 0:	b'SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country' (-0.009) (length=13)
[WRONG] [medium] Pred 1:	b'SELECT DISTINCT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country' (-1.087) (length=14)
[WRONG] [medium] Pred 2:	b'SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId' (-1.983) (length=15)
[WRONG] [medium] Pred 3:	b'SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.FullName IN (SELECT DISTINCT countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country)' (-2.503) (length=29)
[WRONG] [medium] Pred 4:	b'SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.FullName IN (SELECT DISTINCT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country)' (-2.562) (length=29)
[WRONG] [medium] Pred 5:	b'SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Maker < "VALUE"' (-2.823) (length=19)
[WRONG] [medium] Pred 6:	b'SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Maker = "VALUE"' (-2.947) (length=19)
[WRONG] [medium] Pred 7:	b'SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.FullName = "VALUE"' (-3.048) (length=19)
[WRONG] [medium] Pred 8:	b'SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Maker > "VALUE"' (-3.059) (length=19)
[WRONG] [medium] Pred 9:	b'SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.FullName < "VALUE"' (-3.062) (length=19)
[WRONG] [medium] Pred 10:	b'SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Maker > "VALUE %"' (-3.122) (length=20)
[WRONG] [medium] Pred 11:	b'SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Maker < "VALUE VALUE"' (-3.150) (length=20)
[WRONG] [medium] Pred 12:	b'SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.FullName > "VALUE %"' (-3.234) (length=20)
[WRONG] [medium] Pred 13:	b'SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Maker > "VALUE VALUE"' (-3.296) (length=20)
[WRONG] [medium] Pred 14:	b'SELECT countries.CountryName, countries.CountryId, MIN(car_makers.Maker) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId' (-3.303) (length=20)
Error Case 48

Example 128
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What is the average weight and year for each year?'
NL tokens: [b'what', b'is', b'the', b'average', b'weight', b'and', b'year', b'for', b'each', b'year', b'?']
NL tokens (original): [b'What', b'is', b'the', b'average', b'weight', b'and', b'year', b'for', b'each', b'year', b'?']
['[CLS]', 'what', 'is', 'the', 'average', 'weight', 'and', 'year', 'for', 'each', 'year', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR'
Target TF-P tokens: from cars_data group by cars_data.Year select avg (cars_data.Weight) , cars_data.Year

[WRONG] [medium] Pred 0:	b'SELECT AVG(cars_data.Weight), AVG(cars_data.Year), cars_data.Year FROM cars_data GROUP BY cars_data.Year' (-0.040) (length=17)
[CORRE] [medium] Pred 1:	b'SELECT AVG(cars_data.Weight), cars_data.Year FROM cars_data GROUP BY cars_data.Year' (-0.492) (length=17)
Error Case 49

argument of type 'int' is not iterable
ERROR: Join condition does not match with table: ['countries', {'join': 'car_makers', 'on': {'eq': ['countries.CountryId', 'car_makers.Country']}}, {'join': 'car_makers', 'on': {'and': [{'eq': ['car_makers.Id', 'car_makers.Id']}, {'eq': ['countries.CountryId', 'countries.CountryId']}]}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'car_makers', 'on': {'eq': ['countries.CountryId', 'car_makers.Country']}}, {'join': 'car_makers', 'on': {'and': [{'eq': ['car_makers.Id', 'car_makers.Id']}, {'eq': ['countries.CountryId', 'countries.Continent']}]}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'car_makers', 'on': {'eq': ['countries.CountryId', 'car_makers.Country']}}, {'join': 'car_makers', 'on': {'eq': ['car_makers.Id', 'car_makers.Id']}}, {'join': 'continents', 'on': {'eq': ['countries.Continent', 'countries.CountryId']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'car_makers', 'on': {'eq': ['countries.CountryId', 'car_makers.Country']}}, {'join': 'car_makers', 'on': {'eq': ['car_makers.Id', 'car_makers.Id']}}, {'join': 'continents', 'on': {'eq': ['countries.Continent', 'countries.CountryId']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'car_makers', 'on': {'eq': ['countries.CountryId', 'car_makers.Country']}}, {'join': 'car_makers', 'on': {'and': [{'eq': ['car_makers.Id', 'car_makers.Id']}, {'eq': ['countries.Continent', 'countries.CountryId']}]}}]
argument of type 'int' is not iterable
Example 129
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'Which countries in europe have at least 3 car manufacturers?'
NL tokens: [b'which', b'countries', b'in', b'europe', b'have', b'at', b'least', b'3', b'car', b'manufacturers', b'?']
NL tokens (original): [b'Which', b'countries', b'in', b'europe', b'have', b'at', b'least', b'3', b'car', b'manufacturers', b'?']
['[CLS]', 'which', 'countries', 'in', 'europe', 'have', 'at', 'least', '3', 'car', 'manufacturers', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused49]', 'europe', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b"SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3"
Target TF-P tokens: from countries join continents on countries.Continent = continents.ContId join car_makers on countries.CountryId = car_makers.Country where continents.Continent = "europe" group by countries.CountryName having count (*) >= 3 select countries.CountryName

[WRONG] [extra] Pred 0:	b'SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) >= 3' (-0.579) (length=20)
[WRONG] [extra] Pred 1:	b'SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) >= "europe"' (-1.685) (length=20)
[WRONG] [extra] Pred 2:	b'SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN car_makers ON car_makers.Id = car_makers.Id JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = "europe" GROUP BY countries.CountryId HAVING COUNT(*) >= 3' (-2.227) (length=38)
[WRONG] [extra] Pred 3:	b'SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN car_makers ON car_makers.Id = car_makers.Id JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = "europe" AND car_makers.Maker = 3' (-2.236) (length=33)
[WRONG] [extra] Pred 4:	b'SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN car_makers ON car_makers.Id = car_makers.Id JOIN continents ON continents.ContId = countries.Continent GROUP BY countries.CountryId HAVING COUNT(*) >= 3' (-2.364) (length=32)
[WRONG] [extra] Pred 5:	b'SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN continents ON continents.ContId = countries.Continent GROUP BY countries.CountryId HAVING COUNT(*) >= 3' (-2.423) (length=26)
[WRONG] [extra] Pred 6:	b'SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId ORDER BY COUNT(*) >= 3' (-2.563) (length=20)
[WRONG] [extra] Pred 7:	b'SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN car_makers ON car_makers.Id = car_makers.Id JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = "europe" AND car_makers.Maker >= 3' (-2.681) (length=33)
[WRONG] [extra] Pred 8:	b'SELECT continents.Continent FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN car_makers ON car_makers.Id = car_makers.Id JOIN continents ON continents.ContId = countries.Continent GROUP BY countries.CountryId HAVING COUNT(*) >= 3' (-2.713) (length=32)
Error Case 50

Example 130
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What are the names of all European countries with at least 3 manufacturers?'
NL tokens: [b'what', b'are', b'the', b'names', b'of', b'all', b'european', b'countries', b'with', b'at', b'least', b'3', b'manufacturers', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'of', b'all', b'European', b'countries', b'with', b'at', b'least', b'3', b'manufacturers', b'?']
['[CLS]', 'what', 'are', 'the', 'names', 'of', 'all', 'european', 'countries', 'with', 'at', 'least', '3', 'manufacturers', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused49]', 'europe', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b"SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3"
Target TF-P tokens: from countries join continents on countries.Continent = continents.ContId join car_makers on countries.CountryId = car_makers.Country where continents.Continent = "VALUE" group by countries.CountryName having count (*) >= 3 select countries.CountryName

[WRONG] [extra] Pred 0:	b'SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent HAVING COUNT(*) >= 3' (-0.045) (length=20)
[WRONG] [extra] Pred 1:	b'SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) >= 3' (-1.345) (length=20)
[WRONG] [extra] Pred 2:	b'SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent HAVING COUNT(*) >= "European" INTERSECT SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) >= 3' (-1.751) (length=40)
[WRONG] [extra] Pred 3:	b'SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent ORDER BY COUNT(*) >= 3' (-1.823) (length=20)
[WRONG] [extra] Pred 4:	b'SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent HAVING COUNT(*) >= "European"' (-2.087) (length=20)
[WRONG] [extra] Pred 5:	b'SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent HAVING COUNT(*) >= 3 INTERSECT SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) >= 3' (-2.095) (length=40)
[WRONG] [extra] Pred 6:	b'SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) >= "European" INTERSECT SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) >= 3' (-2.155) (length=40)
[WRONG] [extra] Pred 7:	b'SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent HAVING COUNT(*) >= "European" INTERSECT SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent HAVING COUNT(*) >= 3' (-2.267) (length=40)
[WRONG] [extra] Pred 8:	b'SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent HAVING COUNT(*) >= 3 INTERSECT SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent HAVING COUNT(*) >= 3' (-2.534) (length=40)
[WRONG] [extra] Pred 9:	b'SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) >= "European" INTERSECT SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent HAVING COUNT(*) >= 3' (-2.656) (length=40)
[WRONG] [extra] Pred 10:	b'SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN car_makers ON car_makers.Id = car_makers.Id GROUP BY countries.Continent HAVING COUNT(*) >= 3' (-2.754) (length=26)
[WRONG] [extra] Pred 11:	b'SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent HAVING car_makers.Maker >= 3 ORDER BY COUNT(*) >= 3' (-2.865) (length=24)
[WRONG] [extra] Pred 12:	b'SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent HAVING car_makers.FullName >= 3 ORDER BY COUNT(*) >= 3' (-2.866) (length=24)
[WRONG] [extra] Pred 13:	b'SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) >= "European"' (-3.201) (length=20)
[WRONG] [extra] Pred 14:	b'SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent HAVING COUNT(*) >= 3 ORDER BY countries.CountryName' (-3.399) (length=22)
[WRONG] [extra] Pred 15:	b'SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.Continent HAVING COUNT(*) > 3' (-3.446) (length=20)
Error Case 51

Parsing error: from cars_data where cars_data.Cylinders = 3 select max (cars_data.Horsepower) , in (*)
Parsing error: from cars_data where cars_data.Cylinders = 3 select max (cars_data.Horsepower) , limit from car_names where cars_data.Cylinders = 3 select max (cars_data.Horsepower) , car_names.Make
Parsing error: from cars_data where cars_data.Cylinders = 3 select max (cars_data.Horsepower) , limit 1
Parsing error: from cars_data where cars_data.Cylinders = 3 select max (cars_data.Horsepower) , limit from car_names where cars_data.Cylinders = 3 select max (cars_data.Horsepower) , car_names.MakeId
Parsing error: from cars_data where cars_data.Cylinders = 3 select max (cars_data.Horsepower) , join car_makers on cars_data.Id = car_makers.Id where cars_data.Cylinders = 3 select max (cars_data.Horsepower) , car_makers.Maker
Parsing error: from cars_data where cars_data.Cylinders = 3 select max (cars_data.Horsepower) , join car_makers on cars_data.Id = car_makers.Id where cars_data.Cylinders = 3 select max (cars_data.Horsepower) , min (cars_data.Cylinders)
Example 131
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What is the maximum horsepower and the make of the car models with 3 cylinders?'
NL tokens: [b'what', b'is', b'the', b'maximum', b'horsepower', b'and', b'the', b'make', b'of', b'the', b'car', b'models', b'with', b'3', b'cylinders', b'?']
NL tokens (original): [b'What', b'is', b'the', b'maximum', b'horsepower', b'and', b'the', b'make', b'of', b'the', b'car', b'models', b'with', b'3', b'cylinders', b'?']
['[CLS]', 'what', 'is', 'the', 'maximum', 'horsepower', 'and', 'the', 'make', 'of', 'the', 'car', 'models', 'with', '3', 'cylinders', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1'
Target TF-P tokens: from car_names join cars_data on car_names.MakeId = cars_data.Id where cars_data.Cylinders = 3 select cars_data.Horsepower , car_names.Make order by cars_data.Horsepower desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT MAX(cars_data.Horsepower), COUNT(*) FROM cars_data WHERE cars_data.Cylinders = 3' (-3.000) (length=17)
[WRONG] [extra] Pred 1:	b'SELECT MAX(cars_data.Horsepower), "yes" FROM cars_data WHERE cars_data.Cylinders = 3' (-3.365) (length=14)
[WRONG] [extra] Pred 2:	b'SELECT MAX(cars_data.Horsepower), MAX(cars_data.Cylinders) FROM cars_data WHERE cars_data.Cylinders = 3' (-3.519) (length=17)
[WRONG] [extra] Pred 3:	b'SELECT MAX(cars_data.Horsepower), MIN(cars_data.Cylinders) FROM cars_data WHERE cars_data.Cylinders = 3' (-3.637) (length=17)
[WRONG] [extra] Pred 4:	b'SELECT MAX(cars_data.Horsepower), MAX(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 3' (-3.779) (length=17)
[WRONG] [extra] Pred 5:	b'SELECT MAX(cars_data.Horsepower), MIN(car_makers.Maker) FROM cars_data JOIN car_makers ON cars_data.Id = car_makers.Id WHERE cars_data.Cylinders = 3' (-3.853) (length=23)
[WRONG] [extra] Pred 6:	b'SELECT MAX(cars_data.Horsepower), MAX(car_makers.Maker) FROM cars_data JOIN car_makers ON cars_data.Id = car_makers.Id WHERE cars_data.Cylinders = 3' (-3.873) (length=23)
[WRONG] [extra] Pred 7:	b'SELECT MAX(cars_data.Horsepower), MIN(cars_data.Cylinders) FROM cars_data JOIN car_makers ON cars_data.Id = car_makers.Id WHERE cars_data.Cylinders = 3' (-3.912) (length=23)
[WRONG] [extra] Pred 8:	b'SELECT MAX(cars_data.Horsepower), MIN(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 3' (-4.030) (length=17)
[WRONG] [extra] Pred 9:	b'SELECT MAX(cars_data.Horsepower), MIN(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 3' (-4.036) (length=17)
Error Case 52

ERROR: Join condition does not match with table: ['cars_data', {'join': 'car_names', 'on': {'eq': ['car_names.Model', 'car_names.MakeId']}}]
Parsing error: from cars_data where cars_data.Cylinders = 3 select max (cars_data.Horsepower) ,
ERROR: Join condition does not match with table: ['cars_data', {'join': 'car_names', 'on': {'eq': ['car_names.Model', 'car_names.MakeId']}}]
ERROR: Join condition does not match with table: ['cars_data', {'join': 'car_names', 'on': {'eq': ['car_names.Model', 'car_names.MakeId']}}]
ERROR: Join condition does not match with table: ['cars_data', {'join': 'car_names', 'on': {'eq': ['car_names.Model', 'car_names.MakeId']}}]
ERROR: Join condition does not match with table: ['cars_data', {'join': 'car_names', 'on': {'eq': ['car_names.Model', 'car_names.MakeId']}}]
ERROR: Join condition does not match with table: ['cars_data', {'join': 'car_names', 'on': {'eq': ['car_names.Model', 'car_names.MakeId']}}]
Example 132
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What is the largest amount of horsepower for the models with 3 cylinders and what make is it?'
NL tokens: [b'what', b'is', b'the', b'largest', b'amount', b'of', b'horsepower', b'for', b'the', b'models', b'with', b'3', b'cylinders', b'and', b'what', b'make', b'is', b'it', b'?']
NL tokens (original): [b'What', b'is', b'the', b'largest', b'amount', b'of', b'horsepower', b'for', b'the', b'models', b'with', b'3', b'cylinders', b'and', b'what', b'make', b'is', b'it', b'?']
['[CLS]', 'what', 'is', 'the', 'largest', 'amount', 'of', 'horsepower', 'for', 'the', 'models', 'with', '3', 'cylinders', 'and', 'what', 'make', 'is', 'it', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1'
Target TF-P tokens: from car_names join cars_data on car_names.MakeId = cars_data.Id where cars_data.Cylinders = 3 select cars_data.Horsepower , car_names.Make order by cars_data.Horsepower desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders = 3' (-2.740) (length=11)
[WRONG] [extra] Pred 1:	b'SELECT MAX(cars_data.Horsepower), MIN(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 3' (-4.272) (length=17)
[WRONG] [extra] Pred 2:	b'SELECT cars_data.Horsepower, MAX(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 3 GROUP BY cars_data.Horsepower' (-4.625) (length=16)
[WRONG] [extra] Pred 3:	b'SELECT MAX(cars_data.Horsepower), 1 FROM cars_data WHERE cars_data.Cylinders = 3' (-5.018) (length=14)
[WRONG] [extra] Pred 4:	b'SELECT "yes", cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders = 3' (-5.718) (length=11)
[WRONG] [extra] Pred 5:	b'SELECT cars_data.Horsepower FROM cars_data JOIN car_makers ON cars_data.Id = car_makers.Id WHERE cars_data.Cylinders = 3' (-5.879) (length=17)
[WRONG] [extra] Pred 6:	b'SELECT cars_data.Horsepower, MAX(cars_data.Cylinders) FROM cars_data WHERE cars_data.Cylinders = 3 GROUP BY cars_data.Horsepower' (-6.005) (length=16)
[WRONG] [extra] Pred 7:	b'SELECT MAX(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 3' (-6.425) (length=17)
[WRONG] [extra] Pred 8:	b'SELECT MAX(cars_data.Horsepower), AVG(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 3' (-6.495) (length=17)
Error Case 53

ERROR: Join condition does not match with table: ['cars_data', {'join': 'model_list', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
ERROR: Join condition does not match with table: ['model_list', {'join': 'cars_data', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
ERROR: Join condition does not match with table: ['cars_data', {'join': 'model_list', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
Parsing error: from cars_data VALUE max (cars_data.Horsepower) order by sum (cars_data.Horsepower) desc limit 1
ERROR: Join condition does not match with table: ['cars_data', {'join': 'model_list', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
Parsing error: from model_list group by model_list.Model select model_list.Model order by limit (*) desc limit 1
Parsing error: from cars_data 1 max (cars_data.Horsepower) order by sum (cars_data.Horsepower) desc limit 1
Parsing error: from model_list group by model_list.Model select model_list.Model order by from cars_data desc desc limit 1
Parsing error: from cars_data VALUE max (cars_data.Horsepower) order by sum (cars_data.Cylinders) desc limit 1
Parsing error: from cars_data 1 max (cars_data.Horsepower) order by sum (cars_data.Cylinders) desc limit 1
Parsing error: from model_list group by model_list.Model select model_list.Model order by from model_list desc desc limit 1
Parsing error: from model_list group by model_list.Model select model_list.Model order by count (*) desc limit 1 , model_list.Model
Parsing error: from model_list group by model_list.Model select model_list.Model order by count (*) desc limit 1 asc limit 1
Parsing error: from model_list group by model_list.Model select model_list.Model order by count (*) desc limit 1 asc
Example 133
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'Which model saves the most gasoline? That is to say, have the maximum miles per gallon.'
NL tokens: [b'which', b'model', b'saves', b'the', b'most', b'gasoline', b'?', b'that', b'is', b'to', b'say', b',', b'have', b'the', b'maximum', b'miles', b'per', b'gallon', b'.']
NL tokens (original): [b'Which', b'model', b'saves', b'the', b'most', b'gasoline', b'?', b'That', b'is', b'to', b'say', b',', b'have', b'the', b'maximum', b'miles', b'per', b'gallon', b'.']
['[CLS]', 'which', 'model', 'saves', 'the', 'most', 'gasoline', '?', 'that', 'is', 'to', 'say', ',', 'have', 'the', 'maximum', 'miles', 'per', 'gallon', '.', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1'
Target TF-P tokens: from car_names join cars_data on car_names.MakeId = cars_data.Id select car_names.Model order by cars_data.MPG desc limit 1

[WRONG] [hard] Pred 0:	b'SELECT model_list.Model FROM model_list GROUP BY model_list.Model ORDER BY COUNT(*) DESC LIMIT 1' (-1.131) (length=15)
[WRONG] [hard] Pred 1:	b'SELECT model_list.Model FROM model_list GROUP BY model_list.Model ORDER BY COUNT(*) DESC LIMIT 10' (-6.688) (length=15)
Error Case 54

ERROR: Join condition does not match with table: ['cars_data', {'join': 'car_names', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
ERROR: Join condition does not match with table: ['cars_data', {'join': 'model_list', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
ERROR: Join condition does not match with table: ['cars_data', {'join': 'car_names', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
ERROR: Join condition does not match with table: ['cars_data', {'join': 'model_list', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
ERROR: Join condition does not match with table: ['cars_data', {'join': 'model_list', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
ERROR: Join condition does not match with table: ['cars_data', {'join': 'model_list', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
Parsing error: from cars_data where cars_data.MPG = (from cars_data select max (cars_data.MPG)) order by cars_data.MPG desc limit 1
Example 134
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What is the car model with the highest mpg ?'
NL tokens: [b'what', b'is', b'the', b'car', b'model', b'with', b'the', b'highest', b'mp', b'##g', b'?']
NL tokens (original): [b'What', b'is', b'the', b'car', b'model', b'with', b'the', b'highest', b'mp', b'##g', b'?']
['[CLS]', 'what', 'is', 'the', 'car', 'model', 'with', 'the', 'highest', 'mp', '##g', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1'
Target TF-P tokens: from car_names join cars_data on car_names.MakeId = cars_data.Id select car_names.Model order by cars_data.MPG desc limit 1

[WRONG] [hard] Pred 0:	b'SELECT cars_data.MPG FROM cars_data ORDER BY cars_data.MPG DESC LIMIT 1' (-2.897) (length=10)
[WRONG] [hard] Pred 1:	b'SELECT cars_data.Id FROM cars_data ORDER BY cars_data.MPG DESC LIMIT 1' (-3.025) (length=10)
 13%|█▎        | 17/130 [03:05<27:56, 14.84s/it] 14%|█▍        | 18/130 [03:07<20:48, 11.14s/it][WRONG] [hard] Pred 2:	b'SELECT cars_data.Id FROM cars_data WHERE cars_data.MPG = (SELECT MAX(cars_data.MPG) FROM cars_data)' (-3.048) (length=17)
[WRONG] [hard] Pred 3:	b'SELECT cars_data.Id FROM cars_data WHERE cars_data.MPG = (SELECT MAX(cars_data.MPG) FROM cars_data) ORDER BY cars_data.MPG DESC LIMIT 1' (-3.255) (length=22)
[WRONG] [hard] Pred 4:	b'SELECT cars_data.MPG FROM cars_data WHERE cars_data.MPG = (SELECT MAX(cars_data.MPG) FROM cars_data) ORDER BY cars_data.MPG DESC LIMIT 1' (-3.340) (length=22)
[WRONG] [hard] Pred 5:	b'SELECT cars_data.Id FROM cars_data JOIN cars_data ON cars_data.Id = cars_data.Id WHERE cars_data.MPG = (SELECT MAX(cars_data.MPG) FROM cars_data) ORDER BY cars_data.MPG DESC LIMIT 1' (-3.432) (length=28)
[WRONG] [hard] Pred 6:	b'SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.MPG DESC LIMIT 1' (-3.962) (length=10)
[WRONG] [hard] Pred 7:	b'SELECT MAX(cars_data.MPG) FROM cars_data ORDER BY cars_data.MPG DESC LIMIT 1' (-4.187) (length=13)
[WRONG] [hard] Pred 8:	b'SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.MPG = (SELECT MAX(cars_data.MPG) FROM cars_data)' (-4.253) (length=17)
Error Case 55

ERROR: Join condition does not match with table: ['cars_data', {'join': 'car_names', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
ERROR: Join condition does not match with table: ['cars_data', {'join': 'car_names', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
Parsing error: from cars_data select avg (cars_data.Edispl) ,
Parsing error: from cars_data select 10 (cars_data.Edispl)
Parsing error: from cars_data select 12 (cars_data.Edispl)
Parsing error: from cars_data select / (cars_data.Edispl)
Example 138
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What is the average edispl for all volvos?'
NL tokens: [b'what', b'is', b'the', b'average', b'ed', b'##is', b'##pl', b'for', b'all', b'volvo', b'##s', b'?']
NL tokens (original): [b'What', b'is', b'the', b'average', b'ed', b'##is', b'##pl', b'for', b'all', b'volvo', b'##s', b'?']
['[CLS]', 'what', 'is', 'the', 'average', 'ed', '##is', '##pl', 'for', 'all', 'volvo', '##s', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused49]', 'volvo', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused49]', 'volvo', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused49]', 'volvo', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b"SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'"
Target TF-P tokens: from car_names join cars_data on car_names.MakeId = cars_data.Id where car_names.Model = "volvo" select avg (cars_data.Edispl)

[WRONG] [medium] Pred 0:	b'SELECT AVG(cars_data.Edispl) FROM cars_data' (-0.000) (length=8)
[WRONG] [medium] Pred 1:	b'SELECT AVG(cars_data.Edispl) FROM cars_data' (-5.906) (length=13)
[WRONG] [medium] Pred 2:	b'SELECT AVG(cars_data.Edispl), MIN(cars_data.Edispl) FROM cars_data' (-6.019) (length=13)
[WRONG] [medium] Pred 3:	b'SELECT AVG(cars_data.Edispl) FROM cars_data INTERSECT SELECT AVG(cars_data.Edispl) FROM cars_data' (-6.197) (length=16)
[WRONG] [medium] Pred 4:	b'SELECT AVG(cars_data.Edispl), SUM(cars_data.Edispl) FROM cars_data' (-6.746) (length=13)
[WRONG] [medium] Pred 5:	b'SELECT AVG(cars_data.Edispl), cars_data.Id FROM cars_data' (-6.866) (length=10)
[WRONG] [medium] Pred 6:	b'SELECT AVG(cars_data.Edispl) FROM cars_data INTERSECT SELECT cars_data.Edispl FROM cars_data' (-6.945) (length=15)
[WRONG] [medium] Pred 7:	b'SELECT AVG(cars_data.Edispl) FROM cars_data ORDER BY cars_data.Edispl' (-7.612) (length=10)
[WRONG] [medium] Pred 8:	b'SELECT AVG(cars_data.Edispl) FROM cars_data INTERSECT SELECT cars_data.Edispl FROM cars_data' (-7.772) (length=13)
[WRONG] [medium] Pred 9:	b'SELECT SUM(cars_data.Edispl) FROM cars_data' (-8.209) (length=8)
[WRONG] [medium] Pred 10:	b'SELECT AVG(cars_data.Edispl - cars_data.Year) FROM cars_data' (-8.408) (length=10)
[WRONG] [medium] Pred 11:	b'SELECT AVG(cars_data.Edispl - cars_data.Cylinders) FROM cars_data' (-8.541) (length=10)
Error Case 56

Example 147
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'How many car models were produced by the maker with full name American Motor Company?'
NL tokens: [b'how', b'many', b'car', b'models', b'were', b'produced', b'by', b'the', b'maker', b'with', b'full', b'name', b'american', b'motor', b'company', b'?']
NL tokens (original): [b'How', b'many', b'car', b'models', b'were', b'produced', b'by', b'the', b'maker', b'with', b'full', b'name', b'American', b'Motor', b'Company', b'?']
['[CLS]', 'how', 'many', 'car', 'models', 'were', 'produced', 'by', 'the', 'maker', 'with', 'full', 'name', 'american', 'motor', 'company', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused49]', 'america', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused49]', 'american', 'motor', 'company', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b"SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'"
Target TF-P tokens: from car_makers join model_list on car_makers.Id = model_list.Maker where car_makers.FullName = "American Motor Company" select count (*)

[WRONG] [medium] Pred 0:	b'SELECT COUNT(*) FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_makers.FullName = "American Motor Company"' (-0.215) (length=22)
[CORRE] [medium] Pred 1:	b'SELECT COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = "American Motor Company"' (-0.449) (length=22)
Error Case 57

Example 149
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'Which makers designed more than 3 car models? List full name and the id.'
NL tokens: [b'which', b'makers', b'designed', b'more', b'than', b'3', b'car', b'models', b'?', b'list', b'full', b'name', b'and', b'the', b'id', b'.']
NL tokens (original): [b'Which', b'makers', b'designed', b'more', b'than', b'3', b'car', b'models', b'?', b'List', b'full', b'name', b'and', b'the', b'id', b'.']
['[CLS]', 'which', 'makers', 'designed', 'more', 'than', '3', 'car', 'models', '?', 'list', 'full', 'name', 'and', 'the', 'id', '.', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3'
Target TF-P tokens: from car_makers join model_list on car_makers.Id = model_list.Maker group by car_makers.Id having count (*) > 3 select car_makers.FullName , car_makers.Id

[WRONG] [medium] Pred 0:	b'SELECT car_makers.Maker, car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-0.001) (length=24)
[WRONG] [medium] Pred 1:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-1.133) (length=22)
[WRONG] [medium] Pred 2:	b'SELECT car_makers.Maker, car_makers.FullName, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-1.345) (length=24)
[WRONG] [medium] Pred 3:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3 INTERSECT SELECT car_makers.Maker, car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-1.525) (length=46)
[WRONG] [medium] Pred 4:	b'SELECT car_makers.Maker, car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker HAVING COUNT(*) > 3' (-1.622) (length=24)
[WRONG] [medium] Pred 5:	b'SELECT car_makers.Maker, car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON model_list.Maker = car_makers.Id GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-1.769) (length=24)
[WRONG] [medium] Pred 6:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3 INTERSECT SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-1.914) (length=44)
[WRONG] [medium] Pred 7:	b'SELECT car_makers.Maker, car_makers.FullName, car_makers.Id FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-2.136) (length=24)
[WRONG] [medium] Pred 8:	b'SELECT car_makers.Maker, car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-2.374) (length=30)
[WRONG] [medium] Pred 9:	b'SELECT car_makers.Maker, car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY model_list.Maker HAVING COUNT(*) > 3' (-2.520) (length=24)
[WRONG] [medium] Pred 10:	b'SELECT car_makers.Maker, car_makers.FullName, car_makers.Id, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-2.521) (length=26)
[WRONG] [medium] Pred 11:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3 INTERSECT SELECT car_makers.Maker, car_makers.FullName, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-2.525) (length=46)
[WRONG] [medium] Pred 12:	b'SELECT car_makers.Maker, car_makers.FullName, car_makers.Id FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id GROUP BY model_list.Maker HAVING COUNT(*) > 3' (-2.574) (length=24)
[WRONG] [medium] Pred 13:	b'SELECT car_makers.Maker, car_makers.FullName, model_list.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-2.577) (length=24)
[WRONG] [medium] Pred 14:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker HAVING COUNT(*) > 3' (-2.593) (length=22)
[WRONG] [medium] Pred 15:	b'SELECT car_makers.Maker, car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) < 3' (-2.976) (length=24)
Error Case 58

Parsing error: from car_makers join model_list on car_makers.Id = model_list.Maker group by car_makers.Id having count (*) > 3 select car_makers.Maker) select car_makers.Maker , car_makers.Id
Parsing error: from car_makers join model_list on car_makers.Id = model_list.Maker group by car_makers.Id having count (*) having limit 3 select car_makers.Maker , car_makers.Id
Parsing error: from car_makers join model_list on car_makers.Id = model_list.Maker group by car_makers.Id having having (model_list.Model) > 3 select car_makers.Maker , car_makers.Id
Example 150
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What are the names and ids of all makers with more than 3 models?'
NL tokens: [b'what', b'are', b'the', b'names', b'and', b'id', b'##s', b'of', b'all', b'makers', b'with', b'more', b'than', b'3', b'models', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'and', b'id', b'##s', b'of', b'all', b'makers', b'with', b'more', b'than', b'3', b'models', b'?']
['[CLS]', 'what', 'are', 'the', 'names', 'and', 'id', '##s', 'of', 'all', 'makers', 'with', 'more', 'than', '3', 'models', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3'
Target TF-P tokens: from car_makers join model_list on car_makers.Id = model_list.Maker group by car_makers.Id having count (*) > 3 select car_makers.FullName , car_makers.Id

[WRONG] [medium] Pred 0:	b'SELECT car_makers.Maker, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-0.000) (length=22)
[WRONG] [medium] Pred 1:	b'SELECT car_makers.Maker, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY model_list.Maker HAVING COUNT(*) > 3' (-1.879) (length=22)
[WRONG] [medium] Pred 2:	b'SELECT car_makers.Maker, car_makers.Id FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id GROUP BY model_list.Maker HAVING COUNT(*) > 3' (-1.926) (length=22)
[WRONG] [medium] Pred 3:	b'SELECT car_makers.Maker, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.MakeId GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-2.958) (length=28)
[WRONG] [medium] Pred 4:	b'SELECT car_makers.Maker, car_makers.Id FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-2.962) (length=22)
[WRONG] [medium] Pred 5:	b'SELECT car_makers.Maker, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-3.058) (length=22)
[WRONG] [medium] Pred 6:	b'SELECT car_makers.Maker, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) >= 3' (-3.216) (length=22)
[WRONG] [medium] Pred 7:	b'SELECT car_makers.Maker, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) < 3' (-3.226) (length=22)
[WRONG] [medium] Pred 8:	b'SELECT car_makers.Maker, MIN(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-3.243) (length=25)
[WRONG] [medium] Pred 9:	b'SELECT car_makers.Maker, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY model_list.Model HAVING COUNT(*) > 3' (-3.249) (length=22)
[WRONG] [medium] Pred 10:	b'SELECT car_makers.Maker, "min" AS car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-3.260) (length=23)
[WRONG] [medium] Pred 11:	b'SELECT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-3.314) (length=20)
[CORRE] [medium] Pred 12:	b'SELECT car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-3.754) (length=22)
Error Case 59

ERROR: Join condition does not match with table: ['car_makers', {'join': 'car_names', 'on': {'eq': ['car_names.MakeId', 'car_names.Model']}}, {'join': 'car_makers', 'on': {'eq': ['car_makers.Id', 'car_makers.Id']}}]
Example 151
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?'
NL tokens: [b'which', b'distinctive', b'models', b'are', b'produced', b'by', b'maker', b'with', b'the', b'full', b'name', b'general', b'motors', b'or', b'weighing', b'more', b'than', b'350', b'##0', b'?']
NL tokens (original): [b'Which', b'distinctive', b'models', b'are', b'produced', b'by', b'maker', b'with', b'the', b'full', b'name', b'General', b'Motors', b'or', b'weighing', b'more', b'than', b'350', b'##0', b'?']
['[CLS]', 'which', 'distinctive', 'models', 'are', 'produced', 'by', 'maker', 'with', 'the', 'full', 'name', 'general', 'motors', 'or', 'weighing', 'more', 'than', '350', '##0', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused49]', 'general', 'motors', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
 15%|█▍        | 19/130 [03:20<21:15, 11.49s/it]Target 0: b"SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500"
Target TF-P tokens: from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join cars_data on car_names.MakeId = cars_data.Id where car_makers.FullName = "General Motors" or cars_data.Weight > 3500 select distinct model_list.Model

[WRONG] [extra] Pred 0:	b'SELECT DISTINCT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-1.281) (length=26)
[WRONG] [extra] Pred 1:	b'SELECT DISTINCT model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-2.171) (length=26)
[WRONG] [extra] Pred 2:	b'SELECT DISTINCT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = "full General Motors" OR car_makers.FullName = 3500' (-2.437) (length=27)
[WRONG] [extra] Pred 3:	b'SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-2.441) (length=32)
[WRONG] [extra] Pred 4:	b'SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON car_makers.Id = car_makers.Id WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-2.515) (length=32)
[WRONG] [extra] Pred 5:	b'SELECT DISTINCT model_list.Model FROM model_list JOIN car_makers ON model_list.Model = car_makers.Id WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-2.561) (length=26)
[WRONG] [extra] Pred 6:	b'SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON car_makers.Id = car_names.MakeId WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-2.616) (length=32)
[WRONG] [extra] Pred 7:	b'SELECT DISTINCT model_list.Model, model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-4.238) (length=28)
[WRONG] [extra] Pred 8:	b'SELECT DISTINCT car_names.Model FROM car_makers JOIN car_names ON car_makers.Id = car_names.Model JOIN car_makers ON car_makers.Id = car_makers.Id WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-4.424) (length=32)
[WRONG] [extra] Pred 9:	b'SELECT DISTINCT car_names.Model FROM car_makers JOIN car_names ON car_makers.Id = car_names.Model JOIN car_makers ON car_makers.Id = car_names.MakeId WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-4.647) (length=32)
[WRONG] [extra] Pred 10:	b'SELECT DISTINCT car_names.Make FROM car_makers JOIN car_names ON car_makers.Id = car_names.Model JOIN car_makers ON car_makers.Id = car_makers.Id WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-4.665) (length=32)
[WRONG] [extra] Pred 11:	b'SELECT DISTINCT car_names.Model FROM car_makers JOIN car_names ON car_makers.Id = car_names.Model JOIN car_makers ON car_makers.Id = car_makers.Country WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-4.738) (length=32)
[WRONG] [extra] Pred 12:	b'SELECT DISTINCT car_names.Model FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-4.834) (length=32)
[WRONG] [extra] Pred 13:	b'SELECT DISTINCT car_names.Make FROM car_makers JOIN car_names ON car_makers.Id = car_names.Model JOIN car_makers ON car_makers.Id = car_names.MakeId WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-4.890) (length=32)
[WRONG] [extra] Pred 14:	b'SELECT DISTINCT car_names.Model FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON car_makers.Id = car_makers.Id WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-4.891) (length=32)
Error Case 60

ERROR: Join condition does not match with table: ['model_list', {'join': 'car_names', 'on': {'eq': ['car_names.MakeId', 'car_names.MakeId']}}, {'join': 'car_makers', 'on': {'eq': ['model_list.Maker', 'car_makers.Id']}}]
Parsing error: from model_list join cars_data on model_list.Model = cars_data.Id join car_makers on model_list.Maker = car_makers.Id where car_makers.FullName = "General Motors" or cars_data.Weight > 350 3500 select distinct model_list.Model
ERROR: Join condition does not match with table: ['model_list', {'join': 'car_names', 'on': {'eq': ['car_names.Model', 'car_names.MakeId']}}, {'join': 'car_makers', 'on': {'eq': ['model_list.Maker', 'car_makers.Id']}}]
ERROR: Join condition does not match with table: ['model_list', {'join': 'car_names', 'on': {'eq': ['car_names.Model', 'car_names.MakeId']}}, {'join': 'car_makers', 'on': {'eq': ['car_makers.Id', 'car_names.MakeId']}}]
ERROR: Join condition does not match with table: ['model_list', {'join': 'car_names', 'on': {'eq': ['model_list.Model', 'car_names.MakeId']}}, {'join': 'car_makers', 'on': {'eq': ['model_list.Maker', 'car_names.MakeId']}}]
Example 152
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What are the different models created by either the car maker General Motors or weighed more than 3500?'
NL tokens: [b'what', b'are', b'the', b'different', b'models', b'created', b'by', b'either', b'the', b'car', b'maker', b'general', b'motors', b'or', b'weighed', b'more', b'than', b'350', b'##0', b'?']
NL tokens (original): [b'What', b'are', b'the', b'different', b'models', b'created', b'by', b'either', b'the', b'car', b'maker', b'General', b'Motors', b'or', b'weighed', b'more', b'than', b'350', b'##0', b'?']
['[CLS]', 'what', 'are', 'the', 'different', 'models', 'created', 'by', 'either', 'the', 'car', 'maker', 'general', 'motors', 'or', 'weighed', 'more', 'than', '350', '##0', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused49]', 'general', 'motors', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b"SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500"
Target TF-P tokens: from car_names join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id join cars_data on car_names.MakeId = cars_data.Id where car_makers.FullName = "General Motors" or cars_data.Weight > 3500 select distinct model_list.Model

[WRONG] [extra] Pred 0:	b'SELECT DISTINCT model_list.Model FROM model_list JOIN cars_data ON model_list.Model = cars_data.Id JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = "General Motors" OR cars_data.Weight > 3500' (-1.562) (length=30)
[WRONG] [extra] Pred 1:	b'SELECT DISTINCT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-2.153) (length=26)
[WRONG] [extra] Pred 2:	b'SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-2.704) (length=32)
[WRONG] [extra] Pred 3:	b'SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON car_makers.Id = car_names.MakeId WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-2.805) (length=32)
[WRONG] [extra] Pred 4:	b'SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-3.080) (length=32)
[WRONG] [extra] Pred 5:	b'SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.MakeId JOIN car_makers ON car_makers.Id = car_makers.Id WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-3.111) (length=32)
[WRONG] [extra] Pred 6:	b'SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Maker = car_names.MakeId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-3.194) (length=32)
[WRONG] [extra] Pred 7:	b'SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Maker = car_names.MakeId JOIN car_makers ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-3.486) (length=32)
[WRONG] [extra] Pred 8:	b'SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Maker = car_names.MakeId JOIN car_makers ON car_makers.Id = car_names.MakeId WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-3.549) (length=32)
[WRONG] [extra] Pred 9:	b'SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN car_makers ON car_makers.Id = car_names.MakeId WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-3.565) (length=32)
[WRONG] [extra] Pred 10:	b'SELECT DISTINCT model_list.Model FROM model_list JOIN cars_data ON model_list.Model = cars_data.Id JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = "General Motors" OR car_makers.FullName = 3500' (-3.613) (length=32)
Error Case 61

Example 153
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'In which years cars were produced weighing no less than 3000 and no more than 4000 ?'
NL tokens: [b'in', b'which', b'years', b'cars', b'were', b'produced', b'weighing', b'no', b'less', b'than', b'3000', b'and', b'no', b'more', b'than', b'4000', b'?']
NL tokens (original): [b'In', b'which', b'years', b'cars', b'were', b'produced', b'weighing', b'no', b'less', b'than', b'3000', b'and', b'no', b'more', b'than', b'4000', b'?']
['[CLS]', 'in', 'which', 'years', 'cars', 'were', 'produced', 'weighing', 'no', 'less', 'than', '3000', 'and', 'no', 'more', 'than', '4000', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'select distinct year from cars_data where weight between 3000 and 4000'
Target TF-P tokens: from cars_data where cars_data.Weight between 3000 and 4000 select distinct cars_data.Year

[WRONG] [easy] Pred 0:	b'SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight < 3000 AND cars_data.Weight < 4000' (-0.065) (length=14)
[WRONG] [easy] Pred 1:	b'SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight < 3000 AND cars_data.Weight <= 4000' (-0.517) (length=14)
[WRONG] [easy] Pred 2:	b'SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight < 3000 INTERSECT SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight < 4000' (-1.295) (length=20)
[WRONG] [easy] Pred 3:	b'SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight < 3000 INTERSECT SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight < 4000' (-1.559) (length=19)
[WRONG] [easy] Pred 4:	b'SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight < 4000' (-1.742) (length=10)
[WRONG] [easy] Pred 5:	b'SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight < 3000 AND cars_data.Horsepower <= 4000' (-1.930) (length=14)
[WRONG] [easy] Pred 6:	b'SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight < 3000 AND cars_data.Horsepower < 4000' (-1.945) (length=14)
[WRONG] [easy] Pred 7:	b'SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight < 3000 INTERSECT SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight < 4000' (-2.206) (length=18)
[WRONG] [easy] Pred 8:	b'SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight < 3000 AND cars_data.Horsepower != 4000' (-2.319) (length=14)
[WRONG] [easy] Pred 9:	b'SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight < 4000 INTERSECT SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight < 4000' (-2.321) (length=19)
[CORRE] [easy] Pred 10:	b'SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight BETWEEN 3000 AND 4000' (-2.520) (length=12)
Error Case 62

ERROR: table "cars_data" in field expression cars_data.Weight is not in the current scope
ERROR: table "cars_data" in field expression cars_data.Horsepower is not in the current scope
Parsing error: from cars_data where cars_data.Weight intersect 4000 select distinct cars_data.Year intersect from cars_data where cars_data.Weight > 3000 select distinct cars_data.Year
Parsing error: from cars_data where cars_data.Weight between 4000 select distinct cars_data.Year intersect from cars_data where cars_data.Weight > 3000 select distinct cars_data.Year
Example 154
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?'
NL tokens: [b'what', b'are', b'the', b'different', b'years', b'in', b'which', b'there', b'were', b'cars', b'produced', b'that', b'weighed', b'less', b'than', b'4000', b'and', b'also', b'cars', b'that', b'weighted', b'more', b'than', b'3000', b'?']
NL tokens (original): [b'What', b'are', b'the', b'different', b'years', b'in', b'which', b'there', b'were', b'cars', b'produced', b'that', b'weighed', b'less', b'than', b'4000', b'and', b'also', b'cars', b'that', b'weighted', b'more', b'than', b'3000', b'?']
['[CLS]', 'what', 'are', 'the', 'different', 'years', 'in', 'which', 'there', 'were', 'cars', 'produced', 'that', 'weighed', 'less', 'than', '4000', 'and', 'also', 'cars', 'that', 'weighted', 'more', 'than', '3000', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'select distinct year from cars_data where weight between 3000 and 4000'
Target TF-P tokens: from cars_data where cars_data.Weight between 3000 and 4000 select distinct cars_data.Year

[WRONG] [easy] Pred 0:	b'SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight < 4000 INTERSECT SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight > 3000' (-0.001) (length=20)
[WRONG] [easy] Pred 1:	b'SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight < 4000 INTERSECT SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Horsepower > 3000' (-1.236) (length=20)
[WRONG] [easy] Pred 2:	b'SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight < 4000 INTERSECT SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight > 4000' (-2.279) (length=20)
[WRONG] [easy] Pred 3:	b'SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight < 3000 INTERSECT SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight > 4000' (-2.617) (length=20)
[WRONG] [easy] Pred 4:	b'SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight < 3000 INTERSECT SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight > 3000' (-2.755) (length=20)
[WRONG] [easy] Pred 5:	b'SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight < 4000 INTERSECT SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight > 3000 INTERSECT SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight > 4000' (-2.932) (length=30)
[WRONG] [easy] Pred 6:	b'SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight < 4000 INTERSECT SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight > 3000 INTERSECT SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Horsepower > 3000' (-3.088) (length=30)
[WRONG] [easy] Pred 7:	b'SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight < 4000 EXCEPT SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight > 3000' (-3.233) (length=20)
[WRONG] [easy] Pred 8:	b'SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight < 3000 INTERSECT SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Horsepower > 3000' (-3.280) (length=20)
[WRONG] [easy] Pred 9:	b'SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight > 4000 INTERSECT SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight > 3000' (-3.508) (length=20)
[WRONG] [easy] Pred 10:	b'SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight < 4000 INTERSECT SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Edispl > 3000' (-3.531) (length=20)
[WRONG] [easy] Pred 11:	b'SELECT DISTINCT cars_data.Year FROM cars_data WHERE cars_data.Weight < 4000 INTERSECT SELECT DISTINCT cars_data.Year, cars_data.Year FROM cars_data WHERE cars_data.Weight > 3000' (-3.548) (length=22)
Error Case 63

ERROR: table "model_list" in field expression model_list.Model is not in the current scope
ERROR: Join condition does not match with table: ['cars_data', {'join': 'car_names', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
ERROR: Join condition does not match with table: ['model_list', {'join': 'cars_data', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
ERROR: Join condition does not match with table: ['cars_data', {'join': 'car_names', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
ERROR: table "cars_data" in field expression cars_data.Accelerate is not in the current scope
ERROR: table "cars_data" in field expression cars_data.Accelerate is not in the current scope
ERROR: table "model_list" in field expression model_list.Model is not in the current scope
ERROR: table "cars_data" in field expression cars_data.Accelerate is not in the current scope
ERROR: table "cars_data" in field expression cars_data.Accelerate is not in the current scope
ERROR: Join condition does not match with table: ['model_list', {'join': 'cars_data', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
ERROR: Join condition does not match with table: ['model_list', {'join': 'cars_data', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
ERROR: table "model_list" in field expression model_list.Model is not in the current scope
ERROR: Join condition does not match with table: ['model_list', {'join': 'cars_data', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
ERROR: table "model_list" in field expression model_list.Model is not in the current scope
ERROR: Join condition does not match with table: ['model_list', {'join': 'cars_data', 'on': {'eq': ['model_list.ModelId', 'model_list.ModelId']}}]
ERROR: table "cars_data" in field expression cars_data.Accelerate is not in the current scope
Example 157
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'For model volvo, how many cylinders does the car with the least accelerate have?'
NL tokens: [b'for', b'model', b'volvo', b',', b'how', b'many', b'cylinders', b'does', b'the', b'car', b'with', b'the', b'least', b'accelerate', b'have', b'?']
NL tokens (original): [b'For', b'model', b'volvo', b',', b'how', b'many', b'cylinders', b'does', b'the', b'car', b'with', b'the', b'least', b'accelerate', b'have', b'?']
['[CLS]', 'for', 'model', 'volvo', ',', 'how', 'many', 'cylinders', 'does', 'the', 'car', 'with', 'the', 'least', 'accelerate', 'have', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused49]', 'volvo', '[unused51]', 'full', 'name', '[unused49]', 'volvo', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused49]', 'volvo', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused49]', 'volvo', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b"SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"
Target TF-P tokens: from cars_data join car_names on cars_data.Id = car_names.MakeId where car_names.Model = "volvo" select cars_data.Cylinders order by cars_data.Accelerate asc limit 1

[WRONG] extra Pred 0:	No valid output! (0.000)
Error Case 64

ERROR: table "cars_data" in field expression cars_data.Accelerate is not in the current scope
ERROR: Join condition does not match with table: ['model_list', {'join': 'cars_data', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
ERROR: Join condition does not match with table: ['model_list', {'join': 'cars_data', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
ERROR: Join condition does not match with table: ['cars_data', {'join': 'car_makers', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
ERROR: Join condition does not match with table: ['model_list', {'join': 'cars_data', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
ERROR: Join condition does not match with table: ['model_list', {'join': 'cars_data', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
ERROR: Join condition does not match with table: ['model_list', {'join': 'cars_data', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
ERROR: Join condition does not match with table: ['cars_data', {'join': 'car_makers', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
Parsing error: from cars_data where cars_data.Accelerate = (from cars_data y "select min (cars_data.Accelerate)) select sum (cars_data.Cylinders)"
ERROR: table "cars_data" in field expression cars_data.Accelerate is not in the current scope
ERROR: Join condition does not match with table: ['cars_data', {'join': 'car_makers', 'on': {'eq': ['cars_data.Id', 'cars_data.Id']}}]
Example 158
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'For a volvo model, how many cylinders does the version with least accelerate have?'
NL tokens: [b'for', b'a', b'volvo', b'model', b',', b'how', b'many', b'cylinders', b'does', b'the', b'version', b'with', b'least', b'accelerate', b'have', b'?']
NL tokens (original): [b'For', b'a', b'volvo', b'model', b',', b'how', b'many', b'cylinders', b'does', b'the', b'version', b'with', b'least', b'accelerate', b'have', b'?']
['[CLS]', 'for', 'a', 'volvo', 'model', ',', 'how', 'many', 'cylinders', 'does', 'the', 'version', 'with', 'least', 'accelerate', 'have', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused49]', 'volvo', '[unused51]', 'full', 'name', '[unused49]', 'volvo', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused49]', 'volvo', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused49]', 'volvo', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b"SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1"
Target TF-P tokens: from cars_data join car_names on cars_data.Id = car_names.MakeId where car_names.Model = "volvo" select cars_data.Cylinders order by cars_data.Accelerate asc limit 1

[WRONG] [extra] Pred 0:	b'SELECT cars_data.Cylinders FROM cars_data WHERE cars_data.Accelerate = (SELECT MIN(cars_data.Accelerate) FROM cars_data)' (-1.519) (length=17)
[WRONG] [extra] Pred 1:	b'SELECT SUM(cars_data.Cylinders) FROM cars_data WHERE cars_data.Accelerate = (SELECT MIN(cars_data.Accelerate) FROM cars_data)' (-2.314) (length=20)
[WRONG] [extra] Pred 2:	b'SELECT cars_data.Cylinders FROM cars_data WHERE cars_data.Accelerate = (SELECT MIN(cars_data.Accelerate) FROM cars_data) ORDER BY cars_data.Cylinders LIMIT 1' (-2.355) (length=21)
[WRONG] [extra] Pred 3:	b'SELECT cars_data.Cylinders FROM cars_data WHERE cars_data.Accelerate = (SELECT MIN(cars_data.Accelerate) FROM cars_data) ORDER BY cars_data.Accelerate LIMIT 1' (-2.561) (length=21)
[WRONG] [extra] Pred 4:	b'SELECT cars_data.Cylinders FROM cars_data WHERE cars_data.Accelerate = (SELECT MIN(cars_data.Accelerate) FROM cars_data JOIN car_makers ON cars_data.Id = car_makers.Id WHERE car_makers.FullName = "volvo")' (-2.930) (length=29)
Error Case 65

Parsing error: from cars_data where cars_data.Accelerate > (from cars_data select max (cars_data.Accelerate)) order by count (*) desc limit 1
 15%|█▌        | 20/130 [03:51<31:48, 17.35s/it]Parsing error: from cars_data where cars_data.Accelerate > (from cars_data select max (cars_data.Accelerate)) select count (*) : cars_data.Horsepower desc limit 1
Parsing error: from cars_data where cars_data.Accelerate > (from cars_data select max max cars_data.Accelerate)) select count (*)
Parsing error: from cars_data where cars_data.Accelerate > (from cars_data select desc (cars_data.Accelerate)) select count (*)
Parsing error: from cars_data having where cars_data.Accelerate > (from cars_data select max (cars_data.Accelerate)) select count (*)
Parsing error: from cars_data where cars_data.Accelerate > (from cars_data select max (cars_data.Accelerate)) select count (*) : cars_data.Horsepower
Example 159
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'How many cars have a larger accelerate than the car with the largest horsepower?'
NL tokens: [b'how', b'many', b'cars', b'have', b'a', b'larger', b'accelerate', b'than', b'the', b'car', b'with', b'the', b'largest', b'horsepower', b'?']
NL tokens (original): [b'How', b'many', b'cars', b'have', b'a', b'larger', b'accelerate', b'than', b'the', b'car', b'with', b'the', b'largest', b'horsepower', b'?']
['[CLS]', 'how', 'many', 'cars', 'have', 'a', 'larger', 'accelerate', 'than', 'the', 'car', 'with', 'the', 'largest', 'horsepower', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 )'
Target TF-P tokens: from cars_data where cars_data.Accelerate > (from cars_data select cars_data.Accelerate order by cars_data.Horsepower desc limit 1) select count (*)

[WRONG] [hard] Pred 0:	b'SELECT COUNT(*) FROM cars_data WHERE cars_data.Accelerate > (SELECT MAX(cars_data.Accelerate) FROM cars_data)' (-0.000) (length=20)
[WRONG] [hard] Pred 1:	b'SELECT COUNT(*) FROM cars_data WHERE cars_data.Accelerate > (SELECT MAX(cars_data.Accelerate) FROM cars_data) AND cars_data.Horsepower = (SELECT MAX(cars_data.Accelerate) FROM cars_data)' (-2.745) (length=32)
[WRONG] [hard] Pred 2:	b'SELECT COUNT(*) FROM cars_data JOIN cars_data ON cars_data.Id = cars_data.Id WHERE cars_data.Accelerate > (SELECT MAX(cars_data.Accelerate) FROM cars_data)' (-2.765) (length=26)
[WRONG] [hard] Pred 3:	b'SELECT COUNT(*) FROM cars_data WHERE cars_data.Accelerate > (SELECT MAX(cars_data.Accelerate) FROM cars_data) AND cars_data.Horsepower = (SELECT MAX(cars_data.Horsepower) FROM cars_data)' (-2.843) (length=32)
[WRONG] [hard] Pred 4:	b'SELECT COUNT(*) FROM cars_data WHERE cars_data.Accelerate > (SELECT MAX(cars_data.Horsepower) FROM cars_data)' (-3.021) (length=20)
[WRONG] [hard] Pred 5:	b'SELECT COUNT(*) FROM cars_data WHERE cars_data.Accelerate > (SELECT MAX(cars_data.Accelerate) FROM cars_data) ORDER BY cars_data.Accelerate DESC LIMIT 1' (-3.205) (length=25)
[WRONG] [hard] Pred 6:	b'SELECT COUNT(*), cars_data.Horsepower FROM cars_data WHERE cars_data.Accelerate > (SELECT MAX(cars_data.Accelerate) FROM cars_data)' (-3.432) (length=22)
[WRONG] [hard] Pred 7:	b'SELECT COUNT(*) FROM cars_data WHERE cars_data.Accelerate > (SELECT MAX(cars_data.Accelerate) FROM cars_data) LIMIT 1' (-3.672) (length=22)
[WRONG] [hard] Pred 8:	b'SELECT COUNT(*) FROM cars_data WHERE cars_data.Accelerate > (SELECT MIN(cars_data.Accelerate) FROM cars_data)' (-3.735) (length=20)
[WRONG] [hard] Pred 9:	b'SELECT COUNT(*) FROM cars_data WHERE cars_data.Accelerate < (SELECT MAX(cars_data.Accelerate) FROM cars_data)' (-3.954) (length=20)
Error Case 66

Parsing error: from cars_data where cars_data.Accelerate > (from cars_data on cars_data.Id = cars_data.Id where cars_data.Horsepower = (from cars_data select max (cars_data.Horsepower)) select cars_data.Id) select count (*)
Parsing error: from cars_data where cars_data.Accelerate > (from cars_data on cars_data.Id = cars_data.Id where cars_data.Horsepower = (from cars_data select max (cars_data.Accelerate)) select cars_data.Id) select count (*)
Parsing error: from cars_data where cars_data.Accelerate > (from cars_data select max max cars_data.Accelerate)) select count (*)
Parsing error: from cars_data where cars_data.Accelerate > (from cars_data select max (cars_data.Accelerate)) select count (*) desc limit 1
Parsing error: from cars_data where cars_data.Accelerate > (from cars_data select desc (cars_data.Accelerate)) select count (*)
Parsing error: from cars_data having where cars_data.Accelerate > (from cars_data select max (cars_data.Accelerate)) select count (*)
Parsing error: from cars_data where cars_data.Accelerate > (from cars_data select order by max (cars_data.Accelerate)) select count (*)
Example 160
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What is the number of cars with a greater accelerate than the one with the most horsepower?'
NL tokens: [b'what', b'is', b'the', b'number', b'of', b'cars', b'with', b'a', b'greater', b'accelerate', b'than', b'the', b'one', b'with', b'the', b'most', b'horsepower', b'?']
NL tokens (original): [b'What', b'is', b'the', b'number', b'of', b'cars', b'with', b'a', b'greater', b'accelerate', b'than', b'the', b'one', b'with', b'the', b'most', b'horsepower', b'?']
['[CLS]', 'what', 'is', 'the', 'number', 'of', 'cars', 'with', 'a', 'greater', 'accelerate', 'than', 'the', 'one', 'with', 'the', 'most', 'horsepower', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 )'
Target TF-P tokens: from cars_data where cars_data.Accelerate > (from cars_data select cars_data.Accelerate order by cars_data.Horsepower desc limit 1) select count (*)

[WRONG] [hard] Pred 0:	b'SELECT COUNT(*) FROM cars_data WHERE cars_data.Accelerate > (SELECT MAX(cars_data.Accelerate) FROM cars_data)' (-0.000) (length=20)
[WRONG] [hard] Pred 1:	b'SELECT COUNT(*) FROM cars_data WHERE cars_data.Accelerate > (SELECT MAX(cars_data.Accelerate) FROM cars_data) AND cars_data.Horsepower = (SELECT MAX(cars_data.Accelerate) FROM cars_data)' (-2.590) (length=32)
[WRONG] [hard] Pred 2:	b'SELECT COUNT(*) FROM cars_data JOIN cars_data ON cars_data.Id = cars_data.Id WHERE cars_data.Accelerate > (SELECT MAX(cars_data.Accelerate) FROM cars_data)' (-2.737) (length=26)
[WRONG] [hard] Pred 3:	b'SELECT COUNT(*) FROM cars_data WHERE cars_data.Accelerate > (SELECT MAX(cars_data.Accelerate) FROM cars_data) AND cars_data.Horsepower = (SELECT MAX(cars_data.Horsepower) FROM cars_data)' (-2.892) (length=32)
[WRONG] [hard] Pred 4:	b'SELECT COUNT(*), cars_data.Horsepower FROM cars_data WHERE cars_data.Accelerate > (SELECT MAX(cars_data.Accelerate) FROM cars_data)' (-3.331) (length=22)
[WRONG] [hard] Pred 5:	b'SELECT COUNT(*) FROM cars_data WHERE cars_data.Accelerate > (SELECT MAX(cars_data.Accelerate) FROM cars_data) ORDER BY cars_data.Accelerate DESC LIMIT 1' (-3.376) (length=25)
[WRONG] [hard] Pred 6:	b'SELECT COUNT(*) FROM cars_data WHERE cars_data.Accelerate > (SELECT MAX(cars_data.Accelerate) FROM cars_data GROUP BY cars_data.Id)' (-3.693) (length=22)
[WRONG] [hard] Pred 7:	b'SELECT COUNT(*) FROM cars_data WHERE cars_data.Accelerate > (SELECT MAX(cars_data.Horsepower) FROM cars_data)' (-3.735) (length=20)
[WRONG] [hard] Pred 8:	b'SELECT COUNT(*) FROM cars_data WHERE cars_data.Accelerate > (SELECT MIN(cars_data.Accelerate) FROM cars_data)' (-3.915) (length=20)
Error Case 67

Parsing error: from (from car_makers join countries on car_makers.Country = countries.CountryId group by countries.CountryId having count (*) > 2 select countries.CountryName
unhashable type: 'dict'
unhashable type: 'dict'
Parsing error: from (from car_makers join car_makers on car_makers.Id = car_makers.Id join countries on car_makers.Country = countries.CountryId group by countries.CountryId having count (*) > 2 select countries.CountryName
ERROR: Join condition does not match with table: ['countries', {'join': 'car_makers', 'on': {'eq': ['countries.Continent', 'countries.CountryId']}}]
unhashable type: 'dict'
Example 161
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'How many countries has more than 2 car makers ?'
NL tokens: [b'how', b'many', b'countries', b'has', b'more', b'than', b'2', b'car', b'makers', b'?']
NL tokens (original): [b'How', b'many', b'countries', b'has', b'more', b'than', b'2', b'car', b'makers', b'?']
['[CLS]', 'how', 'many', 'countries', 'has', 'more', 'than', '2', 'car', 'makers', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2'
Target TF-P tokens: from countries join car_makers on countries.CountryId = car_makers.Country group by countries.CountryId having count (*) > 2 select count (*)

[WRONG] [medium] Pred 0:	b'SELECT COUNT(*) FROM (SELECT countries.CountryName FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.CountryId HAVING COUNT(*) > 2)' (-0.387) (length=28)
[WRONG] [medium] Pred 1:	b'SELECT COUNT(*) FROM (SELECT car_makers.Country FROM car_makers GROUP BY car_makers.Country HAVING COUNT(*) > 2)' (-0.573) (length=22)
[WRONG] [medium] Pred 2:	b'SELECT COUNT(*) FROM (SELECT countries.CountryId FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.CountryId HAVING COUNT(*) > 2)' (-1.111) (length=28)
[WRONG] [medium] Pred 3:	b'SELECT COUNT(*) FROM (SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) > 2)' (-1.228) (length=28)
[WRONG] [medium] Pred 4:	b'SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) > 2' (-1.580) (length=20)
[WRONG] [medium] Pred 5:	b'SELECT COUNT(*) FROM (SELECT countries.CountryName FROM car_makers JOIN car_makers ON car_makers.Id = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.CountryId HAVING COUNT(*) > 2)' (-1.628) (length=34)
[WRONG] [medium] Pred 6:	b'SELECT COUNT(*) FROM (SELECT countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) > 2)' (-1.674) (length=28)
[WRONG] [medium] Pred 7:	b'SELECT COUNT(*) FROM (SELECT car_makers.Country FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.CountryId HAVING COUNT(*) > 2)' (-2.228) (length=28)
[WRONG] [medium] Pred 8:	b'SELECT countries.CountryName, COUNT(*) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) > 2' (-2.417) (length=25)
[WRONG] [medium] Pred 9:	b'SELECT countries.CountryName FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY countries.CountryId HAVING COUNT(*) > 2' (-2.480) (length=20)
Error Case 68

ERROR: Join condition does not match with table: ['countries', {'join': 'car_makers', 'on': {'eq': ['countries.CountryId', 'countries.Continent']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'car_makers', 'on': {'eq': ['countries.CountryId', 'countries.Continent']}}]
unhashable type: 'dict'
ERROR: Join condition does not match with table: ['car_makers', {'join': 'countries', 'on': {'eq': ['countries.Continent', 'countries.CountryId']}}]
unhashable type: 'dict'
Parsing error: from (from car_makers (car_makers.Country) > 2 select car_makers.Country) select count (*)
Parsing error: from (from car_makers group by car_makers.Country having count (*) > 2 select car_makers.Country select count (*)
ERROR: table "countries" in field expression countries.CountryId is not in the current scope
Example 162
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What is the number of countries with more than 2 car makers ?'
NL tokens: [b'what', b'is', b'the', b'number', b'of', b'countries', b'with', b'more', b'than', b'2', b'car', b'makers', b'?']
NL tokens (original): [b'What', b'is', b'the', b'number', b'of', b'countries', b'with', b'more', b'than', b'2', b'car', b'makers', b'?']
['[CLS]', 'what', 'is', 'the', 'number', 'of', 'countries', 'with', 'more', 'than', '2', 'car', 'makers', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2'
Target TF-P tokens: from countries join car_makers on countries.CountryId = car_makers.Country group by countries.CountryId having count (*) > 2 select count (*)

[WRONG] [medium] Pred 0:	b'SELECT COUNT(*) FROM (SELECT car_makers.Country FROM car_makers GROUP BY car_makers.Country HAVING COUNT(*) > 2)' (-0.396) (length=22)
[WRONG] [medium] Pred 1:	b'SELECT COUNT(*) FROM (SELECT countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) > 2)' (-1.049) (length=28)
[WRONG] [medium] Pred 2:	b'SELECT COUNT(*) FROM (SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) > 2)' (-1.526) (length=28)
[WRONG] [medium] Pred 3:	b'SELECT COUNT(*) FROM (SELECT countries.CountryId FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.CountryId HAVING COUNT(*) > 2)' (-1.561) (length=28)
[WRONG] [medium] Pred 4:	b'SELECT COUNT(*) FROM (SELECT countries.CountryName FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.CountryId HAVING COUNT(*) > 2)' (-1.873) (length=28)
[WRONG] [medium] Pred 5:	b'SELECT COUNT(*) FROM (SELECT countries.Continent FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) > 2)' (-2.689) (length=28)
[WRONG] [medium] Pred 6:	b'SELECT COUNT(*) FROM (SELECT car_makers.Country FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) > 2)' (-2.763) (length=28)
[WRONG] [medium] Pred 7:	b'SELECT COUNT(*) FROM (SELECT car_makers.Country FROM car_makers GROUP BY car_makers.Country HAVING COUNT(*) >= 2)' (-3.060) (length=22)
Error Case 69

Parsing error: from cars_data where cars_data.Cylinders = 4 order by cars_data.Horsepower desc limit 1
Parsing error: from cars_data where cars_data.Cylinders = 4 select ? order by cars_data.Horsepower desc limit 1
Example 165
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'For the cars with 4 cylinders, which model has the largest horsepower?'
NL tokens: [b'for', b'the', b'cars', b'with', b'4', b'cylinders', b',', b'which', b'model', b'has', b'the', b'largest', b'horsepower', b'?']
NL tokens (original): [b'For', b'the', b'cars', b'with', b'4', b'cylinders', b',', b'which', b'model', b'has', b'the', b'largest', b'horsepower', b'?']
['[CLS]', 'for', 'the', 'cars', 'with', '4', 'cylinders', ',', 'which', 'model', 'has', 'the', 'largest', 'horsepower', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1'
Target TF-P tokens: from car_names join cars_data on car_names.MakeId = cars_data.Id where cars_data.Cylinders = 4 select car_names.Model order by cars_data.Horsepower desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1' (-0.683) (length=14)
[WRONG] [extra] Pred 1:	b'SELECT cars_data.Id FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1' (-3.178) (length=14)
[WRONG] [extra] Pred 2:	b'SELECT cars_data.Accelerate FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1' (-3.333) (length=14)
[WRONG] [extra] Pred 3:	b'SELECT * FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1' (-3.452) (length=14)
[WRONG] [extra] Pred 4:	b'SELECT "the" FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1' (-3.783) (length=14)
[WRONG] [extra] Pred 5:	b'SELECT cars_data.Cylinders FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1' (-3.812) (length=14)
[WRONG] [extra] Pred 6:	b'SELECT "largest" FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1' (-3.834) (length=14)
[WRONG] [extra] Pred 7:	b'SELECT MAX(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 4' (-3.892) (length=12)
[WRONG] [extra] Pred 8:	b'SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1' (-3.970) (length=14)
[WRONG] [extra] Pred 9:	b'SELECT cars_data.Year FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1' (-4.087) (length=14)
[WRONG] [extra] Pred 10:	b'SELECT "has" FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1' (-4.192) (length=14)
[WRONG] [extra] Pred 11:	b'SELECT cars_data.Id FROM cars_data WHERE cars_data.Cylinders = 4 AND cars_data.Horsepower = (SELECT MAX(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 4)' (-4.243) (length=25)
[WRONG] [extra] Pred 12:	b'SELECT horsepower FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1' (-4.279) (length=14)
[WRONG] [extra] Pred 13:	b'SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders = 4 AND cars_data.Horsepower = (SELECT MAX(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 4)' (-4.296) (length=25)
Error Case 70

Example 166
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'For all of the 4 cylinder cars, which model has the most horsepower?'
NL tokens: [b'for', b'all', b'of', b'the', b'4', b'cylinder', b'cars', b',', b'which', b'model', b'has', b'the', b'most', b'horsepower', b'?']
NL tokens (original): [b'For', b'all', b'of', b'the', b'4', b'cylinder', b'cars', b',', b'which', b'model', b'has', b'the', b'most', b'horsepower', b'?']
['[CLS]', 'for', 'all', 'of', 'the', '4', 'cylinder', 'cars', ',', 'which', 'model', 'has', 'the', 'most', 'horsepower', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1'
Target TF-P tokens: from car_names join cars_data on car_names.MakeId = cars_data.Id where cars_data.Cylinders = 4 select car_names.Model order by cars_data.Horsepower desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1' (-0.143) (length=14)
[WRONG] [extra] Pred 1:	b'SELECT * FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1' (-1.591) (length=14)
[WRONG] [extra] Pred 2:	b'SELECT cars_data.Cylinders FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1' (-1.719) (length=14)
[WRONG] [extra] Pred 3:	b'SELECT cars_data.Id FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1' (-1.990) (length=14)
[WRONG] [extra] Pred 4:	b'SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT "most"' (-2.133) (length=14)
[WRONG] [extra] Pred 5:	b'SELECT cars_data.Accelerate FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1' (-2.318) (length=14)
[WRONG] [extra] Pred 6:	b'SELECT "the" FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1' (-2.334) (length=14)
[WRONG] [extra] Pred 7:	b'SELECT cars_data.Weight FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1' (-2.483) (length=14)
[WRONG] [extra] Pred 8:	b'SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT "the"' (-2.508) (length=14)
[WRONG] [extra] Pred 9:	b'SELECT "most" FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1' (-2.607) (length=14)
[WRONG] [extra] Pred 10:	b'SELECT "has" FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1' (-2.667) (length=14)
[WRONG] [extra] Pred 11:	b'SELECT cars_data.Year FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1' (-2.681) (length=14)
[WRONG] [extra] Pred 12:	b'SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 3' (-2.682) (length=14)
[WRONG] [extra] Pred 13:	b'SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 4' (-2.829) (length=14)
[WRONG] [extra] Pred 14:	b'SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Horsepower = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1' (-2.855) (length=14)
[WRONG] [extra] Pred 15:	b'SELECT "which" FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1' (-2.856) (length=14)
Error Case 71

ERROR: Join condition does not match with table: ['car_names', {'join': 'car_makers', 'on': {'eq': ['car_names.Model', 'car_makers.Id']}}, {'join': 'cars_data', 'on': {'eq': ['car_names.Model', 'car_makers.Id']}}]
ERROR: Join condition does not match with table: ['car_names', {'join': 'car_makers', 'on': {'eq': ['car_names.Model', 'car_makers.Id']}}, {'join': 'cars_data', 'on': {'eq': ['car_names.Model', 'car_makers.Id']}}]
ERROR: Join condition does not match with table: ['car_names', {'join': 'car_makers', 'on': {'eq': ['car_names.Model', 'car_makers.Id']}}, {'join': 'cars_data', 'on': {'eq': ['car_names.Model', 'car_makers.Id']}}]
Example 167
 16%|█▌        | 21/130 [04:07<30:53, 17.01s/it]car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.'
NL tokens: [b'among', b'the', b'cars', b'with', b'more', b'than', b'lowest', b'horsepower', b',', b'which', b'ones', b'do', b'not', b'have', b'more', b'than', b'3', b'cylinders', b'?', b'list', b'the', b'car', b'make', b'##id', b'and', b'make', b'name', b'.']
NL tokens (original): [b'Among', b'the', b'cars', b'with', b'more', b'than', b'lowest', b'horsepower', b',', b'which', b'ones', b'do', b'not', b'have', b'more', b'than', b'3', b'cylinders', b'?', b'List', b'the', b'car', b'make', b'##id', b'and', b'make', b'name', b'.']
['[CLS]', 'among', 'the', 'cars', 'with', 'more', 'than', 'lowest', 'horsepower', ',', 'which', 'ones', 'do', 'not', 'have', 'more', 'than', '3', 'cylinders', '?', 'list', 'the', 'car', 'make', '##id', 'and', 'make', 'name', '.', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3'
Target TF-P tokens: from cars_data join car_names on cars_data.Id = car_names.MakeId where cars_data.Horsepower > (from cars_data select min (cars_data.Horsepower)) and cars_data.Cylinders <= 3 select car_names.MakeId , car_names.Make

[WRONG] [extra] Pred 0:	b'SELECT car_makers.Maker, car_names.Make FROM car_names JOIN car_makers ON car_names.Model = car_makers.Id JOIN cars_data ON car_makers.Id = cars_data.Id WHERE cars_data.Horsepower > 3' (-3.368) (length=23)
[WRONG] [extra] Pred 1:	b'SELECT car_makers.Maker, car_names.Make FROM car_names JOIN car_makers ON car_names.Model = car_makers.Id JOIN cars_data ON car_names.Model = cars_data.Id WHERE cars_data.Horsepower > 3' (-3.728) (length=23)
[WRONG] [extra] Pred 2:	b'SELECT car_makers.Maker, car_names.Make FROM car_names JOIN car_makers ON car_names.Model = car_makers.Id JOIN cars_data ON car_makers.Id = cars_data.Id WHERE cars_data.Cylinders > 3' (-3.949) (length=23)
[WRONG] [extra] Pred 3:	b'SELECT car_makers.Maker, car_names.Make FROM car_names JOIN car_makers ON car_names.Model = car_makers.Id JOIN cars_data ON car_names.Model = cars_data.Id WHERE cars_data.Cylinders > 3' (-4.122) (length=23)
[WRONG] [extra] Pred 4:	b'SELECT car_makers.Maker, car_names.Make FROM car_names JOIN car_makers ON car_names.Model = car_makers.Id JOIN cars_data ON car_makers.Id = cars_data.Id WHERE cars_data.Horsepower > 3 AND cars_data.Cylinders > 3' (-4.332) (length=27)
[WRONG] [extra] Pred 5:	b'SELECT car_makers.Maker, car_names.Make FROM car_names JOIN car_makers ON car_names.Model = car_makers.Id JOIN cars_data ON car_names.Model = cars_data.Id WHERE cars_data.Horsepower > 3 AND cars_data.Cylinders > 3' (-4.649) (length=27)
[WRONG] [extra] Pred 6:	b'SELECT car_makers.Maker, car_names.Make FROM car_names JOIN car_makers ON car_names.Model = car_makers.Id JOIN cars_data ON car_makers.Id = cars_data.Accelerate WHERE cars_data.Horsepower > 3' (-4.686) (length=23)
[WRONG] [extra] Pred 7:	b'SELECT car_makers.Maker, car_names.Make FROM car_names JOIN car_makers ON car_names.Model = car_makers.Id JOIN cars_data ON car_makers.Id = cars_data.Id WHERE cars_data.Horsepower > 3 AND cars_data.Cylinders < 3' (-4.738) (length=27)
[WRONG] [extra] Pred 8:	b'SELECT car_makers.Maker, car_names.Make FROM car_names JOIN car_makers ON car_names.Model = car_makers.Id JOIN cars_data ON car_makers.Id = cars_data.Id WHERE cars_data.Cylinders > 3 AND cars_data.Cylinders > 3' (-4.839) (length=27)
[WRONG] [extra] Pred 9:	b'SELECT car_makers.Maker, car_names.Make FROM car_names JOIN car_makers ON car_names.Model = car_makers.Id JOIN cars_data ON car_names.Model = cars_data.Id WHERE cars_data.Cylinders > 3 AND cars_data.Cylinders > 3' (-4.996) (length=27)
[WRONG] [extra] Pred 10:	b'SELECT car_makers.Maker, car_names.Make FROM car_names JOIN car_makers ON car_names.Model = car_makers.Id JOIN cars_data ON car_makers.Id = cars_data.Id WHERE cars_data.Horsepower > 3 GROUP BY car_names.MakeId' (-5.027) (length=25)
[WRONG] [extra] Pred 11:	b'SELECT car_makers.Maker, car_names.Make FROM car_names JOIN car_makers ON car_names.Model = car_makers.Id JOIN cars_data ON car_names.Model = cars_data.Id WHERE cars_data.Horsepower > 3 GROUP BY car_names.MakeId' (-5.407) (length=25)
[WRONG] [extra] Pred 12:	b'SELECT car_makers.Maker, car_names.Make FROM car_names JOIN car_makers ON car_names.Model = car_makers.Id JOIN cars_data ON car_makers.Id = cars_data.Id WHERE cars_data.Horsepower > 3 ORDER BY cars_data.Horsepower' (-5.490) (length=25)
Error Case 72

Parsing error: from car_names join car_makers on car_names.MakeId = car_makers.Id no < 4 select car_names.Make , car_makers.FullName except from cars_data join car_makers on car_names.Model = car_makers.Id where cars_data.Horsepower < 4 select car_names.Make , car_makers.FullName
ERROR: Join condition does not match with table: ['cars_data', {'join': 'car_makers', 'on': {'eq': ['car_names.Model', 'car_makers.Id']}}]
Parsing error: from car_names join car_makers on car_names.MakeId = car_makers.Id no < 4 select car_names.Make , car_makers.FullName except from cars_data join car_makers on cars_data.Id = car_makers.Id where cars_data.Horsepower < 4 select car_names.Make , car_makers.FullName
ERROR: Join condition does not match with table: ['cars_data', {'join': 'car_makers', 'on': {'eq': ['car_names.Model', 'car_makers.Id']}}]
ERROR: Join condition does not match with table: ['car_names', {'join': 'car_makers', 'on': {'eq': ['car_names.MakeId', 'car_names.MakeId']}}]
ERROR: Join condition does not match with table: ['cars_data', {'join': 'car_makers', 'on': {'eq': ['car_names.MakeId', 'car_makers.Id']}}]
Parsing error: from car_names join car_makers on car_names.MakeId = car_makers.Id no < 4 select car_names.Make , car_makers.FullName except from cars_data join car_makers on car_names.Model = car_makers.Id where cars_data.Horsepower < 4 select car_names.MakeId , car_makers.FullName
ERROR: table "car_names" in field expression car_names.Make is not in the current scope
ERROR: Join condition does not match with table: ['cars_data', {'join': 'car_makers', 'on': {'eq': ['car_names.MakeId', 'cars_data.Id']}}]
Parsing error: from car_names join car_makers on car_names.MakeId = car_makers.Id no < 4 select car_names.Make , car_makers.FullName except from cars_data join car_makers on car_names.Model = car_makers.Id where cars_data.Cylinders < 4 select car_names.Make , car_makers.FullName
ERROR: Join condition does not match with table: ['cars_data', {'join': 'car_makers', 'on': {'eq': ['car_names.Model', 'car_makers.Id']}}]
ERROR: Join condition does not match with table: ['car_names', {'join': 'car_makers', 'on': {'eq': ['car_names.MakeId', 'car_names.MakeId']}}]
ERROR: Join condition does not match with table: ['cars_data', {'join': 'car_makers', 'on': {'eq': ['car_names.Model', 'car_makers.Id']}}]
ERROR: table "car_names" in field expression car_names.Make is not in the current scope
ERROR: table "car_names" in field expression car_names.MakeId is not in the current scope
ERROR: Join condition does not match with table: ['car_names', {'join': 'car_makers', 'on': {'eq': ['car_names.MakeId', 'car_names.MakeId']}}]
Example 168
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?'
NL tokens: [b'among', b'the', b'cars', b'that', b'do', b'not', b'have', b'the', b'minimum', b'horsepower', b',', b'what', b'are', b'the', b'make', b'id', b'##s', b'and', b'names', b'of', b'all', b'those', b'with', b'less', b'than', b'4', b'cylinders', b'?']
NL tokens (original): [b'Among', b'the', b'cars', b'that', b'do', b'not', b'have', b'the', b'minimum', b'horsepower', b',', b'what', b'are', b'the', b'make', b'id', b'##s', b'and', b'names', b'of', b'all', b'those', b'with', b'less', b'than', b'4', b'cylinders', b'?']
['[CLS]', 'among', 'the', 'cars', 'that', 'do', 'not', 'have', 'the', 'minimum', 'horsepower', ',', 'what', 'are', 'the', 'make', 'id', '##s', 'and', 'names', 'of', 'all', 'those', 'with', 'less', 'than', '4', 'cylinders', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4'
Target TF-P tokens: from cars_data join car_names on cars_data.Id = car_names.MakeId where cars_data.Horsepower > (from cars_data select min (cars_data.Horsepower)) and cars_data.Cylinders < 4 select car_names.MakeId , car_names.Make

[WRONG] extra Pred 0:	No valid output! (0.000)
Error Case 73

Parsing error: from cars_data where cars_data.Cylinders = 8 select max or cars_data.Year) > 1980 select max (cars_data.Horsepower)
Example 169
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?'
NL tokens: [b'what', b'is', b'the', b'maximum', b'miles', b'per', b'gallon', b'of', b'the', b'car', b'with', b'8', b'cylinders', b'or', b'produced', b'before', b'1980', b'?']
NL tokens (original): [b'What', b'is', b'the', b'maximum', b'miles', b'per', b'gallon', b'of', b'the', b'car', b'with', b'8', b'cylinders', b'or', b'produced', b'before', b'1980', b'?']
['[CLS]', 'what', 'is', 'the', 'maximum', 'miles', 'per', 'gallon', 'of', 'the', 'car', 'with', '8', 'cylinders', 'or', 'produced', 'before', '1980', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'select max(mpg) from cars_data where cylinders  =  8 or year  <  1980'
Target TF-P tokens: from cars_data where cars_data.Cylinders = 8 or cars_data.Year < 1980 select max (cars_data.MPG)

[WRONG] [medium] Pred 0:	b'SELECT MAX(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 8 OR cars_data.Year < 1980' (-0.000) (length=16)
[WRONG] [medium] Pred 1:	b'SELECT MAX(cars_data.Weight) FROM cars_data WHERE cars_data.Cylinders = 8 OR cars_data.Year < 1980' (-1.810) (length=16)
[WRONG] [medium] Pred 2:	b'SELECT MAX(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Year < 1980' (-2.606) (length=16)
[WRONG] [medium] Pred 3:	b'SELECT MAX(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders >= 8 OR cars_data.Year < 1980' (-2.734) (length=16)
[WRONG] [medium] Pred 4:	b'SELECT MAX(cars_data.Horsepower) FROM cars_data JOIN cars_data ON cars_data.Id = cars_data.Id WHERE cars_data.Cylinders = 8 OR cars_data.Year < 1980' (-2.887) (length=22)
[WRONG] [medium] Pred 5:	b'SELECT MAX(cars_data.Edispl) FROM cars_data WHERE cars_data.Cylinders = 8 OR cars_data.Year < 1980' (-3.367) (length=16)
[WRONG] [medium] Pred 6:	b'SELECT MAX(cars_data.Horsepower), cars_data.Id FROM cars_data WHERE cars_data.Cylinders = 8 OR cars_data.Year < 1980' (-3.583) (length=18)
[WRONG] [medium] Pred 7:	b'SELECT MAX(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 8' (-3.640) (length=12)
[WRONG] [medium] Pred 8:	b'SELECT MAX(cars_data.Accelerate) FROM cars_data WHERE cars_data.Cylinders = 8 OR cars_data.Year < 1980' (-3.649) (length=16)
[WRONG] [medium] Pred 9:	b'SELECT MAX(*) FROM cars_data WHERE cars_data.Cylinders = 8 OR cars_data.Year < 1980' (-3.705) (length=16)
[WRONG] [medium] Pred 10:	b'SELECT MAX(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 8 OR cars_data.Cylinders < 1980' (-3.713) (length=16)
[WRONG] [medium] Pred 11:	b'SELECT MAX(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 8 OR cars_data.Year <= 1980' (-3.949) (length=16)
[WRONG] [medium] Pred 12:	b'SELECT MAX(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 8 OR cars_data.Year < 1980' (-4.092) (length=16)
[WRONG] [medium] Pred 13:	b'SELECT MAX(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders > 8 OR cars_data.Year < 1980' (-4.148) (length=16)
[WRONG] [medium] Pred 14:	b'SELECT MAX(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = MOD(8, cars_data.Year) < 1980' (-4.226) (length=16)
Error Case 74

ERROR: table "model_list" in field expression model_list.Model is not in the current scope
ERROR: table "car_makers" in field expression car_makers.FullName is not in the current scope
ERROR: table "car_makers" in field expression car_makers.Maker is not in the current scope
Parsing error: from model_list where model_list.Model in (from model_list join car_makers on model_list.Maker = car_makers.Id where car_makers.FullName = "Ford Motor Company" select model_list.Model) select model_list.Model except from model_list join car_makers on model_list.Maker = car_makers.Id where car_makers.FullName = "Ford Motor Company" select model_list.Model) select model_list.Model
Example 171
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b"Which models are lighter than 3500 but not built by the 'Ford Motor Company'?"
NL tokens: [b'which', b'models', b'are', b'lighter', b'than', b'350', b'##0', b'but', b'not', b'built', b'by', b'the', b"'", b'ford', b'motor', b'company', b"'", b'?']
NL tokens (original): [b'Which', b'models', b'are', b'lighter', b'than', b'350', b'##0', b'but', b'not', b'built', b'by', b'the', b"'", b'Ford', b'Motor', b'Company', b"'", b'?']
['[CLS]', 'which', 'models', 'are', 'lighter', 'than', '350', '##0', 'but', 'not', 'built', 'by', 'the', "'", 'ford', 'motor', 'company', "'", '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused49]', 'ford', '[unused51]', 'full', 'name', '[unused49]', 'ford', 'motor', 'company', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused49]', 'ford', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused49]', 'ford', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b"SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"
Target TF-P tokens: from model_list join car_names on model_list.Model = car_names.Model join cars_data on car_names.MakeId = cars_data.Id join car_makers on model_list.Maker = car_makers.Id where cars_data.Weight < 3500 and car_makers.FullName != "Ford Motor Company" select distinct model_list.Model

[WRONG] [extra] Pred 0:	b'SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Model = car_makers.Id WHERE car_makers.FullName = "Ford Motor Company" EXCEPT SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = "Ford Motor Company"' (-0.448) (length=38)
[WRONG] [extra] Pred 1:	b'SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Model = car_makers.Id WHERE car_makers.Maker = "Ford Motor Company" EXCEPT SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = "Ford Motor Company"' (-0.541) (length=38)
[WRONG] [extra] Pred 2:	b'SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Model = car_makers.Id WHERE car_makers.FullName != "Ford Motor Company" EXCEPT SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = "Ford Motor Company"' (-0.595) (length=38)
[WRONG] [extra] Pred 3:	b'SELECT model_list.Model FROM model_list WHERE model_list.Model IN (SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = "Ford Motor Company") EXCEPT SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = "Ford Motor Company"' (-0.606) (length=47)
[WRONG] [extra] Pred 4:	b'SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Model = car_makers.Id WHERE car_makers.FullName < "Ford Motor Company" EXCEPT SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = "Ford Motor Company"' (-0.650) (length=38)
[WRONG] [extra] Pred 5:	b'SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Model = car_makers.Id WHERE car_makers.Maker != "Ford Motor Company" EXCEPT SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = "Ford Motor Company"' (-0.716) (length=38)
[WRONG] [extra] Pred 6:	b'SELECT model_list.Model FROM model_list WHERE model_list.Model IN (SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = "Ford Motor Company" EXCEPT SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = "Ford Motor Company")' (-0.731) (length=47)
[WRONG] [extra] Pred 7:	b'SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Model = car_makers.Id WHERE car_makers.Maker < "Ford Motor Company" EXCEPT SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = "Ford Motor Company"' (-0.872) (length=38)
[WRONG] [extra] Pred 8:	b'SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Model = car_makers.Id WHERE car_makers.FullName = "Ford Motor Company" EXCEPT SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = "Ford Motor Company"' (-0.891) (length=38)
[WRONG] [extra] Pred 9:	b'SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Model = car_makers.Id WHERE car_makers.Maker = "Ford Motor Company" EXCEPT SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = "Ford Motor Company"' (-0.985) (length=38)
[WRONG] [extra] Pred 10:	b'SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Model = car_makers.Id WHERE car_makers.FullName = "Ford Motor Company" AND model_list.Model != "Ford Motor Company"' (-1.015) (length=27)
[WRONG] [extra] Pred 11:	b'SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Model = car_makers.Id WHERE car_makers.Maker = "Ford Motor Company" AND model_list.Model != "Ford Motor Company"' (-1.071) (length=27)
Error Case 75

ERROR: Join condition does not match with table: ['car_names', {'join': 'car_makers', 'on': {'eq': ['model_list.Maker', 'car_makers.Id']}}]
ERROR: Join condition does not match with table: ['car_names', {'join': 'car_makers', 'on': {'eq': ['model_list.Maker', 'car_makers.Id']}}]
ERROR: Join condition does not match with table: ['car_names', {'join': 'car_makers', 'on': {'eq': ['model_list.Maker', 'car_makers.Id']}}]
ERROR: Join condition does not match with table: ['car_names', {'join': 'car_makers', 'on': {'eq': ['model_list.Maker', 'car_makers.Id']}}]
ERROR: Join condition does not match with table: ['car_names', {'join': 'car_makers', 'on': {'eq': ['model_list.Maker', 'car_makers.Id']}}]
ERROR: Join condition does not match with table: ['car_names', {'join': 'car_makers', 'on': {'eq': ['model_list.Maker', 'car_makers.Id']}}]
ERROR: Join condition does not match with table: ['car_names', {'join': 'car_makers', 'on': {'eq': ['model_list.Maker', 'car_makers.Id']}}]
ERROR: Join condition does not match with table: ['car_names', {'join': 'car_makers', 'on': {'eq': ['model_list.Maker', 'car_makers.Id']}}]
ERROR: Join condition does not match with table: ['car_names', {'join': 'car_makers', 'on': {'eq': ['model_list.Maker', 'car_makers.Id']}}]
ERROR: Join condition does not match with table: ['car_names', {'join': 'car_makers', 'on': {'eq': ['model_list.Maker', 'car_makers.Id']}}]
ERROR: Join condition does not match with table: ['car_names', {'join': 'car_makers', 'on': {'eq': ['model_list.Maker', 'car_makers.Id']}}]
ERROR: Join condition does not match with table: ['car_names', {'join': 'car_makers', 'on': {'eq': ['model_list.Maker', 'car_makers.Id']}}]
ERROR: Join condition does not match with table: ['car_names', {'join': 'car_makers', 'on': {'eq': ['model_list.Maker', 'car_makers.Id']}}]
ERROR: Join condition does not match with table: ['car_names', {'join': 'car_makers', 'on': {'eq': ['model_list.Maker', 'car_makers.Id']}}]
ERROR: Join condition does not match with table: ['car_names', {'join': 'car_makers', 'on': {'eq': ['model_list.Maker', 'car_makers.Id']}}]
ERROR: Join condition does not match with table: ['car_names', {'join': 'car_makers', 'on': {'eq': ['model_list.Maker', 'car_makers.Id']}}]
Example 172
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?'
NL tokens: [b'what', b'are', b'the', b'different', b'models', b'w', b'##tha', b'##t', b'are', b'lighter', b'than', b'350', b'##0', b'but', b'were', b'not', b'built', b'by', b'the', b'ford', b'motor', b'company', b'?']
NL tokens (original): [b'What', b'are', b'the', b'different', b'models', b'w', b'##tha', b'##t', b'are', b'lighter', b'than', b'350', b'##0', b'but', b'were', b'not', b'built', b'by', b'the', b'Ford', b'Motor', b'Company', b'?']
['[CLS]', 'what', 'are', 'the', 'different', 'models', 'w', '##tha', '##t', 'are', 'lighter', 'than', '350', '##0', 'but', 'were', 'not', 'built', 'by', 'the', 'ford', 'motor', 'company', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused49]', 'ford', '[unused51]', 'full', 'name', '[unused49]', 'ford', 'motor', 'company', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused49]', 'ford', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused49]', 'ford', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b"SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'"
Target TF-P tokens: from model_list join car_names on model_list.Model = car_names.Model join cars_data on car_names.MakeId = cars_data.Id join car_makers on model_list.Maker = car_makers.Id where cars_data.Weight < 3500 and car_makers.FullName != "Ford Motor Company" select distinct model_list.Model

[WRONG] extra Pred 0:	No valid output! (0.000)
Error Case 76

Parsing error: from countries where countries.CountryId not in (from car_makers group by car_makers.Country having count (*)) select car_makers.Country) select countries.CountryName
Parsing error: from countries where countries.CountryId not in (from car_makers group by car_makers.Country having on car_makers.Id) select car_makers.Country) select countries.CountryName
Parsing error: from countries where countries.CountryId not in (from car_makers group by car_makers.Country having in (*) = 1 select car_makers.Country) select countries.CountryName
Parsing error: from countries where countries.CountryId not in (from car_makers group by car_makers.Country having on countries.Continent) select countries.CountryId) select countries.CountryName
Parsing error: from countries where countries.CountryId not in (from car_makers group by car_makers.Country having in (*) > 1 select car_makers.Country) select countries.CountryName
Parsing error: from countries where countries.CountryId not in (from car_makers group by car_makers.Country having count (*)) select countries.CountryName
Parsing error: from countries where countries.CountryId not in (from car_makers group by car_makers.Country having count (*)) select countries.CountryId) select countries.CountryName
Parsing error: from countries where countries.CountryId not in (from car_makers group by car_makers.Country having in (*)) select countries.CountryName
Parsing error: from countries where countries.CountryId not in (from car_makers group by car_makers.Country having in (*)) select car_makers.Country) select countries.CountryName
Parsing error: from countries where countries.CountryId not in (from car_makers group by car_makers.Country select car_makers.Country having (*) desc limit 1) select countries.CountryName
Parsing error: from countries where countries.CountryId not in (from car_makers group by car_makers.Country having on countries.CountryId) select countries.Continent) select countries.CountryName
Parsing error: from countries where countries.CountryId not in (from car_makers group by car_makers.Country having on countries.CountryId) select countries.CountryName
Parsing error: from countries where countries.CountryId not in (from car_makers group by car_makers.Country having on countries.Continent) select countries.CountryName
Example 173
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What are the name of the countries where there is not a single car maker?'
NL tokens: [b'what', b'are', b'the', b'name', b'of', b'the', b'countries', b'where', b'there', b'is', b'not', b'a', b'single', b'car', b'maker', b'?']
NL tokens (original): [b'What', b'are', b'the', b'name', b'of', b'the', b'countries', b'where', b'there', b'is', b'not', b'a', b'single', b'car', b'maker', b'?']
['[CLS]', 'what', 'are', 'the', 'name', 'of', 'the', 'countries', 'where', 'there', 'is', 'not', 'a', 'single', 'car', 'maker', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country'
Target TF-P tokens: from countries select countries.CountryName except from countries join car_makers on countries.CountryId = car_makers.Country select countries.CountryName

[WRONG] [hard] Pred 0:	b'SELECT countries.CountryName FROM countries WHERE countries.CountryId NOT IN (SELECT car_makers.Country FROM car_makers GROUP BY car_makers.Country HAVING COUNT(*) = 1)' (-0.123) (length=24)
[WRONG] [hard] Pred 1:	b'SELECT countries.CountryName FROM countries WHERE countries.CountryId NOT IN (SELECT car_makers.Country FROM car_makers GROUP BY car_makers.Country HAVING COUNT(*) > 1)' (-0.521) (length=24)
[WRONG] [hard] Pred 2:	b'SELECT countries.CountryName FROM countries WHERE countries.CountryId NOT IN (SELECT car_makers.Country FROM car_makers GROUP BY car_makers.Country)' (-0.597) (length=17)
Error Case 77

Example 174
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What are the names of the countries with no car makers?'
NL tokens: [b'what', b'are', b'the', b'names', b'of', b'the', b'countries', b'with', b'no', b'car', b'makers', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'of', b'the', b'countries', b'with', b'no', b'car', b'makers', b'?']
['[CLS]', 'what', 'are', 'the', 'names', 'of', 'the', 'countries', 'with', 'no', 'car', 'makers', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country'
Target TF-P tokens: from countries select countries.CountryName except from countries join car_makers on countries.CountryId = car_makers.Country select countries.CountryName

[WRONG] [hard] Pred 0:	b'SELECT countries.CountryName FROM countries WHERE countries.CountryId NOT IN (SELECT car_makers.Country FROM car_makers)' (-0.000) (length=15)
[WRONG] [hard] Pred 1:	b'SELECT countries.CountryName FROM countries WHERE countries.CountryId NOT IN (SELECT car_makers.Country FROM car_makers) INTERSECT SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country' (-2.677) (length=26)
[CORRE] [hard] Pred 2:	b'SELECT countries.CountryName FROM countries EXCEPT SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country' (-2.990) (length=16)
Error Case 78

ERROR: table "model_list" in field expression model_list.Maker is not in the current scope
ERROR: table "model_list" in field expression model_list.Maker is not in the current scope
ERROR: Join condition does not match with table: ['car_makers', {'join': 'car_names', 'on': {'eq': ['model_list.Model', 'car_names.MakeId']}}]
ERROR: Join condition does not match with table: ['car_makers', {'join': 'car_names', 'on': {'eq': ['car_makers.Id', 'model_list.Maker']}}]
ERROR: table "model_list" in field expression model_list.Maker is not in the current scope
Example 175
 17%|█▋        | 22/130 [04:38<38:11, 21.21s/it]car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .'
NL tokens: [b'which', b'are', b'the', b'car', b'makers', b'which', b'produce', b'at', b'least', b'2', b'models', b'and', b'more', b'than', b'3', b'car', b'makers', b'?', b'list', b'the', b'id', b'and', b'the', b'maker', b'.']
NL tokens (original): [b'Which', b'are', b'the', b'car', b'makers', b'which', b'produce', b'at', b'least', b'2', b'models', b'and', b'more', b'than', b'3', b'car', b'makers', b'?', b'List', b'the', b'id', b'and', b'the', b'maker', b'.']
['[CLS]', 'which', 'are', 'the', 'car', 'makers', 'which', 'produce', 'at', 'least', '2', 'models', 'and', 'more', 'than', '3', 'car', 'makers', '?', 'list', 'the', 'id', 'and', 'the', 'maker', '.', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3'
Target TF-P tokens: from car_makers join model_list on car_makers.Id = model_list.Maker group by car_makers.Id having count (*) >= 2 select car_makers.Id , car_makers.Maker intersect from car_makers join model_list on car_makers.Id = model_list.Maker join car_names on model_list.Model = car_names.Model group by car_makers.Id having count (*) > 3 select car_makers.Id , car_makers.Maker

[WRONG] [extra] Pred 0:	b'SELECT car_makers.Maker, model_list.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) >= 2' (-0.220) (length=22)
[WRONG] [extra] Pred 1:	b'SELECT car_makers.Maker, model_list.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) >= 2 UNION SELECT car_makers.Id, car_makers.Maker FROM car_makers GROUP BY car_makers.Id HAVING COUNT(*) >= 3' (-0.264) (length=38)
[WRONG] [extra] Pred 2:	b'SELECT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) >= 2 UNION SELECT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) >= 3' (-0.429) (length=44)
[WRONG] [extra] Pred 3:	b'SELECT car_makers.Maker, model_list.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) >= 2 UNION SELECT car_makers.Maker, car_makers.Id FROM car_makers GROUP BY car_makers.Id HAVING COUNT(*) >= 3' (-0.454) (length=38)
[WRONG] [extra] Pred 4:	b'SELECT car_makers.Maker, model_list.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) >= 2 UNION SELECT car_makers.Maker FROM car_makers JOIN model_list ON model_list.Model = car_makers.Id GROUP BY car_makers.Id HAVING COUNT(*) >= 3' (-0.542) (length=44)
[WRONG] [extra] Pred 5:	b'SELECT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) >= 2 INTERSECT SELECT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) >= 3' (-0.546) (length=44)
[WRONG] [extra] Pred 6:	b'SELECT car_makers.Maker, model_list.Maker FROM car_makers JOIN model_list ON model_list.Maker = car_makers.Id GROUP BY car_makers.Id HAVING COUNT(*) >= 2 UNION SELECT car_makers.Id, car_makers.Maker FROM car_makers GROUP BY car_makers.Id HAVING COUNT(*) >= 3' (-0.555) (length=38)
[WRONG] [extra] Pred 7:	b'SELECT car_makers.Maker, model_list.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) >= 2 UNION SELECT car_makers.Maker FROM car_makers GROUP BY car_makers.Id HAVING COUNT(*) >= 3' (-0.649) (length=38)
[WRONG] [extra] Pred 8:	b'SELECT car_makers.Maker FROM car_makers JOIN model_list ON model_list.Maker = car_makers.Id GROUP BY car_makers.Id HAVING COUNT(*) >= 2 UNION SELECT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) >= 3' (-0.654) (length=44)
[WRONG] [extra] Pred 9:	b'SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) >= 2 UNION SELECT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) >= 3' (-0.659) (length=44)
[WRONG] [extra] Pred 10:	b'SELECT car_makers.Maker, model_list.Maker FROM car_makers JOIN model_list ON model_list.Maker = car_makers.Id GROUP BY car_makers.Id HAVING COUNT(*) >= 2 UNION SELECT car_makers.Maker, car_makers.Id FROM car_makers GROUP BY car_makers.Id HAVING COUNT(*) >= 3' (-0.718) (length=38)
Error Case 79

ERROR: Join condition does not match with table: ['car_makers', {'join': 'car_names', 'on': {'eq': ['car_makers.Id', 'model_list.Maker']}}]
ERROR: Join condition does not match with table: ['car_makers', {'join': 'car_names', 'on': {'eq': ['car_makers.Id', 'model_list.Maker']}}]
ERROR: Join condition does not match with table: ['car_makers', {'join': 'car_names', 'on': {'eq': ['car_makers.Id', 'model_list.Maker']}}]
ERROR: Join condition does not match with table: ['car_makers', {'join': 'car_names', 'on': {'eq': ['car_makers.Id', 'model_list.Maker']}}]
ERROR: Join condition does not match with table: ['car_makers', {'join': 'cars_data', 'on': {'eq': ['car_makers.Id', 'model_list.Maker']}}]
ERROR: Join condition does not match with table: ['car_makers', {'join': 'cars_data', 'on': {'eq': ['car_makers.Id', 'model_list.Maker']}}]
Example 176
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?'
NL tokens: [b'what', b'are', b'the', b'id', b'##s', b'and', b'makers', b'of', b'all', b'car', b'makers', b'that', b'produce', b'at', b'least', b'2', b'models', b'and', b'make', b'more', b'than', b'3', b'cars', b'?']
NL tokens (original): [b'What', b'are', b'the', b'id', b'##s', b'and', b'makers', b'of', b'all', b'car', b'makers', b'that', b'produce', b'at', b'least', b'2', b'models', b'and', b'make', b'more', b'than', b'3', b'cars', b'?']
['[CLS]', 'what', 'are', 'the', 'id', '##s', 'and', 'makers', 'of', 'all', 'car', 'makers', 'that', 'produce', 'at', 'least', '2', 'models', 'and', 'make', 'more', 'than', '3', 'cars', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused51]', 'full', 'name', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b'SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3'
Target TF-P tokens: from car_makers join model_list on car_makers.Id = model_list.Maker group by car_makers.Id having count (*) >= 2 select car_makers.Id , car_makers.Maker intersect from car_makers join model_list on car_makers.Id = model_list.Maker join car_names on model_list.Model = car_names.Model group by car_makers.Id having count (*) > 3 select car_makers.Id , car_makers.Maker

[WRONG] [extra] Pred 0:	b'SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) >= 2 INTERSECT SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) >= 3' (-0.061) (length=44)
[WRONG] [extra] Pred 1:	b'SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) >= 2 INTERSECT SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-0.151) (length=44)
[WRONG] [extra] Pred 2:	b'SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) >= 2 UNION SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) >= 3' (-0.703) (length=44)
[WRONG] [extra] Pred 3:	b'SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) >= 2 UNION SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-0.769) (length=44)
[WRONG] [extra] Pred 4:	b'SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) >= 2 INTERSECT SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId GROUP BY car_makers.Id HAVING COUNT(*) >= 3' (-0.769) (length=44)
[WRONG] [extra] Pred 5:	b'SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) >= 2 INTERSECT SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-0.825) (length=44)
[WRONG] [extra] Pred 6:	b'SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) >= 2 INTERSECT SELECT car_makers.Id, car_makers.Maker FROM car_makers GROUP BY car_makers.Id HAVING COUNT(*) >= 3' (-0.873) (length=38)
[WRONG] [extra] Pred 7:	b'SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) >= 2 UNION SELECT car_makers.Id, car_makers.Maker FROM car_makers GROUP BY car_makers.Id HAVING COUNT(*) >= 3' (-0.913) (length=38)
[WRONG] [extra] Pred 8:	b'SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) >= 2 INTERSECT SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.Make GROUP BY car_makers.Id HAVING COUNT(*) >= 3' (-1.017) (length=44)
[WRONG] [extra] Pred 9:	b'SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(*) >= 2 INTERSECT SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.Make GROUP BY car_makers.Id HAVING COUNT(*) > 3' (-1.050) (length=44)
Error Case 80

ERROR: Join condition does not match with table: ['countries', {'join': 'car_names', 'on': {'eq': ['countries.CountryId', 'car_makers.Country']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'car_names', 'on': {'eq': ['countries.CountryId', 'car_makers.Country']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'model_list', 'on': {'eq': ['countries.CountryId', 'car_makers.Country']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'car_names', 'on': {'eq': ['countries.CountryId', 'car_makers.Country']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'car_names', 'on': {'eq': ['countries.CountryId', 'car_makers.Country']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'car_names', 'on': {'eq': ['countries.CountryId', 'car_makers.Country']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'car_names', 'on': {'eq': ['countries.CountryId', 'car_makers.Country']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'car_names', 'on': {'eq': ['countries.CountryId', 'car_makers.Country']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'car_names', 'on': {'eq': ['countries.CountryId', 'car_makers.Country']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'model_list', 'on': {'eq': ['countries.CountryId', 'car_makers.Country']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'car_names', 'on': {'eq': ['countries.CountryId', 'car_makers.Country']}}]
Example 177
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b"What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?"
NL tokens: [b'what', b'are', b'the', b'id', b'and', b'names', b'of', b'the', b'countries', b'which', b'have', b'more', b'than', b'3', b'car', b'makers', b'or', b'produce', b'the', b"'", b'fiat', b"'", b'model', b'?']
NL tokens (original): [b'What', b'are', b'the', b'id', b'and', b'names', b'of', b'the', b'countries', b'which', b'have', b'more', b'than', b'3', b'car', b'makers', b'or', b'produce', b'the', b"'", b'fiat', b"'", b'model', b'?']
['[CLS]', 'what', 'are', 'the', 'id', 'and', 'names', 'of', 'the', 'countries', 'which', 'have', 'more', 'than', '3', 'car', 'makers', 'or', 'produce', 'the', "'", 'fiat', "'", 'model', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused49]', 'fiat', '[unused51]', 'full', 'name', '[unused49]', 'fiat', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused49]', 'fiat', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused49]', 'fiat', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b"SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat'"
Target TF-P tokens: from countries join car_makers on countries.CountryId = car_makers.Country group by countries.CountryId having count (*) > 3 select countries.CountryId , countries.CountryName union from countries join car_makers on countries.CountryId = car_makers.Country join model_list on car_makers.Id = model_list.Maker where model_list.Model = "fiat" select countries.CountryId , countries.CountryName

[WRONG] [extra] Pred 0:	b'SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) > 3 UNION SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.FullName = "fiat"' (-0.466) (length=41)
[WRONG] [extra] Pred 1:	b'SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) > 3 UNION SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Maker = "fiat"' (-0.943) (length=41)
[WRONG] [extra] Pred 2:	b'SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) > 3 UNION SELECT countries.CountryName, countries.Continent FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.FullName = "fiat"' (-1.012) (length=41)
[WRONG] [extra] Pred 3:	b'SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) > 3 UNION SELECT car_makers.Country, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.FullName = "fiat"' (-1.022) (length=41)
[WRONG] [extra] Pred 4:	b'SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) > 3 UNION SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.FullName = "fiat"' (-1.185) (length=41)
Error Case 81

ERROR: Join condition does not match with table: ['countries', {'join': 'car_names', 'on': {'eq': ['countries.CountryId', 'car_makers.Country']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'car_names', 'on': {'eq': ['countries.CountryId', 'car_makers.Country']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'car_names', 'on': {'eq': ['countries.CountryId', 'car_makers.Country']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'car_names', 'on': {'eq': ['countries.CountryId', 'car_makers.Country']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'model_list', 'on': {'eq': ['countries.CountryId', 'car_makers.Country']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'car_names', 'on': {'eq': ['countries.CountryId', 'car_makers.Country']}}]
ERROR: Join condition does not match with table: ['countries', {'join': 'car_names', 'on': {'eq': ['countries.CountryId', 'car_makers.Country']}}]
ERROR: table "car_makers" in field expression car_makers.Maker is not in the current scope
Example 178
car_1
 +-- continents (continents)
 |   +-- ContId (cont id) [PRIMARY] [FOREIGN]
 |   +-- Continent (continent)
 +-- countries (countries)
 |   +-- CountryId (country id) [PRIMARY] [FOREIGN]
 |   +-- CountryName (country name)
 |   +-- Continent (continent) [FOREIGN]
 +-- car_makers (car makers)
 |   +-- Id (id) [PRIMARY] [FOREIGN]
 |   +-- Maker (maker)
 |   +-- FullName (full name)
 |   +-- Country (country) [FOREIGN]
 +-- model_list (model list)
 |   +-- ModelId (model id) [PRIMARY]
 |   +-- Maker (maker) [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 +-- car_names (car names)
 |   +-- MakeId (make id) [PRIMARY] [FOREIGN]
 |   +-- Model (model) [FOREIGN]
 |   +-- Make (make)
 +-- cars_data (cars data)
     +-- Id (id) [PRIMARY] [FOREIGN]
     +-- MPG (mpg)
     +-- Cylinders (cylinders)
     +-- Edispl (edispl)
     +-- Horsepower (horsepower)
     +-- Weight (weight)
     +-- Accelerate (accelerate)
     +-- Year (year)
NL: b'What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?'
NL tokens: [b'what', b'are', b'the', b'id', b'##s', b'and', b'names', b'of', b'all', b'countries', b'that', b'either', b'have', b'more', b'than', b'3', b'car', b'makers', b'or', b'produce', b'fiat', b'model', b'?']
NL tokens (original): [b'What', b'are', b'the', b'id', b'##s', b'and', b'names', b'of', b'all', b'countries', b'that', b'either', b'have', b'more', b'than', b'3', b'car', b'makers', b'or', b'produce', b'fiat', b'model', b'?']
 18%|█▊        | 23/130 [04:53<34:23, 19.29s/it] 18%|█▊        | 24/130 [04:53<24:05, 13.64s/it] 19%|█▉        | 25/130 [04:55<17:35, 10.06s/it]['[CLS]', 'what', 'are', 'the', 'id', '##s', 'and', 'names', 'of', 'all', 'countries', 'that', 'either', 'have', 'more', 'than', '3', 'car', 'makers', 'or', 'produce', 'fiat', 'model', '?', '[SEP]', '*', '[unused50]', 'continents', '[unused51]', 'con', '##t', 'id', '[unused51]', 'continent', '[unused50]', 'countries', '[unused51]', 'country', 'id', '[unused51]', 'country', 'name', '[unused51]', 'continent', '[unused50]', 'car', 'makers', '[unused51]', 'id', '[unused51]', 'maker', '[unused49]', 'fiat', '[unused51]', 'full', 'name', '[unused49]', 'fiat', '[unused51]', 'country', '[unused50]', 'model', 'list', '[unused51]', 'model', 'id', '[unused51]', 'maker', '[unused51]', 'model', '[unused49]', 'fiat', '[unused50]', 'car', 'names', '[unused51]', 'make', 'id', '[unused51]', 'model', '[unused49]', 'fiat', '[unused51]', 'make', '[unused50]', 'cars', 'data', '[unused51]', 'id', '[unused51]', 'mp', '##g', '[unused51]', 'cylinders', '[unused51]', 'ed', '##is', '##pl', '[unused51]', 'horsepower', '[unused51]', 'weight', '[unused51]', 'accelerate', '[unused51]', 'year', '[SEP]']
Target 0: b"select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat'"
Target TF-P tokens: from countries join car_makers on countries.CountryId = car_makers.Country group by countries.CountryId having count (*) > 3 select countries.CountryId , countries.CountryName union from countries join car_makers on countries.CountryId = car_makers.Country join model_list on car_makers.Id = model_list.Maker where model_list.Model = "fiat" select countries.CountryId , countries.CountryName

[WRONG] [extra] Pred 0:	b'SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) > 3 UNION SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Maker = "fiat"' (-0.518) (length=41)
[WRONG] [extra] Pred 1:	b'SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) > 3 UNION SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.FullName = "fiat"' (-0.719) (length=41)
[WRONG] [extra] Pred 2:	b'SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) > 3 UNION SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Maker = "fiat"' (-0.906) (length=41)
[WRONG] [extra] Pred 3:	b'SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) > 3 UNION SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.FullName = "fiat"' (-1.135) (length=41)
[WRONG] [extra] Pred 4:	b'SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) > 3 EXCEPT SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Maker = "fiat"' (-1.370) (length=41)
[WRONG] [extra] Pred 5:	b'SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) > 3 UNION SELECT car_makers.Country, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Maker = "fiat"' (-1.381) (length=41)
[WRONG] [extra] Pred 6:	b'SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) > 3 EXCEPT SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.FullName = "fiat"' (-1.575) (length=41)
[WRONG] [extra] Pred 7:	b'SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(*) > 3 UNION SELECT car_makers.Country, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.FullName = "fiat"' (-1.584) (length=41)
Error Case 82

ERROR: Join condition does not match with table: ['airports', {'join': 'flights', 'on': {'eq': ['flights.DestAirport', 'flights.Airline']}}]
ERROR: invalid JOIN field "airports": ['airports', {'join': 'flights', 'on': {'eq': ['flights.DestAirport', 'airports']}}]
ERROR: Join condition does not match with table: ['airports', {'join': 'flights', 'on': {'eq': ['flights.DestAirport', 'flights.DestAirport']}}]
ERROR: Join condition does not match with table: ['airports', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.DestAirport']}}]
ERROR: Join condition does not match with table: ['airports', {'join': 'flights', 'on': {'eq': ['flights.DestAirport', 'flights.SourceAirport']}}]
ERROR: invalid JOIN field "airlines": ['airports', {'join': 'flights', 'on': {'eq': ['flights.DestAirport', 'airlines']}}]
ERROR: invalid JOIN field "ATO": ['airports', {'join': 'flights', 'on': {'eq': ['flights.DestAirport', 'ATO']}}]
Parsing error: from airports join flights on flights.DestAirport = ATO "select count (*)"
Parsing error: from airports join flights on flights.DestAirport = destination ATO "select count (*)"
Example 205
flight_2
 +-- airlines (airlines)
 |   +-- uid (airline id) [PRIMARY]
 |   +-- Airline (airline name) [FOREIGN]
 |   +-- Abbreviation (abbreviation)
 |   +-- Country (country)
 +-- airports (airports)
 |   +-- AirportCode (airport code) [PRIMARY] [FOREIGN]
 |   +-- City (city)
 |   +-- AirportName (airport name)
 |   +-- Country (country)
 |   +-- CountryAbbrev (country abbrev)
 +-- flights (flights)
     +-- Airline (airline) [PRIMARY] [FOREIGN]
     +-- FlightNo (flight number)
     +-- SourceAirport (source airport) [FOREIGN]
     +-- DestAirport (destination airport) [FOREIGN]
NL: b'How many flights have destination ATO?'
NL tokens: [b'how', b'many', b'flights', b'have', b'destination', b'at', b'##o', b'?']
NL tokens (original): [b'How', b'many', b'flights', b'have', b'destination', b'AT', b'##O', b'?']
['[CLS]', 'how', 'many', 'flights', 'have', 'destination', 'at', '##o', '?', '[SEP]', '*', '[unused50]', 'airlines', '[unused51]', 'airline', 'id', '[unused51]', 'airline', 'name', '[unused51]', 'abbreviation', '[unused51]', 'country', '[unused50]', 'airports', '[unused51]', 'city', '[unused51]', 'airport', 'code', '[unused49]', 'at', '##o', '[unused51]', 'airport', 'name', '[unused51]', 'country', '[unused51]', 'country', 'ab', '##bre', '##v', '[unused50]', 'flights', '[unused51]', 'airline', '[unused51]', 'flight', 'number', '[unused51]', 'source', 'airport', '[unused51]', 'destination', 'airport', '[SEP]']
Target 0: b'SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"'
Target TF-P tokens: from flights where flights.DestAirport = "ATO" select count (*)

[WRONG] [easy] Pred 0:	b'SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.AirportCode = "ATO"' (-0.082) (length=21)
[WRONG] [easy] Pred 1:	b'SELECT COUNT(*) FROM airports JOIN flights ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = "ATO"' (-0.802) (length=21)
 20%|██        | 26/130 [04:59<14:37,  8.44s/it][WRONG] [easy] Pred 2:	b'SELECT COUNT(*) FROM airports JOIN flights ON flights.DestAirport = airports.City WHERE airports.AirportCode = "ATO"' (-2.274) (length=21)
[WRONG] [easy] Pred 3:	b'SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport JOIN flights ON flights.DestAirport = flights.Airline WHERE airports.AirportCode = "ATO"' (-2.311) (length=27)
[WRONG] [easy] Pred 4:	b'SELECT COUNT(*) FROM airports JOIN flights ON flights.DestAirport = airports.AirportName WHERE airports.AirportCode = "ATO"' (-2.825) (length=21)
[WRONG] [easy] Pred 5:	b'SELECT COUNT(*) FROM airports JOIN flights ON flights.DestAirport = airports.Country WHERE airports.AirportCode = "ATO"' (-2.931) (length=21)
[WRONG] [easy] Pred 6:	b'SELECT COUNT(*) FROM airports WHERE airports.AirportCode = "ATO"' (-3.782) (length=15)
Error Case 83

ERROR: Join condition does not match with table: ['airports', {'join': 'flights', 'on': {'eq': ['flights.DestAirport', 'flights.DestAirport']}}]
ERROR: Join condition does not match with table: ['airports', {'join': 'flights', 'on': {'eq': ['flights.SourceAirport', 'flights.DestAirport']}}]
Parsing error: from airports join flights on airports.AirportCode = flights.DestAirport join airports on airports.AirportCode = ATO "select count (*)"
ERROR: invalid JOIN field "ATO": ['airports', {'join': 'flights', 'on': {'and': [{'eq': ['airports.AirportCode', 'flights.DestAirport']}, {'eq': ['airports.AirportCode', 'ATO']}]}}]
ERROR: Join condition does not match with table: ['airports', {'join': 'flights', 'on': {'eq': ['airports.AirportCode', 'airports.AirportName']}}]
Parsing error: from airports join flights on airports.AirportCode = ATO "select count (*)"
ERROR: invalid JOIN field "airports": ['airports', {'join': 'flights', 'on': {'eq': ['flights.DestAirport', 'airports']}}]
ERROR: Join condition does not match with table: ['airports', {'join': 'flights', 'on': {'eq': ['flights.DestAirport', 'flights.Airline']}}]
Example 206
flight_2
 +-- airlines (airlines)
 |   +-- uid (airline id) [PRIMARY]
 |   +-- Airline (airline name) [FOREIGN]
 |   +-- Abbreviation (abbreviation)
 |   +-- Country (country)
 +-- airports (airports)
 |   +-- AirportCode (airport code) [PRIMARY] [FOREIGN]
 |   +-- City (city)
 |   +-- AirportName (airport name)
 |   +-- Country (country)
 |   +-- CountryAbbrev (country abbrev)
 +-- flights (flights)
     +-- Airline (airline) [PRIMARY] [FOREIGN]
     +-- FlightNo (flight number)
     +-- SourceAirport (source airport) [FOREIGN]
     +-- DestAirport (destination airport) [FOREIGN]
NL: b'Count the number of flights into ATO.'
NL tokens: [b'count', b'the', b'number', b'of', b'flights', b'into', b'at', b'##o', b'.']
NL tokens (original): [b'Count', b'the', b'number', b'of', b'flights', b'into', b'AT', b'##O', b'.']
['[CLS]', 'count', 'the', 'number', 'of', 'flights', 'into', 'at', '##o', '.', '[SEP]', '*', '[unused50]', 'airlines', '[unused51]', 'airline', 'id', '[unused51]', 'airline', 'name', '[unused51]', 'abbreviation', '[unused51]', 'country', '[unused50]', 'airports', '[unused51]', 'city', '[unused51]', 'airport', 'code', '[unused49]', 'at', '##o', '[unused51]', 'airport', 'name', '[unused51]', 'country', '[unused51]', 'country', 'ab', '##bre', '##v', '[unused50]', 'flights', '[unused51]', 'airline', '[unused51]', 'flight', 'number', '[unused51]', 'source', 'airport', '[unused51]', 'destination', 'airport', '[SEP]']
Target 0: b'SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"'
Target TF-P tokens: from flights where flights.DestAirport = "ATO" select count (*)

[WRONG] [easy] Pred 0:	b'SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.AirportCode = "ATO"' (-0.002) (length=21)
[WRONG] [easy] Pred 1:	b'SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.AirportCode = "ATO"' (-0.999) (length=21)
[WRONG] [easy] Pred 2:	b'SELECT COUNT(*) FROM airports WHERE airports.AirportCode = "ATO"' (-2.058) (length=15)
[WRONG] [easy] Pred 3:	b'SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport JOIN airports ON airports.AirportCode = flights.DestAirport WHERE airports.AirportCode = "ATO"' (-2.409) (length=27)
[WRONG] [easy] Pred 4:	b'SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.AirportCode = "ATO" AND flights.DestAirport = "ATO"' (-2.680) (length=28)
[WRONG] [easy] Pred 5:	b'SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = "ATO"' (-2.910) (length=21)
[WRONG] [easy] Pred 6:	b'SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.Airline WHERE airports.AirportCode = "ATO"' (-3.113) (length=21)
[WRONG] [easy] Pred 7:	b'SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = "ATO"' (-3.488) (length=21)
Error Case 84

ERROR: Join condition does not match with table: ['airports', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.DestAirport']}}]
ERROR: Join condition does not match with table: ['airports', {'join': 'flights', 'on': {'eq': ['airports.AirportCode', 'airports.AirportCode']}}]
Example 211
flight_2
 +-- airlines (airlines)
 |   +-- uid (airline id) [PRIMARY]
 |   +-- Airline (airline name) [FOREIGN]
 |   +-- Abbreviation (abbreviation)
 |   +-- Country (country)
 +-- airports (airports)
 |   +-- AirportCode (airport code) [PRIMARY] [FOREIGN]
 |   +-- City (city)
 |   +-- AirportName (airport name)
 |   +-- Country (country)
 |   +-- CountryAbbrev (country abbrev)
 +-- flights (flights)
     +-- Airline (airline) [PRIMARY] [FOREIGN]
     +-- FlightNo (flight number)
     +-- SourceAirport (source airport) [FOREIGN]
     +-- DestAirport (destination airport) [FOREIGN]
NL: b"How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?"
NL tokens: [b'how', b'many', b'flights', b'depart', b'from', b'city', b"'", b'aberdeen', b"'", b'and', b'have', b'destination', b'city', b"'", b'ashley', b"'", b'?']
NL tokens (original): [b'How', b'many', b'flights', b'depart', b'from', b'City', b"'", b'Aberdeen', b"'", b'and', b'have', b'destination', b'City', b"'", b'Ashley', b"'", b'?']
['[CLS]', 'how', 'many', 'flights', 'depart', 'from', 'city', "'", 'aberdeen', "'", 'and', 'have', 'destination', 'city', "'", 'ashley', "'", '?', '[SEP]', '*', '[unused50]', 'airlines', '[unused51]', 'airline', 'id', '[unused51]', 'airline', 'name', '[unused51]', 'abbreviation', '[unused51]', 'country', '[unused50]', 'airports', '[unused51]', 'city', '[unused49]', 'aberdeen', '[unused49]', 'ashley', '[unused51]', 'airport', 'code', '[unused51]', 'airport', 'name', '[unused49]', 'ashley', '[unused51]', 'country', '[unused51]', 'country', 'ab', '##bre', '##v', '[unused50]', 'flights', '[unused51]', 'airline', '[unused51]', 'flight', 'number', '[unused51]', 'source', 'airport', '[unused51]', 'destination', 'airport', '[SEP]']
Target 0: b'SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"'
Target TF-P tokens: from flights join airports on flights.DestAirport = airports.AirportCode join airports on flights.SourceAirport = airports.AirportCode where airports.City = "Ashley" and airports.City = "Aberdeen" select count (*)

[WRONG] [hard] Pred 0:	b'SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = "Aberdeen" AND airports.AirportName = "Ashley"' (-0.010) (length=26)
[WRONG] [hard] Pred 1:	b'SELECT COUNT(*) FROM airports JOIN flights ON flights.SourceAirport = airports.AirportCode WHERE airports.City = "Aberdeen" AND airports.AirportName = "Ashley"' (-0.608) (length=26)
[WRONG] [hard] Pred 2:	b'SELECT COUNT(*) FROM airports JOIN flights ON flights.DestAirport = airports.AirportCode WHERE airports.City = "Aberdeen" AND airports.AirportName = "Ashley"' (-0.734) (length=26)
[WRONG] [hard] Pred 3:	b'SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = "Aberdeen" AND flights.DestAirport = 1 AND airports.City = "Ashley"' (-0.982) (length=30)
[WRONG] [hard] Pred 4:	b'SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = "Aberdeen" AND flights.DestAirport = 1 AND airports.AirportName = "Ashley"' (-1.009) (length=30)
[WRONG] [hard] Pred 5:	b'SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = "Aberdeen" AND airports.AirportName = "Ashley"' (-1.177) (length=26)
[WRONG] [hard] Pred 6:	b'SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = "Aberdeen" AND flights.DestAirport = "Ashley"' (-1.238) (length=26)
[WRONG] [hard] Pred 7:	b'SELECT COUNT(*) FROM airports JOIN flights ON flights.SourceAirport = airports.AirportCode JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = "Aberdeen" AND airports.AirportName = "Ashley"' (-1.257) (length=32)
[WRONG] [hard] Pred 8:	b'SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = "Aberdeen" AND airports.AirportName = "Ashley"' (-1.301) (length=26)
[WRONG] [hard] Pred 9:	b'SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = "Aberdeen" AND airports.AirportName = "Ashley"' (-1.380) (length=32)
[WRONG] [hard] Pred 10:	b'SELECT COUNT(*) FROM airports JOIN flights ON flights.SourceAirport = airports.AirportCode JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = "Aberdeen" AND airports.AirportName = "Ashley"' (-1.513) (length=32)
[WRONG] [hard] Pred 11:	b'SELECT COUNT(*) FROM airports JOIN flights ON flights.DestAirport = airports.AirportCode WHERE airports.City = "Aberdeen" AND flights.DestAirport = 1 AND airports.AirportName = "Ashley"' (-1.654) (length=30)
[WRONG] [hard] Pred 12:	b'SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = "Aberdeen" AND flights.DestAirport = 5 AND airports.City = "Ashley"' (-1.680) (length=30)
[WRONG] [hard] Pred 13:	b'SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = "Aberdeen" AND airports.City = "Ashley"' (-1.748) (length=26)
Error Case 85

ERROR: Join condition does not match with table: ['airports', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.DestAirport']}}]
Parsing error: from flights intersect join airports on flights.SourceAirport = airports.AirportCode where airports.City = "Aberdeen" and airports.AirportName = "Ashley" select count (*)
Parsing error: from flights join airports = flights.SourceAirport = airports.AirportCode where airports.City = "Aberdeen" and airports.AirportName = "Ashley" select count (*)
Example 212
flight_2
 +-- airlines (airlines)
 |   +-- uid (airline id) [PRIMARY]
 |   +-- Airline (airline name) [FOREIGN]
 |   +-- Abbreviation (abbreviation)
 |   +-- Country (country)
 +-- airports (airports)
 |   +-- AirportCode (airport code) [PRIMARY] [FOREIGN]
 |   +-- City (city)
 |   +-- AirportName (airport name)
 |   +-- Country (country)
 |   +-- CountryAbbrev (country abbrev)
 +-- flights (flights)
     +-- Airline (airline) [PRIMARY] [FOREIGN]
     +-- FlightNo (flight number)
     +-- SourceAirport (source airport) [FOREIGN]
     +-- DestAirport (destination airport) [FOREIGN]
NL: b'How many flights fly from Aberdeen to Ashley?'
NL tokens: [b'how', b'many', b'flights', b'fly', b'from', b'aberdeen', b'to', b'ashley', b'?']
NL tokens (original): [b'How', b'many', b'flights', b'fly', b'from', b'Aberdeen', b'to', b'Ashley', b'?']
['[CLS]', 'how', 'many', 'flights', 'fly', 'from', 'aberdeen', 'to', 'ashley', '?', '[SEP]', '*', '[unused50]', 'airlines', '[unused51]', 'airline', 'id', '[unused51]', 'airline', 'name', '[unused51]', 'abbreviation', '[unused51]', 'country', '[unused50]', 'airports', '[unused51]', 'city', '[unused49]', 'aberdeen', '[unused49]', 'ashley', '[unused51]', 'airport', 'code', '[unused51]', 'airport', 'name', '[unused49]', 'ashley', '[unused51]', 'country', '[unused51]', 'country', 'ab', '##bre', '##v', '[unused50]', 'flights', '[unused51]', 'airline', '[unused51]', 'flight', 'number', '[unused51]', 'source', 'airport', '[unused51]', 'destination', 'airport', '[SEP]']
Target 0: b'SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"'
Target TF-P tokens: from flights join airports on flights.DestAirport = airports.AirportCode join airports on flights.SourceAirport = airports.AirportCode where airports.City = "Ashley" and airports.City = "Aberdeen" select count (*)

[WRONG] [hard] Pred 0:	b'SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = "Aberdeen" AND airports.AirportName = "Ashley"' (-0.070) (length=26)
[WRONG] [hard] Pred 1:	b'SELECT COUNT(*) FROM airports WHERE airports.City = "Aberdeen" AND airports.AirportName = "Ashley"' (-0.253) (length=20)
[WRONG] [hard] Pred 2:	b'SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = "Aberdeen" AND airports.AirportName = "Ashley"' (-1.229) (length=26)
[WRONG] [hard] Pred 3:	b'SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = "Aberdeen" AND airports.AirportName = "Ashley" AND flights.DestAirport = "Ashley"' (-1.979) (length=32)
[WRONG] [hard] Pred 4:	b'SELECT COUNT(*) FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport WHERE airports.City = "Aberdeen" AND airports.AirportName = "Ashley"' (-2.052) (length=26)
[WRONG] [hard] Pred 5:	b'SELECT COUNT(*) FROM airports JOIN flights ON flights.SourceAirport = airports.AirportCode WHERE airports.City = "Aberdeen" AND airports.AirportName = "Ashley"' (-2.060) (length=26)
[WRONG] [hard] Pred 6:	b'SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = "Aberdeen" AND airports.AirportName = "Ashley" AND flights.SourceAirport = "Ashley"' (-2.086) (length=32)
[WRONG] [hard] Pred 7:	b'SELECT COUNT(*) FROM airports JOIN flights ON flights.DestAirport = airports.AirportCode WHERE airports.City = "Aberdeen" AND airports.AirportName = "Ashley"' (-2.139) (length=26)
[WRONG] [hard] Pred 8:	b'SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = "Aberdeen" AND airports.AirportName = "Aberdeen" AND flights.DestAirport = "Ashley"' (-2.212) (length=32)
[WRONG] [hard] Pred 9:	b'SELECT COUNT(*) FROM airports JOIN flights ON flights.Airline = airports.AirportCode WHERE airports.City = "Aberdeen" AND airports.AirportName = "Ashley"' (-2.333) (length=26)
[WRONG] [hard] Pred 10:	b'SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportName = "Aberdeen" AND airports.AirportName = "Ashley"' (-2.428) (length=26)
[WRONG] [hard] Pred 11:	b'SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = "Aberdeen" AND airports.AirportName = "Ashley" AND flights.FlightNo = 2' (-2.472) (length=30)
[WRONG] [hard] Pred 12:	b'SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = "Aberdeen" OR airports.AirportName = "Ashley"' (-2.766) (length=26)
Error Case 86

ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}, {'join': 'airports', 'on': {'eq': ['flights.DestAirport', 'airports.AirportCode']}}]
 21%|██        | 27/130 [05:14<17:40, 10.30s/it]ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}, {'join': 'airports', 'on': {'eq': ['flights.SourceAirport', 'airports.AirportCode']}}]
ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}]
ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}, {'join': 'airports', 'on': {'eq': ['flights.DestAirport', 'airlines.uid']}}]
ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}, {'join': 'airports', 'on': {'eq': ['flights.DestAirport', 'airports.AirportCode']}}]
ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}, {'join': 'airports', 'on': {'eq': ['flights.SourceAirport', 'airports.City']}}]
ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}, {'join': 'airports', 'on': {'eq': ['flights.DestAirport', 'airports.AirportCode']}}]
ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}, {'join': 'airports', 'on': {'eq': ['flights.SourceAirport', 'airports.AirportCode']}}]
ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}, {'join': 'airports', 'on': {'eq': ['flights.DestAirport', 'airports.City']}}]
Example 215
flight_2
 +-- airlines (airlines)
 |   +-- uid (airline id) [PRIMARY]
 |   +-- Airline (airline name) [FOREIGN]
 |   +-- Abbreviation (abbreviation)
 |   +-- Country (country)
 +-- airports (airports)
 |   +-- AirportCode (airport code) [PRIMARY] [FOREIGN]
 |   +-- City (city)
 |   +-- AirportName (airport name)
 |   +-- Country (country)
 |   +-- CountryAbbrev (country abbrev)
 +-- flights (flights)
     +-- Airline (airline) [PRIMARY] [FOREIGN]
     +-- FlightNo (flight number)
     +-- SourceAirport (source airport) [FOREIGN]
     +-- DestAirport (destination airport) [FOREIGN]
NL: b"How many 'United Airlines' flights go to Airport 'ASY'?"
NL tokens: [b'how', b'many', b"'", b'united', b'airlines', b"'", b'flights', b'go', b'to', b'airport', b"'", b'as', b'##y', b"'", b'?']
NL tokens (original): [b'How', b'many', b"'", b'United', b'Airlines', b"'", b'flights', b'go', b'to', b'Airport', b"'", b'AS', b'##Y', b"'", b'?']
['[CLS]', 'how', 'many', "'", 'united', 'airlines', "'", 'flights', 'go', 'to', 'airport', "'", 'as', '##y', "'", '?', '[SEP]', '*', '[unused50]', 'airlines', '[unused51]', 'airline', 'id', '[unused51]', 'airline', 'name', '[unused49]', 'united', 'airlines', '[unused51]', 'abbreviation', '[unused51]', 'country', '[unused50]', 'airports', '[unused51]', 'city', '[unused51]', 'airport', 'code', '[unused49]', 'as', '##y', '[unused51]', 'airport', 'name', '[unused51]', 'country', '[unused51]', 'country', 'ab', '##bre', '##v', '[unused50]', 'flights', '[unused51]', 'airline', '[unused51]', 'flight', 'number', '[unused51]', 'source', 'airport', '[unused51]', 'destination', 'airport', '[SEP]']
Target 0: b'SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"'
Target TF-P tokens: from airlines join flights on flights.Airline = airlines.uid where airlines.Airline = "United Airlines" and flights.DestAirport = "asY" select count (*)

[WRONG] [medium] Pred 0:	b'SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = "asY" AND flights.DestAirport = "United Airlines"' (-0.430) (length=34)
[WRONG] [medium] Pred 1:	b'SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airlines.Airline = "asY" AND flights.DestAirport = "United Airlines"' (-0.532) (length=34)
[CORRE] [medium] Pred 2:	b'SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE airlines.Airline = "asY" AND flights.DestAirport = "United Airlines"' (-0.728) (length=28)
Error Case 87

ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}]
ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}, {'join': 'airports', 'on': {'eq': ['flights.SourceAirport', 'airports.AirportCode']}}]
ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}, {'join': 'airports', 'on': {'eq': ['flights.SourceAirport', 'airports.AirportCode']}}]
ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}, {'join': 'airports', 'on': {'eq': ['flights.DestAirport', 'airports.AirportCode']}}]
ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}, {'join': 'airports', 'on': {'eq': ['flights.DestAirport', 'airports.AirportCode']}}]
Example 216
flight_2
 +-- airlines (airlines)
 |   +-- uid (airline id) [PRIMARY]
 |   +-- Airline (airline name) [FOREIGN]
 |   +-- Abbreviation (abbreviation)
 |   +-- Country (country)
 +-- airports (airports)
 |   +-- AirportCode (airport code) [PRIMARY] [FOREIGN]
 |   +-- City (city)
 |   +-- AirportName (airport name)
 |   +-- Country (country)
 |   +-- CountryAbbrev (country abbrev)
 +-- flights (flights)
     +-- Airline (airline) [PRIMARY] [FOREIGN]
     +-- FlightNo (flight number)
     +-- SourceAirport (source airport) [FOREIGN]
     +-- DestAirport (destination airport) [FOREIGN]
NL: b'Count the number of United Airlines flights arriving in ASY Airport.'
NL tokens: [b'count', b'the', b'number', b'of', b'united', b'airlines', b'flights', b'arriving', b'in', b'as', b'##y', b'airport', b'.']
NL tokens (original): [b'Count', b'the', b'number', b'of', b'United', b'Airlines', b'flights', b'arriving', b'in', b'AS', b'##Y', b'Airport', b'.']
['[CLS]', 'count', 'the', 'number', 'of', 'united', 'airlines', 'flights', 'arriving', 'in', 'as', '##y', 'airport', '.', '[SEP]', '*', '[unused50]', 'airlines', '[unused51]', 'airline', 'id', '[unused51]', 'airline', 'name', '[unused49]', 'united', 'airlines', '[unused51]', 'abbreviation', '[unused51]', 'country', '[unused50]', 'airports', '[unused51]', 'city', '[unused51]', 'airport', 'code', '[unused49]', 'as', '##y', '[unused51]', 'airport', 'name', '[unused51]', 'country', '[unused51]', 'country', 'ab', '##bre', '##v', '[unused50]', 'flights', '[unused51]', 'airline', '[unused51]', 'flight', 'number', '[unused51]', 'source', 'airport', '[unused51]', 'destination', 'airport', '[SEP]']
Target 0: b'SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"'
Target TF-P tokens: from airlines join flights on flights.Airline = airlines.uid where airlines.Airline = "United Airlines" and flights.DestAirport = "asY" select count (*)

[WRONG] [medium] Pred 0:	b'SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE airlines.Airline = "asY" AND airlines.Airline = "United Airlines"' (-0.173) (length=28)
[WRONG] [medium] Pred 1:	b'SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.DestAirport WHERE airlines.Airline = "asY" AND airlines.Airline = "United Airlines"' (-0.469) (length=28)
[WRONG] [medium] Pred 2:	b'SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airlines.Airline = "asY" AND airlines.Airline = "United Airlines"' (-0.633) (length=34)
[WRONG] [medium] Pred 3:	b'SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE airlines.Airline = "asY" AND flights.FlightNo = 1 AND airlines.Airline = "United Airlines"' (-0.664) (length=32)
[CORRE] [medium] Pred 4:	b'SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE airlines.Airline = "asY" AND flights.DestAirport = "United Airlines"' (-0.670) (length=28)
Error Case 88

ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}]
ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}]
ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}]
ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}]
ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}]
ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}]
ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}]
ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}]
ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}]
Example 218
flight_2
 +-- airlines (airlines)
 |   +-- uid (airline id) [PRIMARY]
 |   +-- Airline (airline name) [FOREIGN]
 |   +-- Abbreviation (abbreviation)
 |   +-- Country (country)
 +-- airports (airports)
 |   +-- AirportCode (airport code) [PRIMARY] [FOREIGN]
 |   +-- City (city)
 |   +-- AirportName (airport name)
 |   +-- Country (country)
 |   +-- CountryAbbrev (country abbrev)
 +-- flights (flights)
     +-- Airline (airline) [PRIMARY] [FOREIGN]
     +-- FlightNo (flight number)
     +-- SourceAirport (source airport) [FOREIGN]
     +-- DestAirport (destination airport) [FOREIGN]
NL: b'Return the number of United Airlines flights leaving from AHD Airport.'
NL tokens: [b'return', b'the', b'number', b'of', b'united', b'airlines', b'flights', b'leaving', b'from', b'ah', b'##d', b'airport', b'.']
NL tokens (original): [b'Return', b'the', b'number', b'of', b'United', b'Airlines', b'flights', b'leaving', b'from', b'AH', b'##D', b'Airport', b'.']
['[CLS]', 'return', 'the', 'number', 'of', 'united', 'airlines', 'flights', 'leaving', 'from', 'ah', '##d', 'airport', '.', '[SEP]', '*', '[unused50]', 'airlines', '[unused51]', 'airline', 'id', '[unused51]', 'airline', 'name', '[unused49]', 'united', 'airlines', '[unused51]', 'abbreviation', '[unused51]', 'country', '[unused50]', 'airports', '[unused51]', 'city', '[unused51]', 'airport', 'code', '[unused49]', 'ah', '##d', '[unused51]', 'airport', 'name', '[unused51]', 'country', '[unused51]', 'country', 'ab', '##bre', '##v', '[unused50]', 'flights', '[unused51]', 'airline', '[unused51]', 'flight', 'number', '[unused51]', 'source', 'airport', '[unused49]', 'ah', '##d', '[unused51]', 'destination', 'airport', '[unused49]', 'ah', '##d', '[SEP]']
Target 0: b'SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"'
Target TF-P tokens: from airlines join flights on flights.Airline = airlines.uid where airlines.Airline = "United Airlines" and flights.SourceAirport = "AHD" select count (*)

[WRONG] [medium] Pred 0:	b'SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = "AHD" AND flights.DestAirport = "United Airlines"' (-0.187) (length=28)
[WRONG] [medium] Pred 1:	b'SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = "AHD" AND flights.DestAirport = "UnitedD"' (-1.459) (length=28)
[WRONG] [medium] Pred 2:	b'SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = "AHD" AND flights.SourceAirport = "United Airlines"' (-1.714) (length=28)
[WRONG] [medium] Pred 3:	b'SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = "AHD" AND flights.FlightNo = "VALUE" AND flights.DestAirport = "United Airlines"' (-1.764) (length=32)
[WRONG] [medium] Pred 4:	b'SELECT COUNT(*) FROM airlines JOIN flights ON airlines.Airline = flights.Airline WHERE flights.SourceAirport = "AHD" AND flights.DestAirport = "United Airlines"' (-1.803) (length=28)
[CORRE] [medium] Pred 5:	b'SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE airlines.Airline = "AHD" AND flights.DestAirport = "United Airlines"' (-1.888) (length=28)
Error Case 89

ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}, {'join': 'airports', 'on': {'eq': ['flights.SourceAirport', 'airports.AirportCode']}}]
ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}, {'join': 'airports', 'on': {'eq': ['airlines.Airline', 'airports.AirportCode']}}]
ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}, {'join': 'airports', 'on': {'eq': ['flights.SourceAirport', 'airports.AirportCode']}}]
ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}, {'join': 'airports', 'on': {'eq': ['flights.SourceAirport', 'airports.AirportCode']}}]
ERROR: table "airlines" in field expression airlines.Airline is not in the current scope
ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}, {'join': 'airports', 'on': {'eq': ['flights.SourceAirport', 'airports.AirportCode']}}]
Example 220
flight_2
 +-- airlines (airlines)
 |   +-- uid (airline id) [PRIMARY]
 |   +-- Airline (airline name) [FOREIGN]
 |   +-- Abbreviation (abbreviation)
 |   +-- Country (country)
 +-- airports (airports)
 |   +-- AirportCode (airport code) [PRIMARY] [FOREIGN]
 |   +-- City (city)
 |   +-- AirportName (airport name)
 |   +-- Country (country)
 |   +-- CountryAbbrev (country abbrev)
 +-- flights (flights)
     +-- Airline (airline) [PRIMARY] [FOREIGN]
     +-- FlightNo (flight number)
     +-- SourceAirport (source airport) [FOREIGN]
     +-- DestAirport (destination airport) [FOREIGN]
NL: b'Count the number of United Airlines flights that arrive in Aberdeen.'
NL tokens: [b'count', b'the', b'number', b'of', b'united', b'airlines', b'flights', b'that', b'arrive', b'in', b'aberdeen', b'.']
NL tokens (original): [b'Count', b'the', b'number', b'of', b'United', b'Airlines', b'flights', b'that', b'arrive', b'in', b'Aberdeen', b'.']
['[CLS]', 'count', 'the', 'number', 'of', 'united', 'airlines', 'flights', 'that', 'arrive', 'in', 'aberdeen', '.', '[SEP]', '*', '[unused50]', 'airlines', '[unused51]', 'airline', 'id', '[unused51]', 'airline', 'name', '[unused49]', 'united', 'airlines', '[unused51]', 'abbreviation', '[unused51]', 'country', '[unused50]', 'airports', '[unused51]', 'city', '[unused49]', 'aberdeen', '[unused51]', 'airport', 'code', '[unused51]', 'airport', 'name', '[unused51]', 'country', '[unused51]', 'country', 'ab', '##bre', '##v', '[unused50]', 'flights', '[unused51]', 'airline', '[unused51]', 'flight', 'number', '[unused51]', 'source', 'airport', '[unused51]', 'destination', 'airport', '[SEP]']
Target 0: b'SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"'
 22%|██▏       | 28/130 [05:29<19:50, 11.67s/it] 22%|██▏       | 29/130 [05:31<14:47,  8.79s/it] 23%|██▎       | 30/130 [05:33<11:16,  6.77s/it]Target TF-P tokens: from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airlines.uid = flights.Airline where airports.City = "Aberdeen" and airlines.Airline = "United Airlines" select count (*)

[WRONG] [hard] Pred 0:	b'SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = "Aberdeen" AND flights.FlightNo = 1 AND airlines.Airline = "United Airlines"' (-0.166) (length=37)
[WRONG] [hard] Pred 1:	b'SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.DestAirport JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = "Aberdeen" AND flights.FlightNo = 1 AND airlines.Airline = "United Airlines"' (-0.539) (length=37)
[WRONG] [hard] Pred 2:	b'SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE airlines.Airline = "Aberdeen" AND flights.FlightNo = 1 AND airlines.Airline = "United Airlines"' (-0.554) (length=31)
[WRONG] [hard] Pred 3:	b'SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON airlines.Airline = airports.AirportCode WHERE airports.City = "Aberdeen" AND flights.FlightNo = 1 AND airlines.Airline = "United Airlines"' (-0.556) (length=37)
[WRONG] [hard] Pred 4:	b'SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.DestAirport JOIN airports ON airlines.Airline = airports.AirportCode WHERE airports.City = "Aberdeen" AND flights.FlightNo = 1 AND airlines.Airline = "United Airlines"' (-0.652) (length=37)
[WRONG] [hard] Pred 5:	b'SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = "Aberdeen" AND flights.FlightNo > "VALUE" AND airlines.Airline = "United Airlines"' (-0.662) (length=37)
[CORRE] [hard] Pred 6:	b'SELECT COUNT(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = "Aberdeen" AND airlines.Airline = "United Airlines"' (-0.709) (length=33)
Error Case 90

Example 222
flight_2
 +-- airlines (airlines)
 |   +-- uid (airline id) [PRIMARY]
 |   +-- Airline (airline name) [FOREIGN]
 |   +-- Abbreviation (abbreviation)
 |   +-- Country (country)
 +-- airports (airports)
 |   +-- AirportCode (airport code) [PRIMARY] [FOREIGN]
 |   +-- City (city)
 |   +-- AirportName (airport name)
 |   +-- Country (country)
 |   +-- CountryAbbrev (country abbrev)
 +-- flights (flights)
     +-- Airline (airline) [PRIMARY] [FOREIGN]
     +-- FlightNo (flight number)
     +-- SourceAirport (source airport) [FOREIGN]
     +-- DestAirport (destination airport) [FOREIGN]
NL: b'Which city has the most frequent destination airport?'
NL tokens: [b'which', b'city', b'has', b'the', b'most', b'frequent', b'destination', b'airport', b'?']
NL tokens (original): [b'Which', b'city', b'has', b'the', b'most', b'frequent', b'destination', b'airport', b'?']
['[CLS]', 'which', 'city', 'has', 'the', 'most', 'frequent', 'destination', 'airport', '?', '[SEP]', '*', '[unused50]', 'airlines', '[unused51]', 'airline', 'id', '[unused51]', 'airline', 'name', '[unused51]', 'abbreviation', '[unused51]', 'country', '[unused50]', 'airports', '[unused51]', 'city', '[unused51]', 'airport', 'code', '[unused51]', 'airport', 'name', '[unused51]', 'country', '[unused51]', 'country', 'ab', '##bre', '##v', '[unused50]', 'flights', '[unused51]', 'airline', '[unused51]', 'flight', 'number', '[unused51]', 'source', 'airport', '[unused51]', 'destination', 'airport', '[SEP]']
Target 0: b'SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from airports join flights on airports.AirportCode = flights.DestAirport group by airports.City select airports.City order by count (*) desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT airports.City FROM airports GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1' (-0.047) (length=15)
[CORRE] [extra] Pred 1:	b'SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1' (-0.411) (length=21)
Error Case 91

Example 224
flight_2
 +-- airlines (airlines)
 |   +-- uid (airline id) [PRIMARY]
 |   +-- Airline (airline name) [FOREIGN]
 |   +-- Abbreviation (abbreviation)
 |   +-- Country (country)
 +-- airports (airports)
 |   +-- AirportCode (airport code) [PRIMARY] [FOREIGN]
 |   +-- City (city)
 |   +-- AirportName (airport name)
 |   +-- Country (country)
 |   +-- CountryAbbrev (country abbrev)
 +-- flights (flights)
     +-- Airline (airline) [PRIMARY] [FOREIGN]
     +-- FlightNo (flight number)
     +-- SourceAirport (source airport) [FOREIGN]
     +-- DestAirport (destination airport) [FOREIGN]
NL: b'Which city is the most frequent source airport?'
NL tokens: [b'which', b'city', b'is', b'the', b'most', b'frequent', b'source', b'airport', b'?']
NL tokens (original): [b'Which', b'city', b'is', b'the', b'most', b'frequent', b'source', b'airport', b'?']
['[CLS]', 'which', 'city', 'is', 'the', 'most', 'frequent', 'source', 'airport', '?', '[SEP]', '*', '[unused50]', 'airlines', '[unused51]', 'airline', 'id', '[unused51]', 'airline', 'name', '[unused51]', 'abbreviation', '[unused51]', 'country', '[unused50]', 'airports', '[unused51]', 'city', '[unused51]', 'airport', 'code', '[unused51]', 'airport', 'name', '[unused51]', 'country', '[unused51]', 'country', 'ab', '##bre', '##v', '[unused50]', 'flights', '[unused51]', 'airline', '[unused51]', 'flight', 'number', '[unused51]', 'source', 'airport', '[unused51]', 'destination', 'airport', '[SEP]']
Target 0: b'SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from airports join flights on airports.AirportCode = flights.SourceAirport group by airports.City select airports.City order by count (*) desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT airports.City FROM airports GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1' (-0.000) (length=15)
[CORRE] [extra] Pred 1:	b'SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1' (-2.202) (length=21)
Error Case 92

ERROR: table "flights" in field expression flights.SourceAirport is not in the current scope
ERROR: table "flights" in field expression flights.SourceAirport is not in the current scope
Parsing error: from flights join airlines on flights.Airline = airlines.uid group by flights.Airline having count (*) >= 10 select airlines.Airline order by count (*) >= airlines join airlines on flights.Airline = airlines.uid group by flights.Airline having count (*) >= 10 select airlines.Airline
Parsing error: from flights join airlines on flights.Airline = airlines.uid group by flights.Airline having count (*) >= 10 select airlines.Airline order by count (*) >= airlines on flights.Airline = airlines.uid group by flights.Airline having count (*) >= 10 select airlines.Airline
Parsing error: from flights join airlines on flights.Airline = airlines.uid group by flights.Airline having count (*) >= 10 select airlines.Airline order by count (*) >= airlines on airlines.Airline = 10 group by flights.Airline having count (*) >= 10 select airlines.Airline
Parsing error: from flights join airlines on flights.Airline = airlines.uid group by flights.Airline having count (*) >= 10 select airlines.Airline order by count (*) >= airlines join airlines on airlines.Airline = airlines.uid group by flights.Airline having count (*) >= 10 select airlines.Airline
Parsing error: from flights join airlines on flights.Airline = airlines.uid group by flights.Airline having count (*) >= 10 select airlines.Airline order by count (*) >= airlines on airlines.Airline = flights.Airline group by flights.Airline having count (*) >= 10 select airlines.Airline
Parsing error: from flights join airlines on flights.Airline = airlines.uid group by flights.Airline having count (*) >= 10 select airlines.Airline order by count (*) >= airlines on airlines.Airline = 10 select airlines.Airline
Parsing error: from flights join airlines on flights.Airline = airlines.uid group by flights.Airline having flights.FlightNo >= >= having count (*) >= 10 select airlines.Airline
Parsing error: from flights join airlines on flights.Airline = airlines.uid group by flights.Airline having count (*) >= 10 select airlines.Airline order by count (*) >= airlines on airlines.Airline
Parsing error: from flights join airlines on flights.Airline = airlines.uid group by flights.Airline having count (*) >= 10 select airlines.Airline order by count (*) >= airlines 1
Example 241
flight_2
 +-- airlines (airlines)
 |   +-- uid (airline id) [PRIMARY]
 |   +-- Airline (airline name) [FOREIGN]
 |   +-- Abbreviation (abbreviation)
 |   +-- Country (country)
 +-- airports (airports)
 |   +-- AirportCode (airport code) [PRIMARY] [FOREIGN]
 |   +-- City (city)
 |   +-- AirportName (airport name)
 |   +-- Country (country)
 |   +-- CountryAbbrev (country abbrev)
 +-- flights (flights)
     +-- Airline (airline) [PRIMARY] [FOREIGN]
     +-- FlightNo (flight number)
     +-- SourceAirport (source airport) [FOREIGN]
     +-- DestAirport (destination airport) [FOREIGN]
NL: b'Find all airlines that have at least 10 flights.'
NL tokens: [b'find', b'all', b'airlines', b'that', b'have', b'at', b'least', b'10', b'flights', b'.']
NL tokens (original): [b'Find', b'all', b'airlines', b'that', b'have', b'at', b'least', b'10', b'flights', b'.']
['[CLS]', 'find', 'all', 'airlines', 'that', 'have', 'at', 'least', '10', 'flights', '.', '[SEP]', '*', '[unused50]', 'airlines', '[unused51]', 'airline', 'id', '[unused51]', 'airline', 'name', '[unused51]', 'abbreviation', '[unused51]', 'country', '[unused50]', 'airports', '[unused51]', 'city', '[unused51]', 'airport', 'code', '[unused51]', 'airport', 'name', '[unused51]', 'country', '[unused51]', 'country', 'ab', '##bre', '##v', '[unused50]', 'flights', '[unused51]', 'airline', '[unused51]', 'flight', 'number', '[unused51]', 'source', 'airport', '[unused51]', 'destination', 'airport', '[SEP]']
Target 0: b'SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10'
Target TF-P tokens: from airlines join flights on airlines.uid = flights.Airline group by airlines.Airline having count (*) > 10 select airlines.Airline

[WRONG] [medium] Pred 0:	b'SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY flights.Airline HAVING COUNT(*) >= 10' (-0.000) (length=20)
[WRONG] [medium] Pred 1:	b'SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY flights.Airline HAVING COUNT(*) >= 10' (-1.586) (length=20)
[WRONG] [medium] Pred 2:	b'SELECT flights.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY flights.Airline HAVING COUNT(*) >= 10' (-2.023) (length=20)
[WRONG] [medium] Pred 3:	b'SELECT airlines.Airline, COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY flights.Airline HAVING COUNT(*) >= 10' (-3.100) (length=25)
[WRONG] [medium] Pred 4:	b'SELECT flights.Airline FROM flights GROUP BY flights.Airline HAVING COUNT(*) >= 10' (-3.277) (length=14)
[WRONG] [medium] Pred 5:	b'SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY flights.Airline HAVING COUNT(*) >= 10 ORDER BY COUNT(*) >= 10' (-3.338) (length=27)
[WRONG] [medium] Pred 6:	b'SELECT airlines.Airline, flights.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY flights.Airline HAVING COUNT(*) >= 10' (-3.412) (length=22)
Error Case 93

Parsing error: from flights join airlines on flights.Airline = airlines.uid group by flights.Airline having count (*) >= 10 select airlines.Airline order by count (*) >= airlines join flights on airlines.uid = flights.Airline group by flights.Airline having count (*) >= 10 select airlines.Airline
Parsing error: from flights join airlines on flights.Airline = airlines.uid group by flights.Airline having count (*) >= 10 select airlines.Airline order by count (*) >= airlines join flights on airlines.Airline = flights.Airline group by flights.Airline having count (*) >= 10 select airlines.Airline
Parsing error: from flights join airlines on flights.Airline = airlines.uid group by flights.Airline having count (*) >= 10 select airlines.Airline order by count (*) >= airlines on airlines.Airline = 10 group by flights.Airline having count (*) >= 10 select airlines.Airline
Parsing error: from flights join airlines on flights.Airline = airlines.uid group by flights.Airline having count (*) >= 10 select airlines.Airline order by count (*) >= airlines on flights.Airline = airlines.uid group by flights.Airline having count (*) >= 10 select airlines.Airline
Parsing error: from flights join airlines on flights.Airline = airlines.uid group by flights.Airline having count (*) >= 10 select airlines.Airline order by count (*) >= airlines on airlines.Airline
Parsing error: from flights join airlines on flights.Airline = airlines.uid group by flights.Airline having flights.FlightNo >= >= having count (*) >= 10 select airlines.Airline
ERROR: Join condition does not match with table: ['airlines', {'join': 'flights', 'on': {'eq': ['flights.Airline', 'flights.Airline']}}]
ERROR: "flights.DestAirport" appeared in FROM clause and is not a table
Example 242
flight_2
 +-- airlines (airlines)
 |   +-- uid (airline id) [PRIMARY]
 |   +-- Airline (airline name) [FOREIGN]
 |   +-- Abbreviation (abbreviation)
 |   +-- Country (country)
 +-- airports (airports)
 |   +-- AirportCode (airport code) [PRIMARY] [FOREIGN]
 |   +-- City (city)
 |   +-- AirportName (airport name)
 |   +-- Country (country)
 |   +-- CountryAbbrev (country abbrev)
 +-- flights (flights)
     +-- Airline (airline) [PRIMARY] [FOREIGN]
     +-- FlightNo (flight number)
     +-- SourceAirport (source airport) [FOREIGN]
     +-- DestAirport (destination airport) [FOREIGN]
NL: b'Which airlines have at least 10 flights?'
NL tokens: [b'which', b'airlines', b'have', b'at', b'least', b'10', b'flights', b'?']
NL tokens (original): [b'Which', b'airlines', b'have', b'at', b'least', b'10', b'flights', b'?']
['[CLS]', 'which', 'airlines', 'have', 'at', 'least', '10', 'flights', '?', '[SEP]', '*', '[unused50]', 'airlines', '[unused51]', 'airline', 'id', '[unused51]', 'airline', 'name', '[unused51]', 'abbreviation', '[unused51]', 'country', '[unused50]', 'airports', '[unused51]', 'city', '[unused51]', 'airport', 'code', '[unused51]', 'airport', 'name', '[unused51]', 'country', '[unused51]', 'country', 'ab', '##bre', '##v', '[unused50]', 'flights', '[unused51]', 'airline', '[unused51]', 'flight', 'number', '[unused51]', 'source', 'airport', '[unused51]', 'destination', 'airport', '[SEP]']
Target 0: b'SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10'
Target TF-P tokens: from airlines join flights on airlines.uid = flights.Airline group by airlines.Airline having count (*) > 10 select airlines.Airline

[WRONG] [medium] Pred 0:	b'SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY flights.Airline HAVING COUNT(*) >= 10' (-0.069) (length=20)
[WRONG] [medium] Pred 1:	b'SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY flights.Airline HAVING COUNT(*) >= 10' (-0.297) (length=20)
[WRONG] [medium] Pred 2:	b'SELECT airlines.Airline FROM airlines JOIN flights ON airlines.Airline = flights.Airline GROUP BY flights.Airline HAVING COUNT(*) >= 10' (-2.575) (length=20)
[WRONG] [medium] Pred 3:	b'SELECT flights.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY flights.Airline HAVING COUNT(*) >= 10' (-2.831) (length=20)
 24%|██▍       | 31/130 [05:40<11:13,  6.80s/it] 25%|██▍       | 32/130 [05:42<08:40,  5.32s/it][WRONG] [medium] Pred 4:	b'SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY flights.Airline HAVING COUNT(*) >= 10 ORDER BY COUNT(*) >= 10' (-3.129) (length=27)
[WRONG] [medium] Pred 5:	b'SELECT airlines.Airline, COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY flights.Airline HAVING COUNT(*) >= 10' (-3.189) (length=25)
[WRONG] [medium] Pred 6:	b'SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY flights.Airline HAVING COUNT(*) >= 10 ORDER BY COUNT(*) >= "airlines"' (-3.413) (length=27)
[WRONG] [medium] Pred 7:	b'SELECT airlines.Airline, flights.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY flights.Airline HAVING COUNT(*) >= 10' (-3.452) (length=22)
Error Case 94

Example 243
flight_2
 +-- airlines (airlines)
 |   +-- uid (airline id) [PRIMARY]
 |   +-- Airline (airline name) [FOREIGN]
 |   +-- Abbreviation (abbreviation)
 |   +-- Country (country)
 +-- airports (airports)
 |   +-- AirportCode (airport code) [PRIMARY] [FOREIGN]
 |   +-- City (city)
 |   +-- AirportName (airport name)
 |   +-- Country (country)
 |   +-- CountryAbbrev (country abbrev)
 +-- flights (flights)
     +-- Airline (airline) [PRIMARY] [FOREIGN]
     +-- FlightNo (flight number)
     +-- SourceAirport (source airport) [FOREIGN]
     +-- DestAirport (destination airport) [FOREIGN]
NL: b'Find all airlines that have fewer than 200 flights.'
NL tokens: [b'find', b'all', b'airlines', b'that', b'have', b'fewer', b'than', b'200', b'flights', b'.']
NL tokens (original): [b'Find', b'all', b'airlines', b'that', b'have', b'fewer', b'than', b'200', b'flights', b'.']
['[CLS]', 'find', 'all', 'airlines', 'that', 'have', 'fewer', 'than', '200', 'flights', '.', '[SEP]', '*', '[unused50]', 'airlines', '[unused51]', 'airline', 'id', '[unused51]', 'airline', 'name', '[unused51]', 'abbreviation', '[unused51]', 'country', '[unused50]', 'airports', '[unused51]', 'city', '[unused51]', 'airport', 'code', '[unused51]', 'airport', 'name', '[unused51]', 'country', '[unused51]', 'country', 'ab', '##bre', '##v', '[unused50]', 'flights', '[unused51]', 'airline', '[unused51]', 'flight', 'number', '[unused51]', 'source', 'airport', '[unused51]', 'destination', 'airport', '[SEP]']
Target 0: b'SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200'
Target TF-P tokens: from airlines join flights on airlines.uid = flights.Airline group by airlines.Airline having count (*) < 200 select airlines.Airline

[WRONG] [medium] Pred 0:	b'SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.FlightNo < 200' (-0.107) (length=15)
[WRONG] [medium] Pred 1:	b'SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.FlightNo < 200' (-0.328) (length=15)
[WRONG] [medium] Pred 2:	b'SELECT airlines.Airline FROM airlines JOIN flights ON airlines.Airline = flights.Airline WHERE flights.FlightNo < 200' (-2.750) (length=15)
[CORRE] [medium] Pred 3:	b'SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY flights.Airline HAVING COUNT(*) < 200' (-3.068) (length=20)
Error Case 95

Example 244
flight_2
 +-- airlines (airlines)
 |   +-- uid (airline id) [PRIMARY]
 |   +-- Airline (airline name) [FOREIGN]
 |   +-- Abbreviation (abbreviation)
 |   +-- Country (country)
 +-- airports (airports)
 |   +-- AirportCode (airport code) [PRIMARY] [FOREIGN]
 |   +-- City (city)
 |   +-- AirportName (airport name)
 |   +-- Country (country)
 |   +-- CountryAbbrev (country abbrev)
 +-- flights (flights)
     +-- Airline (airline) [PRIMARY] [FOREIGN]
     +-- FlightNo (flight number)
     +-- SourceAirport (source airport) [FOREIGN]
     +-- DestAirport (destination airport) [FOREIGN]
NL: b'Which airlines have less than 200 flights?'
NL tokens: [b'which', b'airlines', b'have', b'less', b'than', b'200', b'flights', b'?']
NL tokens (original): [b'Which', b'airlines', b'have', b'less', b'than', b'200', b'flights', b'?']
['[CLS]', 'which', 'airlines', 'have', 'less', 'than', '200', 'flights', '?', '[SEP]', '*', '[unused50]', 'airlines', '[unused51]', 'airline', 'id', '[unused51]', 'airline', 'name', '[unused51]', 'abbreviation', '[unused51]', 'country', '[unused50]', 'airports', '[unused51]', 'city', '[unused51]', 'airport', 'code', '[unused51]', 'airport', 'name', '[unused51]', 'country', '[unused51]', 'country', 'ab', '##bre', '##v', '[unused50]', 'flights', '[unused51]', 'airline', '[unused51]', 'flight', 'number', '[unused51]', 'source', 'airport', '[unused51]', 'destination', 'airport', '[SEP]']
Target 0: b'SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200'
Target TF-P tokens: from airlines join flights on airlines.uid = flights.Airline group by airlines.Airline having count (*) < 200 select airlines.Airline

[WRONG] [medium] Pred 0:	b'SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.FlightNo < 200' (-0.004) (length=15)
[WRONG] [medium] Pred 1:	b'SELECT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.FlightNo < 200' (-1.219) (length=15)
[WRONG] [medium] Pred 2:	b'SELECT airlines.Airline FROM airlines JOIN flights ON airlines.Airline = flights.Airline WHERE flights.FlightNo < 200' (-2.462) (length=15)
[CORRE] [medium] Pred 3:	b'SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY flights.Airline HAVING COUNT(*) < 200' (-2.571) (length=20)
Error Case 96

Example 252
flight_2
 +-- airlines (airlines)
 |   +-- uid (airline id) [PRIMARY]
 |   +-- Airline (airline name) [FOREIGN]
 |   +-- Abbreviation (abbreviation)
 |   +-- Country (country)
 +-- airports (airports)
 |   +-- AirportCode (airport code) [PRIMARY] [FOREIGN]
 |   +-- City (city)
 |   +-- AirportName (airport name)
 |   +-- Country (country)
 |   +-- CountryAbbrev (country abbrev)
 +-- flights (flights)
     +-- Airline (airline) [PRIMARY] [FOREIGN]
     +-- FlightNo (flight number)
     +-- SourceAirport (source airport) [FOREIGN]
     +-- DestAirport (destination airport) [FOREIGN]
NL: b'Give the flight numbers of flights leaving from Aberdeen.'
NL tokens: [b'give', b'the', b'flight', b'numbers', b'of', b'flights', b'leaving', b'from', b'aberdeen', b'.']
NL tokens (original): [b'Give', b'the', b'flight', b'numbers', b'of', b'flights', b'leaving', b'from', b'Aberdeen', b'.']
['[CLS]', 'give', 'the', 'flight', 'numbers', 'of', 'flights', 'leaving', 'from', 'aberdeen', '.', '[SEP]', '*', '[unused50]', 'airlines', '[unused51]', 'airline', 'id', '[unused51]', 'airline', 'name', '[unused51]', 'abbreviation', '[unused51]', 'country', '[unused50]', 'airports', '[unused51]', 'city', '[unused49]', 'aberdeen', '[unused51]', 'airport', 'code', '[unused51]', 'airport', 'name', '[unused51]', 'country', '[unused51]', 'country', 'ab', '##bre', '##v', '[unused50]', 'flights', '[unused51]', 'airline', '[unused51]', 'flight', 'number', '[unused51]', 'source', 'airport', '[unused51]', 'destination', 'airport', '[SEP]']
Target 0: b'SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"'
Target TF-P tokens: from flights join airports on flights.SourceAirport = airports.AirportCode where airports.City = "Aberdeen" select flights.FlightNo

[WRONG] [medium] Pred 0:	b'SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = "Aberdeen"' (-0.785) (length=11)
[CORRE] [medium] Pred 1:	b'SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = "Aberdeen"' (-0.988) (length=17)
Error Case 97

Example 256
flight_2
 +-- airlines (airlines)
 |   +-- uid (airline id) [PRIMARY]
 |   +-- Airline (airline name) [FOREIGN]
 |   +-- Abbreviation (abbreviation)
 |   +-- Country (country)
 +-- airports (airports)
 |   +-- AirportCode (airport code) [PRIMARY] [FOREIGN]
 |   +-- City (city)
 |   +-- AirportName (airport name)
 |   +-- Country (country)
 |   +-- CountryAbbrev (country abbrev)
 +-- flights (flights)
     +-- Airline (airline) [PRIMARY] [FOREIGN]
     +-- FlightNo (flight number)
     +-- SourceAirport (source airport) [FOREIGN]
     +-- DestAirport (destination airport) [FOREIGN]
NL: b'How many flights land in Aberdeen or Abilene?'
NL tokens: [b'how', b'many', b'flights', b'land', b'in', b'aberdeen', b'or', b'ab', b'##ile', b'##ne', b'?']
NL tokens (original): [b'How', b'many', b'flights', b'land', b'in', b'Aberdeen', b'or', b'Ab', b'##ile', b'##ne', b'?']
['[CLS]', 'how', 'many', 'flights', 'land', 'in', 'aberdeen', 'or', 'ab', '##ile', '##ne', '?', '[SEP]', '*', '[unused50]', 'airlines', '[unused51]', 'airline', 'id', '[unused51]', 'airline', 'name', '[unused51]', 'abbreviation', '[unused51]', 'country', '[unused50]', 'airports', '[unused51]', 'city', '[unused49]', 'aberdeen', '[unused49]', 'ab', '##ile', '##ne', '[unused51]', 'airport', 'code', '[unused51]', 'airport', 'name', '[unused51]', 'country', '[unused51]', 'country', 'ab', '##bre', '##v', '[unused50]', 'flights', '[unused51]', 'airline', '[unused51]', 'flight', 'number', '[unused51]', 'source', 'airport', '[unused51]', 'destination', 'airport', '[SEP]']
Target 0: b'SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"'
Target TF-P tokens: from flights join airports on flights.DestAirport = airports.AirportCode where airports.City = "Aberdeen" or airports.City = "Abilene" select count (*)

[WRONG] [hard] Pred 0:	b'SELECT COUNT(*) FROM airports WHERE airports.City = "Aberdeen" OR airports.City = "Abilene"' (-0.000) (length=22)
[CORRE] [hard] Pred 1:	b'SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = "Aberdeen" OR airports.City = "Abilene"' (-1.181) (length=28)
Error Case 98

ERROR: table "flights" in field expression flights.DestAirport is not in the current scope
Example 257
flight_2
 +-- airlines (airlines)
 |   +-- uid (airline id) [PRIMARY]
 |   +-- Airline (airline name) [FOREIGN]
 |   +-- Abbreviation (abbreviation)
 |   +-- Country (country)
 +-- airports (airports)
 |   +-- AirportCode (airport code) [PRIMARY] [FOREIGN]
 |   +-- City (city)
 |   +-- AirportName (airport name)
 |   +-- Country (country)
 |   +-- CountryAbbrev (country abbrev)
 +-- flights (flights)
     +-- Airline (airline) [PRIMARY] [FOREIGN]
     +-- FlightNo (flight number)
     +-- SourceAirport (source airport) [FOREIGN]
     +-- DestAirport (destination airport) [FOREIGN]
NL: b'Find the name of airports which do not have any flight in and out.'
NL tokens: [b'find', b'the', b'name', b'of', b'airports', b'which', b'do', b'not', b'have', b'any', b'flight', b'in', b'and', b'out', b'.']
NL tokens (original): [b'Find', b'the', b'name', b'of', b'airports', b'which', b'do', b'not', b'have', b'any', b'flight', b'in', b'and', b'out', b'.']
['[CLS]', 'find', 'the', 'name', 'of', 'airports', 'which', 'do', 'not', 'have', 'any', 'flight', 'in', 'and', 'out', '.', '[SEP]', '*', '[unused50]', 'airlines', '[unused51]', 'airline', 'id', '[unused51]', 'airline', 'name', '[unused51]', 'abbreviation', '[unused51]', 'country', '[unused50]', 'airports', '[unused51]', 'city', '[unused51]', 'airport', 'code', '[unused51]', 'airport', 'name', '[unused51]', 'country', '[unused51]', 'country', 'ab', '##bre', '##v', '[unused50]', 'flights', '[unused51]', 'airline', '[unused51]', 'flight', 'number', '[unused51]', 'source', 'airport', '[unused51]', 'destination', 'airport', '[SEP]']
Target 0: b'SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)'
Target TF-P tokens: from airports where airports.AirportCode not in (from flights select flights.SourceAirport union from flights select flights.DestAirport) select airports.AirportName

[WRONG] [hard] Pred 0:	b'SELECT airports.AirportName FROM airports WHERE airports.AirportCode NOT IN (SELECT flights.DestAirport FROM flights)' (-0.047) (length=15)
[WRONG] [hard] Pred 1:	b'SELECT airports.AirportName FROM airports WHERE airports.AirportCode NOT IN (SELECT flights.SourceAirport FROM flights)' (-0.530) (length=15)
[WRONG] [hard] Pred 2:	b'SELECT airports.AirportName FROM airports WHERE airports.AirportCode NOT IN (SELECT flights.DestAirport FROM flights) INTERSECT SELECT airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport' (-1.780) (length=26)
[WRONG] [hard] Pred 3:	b'SELECT airports.AirportName FROM airports WHERE airports.AirportCode NOT IN (SELECT flights.SourceAirport FROM flights) INTERSECT SELECT airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport' (-2.065) (length=26)
[WRONG] [hard] Pred 4:	b'SELECT airports.AirportName FROM airports WHERE airports.AirportCode NOT IN (SELECT flights.DestAirport FROM flights) UNION SELECT airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport' (-2.248) (length=26)
[WRONG] [hard] Pred 5:	b'SELECT airports.AirportName FROM airports WHERE airports.AirportCode NOT IN (SELECT flights.DestAirport FROM flights) INTERSECT SELECT airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport' (-2.279) (length=26)
[WRONG] [hard] Pred 6:	b'SELECT airports.AirportName FROM airports WHERE airports.AirportCode NOT IN (SELECT flights.DestAirport FROM flights) EXCEPT SELECT airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport' (-2.435) (length=26)
[WRONG] [hard] Pred 7:	b'SELECT airports.AirportName FROM airports WHERE airports.AirportCode NOT IN (SELECT flights.SourceAirport FROM flights) UNION SELECT airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport' (-2.507) (length=26)
[WRONG] [hard] Pred 8:	b'SELECT airports.AirportName FROM airports EXCEPT SELECT airports.AirportName FROM airports WHERE airports.AirportCode NOT IN (SELECT flights.DestAirport FROM flights)' (-2.508) (length=20)
[WRONG] [hard] Pred 9:	b'SELECT airports.AirportName FROM airports WHERE airports.AirportCode NOT IN (SELECT flights.SourceAirport FROM flights) INTERSECT SELECT airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport' (-2.563) (length=26)
[WRONG] [hard] Pred 10:	b'SELECT airports.AirportName FROM airports WHERE airports.AirportCode NOT IN (SELECT flights.DestAirport FROM flights) UNION SELECT airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport' (-2.744) (length=26)
[WRONG] [hard] Pred 11:	b'SELECT airports.AirportName FROM airports WHERE airports.AirportCode NOT IN (SELECT flights.DestAirport FROM flights) EXCEPT SELECT airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport' (-2.920) (length=26)
[WRONG] [hard] Pred 12:	b'SELECT airports.AirportName FROM airports EXCEPT SELECT airports.AirportName FROM airports WHERE airports.AirportCode NOT IN (SELECT flights.SourceAirport FROM flights)' (-2.923) (length=20)
[WRONG] [hard] Pred 13:	b'SELECT airports.AirportName FROM airports WHERE airports.AirportCode NOT IN (SELECT flights.SourceAirport FROM flights) UNION SELECT airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport' (-3.002) (length=26)
[WRONG] [hard] Pred 14:	b'SELECT airports.AirportName FROM airports EXCEPT SELECT airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport' (-3.051) (length=16)
Error Case 99

Example 258
 25%|██▌       | 33/130 [05:48<09:02,  5.59s/it]flight_2
 +-- airlines (airlines)
 |   +-- uid (airline id) [PRIMARY]
 |   +-- Airline (airline name) [FOREIGN]
 |   +-- Abbreviation (abbreviation)
 |   +-- Country (country)
 +-- airports (airports)
 |   +-- AirportCode (airport code) [PRIMARY] [FOREIGN]
 |   +-- City (city)
 |   +-- AirportName (airport name)
 |   +-- Country (country)
 |   +-- CountryAbbrev (country abbrev)
 +-- flights (flights)
     +-- Airline (airline) [PRIMARY] [FOREIGN]
     +-- FlightNo (flight number)
     +-- SourceAirport (source airport) [FOREIGN]
     +-- DestAirport (destination airport) [FOREIGN]
NL: b'Which airports do not have departing or arriving flights?'
NL tokens: [b'which', b'airports', b'do', b'not', b'have', b'departing', b'or', b'arriving', b'flights', b'?']
NL tokens (original): [b'Which', b'airports', b'do', b'not', b'have', b'departing', b'or', b'arriving', b'flights', b'?']
['[CLS]', 'which', 'airports', 'do', 'not', 'have', 'departing', 'or', 'arriving', 'flights', '?', '[SEP]', '*', '[unused50]', 'airlines', '[unused51]', 'airline', 'id', '[unused51]', 'airline', 'name', '[unused51]', 'abbreviation', '[unused51]', 'country', '[unused50]', 'airports', '[unused51]', 'city', '[unused51]', 'airport', 'code', '[unused51]', 'airport', 'name', '[unused51]', 'country', '[unused51]', 'country', 'ab', '##bre', '##v', '[unused50]', 'flights', '[unused51]', 'airline', '[unused51]', 'flight', 'number', '[unused51]', 'source', 'airport', '[unused51]', 'destination', 'airport', '[SEP]']
Target 0: b'SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)'
Target TF-P tokens: from airports where airports.AirportCode not in (from flights select flights.SourceAirport union from flights select flights.DestAirport) select airports.AirportName

[WRONG] [hard] Pred 0:	b'SELECT airports.AirportName FROM airports EXCEPT SELECT airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport' (-0.068) (length=16)
[WRONG] [hard] Pred 1:	b'SELECT airports.AirportName FROM airports EXCEPT SELECT airports.AirportName FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE flights.SourceAirport = "VALUE VALUE"' (-0.661) (length=23)
[WRONG] [hard] Pred 2:	b'SELECT airports.AirportName FROM airports EXCEPT SELECT airports.AirportName FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE flights.SourceAirport = "arriving VALUE"' (-0.746) (length=23)
[WRONG] [hard] Pred 3:	b'SELECT airports.AirportName FROM airports EXCEPT SELECT airports.AirportName FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE flights.FlightNo = "VALUE"' (-0.802) (length=20)
[WRONG] [hard] Pred 4:	b'SELECT airports.AirportName FROM airports EXCEPT SELECT airports.AirportName FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.SourceAirport = "VALUE VALUE"' (-0.825) (length=23)
[WRONG] [hard] Pred 5:	b'SELECT airports.AirportName FROM airports EXCEPT SELECT airports.AirportName FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE flights.SourceAirport = "arriving"' (-0.908) (length=22)
[WRONG] [hard] Pred 6:	b'SELECT airports.AirportName FROM airports EXCEPT SELECT airports.AirportName FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.SourceAirport = "arriving"' (-0.922) (length=22)
[WRONG] [hard] Pred 7:	b'SELECT airports.AirportName FROM airports EXCEPT SELECT airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport' (-0.943) (length=16)
[WRONG] [hard] Pred 8:	b'SELECT airports.AirportName FROM airports EXCEPT SELECT airports.AirportName FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE flights.DestAirport = "VALUE VALUE"' (-0.967) (length=23)
[WRONG] [hard] Pred 9:	b'SELECT airports.AirportName FROM airports EXCEPT SELECT airports.AirportName FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.SourceAirport = "arriving VALUE"' (-1.013) (length=23)
[WRONG] [hard] Pred 10:	b'SELECT airports.AirportName FROM airports EXCEPT SELECT airports.AirportName FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.FlightNo = "VALUE"' (-1.073) (length=20)
[WRONG] [hard] Pred 11:	b'SELECT airports.AirportName FROM airports EXCEPT SELECT airports.AirportName FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE flights.DestAirport = "arriving"' (-1.088) (length=22)
[WRONG] [hard] Pred 12:	b'SELECT airports.AirportName FROM airports EXCEPT SELECT airports.AirportName FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE flights.DestAirport = "arriving VALUE"' (-1.111) (length=23)
[WRONG] [hard] Pred 13:	b'SELECT airports.AirportName FROM airports EXCEPT SELECT airports.AirportName FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.DestAirport = "VALUE VALUE"' (-1.132) (length=23)
[WRONG] [hard] Pred 14:	b'SELECT airports.AirportName FROM airports EXCEPT SELECT airports.AirportName FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE flights.DestAirport = "arriving"' (-1.166) (length=22)
[WRONG] [hard] Pred 15:	b'SELECT airports.AirportName FROM airports EXCEPT SELECT airports.AirportName FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE flights.FlightNo = 4' (-1.247) (length=20)
Error Case 100

Example 265
employee_hire_evaluation
 +-- employee (employee)
 |   +-- Employee_ID (employee id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Age (age)
 |   +-- City (city)
 +-- shop (shop)
 |   +-- Shop_ID (shop id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Location (location)
 |   +-- District (district)
 |   +-- Number_products (number products)
 |   +-- Manager_name (manager name)
 +-- hiring (hiring)
 |   +-- Employee_ID (employee id) [PRIMARY] [FOREIGN]
 |   +-- Shop_ID (shop id) [FOREIGN]
 |   +-- Start_from (start from)
 |   +-- Is_full_time (is full time)
 +-- evaluation (evaluation)
     +-- Employee_ID (employee id) [PRIMARY] [FOREIGN]
     +-- Year_awarded (year awarded)
     +-- Bonus (bonus)
NL: b'Which cities do more than one employee under age 30 come from?'
NL tokens: [b'which', b'cities', b'do', b'more', b'than', b'one', b'employee', b'under', b'age', b'30', b'come', b'from', b'?']
NL tokens (original): [b'Which', b'cities', b'do', b'more', b'than', b'one', b'employee', b'under', b'age', b'30', b'come', b'from', b'?']
['[CLS]', 'which', 'cities', 'do', 'more', 'than', 'one', 'employee', 'under', 'age', '30', 'come', 'from', '?', '[SEP]', '*', '[unused50]', 'employee', '[unused51]', 'employee', 'id', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'city', '[unused50]', 'shop', '[unused51]', 'shop', 'id', '[unused51]', 'name', '[unused51]', 'location', '[unused51]', 'district', '[unused51]', 'number', 'products', '[unused51]', 'manager', 'name', '[unused50]', 'hiring', '[unused51]', 'shop', 'id', '[unused51]', 'employee', 'id', '[unused51]', 'start', 'from', '[unused51]', 'is', 'full', 'time', '[unused50]', 'evaluation', '[unused51]', 'employee', 'id', '[unused51]', 'year', 'awarded', '[unused51]', 'bonus', '[SEP]']
Target 0: b'SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1'
Target TF-P tokens: from employee where employee.Age < 30 group by employee.City having count (*) > 1 select employee.City

[WRONG] [medium] Pred 0:	b'SELECT employee.City FROM employee WHERE employee.Age > 30 GROUP BY employee.City HAVING COUNT(*) > 1' (-0.006) (length=18)
[CORRE] [medium] Pred 1:	b'SELECT employee.City FROM employee WHERE employee.Age < 30 GROUP BY employee.City HAVING COUNT(*) > 1' (-0.907) (length=18)
Error Case 101

Example 266
 26%|██▌       | 34/130 [05:50<07:11,  4.49s/it]employee_hire_evaluation
 +-- employee (employee)
 |   +-- Employee_ID (employee id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Age (age)
 |   +-- City (city)
 +-- shop (shop)
 |   +-- Shop_ID (shop id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Location (location)
 |   +-- District (district)
 |   +-- Number_products (number products)
 |   +-- Manager_name (manager name)
 +-- hiring (hiring)
 |   +-- Employee_ID (employee id) [PRIMARY] [FOREIGN]
 |   +-- Shop_ID (shop id) [FOREIGN]
 |   +-- Start_from (start from)
 |   +-- Is_full_time (is full time)
 +-- evaluation (evaluation)
     +-- Employee_ID (employee id) [PRIMARY] [FOREIGN]
     +-- Year_awarded (year awarded)
     +-- Bonus (bonus)
NL: b'Find the cities that have more than one employee under age 30.'
NL tokens: [b'find', b'the', b'cities', b'that', b'have', b'more', b'than', b'one', b'employee', b'under', b'age', b'30', b'.']
NL tokens (original): [b'Find', b'the', b'cities', b'that', b'have', b'more', b'than', b'one', b'employee', b'under', b'age', b'30', b'.']
['[CLS]', 'find', 'the', 'cities', 'that', 'have', 'more', 'than', 'one', 'employee', 'under', 'age', '30', '.', '[SEP]', '*', '[unused50]', 'employee', '[unused51]', 'employee', 'id', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'city', '[unused50]', 'shop', '[unused51]', 'shop', 'id', '[unused51]', 'name', '[unused51]', 'location', '[unused51]', 'district', '[unused51]', 'number', 'products', '[unused51]', 'manager', 'name', '[unused50]', 'hiring', '[unused51]', 'shop', 'id', '[unused51]', 'employee', 'id', '[unused51]', 'start', 'from', '[unused51]', 'is', 'full', 'time', '[unused50]', 'evaluation', '[unused51]', 'employee', 'id', '[unused51]', 'year', 'awarded', '[unused51]', 'bonus', '[SEP]']
Target 0: b'SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1'
Target TF-P tokens: from employee where employee.Age < 30 group by employee.City having count (*) > 1 select employee.City

[WRONG] [medium] Pred 0:	b'SELECT employee.City FROM employee WHERE employee.Age > 30 GROUP BY employee.City HAVING COUNT(*) > 1' (-0.091) (length=18)
[WRONG] [medium] Pred 1:	b'SELECT employee.City FROM employee WHERE employee.Age > 30 GROUP BY employee.City HAVING COUNT(*) < 1' (-0.385) (length=18)
[WRONG] [medium] Pred 2:	b'SELECT employee.City FROM employee WHERE employee.Age < 30 GROUP BY employee.City HAVING COUNT(*) < 1' (-0.671) (length=18)
[WRONG] [medium] Pred 3:	b'SELECT employee.City FROM employee WHERE employee.Age > 30 GROUP BY employee.City HAVING COUNT(*) < 30' (-0.998) (length=18)
[CORRE] [medium] Pred 4:	b'SELECT employee.City FROM employee WHERE employee.Age < 30 GROUP BY employee.City HAVING COUNT(*) > 1' (-1.060) (length=18)
Error Case 102

Parsing error: from employee join evaluation on employee.Employee_ID = evaluation.Employee_ID group by evaluation.Employee_ID select employee.Name order by limit (evaluation.Bonus) desc limit 1
Parsing error: from employee join evaluation on employee.Employee_ID = evaluation.Employee_ID group by evaluation.Employee_ID select employee.Name order by 10 (evaluation.Bonus) desc limit 1
Parsing error: from employee join evaluation on employee.Employee_ID = evaluation.Employee_ID group by evaluation.Employee_ID select employee.Name order by order by (evaluation.Bonus) desc limit 1
Example 279
employee_hire_evaluation
 +-- employee (employee)
 |   +-- Employee_ID (employee id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Age (age)
 |   +-- City (city)
 +-- shop (shop)
 |   +-- Shop_ID (shop id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Location (location)
 |   +-- District (district)
 |   +-- Number_products (number products)
 |   +-- Manager_name (manager name)
 +-- hiring (hiring)
 |   +-- Employee_ID (employee id) [PRIMARY] [FOREIGN]
 |   +-- Shop_ID (shop id) [FOREIGN]
 |   +-- Start_from (start from)
 |   +-- Is_full_time (is full time)
 +-- evaluation (evaluation)
     +-- Employee_ID (employee id) [PRIMARY] [FOREIGN]
     +-- Year_awarded (year awarded)
     +-- Bonus (bonus)
NL: b'Find the name of the employee who got the highest one time bonus.'
NL tokens: [b'find', b'the', b'name', b'of', b'the', b'employee', b'who', b'got', b'the', b'highest', b'one', b'time', b'bonus', b'.']
NL tokens (original): [b'Find', b'the', b'name', b'of', b'the', b'employee', b'who', b'got', b'the', b'highest', b'one', b'time', b'bonus', b'.']
['[CLS]', 'find', 'the', 'name', 'of', 'the', 'employee', 'who', 'got', 'the', 'highest', 'one', 'time', 'bonus', '.', '[SEP]', '*', '[unused50]', 'employee', '[unused51]', 'employee', 'id', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'city', '[unused50]', 'shop', '[unused51]', 'shop', 'id', '[unused51]', 'name', '[unused51]', 'location', '[unused51]', 'district', '[unused51]', 'number', 'products', '[unused51]', 'manager', 'name', '[unused50]', 'hiring', '[unused51]', 'shop', 'id', '[unused51]', 'employee', 'id', '[unused51]', 'start', 'from', '[unused51]', 'is', 'full', 'time', '[unused50]', 'evaluation', '[unused51]', 'employee', 'id', '[unused51]', 'year', 'awarded', '[unused51]', 'bonus', '[SEP]']
Target 0: b'SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1'
Target TF-P tokens: from employee join evaluation on employee.Employee_ID = evaluation.Employee_ID select employee.Name order by evaluation.Bonus desc limit 1

[WRONG] [hard] Pred 0:	b'SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY evaluation.Employee_ID ORDER BY MAX(evaluation.Bonus) DESC LIMIT 1' (-0.087) (length=21)
[WRONG] [hard] Pred 1:	b'SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY evaluation.Employee_ID ORDER BY SUM(evaluation.Bonus) DESC LIMIT 1' (-0.245) (length=21)
[WRONG] [hard] Pred 2:	b'SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Employee_ID ORDER BY SUM(evaluation.Bonus) DESC LIMIT 1' (-1.246) (length=21)
[WRONG] [hard] Pred 3:	b'SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Employee_ID ORDER BY MAX(evaluation.Bonus) DESC LIMIT 1' (-1.289) (length=21)
[WRONG] [hard] Pred 4:	b'SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY evaluation.Employee_ID ORDER BY AVG(evaluation.Bonus) DESC LIMIT 1' (-1.322) (length=21)
[WRONG] [hard] Pred 5:	b'SELECT employee.Name FROM evaluation JOIN employee ON evaluation.Employee_ID = employee.Employee_ID GROUP BY evaluation.Employee_ID ORDER BY MAX(evaluation.Bonus) DESC LIMIT 1' (-1.359) (length=21)
[WRONG] [hard] Pred 6:	b'SELECT employee.Name FROM evaluation JOIN employee ON evaluation.Employee_ID = employee.Employee_ID GROUP BY evaluation.Employee_ID ORDER BY SUM(evaluation.Bonus) DESC LIMIT 1' (-1.632) (length=21)
[WRONG] [hard] Pred 7:	b'SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY evaluation.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1' (-1.676) (length=21)
[WRONG] [hard] Pred 8:	b'SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Bonus = (SELECT MAX(evaluation.Bonus) FROM evaluation) ORDER BY evaluation.Bonus DESC LIMIT 1' (-1.893) (length=28)
[WRONG] [hard] Pred 9:	b'SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Employee_ID ORDER BY AVG(evaluation.Bonus) DESC LIMIT 1' (-2.408) (length=21)
[WRONG] [hard] Pred 10:	b'SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY evaluation.Employee_ID ORDER BY MIN(evaluation.Bonus) DESC LIMIT 1' (-2.545) (length=21)
[WRONG] [hard] Pred 11:	b'SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1' (-2.804) (length=18)
 27%|██▋       | 35/130 [05:53<06:14,  3.94s/it] 28%|██▊       | 36/130 [05:56<06:06,  3.90s/it] 28%|██▊       | 37/130 [05:57<04:34,  2.96s/it] 29%|██▉       | 38/130 [05:58<03:24,  2.22s/it][CORRE] [hard] Pred 12:	b'SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1' (-2.885) (length=16)
Error Case 103

Parsing error: from hiring join shop on hiring.Shop_ID = shop.Shop_ID group by hiring.Shop_ID select count shop.Name) , count (*)
Parsing error: from hiring join shop on hiring.Shop_ID = shop.Shop_ID group by hiring.Shop_ID group by shop.Name select count (*) , shop.Name
ERROR: Join condition does not match with table: [{'value': 'hiring', 'name': '5', 'is_table': True}, {'join': 'shop', 'on': {'eq': ['hiring.Shop_ID', 'shop.Shop_ID']}}]
Parsing error: from hiring join shop on hiring.Shop_ID = shop.Shop_ID group by hiring.Shop_ID select count shop.Name) , shop.Name
Example 287
employee_hire_evaluation
 +-- employee (employee)
 |   +-- Employee_ID (employee id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Age (age)
 |   +-- City (city)
 +-- shop (shop)
 |   +-- Shop_ID (shop id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Location (location)
 |   +-- District (district)
 |   +-- Number_products (number products)
 |   +-- Manager_name (manager name)
 +-- hiring (hiring)
 |   +-- Employee_ID (employee id) [PRIMARY] [FOREIGN]
 |   +-- Shop_ID (shop id) [FOREIGN]
 |   +-- Start_from (start from)
 |   +-- Is_full_time (is full time)
 +-- evaluation (evaluation)
     +-- Employee_ID (employee id) [PRIMARY] [FOREIGN]
     +-- Year_awarded (year awarded)
     +-- Bonus (bonus)
NL: b'Find the number of employees hired in each shop; show the shop name as well.'
NL tokens: [b'find', b'the', b'number', b'of', b'employees', b'hired', b'in', b'each', b'shop', b';', b'show', b'the', b'shop', b'name', b'as', b'well', b'.']
NL tokens (original): [b'Find', b'the', b'number', b'of', b'employees', b'hired', b'in', b'each', b'shop', b';', b'show', b'the', b'shop', b'name', b'as', b'well', b'.']
['[CLS]', 'find', 'the', 'number', 'of', 'employees', 'hired', 'in', 'each', 'shop', ';', 'show', 'the', 'shop', 'name', 'as', 'well', '.', '[SEP]', '*', '[unused50]', 'employee', '[unused51]', 'employee', 'id', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'city', '[unused50]', 'shop', '[unused51]', 'shop', 'id', '[unused51]', 'name', '[unused51]', 'location', '[unused51]', 'district', '[unused51]', 'number', 'products', '[unused51]', 'manager', 'name', '[unused50]', 'hiring', '[unused51]', 'shop', 'id', '[unused51]', 'employee', 'id', '[unused51]', 'start', 'from', '[unused51]', 'is', 'full', 'time', '[unused50]', 'evaluation', '[unused51]', 'employee', 'id', '[unused51]', 'year', 'awarded', '[unused51]', 'bonus', '[SEP]']
Target 0: b'SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name'
Target TF-P tokens: from hiring join shop on hiring.Shop_ID = shop.Shop_ID group by shop.Name select count (*) , shop.Name

[WRONG] [medium] Pred 0:	b'SELECT COUNT(*), shop.Name FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY hiring.Shop_ID' (-0.002) (length=18)
[WRONG] [medium] Pred 1:	b'SELECT shop.Name, COUNT(*) FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY hiring.Shop_ID' (-1.601) (length=18)
[WRONG] [medium] Pred 2:	b'SELECT COUNT(*), hiring.Is_full_time FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY hiring.Shop_ID' (-2.689) (length=18)
[WRONG] [medium] Pred 3:	b'SELECT COUNT(*), hiring.Shop_ID FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY hiring.Shop_ID' (-3.119) (length=18)
[WRONG] [medium] Pred 4:	b'SELECT COUNT(*), shop.Name, hiring.Is_full_time FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY hiring.Shop_ID' (-3.552) (length=20)
[WRONG] [medium] Pred 5:	b'SELECT COUNT(*), shop.Name, hiring.Employee_ID FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY hiring.Shop_ID' (-3.689) (length=20)
[WRONG] [medium] Pred 6:	b'SELECT COUNT(*), shop.Name FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID WHERE hiring.Is_full_time = shop.Name GROUP BY shop.Shop_ID' (-3.786) (length=22)
[WRONG] [medium] Pred 7:	b'SELECT shop.Name, COUNT(*) FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY hiring.Is_full_time' (-3.885) (length=18)
[WRONG] [medium] Pred 8:	b'SELECT COUNT(*) FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID' (-4.007) (length=14)
[WRONG] [medium] Pred 9:	b'SELECT COUNT(*), shop.Name FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY hiring.Shop_ID AND hiring.Is_full_time' (-4.024) (length=20)
[WRONG] [medium] Pred 10:	b'SELECT COUNT(*) FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY hiring.Shop_ID' (-4.024) (length=16)
[WRONG] [medium] Pred 11:	b'SELECT COUNT(*), shop.Name FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY hiring.Shop_ID, shop.Name' (-4.082) (length=20)
Error Case 104

Example 288
employee_hire_evaluation
 +-- employee (employee)
 |   +-- Employee_ID (employee id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Age (age)
 |   +-- City (city)
 +-- shop (shop)
 |   +-- Shop_ID (shop id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Location (location)
 |   +-- District (district)
 |   +-- Number_products (number products)
 |   +-- Manager_name (manager name)
 +-- hiring (hiring)
 |   +-- Employee_ID (employee id) [PRIMARY] [FOREIGN]
 |   +-- Shop_ID (shop id) [FOREIGN]
 |   +-- Start_from (start from)
 |   +-- Is_full_time (is full time)
 +-- evaluation (evaluation)
     +-- Employee_ID (employee id) [PRIMARY] [FOREIGN]
     +-- Year_awarded (year awarded)
     +-- Bonus (bonus)
NL: b'For each shop, return the number of employees working there and the name of the shop.'
NL tokens: [b'for', b'each', b'shop', b',', b'return', b'the', b'number', b'of', b'employees', b'working', b'there', b'and', b'the', b'name', b'of', b'the', b'shop', b'.']
NL tokens (original): [b'For', b'each', b'shop', b',', b'return', b'the', b'number', b'of', b'employees', b'working', b'there', b'and', b'the', b'name', b'of', b'the', b'shop', b'.']
['[CLS]', 'for', 'each', 'shop', ',', 'return', 'the', 'number', 'of', 'employees', 'working', 'there', 'and', 'the', 'name', 'of', 'the', 'shop', '.', '[SEP]', '*', '[unused50]', 'employee', '[unused51]', 'employee', 'id', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'city', '[unused50]', 'shop', '[unused51]', 'shop', 'id', '[unused51]', 'name', '[unused51]', 'location', '[unused51]', 'district', '[unused51]', 'number', 'products', '[unused51]', 'manager', 'name', '[unused50]', 'hiring', '[unused51]', 'shop', 'id', '[unused51]', 'employee', 'id', '[unused51]', 'start', 'from', '[unused51]', 'is', 'full', 'time', '[unused50]', 'evaluation', '[unused51]', 'employee', 'id', '[unused51]', 'year', 'awarded', '[unused51]', 'bonus', '[SEP]']
Target 0: b'SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name'
Target TF-P tokens: from hiring join shop on hiring.Shop_ID = shop.Shop_ID group by shop.Name select count (*) , shop.Name

[WRONG] [medium] Pred 0:	b'SELECT COUNT(*), shop.Name FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY hiring.Shop_ID' (-0.005) (length=18)
[WRONG] [medium] Pred 1:	b'SELECT hiring.Is_full_time, COUNT(*) FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY hiring.Shop_ID' (-1.040) (length=18)
[WRONG] [medium] Pred 2:	b'SELECT COUNT(*), shop.Name FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY shop.Shop_ID' (-1.443) (length=18)
[WRONG] [medium] Pred 3:	b'SELECT shop.Name, COUNT(*) FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY hiring.Shop_ID' (-1.930) (length=18)
[WRONG] [medium] Pred 4:	b'SELECT shop.Manager_name, COUNT(*) FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY hiring.Shop_ID' (-2.409) (length=18)
[CORRE] [medium] Pred 5:	b'SELECT COUNT(*), shop.Name FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY shop.Name' (-2.688) (length=18)
Error Case 105

Example 305
 30%|███       | 39/130 [05:59<03:11,  2.11s/it] 31%|███       | 40/130 [06:00<02:26,  1.63s/it] 32%|███▏      | 41/130 [06:02<02:35,  1.75s/it]cre_Doc_Template_Mgt
 +-- Ref_Template_Types (reference template types)
 |   +-- Template_Type_Code (template type code) [PRIMARY] [FOREIGN]
 |   +-- Template_Type_Description (template type description)
 +-- Templates (templates)
 |   +-- Template_ID (template id) [PRIMARY] [FOREIGN]
 |   +-- Version_Number (version number)
 |   +-- Template_Type_Code (template type code) [FOREIGN]
 |   +-- Date_Effective_From (date effective from)
 |   +-- Date_Effective_To (date effective to)
 |   +-- Template_Details (template details)
 +-- Documents (documents)
 |   +-- Document_ID (document id) [PRIMARY] [FOREIGN]
 |   +-- Template_ID (template id) [FOREIGN]
 |   +-- Document_Name (document name)
 |   +-- Document_Description (document description)
 |   +-- Other_Details (other details)
 +-- Paragraphs (paragraphs)
     +-- Paragraph_ID (paragraph id) [PRIMARY]
     +-- Document_ID (document id) [FOREIGN]
     +-- Paragraph_Text (paragraph text)
     +-- Other_Details (other details)
NL: b'How many different templates do all document use?'
NL tokens: [b'how', b'many', b'different', b'template', b'##s', b'do', b'all', b'document', b'use', b'?']
NL tokens (original): [b'How', b'many', b'different', b'template', b'##s', b'do', b'all', b'document', b'use', b'?']
['[CLS]', 'how', 'many', 'different', 'template', '##s', 'do', 'all', 'document', 'use', '?', '[SEP]', '*', '[unused50]', 'reference', 'template', 'types', '[unused51]', 'template', 'type', 'code', '[unused51]', 'template', 'type', 'description', '[unused50]', 'template', '##s', '[unused51]', 'template', 'id', '[unused51]', 'version', 'number', '[unused51]', 'template', 'type', 'code', '[unused51]', 'date', 'effective', 'from', '[unused51]', 'date', 'effective', 'to', '[unused51]', 'template', 'details', '[unused50]', 'documents', '[unused51]', 'document', 'id', '[unused51]', 'template', 'id', '[unused51]', 'document', 'name', '[unused51]', 'document', 'description', '[unused51]', 'other', 'details', '[unused50]', 'paragraph', '##s', '[unused51]', 'paragraph', 'id', '[unused51]', 'document', 'id', '[unused51]', 'paragraph', 'text', '[unused51]', 'other', 'details', '[SEP]']
Target 0: b'SELECT count(DISTINCT template_id) FROM Documents'
Target TF-P tokens: from Documents select count (distinct Documents.Template_ID)

[WRONG] [easy] Pred 0:	b'SELECT COUNT(DISTINCT Templates.Template_ID) FROM Templates' (-3.791) (length=9)
[CORRE] [easy] Pred 1:	b'SELECT COUNT(DISTINCT Documents.Template_ID) FROM Documents' (-3.841) (length=9)
Error Case 106

Parsing error: from Templates where Templates.Date_Effective_From > than 5 select Templates.Version_Number , Templates.Template_Type_Code
Example 327
cre_Doc_Template_Mgt
 +-- Ref_Template_Types (reference template types)
 |   +-- Template_Type_Code (template type code) [PRIMARY] [FOREIGN]
 |   +-- Template_Type_Description (template type description)
 +-- Templates (templates)
 |   +-- Template_ID (template id) [PRIMARY] [FOREIGN]
 |   +-- Version_Number (version number)
 |   +-- Template_Type_Code (template type code) [FOREIGN]
 |   +-- Date_Effective_From (date effective from)
 |   +-- Date_Effective_To (date effective to)
 |   +-- Template_Details (template details)
 +-- Documents (documents)
 |   +-- Document_ID (document id) [PRIMARY] [FOREIGN]
 |   +-- Template_ID (template id) [FOREIGN]
 |   +-- Document_Name (document name)
 |   +-- Document_Description (document description)
 |   +-- Other_Details (other details)
 +-- Paragraphs (paragraphs)
     +-- Paragraph_ID (paragraph id) [PRIMARY]
     +-- Document_ID (document id) [FOREIGN]
     +-- Paragraph_Text (paragraph text)
     +-- Other_Details (other details)
NL: b'What is the version number and template type code for the template with version number later than 5?'
NL tokens: [b'what', b'is', b'the', b'version', b'number', b'and', b'template', b'type', b'code', b'for', b'the', b'template', b'with', b'version', b'number', b'later', b'than', b'5', b'?']
NL tokens (original): [b'What', b'is', b'the', b'version', b'number', b'and', b'template', b'type', b'code', b'for', b'the', b'template', b'with', b'version', b'number', b'later', b'than', b'5', b'?']
['[CLS]', 'what', 'is', 'the', 'version', 'number', 'and', 'template', 'type', 'code', 'for', 'the', 'template', 'with', 'version', 'number', 'later', 'than', '5', '?', '[SEP]', '*', '[unused50]', 'reference', 'template', 'types', '[unused51]', 'template', 'type', 'code', '[unused51]', 'template', 'type', 'description', '[unused50]', 'template', '##s', '[unused51]', 'template', 'id', '[unused51]', 'version', 'number', '[unused51]', 'template', 'type', 'code', '[unused51]', 'date', 'effective', 'from', '[unused51]', 'date', 'effective', 'to', '[unused51]', 'template', 'details', '[unused50]', 'documents', '[unused51]', 'document', 'id', '[unused51]', 'template', 'id', '[unused51]', 'document', 'name', '[unused51]', 'document', 'description', '[unused51]', 'other', 'details', '[unused50]', 'paragraph', '##s', '[unused51]', 'paragraph', 'id', '[unused51]', 'document', 'id', '[unused51]', 'paragraph', 'text', '[unused51]', 'other', 'details', '[SEP]']
Target 0: b'SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5'
Target TF-P tokens: from Templates where Templates.Version_Number > 5 select Templates.Version_Number , Templates.Template_Type_Code

[WRONG] [medium] Pred 0:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > 5' (-0.000) (length=11)
[WRONG] [medium] Pred 1:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_To > 5' (-2.483) (length=11)
[WRONG] [medium] Pred 2:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Template_ID > 5' (-3.141) (length=11)
[WRONG] [medium] Pred 3:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates JOIN Templates ON Templates.Template_ID = Templates.Template_ID WHERE Templates.Date_Effective_From > 5' (-3.592) (length=17)
[WRONG] [medium] Pred 4:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > "5 %"' (-3.694) (length=14)
[WRONG] [medium] Pred 5:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Template_Details > 5' (-4.110) (length=11)
[WRONG] [medium] Pred 6:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > MOD(5, Templates.Template_Type_Code)' (-4.354) (length=13)
[CORRE] [medium] Pred 7:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5' (-4.424) (length=11)
Error Case 107

Example 328
cre_Doc_Template_Mgt
 +-- Ref_Template_Types (reference template types)
 |   +-- Template_Type_Code (template type code) [PRIMARY] [FOREIGN]
 |   +-- Template_Type_Description (template type description)
 +-- Templates (templates)
 |   +-- Template_ID (template id) [PRIMARY] [FOREIGN]
 |   +-- Version_Number (version number)
 |   +-- Template_Type_Code (template type code) [FOREIGN]
 |   +-- Date_Effective_From (date effective from)
 |   +-- Date_Effective_To (date effective to)
 |   +-- Template_Details (template details)
 +-- Documents (documents)
 |   +-- Document_ID (document id) [PRIMARY] [FOREIGN]
 |   +-- Template_ID (template id) [FOREIGN]
 |   +-- Document_Name (document name)
 |   +-- Document_Description (document description)
 |   +-- Other_Details (other details)
 +-- Paragraphs (paragraphs)
     +-- Paragraph_ID (paragraph id) [PRIMARY]
     +-- Document_ID (document id) [FOREIGN]
     +-- Paragraph_Text (paragraph text)
     +-- Other_Details (other details)
NL: b'Return the version numbers and template type codes of templates with a version number greater than 5.'
NL tokens: [b'return', b'the', b'version', b'numbers', b'and', b'template', b'type', b'codes', b'of', b'template', b'##s', b'with', b'a', b'version', b'number', b'greater', b'than', b'5', b'.']
 32%|███▏      | 42/130 [06:04<02:44,  1.87s/it]NL tokens (original): [b'Return', b'the', b'version', b'numbers', b'and', b'template', b'type', b'codes', b'of', b'template', b'##s', b'with', b'a', b'version', b'number', b'greater', b'than', b'5', b'.']
['[CLS]', 'return', 'the', 'version', 'numbers', 'and', 'template', 'type', 'codes', 'of', 'template', '##s', 'with', 'a', 'version', 'number', 'greater', 'than', '5', '.', '[SEP]', '*', '[unused50]', 'reference', 'template', 'types', '[unused51]', 'template', 'type', 'code', '[unused51]', 'template', 'type', 'description', '[unused50]', 'template', '##s', '[unused51]', 'template', 'id', '[unused51]', 'version', 'number', '[unused51]', 'template', 'type', 'code', '[unused51]', 'date', 'effective', 'from', '[unused51]', 'date', 'effective', 'to', '[unused51]', 'template', 'details', '[unused50]', 'documents', '[unused51]', 'document', 'id', '[unused51]', 'template', 'id', '[unused51]', 'document', 'name', '[unused51]', 'document', 'description', '[unused51]', 'other', 'details', '[unused50]', 'paragraph', '##s', '[unused51]', 'paragraph', 'id', '[unused51]', 'document', 'id', '[unused51]', 'paragraph', 'text', '[unused51]', 'other', 'details', '[SEP]']
Target 0: b'SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5'
Target TF-P tokens: from Templates where Templates.Version_Number > 5 select Templates.Version_Number , Templates.Template_Type_Code

[WRONG] [medium] Pred 0:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > 5' (-0.054) (length=11)
[CORRE] [medium] Pred 1:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5' (-0.711) (length=11)
Error Case 108

Parsing error: from Templates select Templates.Version_Number , Templates.Template_Type_Code order by Templates.Date_Effective_To 1 limit 1
Example 335
cre_Doc_Template_Mgt
 +-- Ref_Template_Types (reference template types)
 |   +-- Template_Type_Code (template type code) [PRIMARY] [FOREIGN]
 |   +-- Template_Type_Description (template type description)
 +-- Templates (templates)
 |   +-- Template_ID (template id) [PRIMARY] [FOREIGN]
 |   +-- Version_Number (version number)
 |   +-- Template_Type_Code (template type code) [FOREIGN]
 |   +-- Date_Effective_From (date effective from)
 |   +-- Date_Effective_To (date effective to)
 |   +-- Template_Details (template details)
 +-- Documents (documents)
 |   +-- Document_ID (document id) [PRIMARY] [FOREIGN]
 |   +-- Template_ID (template id) [FOREIGN]
 |   +-- Document_Name (document name)
 |   +-- Document_Description (document description)
 |   +-- Other_Details (other details)
 +-- Paragraphs (paragraphs)
     +-- Paragraph_ID (paragraph id) [PRIMARY]
     +-- Document_ID (document id) [FOREIGN]
     +-- Paragraph_Text (paragraph text)
     +-- Other_Details (other details)
NL: b'What the smallest version number and its template type code?'
NL tokens: [b'what', b'the', b'smallest', b'version', b'number', b'and', b'its', b'template', b'type', b'code', b'?']
NL tokens (original): [b'What', b'the', b'smallest', b'version', b'number', b'and', b'its', b'template', b'type', b'code', b'?']
['[CLS]', 'what', 'the', 'smallest', 'version', 'number', 'and', 'its', 'template', 'type', 'code', '?', '[SEP]', '*', '[unused50]', 'reference', 'template', 'types', '[unused51]', 'template', 'type', 'code', '[unused51]', 'template', 'type', 'description', '[unused50]', 'template', '##s', '[unused51]', 'template', 'id', '[unused51]', 'version', 'number', '[unused51]', 'template', 'type', 'code', '[unused51]', 'date', 'effective', 'from', '[unused51]', 'date', 'effective', 'to', '[unused51]', 'template', 'details', '[unused50]', 'documents', '[unused51]', 'document', 'id', '[unused51]', 'template', 'id', '[unused51]', 'document', 'name', '[unused51]', 'document', 'description', '[unused51]', 'other', 'details', '[unused50]', 'paragraph', '##s', '[unused51]', 'paragraph', 'id', '[unused51]', 'document', 'id', '[unused51]', 'paragraph', 'text', '[unused51]', 'other', 'details', '[SEP]']
Target 0: b'SELECT min(Version_Number) ,  template_type_code FROM Templates'
Target TF-P tokens: from Templates select min (Templates.Version_Number) , Templates.Template_Type_Code

[WRONG] [medium] Pred 0:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Date_Effective_To LIMIT 1' (-0.106) (length=11)
[WRONG] [medium] Pred 1:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Version_Number LIMIT 1' (-0.493) (length=11)
[WRONG] [medium] Pred 2:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Date_Effective_To ASC LIMIT 1' (-1.940) (length=12)
[WRONG] [medium] Pred 3:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Date_Effective_From LIMIT 1' (-2.385) (length=11)
[WRONG] [medium] Pred 4:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Version_Number ASC LIMIT 1' (-2.752) (length=12)
[WRONG] [medium] Pred 5:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Version_Number LIMIT 1' (-3.163) (length=13)
[WRONG] [medium] Pred 6:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Template_Type_Code LIMIT 1' (-3.245) (length=11)
[WRONG] [medium] Pred 7:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Version_Number LIMIT 1' (-3.305) (length=13)
[WRONG] [medium] Pred 8:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates GROUP BY Templates.Version_Number ORDER BY COUNT(*) LIMIT 1' (-3.683) (length=16)
[WRONG] [medium] Pred 9:	b'SELECT Templates.Version_Number, Templates.Date_Effective_To FROM Templates ORDER BY Templates.Date_Effective_To LIMIT 1' (-3.810) (length=11)
[WRONG] [medium] Pred 10:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Date_Effective_To LIMIT 1' (-4.306) (length=13)
[WRONG] [medium] Pred 11:	b'SELECT MIN(Templates.Version_Number), Templates.Template_Type_Code FROM Templates ORDER BY Templates.Version_Number LIMIT 1' (-4.318) (length=14)
[WRONG] [medium] Pred 12:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Date_Effective_To DESC LIMIT 1' (-4.369) (length=12)
[WRONG] [medium] Pred 13:	b'SELECT DISTINCT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Date_Effective_To LIMIT 1' (-4.385) (length=12)
[WRONG] [medium] Pred 14:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Version_Number DESC LIMIT 1' (-4.762) (length=12)
Error Case 109

Example 336
cre_Doc_Template_Mgt
 +-- Ref_Template_Types (reference template types)
 |   +-- Template_Type_Code (template type code) [PRIMARY] [FOREIGN]
 |   +-- Template_Type_Description (template type description)
 +-- Templates (templates)
 |   +-- Template_ID (template id) [PRIMARY] [FOREIGN]
 |   +-- Version_Number (version number)
 |   +-- Template_Type_Code (template type code) [FOREIGN]
 |   +-- Date_Effective_From (date effective from)
 |   +-- Date_Effective_To (date effective to)
 |   +-- Template_Details (template details)
 +-- Documents (documents)
 |   +-- Document_ID (document id) [PRIMARY] [FOREIGN]
 |   +-- Template_ID (template id) [FOREIGN]
 |   +-- Document_Name (document name)
 |   +-- Document_Description (document description)
 |   +-- Other_Details (other details)
 +-- Paragraphs (paragraphs)
     +-- Paragraph_ID (paragraph id) [PRIMARY]
     +-- Document_ID (document id) [FOREIGN]
     +-- Paragraph_Text (paragraph text)
     +-- Other_Details (other details)
NL: b'Return the lowest version number, along with its corresponding template type code.'
NL tokens: [b'return', b'the', b'lowest', b'version', b'number', b',', b'along', b'with', b'its', b'corresponding', b'template', b'type', b'code', b'.']
NL tokens (original): [b'Return', b'the', b'lowest', b'version', b'number', b',', b'along', b'with', b'its', b'corresponding', b'template', b'type', b'code', b'.']
['[CLS]', 'return', 'the', 'lowest', 'version', 'number', ',', 'along', 'with', 'its', 'corresponding', 'template', 'type', 'code', '.', '[SEP]', '*', '[unused50]', 'reference', 'template', 'types', '[unused51]', 'template', 'type', 'code', '[unused51]', 'template', 'type', 'description', '[unused50]', 'template', '##s', '[unused51]', 'template', 'id', '[unused51]', 'version', 'number', '[unused51]', 'template', 'type', 'code', '[unused51]', 'date', 'effective', 'from', '[unused51]', 'date', 'effective', 'to', '[unused51]', 'template', 'details', '[unused50]', 'documents', '[unused51]', 'document', 'id', '[unused51]', 'template', 'id', '[unused51]', 'document', 'name', '[unused51]', 'document', 'description', '[unused51]', 'other', 'details', '[unused50]', 'paragraph', '##s', '[unused51]', 'paragraph', 'id', '[unused51]', 'document', 'id', '[unused51]', 'paragraph', 'text', '[unused51]', 'other', 'details', '[SEP]']
Target 0: b'SELECT min(Version_Number) ,  template_type_code FROM Templates'
Target TF-P tokens: from Templates select min (Templates.Version_Number) , Templates.Template_Type_Code

[WRONG] [medium] Pred 0:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Version_Number LIMIT 1' (-0.001) (length=11)
[WRONG] [medium] Pred 1:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Version_Number ASC LIMIT 1' (-2.304) (length=12)
[WRONG] [medium] Pred 2:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Date_Effective_To LIMIT 1' (-2.473) (length=11)
[WRONG] [medium] Pred 3:	b'SELECT Templates.Version_Number, Templates.Date_Effective_To FROM Templates ORDER BY Templates.Version_Number LIMIT 1' (-3.264) (length=11)
[WRONG] [medium] Pred 4:	b'SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Version_Number LIMIT 1' (-3.543) (length=13)
[WRONG] [medium] Pred 5:	b'SELECT MIN(Templates.Version_Number), Templates.Template_Type_Code FROM Templates ORDER BY Templates.Version_Number LIMIT 1' (-3.763) (length=14)
[WRONG] [medium] Pred 6:	b'SELECT MAX(Templates.Version_Number), Templates.Template_Type_Code FROM Templates ORDER BY Templates.Version_Number LIMIT 1' (-3.832) (length=14)
[CORRE] [medium] Pred 7:	b'SELECT MIN(Templates.Version_Number), Templates.Template_Type_Code FROM Templates' (-4.103) (length=10)
Error Case 110

Example 341
cre_Doc_Template_Mgt
 +-- Ref_Template_Types (reference template types)
 |   +-- Template_Type_Code (template type code) [PRIMARY] [FOREIGN]
 |   +-- Template_Type_Description (template type description)
 +-- Templates (templates)
 |   +-- Template_ID (template id) [PRIMARY] [FOREIGN]
 |   +-- Version_Number (version number)
 |   +-- Template_Type_Code (template type code) [FOREIGN]
 |   +-- Date_Effective_From (date effective from)
 |   +-- Date_Effective_To (date effective to)
 |   +-- Template_Details (template details)
 +-- Documents (documents)
 |   +-- Document_ID (document id) [PRIMARY] [FOREIGN]
 |   +-- Template_ID (template id) [FOREIGN]
 |   +-- Document_Name (document name)
 |   +-- Document_Description (document description)
 |   +-- Other_Details (other details)
 +-- Paragraphs (paragraphs)
     +-- Paragraph_ID (paragraph id) [PRIMARY]
     +-- Document_ID (document id) [FOREIGN]
     +-- Paragraph_Text (paragraph text)
     +-- Other_Details (other details)
NL: b'Show all template type codes and the number of documents using each type.'
NL tokens: [b'show', b'all', b'template', b'type', b'codes', b'and', b'the', b'number', b'of', b'documents', b'using', b'each', b'type', b'.']
NL tokens (original): [b'Show', b'all', b'template', b'type', b'codes', b'and', b'the', b'number', b'of', b'documents', b'using', b'each', b'type', b'.']
['[CLS]', 'show', 'all', 'template', 'type', 'codes', 'and', 'the', 'number', 'of', 'documents', 'using', 'each', 'type', '.', '[SEP]', '*', '[unused50]', 'reference', 'template', 'types', '[unused51]', 'template', 'type', 'code', '[unused51]', 'template', 'type', 'description', '[unused50]', 'template', '##s', '[unused51]', 'template', 'id', '[unused51]', 'version', 'number', '[unused51]', 'template', 'type', 'code', '[unused51]', 'date', 'effective', 'from', '[unused51]', 'date', 'effective', 'to', '[unused51]', 'template', 'details', '[unused50]', 'documents', '[unused51]', 'document', 'id', '[unused51]', 'template', 'id', '[unused51]', 'document', 'name', '[unused51]', 'document', 'description', '[unused51]', 'other', 'details', '[unused50]', 'paragraph', '##s', '[unused51]', 'paragraph', 'id', '[unused51]', 'document', 'id', '[unused51]', 'paragraph', 'text', '[unused51]', 'other', 'details', '[SEP]']
Target 0: b'SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code'
Target TF-P tokens: from Templates join Documents on Templates.Template_ID = Documents.Template_ID group by Templates.Template_Type_Code select Templates.Template_Type_Code , count (*)

[WRONG] [medium] Pred 0:	b'SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code' (-0.000) (length=12)
[WRONG] [medium] Pred 1:	b'SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code HAVING COUNT(*) > 1' (-3.579) (length=19)
[WRONG] [medium] Pred 2:	b'SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code' (-3.696) (length=17)
[CORRE] [medium] Pred 3:	b'SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_Type_Code' (-4.355) (length=18)
Error Case 111

Parsing error: from Templates group by Templates.Template_Type_Code having count (*)) select Templates.Template_Type_Code , count (*)
Example 342
cre_Doc_Template_Mgt
 +-- Ref_Template_Types (reference template types)
 |   +-- Template_Type_Code (template type code) [PRIMARY] [FOREIGN]
 |   +-- Template_Type_Description (template type description)
 +-- Templates (templates)
 |   +-- Template_ID (template id) [PRIMARY] [FOREIGN]
 |   +-- Version_Number (version number)
 |   +-- Template_Type_Code (template type code) [FOREIGN]
 |   +-- Date_Effective_From (date effective from)
 |   +-- Date_Effective_To (date effective to)
 |   +-- Template_Details (template details)
 +-- Documents (documents)
 |   +-- Document_ID (document id) [PRIMARY] [FOREIGN]
 |   +-- Template_ID (template id) [FOREIGN]
 |   +-- Document_Name (document name)
 |   +-- Document_Description (document description)
 |   +-- Other_Details (other details)
 +-- Paragraphs (paragraphs)
     +-- Paragraph_ID (paragraph id) [PRIMARY]
     +-- Document_ID (document id) [FOREIGN]
     +-- Paragraph_Text (paragraph text)
     +-- Other_Details (other details)
NL: b'What are the different template type codes, and how many documents use each type?'
NL tokens: [b'what', b'are', b'the', b'different', b'template', b'type', b'codes', b',', b'and', b'how', b'many', b'documents', b'use', b'each', b'type', b'?']
NL tokens (original): [b'What', b'are', b'the', b'different', b'template', b'type', b'codes', b',', b'and', b'how', b'many', b'documents', b'use', b'each', b'type', b'?']
 33%|███▎      | 43/130 [06:07<02:55,  2.02s/it]['[CLS]', 'what', 'are', 'the', 'different', 'template', 'type', 'codes', ',', 'and', 'how', 'many', 'documents', 'use', 'each', 'type', '?', '[SEP]', '*', '[unused50]', 'reference', 'template', 'types', '[unused51]', 'template', 'type', 'code', '[unused51]', 'template', 'type', 'description', '[unused50]', 'template', '##s', '[unused51]', 'template', 'id', '[unused51]', 'version', 'number', '[unused51]', 'template', 'type', 'code', '[unused51]', 'date', 'effective', 'from', '[unused51]', 'date', 'effective', 'to', '[unused51]', 'template', 'details', '[unused50]', 'documents', '[unused51]', 'document', 'id', '[unused51]', 'template', 'id', '[unused51]', 'document', 'name', '[unused51]', 'document', 'description', '[unused51]', 'other', 'details', '[unused50]', 'paragraph', '##s', '[unused51]', 'paragraph', 'id', '[unused51]', 'document', 'id', '[unused51]', 'paragraph', 'text', '[unused51]', 'other', 'details', '[SEP]']
Target 0: b'SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code'
Target TF-P tokens: from Templates join Documents on Templates.Template_ID = Documents.Template_ID group by Templates.Template_Type_Code select Templates.Template_Type_Code , count (*)

[WRONG] [medium] Pred 0:	b'SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code' (-0.000) (length=12)
[WRONG] [medium] Pred 1:	b'SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code' (-3.707) (length=17)
[WRONG] [medium] Pred 2:	b'SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code HAVING COUNT(*) > 1' (-3.729) (length=19)
[CORRE] [medium] Pred 3:	b'SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_Type_Code' (-4.173) (length=18)
Error Case 112

Example 344
cre_Doc_Template_Mgt
 +-- Ref_Template_Types (reference template types)
 |   +-- Template_Type_Code (template type code) [PRIMARY] [FOREIGN]
 |   +-- Template_Type_Description (template type description)
 +-- Templates (templates)
 |   +-- Template_ID (template id) [PRIMARY] [FOREIGN]
 |   +-- Version_Number (version number)
 |   +-- Template_Type_Code (template type code) [FOREIGN]
 |   +-- Date_Effective_From (date effective from)
 |   +-- Date_Effective_To (date effective to)
 |   +-- Template_Details (template details)
 +-- Documents (documents)
 |   +-- Document_ID (document id) [PRIMARY] [FOREIGN]
 |   +-- Template_ID (template id) [FOREIGN]
 |   +-- Document_Name (document name)
 |   +-- Document_Description (document description)
 |   +-- Other_Details (other details)
 +-- Paragraphs (paragraphs)
     +-- Paragraph_ID (paragraph id) [PRIMARY]
     +-- Document_ID (document id) [FOREIGN]
     +-- Paragraph_Text (paragraph text)
     +-- Other_Details (other details)
NL: b'Return the code of the template type that is most commonly used in documents.'
NL tokens: [b'return', b'the', b'code', b'of', b'the', b'template', b'type', b'that', b'is', b'most', b'commonly', b'used', b'in', b'documents', b'.']
NL tokens (original): [b'Return', b'the', b'code', b'of', b'the', b'template', b'type', b'that', b'is', b'most', b'commonly', b'used', b'in', b'documents', b'.']
['[CLS]', 'return', 'the', 'code', 'of', 'the', 'template', 'type', 'that', 'is', 'most', 'commonly', 'used', 'in', 'documents', '.', '[SEP]', '*', '[unused50]', 'reference', 'template', 'types', '[unused51]', 'template', 'type', 'code', '[unused51]', 'template', 'type', 'description', '[unused50]', 'template', '##s', '[unused51]', 'template', 'id', '[unused51]', 'version', 'number', '[unused51]', 'template', 'type', 'code', '[unused51]', 'date', 'effective', 'from', '[unused51]', 'date', 'effective', 'to', '[unused51]', 'template', 'details', '[unused50]', 'documents', '[unused51]', 'document', 'id', '[unused51]', 'template', 'id', '[unused51]', 'document', 'name', '[unused51]', 'document', 'description', '[unused51]', 'other', 'details', '[unused50]', 'paragraph', '##s', '[unused51]', 'paragraph', 'id', '[unused51]', 'document', 'id', '[unused51]', 'paragraph', 'text', '[unused51]', 'other', 'details', '[SEP]']
Target 0: b'SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from Templates join Documents on Templates.Template_ID = Documents.Template_ID group by Templates.Template_Type_Code select Templates.Template_Type_Code order by count (*) desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1' (-0.000) (length=15)
[WRONG] [extra] Pred 1:	b'SELECT Templates.Template_Type_Code, COUNT(*) FROM Templates GROUP BY Templates.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1' (-3.900) (length=20)
[CORRE] [extra] Pred 2:	b'SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1' (-3.934) (length=21)
Error Case 113

Parsing error: from Ref_Template_Types select Ref_Template_Types.Template_Type_Code except from Templates group by Templates.Template_Type_Code having in (*) > VALUE select Templates.Template_Type_Code
Parsing error: from Ref_Template_Types select Ref_Template_Types.Template_Type_Code except from Templates group by Templates.Template_Type_Code having min (Templates.Date_Effective_To)) select Templates.Template_Type_Code
Parsing error: from Ref_Template_Types select Ref_Template_Types.Template_Type_Code except from Templates group by Templates.Template_Type_Code having in (*)) select Templates.Template_Type_Code
Parsing error: from Ref_Template_Types and Ref_Template_Types.Template_Type_Code not in (from Templates select Templates.Template_Type_Code) select Ref_Template_Types.Template_Type_Code
Parsing error: from Ref_Template_Types select Ref_Template_Types.Template_Type_Code except from Templates group by Templates.Template_Type_Code having min (Templates.Date_Effective_To)
Parsing error: from Ref_Template_Types no Ref_Template_Types.Template_Type_Code not in (from Templates select Templates.Template_Type_Code) select Ref_Template_Types.Template_Type_Code
Parsing error: from Ref_Template_Types select Ref_Template_Types.Template_Type_Code except from Templates group by Templates.Template_Type_Code having in (*)
Example 345
cre_Doc_Template_Mgt
 +-- Ref_Template_Types (reference template types)
 |   +-- Template_Type_Code (template type code) [PRIMARY] [FOREIGN]
 |   +-- Template_Type_Description (template type description)
 +-- Templates (templates)
 |   +-- Template_ID (template id) [PRIMARY] [FOREIGN]
 |   +-- Version_Number (version number)
 |   +-- Template_Type_Code (template type code) [FOREIGN]
 |   +-- Date_Effective_From (date effective from)
 |   +-- Date_Effective_To (date effective to)
 |   +-- Template_Details (template details)
 +-- Documents (documents)
 |   +-- Document_ID (document id) [PRIMARY] [FOREIGN]
 |   +-- Template_ID (template id) [FOREIGN]
 |   +-- Document_Name (document name)
 |   +-- Document_Description (document description)
 |   +-- Other_Details (other details)
 +-- Paragraphs (paragraphs)
     +-- Paragraph_ID (paragraph id) [PRIMARY]
     +-- Document_ID (document id) [FOREIGN]
     +-- Paragraph_Text (paragraph text)
     +-- Other_Details (other details)
NL: b'Show all template type codes that are not used by any document.'
NL tokens: [b'show', b'all', b'template', b'type', b'codes', b'that', b'are', b'not', b'used', b'by', b'any', b'document', b'.']
NL tokens (original): [b'Show', b'all', b'template', b'type', b'codes', b'that', b'are', b'not', b'used', b'by', b'any', b'document', b'.']
['[CLS]', 'show', 'all', 'template', 'type', 'codes', 'that', 'are', 'not', 'used', 'by', 'any', 'document', '.', '[SEP]', '*', '[unused50]', 'reference', 'template', 'types', '[unused51]', 'template', 'type', 'code', '[unused51]', 'template', 'type', 'description', '[unused50]', 'template', '##s', '[unused51]', 'template', 'id', '[unused51]', 'version', 'number', '[unused51]', 'template', 'type', 'code', '[unused51]', 'date', 'effective', 'from', '[unused51]', 'date', 'effective', 'to', '[unused51]', 'template', 'details', '[unused50]', 'documents', '[unused51]', 'document', 'id', '[unused51]', 'template', 'id', '[unused51]', 'document', 'name', '[unused51]', 'document', 'description', '[unused51]', 'other', 'details', '[unused50]', 'paragraph', '##s', '[unused51]', 'paragraph', 'id', '[unused51]', 'document', 'id', '[unused51]', 'paragraph', 'text', '[unused51]', 'other', 'details', '[SEP]']
Target 0: b'SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id'
Target TF-P tokens: from Templates select Templates.Template_Type_Code except from Templates join Documents on Templates.Template_ID = Documents.Template_ID select Templates.Template_Type_Code

[WRONG] [hard] Pred 0:	b'SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT Templates.Template_Type_Code FROM Templates' (-0.000) (length=10)
[WRONG] [hard] Pred 1:	b'SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT Templates.Template_Type_Code FROM Templates INTERSECT SELECT Templates.Template_Type_Code FROM Templates' (-3.874) (length=15)
[WRONG] [hard] Pred 2:	b'SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code HAVING MIN(Templates.Date_Effective_To) > "VALUE"' (-4.358) (length=19)
[WRONG] [hard] Pred 3:	b'SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From > "document VALUE"' (-4.550) (length=17)
[WRONG] [hard] Pred 4:	b'SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code NOT IN (SELECT Templates.Template_Type_Code FROM Templates)' (-4.692) (length=15)
[WRONG] [hard] Pred 5:	b'SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From < "document VALUE"' (-4.699) (length=17)
[WRONG] [hard] Pred 6:	b'SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT Templates.Template_Type_Code, Templates.Date_Effective_To FROM Templates' (-4.732) (length=12)
[WRONG] [hard] Pred 7:	b'SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT Templates.Template_Type_Code IN (*) FROM Templates' (-4.910) (length=14)
[WRONG] [hard] Pred 8:	b'SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From = "document"' (-5.026) (length=16)
Error Case 114

Parsing error: from Ref_Template_Types select Ref_Template_Types.Template_Type_Code except from Templates group by Templates.Template_Type_Code having min (Templates.Date_Effective_To)) select Templates.Template_Type_Code
Parsing error: from Ref_Template_Types select Ref_Template_Types.Template_Type_Code except from Templates group by Templates.Template_Type_Code having in (*) > VALUE select Templates.Template_Type_Code
Parsing error: from Ref_Template_Types select Ref_Template_Types.Template_Type_Code except from Templates group by Templates.Template_Type_Code having in (*) > 1 select Templates.Template_Type_Code
Parsing error: from Ref_Template_Types select Ref_Template_Types.Template_Type_Code except from Templates group by Templates.Template_Type_Code having in (*) = 1 select Templates.Template_Type_Code
Parsing error: from Ref_Template_Types and Ref_Template_Types.Template_Type_Code not in (from Templates select Templates.Template_Type_Code) select Ref_Template_Types.Template_Type_Code
Parsing error: from Ref_Template_Types no Ref_Template_Types.Template_Type_Code not in (from Templates select Templates.Template_Type_Code) select Ref_Template_Types.Template_Type_Code
Parsing error: from Ref_Template_Types not Ref_Template_Types.Template_Type_Code not in (from Templates select Templates.Template_Type_Code) select Ref_Template_Types.Template_Type_Code
Parsing error: from Ref_Template_Types select Ref_Template_Types.Template_Type_Code except from Templates group by Templates.Template_Type_Code having min (Templates.Date_Effective_To)
Example 346
cre_Doc_Template_Mgt
 +-- Ref_Template_Types (reference template types)
 |   +-- Template_Type_Code (template type code) [PRIMARY] [FOREIGN]
 |   +-- Template_Type_Description (template type description)
 +-- Templates (templates)
 |   +-- Template_ID (template id) [PRIMARY] [FOREIGN]
 |   +-- Version_Number (version number)
 |   +-- Template_Type_Code (template type code) [FOREIGN]
 |   +-- Date_Effective_From (date effective from)
 |   +-- Date_Effective_To (date effective to)
 |   +-- Template_Details (template details)
 +-- Documents (documents)
 |   +-- Document_ID (document id) [PRIMARY] [FOREIGN]
 |   +-- Template_ID (template id) [FOREIGN]
 |   +-- Document_Name (document name)
 |   +-- Document_Description (document description)
 |   +-- Other_Details (other details)
 +-- Paragraphs (paragraphs)
     +-- Paragraph_ID (paragraph id) [PRIMARY]
     +-- Document_ID (document id) [FOREIGN]
     +-- Paragraph_Text (paragraph text)
     +-- Other_Details (other details)
NL: b'What are the codes of template types that are not used for any document?'
NL tokens: [b'what', b'are', b'the', b'codes', b'of', b'template', b'types', b'that', b'are', b'not', b'used', b'for', b'any', b'document', b'?']
NL tokens (original): [b'What', b'are', b'the', b'codes', b'of', b'template', b'types', b'that', b'are', b'not', b'used', b'for', b'any', b'document', b'?']
['[CLS]', 'what', 'are', 'the', 'codes', 'of', 'template', 'types', 'that', 'are', 'not', 'used', 'for', 'any', 'document', '?', '[SEP]', '*', '[unused50]', 'reference', 'template', 'types', '[unused51]', 'template', 'type', 'code', '[unused51]', 'template', 'type', 'description', '[unused50]', 'template', '##s', '[unused51]', 'template', 'id', '[unused51]', 'version', 'number', '[unused51]', 'template', 'type', 'code', '[unused51]', 'date', 'effective', 'from', '[unused51]', 'date', 'effective', 'to', '[unused51]', 'template', 'details', '[unused50]', 'documents', '[unused51]', 'document', 'id', '[unused51]', 'template', 'id', '[unused51]', 'document', 'name', '[unused51]', 'document', 'description', '[unused51]', 'other', 'details', '[unused50]', 'paragraph', '##s', '[unused51]', 'paragraph', 'id', '[unused51]', 'document', 'id', '[unused51]', 'paragraph', 'text', '[unused51]', 'other', 'details', '[SEP]']
Target 0: b'SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id'
Target TF-P tokens: from Templates select Templates.Template_Type_Code except from Templates join Documents on Templates.Template_ID = Documents.Template_ID select Templates.Template_Type_Code

[WRONG] [hard] Pred 0:	b'SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT Templates.Template_Type_Code FROM Templates' (-0.000) (length=10)
[WRONG] [hard] Pred 1:	b'SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT Templates.Template_Type_Code FROM Templates INTERSECT SELECT Templates.Template_Type_Code FROM Templates' (-4.308) (length=15)
[WRONG] [hard] Pred 2:	b'SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code NOT IN (SELECT Templates.Template_Type_Code FROM Templates)' (-4.556) (length=15)
 34%|███▍      | 44/130 [06:09<03:09,  2.20s/it][WRONG] [hard] Pred 3:	b'SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From = "document VALUE"' (-4.762) (length=17)
[WRONG] [hard] Pred 4:	b'SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT Templates.Template_Type_Code, Templates.Date_Effective_To FROM Templates' (-4.835) (length=12)
[WRONG] [hard] Pred 5:	b'SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_From = "document"' (-4.957) (length=16)
[WRONG] [hard] Pred 6:	b'SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT Templates.Template_Type_Code FROM Templates WHERE Templates.Date_Effective_To = "document"' (-4.976) (length=16)
[WRONG] [hard] Pred 7:	b'SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT Templates.Template_Type_Code IN (*) FROM Templates' (-5.143) (length=14)
Error Case 115

Parsing error: from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where Templates.Date_Effective_From > "VALUE select distinct Ref_Template_Types.Template_Type_Description"
Example 353
cre_Doc_Template_Mgt
 +-- Ref_Template_Types (reference template types)
 |   +-- Template_Type_Code (template type code) [PRIMARY] [FOREIGN]
 |   +-- Template_Type_Description (template type description)
 +-- Templates (templates)
 |   +-- Template_ID (template id) [PRIMARY] [FOREIGN]
 |   +-- Version_Number (version number)
 |   +-- Template_Type_Code (template type code) [FOREIGN]
 |   +-- Date_Effective_From (date effective from)
 |   +-- Date_Effective_To (date effective to)
 |   +-- Template_Details (template details)
 +-- Documents (documents)
 |   +-- Document_ID (document id) [PRIMARY] [FOREIGN]
 |   +-- Template_ID (template id) [FOREIGN]
 |   +-- Document_Name (document name)
 |   +-- Document_Description (document description)
 |   +-- Other_Details (other details)
 +-- Paragraphs (paragraphs)
     +-- Paragraph_ID (paragraph id) [PRIMARY]
     +-- Document_ID (document id) [FOREIGN]
     +-- Paragraph_Text (paragraph text)
     +-- Other_Details (other details)
NL: b'What are the distinct template type descriptions for the templates ever used by any document?'
NL tokens: [b'what', b'are', b'the', b'distinct', b'template', b'type', b'descriptions', b'for', b'the', b'template', b'##s', b'ever', b'used', b'by', b'any', b'document', b'?']
NL tokens (original): [b'What', b'are', b'the', b'distinct', b'template', b'type', b'descriptions', b'for', b'the', b'template', b'##s', b'ever', b'used', b'by', b'any', b'document', b'?']
['[CLS]', 'what', 'are', 'the', 'distinct', 'template', 'type', 'descriptions', 'for', 'the', 'template', '##s', 'ever', 'used', 'by', 'any', 'document', '?', '[SEP]', '*', '[unused50]', 'reference', 'template', 'types', '[unused51]', 'template', 'type', 'code', '[unused51]', 'template', 'type', 'description', '[unused50]', 'template', '##s', '[unused51]', 'template', 'id', '[unused51]', 'version', 'number', '[unused51]', 'template', 'type', 'code', '[unused51]', 'date', 'effective', 'from', '[unused51]', 'date', 'effective', 'to', '[unused51]', 'template', 'details', '[unused50]', 'documents', '[unused51]', 'document', 'id', '[unused51]', 'template', 'id', '[unused51]', 'document', 'name', '[unused51]', 'document', 'description', '[unused51]', 'other', 'details', '[unused50]', 'paragraph', '##s', '[unused51]', 'paragraph', 'id', '[unused51]', 'document', 'id', '[unused51]', 'paragraph', 'text', '[unused51]', 'other', 'details', '[SEP]']
Target 0: b'SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID'
Target TF-P tokens: from Ref_Template_Types join Templates on Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code join Documents on Templates.Template_ID = Documents.Template_ID select distinct Ref_Template_Types.Template_Type_Description

[WRONG] [medium] Pred 0:	b'SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code' (-0.577) (length=12)
[WRONG] [medium] Pred 1:	b'SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Documents ON Ref_Template_Types.Template_Type_Code = Documents.Template_ID' (-0.772) (length=12)
[WRONG] [medium] Pred 2:	b'SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code' (-0.804) (length=12)
[WRONG] [medium] Pred 3:	b'SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Templates.Date_Effective_From > "VALUE-VALUE-VALUE VALUE : VALUE"' (-3.613) (length=25)
[WRONG] [medium] Pred 4:	b'SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Templates.Date_Effective_From > "VALUE %"' (-3.647) (length=19)
[CORRE] [medium] Pred 5:	b'SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID' (-3.844) (length=18)
Error Case 116

Parsing error: from Templates join Documents on Templates.Template_ID = Documents.Template_ID where Templates.Date_Effective_From > "VALUE-distinct Documents.Document_Description) select distinct Templates.Template_Details"
Parsing error: from Templates join Documents on Templates.Template_ID = Documents.Template_ID where Templates.Date_Effective_From > "VALUE-VALUE) select distinct Templates.Template_Details"
Parsing error: from Templates join Documents on Templates.Template_ID = Documents.Template_ID where Templates.Date_Effective_From > "VALUE select distinct Templates.Template_Details"
Parsing error: from Templates join Documents on Templates.Template_ID = Documents.Template_ID where Templates.Date_Effective_From > "VALUE-VALUE-VALUE VALUE : VALUE : distinct Templates.Template_Type_Code"
Parsing error: from Templates join Documents on Templates.Template_ID = Documents.Template_ID where Templates.Date_Effective_From > "VALUE select distinct Documents.Document_Description"
Parsing error: from Templates join Documents on Templates.Template_ID = Documents.Template_ID where Templates.Date_Effective_From > "VALUE-distinct Documents.Document_Description) select distinct Templates.Template_Type_Code"
Example 354
cre_Doc_Template_Mgt
 +-- Ref_Template_Types (reference template types)
 |   +-- Template_Type_Code (template type code) [PRIMARY] [FOREIGN]
 |   +-- Template_Type_Description (template type description)
 +-- Templates (templates)
 |   +-- Template_ID (template id) [PRIMARY] [FOREIGN]
 |   +-- Version_Number (version number)
 |   +-- Template_Type_Code (template type code) [FOREIGN]
 |   +-- Date_Effective_From (date effective from)
 |   +-- Date_Effective_To (date effective to)
 |   +-- Template_Details (template details)
 +-- Documents (documents)
 |   +-- Document_ID (document id) [PRIMARY] [FOREIGN]
 |   +-- Template_ID (template id) [FOREIGN]
 |   +-- Document_Name (document name)
 |   +-- Document_Description (document description)
 |   +-- Other_Details (other details)
 +-- Paragraphs (paragraphs)
     +-- Paragraph_ID (paragraph id) [PRIMARY]
     +-- Document_ID (document id) [FOREIGN]
     +-- Paragraph_Text (paragraph text)
     +-- Other_Details (other details)
NL: b'Return the different descriptions for templates that have been used in a document.'
NL tokens: [b'return', b'the', b'different', b'descriptions', b'for', b'template', b'##s', b'that', b'have', b'been', b'used', b'in', b'a', b'document', b'.']
 35%|███▍      | 45/130 [06:12<03:19,  2.35s/it]NL tokens (original): [b'Return', b'the', b'different', b'descriptions', b'for', b'template', b'##s', b'that', b'have', b'been', b'used', b'in', b'a', b'document', b'.']
['[CLS]', 'return', 'the', 'different', 'descriptions', 'for', 'template', '##s', 'that', 'have', 'been', 'used', 'in', 'a', 'document', '.', '[SEP]', '*', '[unused50]', 'reference', 'template', 'types', '[unused51]', 'template', 'type', 'code', '[unused51]', 'template', 'type', 'description', '[unused50]', 'template', '##s', '[unused51]', 'template', 'id', '[unused51]', 'version', 'number', '[unused51]', 'template', 'type', 'code', '[unused51]', 'date', 'effective', 'from', '[unused51]', 'date', 'effective', 'to', '[unused51]', 'template', 'details', '[unused50]', 'documents', '[unused51]', 'document', 'id', '[unused51]', 'template', 'id', '[unused51]', 'document', 'name', '[unused51]', 'document', 'description', '[unused51]', 'other', 'details', '[unused50]', 'paragraph', '##s', '[unused51]', 'paragraph', 'id', '[unused51]', 'document', 'id', '[unused51]', 'paragraph', 'text', '[unused51]', 'other', 'details', '[SEP]']
Target 0: b'SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID'
Target TF-P tokens: from Ref_Template_Types join Templates on Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code join Documents on Templates.Template_ID = Documents.Template_ID select distinct Ref_Template_Types.Template_Type_Description

[WRONG] [medium] Pred 0:	b'SELECT DISTINCT Templates.Template_Details FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID' (-0.214) (length=12)
[WRONG] [medium] Pred 1:	b'SELECT DISTINCT Documents.Document_Description FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID' (-0.492) (length=12)
[WRONG] [medium] Pred 2:	b'SELECT DISTINCT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID' (-0.498) (length=12)
[WRONG] [medium] Pred 3:	b'SELECT DISTINCT Templates.Template_Details FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Templates.Date_Effective_From > "VALUE-VALUE-VALUE VALUE : VALUE"' (-3.113) (length=25)
[WRONG] [medium] Pred 4:	b'SELECT DISTINCT Templates.Date_Effective_To FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID' (-3.274) (length=12)
[WRONG] [medium] Pred 5:	b'SELECT DISTINCT Documents.Document_Description FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Templates.Date_Effective_From > "VALUE-VALUE-VALUE VALUE : VALUE"' (-3.527) (length=25)
[WRONG] [medium] Pred 6:	b'SELECT DISTINCT Templates.Template_Details FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Templates.Date_Effective_From > "VALUE-VALUE-VALUE VALUE : VALUE : VALUE"' (-3.552) (length=27)
[WRONG] [medium] Pred 7:	b'SELECT DISTINCT Templates.Template_Details FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Templates.Date_Effective_From > "VALUE %"' (-3.593) (length=19)
[WRONG] [medium] Pred 8:	b'SELECT DISTINCT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Templates.Date_Effective_From > "VALUE-VALUE-VALUE VALUE : VALUE"' (-3.654) (length=25)
[WRONG] [medium] Pred 9:	b'SELECT DISTINCT Templates.Template_Details FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Templates.Date_Effective_From > "VALUE :"' (-3.892) (length=19)
Error Case 117

ERROR: Join condition does not match with table: ['Paragraphs', {'join': 'Ref_Template_Types', 'on': {'eq': ['Paragraphs.Document_ID', 'Paragraphs.Paragraph_ID']}}]
ERROR: Join condition does not match with table: ['Paragraphs', {'join': 'Templates', 'on': {'eq': ['Paragraphs.Document_ID', 'Paragraphs.Paragraph_ID']}}]
ERROR: Join condition does not match with table: ['Paragraphs', {'join': 'Documents', 'on': {'eq': ['Paragraphs.Document_ID', 'Paragraphs.Paragraph_ID']}}]
ERROR: Join condition does not match with table: ['Paragraphs', {'join': 'Ref_Template_Types', 'on': {'eq': ['Paragraphs.Paragraph_ID', 'Paragraphs.Document_ID']}}]
Example 361
cre_Doc_Template_Mgt
 +-- Ref_Template_Types (reference template types)
 |   +-- Template_Type_Code (template type code) [PRIMARY] [FOREIGN]
 |   +-- Template_Type_Description (template type description)
 +-- Templates (templates)
 |   +-- Template_ID (template id) [PRIMARY] [FOREIGN]
 |   +-- Version_Number (version number)
 |   +-- Template_Type_Code (template type code) [FOREIGN]
 |   +-- Date_Effective_From (date effective from)
 |   +-- Date_Effective_To (date effective to)
 |   +-- Template_Details (template details)
 +-- Documents (documents)
 |   +-- Document_ID (document id) [PRIMARY] [FOREIGN]
 |   +-- Template_ID (template id) [FOREIGN]
 |   +-- Document_Name (document name)
 |   +-- Document_Description (document description)
 |   +-- Other_Details (other details)
 +-- Paragraphs (paragraphs)
     +-- Paragraph_ID (paragraph id) [PRIMARY]
     +-- Document_ID (document id) [FOREIGN]
     +-- Paragraph_Text (paragraph text)
     +-- Other_Details (other details)
NL: b"Show paragraph details for paragraph with text 'Korea ' ."
NL tokens: [b'show', b'paragraph', b'details', b'for', b'paragraph', b'with', b'text', b"'", b'korea', b"'", b'.']
NL tokens (original): [b'Show', b'paragraph', b'details', b'for', b'paragraph', b'with', b'text', b"'", b'Korea', b"'", b'.']
['[CLS]', 'show', 'paragraph', 'details', 'for', 'paragraph', 'with', 'text', "'", 'korea', "'", '.', '[SEP]', '*', '[unused50]', 'reference', 'template', 'types', '[unused51]', 'template', 'type', 'code', '[unused51]', 'template', 'type', 'description', '[unused50]', 'template', '##s', '[unused51]', 'template', 'id', '[unused51]', 'version', 'number', '[unused51]', 'template', 'type', 'code', '[unused51]', 'date', 'effective', 'from', '[unused51]', 'date', 'effective', 'to', '[unused51]', 'template', 'details', '[unused50]', 'documents', '[unused51]', 'document', 'id', '[unused51]', 'template', 'id', '[unused51]', 'document', 'name', '[unused51]', 'document', 'description', '[unused51]', 'other', 'details', '[unused50]', 'paragraph', '##s', '[unused51]', 'paragraph', 'id', '[unused51]', 'document', 'id', '[unused51]', 'paragraph', 'text', '[unused49]', 'korea', '[unused51]', 'other', 'details', '[SEP]']
Target 0: b"select other_details from paragraphs where paragraph_text like 'korea'"
Target TF-P tokens: from Paragraphs where Paragraphs.Paragraph_Text like "Korea" select Paragraphs.Other_Details

[WRONG] [medium] Pred 0:	b'SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = "Korea"' (-0.000) (length=11)
[WRONG] [medium] Pred 1:	b'SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = "Korea" INTERSECT SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = "Korea"' (-3.728) (length=22)
[WRONG] [medium] Pred 2:	b'SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = "Korea" AND Paragraphs.Other_Details = "."' (-4.121) (length=17)
[WRONG] [medium] Pred 3:	b'SELECT Paragraphs.Other_Details FROM Paragraphs JOIN Paragraphs ON Paragraphs.Document_ID = Paragraphs.Paragraph_ID WHERE Paragraphs.Paragraph_Text = "Korea"' (-4.540) (length=17)
[WRONG] [medium] Pred 4:	b'SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = "Korea" OR Paragraphs.Paragraph_Text = "Korea"' (-4.662) (length=17)
[WRONG] [medium] Pred 5:	b'SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = "Korea" AND Paragraphs.Other_Details = "Korea"' (-4.877) (length=17)
[WRONG] [medium] Pred 6:	b'SELECT Paragraphs.Paragraph_Text FROM Paragraphs WHERE Paragraphs.Paragraph_Text = "Korea"' (-5.180) (length=11)
[WRONG] [medium] Pred 7:	b'SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = "Korea"' (-5.290) (length=13)
 35%|███▌      | 46/130 [06:17<04:38,  3.32s/it][CORRE] [medium] Pred 8:	b'SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text LIKE "% Korea %"' (-5.886) (length=13)
Error Case 118

Parsing error: from Paragraphs group by Paragraphs.Document_ID select Paragraphs.Document_ID , count (*) order by limit (*)
Parsing error: from Paragraphs group by Paragraphs.Document_ID having count (*) > select Paragraphs.Document_ID , count (*) order by count (*)
Parsing error: from Paragraphs group by Paragraphs.Document_ID select Paragraphs.Document_ID , count (*) order by limit (Paragraphs.Document_ID)
Parsing error: from Paragraphs group by Paragraphs.Document_ID select Paragraphs.Document_ID , count (*) order by count (*))
Parsing error: from Paragraphs group by Paragraphs.Document_ID select Paragraphs.Document_ID , count (*) order by limit
Parsing error: from Paragraphs group by Paragraphs.Document_ID having count (*) > select Paragraphs.Document_ID , count (*)
Parsing error: from Paragraphs group by Paragraphs.Document_ID select Paragraphs.Document_ID , count (*) order by count (*) %
Parsing error: from Paragraphs group by Paragraphs.Document_ID select Paragraphs.Document_ID , count (*) order by count (*) limit
Example 367
cre_Doc_Template_Mgt
 +-- Ref_Template_Types (reference template types)
 |   +-- Template_Type_Code (template type code) [PRIMARY] [FOREIGN]
 |   +-- Template_Type_Description (template type description)
 +-- Templates (templates)
 |   +-- Template_ID (template id) [PRIMARY] [FOREIGN]
 |   +-- Version_Number (version number)
 |   +-- Template_Type_Code (template type code) [FOREIGN]
 |   +-- Date_Effective_From (date effective from)
 |   +-- Date_Effective_To (date effective to)
 |   +-- Template_Details (template details)
 +-- Documents (documents)
 |   +-- Document_ID (document id) [PRIMARY] [FOREIGN]
 |   +-- Template_ID (template id) [FOREIGN]
 |   +-- Document_Name (document name)
 |   +-- Document_Description (document description)
 |   +-- Other_Details (other details)
 +-- Paragraphs (paragraphs)
     +-- Paragraph_ID (paragraph id) [PRIMARY]
     +-- Document_ID (document id) [FOREIGN]
     +-- Paragraph_Text (paragraph text)
     +-- Other_Details (other details)
NL: b'Show all document ids and the number of paragraphs in each document. Order by document id.'
NL tokens: [b'show', b'all', b'document', b'id', b'##s', b'and', b'the', b'number', b'of', b'paragraph', b'##s', b'in', b'each', b'document', b'.', b'order', b'by', b'document', b'id', b'.']
NL tokens (original): [b'Show', b'all', b'document', b'id', b'##s', b'and', b'the', b'number', b'of', b'paragraph', b'##s', b'in', b'each', b'document', b'.', b'Order', b'by', b'document', b'id', b'.']
['[CLS]', 'show', 'all', 'document', 'id', '##s', 'and', 'the', 'number', 'of', 'paragraph', '##s', 'in', 'each', 'document', '.', 'order', 'by', 'document', 'id', '.', '[SEP]', '*', '[unused50]', 'reference', 'template', 'types', '[unused51]', 'template', 'type', 'code', '[unused51]', 'template', 'type', 'description', '[unused50]', 'template', '##s', '[unused51]', 'template', 'id', '[unused51]', 'version', 'number', '[unused51]', 'template', 'type', 'code', '[unused51]', 'date', 'effective', 'from', '[unused51]', 'date', 'effective', 'to', '[unused51]', 'template', 'details', '[unused50]', 'documents', '[unused51]', 'document', 'id', '[unused51]', 'template', 'id', '[unused51]', 'document', 'name', '[unused51]', 'document', 'description', '[unused51]', 'other', 'details', '[unused50]', 'paragraph', '##s', '[unused51]', 'paragraph', 'id', '[unused51]', 'document', 'id', '[unused51]', 'paragraph', 'text', '[unused51]', 'other', 'details', '[SEP]']
Target 0: b'SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id'
Target TF-P tokens: from Paragraphs group by Paragraphs.Document_ID select Paragraphs.Document_ID , count (*) order by Paragraphs.Document_ID

[WRONG] [medium] Pred 0:	b'SELECT Paragraphs.Document_ID, COUNT(*) FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY COUNT(*)' (-0.000) (length=17)
[WRONG] [medium] Pred 1:	b'SELECT Paragraphs.Document_ID, COUNT(*) FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY COUNT(*) ASC' (-3.015) (length=18)
[WRONG] [medium] Pred 2:	b'SELECT Paragraphs.Document_ID, COUNT(*) FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY COUNT(*) DESC' (-3.387) (length=18)
[WRONG] [medium] Pred 3:	b'SELECT Paragraphs.Document_ID, COUNT(*) FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY COUNT(*)' (-3.592) (length=19)
[WRONG] [medium] Pred 4:	b'SELECT Paragraphs.Document_ID, COUNT(*) FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY MOD(COUNT(*), Paragraphs.Document_ID)' (-3.615) (length=19)
[WRONG] [medium] Pred 5:	b'SELECT Paragraphs.Document_ID, COUNT(*) FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY SUM(Paragraphs.Document_ID)' (-3.657) (length=17)
[WRONG] [medium] Pred 6:	b'SELECT Paragraphs.Document_ID, COUNT(*) FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY COUNT(*),Paragraphs.Document_ID' (-3.835) (length=19)
[WRONG] [medium] Pred 7:	b'SELECT Paragraphs.Document_ID, COUNT(*) FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY COUNT(Paragraphs.Document_ID)' (-4.283) (length=17)
Error Case 119

Parsing error: from Paragraphs group by Paragraphs.Document_ID select Paragraphs.Document_ID , count (*) order by limit (*)
Parsing error: from Paragraphs group by Paragraphs.Document_ID select Paragraphs.Document_ID , count (*) order by count (*))
Parsing error: from Paragraphs group by Paragraphs.Document_ID select Paragraphs.Document_ID , count (*) order by count (*) %
Parsing error: from Paragraphs group by Paragraphs.Document_ID having count (*) > select Paragraphs.Document_ID order by count (*)
Parsing error: from Paragraphs group by Paragraphs.Document_ID select Paragraphs.Document_ID , count (*) order by count (*) >=
Parsing error: from Paragraphs group by Paragraphs.Document_ID select Paragraphs.Document_ID , count (*) , order by (*)
Parsing error: from Paragraphs group by Paragraphs.Document_ID select Paragraphs.Document_ID , count (*) order by count (*) 2
Parsing error: from Paragraphs group by Paragraphs.Document_ID select Paragraphs.Document_ID , count (*) order by count (*) 12
Example 368
cre_Doc_Template_Mgt
 +-- Ref_Template_Types (reference template types)
 |   +-- Template_Type_Code (template type code) [PRIMARY] [FOREIGN]
 |   +-- Template_Type_Description (template type description)
 +-- Templates (templates)
 |   +-- Template_ID (template id) [PRIMARY] [FOREIGN]
 |   +-- Version_Number (version number)
 |   +-- Template_Type_Code (template type code) [FOREIGN]
 |   +-- Date_Effective_From (date effective from)
 |   +-- Date_Effective_To (date effective to)
 |   +-- Template_Details (template details)
 +-- Documents (documents)
 |   +-- Document_ID (document id) [PRIMARY] [FOREIGN]
 |   +-- Template_ID (template id) [FOREIGN]
 |   +-- Document_Name (document name)
 |   +-- Document_Description (document description)
 |   +-- Other_Details (other details)
 +-- Paragraphs (paragraphs)
     +-- Paragraph_ID (paragraph id) [PRIMARY]
     +-- Document_ID (document id) [FOREIGN]
     +-- Paragraph_Text (paragraph text)
     +-- Other_Details (other details)
NL: b'Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.'
NL tokens: [b'return', b'the', b'different', b'document', b'id', b'##s', b'along', b'with', b'the', b'number', b'of', b'paragraph', b'##s', b'corresponding', b'to', b'each', b',', b'ordered', b'by', b'id', b'.']
NL tokens (original): [b'Return', b'the', b'different', b'document', b'id', b'##s', b'along', b'with', b'the', b'number', b'of', b'paragraph', b'##s', b'corresponding', b'to', b'each', b',', b'ordered', b'by', b'id', b'.']
 36%|███▌      | 47/130 [06:20<04:18,  3.12s/it] 37%|███▋      | 48/130 [06:22<03:58,  2.91s/it] 38%|███▊      | 49/130 [06:24<03:24,  2.53s/it]['[CLS]', 'return', 'the', 'different', 'document', 'id', '##s', 'along', 'with', 'the', 'number', 'of', 'paragraph', '##s', 'corresponding', 'to', 'each', ',', 'ordered', 'by', 'id', '.', '[SEP]', '*', '[unused50]', 'reference', 'template', 'types', '[unused51]', 'template', 'type', 'code', '[unused51]', 'template', 'type', 'description', '[unused50]', 'template', '##s', '[unused51]', 'template', 'id', '[unused51]', 'version', 'number', '[unused51]', 'template', 'type', 'code', '[unused51]', 'date', 'effective', 'from', '[unused51]', 'date', 'effective', 'to', '[unused51]', 'template', 'details', '[unused50]', 'documents', '[unused51]', 'document', 'id', '[unused51]', 'template', 'id', '[unused51]', 'document', 'name', '[unused51]', 'document', 'description', '[unused51]', 'other', 'details', '[unused50]', 'paragraph', '##s', '[unused51]', 'paragraph', 'id', '[unused51]', 'document', 'id', '[unused51]', 'paragraph', 'text', '[unused51]', 'other', 'details', '[SEP]']
Target 0: b'SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id'
Target TF-P tokens: from Paragraphs group by Paragraphs.Document_ID select Paragraphs.Document_ID , count (*) order by Paragraphs.Document_ID

[WRONG] [medium] Pred 0:	b'SELECT Paragraphs.Document_ID, COUNT(*) FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY COUNT(*)' (-0.000) (length=17)
[WRONG] [medium] Pred 1:	b'SELECT Paragraphs.Document_ID, COUNT(*) FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY COUNT(*) DESC' (-2.654) (length=18)
[WRONG] [medium] Pred 2:	b'SELECT Paragraphs.Document_ID, COUNT(*) FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY COUNT(*) ASC' (-2.786) (length=18)
[WRONG] [medium] Pred 3:	b'SELECT Paragraphs.Document_ID, COUNT(*) FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY COUNT(*),Paragraphs.Document_ID' (-3.647) (length=19)
[WRONG] [medium] Pred 4:	b'SELECT Paragraphs.Document_ID, COUNT(*) FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY COUNT(*)' (-3.650) (length=19)
[WRONG] [medium] Pred 5:	b'SELECT Paragraphs.Document_ID, COUNT(*) FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY MOD(COUNT(*), Paragraphs.Document_ID)' (-3.666) (length=19)
[WRONG] [medium] Pred 6:	b'SELECT Paragraphs.Document_ID, COUNT(*) FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY SUM(Paragraphs.Document_ID)' (-4.042) (length=17)
[WRONG] [medium] Pred 7:	b'SELECT Paragraphs.Document_ID, COUNT(*) FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY COUNT(*) >= Paragraphs.Document_ID' (-4.060) (length=19)
Error Case 120

Parsing error: from Paragraphs group by Paragraphs.Document_ID having count (*) between 3 select Paragraphs.Document_ID
Parsing error: from Paragraphs group by Paragraphs.Document_ID having count (*) between 1 select Paragraphs.Document_ID
Parsing error: from Paragraphs group by Paragraphs.Document_ID having count (*) between 10 select Paragraphs.Document_ID
Parsing error: from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID group by Paragraphs.Document_ID having count (*) between 3 select Documents.Document_ID
Parsing error: from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID group by Paragraphs.Document_ID having count (*) between 1 select Documents.Document_ID
Parsing error: from Documents join Paragraphs on Documents.Document_ID = Paragraphs.Document_ID group by Documents.Document_ID having count (*) between 1 select Documents.Document_ID
Example 378
cre_Doc_Template_Mgt
 +-- Ref_Template_Types (reference template types)
 |   +-- Template_Type_Code (template type code) [PRIMARY] [FOREIGN]
 |   +-- Template_Type_Description (template type description)
 +-- Templates (templates)
 |   +-- Template_ID (template id) [PRIMARY] [FOREIGN]
 |   +-- Version_Number (version number)
 |   +-- Template_Type_Code (template type code) [FOREIGN]
 |   +-- Date_Effective_From (date effective from)
 |   +-- Date_Effective_To (date effective to)
 |   +-- Template_Details (template details)
 +-- Documents (documents)
 |   +-- Document_ID (document id) [PRIMARY] [FOREIGN]
 |   +-- Template_ID (template id) [FOREIGN]
 |   +-- Document_Name (document name)
 |   +-- Document_Description (document description)
 |   +-- Other_Details (other details)
 +-- Paragraphs (paragraphs)
     +-- Paragraph_ID (paragraph id) [PRIMARY]
     +-- Document_ID (document id) [FOREIGN]
     +-- Paragraph_Text (paragraph text)
     +-- Other_Details (other details)
NL: b'Give the ids of documents that have between one and two paragraphs.'
NL tokens: [b'give', b'the', b'id', b'##s', b'of', b'documents', b'that', b'have', b'between', b'one', b'and', b'two', b'paragraph', b'##s', b'.']
NL tokens (original): [b'Give', b'the', b'id', b'##s', b'of', b'documents', b'that', b'have', b'between', b'one', b'and', b'two', b'paragraph', b'##s', b'.']
['[CLS]', 'give', 'the', 'id', '##s', 'of', 'documents', 'that', 'have', 'between', 'one', 'and', 'two', 'paragraph', '##s', '.', '[SEP]', '*', '[unused50]', 'reference', 'template', 'types', '[unused51]', 'template', 'type', 'code', '[unused51]', 'template', 'type', 'description', '[unused50]', 'template', '##s', '[unused51]', 'template', 'id', '[unused51]', 'version', 'number', '[unused51]', 'template', 'type', 'code', '[unused51]', 'date', 'effective', 'from', '[unused51]', 'date', 'effective', 'to', '[unused51]', 'template', 'details', '[unused50]', 'documents', '[unused51]', 'document', 'id', '[unused51]', 'template', 'id', '[unused51]', 'document', 'name', '[unused51]', 'document', 'description', '[unused51]', 'other', 'details', '[unused50]', 'paragraph', '##s', '[unused51]', 'paragraph', 'id', '[unused51]', 'document', 'id', '[unused51]', 'paragraph', 'text', '[unused51]', 'other', 'details', '[SEP]']
Target 0: b'SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2'
Target TF-P tokens: from Paragraphs group by Paragraphs.Document_ID having count (*) between 1 and 2 select Paragraphs.Document_ID

[WRONG] [easy] Pred 0:	b'SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(*) BETWEEN 1 AND 2' (-0.754) (length=22)
[WRONG] [easy] Pred 1:	b'SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(*) BETWEEN 3 AND 2' (-1.115) (length=22)
[WRONG] [easy] Pred 2:	b'SELECT Documents.Document_ID FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID GROUP BY Paragraphs.Document_ID HAVING COUNT(*) BETWEEN 3 AND 2' (-1.287) (length=22)
[WRONG] [easy] Pred 3:	b'SELECT Documents.Document_ID FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID GROUP BY Paragraphs.Document_ID HAVING COUNT(*) BETWEEN 1 AND 2' (-1.364) (length=22)
[WRONG] [easy] Pred 4:	b'SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(*) BETWEEN 10 AND 2' (-1.408) (length=22)
[WRONG] [easy] Pred 5:	b'SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID HAVING COUNT(*) >= 3' (-1.699) (length=14)
[WRONG] [easy] Pred 6:	b'SELECT Documents.Document_ID FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID GROUP BY Paragraphs.Document_ID HAVING COUNT(*) BETWEEN 10 AND 2' (-1.721) (length=22)
[CORRE] [easy] Pred 7:	b'SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID HAVING COUNT(*) BETWEEN 3 AND 2' (-1.795) (length=16)
Error Case 121

Parsing error: from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID select teacher.Name , course_arrange join course on course_arrange.Course_ID = course.Course_ID join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID select teacher.Name , teacher.Name
Parsing error: from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID select teacher.Name , course_arrange on teacher.Name
 38%|███▊      | 50/130 [06:26<03:14,  2.43s/it]Parsing error: from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID select teacher.Name , course_arrange join course on course_arrange.Course_ID = course.Course_ID join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID select teacher.Name , course.Course
Parsing error: from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID select teacher.Name , course_arrange join course on course_arrange.Course_ID = course.Course_ID join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID select teacher.Name , teacher.Age
Parsing error: from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID select teacher.Name , course_arrange join course on course_arrange.Course_ID = course.Course_ID join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID select teacher.Name , teacher.Hometown
Parsing error: from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID select teacher.Name , course_arrange on course_arrange.Course_ID
Parsing error: from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID select teacher.Name , course_arrange join course on course_arrange.Course_ID = course.Course_ID join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID select teacher.Name , course_arrange
Parsing error: from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID select teacher.Name , course_arrange on course_arrange.Course_ID = teacher.Name
Parsing error: from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID select teacher.Name , course_arrange join course on course_arrange.Course_ID = course.Course_ID join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID select teacher.Name , course_arrange.Grade
Example 399
course_teach
 +-- course (course)
 |   +-- Course_ID (course id) [PRIMARY] [FOREIGN]
 |   +-- Staring_Date (staring date)
 |   +-- Course (course)
 +-- teacher (teacher)
 |   +-- Teacher_ID (teacher id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Age (age)
 |   +-- Hometown (hometown)
 +-- course_arrange (course arrange)
     +-- Course_ID (course id) [PRIMARY] [FOREIGN]
     +-- Teacher_ID (teacher id) [FOREIGN]
     +-- Grade (grade)
NL: b'Show names of teachers and the courses they are arranged to teach.'
NL tokens: [b'show', b'names', b'of', b'teachers', b'and', b'the', b'courses', b'they', b'are', b'arranged', b'to', b'teach', b'.']
NL tokens (original): [b'Show', b'names', b'of', b'teachers', b'and', b'the', b'courses', b'they', b'are', b'arranged', b'to', b'teach', b'.']
['[CLS]', 'show', 'names', 'of', 'teachers', 'and', 'the', 'courses', 'they', 'are', 'arranged', 'to', 'teach', '.', '[SEP]', '*', '[unused50]', 'course', '[unused51]', 'course', 'id', '[unused51]', 'staring', 'date', '[unused51]', 'course', '[unused50]', 'teacher', '[unused51]', 'teacher', 'id', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'hometown', '[unused50]', 'course', 'arrange', '[unused51]', 'course', 'id', '[unused51]', 'teacher', 'id', '[unused51]', 'grade', '[SEP]']
Target 0: b'SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID'
Target TF-P tokens: from course_arrange join course on course_arrange.Course_ID = course.Course_ID join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID select teacher.Name , course.Course

[WRONG] [medium] Pred 0:	b'SELECT teacher.Name, teacher.Age FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID' (-1.325) (length=13)
[WRONG] [medium] Pred 1:	b'SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID' (-1.539) (length=13)
[WRONG] [medium] Pred 2:	b'SELECT teacher.Name, teacher.Hometown FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID' (-2.264) (length=13)
[WRONG] [medium] Pred 3:	b'SELECT teacher.Name, course_arrange.Grade FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID' (-2.704) (length=13)
[WRONG] [medium] Pred 4:	b'SELECT teacher.Name, "course_arrange" FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID' (-3.025) (length=13)
[WRONG] [medium] Pred 5:	b'SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID WHERE course_arrange.Course_ID = "VALUE"' (-3.685) (length=17)
[WRONG] [medium] Pred 6:	b'SELECT teacher.Name, course_arrange.Teacher_ID FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID' (-3.797) (length=13)
Error Case 122

ERROR: table "course" in field expression course.Course is not in the current scope
ERROR: table "course_arrange" in field expression course_arrange.Teacher_ID is not in the current scope
ERROR: table "teacher" in field expression teacher.Name is not in the current scope
ERROR: table "course" in field expression course.Course is not in the current scope
ERROR: table "course_arrange" in field expression course_arrange.Teacher_ID is not in the current scope
Parsing error: from teacher join course_arrange on teacher.Teacher_ID = course_arrange.Teacher_ID where teacher.Age = "and course on teacher.Teacher_ID = course_arrange.Teacher_ID select teacher.Name , course.Course"
Parsing error: from teacher join course_arrange on teacher.Teacher_ID = course_arrange.Teacher_ID where teacher.Age = "and course on course_arrange.Course_ID = course.Course_ID select teacher.Name , course.Course"
Parsing error: from teacher join course_arrange on teacher.Teacher_ID = course_arrange.Teacher_ID where teacher.Age = "and course on teacher.Teacher_ID = course.Course select teacher.Name , course.Course"
Parsing error: from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID select teacher.Name , teacher.Name order by teacher.Name asc limit
Example 401
course_teach
 +-- course (course)
 |   +-- Course_ID (course id) [PRIMARY] [FOREIGN]
 |   +-- Staring_Date (staring date)
 |   +-- Course (course)
 +-- teacher (teacher)
 |   +-- Teacher_ID (teacher id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Age (age)
 |   +-- Hometown (hometown)
 +-- course_arrange (course arrange)
     +-- Course_ID (course id) [PRIMARY] [FOREIGN]
     +-- Teacher_ID (teacher id) [FOREIGN]
     +-- Grade (grade)
NL: b"Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name."
NL tokens: [b'show', b'names', b'of', b'teachers', b'and', b'the', b'courses', b'they', b'are', b'arranged', b'to', b'teach', b'in', b'ascending', b'alphabet', b'##ical', b'order', b'of', b'the', b'teacher', b"'", b's', b'name', b'.']
NL tokens (original): [b'Show', b'names', b'of', b'teachers', b'and', b'the', b'courses', b'they', b'are', b'arranged', b'to', b'teach', b'in', b'ascending', b'alphabet', b'##ical', b'order', b'of', b'the', b'teacher', b"'", b's', b'name', b'.']
['[CLS]', 'show', 'names', 'of', 'teachers', 'and', 'the', 'courses', 'they', 'are', 'arranged', 'to', 'teach', 'in', 'ascending', 'alphabet', '##ical', 'order', 'of', 'the', 'teacher', "'", 's', 'name', '.', '[SEP]', '*', '[unused50]', 'course', '[unused51]', 'course', 'id', '[unused51]', 'staring', 'date', '[unused51]', 'course', '[unused50]', 'teacher', '[unused51]', 'teacher', 'id', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'hometown', '[unused50]', 'course', 'arrange', '[unused51]', 'course', 'id', '[unused51]', 'teacher', 'id', '[unused51]', 'grade', '[SEP]']
Target 0: b'SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name'
Target TF-P tokens: from course_arrange join course on course_arrange.Course_ID = course.Course_ID join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID select teacher.Name , course.Course order by teacher.Name

 39%|███▉      | 51/130 [06:31<04:07,  3.14s/it][WRONG] [hard] Pred 0:	b'SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name ASC' (-0.000) (length=16)
[WRONG] [hard] Pred 1:	b'SELECT teacher.Name, "course_arrange" FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name ASC' (-2.066) (length=16)
[WRONG] [hard] Pred 2:	b'SELECT teacher.Name, course_arrange.Teacher_ID FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name ASC' (-2.812) (length=16)
[WRONG] [hard] Pred 3:	b'SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name' (-2.871) (length=15)
[WRONG] [hard] Pred 4:	b'SELECT teacher.Name, teacher.Age FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name ASC' (-3.325) (length=16)
[WRONG] [hard] Pred 5:	b'SELECT teacher.Name, course_arrange.Teacher_ID FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID GROUP BY course_arrange.Teacher_ID ORDER BY MIN(teacher.Name) ASC' (-3.390) (length=21)
[WRONG] [hard] Pred 6:	b'SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID ORDER BY teacher.Name ASC' (-3.611) (length=16)
[WRONG] [hard] Pred 7:	b'SELECT teacher.Name, teacher.Hometown FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name ASC' (-3.648) (length=16)
[WRONG] [hard] Pred 8:	b'SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID WHERE teacher.Name IS NULL ORDER BY teacher.Name' (-3.671) (length=19)
[WRONG] [hard] Pred 9:	b'SELECT teacher.Name, course_arrange.Grade FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name ASC' (-3.872) (length=16)
[WRONG] [hard] Pred 10:	b'SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID WHERE teacher.Name IS NULL ORDER BY teacher.Name ASC' (-3.994) (length=20)
[WRONG] [hard] Pred 11:	b'SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name DESC' (-4.034) (length=16)
[WRONG] [hard] Pred 12:	b'SELECT teacher.Name, course_arrange.Course_ID FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name ASC' (-4.069) (length=16)
[WRONG] [hard] Pred 13:	b'SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name ASC' (-4.083) (length=18)
[WRONG] [hard] Pred 14:	b'SELECT teacher.Name, course_arrange.Teacher_ID FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID GROUP BY course_arrange.Teacher_ID ORDER BY teacher.Name' (-4.184) (length=17)
Error Case 123

Example 402
course_teach
 +-- course (course)
 |   +-- Course_ID (course id) [PRIMARY] [FOREIGN]
 |   +-- Staring_Date (staring date)
 |   +-- Course (course)
 +-- teacher (teacher)
 |   +-- Teacher_ID (teacher id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Age (age)
 |   +-- Hometown (hometown)
 +-- course_arrange (course arrange)
     +-- Course_ID (course id) [PRIMARY] [FOREIGN]
     +-- Teacher_ID (teacher id) [FOREIGN]
     +-- Grade (grade)
NL: b'What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?'
NL tokens: [b'what', b'are', b'the', b'names', b'of', b'the', b'teachers', b'and', b'the', b'courses', b'they', b'teach', b'in', b'ascending', b'alphabet', b'##ical', b'order', b'by', b'the', b'name', b'of', b'the', b'teacher', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'of', b'the', b'teachers', b'and', b'the', b'courses', b'they', b'teach', b'in', b'ascending', b'alphabet', b'##ical', b'order', b'by', b'the', b'name', b'of', b'the', b'teacher', b'?']
['[CLS]', 'what', 'are', 'the', 'names', 'of', 'the', 'teachers', 'and', 'the', 'courses', 'they', 'teach', 'in', 'ascending', 'alphabet', '##ical', 'order', 'by', 'the', 'name', 'of', 'the', 'teacher', '?', '[SEP]', '*', '[unused50]', 'course', '[unused51]', 'course', 'id', '[unused51]', 'staring', 'date', '[unused51]', 'course', '[unused50]', 'teacher', '[unused51]', 'teacher', 'id', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'hometown', '[unused50]', 'course', 'arrange', '[unused51]', 'course', 'id', '[unused51]', 'teacher', 'id', '[unused51]', 'grade', '[SEP]']
Target 0: b'SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name'
Target TF-P tokens: from course_arrange join course on course_arrange.Course_ID = course.Course_ID join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID select teacher.Name , course.Course order by teacher.Name

[WRONG] [hard] Pred 0:	b'SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID ORDER BY teacher.Name ASC' (-1.609) (length=16)
[WRONG] [hard] Pred 1:	b'SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID ORDER BY teacher.Name' (-2.232) (length=15)
[WRONG] [hard] Pred 2:	b'SELECT teacher.Name, "course_arrange" FROM teacher ORDER BY teacher.Name ASC' (-3.107) (length=10)
[WRONG] [hard] Pred 3:	b'SELECT teacher.Name FROM teacher ORDER BY teacher.Name ASC' (-3.319) (length=10)
[WRONG] [hard] Pred 4:	b'SELECT teacher.Name FROM teacher JOIN teacher ON teacher.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name ASC' (-3.698) (length=16)
[WRONG] [hard] Pred 5:	b'SELECT teacher.Name, "course_arrange" FROM teacher ORDER BY teacher.Name' (-3.858) (length=9)
[WRONG] [hard] Pred 6:	b'SELECT teacher.Name FROM teacher JOIN course_arrange ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name ASC' (-3.984) (length=16)
[WRONG] [hard] Pred 7:	b'SELECT teacher.Name FROM teacher JOIN teacher ON teacher.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name' (-4.027) (length=15)
[WRONG] [hard] Pred 8:	b'SELECT teacher.Name, teacher.Age FROM teacher ORDER BY teacher.Name ASC' (-4.282) (length=10)
[WRONG] [hard] Pred 9:	b'SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name ASC' (-4.357) (length=16)
[WRONG] [hard] Pred 10:	b'SELECT teacher.Name FROM teacher JOIN course_arrange ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name' (-4.591) (length=15)
[WRONG] [hard] Pred 11:	b'SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name' (-4.600) (length=15)
[WRONG] [hard] Pred 12:	b'SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID ORDER BY teacher.Name,teacher.Name' (-4.702) (length=17)
[WRONG] [hard] Pred 13:	b'SELECT teacher.Name, teacher.Age FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID ORDER BY teacher.Name ASC' (-4.853) (length=16)
[WRONG] [hard] Pred 14:	b'SELECT teacher.Name, "course_arrange" FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID ORDER BY teacher.Name' (-5.026) (length=15)
[WRONG] [hard] Pred 15:	b'SELECT teacher.Name, teacher.Age FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID ORDER BY teacher.Name' (-5.083) (length=15)
Error Case 124

Parsing error: from visitor where visitor.Level_of_membership is in (from visitor where visitor.Level_of_membership > 4 select avg (visitor.Age)) select avg (visitor.Age)
Parsing error: from visitor where visitor.Level_of_membership is in (from visitor where visitor.Level_of_membership > 4 select avg (visitor.Level_of_membership)) select avg (visitor.Age)
Example 413
museum_visit
 +-- museum (museum)
 |   +-- Museum_ID (museum id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Num_of_Staff (num of staff)
 |   +-- Open_Year (open year)
 +-- visitor (customer)
 |   +-- ID (customer id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Level_of_membership (level of membership)
 |   +-- Age (age)
 +-- visit (visit)
     +-- Museum_ID (museum id) [PRIMARY] [FOREIGN]
     +-- visitor_ID (customer id) [FOREIGN]
     +-- Num_of_Ticket (num of ticket)
     +-- Total_spent (total spent)
NL: b'What is the average age of the visitors whose membership level is not higher than 4?'
NL tokens: [b'what', b'is', b'the', b'average', b'age', b'of', b'the', b'visitors', b'whose', b'membership', b'level', b'is', b'not', b'higher', b'than', b'4', b'?']
NL tokens (original): [b'What', b'is', b'the', b'average', b'age', b'of', b'the', b'visitors', b'whose', b'membership', b'level', b'is', b'not', b'higher', b'than', b'4', b'?']
['[CLS]', 'what', 'is', 'the', 'average', 'age', 'of', 'the', 'visitors', 'whose', 'membership', 'level', 'is', 'not', 'higher', 'than', '4', '?', '[SEP]', '*', '[unused50]', 'museum', '[unused51]', 'museum', 'id', '[unused51]', 'name', '[unused51]', 'nu', '##m', 'of', 'staff', '[unused51]', 'open', 'year', '[unused50]', 'customer', '[unused51]', 'customer', 'id', '[unused51]', 'name', '[unused51]', 'level', 'of', 'membership', '[unused51]', 'age', '[unused50]', 'visit', '[unused51]', 'museum', 'id', '[unused51]', 'customer', 'id', '[unused51]', 'nu', '##m', 'of', 'ticket', '[unused51]', 'total', 'spent', '[SEP]']
Target 0: b'SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4'
Target TF-P tokens: from visitor where visitor.Level_of_membership <= 4 select avg (visitor.Age)

[WRONG] [easy] Pred 0:	b'SELECT AVG(visitor.Age) FROM visitor WHERE visitor.Level_of_membership > 4' (-0.013) (length=12)
[WRONG] [easy] Pred 1:	b'SELECT AVG(visitor.Age) FROM visitor WHERE visitor.Level_of_membership < 4' (-1.276) (length=12)
[WRONG] [easy] Pred 2:	b'SELECT AVG(visitor.Age) FROM visitor WHERE visitor.Level_of_membership != 4' (-1.442) (length=12)
[WRONG] [easy] Pred 3:	b'SELECT AVG(visitor.Age) FROM visitor WHERE visitor.Level_of_membership HAVING (SELECT AVG(visitor.Level_of_membership) FROM visitor WHERE visitor.Level_of_membership > 4)' (-1.905) (length=24)
[WRONG] [easy] Pred 4:	b'SELECT AVG(visitor.Age) FROM visitor WHERE visitor.Level_of_membership NOT IN (SELECT AVG(visitor.Age) FROM visitor WHERE visitor.Level_of_membership > 4)' (-1.938) (length=25)
[WRONG] [easy] Pred 5:	b'SELECT AVG(visitor.Age) FROM visitor WHERE visitor.Level_of_membership NOT IN (SELECT AVG(visitor.Level_of_membership) FROM visitor WHERE visitor.Level_of_membership > 4)' (-1.962) (length=25)
[WRONG] [easy] Pred 6:	b'SELECT AVG(visitor.Age) FROM visitor WHERE visitor.Level_of_membership HAVING (SELECT AVG(visitor.Age) FROM visitor WHERE visitor.Level_of_membership > 4)' (-1.982) (length=24)
[WRONG] [easy] Pred 7:	b'SELECT AVG(visitor.Age) FROM visitor WHERE visitor.Level_of_membership = (SELECT AVG(visitor.Age) FROM visitor WHERE visitor.Level_of_membership > 4)' (-2.133) (length=24)
[WRONG] [easy] Pred 8:	b'SELECT AVG(visitor.Age) FROM visitor WHERE visitor.Level_of_membership IS NULL' (-2.238) (length=12)
[WRONG] [easy] Pred 9:	b'SELECT AVG(visitor.Age) FROM visitor WHERE visitor.Level_of_membership = (SELECT AVG(visitor.Level_of_membership) FROM visitor WHERE visitor.Level_of_membership > 4)' (-2.256) (length=24)
[CORRE] [easy] Pred 10:	b'SELECT AVG(visitor.Age) FROM visitor WHERE visitor.Level_of_membership <= 4' (-2.544) (length=12)
Error Case 125

Parsing error: from visitor join membership "on visitor.ID = 4 select visitor.Name , visitor.Level_of_membership order by visitor.Age"
Parsing error: from visitor where visitor.Age > 4 select visitor.Name) , visitor.Level_of_membership order by visitor.Age
Parsing error: from visitor where visitor.Age > 4 select visitor.Name select visitor.Name , visitor.Level_of_membership order by visitor.Age
Example 414
museum_visit
 +-- museum (museum)
 |   +-- Museum_ID (museum id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Num_of_Staff (num of staff)
 |   +-- Open_Year (open year)
 +-- visitor (customer)
 |   +-- ID (customer id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Level_of_membership (level of membership)
 |   +-- Age (age)
 +-- visit (visit)
     +-- Museum_ID (museum id) [PRIMARY] [FOREIGN]
     +-- visitor_ID (customer id) [FOREIGN]
     +-- Num_of_Ticket (num of ticket)
     +-- Total_spent (total spent)
NL: b'Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.'
NL tokens: [b'find', b'the', b'name', b'and', b'membership', b'level', b'of', b'the', b'visitors', b'whose', b'membership', b'level', b'is', b'higher', b'than', b'4', b',', b'and', b'sort', b'by', b'their', b'age', b'from', b'old', b'to', b'young', b'.']
NL tokens (original): [b'Find', b'the', b'name', b'and', b'membership', b'level', b'of', b'the', b'visitors', b'whose', b'membership', b'level', b'is', b'higher', b'than', b'4', b',', b'and', b'sort', b'by', b'their', b'age', b'from', b'old', b'to', b'young', b'.']
['[CLS]', 'find', 'the', 'name', 'and', 'membership', 'level', 'of', 'the', 'visitors', 'whose', 'membership', 'level', 'is', 'higher', 'than', '4', ',', 'and', 'sort', 'by', 'their', 'age', 'from', 'old', 'to', 'young', '.', '[SEP]', '*', '[unused50]', 'museum', '[unused51]', 'museum', 'id', '[unused51]', 'name', '[unused51]', 'nu', '##m', 'of', 'staff', '[unused51]', 'open', 'year', '[unused50]', 'customer', '[unused51]', 'customer', 'id', '[unused51]', 'name', '[unused51]', 'level', 'of', 'membership', '[unused51]', 'age', '[unused50]', 'visit', '[unused51]', 'museum', 'id', '[unused51]', 'customer', 'id', '[unused51]', 'nu', '##m', 'of', 'ticket', '[unused51]', 'total', 'spent', '[SEP]']
Target 0: b'SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC'
Target TF-P tokens: from visitor where visitor.Level_of_membership > 4 select visitor.Name , visitor.Level_of_membership order by visitor.Age desc

[WRONG] [medium] Pred 0:	b'SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Age > 4 ORDER BY visitor.Age' (-0.000) (length=13)
[WRONG] [medium] Pred 1:	b'SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Age > 4 ORDER BY visitor.Level_of_membership' (-2.942) (length=13)
[WRONG] [medium] Pred 2:	b'SELECT visitor.Name FROM visitor WHERE visitor.Age > 4 ORDER BY visitor.Level_of_membership' (-3.252) (length=11)
[WRONG] [medium] Pred 3:	b'SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Age > 4 ORDER BY visitor.Age DESC' (-3.767) (length=14)
[WRONG] [medium] Pred 4:	b'SELECT visitor.Name, visitor.Level_of_membership FROM visitor JOIN visitor ON visitor.ID = visitor.Level_of_membership WHERE visitor.Age > 4 ORDER BY visitor.Age' (-3.998) (length=19)
[WRONG] [medium] Pred 5:	b'SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Age > 4 AND visitor.Age > 4 ORDER BY visitor.Age' (-4.277) (length=17)
[WRONG] [medium] Pred 6:	b'SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Age' (-4.405) (length=13)
[WRONG] [medium] Pred 7:	b'SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Age > 4 ORDER BY visitor.Age,visitor.Level_of_membership' (-4.447) (length=15)
[WRONG] [medium] Pred 8:	b'SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Age > 4 ORDER BY visitor.Age ASC' (-4.457) (length=14)
[WRONG] [medium] Pred 9:	b'SELECT visitor.Name, visitor.Level_of_membership FROM visitor JOIN visitor ON visitor.ID = visitor.Level_of_membership WHERE visitor.Age > 4 ORDER BY visitor.Level_of_membership' (-4.934) (length=19)
[WRONG] [medium] Pred 10:	b'SELECT "visitor.Name.visitor.Level_of_membership" FROM visitor WHERE visitor.Age > 4 ORDER BY visitor.Age' (-4.970) (length=13)
 40%|████      | 52/130 [06:35<04:31,  3.49s/it][WRONG] [medium] Pred 11:	b'SELECT visitor.Name, visitor.Level_of_membership FROM visitor HAVING visitor.Age > 4 ORDER BY visitor.Age' (-4.997) (length=13)
[WRONG] [medium] Pred 12:	b'SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Age > 40 ORDER BY visitor.Age' (-5.001) (length=14)
Error Case 126

Parsing error: from museum where museum.Num_of_Staff > (from museum where museum.Museum_ID > 2010 select museum.Name
Parsing error: from museum where museum.Num_of_Staff > (from museum where museum.Museum_ID in (from museum where museum.Open_Year > 2010 select museum.Museum_ID) select museum.Name
Parsing error: from museum where museum.Num_of_Staff > (from museum where museum.Museum_ID = 2010 select museum.Name
Example 418
museum_visit
 +-- museum (museum)
 |   +-- Museum_ID (museum id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Num_of_Staff (num of staff)
 |   +-- Open_Year (open year)
 +-- visitor (customer)
 |   +-- ID (customer id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Level_of_membership (level of membership)
 |   +-- Age (age)
 +-- visit (visit)
     +-- Museum_ID (museum id) [PRIMARY] [FOREIGN]
     +-- visitor_ID (customer id) [FOREIGN]
     +-- Num_of_Ticket (num of ticket)
     +-- Total_spent (total spent)
NL: b'find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.'
NL tokens: [b'find', b'the', b'names', b'of', b'museums', b'which', b'have', b'more', b'staff', b'than', b'the', b'minimum', b'staff', b'number', b'of', b'all', b'museums', b'opened', b'after', b'2010', b'.']
NL tokens (original): [b'find', b'the', b'names', b'of', b'museums', b'which', b'have', b'more', b'staff', b'than', b'the', b'minimum', b'staff', b'number', b'of', b'all', b'museums', b'opened', b'after', b'2010', b'.']
['[CLS]', 'find', 'the', 'names', 'of', 'museums', 'which', 'have', 'more', 'staff', 'than', 'the', 'minimum', 'staff', 'number', 'of', 'all', 'museums', 'opened', 'after', '2010', '.', '[SEP]', '*', '[unused50]', 'museum', '[unused51]', 'museum', 'id', '[unused51]', 'name', '[unused51]', 'nu', '##m', 'of', 'staff', '[unused51]', 'open', 'year', '[unused50]', 'customer', '[unused51]', 'customer', 'id', '[unused51]', 'name', '[unused51]', 'level', 'of', 'membership', '[unused51]', 'age', '[unused50]', 'visit', '[unused51]', 'museum', 'id', '[unused51]', 'customer', 'id', '[unused51]', 'nu', '##m', 'of', 'ticket', '[unused51]', 'total', 'spent', '[SEP]']
Target 0: b'SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)'
Target TF-P tokens: from museum where museum.Num_of_Staff > (from museum where museum.Open_Year > 2010 select min (museum.Num_of_Staff)) select museum.Name

[WRONG] [hard] Pred 0:	b'SELECT museum.Name FROM museum WHERE museum.Num_of_Staff > (SELECT MIN(museum.Num_of_Staff) FROM museum WHERE museum.Museum_ID IN (SELECT museum.Museum_ID FROM museum WHERE museum.Open_Year > 2010)) AND museum.Museum_ID IN (SELECT museum.Museum_ID FROM museum WHERE museum.Open_Year > 2010)' (-0.463) (length=43)
[WRONG] [hard] Pred 1:	b'SELECT museum.Name FROM museum WHERE museum.Num_of_Staff > (SELECT museum.Museum_ID FROM museum WHERE museum.Museum_ID IN (SELECT MIN(museum.Open_Year) FROM museum WHERE museum.Open_Year > 2010))' (-0.793) (length=30)
[CORRE] [hard] Pred 2:	b'SELECT museum.Name FROM museum WHERE museum.Num_of_Staff > (SELECT MIN(museum.Num_of_Staff) FROM museum WHERE museum.Open_Year > 2010)' (-0.797) (length=21)
Error Case 127

Parsing error: from visitor join visit on visitor.ID = visit.visitor_ID group by visit.visitor_ID having count (*) <= 1 select visitor.Name , visitor.Age union from visitor join visit on visitor.ID = visit.visitor_ID group by visitor.ID having count (*) desc limit 1) select visitor.Name , visitor.Age
Parsing error: from visitor join visit on visitor.ID = visit.visitor_ID group by visit.visitor_ID having count (*) <= 1 select visitor.Name , visitor.Age union from visitor join visit on visitor.ID = visit.visitor_ID group by visitor.ID having count (*) desc limit 1 select visitor.Name , visitor.Age
Parsing error: from visitor join visit on visitor.ID = visit.visitor_ID group by visit.visitor_ID having count (*) = 1 select visitor.Name , visitor.Age union from visitor join visit on visitor.ID = visit.visitor_ID group by visitor.ID having count (*) desc limit 1) select visitor.Name , visitor.Age
Parsing error: from visitor join visit on visitor.ID = visit.visitor_ID group by visit.visitor_ID having count (*) desc limit 1 select visitor.Name , visitor.Age union from visitor join visit on visitor.ID = visit.visitor_ID group by visitor.ID having count (*) desc limit 1) select visitor.Name , visitor.Age
Parsing error: from visitor join visit on visitor.ID = visit.visitor_ID group by visit.visitor_ID having count (*) <= 1 select visitor.Name , visitor.Age union from visitor join visit on visitor.ID = visit.visitor_ID group by visitor.ID having count (*) desc limit 1) select visitor.Name , visitor.Age order by visitor.Age desc limit 1
Parsing error: from visitor join visit on visitor.ID = visit.visitor_ID group by visit.visitor_ID having count (*) <= 1 select visitor.Name , visitor.Age union from visitor join visit on visitor.ID = visit.visitor_ID group by visitor.ID having count (*) desc limit 1 != 1 select visitor.Name , visitor.Age
Parsing error: from visitor join visit on visitor.ID = visit.visitor_ID group by visit.visitor_ID having count (*) desc limit 1 select visitor.Name , visitor.Age order by visitor.Age desc limit 1
Example 423
museum_visit
 +-- museum (museum)
 |   +-- Museum_ID (museum id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Num_of_Staff (num of staff)
 |   +-- Open_Year (open year)
 +-- visitor (customer)
 |   +-- ID (customer id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Level_of_membership (level of membership)
 |   +-- Age (age)
 +-- visit (visit)
     +-- Museum_ID (museum id) [PRIMARY] [FOREIGN]
     +-- visitor_ID (customer id) [FOREIGN]
     +-- Num_of_Ticket (num of ticket)
     +-- Total_spent (total spent)
NL: b'Find the name and age of the visitor who bought the most tickets at once.'
NL tokens: [b'find', b'the', b'name', b'and', b'age', b'of', b'the', b'visitor', b'who', b'bought', b'the', b'most', b'tickets', b'at', b'once', b'.']
NL tokens (original): [b'Find', b'the', b'name', b'and', b'age', b'of', b'the', b'visitor', b'who', b'bought', b'the', b'most', b'tickets', b'at', b'once', b'.']
['[CLS]', 'find', 'the', 'name', 'and', 'age', 'of', 'the', 'visitor', 'who', 'bought', 'the', 'most', 'tickets', 'at', 'once', '.', '[SEP]', '*', '[unused50]', 'museum', '[unused51]', 'museum', 'id', '[unused51]', 'name', '[unused51]', 'nu', '##m', 'of', 'staff', '[unused51]', 'open', 'year', '[unused50]', 'customer', '[unused51]', 'customer', 'id', '[unused51]', 'name', '[unused51]', 'level', 'of', 'membership', '[unused51]', 'age', '[unused50]', 'visit', '[unused51]', 'museum', 'id', '[unused51]', 'customer', 'id', '[unused51]', 'nu', '##m', 'of', 'ticket', '[unused51]', 'total', 'spent', '[SEP]']
Target 0: b'SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1'
Target TF-P tokens: from visitor join visit on visitor.ID = visit.visitor_ID select visitor.Name , visitor.Age order by visit.Num_of_Ticket desc limit 1

[WRONG] [hard] Pred 0:	b'SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visit.visitor_ID HAVING COUNT(*) <= 1 ORDER BY visitor.Age DESC LIMIT 1' (-0.071) (length=27)
[WRONG] [hard] Pred 1:	b'SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visit.visitor_ID HAVING COUNT(*) = 1 ORDER BY visitor.Age DESC LIMIT 1' (-0.324) (length=27)
[WRONG] [hard] Pred 2:	b'SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visit.visitor_ID HAVING COUNT(*) <= 1' (-0.381) (length=22)
 41%|████      | 53/130 [06:44<06:22,  4.97s/it][WRONG] [hard] Pred 3:	b'SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visit.visitor_ID HAVING COUNT(*) <= 1 UNION SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID HAVING COUNT(*) = 1' (-0.715) (length=44)
[WRONG] [hard] Pred 4:	b'SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visit.visitor_ID HAVING COUNT(*) <= 1 UNION SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID HAVING COUNT(*) <= 1' (-0.776) (length=44)
[WRONG] [hard] Pred 5:	b'SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID HAVING COUNT(*) <= 1 ORDER BY visitor.Age DESC LIMIT 1' (-0.989) (length=27)
[WRONG] [hard] Pred 6:	b'SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID HAVING COUNT(*) = 1 ORDER BY visitor.Age DESC LIMIT 1' (-1.108) (length=27)
[WRONG] [hard] Pred 7:	b'SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visit.visitor_ID HAVING COUNT(*) = 1 UNION SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID HAVING COUNT(*) = 1' (-1.110) (length=44)
[WRONG] [hard] Pred 8:	b'SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visit.visitor_ID HAVING COUNT(*) = 1 UNION SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID HAVING COUNT(*) <= 1' (-1.166) (length=44)
Error Case 128

Example 425
museum_visit
 +-- museum (museum)
 |   +-- Museum_ID (museum id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Num_of_Staff (num of staff)
 |   +-- Open_Year (open year)
 +-- visitor (customer)
 |   +-- ID (customer id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Level_of_membership (level of membership)
 |   +-- Age (age)
 +-- visit (visit)
     +-- Museum_ID (museum id) [PRIMARY] [FOREIGN]
     +-- visitor_ID (customer id) [FOREIGN]
     +-- Num_of_Ticket (num of ticket)
     +-- Total_spent (total spent)
NL: b'What is the total ticket expense of the visitors whose membership level is 1?'
NL tokens: [b'what', b'is', b'the', b'total', b'ticket', b'expense', b'of', b'the', b'visitors', b'whose', b'membership', b'level', b'is', b'1', b'?']
NL tokens (original): [b'What', b'is', b'the', b'total', b'ticket', b'expense', b'of', b'the', b'visitors', b'whose', b'membership', b'level', b'is', b'1', b'?']
['[CLS]', 'what', 'is', 'the', 'total', 'ticket', 'expense', 'of', 'the', 'visitors', 'whose', 'membership', 'level', 'is', '1', '?', '[SEP]', '*', '[unused50]', 'museum', '[unused51]', 'museum', 'id', '[unused51]', 'name', '[unused51]', 'nu', '##m', 'of', 'staff', '[unused51]', 'open', 'year', '[unused50]', 'customer', '[unused51]', 'customer', 'id', '[unused51]', 'name', '[unused51]', 'level', 'of', 'membership', '[unused51]', 'age', '[unused50]', 'visit', '[unused51]', 'museum', 'id', '[unused51]', 'customer', 'id', '[unused51]', 'nu', '##m', 'of', 'ticket', '[unused51]', 'total', 'spent', '[SEP]']
Target 0: b'SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1'
Target TF-P tokens: from visitor join visit on visitor.ID = visit.visitor_ID where visitor.Level_of_membership = 1 select sum (visit.Total_spent)

[WRONG] [medium] Pred 0:	b'SELECT SUM(visit.Num_of_Ticket) FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID WHERE visitor.Level_of_membership = 1' (-0.000) (length=18)
[CORRE] [medium] Pred 1:	b'SELECT SUM(visit.Total_spent) FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID WHERE visitor.Level_of_membership = 1' (-2.227) (length=18)
Error Case 129

ERROR: table "museum" in field expression museum.Open_Year is not in the current scope
ERROR: table "museum" in field expression museum.Open_Year is not in the current scope
string indices must be integers
Parsing error: from visitor join visit on visitor.ID = visit.visitor_ID from museum on visit.Museum_ID = museum.Museum_ID where museum.Open_Year < 2009 select visitor.Name intersect from visitor join visit on visitor.ID = visit.visitor_ID where museum.Open_Year > 2011 select visitor.Name
string indices must be integers
Parsing error: from visitor join visit on visitor.ID = visit.visitor_ID no and visitor.ID in (from museum where museum.Open_Year > 2011 select visitor.ID) select visitor.Name intersect from visitor join visit on visitor.ID = visit.visitor_ID where museum.Open_Year > 2011 select visitor.Name
ERROR: table "visitor" in field expression visitor.ID is not in the current scope
Parsing error: from visitor join visit on visitor.ID = visit.visitor_ID limit museum on visit.Museum_ID = museum.Museum_ID where museum.Open_Year < 2009 select visitor.Name intersect from visitor join visit on visitor.ID = visit.visitor_ID where museum.Open_Year > 2011 select visitor.Name
Parsing error: from visitor join visit on visitor.ID = visit.visitor_ID no and visitor.ID in (from museum where museum.Open_Year > 2009 select visitor.ID) select visitor.Name intersect from visitor join visit on visitor.ID = visit.visitor_ID where museum.Open_Year > 2011 select visitor.Name
ERROR: Join condition does not match with table: ['visitor', {'join': 'visit', 'on': {'eq': ['visitor.ID', 'visit.visitor_ID']}}, {'join': 'museum', 'on': {'eq': ['visitor.ID', 'visit.visitor_ID']}}]
Parsing error: from visitor where visitor.ID not in (from visit on visit.visitor_ID in (from museum where museum.Open_Year > 2010 select visit.visitor_ID) select count (*)) select count (distinct visit.visitor_ID)
string indices must be integers
Parsing error: from visitor where visitor.ID not in (from visit and museum on visit.Museum_ID > museum.Museum_ID where museum.Open_Year > 2010 select visit.visitor_ID) select count (distinct visit.visitor_ID)
Parsing error: from visitor where visitor.ID not in (from visit and museum on visit.Museum_ID > museum.Museum_ID where museum.Open_Year > 2010 select visit.visitor_ID) select count (distinct visitor.ID)
Parsing error: from visitor where visitor.ID not in (from visit and museum on visit.Museum_ID > museum.Museum_ID where museum.Open_Year > 2010 select visit.visitor_ID) select count (*)
Parsing error: from visitor where visitor.ID not in (from visit on visit.visitor_ID in (from museum where museum.Open_Year > 2010 select visit.visitor_ID) select count (*)) select count (distinct visitor.ID)
string indices must be integers
Parsing error: from visitor where visitor.ID not in (from visit on visit.visitor_ID in (from museum where museum.Open_Year > 2010 select visit.visitor_ID) select count (*)) select count (distinct visit.visitor_ID) select count (*)
string indices must be integers
string indices must be integers
Parsing error: from visitor where visitor.ID not in (from visit and museum on visit.Museum_ID > 2010 select visit.visitor_ID) select count (distinct visit.visitor_ID)
ERROR: table "visitor" in field expression visitor.ID is not in the current scope
ERROR: table "visit" in field expression visit.visitor_ID is not in the current scope
Parsing error: from visitor where visitor.ID not in (from visit and museum on visit.Museum_ID > 2010 select visit.visitor_ID) select count (*)
Example 427
museum_visit
 +-- museum (museum)
 |   +-- Museum_ID (museum id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Num_of_Staff (num of staff)
 |   +-- Open_Year (open year)
 +-- visitor (customer)
 |   +-- ID (customer id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Level_of_membership (level of membership)
 |   +-- Age (age)
 +-- visit (visit)
     +-- Museum_ID (museum id) [PRIMARY] [FOREIGN]
     +-- visitor_ID (customer id) [FOREIGN]
     +-- Num_of_Ticket (num of ticket)
     +-- Total_spent (total spent)
NL: b'Find the number of visitors who did not visit any museum opened after 2010.'
 42%|████▏     | 54/130 [06:52<07:28,  5.89s/it] 42%|████▏     | 55/130 [06:52<05:21,  4.28s/it]NL tokens: [b'find', b'the', b'number', b'of', b'visitors', b'who', b'did', b'not', b'visit', b'any', b'museum', b'opened', b'after', b'2010', b'.']
NL tokens (original): [b'Find', b'the', b'number', b'of', b'visitors', b'who', b'did', b'not', b'visit', b'any', b'museum', b'opened', b'after', b'2010', b'.']
['[CLS]', 'find', 'the', 'number', 'of', 'visitors', 'who', 'did', 'not', 'visit', 'any', 'museum', 'opened', 'after', '2010', '.', '[SEP]', '*', '[unused50]', 'museum', '[unused51]', 'museum', 'id', '[unused51]', 'name', '[unused51]', 'nu', '##m', 'of', 'staff', '[unused51]', 'open', 'year', '[unused50]', 'customer', '[unused51]', 'customer', 'id', '[unused51]', 'name', '[unused51]', 'level', 'of', 'membership', '[unused51]', 'age', '[unused50]', 'visit', '[unused51]', 'museum', 'id', '[unused51]', 'customer', 'id', '[unused51]', 'nu', '##m', 'of', 'ticket', '[unused51]', 'total', 'spent', '[SEP]']
Target 0: b'SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)'
Target TF-P tokens: from visitor where visitor.ID not in (from museum join visit on museum.Museum_ID = visit.Museum_ID where museum.Open_Year > 2010 select visit.visitor_ID) select count (*)

[WRONG] [extra] Pred 0:	b'SELECT COUNT(*) FROM visitor WHERE visitor.ID NOT IN (SELECT visit.visitor_ID FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year > 2010)' (-2.624) (length=28)
[WRONG] [extra] Pred 1:	b'SELECT COUNT(DISTINCT visitor.ID) FROM visitor WHERE visitor.ID NOT IN (SELECT visit.visitor_ID FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year > 2010)' (-2.857) (length=29)
Error Case 130

Example 440
wta_1
 +-- players (players)
 |   +-- player_id (player id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- hand (hand)
 |   +-- birth_date (birth date)
 |   +-- country_code (country code)
 +-- matches (matches)
 |   +-- best_of (best of)
 |   +-- draw_size (draw size)
 |   +-- loser_age (loser age)
 |   +-- loser_entry (loser entry)
 |   +-- loser_hand (loser hand)
 |   +-- loser_ht (loser ht)
 |   +-- loser_id (loser id) [FOREIGN]
 |   +-- loser_ioc (loser ioc)
 |   +-- loser_name (loser name)
 |   +-- loser_rank (loser rank)
 |   +-- loser_rank_points (loser rank points)
 |   +-- loser_seed (loser seed)
 |   +-- match_num (match num)
 |   +-- minutes (minutes)
 |   +-- round (round)
 |   +-- score (score)
 |   +-- surface (surface)
 |   +-- tourney_date (tourney date)
 |   +-- tourney_id (tourney id)
 |   +-- tourney_level (tourney level)
 |   +-- tourney_name (tourney name)
 |   +-- winner_age (winner age)
 |   +-- winner_entry (winner entry)
 |   +-- winner_hand (winner hand)
 |   +-- winner_ht (winner ht)
 |   +-- winner_id (winner id) [FOREIGN]
 |   +-- winner_ioc (winner ioc)
 |   +-- winner_name (winner name)
 |   +-- winner_rank (winner rank)
 |   +-- winner_rank_points (winner rank points)
 |   +-- winner_seed (winner seed)
 |   +-- year (year)
 +-- rankings (rankings)
     +-- ranking_date (ranking date)
     +-- ranking (ranking)
     +-- player_id (player id) [FOREIGN]
     +-- ranking_points (ranking points)
     +-- tours (tours)
NL: b'What is the best rank of losers across all matches?'
NL tokens: [b'what', b'is', b'the', b'best', b'rank', b'of', b'losers', b'across', b'all', b'matches', b'?']
NL tokens (original): [b'What', b'is', b'the', b'best', b'rank', b'of', b'losers', b'across', b'all', b'matches', b'?']
['[CLS]', 'what', 'is', 'the', 'best', 'rank', 'of', 'losers', 'across', 'all', 'matches', '?', '[SEP]', '*', '[unused50]', 'players', '[unused51]', 'player', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'hand', '[unused51]', 'birth', 'date', '[unused51]', 'country', 'code', '[unused50]', 'matches', '[unused51]', 'best', 'of', '[unused51]', 'draw', 'size', '[unused51]', 'loser', 'age', '[unused51]', 'loser', 'entry', '[unused51]', 'loser', 'hand', '[unused51]', 'loser', 'h', '##t', '[unused51]', 'loser', 'id', '[unused51]', 'loser', 'ioc', '[unused51]', 'loser', 'name', '[unused51]', 'loser', 'rank', '[unused51]', 'loser', 'rank', 'points', '[unused51]', 'loser', 'seed', '[unused51]', 'match', 'nu', '##m', '[unused51]', 'minutes', '[unused51]', 'round', '[unused51]', 'score', '[unused51]', 'surface', '[unused51]', 'tour', '##ney', 'date', '[unused51]', 'tour', '##ney', 'id', '[unused51]', 'tour', '##ney', 'level', '[unused51]', 'tour', '##ney', 'name', '[unused51]', 'winner', 'age', '[unused51]', 'winner', 'entry', '[unused51]', 'winner', 'hand', '[unused51]', 'winner', 'h', '##t', '[unused51]', 'winner', 'id', '[unused51]', 'winner', 'ioc', '[unused51]', 'winner', 'name', '[unused51]', 'winner', 'rank', '[unused51]', 'winner', 'rank', 'points', '[unused51]', 'winner', 'seed', '[unused51]', 'year', '[unused50]', 'rankings', '[unused51]', 'ranking', 'date', '[unused51]', 'ranking', '[unused51]', 'player', 'id', '[unused51]', 'ranking', 'points', '[unused51]', 'tours', '[SEP]']
Target 0: b'SELECT min(loser_rank) FROM matches'
Target TF-P tokens: from matches select min (matches.loser_rank)

[WRONG] [easy] Pred 0:	b'SELECT matches.best_of FROM matches' (-0.124) (length=5)
[WRONG] [easy] Pred 1:	b'SELECT matches.best_of FROM matches ORDER BY matches.loser_rank_points ASC LIMIT 1' (-1.081) (length=10)
[WRONG] [easy] Pred 2:	b'SELECT matches.best_of FROM matches ORDER BY matches.loser_rank_points' (-1.198) (length=7)
[WRONG] [easy] Pred 3:	b'SELECT matches.best_of FROM matches ORDER BY matches.loser_rank_points DESC LIMIT 1' (-1.505) (length=10)
[WRONG] [easy] Pred 4:	b'SELECT matches.loser_rank FROM matches' (-2.286) (length=5)
[WRONG] [easy] Pred 5:	b'SELECT matches.best_of FROM matches ORDER BY matches.loser_rank_points LIMIT 1' (-2.558) (length=9)
[CORRE] [easy] Pred 6:	b'SELECT MIN(matches.loser_rank) FROM matches' (-2.915) (length=8)
Error Case 131

Example 445
wta_1
 +-- players (players)
 |   +-- player_id (player id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- hand (hand)
 |   +-- birth_date (birth date)
 |   +-- country_code (country code)
 +-- matches (matches)
 |   +-- best_of (best of)
 |   +-- draw_size (draw size)
 |   +-- loser_age (loser age)
 |   +-- loser_entry (loser entry)
 |   +-- loser_hand (loser hand)
 |   +-- loser_ht (loser ht)
 |   +-- loser_id (loser id) [FOREIGN]
 |   +-- loser_ioc (loser ioc)
 |   +-- loser_name (loser name)
 |   +-- loser_rank (loser rank)
 |   +-- loser_rank_points (loser rank points)
 |   +-- loser_seed (loser seed)
 |   +-- match_num (match num)
 |   +-- minutes (minutes)
 |   +-- round (round)
 |   +-- score (score)
 |   +-- surface (surface)
 |   +-- tourney_date (tourney date)
 |   +-- tourney_id (tourney id)
 |   +-- tourney_level (tourney level)
 |   +-- tourney_name (tourney name)
 |   +-- winner_age (winner age)
 |   +-- winner_entry (winner entry)
 |   +-- winner_hand (winner hand)
 |   +-- winner_ht (winner ht)
 |   +-- winner_id (winner id) [FOREIGN]
 |   +-- winner_ioc (winner ioc)
 |   +-- winner_name (winner name)
 |   +-- winner_rank (winner rank)
 |   +-- winner_rank_points (winner rank points)
 |   +-- winner_seed (winner seed)
 |   +-- year (year)
 +-- rankings (rankings)
     +-- ranking_date (ranking date)
     +-- ranking (ranking)
     +-- player_id (player id) [FOREIGN]
     +-- ranking_points (ranking points)
     +-- tours (tours)
NL: b'Find the name of tourney that has more than 10 matches.'
NL tokens: [b'find', b'the', b'name', b'of', b'tour', b'##ney', b'that', b'has', b'more', b'than', b'10', b'matches', b'.']
NL tokens (original): [b'Find', b'the', b'name', b'of', b'tour', b'##ney', b'that', b'has', b'more', b'than', b'10', b'matches', b'.']
['[CLS]', 'find', 'the', 'name', 'of', 'tour', '##ney', 'that', 'has', 'more', 'than', '10', 'matches', '.', '[SEP]', '*', '[unused50]', 'players', '[unused51]', 'player', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'hand', '[unused51]', 'birth', 'date', '[unused51]', 'country', 'code', '[unused50]', 'matches', '[unused51]', 'best', 'of', '[unused51]', 'draw', 'size', '[unused51]', 'loser', 'age', '[unused51]', 'loser', 'entry', '[unused51]', 'loser', 'hand', '[unused51]', 'loser', 'h', '##t', '[unused51]', 'loser', 'id', '[unused51]', 'loser', 'ioc', '[unused51]', 'loser', 'name', '[unused51]', 'loser', 'rank', '[unused51]', 'loser', 'rank', 'points', '[unused51]', 'loser', 'seed', '[unused51]', 'match', 'nu', '##m', '[unused51]', 'minutes', '[unused51]', 'round', '[unused51]', 'score', '[unused51]', 'surface', '[unused51]', 'tour', '##ney', 'date', '[unused51]', 'tour', '##ney', 'id', '[unused51]', 'tour', '##ney', 'level', '[unused51]', 'tour', '##ney', 'name', '[unused51]', 'winner', 'age', '[unused51]', 'winner', 'entry', '[unused51]', 'winner', 'hand', '[unused51]', 'winner', 'h', '##t', '[unused51]', 'winner', 'id', '[unused51]', 'winner', 'ioc', '[unused51]', 'winner', 'name', '[unused51]', 'winner', 'rank', '[unused51]', 'winner', 'rank', 'points', '[unused51]', 'winner', 'seed', '[unused51]', 'year', '[unused50]', 'rankings', '[unused51]', 'ranking', 'date', '[unused51]', 'ranking', '[unused51]', 'player', 'id', '[unused51]', 'ranking', 'points', '[unused51]', 'tours', '[SEP]']
Target 0: b'SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10'
Target TF-P tokens: from matches group by matches.tourney_name having count (*) > 10 select matches.tourney_name

[WRONG] [easy] Pred 0:	b'SELECT matches.tourney_name FROM matches GROUP BY matches.tourney_id HAVING COUNT(*) > 10' (-0.077) (length=14)
[CORRE] [easy] Pred 1:	b'SELECT matches.tourney_name FROM matches GROUP BY matches.tourney_name HAVING COUNT(*) > 10' (-0.462) (length=14)
Error Case 132

Example 446
wta_1
 +-- players (players)
 |   +-- player_id (player id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- hand (hand)
 |   +-- birth_date (birth date)
 |   +-- country_code (country code)
 +-- matches (matches)
 |   +-- best_of (best of)
 |   +-- draw_size (draw size)
 |   +-- loser_age (loser age)
 |   +-- loser_entry (loser entry)
 |   +-- loser_hand (loser hand)
 |   +-- loser_ht (loser ht)
 |   +-- loser_id (loser id) [FOREIGN]
 |   +-- loser_ioc (loser ioc)
 |   +-- loser_name (loser name)
 |   +-- loser_rank (loser rank)
 |   +-- loser_rank_points (loser rank points)
 |   +-- loser_seed (loser seed)
 |   +-- match_num (match num)
 |   +-- minutes (minutes)
 |   +-- round (round)
 |   +-- score (score)
 |   +-- surface (surface)
 |   +-- tourney_date (tourney date)
 |   +-- tourney_id (tourney id)
 |   +-- tourney_level (tourney level)
 |   +-- tourney_name (tourney name)
 |   +-- winner_age (winner age)
 |   +-- winner_entry (winner entry)
 |   +-- winner_hand (winner hand)
 |   +-- winner_ht (winner ht)
 |   +-- winner_id (winner id) [FOREIGN]
 |   +-- winner_ioc (winner ioc)
 |   +-- winner_name (winner name)
 |   +-- winner_rank (winner rank)
 |   +-- winner_rank_points (winner rank points)
 |   +-- winner_seed (winner seed)
 |   +-- year (year)
 +-- rankings (rankings)
     +-- ranking_date (ranking date)
     +-- ranking (ranking)
     +-- player_id (player id) [FOREIGN]
     +-- ranking_points (ranking points)
     +-- tours (tours)
NL: b'What are the names of tournaments that have more than 10 matches?'
NL tokens: [b'what', b'are', b'the', b'names', b'of', b'tournaments', b'that', b'have', b'more', b'than', b'10', b'matches', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'of', b'tournaments', b'that', b'have', b'more', b'than', b'10', b'matches', b'?']
['[CLS]', 'what', 'are', 'the', 'names', 'of', 'tournaments', 'that', 'have', 'more', 'than', '10', 'matches', '?', '[SEP]', '*', '[unused50]', 'players', '[unused51]', 'player', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'hand', '[unused51]', 'birth', 'date', '[unused51]', 'country', 'code', '[unused50]', 'matches', '[unused51]', 'best', 'of', '[unused51]', 'draw', 'size', '[unused51]', 'loser', 'age', '[unused51]', 'loser', 'entry', '[unused51]', 'loser', 'hand', '[unused51]', 'loser', 'h', '##t', '[unused51]', 'loser', 'id', '[unused51]', 'loser', 'ioc', '[unused51]', 'loser', 'name', '[unused51]', 'loser', 'rank', '[unused51]', 'loser', 'rank', 'points', '[unused51]', 'loser', 'seed', '[unused51]', 'match', 'nu', '##m', '[unused51]', 'minutes', '[unused51]', 'round', '[unused51]', 'score', '[unused51]', 'surface', '[unused51]', 'tour', '##ney', 'date', '[unused51]', 'tour', '##ney', 'id', '[unused51]', 'tour', '##ney', 'level', '[unused51]', 'tour', '##ney', 'name', '[unused51]', 'winner', 'age', '[unused51]', 'winner', 'entry', '[unused51]', 'winner', 'hand', '[unused51]', 'winner', 'h', '##t', '[unused51]', 'winner', 'id', '[unused51]', 'winner', 'ioc', '[unused51]', 'winner', 'name', '[unused51]', 'winner', 'rank', '[unused51]', 'winner', 'rank', 'points', '[unused51]', 'winner', 'seed', '[unused51]', 'year', '[unused50]', 'rankings', '[unused51]', 'ranking', 'date', '[unused51]', 'ranking', '[unused51]', 'player', 'id', '[unused51]', 'ranking', 'points', '[unused51]', 'tours', '[SEP]']
Target 0: b'SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10'
Target TF-P tokens: from matches group by matches.tourney_name having count (*) > 10 select matches.tourney_name

[WRONG] [easy] Pred 0:	b'SELECT matches.tourney_name FROM matches GROUP BY matches.winner_id HAVING COUNT(*) > 10' (-0.060) (length=14)
[CORRE] [easy] Pred 1:	b'SELECT matches.tourney_name FROM matches GROUP BY matches.tourney_name HAVING COUNT(*) > 10' (-0.547) (length=14)
Error Case 133

ERROR: table "matches" in field expression matches.year is not in the current scope
ERROR: table "matches" in field expression matches.year is not in the current scope
ERROR: Join condition does not match with table: ['players', {'join': 'rankings', 'on': {'eq': ['matches.winner_id', 'players.player_id']}}]
ERROR: Join condition does not match with table: ['players', {'join': 'players', 'on': {'eq': ['matches.winner_id', 'players.player_id']}}]
ERROR: Join condition does not match with table: ['players', {'join': 'rankings', 'on': {'eq': ['players.player_id', 'matches.winner_id']}}]
argument of type 'int' is not iterable
argument of type 'int' is not iterable
Parsing error: from players join matches on matches.winner_id = players.player_id where matches.year = 2013 select matches.winner_name intersect from players join matches.year = 2016 select matches.winner_name
argument of type 'int' is not iterable
Parsing error: from players join matches on matches.winner_id = players.player_id where matches.year = 2013 select matches.winner_name intersect from players intersect from players where matches.year = 2016 select matches.winner_name
Parsing error: from players join matches on matches.winner_id = players.player_id where matches.year = 2013 select matches.winner_name intersect from players intersect from players and matches.year = 2016 select matches.winner_name
'on'
Parsing error: from players join matches = players.player_id = 2013 select matches.winner_name intersect from players where matches.year = 2016 select matches.winner_name
Example 447
 43%|████▎     | 56/130 [06:55<04:43,  3.83s/it]wta_1
 +-- players (players)
 |   +-- player_id (player id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- hand (hand)
 |   +-- birth_date (birth date)
 |   +-- country_code (country code)
 +-- matches (matches)
 |   +-- best_of (best of)
 |   +-- draw_size (draw size)
 |   +-- loser_age (loser age)
 |   +-- loser_entry (loser entry)
 |   +-- loser_hand (loser hand)
 |   +-- loser_ht (loser ht)
 |   +-- loser_id (loser id) [FOREIGN]
 |   +-- loser_ioc (loser ioc)
 |   +-- loser_name (loser name)
 |   +-- loser_rank (loser rank)
 |   +-- loser_rank_points (loser rank points)
 |   +-- loser_seed (loser seed)
 |   +-- match_num (match num)
 |   +-- minutes (minutes)
 |   +-- round (round)
 |   +-- score (score)
 |   +-- surface (surface)
 |   +-- tourney_date (tourney date)
 |   +-- tourney_id (tourney id)
 |   +-- tourney_level (tourney level)
 |   +-- tourney_name (tourney name)
 |   +-- winner_age (winner age)
 |   +-- winner_entry (winner entry)
 |   +-- winner_hand (winner hand)
 |   +-- winner_ht (winner ht)
 |   +-- winner_id (winner id) [FOREIGN]
 |   +-- winner_ioc (winner ioc)
 |   +-- winner_name (winner name)
 |   +-- winner_rank (winner rank)
 |   +-- winner_rank_points (winner rank points)
 |   +-- winner_seed (winner seed)
 |   +-- year (year)
 +-- rankings (rankings)
     +-- ranking_date (ranking date)
     +-- ranking (ranking)
     +-- player_id (player id) [FOREIGN]
     +-- ranking_points (ranking points)
     +-- tours (tours)
NL: b'List the names of all winners who played in both 2013 and 2016.'
NL tokens: [b'list', b'the', b'names', b'of', b'all', b'winners', b'who', b'played', b'in', b'both', b'2013', b'and', b'2016', b'.']
NL tokens (original): [b'List', b'the', b'names', b'of', b'all', b'winners', b'who', b'played', b'in', b'both', b'2013', b'and', b'2016', b'.']
['[CLS]', 'list', 'the', 'names', 'of', 'all', 'winners', 'who', 'played', 'in', 'both', '2013', 'and', '2016', '.', '[SEP]', '*', '[unused50]', 'players', '[unused51]', 'player', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'hand', '[unused51]', 'birth', 'date', '[unused51]', 'country', 'code', '[unused50]', 'matches', '[unused51]', 'best', 'of', '[unused51]', 'draw', 'size', '[unused51]', 'loser', 'age', '[unused51]', 'loser', 'entry', '[unused51]', 'loser', 'hand', '[unused51]', 'loser', 'h', '##t', '[unused51]', 'loser', 'id', '[unused51]', 'loser', 'ioc', '[unused51]', 'loser', 'name', '[unused51]', 'loser', 'rank', '[unused51]', 'loser', 'rank', 'points', '[unused51]', 'loser', 'seed', '[unused51]', 'match', 'nu', '##m', '[unused51]', 'minutes', '[unused51]', 'round', '[unused51]', 'score', '[unused51]', 'surface', '[unused51]', 'tour', '##ney', 'date', '[unused51]', 'tour', '##ney', 'id', '[unused51]', 'tour', '##ney', 'level', '[unused51]', 'tour', '##ney', 'name', '[unused51]', 'winner', 'age', '[unused51]', 'winner', 'entry', '[unused51]', 'winner', 'hand', '[unused51]', 'winner', 'h', '##t', '[unused51]', 'winner', 'id', '[unused51]', 'winner', 'ioc', '[unused51]', 'winner', 'name', '[unused51]', 'winner', 'rank', '[unused51]', 'winner', 'rank', 'points', '[unused51]', 'winner', 'seed', '[unused51]', 'year', '[unused50]', 'rankings', '[unused51]', 'ranking', 'date', '[unused51]', 'ranking', '[unused51]', 'player', 'id', '[unused51]', 'ranking', 'points', '[unused51]', 'tours', '[SEP]']
Target 0: b'SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016'
Target TF-P tokens: from matches where matches.year = 2013 select matches.winner_name intersect from matches where matches.year = 2016 select matches.winner_name

[WRONG] [hard] Pred 0:	b'SELECT matches.winner_name FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.year = 2013 INTERSECT SELECT matches.winner_name FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.year = 2016' (-0.167) (length=30)
[WRONG] [hard] Pred 1:	b'SELECT matches.winner_name FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.year = 2013 INTERSECT SELECT matches.winner_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.year = 2016' (-0.525) (length=30)
[WRONG] [hard] Pred 2:	b'SELECT matches.winner_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.year = 2013 INTERSECT SELECT matches.winner_name FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.year = 2016' (-0.812) (length=30)
Error Case 134

Parsing error: from players intersect rankings on players.player_id = rankings.player_id intersect from matches where matches.year = 2013 select matches.winner_name intersect from players join rankings on players.player_id = rankings.player_id where matches.year = 2016 select matches.winner_name
ERROR: invalid JOIN field "matches": ['players', {'join': 'rankings', 'on': {'and': [{'eq': ['players.player_id', 'rankings.player_id']}, {'eq': ['matches', 'players.player_id']}]}}]
Parsing error: from players join rankings on players.player_id = rankings.player_id and matches on players.player_id = rankings.player_id where matches.year = 2013 select matches.winner_name intersect from players join rankings on players.player_id = rankings.player_id where matches.year = 2016 select matches.winner_name
Parsing error: from players join rankings on players.player_id = rankings.player_id and matches on players.player_id = matches.winner_id where matches.year = 2013 select matches.winner_name intersect from players join rankings on players.player_id = rankings.player_id where matches.year = 2016 select matches.winner_name
Parsing error: from players join rankings on players.player_id = rankings.player_id and matches on matches.winner_id = players.player_id where matches.year = 2013 select matches.winner_name intersect from players join rankings on players.player_id = rankings.player_id where matches.year = 2016 select matches.winner_name
Parsing error: from players join rankings on players.player_id = rankings.player_id and matches on players.player_id = 2013 select matches.winner_name intersect from players join rankings on players.player_id = rankings.player_id where matches.year = 2016 select matches.winner_name
Parsing error: from players join rankings on players.player_id = rankings.player_id intersect from matches where matches.year = 2013 select matches.winner_name intersect from players join rankings on players.player_id = rankings.player_id where matches.year = 2016 select matches.winner_name
Parsing error: from players intersect rankings on players.player_id = rankings.player_id intersect from matches where matches.year = 2013 select matches.winner_name intersect from players where matches.year = 2016 select matches.winner_name
Parsing error: from players intersect rankings on players.player_id = rankings.player_id intersect from matches where matches.year = 2016 select matches.winner_name intersect from players join rankings on players.player_id = rankings.player_id where matches.year = 2016 select matches.winner_name
Parsing error: from players intersect rankings on players.player_id = rankings.player_id intersect from matches where matches.year = 2013 select matches.winner_name intersect from players join rankings on players.player_id = rankings.player_id where matches.year = 2016 select players.first_name
Parsing error: from players intersect rankings on players.player_id = rankings.player_id intersect from matches where matches.year = 2013 select matches.winner_name intersect from players join matches on players.player_id = rankings.player_id where matches.year = 2016 select matches.winner_name
Parsing error: from players intersect rankings on players.player_id = rankings.player_id intersect from matches where matches.year = 2013 select players.first_name intersect from players join rankings on players.player_id = rankings.player_id where matches.year = 2016 select matches.winner_name
ERROR: invalid JOIN field "matches": ['players', {'join': 'rankings', 'on': {'and': [{'eq': ['players.player_id', 'rankings.player_id']}, {'eq': ['matches', 'players.player_id']}]}}]
ERROR: invalid JOIN field "matches": ['players', {'join': 'rankings', 'on': {'and': [{'eq': ['players.player_id', 'rankings.player_id']}, {'eq': ['matches', 'players.player_id']}]}}]
Parsing error: from players intersect rankings on players.player_id = rankings.player_id intersect from matches where matches.year = 2013 select matches.winner_name intersect from players intersect from players where matches.year = 2016 select matches.winner_name
Parsing error: from players intersect rankings on players.player_id = rankings.player_id intersect from matches where matches.year = 2013 select matches.winner_name intersect from players join rankings on players.player_id = rankings.player_id where matches.year = 2013 select matches.winner_name
Example 448
wta_1
 +-- players (players)
 |   +-- player_id (player id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- hand (hand)
 |   +-- birth_date (birth date)
 |   +-- country_code (country code)
 +-- matches (matches)
 |   +-- best_of (best of)
 |   +-- draw_size (draw size)
 |   +-- loser_age (loser age)
 |   +-- loser_entry (loser entry)
 |   +-- loser_hand (loser hand)
 |   +-- loser_ht (loser ht)
 |   +-- loser_id (loser id) [FOREIGN]
 |   +-- loser_ioc (loser ioc)
 |   +-- loser_name (loser name)
 |   +-- loser_rank (loser rank)
 |   +-- loser_rank_points (loser rank points)
 |   +-- loser_seed (loser seed)
 |   +-- match_num (match num)
 |   +-- minutes (minutes)
 |   +-- round (round)
 |   +-- score (score)
 |   +-- surface (surface)
 |   +-- tourney_date (tourney date)
 |   +-- tourney_id (tourney id)
 |   +-- tourney_level (tourney level)
 |   +-- tourney_name (tourney name)
 |   +-- winner_age (winner age)
 |   +-- winner_entry (winner entry)
 |   +-- winner_hand (winner hand)
 |   +-- winner_ht (winner ht)
 |   +-- winner_id (winner id) [FOREIGN]
 |   +-- winner_ioc (winner ioc)
 |   +-- winner_name (winner name)
 |   +-- winner_rank (winner rank)
 |   +-- winner_rank_points (winner rank points)
 |   +-- winner_seed (winner seed)
 |   +-- year (year)
 +-- rankings (rankings)
     +-- ranking_date (ranking date)
     +-- ranking (ranking)
     +-- player_id (player id) [FOREIGN]
     +-- ranking_points (ranking points)
     +-- tours (tours)
NL: b'What are the names of players who won in both 2013 and 2016?'
NL tokens: [b'what', b'are', b'the', b'names', b'of', b'players', b'who', b'won', b'in', b'both', b'2013', b'and', b'2016', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'of', b'players', b'who', b'won', b'in', b'both', b'2013', b'and', b'2016', b'?']
['[CLS]', 'what', 'are', 'the', 'names', 'of', 'players', 'who', 'won', 'in', 'both', '2013', 'and', '2016', '?', '[SEP]', '*', '[unused50]', 'players', '[unused51]', 'player', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'hand', '[unused51]', 'birth', 'date', '[unused51]', 'country', 'code', '[unused50]', 'matches', '[unused51]', 'best', 'of', '[unused51]', 'draw', 'size', '[unused51]', 'loser', 'age', '[unused51]', 'loser', 'entry', '[unused51]', 'loser', 'hand', '[unused51]', 'loser', 'h', '##t', '[unused51]', 'loser', 'id', '[unused51]', 'loser', 'ioc', '[unused51]', 'loser', 'name', '[unused51]', 'loser', 'rank', '[unused51]', 'loser', 'rank', 'points', '[unused51]', 'loser', 'seed', '[unused51]', 'match', 'nu', '##m', '[unused51]', 'minutes', '[unused51]', 'round', '[unused51]', 'score', '[unused51]', 'surface', '[unused51]', 'tour', '##ney', 'date', '[unused51]', 'tour', '##ney', 'id', '[unused51]', 'tour', '##ney', 'level', '[unused51]', 'tour', '##ney', 'name', '[unused51]', 'winner', 'age', '[unused51]', 'winner', 'entry', '[unused51]', 'winner', 'hand', '[unused51]', 'winner', 'h', '##t', '[unused51]', 'winner', 'id', '[unused51]', 'winner', 'ioc', '[unused51]', 'winner', 'name', '[unused51]', 'winner', 'rank', '[unused51]', 'winner', 'rank', 'points', '[unused51]', 'winner', 'seed', '[unused51]', 'year', '[unused50]', 'rankings', '[unused51]', 'ranking', 'date', '[unused51]', 'ranking', '[unused51]', 'player', 'id', '[unused51]', 'ranking', 'points', '[unused51]', 'tours', '[SEP]']
Target 0: b'SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016'
Target TF-P tokens: from matches where matches.year = 2013 select matches.winner_name intersect from matches where matches.year = 2016 select matches.winner_name

[WRONG] hard Pred 0:	No valid output! (0.000)
Error Case 135

Parsing error: from players join tourney Championships "select players.country_code , players.first_name intersect from players join Australian Open" select players.country_code , players.first_name
Parsing error: from players join matches on players.player_id = matches.winner_id where matches.tourney_name = "tourney VALUE" select players.country_code , players.first_name intersect from players join Australian Open "select players.country_code , players.first_name"
Parsing error: from players join tourney Championships "select players.country_code , players.first_name intersect from players join matches on players.player_id = matches.winner_id where matches.tourney_name =" Australian Open "select players.country_code , players.first_name"
Parsing error: from players join matches on players.player_id = matches.winner_id where matches.tourney_name = "tour WTA VALUE" select players.country_code , players.first_name intersect from players join Australian Open "select players.country_code , players.first_name"
Parsing error: from players join tour WTA Championships "select players.country_code , players.first_name intersect from players join Australian Open" select players.country_code , players.first_name
Parsing error: from players join tour Championships "select players.country_code , players.first_name intersect from players join Australian Open" select players.country_code , players.first_name
Parsing error: from players join matches on players.player_id = matches.winner_id where matches.tourney_name = "tour WTA" select players.country_code , players.first_name intersect from players join Australian Open "select players.country_code , players.first_name"
Parsing error: from players join matches on players.player_id = matches.winner_id where matches.tourney_name = "WTA Championships" select players.first_name , players.country_code intersect from players join Australian Open "select players.first_name , players.country_code"
Parsing error: from players select players.first_name , players.country_code select players.birth_date order by players.birth_date desc limit 1
Parsing error: from players select players.first_name , players.country_code order by players.birth_date desc limit 1 , players.country_code
ERROR: "players.country_code" appeared in FROM clause and is not a table
Parsing error: from players select players.first_name , players.country_code order by players.birth_date desc limit limit 1
Example 453
wta_1
 +-- players (players)
 |   +-- player_id (player id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- hand (hand)
 |   +-- birth_date (birth date)
 |   +-- country_code (country code)
 +-- matches (matches)
 |   +-- best_of (best of)
 |   +-- draw_size (draw size)
 |   +-- loser_age (loser age)
 |   +-- loser_entry (loser entry)
 |   +-- loser_hand (loser hand)
 |   +-- loser_ht (loser ht)
 |   +-- loser_id (loser id) [FOREIGN]
 |   +-- loser_ioc (loser ioc)
 |   +-- loser_name (loser name)
 |   +-- loser_rank (loser rank)
 |   +-- loser_rank_points (loser rank points)
 |   +-- loser_seed (loser seed)
 |   +-- match_num (match num)
 |   +-- minutes (minutes)
 |   +-- round (round)
 |   +-- score (score)
 |   +-- surface (surface)
 |   +-- tourney_date (tourney date)
 |   +-- tourney_id (tourney id)
 |   +-- tourney_level (tourney level)
 |   +-- tourney_name (tourney name)
 |   +-- winner_age (winner age)
 |   +-- winner_entry (winner entry)
 |   +-- winner_hand (winner hand)
 |   +-- winner_ht (winner ht)
 |   +-- winner_id (winner id) [FOREIGN]
 |   +-- winner_ioc (winner ioc)
 |   +-- winner_name (winner name)
 |   +-- winner_rank (winner rank)
 |   +-- winner_rank_points (winner rank points)
 |   +-- winner_seed (winner seed)
 |   +-- year (year)
 +-- rankings (rankings)
     +-- ranking_date (ranking date)
     +-- ranking (ranking)
     +-- player_id (player id) [FOREIGN]
     +-- ranking_points (ranking points)
     +-- tours (tours)
NL: b'Find the first name and country code of the oldest player.'
NL tokens: [b'find', b'the', b'first', b'name', b'and', b'country', b'code', b'of', b'the', b'oldest', b'player', b'.']
NL tokens (original): [b'Find', b'the', b'first', b'name', b'and', b'country', b'code', b'of', b'the', b'oldest', b'player', b'.']
['[CLS]', 'find', 'the', 'first', 'name', 'and', 'country', 'code', 'of', 'the', 'oldest', 'player', '.', '[SEP]', '*', '[unused50]', 'players', '[unused51]', 'player', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'hand', '[unused51]', 'birth', 'date', '[unused51]', 'country', 'code', '[unused50]', 'matches', '[unused51]', 'best', 'of', '[unused51]', 'draw', 'size', '[unused51]', 'loser', 'age', '[unused51]', 'loser', 'entry', '[unused51]', 'loser', 'hand', '[unused51]', 'loser', 'h', '##t', '[unused51]', 'loser', 'id', '[unused51]', 'loser', 'ioc', '[unused51]', 'loser', 'name', '[unused51]', 'loser', 'rank', '[unused51]', 'loser', 'rank', 'points', '[unused51]', 'loser', 'seed', '[unused51]', 'match', 'nu', '##m', '[unused51]', 'minutes', '[unused51]', 'round', '[unused51]', 'score', '[unused51]', 'surface', '[unused51]', 'tour', '##ney', 'date', '[unused51]', 'tour', '##ney', 'id', '[unused51]', 'tour', '##ney', 'level', '[unused51]', 'tour', '##ney', 'name', '[unused51]', 'winner', 'age', '[unused51]', 'winner', 'entry', '[unused51]', 'winner', 'hand', '[unused51]', 'winner', 'h', '##t', '[unused51]', 'winner', 'id', '[unused51]', 'winner', 'ioc', '[unused51]', 'winner', 'name', '[unused51]', 'winner', 'rank', '[unused51]', 'winner', 'rank', 'points', '[unused51]', 'winner', 'seed', '[unused51]', 'year', '[unused50]', 'rankings', '[unused51]', 'ranking', 'date', '[unused51]', 'ranking', '[unused51]', 'player', 'id', '[unused51]', 'ranking', 'points', '[unused51]', 'tours', '[SEP]']
Target 0: b'SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1'
Target TF-P tokens: from players select players.first_name , players.country_code order by players.birth_date limit 1

[WRONG] [medium] Pred 0:	b'SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date DESC LIMIT 1' (-0.000) (length=12)
[WRONG] [medium] Pred 1:	b'SELECT players.first_name, players.country_code FROM players GROUP BY players.country_code ORDER BY MAX(players.birth_date) DESC LIMIT 1' (-4.449) (length=17)
[WRONG] [medium] Pred 2:	b'SELECT players.first_name, players.country_code FROM players GROUP BY players.first_name ORDER BY MAX(players.birth_date) DESC LIMIT 1' (-4.705) (length=17)
[WRONG] [medium] Pred 3:	b'SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date DESC LIMIT "oldest"' (-5.358) (length=12)
[WRONG] [medium] Pred 4:	b'SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date DESC LIMIT 1' (-5.417) (length=14)
[WRONG] [medium] Pred 5:	b'SELECT players.first_name, players.country_code, players.birth_date FROM players ORDER BY players.birth_date DESC LIMIT 1' (-5.640) (length=14)
[WRONG] [medium] Pred 6:	b'SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date DESC LIMIT 3' (-5.717) (length=12)
[CORRE] [medium] Pred 7:	b'SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date LIMIT 1' (-5.823) (length=11)
Error Case 136

Parsing error: from players select players.first_name , players.country_code order by players.birth_date desc limit 1 , players.country_code
Parsing error: from players select players.first_name , players.country_code order by players.birth_date desc limit limit 1
Parsing error: from players select players.first_name , players.country_code select players.first_name order by players.birth_date desc limit 1
Example 454
wta_1
 +-- players (players)
 |   +-- player_id (player id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- hand (hand)
 |   +-- birth_date (birth date)
 |   +-- country_code (country code)
 +-- matches (matches)
 |   +-- best_of (best of)
 |   +-- draw_size (draw size)
 |   +-- loser_age (loser age)
 |   +-- loser_entry (loser entry)
 |   +-- loser_hand (loser hand)
 |   +-- loser_ht (loser ht)
 |   +-- loser_id (loser id) [FOREIGN]
 |   +-- loser_ioc (loser ioc)
 |   +-- loser_name (loser name)
 |   +-- loser_rank (loser rank)
 |   +-- loser_rank_points (loser rank points)
 |   +-- loser_seed (loser seed)
 |   +-- match_num (match num)
 |   +-- minutes (minutes)
 |   +-- round (round)
 |   +-- score (score)
 |   +-- surface (surface)
 |   +-- tourney_date (tourney date)
 |   +-- tourney_id (tourney id)
 |   +-- tourney_level (tourney level)
 |   +-- tourney_name (tourney name)
 |   +-- winner_age (winner age)
 |   +-- winner_entry (winner entry)
 |   +-- winner_hand (winner hand)
 |   +-- winner_ht (winner ht)
 |   +-- winner_id (winner id) [FOREIGN]
 |   +-- winner_ioc (winner ioc)
 |   +-- winner_name (winner name)
 |   +-- winner_rank (winner rank)
 |   +-- winner_rank_points (winner rank points)
 |   +-- winner_seed (winner seed)
 |   +-- year (year)
 +-- rankings (rankings)
     +-- ranking_date (ranking date)
     +-- ranking (ranking)
     +-- player_id (player id) [FOREIGN]
     +-- ranking_points (ranking points)
     +-- tours (tours)
NL: b'What is the first name and country code of the oldest player?'
NL tokens: [b'what', b'is', b'the', b'first', b'name', b'and', b'country', b'code', b'of', b'the', b'oldest', b'player', b'?']
NL tokens (original): [b'What', b'is', b'the', b'first', b'name', b'and', b'country', b'code', b'of', b'the', b'oldest', b'player', b'?']
 44%|████▍     | 57/130 [07:01<05:26,  4.47s/it]['[CLS]', 'what', 'is', 'the', 'first', 'name', 'and', 'country', 'code', 'of', 'the', 'oldest', 'player', '?', '[SEP]', '*', '[unused50]', 'players', '[unused51]', 'player', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'hand', '[unused51]', 'birth', 'date', '[unused51]', 'country', 'code', '[unused50]', 'matches', '[unused51]', 'best', 'of', '[unused51]', 'draw', 'size', '[unused51]', 'loser', 'age', '[unused51]', 'loser', 'entry', '[unused51]', 'loser', 'hand', '[unused51]', 'loser', 'h', '##t', '[unused51]', 'loser', 'id', '[unused51]', 'loser', 'ioc', '[unused51]', 'loser', 'name', '[unused51]', 'loser', 'rank', '[unused51]', 'loser', 'rank', 'points', '[unused51]', 'loser', 'seed', '[unused51]', 'match', 'nu', '##m', '[unused51]', 'minutes', '[unused51]', 'round', '[unused51]', 'score', '[unused51]', 'surface', '[unused51]', 'tour', '##ney', 'date', '[unused51]', 'tour', '##ney', 'id', '[unused51]', 'tour', '##ney', 'level', '[unused51]', 'tour', '##ney', 'name', '[unused51]', 'winner', 'age', '[unused51]', 'winner', 'entry', '[unused51]', 'winner', 'hand', '[unused51]', 'winner', 'h', '##t', '[unused51]', 'winner', 'id', '[unused51]', 'winner', 'ioc', '[unused51]', 'winner', 'name', '[unused51]', 'winner', 'rank', '[unused51]', 'winner', 'rank', 'points', '[unused51]', 'winner', 'seed', '[unused51]', 'year', '[unused50]', 'rankings', '[unused51]', 'ranking', 'date', '[unused51]', 'ranking', '[unused51]', 'player', 'id', '[unused51]', 'ranking', 'points', '[unused51]', 'tours', '[SEP]']
Target 0: b'SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1'
Target TF-P tokens: from players select players.first_name , players.country_code order by players.birth_date limit 1

[WRONG] [medium] Pred 0:	b'SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date DESC LIMIT 1' (-0.000) (length=12)
[WRONG] [medium] Pred 1:	b'SELECT players.first_name, players.country_code FROM players GROUP BY players.country_code ORDER BY MAX(players.birth_date) DESC LIMIT 1' (-4.583) (length=17)
[WRONG] [medium] Pred 2:	b'SELECT players.first_name, players.country_code FROM players GROUP BY players.first_name ORDER BY MAX(players.birth_date) DESC LIMIT 1' (-4.585) (length=17)
[WRONG] [medium] Pred 3:	b'SELECT players.first_name, players.country_code FROM players GROUP BY players.country_code ORDER BY COUNT(*) DESC LIMIT 1' (-4.814) (length=17)
[WRONG] [medium] Pred 4:	b'SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date DESC LIMIT 1' (-5.393) (length=14)
[WRONG] [medium] Pred 5:	b'SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date DESC LIMIT "oldest"' (-5.453) (length=12)
[WRONG] [medium] Pred 6:	b'SELECT players.first_name, players.country_code, players.birth_date FROM players ORDER BY players.birth_date DESC LIMIT 1' (-5.656) (length=14)
[WRONG] [medium] Pred 7:	b'SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date DESC LIMIT 3' (-5.696) (length=12)
[CORRE] [medium] Pred 8:	b'SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date ASC LIMIT 1' (-5.919) (length=12)
Error Case 137

Parsing error: from players where players.hand = "left" or players.birth_date >= "L select players.first_name , players.last_name order by players.birth_date"
Parsing error: from players where players.hand = "left" or players.birth_date = "L select players.first_name , players.last_name order by players.birth_date"
Parsing error: from players where players.hand = "left" or players.birth_date <= "L select players.first_name , players.last_name order by players.birth_date"
Parsing error: from players where players.hand = "left" where players.hand = "L" select players.first_name , players.last_name order by players.birth_date
Parsing error: from players where players.hand = "left" or players.birth_date > "L select players.first_name , players.last_name order by players.birth_date"
Parsing error: from players where players.hand = "left" or players.birth_date = "L select distinct players.first_name , players.last_name order by players.birth_date"
Parsing error: from players where players.hand = "left" or players.birth_date >= "L select distinct players.first_name , players.last_name order by players.birth_date"
Parsing error: from players where players.hand = "left" or players.birth_date desc "L select players.first_name , players.last_name order by players.birth_date"
Example 457
wta_1
 +-- players (players)
 |   +-- player_id (player id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- hand (hand)
 |   +-- birth_date (birth date)
 |   +-- country_code (country code)
 +-- matches (matches)
 |   +-- best_of (best of)
 |   +-- draw_size (draw size)
 |   +-- loser_age (loser age)
 |   +-- loser_entry (loser entry)
 |   +-- loser_hand (loser hand)
 |   +-- loser_ht (loser ht)
 |   +-- loser_id (loser id) [FOREIGN]
 |   +-- loser_ioc (loser ioc)
 |   +-- loser_name (loser name)
 |   +-- loser_rank (loser rank)
 |   +-- loser_rank_points (loser rank points)
 |   +-- loser_seed (loser seed)
 |   +-- match_num (match num)
 |   +-- minutes (minutes)
 |   +-- round (round)
 |   +-- score (score)
 |   +-- surface (surface)
 |   +-- tourney_date (tourney date)
 |   +-- tourney_id (tourney id)
 |   +-- tourney_level (tourney level)
 |   +-- tourney_name (tourney name)
 |   +-- winner_age (winner age)
 |   +-- winner_entry (winner entry)
 |   +-- winner_hand (winner hand)
 |   +-- winner_ht (winner ht)
 |   +-- winner_id (winner id) [FOREIGN]
 |   +-- winner_ioc (winner ioc)
 |   +-- winner_name (winner name)
 |   +-- winner_rank (winner rank)
 |   +-- winner_rank_points (winner rank points)
 |   +-- winner_seed (winner seed)
 |   +-- year (year)
 +-- rankings (rankings)
     +-- ranking_date (ranking date)
     +-- ranking (ranking)
     +-- player_id (player id) [FOREIGN]
     +-- ranking_points (ranking points)
     +-- tours (tours)
NL: b'List the first and last name of all players who are left / L hand in the order of birth date.'
NL tokens: [b'list', b'the', b'first', b'and', b'last', b'name', b'of', b'all', b'players', b'who', b'are', b'left', b'/', b'l', b'hand', b'in', b'the', b'order', b'of', b'birth', b'date', b'.']
NL tokens (original): [b'List', b'the', b'first', b'and', b'last', b'name', b'of', b'all', b'players', b'who', b'are', b'left', b'/', b'L', b'hand', b'in', b'the', b'order', b'of', b'birth', b'date', b'.']
['[CLS]', 'list', 'the', 'first', 'and', 'last', 'name', 'of', 'all', 'players', 'who', 'are', 'left', '/', 'l', 'hand', 'in', 'the', 'order', 'of', 'birth', 'date', '.', '[SEP]', '*', '[unused50]', 'players', '[unused51]', 'player', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused49]', 'last', '[unused49]', 'date', '[unused51]', 'hand', '[unused51]', 'birth', 'date', '[unused51]', 'country', 'code', '[unused50]', 'matches', '[unused51]', 'best', 'of', '[unused51]', 'draw', 'size', '[unused51]', 'loser', 'age', '[unused51]', 'loser', 'entry', '[unused51]', 'loser', 'hand', '[unused51]', 'loser', 'h', '##t', '[unused51]', 'loser', 'id', '[unused51]', 'loser', 'ioc', '[unused51]', 'loser', 'name', '[unused51]', 'loser', 'rank', '[unused51]', 'loser', 'rank', 'points', '[unused51]', 'loser', 'seed', '[unused51]', 'match', 'nu', '##m', '[unused51]', 'minutes', '[unused51]', 'round', '[unused51]', 'score', '[unused51]', 'surface', '[unused51]', 'tour', '##ney', 'date', '[unused51]', 'tour', '##ney', 'id', '[unused51]', 'tour', '##ney', 'level', '[unused51]', 'tour', '##ney', 'name', '[unused51]', 'winner', 'age', '[unused51]', 'winner', 'entry', '[unused51]', 'winner', 'hand', '[unused51]', 'winner', 'h', '##t', '[unused51]', 'winner', 'id', '[unused51]', 'winner', 'ioc', '[unused51]', 'winner', 'name', '[unused51]', 'winner', 'rank', '[unused51]', 'winner', 'rank', 'points', '[unused51]', 'winner', 'seed', '[unused51]', 'year', '[unused50]', 'rankings', '[unused51]', 'ranking', 'date', '[unused51]', 'ranking', '[unused51]', 'player', 'id', '[unused51]', 'ranking', 'points', '[unused51]', 'tours', '[SEP]']
Target 0: b"SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date"
Target TF-P tokens: from players where players.hand = "L" select players.first_name , players.last_name order by players.birth_date

[WRONG] [medium] Pred 0:	b'SELECT players.first_name, players.last_name FROM players WHERE players.hand = "left" OR players.hand = "L" ORDER BY players.birth_date' (-0.027) (length=21)
[WRONG] [medium] Pred 1:	b'SELECT players.first_name, players.last_name FROM players WHERE players.hand = "left" OR players.birth_date LIKE "% L %" ORDER BY players.birth_date' (-1.559) (length=23)
[WRONG] [medium] Pred 2:	b'SELECT players.first_name, players.last_name FROM players WHERE players.hand = "left" OR players.birth_date = "L" ORDER BY players.birth_date' (-1.686) (length=21)
[WRONG] [medium] Pred 3:	b'SELECT players.first_name, players.last_name FROM players WHERE players.hand = "left" OR players.birth_date <= "L %" ORDER BY players.birth_date' (-1.774) (length=22)
[WRONG] [medium] Pred 4:	b'SELECT players.first_name, players.last_name FROM players WHERE players.hand = "left" OR players.birth_date >= "L" ORDER BY players.birth_date' (-1.821) (length=21)
[WRONG] [medium] Pred 5:	b'SELECT players.first_name, players.last_name FROM players WHERE players.hand = "left" OR players.birth_date = "L %" ORDER BY players.birth_date' (-2.177) (length=22)
[WRONG] [medium] Pred 6:	b'SELECT players.first_name, players.last_name FROM players WHERE players.hand = "left" OR players.birth_date >= "L %" ORDER BY players.birth_date' (-2.336) (length=22)
[WRONG] [medium] Pred 7:	b'SELECT players.first_name, players.last_name FROM players WHERE players.hand = "left" OR players.birth_date <= "L" ORDER BY players.birth_date' (-2.361) (length=21)
Error Case 138

Parsing error: from players join tours = players.player_id group by players.country_code select players.first_name , players.country_code order by count (*) desc limit 1
Parsing error: from players join tours = players.player_id group by players.first_name , players.country_code select players.first_name , players.country_code order by count (*) desc limit 1
Parsing error: from players , players.country_code order by count (*) desc limit 1
Parsing error: from players join players.last_name = (from players group by players.country_code select players.first_name , players.country_code order by count (*) desc limit 1
Parsing error: from players , players.country_code = (from players group by players.country_code select players.first_name , players.country_code order by count (*) desc limit 1
Parsing error: from players join tours = "group by players.country_code select players.first_name , players.country_code order by count (*) desc limit 1"
Parsing error: from players join players.last_name = (from players group by players.player_id select players.first_name , players.country_code order by count (*) desc limit 1
Parsing error: from players join tours = "group by players.first_name select players.first_name , players.country_code order by count (*) desc limit 1"
Parsing error: from players join tours = players.player_id group by players.first_name select players.first_name , players.country_code order by count (*) desc limit 1
Parsing error: from players , players.country_code order by count (*) desc limit 1 select players.first_name , players.country_code
Parsing error: from players join tours = players.player_id group by players.player_id select players.first_name , players.country_code order by count (*) desc limit 1
Example 459
wta_1
 +-- players (players)
 |   +-- player_id (player id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- hand (hand)
 |   +-- birth_date (birth date)
 |   +-- country_code (country code)
 +-- matches (matches)
 |   +-- best_of (best of)
 |   +-- draw_size (draw size)
 |   +-- loser_age (loser age)
 |   +-- loser_entry (loser entry)
 |   +-- loser_hand (loser hand)
 |   +-- loser_ht (loser ht)
 |   +-- loser_id (loser id) [FOREIGN]
 |   +-- loser_ioc (loser ioc)
 |   +-- loser_name (loser name)
 |   +-- loser_rank (loser rank)
 |   +-- loser_rank_points (loser rank points)
 |   +-- loser_seed (loser seed)
 |   +-- match_num (match num)
 |   +-- minutes (minutes)
 |   +-- round (round)
 |   +-- score (score)
 |   +-- surface (surface)
 |   +-- tourney_date (tourney date)
 |   +-- tourney_id (tourney id)
 |   +-- tourney_level (tourney level)
 |   +-- tourney_name (tourney name)
 |   +-- winner_age (winner age)
 |   +-- winner_entry (winner entry)
 |   +-- winner_hand (winner hand)
 |   +-- winner_ht (winner ht)
 |   +-- winner_id (winner id) [FOREIGN]
 |   +-- winner_ioc (winner ioc)
 |   +-- winner_name (winner name)
 |   +-- winner_rank (winner rank)
 |   +-- winner_rank_points (winner rank points)
 |   +-- winner_seed (winner seed)
 |   +-- year (year)
 +-- rankings (rankings)
     +-- ranking_date (ranking date)
     +-- ranking (ranking)
     +-- player_id (player id) [FOREIGN]
     +-- ranking_points (ranking points)
     +-- tours (tours)
NL: b'Find the first name and country code of the player who did the most number of tours.'
NL tokens: [b'find', b'the', b'first', b'name', b'and', b'country', b'code', b'of', b'the', b'player', b'who', b'did', b'the', b'most', b'number', b'of', b'tours', b'.']
NL tokens (original): [b'Find', b'the', b'first', b'name', b'and', b'country', b'code', b'of', b'the', b'player', b'who', b'did', b'the', b'most', b'number', b'of', b'tours', b'.']
['[CLS]', 'find', 'the', 'first', 'name', 'and', 'country', 'code', 'of', 'the', 'player', 'who', 'did', 'the', 'most', 'number', 'of', 'tours', '.', '[SEP]', '*', '[unused50]', 'players', '[unused51]', 'player', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'hand', '[unused51]', 'birth', 'date', '[unused51]', 'country', 'code', '[unused50]', 'matches', '[unused51]', 'best', 'of', '[unused51]', 'draw', 'size', '[unused51]', 'loser', 'age', '[unused51]', 'loser', 'entry', '[unused51]', 'loser', 'hand', '[unused51]', 'loser', 'h', '##t', '[unused51]', 'loser', 'id', '[unused51]', 'loser', 'ioc', '[unused51]', 'loser', 'name', '[unused51]', 'loser', 'rank', '[unused51]', 'loser', 'rank', 'points', '[unused51]', 'loser', 'seed', '[unused51]', 'match', 'nu', '##m', '[unused51]', 'minutes', '[unused51]', 'round', '[unused51]', 'score', '[unused51]', 'surface', '[unused51]', 'tour', '##ney', 'date', '[unused51]', 'tour', '##ney', 'id', '[unused51]', 'tour', '##ney', 'level', '[unused51]', 'tour', '##ney', 'name', '[unused51]', 'winner', 'age', '[unused51]', 'winner', 'entry', '[unused51]', 'winner', 'hand', '[unused51]', 'winner', 'h', '##t', '[unused51]', 'winner', 'id', '[unused51]', 'winner', 'ioc', '[unused51]', 'winner', 'name', '[unused51]', 'winner', 'rank', '[unused51]', 'winner', 'rank', 'points', '[unused51]', 'winner', 'seed', '[unused51]', 'year', '[unused50]', 'rankings', '[unused51]', 'ranking', 'date', '[unused51]', 'ranking', '[unused51]', 'player', 'id', '[unused51]', 'ranking', 'points', '[unused51]', 'tours', '[SEP]']
Target 0: b'SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1'
Target TF-P tokens: from players join rankings on players.player_id = rankings.player_id select players.country_code , players.first_name order by rankings.tours desc limit 1

[WRONG] [hard] Pred 0:	b'SELECT players.first_name, players.country_code FROM players GROUP BY players.country_code ORDER BY COUNT(*) DESC LIMIT 1' (-0.429) (length=17)
[WRONG] [hard] Pred 1:	b'SELECT players.first_name, players.country_code FROM players JOIN matches ON players.player_id = matches.winner_id GROUP BY players.player_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.148) (length=23)
[WRONG] [hard] Pred 2:	b'SELECT players.first_name, players.country_code FROM players JOIN players ON players.player_id = players.country_code GROUP BY players.player_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.368) (length=23)
[WRONG] [hard] Pred 3:	b'SELECT players.first_name, players.country_code FROM players JOIN matches ON players.player_id = matches.winner_id GROUP BY matches.winner_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.577) (length=23)
[WRONG] [hard] Pred 4:	b'SELECT players.first_name, players.country_code FROM players GROUP BY players.first_name, players.country_code ORDER BY COUNT(*) DESC LIMIT 1' (-2.787) (length=19)
Error Case 139

Parsing error: from players , players.country_code order by count (*) desc limit 1 select players.first_name , players.country_code
Parsing error: from players , players.country_code = (from players group by players.country_code select players.first_name , players.country_code order by count (*) desc limit 1
Parsing error: from players , players.country_code order by count (*) desc limit 1
Parsing error: from players , players.country_code order by count (*) desc limit 1 select players.first_name , players.country_code order by players.country_code desc limit 1
Parsing error: from players , players.country_code order by count (*) desc limit 1) select players.first_name , players.country_code
Parsing error: from players having count (*) desc limit 1 select players.first_name , players.country_code
Example 460
wta_1
 +-- players (players)
 |   +-- player_id (player id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- hand (hand)
 |   +-- birth_date (birth date)
 |   +-- country_code (country code)
 +-- matches (matches)
 |   +-- best_of (best of)
 |   +-- draw_size (draw size)
 |   +-- loser_age (loser age)
 |   +-- loser_entry (loser entry)
 |   +-- loser_hand (loser hand)
 |   +-- loser_ht (loser ht)
 |   +-- loser_id (loser id) [FOREIGN]
 |   +-- loser_ioc (loser ioc)
 |   +-- loser_name (loser name)
 |   +-- loser_rank (loser rank)
 |   +-- loser_rank_points (loser rank points)
 |   +-- loser_seed (loser seed)
 |   +-- match_num (match num)
 |   +-- minutes (minutes)
 |   +-- round (round)
 |   +-- score (score)
 |   +-- surface (surface)
 |   +-- tourney_date (tourney date)
 |   +-- tourney_id (tourney id)
 |   +-- tourney_level (tourney level)
 |   +-- tourney_name (tourney name)
 |   +-- winner_age (winner age)
 |   +-- winner_entry (winner entry)
 |   +-- winner_hand (winner hand)
 |   +-- winner_ht (winner ht)
 |   +-- winner_id (winner id) [FOREIGN]
 |   +-- winner_ioc (winner ioc)
 |   +-- winner_name (winner name)
 |   +-- winner_rank (winner rank)
 |   +-- winner_rank_points (winner rank points)
 |   +-- winner_seed (winner seed)
 |   +-- year (year)
 +-- rankings (rankings)
     +-- ranking_date (ranking date)
     +-- ranking (ranking)
     +-- player_id (player id) [FOREIGN]
     +-- ranking_points (ranking points)
     +-- tours (tours)
NL: b'What is the first name and country code of the player with the most tours?'
NL tokens: [b'what', b'is', b'the', b'first', b'name', b'and', b'country', b'code', b'of', b'the', b'player', b'with', b'the', b'most', b'tours', b'?']
NL tokens (original): [b'What', b'is', b'the', b'first', b'name', b'and', b'country', b'code', b'of', b'the', b'player', b'with', b'the', b'most', b'tours', b'?']
['[CLS]', 'what', 'is', 'the', 'first', 'name', 'and', 'country', 'code', 'of', 'the', 'player', 'with', 'the', 'most', 'tours', '?', '[SEP]', '*', '[unused50]', 'players', '[unused51]', 'player', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'hand', '[unused51]', 'birth', 'date', '[unused51]', 'country', 'code', '[unused50]', 'matches', '[unused51]', 'best', 'of', '[unused51]', 'draw', 'size', '[unused51]', 'loser', 'age', '[unused51]', 'loser', 'entry', '[unused51]', 'loser', 'hand', '[unused51]', 'loser', 'h', '##t', '[unused51]', 'loser', 'id', '[unused51]', 'loser', 'ioc', '[unused51]', 'loser', 'name', '[unused51]', 'loser', 'rank', '[unused51]', 'loser', 'rank', 'points', '[unused51]', 'loser', 'seed', '[unused51]', 'match', 'nu', '##m', '[unused51]', 'minutes', '[unused51]', 'round', '[unused51]', 'score', '[unused51]', 'surface', '[unused51]', 'tour', '##ney', 'date', '[unused51]', 'tour', '##ney', 'id', '[unused51]', 'tour', '##ney', 'level', '[unused51]', 'tour', '##ney', 'name', '[unused51]', 'winner', 'age', '[unused51]', 'winner', 'entry', '[unused51]', 'winner', 'hand', '[unused51]', 'winner', 'h', '##t', '[unused51]', 'winner', 'id', '[unused51]', 'winner', 'ioc', '[unused51]', 'winner', 'name', '[unused51]', 'winner', 'rank', '[unused51]', 'winner', 'rank', 'points', '[unused51]', 'winner', 'seed', '[unused51]', 'year', '[unused50]', 'rankings', '[unused51]', 'ranking', 'date', '[unused51]', 'ranking', '[unused51]', 'player', 'id', '[unused51]', 'ranking', 'points', '[unused51]', 'tours', '[SEP]']
Target 0: b'SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1'
Target TF-P tokens: from players join rankings on players.player_id = rankings.player_id select players.country_code , players.first_name order by rankings.tours desc limit 1

[WRONG] [hard] Pred 0:	b'SELECT players.first_name, players.country_code FROM players GROUP BY players.country_code ORDER BY COUNT(*) DESC LIMIT 1' (-0.783) (length=17)
[WRONG] [hard] Pred 1:	b'SELECT players.first_name, players.country_code FROM players GROUP BY players.first_name, players.country_code ORDER BY COUNT(*) DESC LIMIT 1' (-2.208) (length=19)
[WRONG] [hard] Pred 2:	b'SELECT players.first_name, players.country_code FROM players GROUP BY players.first_name ORDER BY COUNT(*) DESC LIMIT 1' (-2.533) (length=17)
[WRONG] [hard] Pred 3:	b'SELECT players.first_name, players.country_code FROM players JOIN players ON players.player_id = players.player_id GROUP BY players.first_name, players.country_code ORDER BY COUNT(*) DESC LIMIT 1' (-3.272) (length=25)
[WRONG] [hard] Pred 4:	b'SELECT players.first_name, players.country_code FROM players UNION SELECT players.first_name, players.country_code FROM players GROUP BY players.country_code ORDER BY COUNT(*) DESC LIMIT 1' (-3.287) (length=24)
[WRONG] [hard] Pred 5:	b'SELECT players.first_name, players.country_code FROM players JOIN players ON players.player_id = players.player_id GROUP BY players.player_id ORDER BY COUNT(*) DESC LIMIT 1' (-3.352) (length=23)
[WRONG] [hard] Pred 6:	b'SELECT players.first_name, players.country_code FROM players JOIN players ON players.player_id = players.country_code GROUP BY players.player_id ORDER BY COUNT(*) DESC LIMIT 1' (-3.384) (length=23)
[WRONG] [hard] Pred 7:	b'SELECT players.first_name, players.country_code FROM players JOIN players ON players.player_id = players.player_id GROUP BY players.first_name ORDER BY COUNT(*) DESC LIMIT 1' (-3.479) (length=23)
[WRONG] [hard] Pred 8:	b'SELECT players.first_name, players.country_code FROM players GROUP BY players.player_id ORDER BY COUNT(*) DESC LIMIT 1' (-4.668) (length=17)
[WRONG] [hard] Pred 9:	b'SELECT players.first_name, players.country_code FROM players HAVING COUNT(*) = 1' (-5.248) (length=14)
Error Case 140

ERROR: Join condition does not match with table: ['rankings', {'join': 'players', 'on': {'eq': ['rankings.player_id', 'players.player_id']}}, {'join': 'matches', 'on': {'eq': ['players.player_id', 'rankings.player_id']}}]
ERROR: Join condition does not match with table: ['rankings', {'join': 'players', 'on': {'eq': ['rankings.player_id', 'players.player_id']}}, {'join': 'matches', 'on': {'eq': ['players.player_id', 'rankings.player_id']}}]
ERROR: Join condition does not match with table: ['rankings', {'join': 'players', 'on': {'eq': ['rankings.player_id', 'players.player_id']}}, {'join': 'matches', 'on': {'eq': ['players.player_id', 'rankings.player_id']}}]
ERROR: Join condition does not match with table: ['rankings', {'join': 'players', 'on': {'eq': ['rankings.player_id', 'players.player_id']}}, {'join': 'matches', 'on': {'eq': ['players.player_id', 'rankings.player_id']}}]
Parsing error: from rankings join players on rankings.player_id = players.player_id count matches on players.player_id = rankings.player_id group by matches.winner_name select matches.winner_name , matches.winner_rank order by count (*) desc limit 1
ERROR: Join condition does not match with table: ['rankings', {'join': 'players', 'on': {'eq': ['rankings.player_id', 'players.player_id']}}, {'join': 'matches', 'on': {'eq': ['players.player_id', 'rankings.ranking_points']}}]
Parsing error: from rankings join players on rankings.player_id = players.player_id count matches on players.player_id = rankings.player_id group by matches.winner_name select matches.winner_name , matches.winner_rank_points order by count (*) desc limit 1
Parsing error: from rankings join players on rankings.player_id = players.player_id count matches on players.player_id = rankings.player_id group by players.player_id select matches.winner_name , matches.winner_rank order by count (*) desc limit 1
ERROR: Join condition does not match with table: ['rankings', {'join': 'players', 'on': {'eq': ['rankings.player_id', 'players.player_id']}}, {'join': 'matches', 'on': {'eq': ['players.player_id', 'rankings.ranking_points']}}]
ERROR: Join condition does not match with table: ['rankings', {'join': 'players', 'on': {'eq': ['rankings.player_id', 'players.player_id']}}, {'join': 'matches', 'on': {'eq': ['players.player_id', 'rankings.player_id']}}]
ERROR: Join condition does not match with table: ['rankings', {'join': 'players', 'on': {'eq': ['rankings.player_id', 'players.player_id']}}, {'join': 'matches', 'on': {'eq': ['players.player_id', 'rankings.player_id']}}]
ERROR: Join condition does not match with table: ['rankings', {'join': 'players', 'on': {'eq': ['rankings.player_id', 'players.player_id']}}, {'join': 'matches', 'on': {'eq': ['players.player_id', 'rankings.player_id']}}]
Example 463
wta_1
 +-- players (players)
 |   +-- player_id (player id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- hand (hand)
 |   +-- birth_date (birth date)
 |   +-- country_code (country code)
 +-- matches (matches)
 |   +-- best_of (best of)
 |   +-- draw_size (draw size)
 |   +-- loser_age (loser age)
 |   +-- loser_entry (loser entry)
 |   +-- loser_hand (loser hand)
 |   +-- loser_ht (loser ht)
 |   +-- loser_id (loser id) [FOREIGN]
 |   +-- loser_ioc (loser ioc)
 |   +-- loser_name (loser name)
 |   +-- loser_rank (loser rank)
 |   +-- loser_rank_points (loser rank points)
 |   +-- loser_seed (loser seed)
 |   +-- match_num (match num)
 |   +-- minutes (minutes)
 |   +-- round (round)
 |   +-- score (score)
 |   +-- surface (surface)
 |   +-- tourney_date (tourney date)
 |   +-- tourney_id (tourney id)
 |   +-- tourney_level (tourney level)
 |   +-- tourney_name (tourney name)
 |   +-- winner_age (winner age)
 |   +-- winner_entry (winner entry)
 |   +-- winner_hand (winner hand)
 |   +-- winner_ht (winner ht)
 |   +-- winner_id (winner id) [FOREIGN]
 |   +-- winner_ioc (winner ioc)
 |   +-- winner_name (winner name)
 |   +-- winner_rank (winner rank)
 |   +-- winner_rank_points (winner rank points)
 |   +-- winner_seed (winner seed)
 |   +-- year (year)
 +-- rankings (rankings)
     +-- ranking_date (ranking date)
     +-- ranking (ranking)
     +-- player_id (player id) [FOREIGN]
     +-- ranking_points (ranking points)
     +-- tours (tours)
NL: b'Find the name and rank points of the winner who won the most times.'
NL tokens: [b'find', b'the', b'name', b'and', b'rank', b'points', b'of', b'the', b'winner', b'who', b'won', b'the', b'most', b'times', b'.']
NL tokens (original): [b'Find', b'the', b'name', b'and', b'rank', b'points', b'of', b'the', b'winner', b'who', b'won', b'the', b'most', b'times', b'.']
['[CLS]', 'find', 'the', 'name', 'and', 'rank', 'points', 'of', 'the', 'winner', 'who', 'won', 'the', 'most', 'times', '.', '[SEP]', '*', '[unused50]', 'players', '[unused51]', 'player', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'hand', '[unused51]', 'birth', 'date', '[unused51]', 'country', 'code', '[unused50]', 'matches', '[unused51]', 'best', 'of', '[unused51]', 'draw', 'size', '[unused51]', 'loser', 'age', '[unused51]', 'loser', 'entry', '[unused51]', 'loser', 'hand', '[unused51]', 'loser', 'h', '##t', '[unused51]', 'loser', 'id', '[unused51]', 'loser', 'ioc', '[unused51]', 'loser', 'name', '[unused51]', 'loser', 'rank', '[unused51]', 'loser', 'rank', 'points', '[unused51]', 'loser', 'seed', '[unused51]', 'match', 'nu', '##m', '[unused51]', 'minutes', '[unused51]', 'round', '[unused51]', 'score', '[unused51]', 'surface', '[unused51]', 'tour', '##ney', 'date', '[unused51]', 'tour', '##ney', 'id', '[unused51]', 'tour', '##ney', 'level', '[unused51]', 'tour', '##ney', 'name', '[unused51]', 'winner', 'age', '[unused51]', 'winner', 'entry', '[unused51]', 'winner', 'hand', '[unused51]', 'winner', 'h', '##t', '[unused51]', 'winner', 'id', '[unused51]', 'winner', 'ioc', '[unused51]', 'winner', 'name', '[unused51]', 'winner', 'rank', '[unused51]', 'winner', 'rank', 'points', '[unused51]', 'winner', 'seed', '[unused51]', 'year', '[unused50]', 'rankings', '[unused51]', 'ranking', 'date', '[unused51]', 'ranking', '[unused51]', 'player', 'id', '[unused51]', 'ranking', 'points', '[unused51]', 'tours', '[SEP]']
Target 0: b'SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from matches group by matches.winner_name select matches.winner_name , matches.winner_rank_points order by count (*) desc limit 1

 45%|████▍     | 58/130 [07:10<06:51,  5.72s/it][WRONG] [hard] Pred 0:	b'SELECT matches.winner_name, matches.winner_rank FROM rankings JOIN players ON rankings.player_id = players.player_id JOIN matches ON players.player_id = matches.winner_id GROUP BY matches.winner_name ORDER BY COUNT(*) DESC LIMIT 1' (-2.567) (length=29)
[WRONG] [hard] Pred 1:	b'SELECT matches.winner_name, matches.winner_rank_points FROM rankings JOIN players ON rankings.player_id = players.player_id JOIN matches ON players.player_id = matches.winner_id GROUP BY matches.winner_name ORDER BY COUNT(*) DESC LIMIT 1' (-2.732) (length=29)
[WRONG] [hard] Pred 2:	b'SELECT matches.winner_name, matches.winner_rank FROM rankings JOIN players ON rankings.player_id = players.player_id JOIN matches ON players.player_id = matches.winner_id GROUP BY players.player_id ORDER BY COUNT(*) DESC LIMIT 1' (-3.392) (length=29)
[WRONG] [hard] Pred 3:	b'SELECT matches.winner_name, matches.winner_rank FROM rankings JOIN players ON rankings.player_id = players.player_id JOIN matches ON players.player_id = matches.winner_rank_points GROUP BY players.player_id ORDER BY COUNT(*) DESC LIMIT 1' (-3.606) (length=29)
Error Case 141

Parsing error: from players join matches on players.player_id = matches.winner_id group by matches.winner_name select matches.winner_name , order by count (*) desc limit 1
ERROR: Join condition does not match with table: ['players', {'join': 'matches', 'on': {'eq': ['matches.winner_id', 'matches.winner_id']}}]
Example 464
wta_1
 +-- players (players)
 |   +-- player_id (player id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- hand (hand)
 |   +-- birth_date (birth date)
 |   +-- country_code (country code)
 +-- matches (matches)
 |   +-- best_of (best of)
 |   +-- draw_size (draw size)
 |   +-- loser_age (loser age)
 |   +-- loser_entry (loser entry)
 |   +-- loser_hand (loser hand)
 |   +-- loser_ht (loser ht)
 |   +-- loser_id (loser id) [FOREIGN]
 |   +-- loser_ioc (loser ioc)
 |   +-- loser_name (loser name)
 |   +-- loser_rank (loser rank)
 |   +-- loser_rank_points (loser rank points)
 |   +-- loser_seed (loser seed)
 |   +-- match_num (match num)
 |   +-- minutes (minutes)
 |   +-- round (round)
 |   +-- score (score)
 |   +-- surface (surface)
 |   +-- tourney_date (tourney date)
 |   +-- tourney_id (tourney id)
 |   +-- tourney_level (tourney level)
 |   +-- tourney_name (tourney name)
 |   +-- winner_age (winner age)
 |   +-- winner_entry (winner entry)
 |   +-- winner_hand (winner hand)
 |   +-- winner_ht (winner ht)
 |   +-- winner_id (winner id) [FOREIGN]
 |   +-- winner_ioc (winner ioc)
 |   +-- winner_name (winner name)
 |   +-- winner_rank (winner rank)
 |   +-- winner_rank_points (winner rank points)
 |   +-- winner_seed (winner seed)
 |   +-- year (year)
 +-- rankings (rankings)
     +-- ranking_date (ranking date)
     +-- ranking (ranking)
     +-- player_id (player id) [FOREIGN]
     +-- ranking_points (ranking points)
     +-- tours (tours)
NL: b'What is the name of the winner who has won the most matches, and how many rank points does this player have?'
NL tokens: [b'what', b'is', b'the', b'name', b'of', b'the', b'winner', b'who', b'has', b'won', b'the', b'most', b'matches', b',', b'and', b'how', b'many', b'rank', b'points', b'does', b'this', b'player', b'have', b'?']
NL tokens (original): [b'What', b'is', b'the', b'name', b'of', b'the', b'winner', b'who', b'has', b'won', b'the', b'most', b'matches', b',', b'and', b'how', b'many', b'rank', b'points', b'does', b'this', b'player', b'have', b'?']
['[CLS]', 'what', 'is', 'the', 'name', 'of', 'the', 'winner', 'who', 'has', 'won', 'the', 'most', 'matches', ',', 'and', 'how', 'many', 'rank', 'points', 'does', 'this', 'player', 'have', '?', '[SEP]', '*', '[unused50]', 'players', '[unused51]', 'player', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'hand', '[unused51]', 'birth', 'date', '[unused51]', 'country', 'code', '[unused50]', 'matches', '[unused51]', 'best', 'of', '[unused51]', 'draw', 'size', '[unused51]', 'loser', 'age', '[unused51]', 'loser', 'entry', '[unused51]', 'loser', 'hand', '[unused51]', 'loser', 'h', '##t', '[unused51]', 'loser', 'id', '[unused51]', 'loser', 'ioc', '[unused51]', 'loser', 'name', '[unused51]', 'loser', 'rank', '[unused51]', 'loser', 'rank', 'points', '[unused51]', 'loser', 'seed', '[unused51]', 'match', 'nu', '##m', '[unused51]', 'minutes', '[unused51]', 'round', '[unused51]', 'score', '[unused51]', 'surface', '[unused51]', 'tour', '##ney', 'date', '[unused51]', 'tour', '##ney', 'id', '[unused51]', 'tour', '##ney', 'level', '[unused51]', 'tour', '##ney', 'name', '[unused51]', 'winner', 'age', '[unused51]', 'winner', 'entry', '[unused51]', 'winner', 'hand', '[unused51]', 'winner', 'h', '##t', '[unused51]', 'winner', 'id', '[unused51]', 'winner', 'ioc', '[unused51]', 'winner', 'name', '[unused51]', 'winner', 'rank', '[unused51]', 'winner', 'rank', 'points', '[unused51]', 'winner', 'seed', '[unused51]', 'year', '[unused50]', 'rankings', '[unused51]', 'ranking', 'date', '[unused51]', 'ranking', '[unused51]', 'player', 'id', '[unused51]', 'ranking', 'points', '[unused51]', 'tours', '[SEP]']
Target 0: b'SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from matches group by matches.winner_name select matches.winner_name , matches.winner_rank_points order by count (*) desc limit 1

[WRONG] [hard] Pred 0:	b'SELECT matches.winner_name, matches.winner_rank_points FROM players JOIN matches ON players.player_id = matches.winner_id GROUP BY matches.winner_name ORDER BY COUNT(*) DESC LIMIT 1' (-0.020) (length=23)
[WRONG] [hard] Pred 1:	b'SELECT matches.winner_name, COUNT(*) FROM players JOIN matches ON players.player_id = matches.winner_id GROUP BY matches.winner_name ORDER BY COUNT(*) DESC LIMIT 1' (-0.438) (length=26)
[WRONG] [hard] Pred 2:	b'SELECT matches.winner_name, matches.winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id GROUP BY matches.winner_name ORDER BY COUNT(*) DESC LIMIT 1' (-1.632) (length=23)
[WRONG] [hard] Pred 3:	b'SELECT matches.winner_name, matches.winner_rank_points FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.match_num = (SELECT matches.winner_name, COUNT(*) FROM matches GROUP BY matches.winner_name ORDER BY COUNT(*) DESC LIMIT 1) UNION SELECT matches.winner_name, matches.winner_rank_points FROM players JOIN matches ON players.player_id = matches.winner_id GROUP BY matches.winner_name ORDER BY COUNT(*) DESC LIMIT 1' (-1.711) (length=60)
[WRONG] [hard] Pred 4:	b'SELECT matches.winner_name, matches.winner_rank_points FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.match_num = (SELECT matches.winner_name, matches.winner_rank_points FROM matches GROUP BY matches.winner_name ORDER BY COUNT(*) DESC LIMIT 1) UNION SELECT matches.winner_name, matches.winner_rank_points FROM players JOIN matches ON players.player_id = matches.winner_id GROUP BY matches.winner_name ORDER BY COUNT(*) DESC LIMIT 1' (-1.903) (length=57)
[WRONG] [hard] Pred 5:	b'SELECT matches.winner_name, matches.winner_rank_points FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.match_num = (SELECT matches.winner_name, COUNT(*) FROM matches GROUP BY matches.winner_name ORDER BY COUNT(*) DESC LIMIT 1) UNION SELECT matches.winner_name, COUNT(*) FROM players JOIN matches ON players.player_id = matches.winner_id GROUP BY matches.winner_name ORDER BY COUNT(*) DESC' (-2.084) (length=60)
[WRONG] [hard] Pred 6:	b'SELECT matches.winner_name, matches.winner_rank_points FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.match_num = (SELECT matches.winner_name, COUNT(*) FROM matches GROUP BY matches.winner_name ORDER BY COUNT(*) DESC LIMIT 1) UNION SELECT matches.winner_name, matches.winner_rank_points FROM players JOIN matches ON players.player_id = matches.winner_rank_points GROUP BY matches.winner_name ORDER BY COUNT(*) DESC LIMIT 1' (-2.121) (length=60)
[WRONG] [hard] Pred 7:	b'SELECT matches.winner_name, matches.winner_rank_points FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.match_num = (SELECT matches.winner_name, COUNT(*) FROM matches GROUP BY matches.winner_name ORDER BY COUNT(*) DESC LIMIT 1)' (-2.123) (length=37)
[WRONG] [hard] Pred 8:	b'SELECT matches.winner_name, matches.winner_rank_points FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.match_num = (SELECT matches.winner_name, matches.winner_rank_points FROM matches GROUP BY matches.winner_name ORDER BY COUNT(*) DESC LIMIT 1) UNION SELECT matches.winner_name, COUNT(*) FROM players JOIN matches ON players.player_id = matches.winner_id GROUP BY matches.winner_name ORDER BY COUNT(*) DESC LIMIT 1' (-2.188) (length=60)
[WRONG] [hard] Pred 9:	b'SELECT matches.winner_name, matches.winner_rank_points FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.match_num = (SELECT matches.winner_name, matches.winner_rank_points FROM matches GROUP BY matches.winner_name ORDER BY COUNT(*) DESC LIMIT 1)' (-2.214) (length=34)
[WRONG] [hard] Pred 10:	b'SELECT matches.winner_name, matches.winner_rank_points FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.match_num = (SELECT matches.winner_name, COUNT(*) FROM matches GROUP BY matches.winner_name ORDER BY COUNT(*) DESC LIMIT 1) UNION SELECT matches.winner_name, SUM(matches.winner_rank_points) FROM players JOIN matches ON players.player_id = matches.winner_id GROUP BY matches.winner_name ORDER BY COUNT(*) DESC' (-2.377) (length=60)
[WRONG] [hard] Pred 11:	b'SELECT matches.winner_name, matches.winner_rank_points FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.match_num = (SELECT matches.winner_name, COUNT(*) FROM matches GROUP BY matches.winner_name ORDER BY COUNT(*) DESC LIMIT 1) UNION SELECT matches.winner_name, SUM(matches.winner_rank_points) FROM players JOIN matches ON players.player_id = matches.winner_id GROUP BY matches.winner_name' (-2.453) (length=55)
[WRONG] [hard] Pred 12:	b'SELECT matches.winner_name, matches.winner_rank_points FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.match_num = (SELECT matches.winner_name, COUNT(*) FROM matches GROUP BY matches.winner_name ORDER BY COUNT(*) DESC LIMIT 1) ORDER BY matches.winner_rank_points DESC LIMIT 1' (-2.512) (length=42)
[WRONG] [hard] Pred 13:	b'SELECT matches.winner_name, MAX(matches.winner_rank_points) FROM players JOIN matches ON players.player_id = matches.winner_id GROUP BY matches.winner_name ORDER BY COUNT(*) DESC LIMIT 1' (-2.599) (length=26)
Error Case 142

ERROR: "{'name': '= Australian Open', 'value': 'participated', 'is_table': True}" appeared in FROM clause and is not a table
ERROR: "{'name': '= Australian Open', 'value': 'highest', 'is_table': True}" appeared in FROM clause and is not a table
ERROR: "{'name': '= Australian Open', 'value': 'participated', 'is_table': True}" appeared in FROM clause and is not a table
ERROR: "{'name': '= Australian Open', 'value': 'participated', 'is_table': True}" appeared in FROM clause and is not a table
ERROR: "{'name': '= Australian Open', 'value': 'highest', 'is_table': True}" appeared in FROM clause and is not a table
ERROR: "{'name': '= Australian Open', 'value': 'highest', 'is_table': True}" appeared in FROM clause and is not a table
ERROR: "{'name': '= the Australian Open', 'value': 'participated', 'is_table': True}" appeared in FROM clause and is not a table
ERROR: "{'name': '= participated Australian Open', 'value': 'participated', 'is_table': True}" appeared in FROM clause and is not a table
ERROR: "{'name': '= Australian Open', 'value': 'participated', 'is_table': True}" appeared in FROM clause and is not a table
ERROR: "{'name': '= Australian Open', 'value': 'points', 'is_table': True}" appeared in FROM clause and is not a table
ERROR: "{'name': '= Australian Open', 'value': 'winner', 'is_table': True}" appeared in FROM clause and is not a table
ERROR: "{'name': '= the Open', 'value': 'participated', 'is_table': True}" appeared in FROM clause and is not a table
ERROR: "{'name': '= the Australian Open', 'value': 'participated', 'is_table': True}" appeared in FROM clause and is not a table
ERROR: "{'name': '= participated Australian Open', 'value': 'participated', 'is_table': True}" appeared in FROM clause and is not a table
ERROR: "{'name': '= the Australian Open', 'value': 'participated', 'is_table': True}" appeared in FROM clause and is not a table
ERROR: "{'name': '= participated Australian Open', 'value': 'participated', 'is_table': True}" appeared in FROM clause and is not a table
Example 465
wta_1
 +-- players (players)
 |   +-- player_id (player id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- hand (hand)
 |   +-- birth_date (birth date)
 |   +-- country_code (country code)
 +-- matches (matches)
 |   +-- best_of (best of)
 |   +-- draw_size (draw size)
 |   +-- loser_age (loser age)
 |   +-- loser_entry (loser entry)
 |   +-- loser_hand (loser hand)
 |   +-- loser_ht (loser ht)
 |   +-- loser_id (loser id) [FOREIGN]
 |   +-- loser_ioc (loser ioc)
 |   +-- loser_name (loser name)
 |   +-- loser_rank (loser rank)
 |   +-- loser_rank_points (loser rank points)
 |   +-- loser_seed (loser seed)
 |   +-- match_num (match num)
 |   +-- minutes (minutes)
 |   +-- round (round)
 |   +-- score (score)
 |   +-- surface (surface)
 |   +-- tourney_date (tourney date)
 |   +-- tourney_id (tourney id)
 |   +-- tourney_level (tourney level)
 |   +-- tourney_name (tourney name)
 |   +-- winner_age (winner age)
 |   +-- winner_entry (winner entry)
 |   +-- winner_hand (winner hand)
 |   +-- winner_ht (winner ht)
 |   +-- winner_id (winner id) [FOREIGN]
 |   +-- winner_ioc (winner ioc)
 |   +-- winner_name (winner name)
 |   +-- winner_rank (winner rank)
 |   +-- winner_rank_points (winner rank points)
 |   +-- winner_seed (winner seed)
 |   +-- year (year)
 +-- rankings (rankings)
     +-- ranking_date (ranking date)
     +-- ranking (ranking)
     +-- player_id (player id) [FOREIGN]
     +-- ranking_points (ranking points)
     +-- tours (tours)
NL: b'Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.'
NL tokens: [b'find', b'the', b'name', b'of', b'the', b'winner', b'who', b'has', b'the', b'highest', b'rank', b'points', b'and', b'participated', b'in', b'the', b'australian', b'open', b'tour', b'##ney', b'.']
NL tokens (original): [b'Find', b'the', b'name', b'of', b'the', b'winner', b'who', b'has', b'the', b'highest', b'rank', b'points', b'and', b'participated', b'in', b'the', b'Australian', b'Open', b'tour', b'##ney', b'.']
['[CLS]', 'find', 'the', 'name', 'of', 'the', 'winner', 'who', 'has', 'the', 'highest', 'rank', 'points', 'and', 'participated', 'in', 'the', 'australian', 'open', 'tour', '##ney', '.', '[SEP]', '*', '[unused50]', 'players', '[unused51]', 'player', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'hand', '[unused51]', 'birth', 'date', '[unused51]', 'country', 'code', '[unused50]', 'matches', '[unused51]', 'best', 'of', '[unused51]', 'draw', 'size', '[unused51]', 'loser', 'age', '[unused51]', 'loser', 'entry', '[unused51]', 'loser', 'hand', '[unused51]', 'loser', 'h', '##t', '[unused51]', 'loser', 'id', '[unused51]', 'loser', 'ioc', '[unused51]', 'loser', 'name', '[unused51]', 'loser', 'rank', '[unused51]', 'loser', 'rank', 'points', '[unused51]', 'loser', 'seed', '[unused51]', 'match', 'nu', '##m', '[unused51]', 'minutes', '[unused51]', 'round', '[unused51]', 'score', '[unused51]', 'surface', '[unused51]', 'tour', '##ney', 'date', '[unused51]', 'tour', '##ney', 'id', '[unused51]', 'tour', '##ney', 'level', '[unused51]', 'tour', '##ney', 'name', '[unused49]', 'australian', 'open', '[unused51]', 'winner', 'age', '[unused51]', 'winner', 'entry', '[unused51]', 'winner', 'hand', '[unused51]', 'winner', 'h', '##t', '[unused51]', 'winner', 'id', '[unused51]', 'winner', 'ioc', '[unused51]', 'winner', 'name', '[unused51]', 'winner', 'rank', '[unused51]', 'winner', 'rank', 'points', '[unused51]', 'winner', 'seed', '[unused51]', 'year', '[unused50]', 'rankings', '[unused51]', 'ranking', 'date', '[unused51]', 'ranking', '[unused51]', 'player', 'id', '[unused51]', 'ranking', 'points', '[unused51]', 'tours', '[SEP]']
Target 0: b"SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"
Target TF-P tokens: from matches where matches.tourney_name = "Australian Open" select matches.winner_name order by matches.winner_rank_points desc limit 1

[WRONG] hard Pred 0:	No valid output! (0.000)
Error Case 143

Parsing error: from matches join the "and matches.winner_rank = (from matches where matches.tourney_name =" Australian Open "select max (matches.winner_rank_points)) select matches.winner_name order by matches.winner_rank_points desc limit 1"
Parsing error: from matches join the "and matches.winner_rank = (from Australian Open" select max (matches.winner_rank_points)) select matches.winner_name order by matches.winner_rank_points desc limit 1
Parsing error: from matches join most "and matches.winner_rank = (from matches where matches.tourney_name =" Australian Open "select max (matches.winner_rank_points)) select matches.winner_name order by matches.winner_rank_points desc limit 1"
Parsing error: from matches join most "and matches.winner_rank = (from Australian Open" select max (matches.winner_rank_points)) select matches.winner_name order by matches.winner_rank_points desc limit 1
Parsing error: from matches where matches.winner_rank = (from Australian Open "select max (matches.winner_rank_points)) select matches.winner_name order by matches.winner_rank_points desc limit 1"
Parsing error: from matches join with "and matches.winner_rank = (from Australian Open" select max (matches.winner_rank_points)) select matches.winner_name order by matches.winner_rank_points desc limit 1
Parsing error: from matches join Australian Open "select matches.winner_name order by matches.winner_rank_points desc limit 1"
ERROR: "{'name': '= Australian Open', 'value': 'the', 'is_table': True}" appeared in FROM clause and is not a table
ERROR: "{'name': '= Australian Open', 'value': 'rank', 'is_table': True}" appeared in FROM clause and is not a table
Parsing error: from matches join with "= Australian Open" select matches.winner_name order by matches.winner_rank_points desc limit 1
ERROR: "{'name': '= Australian Open', 'value': 'most', 'is_table': True}" appeared in FROM clause and is not a table
ERROR: "{'name': '= Australian Open', 'value': 'of', 'is_table': True}" appeared in FROM clause and is not a table
Parsing error: from matches join most "and matches.winner_rank = (from matches where matches.tourney_name =" Australian Open "select max (matches.winner_rank_points)) select matches.winner_name"
Parsing error: from matches join the "and matches.winner_rank = (from matches where matches.tourney_name =" Australian Open "select max (matches.winner_rank_points)) select matches.winner_name"
Example 466
wta_1
 +-- players (players)
 |   +-- player_id (player id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- hand (hand)
 |   +-- birth_date (birth date)
 |   +-- country_code (country code)
 +-- matches (matches)
 |   +-- best_of (best of)
 |   +-- draw_size (draw size)
 |   +-- loser_age (loser age)
 |   +-- loser_entry (loser entry)
 |   +-- loser_hand (loser hand)
 |   +-- loser_ht (loser ht)
 |   +-- loser_id (loser id) [FOREIGN]
 |   +-- loser_ioc (loser ioc)
 |   +-- loser_name (loser name)
 |   +-- loser_rank (loser rank)
 |   +-- loser_rank_points (loser rank points)
 |   +-- loser_seed (loser seed)
 |   +-- match_num (match num)
 |   +-- minutes (minutes)
 |   +-- round (round)
 |   +-- score (score)
 |   +-- surface (surface)
 |   +-- tourney_date (tourney date)
 |   +-- tourney_id (tourney id)
 |   +-- tourney_level (tourney level)
 |   +-- tourney_name (tourney name)
 |   +-- winner_age (winner age)
 |   +-- winner_entry (winner entry)
 |   +-- winner_hand (winner hand)
 |   +-- winner_ht (winner ht)
 |   +-- winner_id (winner id) [FOREIGN]
 |   +-- winner_ioc (winner ioc)
 |   +-- winner_name (winner name)
 |   +-- winner_rank (winner rank)
 |   +-- winner_rank_points (winner rank points)
 |   +-- winner_seed (winner seed)
 |   +-- year (year)
 +-- rankings (rankings)
     +-- ranking_date (ranking date)
     +-- ranking (ranking)
     +-- player_id (player id) [FOREIGN]
     +-- ranking_points (ranking points)
     +-- tours (tours)
NL: b'What is the name of the winner with the most rank points who participated in the Australian Open tournament?'
NL tokens: [b'what', b'is', b'the', b'name', b'of', b'the', b'winner', b'with', b'the', b'most', b'rank', b'points', b'who', b'participated', b'in', b'the', b'australian', b'open', b'tournament', b'?']
NL tokens (original): [b'What', b'is', b'the', b'name', b'of', b'the', b'winner', b'with', b'the', b'most', b'rank', b'points', b'who', b'participated', b'in', b'the', b'Australian', b'Open', b'tournament', b'?']
['[CLS]', 'what', 'is', 'the', 'name', 'of', 'the', 'winner', 'with', 'the', 'most', 'rank', 'points', 'who', 'participated', 'in', 'the', 'australian', 'open', 'tournament', '?', '[SEP]', '*', '[unused50]', 'players', '[unused51]', 'player', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'hand', '[unused51]', 'birth', 'date', '[unused51]', 'country', 'code', '[unused50]', 'matches', '[unused51]', 'best', 'of', '[unused51]', 'draw', 'size', '[unused51]', 'loser', 'age', '[unused51]', 'loser', 'entry', '[unused51]', 'loser', 'hand', '[unused51]', 'loser', 'h', '##t', '[unused51]', 'loser', 'id', '[unused51]', 'loser', 'ioc', '[unused51]', 'loser', 'name', '[unused51]', 'loser', 'rank', '[unused51]', 'loser', 'rank', 'points', '[unused51]', 'loser', 'seed', '[unused51]', 'match', 'nu', '##m', '[unused51]', 'minutes', '[unused51]', 'round', '[unused51]', 'score', '[unused51]', 'surface', '[unused51]', 'tour', '##ney', 'date', '[unused51]', 'tour', '##ney', 'id', '[unused51]', 'tour', '##ney', 'level', '[unused51]', 'tour', '##ney', 'name', '[unused49]', 'australian', 'open', '[unused51]', 'winner', 'age', '[unused51]', 'winner', 'entry', '[unused51]', 'winner', 'hand', '[unused51]', 'winner', 'h', '##t', '[unused51]', 'winner', 'id', '[unused51]', 'winner', 'ioc', '[unused51]', 'winner', 'name', '[unused51]', 'winner', 'rank', '[unused51]', 'winner', 'rank', 'points', '[unused51]', 'winner', 'seed', '[unused51]', 'year', '[unused50]', 'rankings', '[unused51]', 'ranking', 'date', '[unused51]', 'ranking', '[unused51]', 'player', 'id', '[unused51]', 'ranking', 'points', '[unused51]', 'tours', '[SEP]']
Target 0: b"SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"
Target TF-P tokens: from matches where matches.tourney_name = "Australian Open" select matches.winner_name order by matches.winner_rank_points desc limit 1

[WRONG] [hard] Pred 0:	b'SELECT matches.winner_name FROM matches WHERE matches.winner_rank = (SELECT MAX(matches.winner_rank_points) FROM matches WHERE matches.tourney_name = "Australian Open") ORDER BY matches.winner_rank_points DESC LIMIT 1' (-1.850) (length=29)
[WRONG] [hard] Pred 1:	b'SELECT matches.winner_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = "Australian Open" ORDER BY matches.winner_rank_points DESC LIMIT 1' (-2.007) (length=23)
Error Case 144

ERROR: Join condition does not match with table: ['players', {'join': 'matches', 'on': {'eq': ['matches.loser_id', 'matches.winner_id']}}]
Example 467
wta_1
 +-- players (players)
 |   +-- player_id (player id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- hand (hand)
 |   +-- birth_date (birth date)
 |   +-- country_code (country code)
 +-- matches (matches)
 |   +-- best_of (best of)
 |   +-- draw_size (draw size)
 |   +-- loser_age (loser age)
 |   +-- loser_entry (loser entry)
 |   +-- loser_hand (loser hand)
 |   +-- loser_ht (loser ht)
 |   +-- loser_id (loser id) [FOREIGN]
 |   +-- loser_ioc (loser ioc)
 |   +-- loser_name (loser name)
 |   +-- loser_rank (loser rank)
 |   +-- loser_rank_points (loser rank points)
 |   +-- loser_seed (loser seed)
 |   +-- match_num (match num)
 |   +-- minutes (minutes)
 |   +-- round (round)
 |   +-- score (score)
 |   +-- surface (surface)
 |   +-- tourney_date (tourney date)
 |   +-- tourney_id (tourney id)
 |   +-- tourney_level (tourney level)
 |   +-- tourney_name (tourney name)
 |   +-- winner_age (winner age)
 |   +-- winner_entry (winner entry)
 |   +-- winner_hand (winner hand)
 |   +-- winner_ht (winner ht)
 |   +-- winner_id (winner id) [FOREIGN]
 |   +-- winner_ioc (winner ioc)
 |   +-- winner_name (winner name)
 |   +-- winner_rank (winner rank)
 |   +-- winner_rank_points (winner rank points)
 |   +-- winner_seed (winner seed)
 |   +-- year (year)
 +-- rankings (rankings)
     +-- ranking_date (ranking date)
     +-- ranking (ranking)
     +-- player_id (player id) [FOREIGN]
     +-- ranking_points (ranking points)
     +-- tours (tours)
NL: b'find the names of loser and winner who played in the match with greatest number of minutes.'
NL tokens: [b'find', b'the', b'names', b'of', b'loser', b'and', b'winner', b'who', b'played', b'in', b'the', b'match', b'with', b'greatest', b'number', b'of', b'minutes', b'.']
NL tokens (original): [b'find', b'the', b'names', b'of', b'loser', b'and', b'winner', b'who', b'played', b'in', b'the', b'match', b'with', b'greatest', b'number', b'of', b'minutes', b'.']
['[CLS]', 'find', 'the', 'names', 'of', 'loser', 'and', 'winner', 'who', 'played', 'in', 'the', 'match', 'with', 'greatest', 'number', 'of', 'minutes', '.', '[SEP]', '*', '[unused50]', 'players', '[unused51]', 'player', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'hand', '[unused51]', 'birth', 'date', '[unused51]', 'country', 'code', '[unused50]', 'matches', '[unused51]', 'best', 'of', '[unused51]', 'draw', 'size', '[unused51]', 'loser', 'age', '[unused51]', 'loser', 'entry', '[unused51]', 'loser', 'hand', '[unused51]', 'loser', 'h', '##t', '[unused51]', 'loser', 'id', '[unused51]', 'loser', 'ioc', '[unused51]', 'loser', 'name', '[unused51]', 'loser', 'rank', '[unused51]', 'loser', 'rank', 'points', '[unused51]', 'loser', 'seed', '[unused51]', 'match', 'nu', '##m', '[unused51]', 'minutes', '[unused51]', 'round', '[unused51]', 'score', '[unused51]', 'surface', '[unused51]', 'tour', '##ney', 'date', '[unused51]', 'tour', '##ney', 'id', '[unused51]', 'tour', '##ney', 'level', '[unused51]', 'tour', '##ney', 'name', '[unused51]', 'winner', 'age', '[unused51]', 'winner', 'entry', '[unused51]', 'winner', 'hand', '[unused51]', 'winner', 'h', '##t', '[unused51]', 'winner', 'id', '[unused51]', 'winner', 'ioc', '[unused51]', 'winner', 'name', '[unused51]', 'winner', 'rank', '[unused51]', 'winner', 'rank', 'points', '[unused51]', 'winner', 'seed', '[unused51]', 'year', '[unused50]', 'rankings', '[unused51]', 'ranking', 'date', '[unused51]', 'ranking', '[unused51]', 'player', 'id', '[unused51]', 'ranking', 'points', '[unused51]', 'tours', '[SEP]']
Target 0: b'SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1'
Target TF-P tokens: from matches select matches.winner_name , matches.loser_name order by matches.minutes desc limit 1

[WRONG] [medium] Pred 0:	b'SELECT matches.loser_name, matches.minutes FROM matches ORDER BY matches.minutes DESC LIMIT 1' (-0.138) (length=12)
[WRONG] [medium] Pred 1:	b'SELECT matches.loser_name, matches.winner_name FROM players JOIN matches ON matches.loser_id = players.player_id ORDER BY matches.minutes DESC LIMIT 1' (-0.766) (length=18)
[CORRE] [medium] Pred 2:	b'SELECT matches.loser_name, matches.winner_name FROM matches ORDER BY matches.minutes DESC LIMIT 1' (-0.851) (length=12)
Error Case 145

ERROR: Join condition does not match with table: ['players', {'join': 'matches', 'on': {'eq': ['matches.winner_id', 'matches.loser_id']}}]
ERROR: Join condition does not match with table: ['players', {'join': 'matches', 'on': {'eq': ['matches.winner_id', 'matches.loser_id']}}]
ERROR: Join condition does not match with table: ['players', {'join': 'matches', 'on': {'eq': ['matches.winner_id', 'matches.loser_id']}}]
ERROR: Join condition does not match with table: ['players', {'join': 'matches', 'on': {'eq': ['matches.winner_id', 'matches.loser_ht']}}]
ERROR: Join condition does not match with table: ['players', {'join': 'matches', 'on': {'eq': ['matches.winner_id', 'matches.winner_id']}}]
Example 468
wta_1
 +-- players (players)
 |   +-- player_id (player id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- hand (hand)
 |   +-- birth_date (birth date)
 |   +-- country_code (country code)
 +-- matches (matches)
 |   +-- best_of (best of)
 |   +-- draw_size (draw size)
 |   +-- loser_age (loser age)
 |   +-- loser_entry (loser entry)
 |   +-- loser_hand (loser hand)
 |   +-- loser_ht (loser ht)
 |   +-- loser_id (loser id) [FOREIGN]
 |   +-- loser_ioc (loser ioc)
 |   +-- loser_name (loser name)
 |   +-- loser_rank (loser rank)
 |   +-- loser_rank_points (loser rank points)
 |   +-- loser_seed (loser seed)
 |   +-- match_num (match num)
 |   +-- minutes (minutes)
 |   +-- round (round)
 |   +-- score (score)
 |   +-- surface (surface)
 |   +-- tourney_date (tourney date)
 |   +-- tourney_id (tourney id)
 |   +-- tourney_level (tourney level)
 |   +-- tourney_name (tourney name)
 |   +-- winner_age (winner age)
 |   +-- winner_entry (winner entry)
 |   +-- winner_hand (winner hand)
 |   +-- winner_ht (winner ht)
 |   +-- winner_id (winner id) [FOREIGN]
 |   +-- winner_ioc (winner ioc)
 |   +-- winner_name (winner name)
 |   +-- winner_rank (winner rank)
 |   +-- winner_rank_points (winner rank points)
 |   +-- winner_seed (winner seed)
 |   +-- year (year)
 +-- rankings (rankings)
     +-- ranking_date (ranking date)
     +-- ranking (ranking)
     +-- player_id (player id) [FOREIGN]
     +-- ranking_points (ranking points)
     +-- tours (tours)
NL: b'What are the names of the winner and loser who played in the longest match?'
NL tokens: [b'what', b'are', b'the', b'names', b'of', b'the', b'winner', b'and', b'loser', b'who', b'played', b'in', b'the', b'longest', b'match', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'of', b'the', b'winner', b'and', b'loser', b'who', b'played', b'in', b'the', b'longest', b'match', b'?']
['[CLS]', 'what', 'are', 'the', 'names', 'of', 'the', 'winner', 'and', 'loser', 'who', 'played', 'in', 'the', 'longest', 'match', '?', '[SEP]', '*', '[unused50]', 'players', '[unused51]', 'player', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'hand', '[unused51]', 'birth', 'date', '[unused51]', 'country', 'code', '[unused50]', 'matches', '[unused51]', 'best', 'of', '[unused51]', 'draw', 'size', '[unused51]', 'loser', 'age', '[unused51]', 'loser', 'entry', '[unused51]', 'loser', 'hand', '[unused51]', 'loser', 'h', '##t', '[unused51]', 'loser', 'id', '[unused51]', 'loser', 'ioc', '[unused51]', 'loser', 'name', '[unused51]', 'loser', 'rank', '[unused51]', 'loser', 'rank', 'points', '[unused51]', 'loser', 'seed', '[unused51]', 'match', 'nu', '##m', '[unused51]', 'minutes', '[unused51]', 'round', '[unused51]', 'score', '[unused51]', 'surface', '[unused51]', 'tour', '##ney', 'date', '[unused51]', 'tour', '##ney', 'id', '[unused51]', 'tour', '##ney', 'level', '[unused51]', 'tour', '##ney', 'name', '[unused51]', 'winner', 'age', '[unused51]', 'winner', 'entry', '[unused51]', 'winner', 'hand', '[unused51]', 'winner', 'h', '##t', '[unused51]', 'winner', 'id', '[unused51]', 'winner', 'ioc', '[unused51]', 'winner', 'name', '[unused51]', 'winner', 'rank', '[unused51]', 'winner', 'rank', 'points', '[unused51]', 'winner', 'seed', '[unused51]', 'year', '[unused50]', 'rankings', '[unused51]', 'ranking', 'date', '[unused51]', 'ranking', '[unused51]', 'player', 'id', '[unused51]', 'ranking', 'points', '[unused51]', 'tours', '[SEP]']
Target 0: b'SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1'
Target TF-P tokens: from matches select matches.winner_name , matches.loser_name order by matches.minutes desc limit 1

[WRONG] [medium] Pred 0:	b'SELECT matches.winner_name, matches.loser_name FROM players JOIN matches ON matches.winner_id = players.player_id ORDER BY matches.year DESC LIMIT 1' (-0.850) (length=18)
[WRONG] [medium] Pred 1:	b'SELECT matches.winner_name, matches.loser_name FROM players JOIN matches ON players.player_id = matches.loser_id ORDER BY matches.year DESC LIMIT 1' (-0.942) (length=18)
[WRONG] [medium] Pred 2:	b'SELECT matches.winner_name, matches.loser_name FROM matches ORDER BY matches.year DESC LIMIT 1' (-1.558) (length=12)
[WRONG] [medium] Pred 3:	b'SELECT matches.winner_name, matches.loser_name FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY matches.year DESC LIMIT 1' (-1.639) (length=18)
[WRONG] [medium] Pred 4:	b'SELECT matches.winner_name, matches.loser_name FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY matches.year DESC LIMIT 1' (-1.741) (length=18)
[WRONG] [medium] Pred 5:	b'SELECT matches.winner_name, matches.loser_ioc FROM players JOIN matches ON players.player_id = matches.loser_id ORDER BY matches.year DESC LIMIT 1' (-1.965) (length=18)
[WRONG] [medium] Pred 6:	b'SELECT matches.winner_name, matches.loser_ioc FROM players JOIN matches ON matches.winner_id = players.player_id ORDER BY matches.year DESC LIMIT 1' (-2.215) (length=18)
[WRONG] [medium] Pred 7:	b'SELECT matches.winner_name, matches.loser_ht FROM players JOIN matches ON players.player_id = matches.loser_id ORDER BY matches.year DESC LIMIT 1' (-2.812) (length=18)
[WRONG] [medium] Pred 8:	b'SELECT matches.winner_name, matches.loser_ioc FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY matches.year DESC LIMIT 1' (-2.890) (length=18)
[WRONG] [medium] Pred 9:	b'SELECT matches.winner_name, matches.loser_ioc FROM matches ORDER BY matches.year DESC LIMIT 1' (-3.117) (length=12)
[WRONG] [medium] Pred 10:	b'SELECT matches.winner_name, matches.loser_ht FROM matches ORDER BY matches.year DESC LIMIT 1' (-3.747) (length=12)
Error Case 146

Example 469
wta_1
 +-- players (players)
 |   +-- player_id (player id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- hand (hand)
 |   +-- birth_date (birth date)
 |   +-- country_code (country code)
 +-- matches (matches)
 |   +-- best_of (best of)
 |   +-- draw_size (draw size)
 |   +-- loser_age (loser age)
 |   +-- loser_entry (loser entry)
 |   +-- loser_hand (loser hand)
 |   +-- loser_ht (loser ht)
 |   +-- loser_id (loser id) [FOREIGN]
 |   +-- loser_ioc (loser ioc)
 |   +-- loser_name (loser name)
 |   +-- loser_rank (loser rank)
 |   +-- loser_rank_points (loser rank points)
 |   +-- loser_seed (loser seed)
 |   +-- match_num (match num)
 |   +-- minutes (minutes)
 |   +-- round (round)
 |   +-- score (score)
 |   +-- surface (surface)
 |   +-- tourney_date (tourney date)
 |   +-- tourney_id (tourney id)
 |   +-- tourney_level (tourney level)
 |   +-- tourney_name (tourney name)
 |   +-- winner_age (winner age)
 |   +-- winner_entry (winner entry)
 |   +-- winner_hand (winner hand)
 |   +-- winner_ht (winner ht)
 |   +-- winner_id (winner id) [FOREIGN]
 |   +-- winner_ioc (winner ioc)
 |   +-- winner_name (winner name)
 |   +-- winner_rank (winner rank)
 |   +-- winner_rank_points (winner rank points)
 |   +-- winner_seed (winner seed)
 |   +-- year (year)
 +-- rankings (rankings)
     +-- ranking_date (ranking date)
     +-- ranking (ranking)
     +-- player_id (player id) [FOREIGN]
     +-- ranking_points (ranking points)
     +-- tours (tours)
NL: b'Find the average ranking for each player and their first name.'
NL tokens: [b'find', b'the', b'average', b'ranking', b'for', b'each', b'player', b'and', b'their', b'first', b'name', b'.']
NL tokens (original): [b'Find', b'the', b'average', b'ranking', b'for', b'each', b'player', b'and', b'their', b'first', b'name', b'.']
['[CLS]', 'find', 'the', 'average', 'ranking', 'for', 'each', 'player', 'and', 'their', 'first', 'name', '.', '[SEP]', '*', '[unused50]', 'players', '[unused51]', 'player', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'hand', '[unused51]', 'birth', 'date', '[unused51]', 'country', 'code', '[unused50]', 'matches', '[unused51]', 'best', 'of', '[unused51]', 'draw', 'size', '[unused51]', 'loser', 'age', '[unused51]', 'loser', 'entry', '[unused51]', 'loser', 'hand', '[unused51]', 'loser', 'h', '##t', '[unused51]', 'loser', 'id', '[unused51]', 'loser', 'ioc', '[unused51]', 'loser', 'name', '[unused51]', 'loser', 'rank', '[unused51]', 'loser', 'rank', 'points', '[unused51]', 'loser', 'seed', '[unused51]', 'match', 'nu', '##m', '[unused51]', 'minutes', '[unused51]', 'round', '[unused51]', 'score', '[unused51]', 'surface', '[unused51]', 'tour', '##ney', 'date', '[unused51]', 'tour', '##ney', 'id', '[unused51]', 'tour', '##ney', 'level', '[unused51]', 'tour', '##ney', 'name', '[unused51]', 'winner', 'age', '[unused51]', 'winner', 'entry', '[unused51]', 'winner', 'hand', '[unused51]', 'winner', 'h', '##t', '[unused51]', 'winner', 'id', '[unused51]', 'winner', 'ioc', '[unused51]', 'winner', 'name', '[unused51]', 'winner', 'rank', '[unused51]', 'winner', 'rank', 'points', '[unused51]', 'winner', 'seed', '[unused51]', 'year', '[unused50]', 'rankings', '[unused51]', 'ranking', 'date', '[unused51]', 'ranking', '[unused51]', 'player', 'id', '[unused51]', 'ranking', 'points', '[unused51]', 'tours', '[SEP]']
Target 0: b'SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name'
Target TF-P tokens: from players join rankings on players.player_id = rankings.player_id group by players.first_name select avg (rankings.ranking) , players.first_name

[WRONG] [medium] Pred 0:	b'SELECT rankings.ranking, AVG(rankings.ranking) FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id' (-0.095) (length=18)
[WRONG] [medium] Pred 1:	b'SELECT rankings.player_id, AVG(rankings.ranking) FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id' (-0.415) (length=18)
[WRONG] [medium] Pred 2:	b'SELECT rankings.ranking, players.first_name, AVG(rankings.ranking) FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id' (-0.626) (length=20)
[WRONG] [medium] Pred 3:	b'SELECT rankings.player_id, players.first_name, AVG(rankings.ranking) FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id' (-0.838) (length=20)
[WRONG] [medium] Pred 4:	b'SELECT rankings.ranking, AVG(rankings.ranking_points) FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id' (-0.916) (length=18)
[WRONG] [medium] Pred 5:	b'SELECT rankings.ranking_points, AVG(rankings.ranking) FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id' (-0.921) (length=18)
[WRONG] [medium] Pred 6:	b'SELECT rankings.player_id, AVG(rankings.ranking_points) FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id' (-1.473) (length=18)
[WRONG] [medium] Pred 7:	b'SELECT AVG(rankings.ranking), players.first_name FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id' (-1.509) (length=18)
[WRONG] [medium] Pred 8:	b'SELECT rankings.ranking, players.first_name, AVG(rankings.ranking_points) FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id' (-1.601) (length=20)
[WRONG] [medium] Pred 9:	b'SELECT rankings.ranking_points, players.first_name, AVG(rankings.ranking) FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id' (-1.626) (length=20)
[WRONG] [medium] Pred 10:	b'SELECT players.first_name, AVG(rankings.ranking) FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id' (-1.686) (length=18)
[WRONG] [medium] Pred 11:	b'SELECT rankings.ranking_points, AVG(rankings.ranking_points) FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id' (-1.736) (length=18)
[WRONG] [medium] Pred 12:	b'SELECT rankings.ranking, AVG(rankings.ranking), players.first_name FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id' (-1.810) (length=20)
[WRONG] [medium] Pred 13:	b'SELECT rankings.player_id, players.first_name, AVG(rankings.ranking_points) FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id' (-1.924) (length=20)
[WRONG] [medium] Pred 14:	b'SELECT players.last_name, AVG(rankings.ranking) FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id' (-2.126) (length=18)
[CORRE] [medium] Pred 15:	b'SELECT AVG(rankings.ranking), players.first_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name' (-2.249) (length=18)
Error Case 147

Example 471
wta_1
 +-- players (players)
 |   +-- player_id (player id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- hand (hand)
 |   +-- birth_date (birth date)
 |   +-- country_code (country code)
 +-- matches (matches)
 |   +-- best_of (best of)
 |   +-- draw_size (draw size)
 |   +-- loser_age (loser age)
 |   +-- loser_entry (loser entry)
 |   +-- loser_hand (loser hand)
 |   +-- loser_ht (loser ht)
 |   +-- loser_id (loser id) [FOREIGN]
 |   +-- loser_ioc (loser ioc)
 |   +-- loser_name (loser name)
 |   +-- loser_rank (loser rank)
 |   +-- loser_rank_points (loser rank points)
 |   +-- loser_seed (loser seed)
 |   +-- match_num (match num)
 |   +-- minutes (minutes)
 |   +-- round (round)
 |   +-- score (score)
 |   +-- surface (surface)
 |   +-- tourney_date (tourney date)
 |   +-- tourney_id (tourney id)
 |   +-- tourney_level (tourney level)
 |   +-- tourney_name (tourney name)
 |   +-- winner_age (winner age)
 |   +-- winner_entry (winner entry)
 |   +-- winner_hand (winner hand)
 |   +-- winner_ht (winner ht)
 |   +-- winner_id (winner id) [FOREIGN]
 |   +-- winner_ioc (winner ioc)
 |   +-- winner_name (winner name)
 |   +-- winner_rank (winner rank)
 |   +-- winner_rank_points (winner rank points)
 |   +-- winner_seed (winner seed)
 |   +-- year (year)
 +-- rankings (rankings)
     +-- ranking_date (ranking date)
     +-- ranking (ranking)
     +-- player_id (player id) [FOREIGN]
     +-- ranking_points (ranking points)
     +-- tours (tours)
NL: b'Find the total ranking points for each player and their first name.'
NL tokens: [b'find', b'the', b'total', b'ranking', b'points', b'for', b'each', b'player', b'and', b'their', b'first', b'name', b'.']
NL tokens (original): [b'Find', b'the', b'total', b'ranking', b'points', b'for', b'each', b'player', b'and', b'their', b'first', b'name', b'.']
['[CLS]', 'find', 'the', 'total', 'ranking', 'points', 'for', 'each', 'player', 'and', 'their', 'first', 'name', '.', '[SEP]', '*', '[unused50]', 'players', '[unused51]', 'player', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'hand', '[unused51]', 'birth', 'date', '[unused51]', 'country', 'code', '[unused50]', 'matches', '[unused51]', 'best', 'of', '[unused51]', 'draw', 'size', '[unused51]', 'loser', 'age', '[unused51]', 'loser', 'entry', '[unused51]', 'loser', 'hand', '[unused51]', 'loser', 'h', '##t', '[unused51]', 'loser', 'id', '[unused51]', 'loser', 'ioc', '[unused51]', 'loser', 'name', '[unused51]', 'loser', 'rank', '[unused51]', 'loser', 'rank', 'points', '[unused51]', 'loser', 'seed', '[unused51]', 'match', 'nu', '##m', '[unused51]', 'minutes', '[unused51]', 'round', '[unused51]', 'score', '[unused51]', 'surface', '[unused51]', 'tour', '##ney', 'date', '[unused51]', 'tour', '##ney', 'id', '[unused51]', 'tour', '##ney', 'level', '[unused51]', 'tour', '##ney', 'name', '[unused51]', 'winner', 'age', '[unused51]', 'winner', 'entry', '[unused51]', 'winner', 'hand', '[unused51]', 'winner', 'h', '##t', '[unused51]', 'winner', 'id', '[unused51]', 'winner', 'ioc', '[unused51]', 'winner', 'name', '[unused51]', 'winner', 'rank', '[unused51]', 'winner', 'rank', 'points', '[unused51]', 'winner', 'seed', '[unused51]', 'year', '[unused50]', 'rankings', '[unused51]', 'ranking', 'date', '[unused51]', 'ranking', '[unused51]', 'player', 'id', '[unused51]', 'ranking', 'points', '[unused51]', 'tours', '[SEP]']
Target 0: b'SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name'
Target TF-P tokens: from players join rankings on players.player_id = rankings.player_id group by players.first_name select sum (rankings.ranking_points) , players.first_name

[WRONG] [medium] Pred 0:	b'SELECT rankings.ranking_points, players.first_name FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id' (-0.016) (length=15)
[WRONG] [medium] Pred 1:	b'SELECT rankings.player_id, players.first_name, SUM(rankings.ranking_points) FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id' (-1.091) (length=20)
[WRONG] [medium] Pred 2:	b'SELECT rankings.ranking, SUM(rankings.ranking_points) FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id' (-1.109) (length=18)
[WRONG] [medium] Pred 3:	b'SELECT rankings.ranking_points, SUM(rankings.ranking_points) FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id' (-1.127) (length=18)
[WRONG] [medium] Pred 4:	b'SELECT rankings.player_id, players.first_name FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id' (-1.290) (length=15)
[WRONG] [medium] Pred 5:	b'SELECT rankings.ranking, players.first_name, SUM(rankings.ranking_points) FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id' (-1.341) (length=20)
[WRONG] [medium] Pred 6:	b'SELECT rankings.player_id, SUM(rankings.ranking_points) FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id' (-1.356) (length=18)
[WRONG] [medium] Pred 7:	b'SELECT rankings.ranking, players.first_name FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id' (-1.403) (length=15)
 45%|████▌     | 59/130 [07:26<10:31,  8.89s/it] 46%|████▌     | 60/130 [07:27<07:33,  6.48s/it][WRONG] [medium] Pred 8:	b'SELECT rankings.ranking_points, players.first_name, SUM(rankings.ranking_points) FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id' (-1.507) (length=20)
[WRONG] [medium] Pred 9:	b'SELECT players.first_name, SUM(rankings.ranking_points) FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id' (-1.794) (length=18)
[WRONG] [medium] Pred 10:	b'SELECT rankings.ranking_points, MAX(rankings.ranking_points) FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id' (-1.820) (length=18)
[WRONG] [medium] Pred 11:	b'SELECT rankings.ranking, MAX(rankings.ranking_points) FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id' (-1.968) (length=18)
[WRONG] [medium] Pred 12:	b'SELECT players.last_name, SUM(rankings.ranking_points) FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id' (-1.972) (length=18)
[WRONG] [medium] Pred 13:	b'SELECT SUM(rankings.ranking_points), players.first_name FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY rankings.player_id' (-2.294) (length=18)
[CORRE] [medium] Pred 14:	b'SELECT SUM(rankings.ranking_points), players.first_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name' (-2.354) (length=18)
Error Case 148

Example 479
wta_1
 +-- players (players)
 |   +-- player_id (player id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- hand (hand)
 |   +-- birth_date (birth date)
 |   +-- country_code (country code)
 +-- matches (matches)
 |   +-- best_of (best of)
 |   +-- draw_size (draw size)
 |   +-- loser_age (loser age)
 |   +-- loser_entry (loser entry)
 |   +-- loser_hand (loser hand)
 |   +-- loser_ht (loser ht)
 |   +-- loser_id (loser id) [FOREIGN]
 |   +-- loser_ioc (loser ioc)
 |   +-- loser_name (loser name)
 |   +-- loser_rank (loser rank)
 |   +-- loser_rank_points (loser rank points)
 |   +-- loser_seed (loser seed)
 |   +-- match_num (match num)
 |   +-- minutes (minutes)
 |   +-- round (round)
 |   +-- score (score)
 |   +-- surface (surface)
 |   +-- tourney_date (tourney date)
 |   +-- tourney_id (tourney id)
 |   +-- tourney_level (tourney level)
 |   +-- tourney_name (tourney name)
 |   +-- winner_age (winner age)
 |   +-- winner_entry (winner entry)
 |   +-- winner_hand (winner hand)
 |   +-- winner_ht (winner ht)
 |   +-- winner_id (winner id) [FOREIGN]
 |   +-- winner_ioc (winner ioc)
 |   +-- winner_name (winner name)
 |   +-- winner_rank (winner rank)
 |   +-- winner_rank_points (winner rank points)
 |   +-- winner_seed (winner seed)
 |   +-- year (year)
 +-- rankings (rankings)
     +-- ranking_date (ranking date)
     +-- ranking (ranking)
     +-- player_id (player id) [FOREIGN]
     +-- ranking_points (ranking points)
     +-- tours (tours)
NL: b'Find the total number of tours for each ranking date.'
NL tokens: [b'find', b'the', b'total', b'number', b'of', b'tours', b'for', b'each', b'ranking', b'date', b'.']
NL tokens (original): [b'Find', b'the', b'total', b'number', b'of', b'tours', b'for', b'each', b'ranking', b'date', b'.']
['[CLS]', 'find', 'the', 'total', 'number', 'of', 'tours', 'for', 'each', 'ranking', 'date', '.', '[SEP]', '*', '[unused50]', 'players', '[unused51]', 'player', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused49]', 'date', '[unused51]', 'hand', '[unused51]', 'birth', 'date', '[unused51]', 'country', 'code', '[unused50]', 'matches', '[unused51]', 'best', 'of', '[unused51]', 'draw', 'size', '[unused51]', 'loser', 'age', '[unused51]', 'loser', 'entry', '[unused51]', 'loser', 'hand', '[unused51]', 'loser', 'h', '##t', '[unused51]', 'loser', 'id', '[unused51]', 'loser', 'ioc', '[unused51]', 'loser', 'name', '[unused51]', 'loser', 'rank', '[unused51]', 'loser', 'rank', 'points', '[unused51]', 'loser', 'seed', '[unused51]', 'match', 'nu', '##m', '[unused51]', 'minutes', '[unused51]', 'round', '[unused51]', 'score', '[unused51]', 'surface', '[unused51]', 'tour', '##ney', 'date', '[unused51]', 'tour', '##ney', 'id', '[unused51]', 'tour', '##ney', 'level', '[unused51]', 'tour', '##ney', 'name', '[unused51]', 'winner', 'age', '[unused51]', 'winner', 'entry', '[unused51]', 'winner', 'hand', '[unused51]', 'winner', 'h', '##t', '[unused51]', 'winner', 'id', '[unused51]', 'winner', 'ioc', '[unused51]', 'winner', 'name', '[unused51]', 'winner', 'rank', '[unused51]', 'winner', 'rank', 'points', '[unused51]', 'winner', 'seed', '[unused51]', 'year', '[unused50]', 'rankings', '[unused51]', 'ranking', 'date', '[unused51]', 'ranking', '[unused51]', 'player', 'id', '[unused51]', 'ranking', 'points', '[unused51]', 'tours', '[SEP]']
Target 0: b'SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date'
Target TF-P tokens: from rankings group by rankings.ranking_date select sum (rankings.tours) , rankings.ranking_date

[WRONG] [medium] Pred 0:	b'SELECT rankings.ranking_date, COUNT(*) FROM rankings GROUP BY rankings.ranking_date' (-0.001) (length=12)
[WRONG] [medium] Pred 1:	b'SELECT COUNT(*), rankings.ranking_date FROM rankings GROUP BY rankings.ranking_date' (-2.063) (length=12)
[WRONG] [medium] Pred 2:	b'SELECT rankings.ranking_date, COUNT(*) FROM rankings GROUP BY rankings.ranking_date HAVING COUNT(*) = 1' (-3.710) (length=19)
[WRONG] [medium] Pred 3:	b'SELECT rankings.ranking_date, COUNT(*) FROM rankings GROUP BY rankings.ranking_date ORDER BY COUNT(*) DESC LIMIT 1' (-3.746) (length=20)
[WRONG] [medium] Pred 4:	b'SELECT rankings.ranking_date, COUNT(*), SUM(rankings.tours) FROM rankings GROUP BY rankings.ranking_date' (-3.864) (length=17)
[CORRE] [medium] Pred 5:	b'SELECT rankings.ranking_date, SUM(rankings.tours) FROM rankings GROUP BY rankings.ranking_date' (-4.069) (length=12)
Error Case 149

Example 480
wta_1
 +-- players (players)
 |   +-- player_id (player id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- hand (hand)
 |   +-- birth_date (birth date)
 |   +-- country_code (country code)
 +-- matches (matches)
 |   +-- best_of (best of)
 |   +-- draw_size (draw size)
 |   +-- loser_age (loser age)
 |   +-- loser_entry (loser entry)
 |   +-- loser_hand (loser hand)
 |   +-- loser_ht (loser ht)
 |   +-- loser_id (loser id) [FOREIGN]
 |   +-- loser_ioc (loser ioc)
 |   +-- loser_name (loser name)
 |   +-- loser_rank (loser rank)
 |   +-- loser_rank_points (loser rank points)
 |   +-- loser_seed (loser seed)
 |   +-- match_num (match num)
 |   +-- minutes (minutes)
 |   +-- round (round)
 |   +-- score (score)
 |   +-- surface (surface)
 |   +-- tourney_date (tourney date)
 |   +-- tourney_id (tourney id)
 |   +-- tourney_level (tourney level)
 |   +-- tourney_name (tourney name)
 |   +-- winner_age (winner age)
 |   +-- winner_entry (winner entry)
 |   +-- winner_hand (winner hand)
 |   +-- winner_ht (winner ht)
 |   +-- winner_id (winner id) [FOREIGN]
 |   +-- winner_ioc (winner ioc)
 |   +-- winner_name (winner name)
 |   +-- winner_rank (winner rank)
 |   +-- winner_rank_points (winner rank points)
 |   +-- winner_seed (winner seed)
 |   +-- year (year)
 +-- rankings (rankings)
     +-- ranking_date (ranking date)
     +-- ranking (ranking)
     +-- player_id (player id) [FOREIGN]
     +-- ranking_points (ranking points)
     +-- tours (tours)
NL: b'How many total tours were there for each ranking date?'
NL tokens: [b'how', b'many', b'total', b'tours', b'were', b'there', b'for', b'each', b'ranking', b'date', b'?']
NL tokens (original): [b'How', b'many', b'total', b'tours', b'were', b'there', b'for', b'each', b'ranking', b'date', b'?']
['[CLS]', 'how', 'many', 'total', 'tours', 'were', 'there', 'for', 'each', 'ranking', 'date', '?', '[SEP]', '*', '[unused50]', 'players', '[unused51]', 'player', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused49]', 'date', '[unused51]', 'hand', '[unused51]', 'birth', 'date', '[unused51]', 'country', 'code', '[unused50]', 'matches', '[unused51]', 'best', 'of', '[unused51]', 'draw', 'size', '[unused51]', 'loser', 'age', '[unused51]', 'loser', 'entry', '[unused51]', 'loser', 'hand', '[unused51]', 'loser', 'h', '##t', '[unused51]', 'loser', 'id', '[unused51]', 'loser', 'ioc', '[unused51]', 'loser', 'name', '[unused51]', 'loser', 'rank', '[unused51]', 'loser', 'rank', 'points', '[unused51]', 'loser', 'seed', '[unused51]', 'match', 'nu', '##m', '[unused51]', 'minutes', '[unused51]', 'round', '[unused51]', 'score', '[unused51]', 'surface', '[unused51]', 'tour', '##ney', 'date', '[unused51]', 'tour', '##ney', 'id', '[unused51]', 'tour', '##ney', 'level', '[unused51]', 'tour', '##ney', 'name', '[unused51]', 'winner', 'age', '[unused51]', 'winner', 'entry', '[unused51]', 'winner', 'hand', '[unused51]', 'winner', 'h', '##t', '[unused51]', 'winner', 'id', '[unused51]', 'winner', 'ioc', '[unused51]', 'winner', 'name', '[unused51]', 'winner', 'rank', '[unused51]', 'winner', 'rank', 'points', '[unused51]', 'winner', 'seed', '[unused51]', 'year', '[unused50]', 'rankings', '[unused51]', 'ranking', 'date', '[unused51]', 'ranking', '[unused51]', 'player', 'id', '[unused51]', 'ranking', 'points', '[unused51]', 'tours', '[SEP]']
Target 0: b'SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date'
Target TF-P tokens: from rankings group by rankings.ranking_date select sum (rankings.tours) , rankings.ranking_date

[WRONG] [medium] Pred 0:	b'SELECT rankings.ranking_date, COUNT(*) FROM rankings GROUP BY rankings.ranking_date' (-0.025) (length=12)
[CORRE] [medium] Pred 1:	b'SELECT rankings.ranking_date, SUM(rankings.tours) FROM rankings GROUP BY rankings.ranking_date' (-0.882) (length=12)
Error Case 150

Example 483
wta_1
 +-- players (players)
 |   +-- player_id (player id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- hand (hand)
 |   +-- birth_date (birth date)
 |   +-- country_code (country code)
 +-- matches (matches)
 |   +-- best_of (best of)
 |   +-- draw_size (draw size)
 |   +-- loser_age (loser age)
 |   +-- loser_entry (loser entry)
 |   +-- loser_hand (loser hand)
 |   +-- loser_ht (loser ht)
 |   +-- loser_id (loser id) [FOREIGN]
 |   +-- loser_ioc (loser ioc)
 |   +-- loser_name (loser name)
 |   +-- loser_rank (loser rank)
 |   +-- loser_rank_points (loser rank points)
 |   +-- loser_seed (loser seed)
 |   +-- match_num (match num)
 |   +-- minutes (minutes)
 |   +-- round (round)
 |   +-- score (score)
 |   +-- surface (surface)
 |   +-- tourney_date (tourney date)
 |   +-- tourney_id (tourney id)
 |   +-- tourney_level (tourney level)
 |   +-- tourney_name (tourney name)
 |   +-- winner_age (winner age)
 |   +-- winner_entry (winner entry)
 |   +-- winner_hand (winner hand)
 |   +-- winner_ht (winner ht)
 |   +-- winner_id (winner id) [FOREIGN]
 |   +-- winner_ioc (winner ioc)
 |   +-- winner_name (winner name)
 |   +-- winner_rank (winner rank)
 |   +-- winner_rank_points (winner rank points)
 |   +-- winner_seed (winner seed)
 |   +-- year (year)
 +-- rankings (rankings)
     +-- ranking_date (ranking date)
     +-- ranking (ranking)
     +-- player_id (player id) [FOREIGN]
     +-- ranking_points (ranking points)
     +-- tours (tours)
NL: b'Find the name and rank of the 3 youngest winners across all matches.'
NL tokens: [b'find', b'the', b'name', b'and', b'rank', b'of', b'the', b'3', b'youngest', b'winners', b'across', b'all', b'matches', b'.']
NL tokens (original): [b'Find', b'the', b'name', b'and', b'rank', b'of', b'the', b'3', b'youngest', b'winners', b'across', b'all', b'matches', b'.']
['[CLS]', 'find', 'the', 'name', 'and', 'rank', 'of', 'the', '3', 'youngest', 'winners', 'across', 'all', 'matches', '.', '[SEP]', '*', '[unused50]', 'players', '[unused51]', 'player', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'hand', '[unused51]', 'birth', 'date', '[unused51]', 'country', 'code', '[unused50]', 'matches', '[unused51]', 'best', 'of', '[unused51]', 'draw', 'size', '[unused51]', 'loser', 'age', '[unused51]', 'loser', 'entry', '[unused51]', 'loser', 'hand', '[unused51]', 'loser', 'h', '##t', '[unused51]', 'loser', 'id', '[unused51]', 'loser', 'ioc', '[unused51]', 'loser', 'name', '[unused51]', 'loser', 'rank', '[unused51]', 'loser', 'rank', 'points', '[unused51]', 'loser', 'seed', '[unused51]', 'match', 'nu', '##m', '[unused51]', 'minutes', '[unused51]', 'round', '[unused51]', 'score', '[unused51]', 'surface', '[unused51]', 'tour', '##ney', 'date', '[unused51]', 'tour', '##ney', 'id', '[unused51]', 'tour', '##ney', 'level', '[unused51]', 'tour', '##ney', 'name', '[unused51]', 'winner', 'age', '[unused51]', 'winner', 'entry', '[unused51]', 'winner', 'hand', '[unused51]', 'winner', 'h', '##t', '[unused51]', 'winner', 'id', '[unused51]', 'winner', 'ioc', '[unused51]', 'winner', 'name', '[unused51]', 'winner', 'rank', '[unused51]', 'winner', 'rank', 'points', '[unused51]', 'winner', 'seed', '[unused51]', 'year', '[unused50]', 'rankings', '[unused51]', 'ranking', 'date', '[unused51]', 'ranking', '[unused51]', 'player', 'id', '[unused51]', 'ranking', 'points', '[unused51]', 'tours', '[SEP]']
Target 0: b'SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3'
Target TF-P tokens: from matches select distinct matches.winner_name , matches.winner_rank order by matches.winner_age limit 3

[WRONG] [medium] Pred 0:	b'SELECT matches.winner_name, matches.winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY players.birth_date LIMIT 3' (-0.002) (length=17)
[WRONG] [medium] Pred 1:	b'SELECT matches.winner_name, matches.winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY matches.winner_age LIMIT 3' (-1.351) (length=17)
[WRONG] [medium] Pred 2:	b'SELECT matches.winner_name, matches.winner_rank FROM players JOIN matches ON matches.winner_id = players.player_id ORDER BY players.birth_date LIMIT 3' (-1.881) (length=17)
[WRONG] [medium] Pred 3:	b'SELECT players.first_name, matches.winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY players.birth_date LIMIT 3' (-2.250) (length=17)
[WRONG] [medium] Pred 4:	b'SELECT matches.winner_name, matches.winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY players.birth_date ASC LIMIT 3' (-2.739) (length=18)
[WRONG] [medium] Pred 5:	b'SELECT matches.winner_name, matches.winner_rank FROM players JOIN matches ON matches.winner_id = players.player_id ORDER BY matches.winner_age LIMIT 3' (-3.211) (length=17)
[WRONG] [medium] Pred 6:	b'SELECT matches.winner_name, matches.winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY players.birth_date LIMIT "the"' (-3.233) (length=17)
[WRONG] [medium] Pred 7:	b'SELECT matches.winner_name, matches.winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY players.birth_date LIMIT 3' (-3.427) (length=17)
[WRONG] [medium] Pred 8:	b'SELECT matches.winner_name, matches.winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY players.birth_date LIMIT "winners"' (-3.427) (length=17)
[WRONG] [medium] Pred 9:	b'SELECT matches.winner_name, matches.winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY players.birth_date LIMIT 3' (-3.480) (length=19)
[WRONG] [medium] Pred 10:	b'SELECT players.first_name, matches.winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY matches.winner_age LIMIT 3' (-3.608) (length=17)
[WRONG] [medium] Pred 11:	b'SELECT DISTINCT matches.winner_name, matches.winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY players.birth_date LIMIT 3' (-3.623) (length=18)
[WRONG] [medium] Pred 12:	b'SELECT matches.winner_name, matches.winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY players.birth_date < 3' (-3.647) (length=17)
[WRONG] [medium] Pred 13:	b'SELECT matches.winner_name, matches.winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY matches.winner_rank LIMIT 3' (-3.663) (length=17)
[WRONG] [medium] Pred 14:	b'SELECT matches.winner_name, matches.winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY players.birth_date LIMIT "matches"' (-3.746) (length=17)
[WRONG] [medium] Pred 15:	b'SELECT matches.winner_name, matches.winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY (players.birth_date - 3)' (-3.795) (length=17)
Error Case 151

Parsing error: from players join matches on players.player_id = matches.winner_id select matches.winner_name , matches.winner_rank select matches.winner_name order by players.birth_date limit 3
Parsing error: from players join matches on players.player_id = matches.winner_id select matches.winner_name , matches.winner_rank order by players.birth_date 3 limit 3
Parsing error: from players join matches on players.player_id = matches.winner_id select matches.winner_name , matches.winner_rank order by players.birth_date between 3
Parsing error: from players join matches on players.player_id = matches.winner_id select matches.winner_name , matches.winner_rank order by players.birth_date < matches.winner_name 3
Example 484
wta_1
 +-- players (players)
 |   +-- player_id (player id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- hand (hand)
 |   +-- birth_date (birth date)
 |   +-- country_code (country code)
 +-- matches (matches)
 |   +-- best_of (best of)
 |   +-- draw_size (draw size)
 |   +-- loser_age (loser age)
 |   +-- loser_entry (loser entry)
 |   +-- loser_hand (loser hand)
 |   +-- loser_ht (loser ht)
 |   +-- loser_id (loser id) [FOREIGN]
 |   +-- loser_ioc (loser ioc)
 |   +-- loser_name (loser name)
 |   +-- loser_rank (loser rank)
 |   +-- loser_rank_points (loser rank points)
 |   +-- loser_seed (loser seed)
 |   +-- match_num (match num)
 |   +-- minutes (minutes)
 |   +-- round (round)
 |   +-- score (score)
 |   +-- surface (surface)
 |   +-- tourney_date (tourney date)
 |   +-- tourney_id (tourney id)
 |   +-- tourney_level (tourney level)
 |   +-- tourney_name (tourney name)
 |   +-- winner_age (winner age)
 |   +-- winner_entry (winner entry)
 |   +-- winner_hand (winner hand)
 |   +-- winner_ht (winner ht)
 |   +-- winner_id (winner id) [FOREIGN]
 |   +-- winner_ioc (winner ioc)
 |   +-- winner_name (winner name)
 |   +-- winner_rank (winner rank)
 |   +-- winner_rank_points (winner rank points)
 |   +-- winner_seed (winner seed)
 |   +-- year (year)
 +-- rankings (rankings)
     +-- ranking_date (ranking date)
     +-- ranking (ranking)
     +-- player_id (player id) [FOREIGN]
     +-- ranking_points (ranking points)
     +-- tours (tours)
NL: b'What are the names and ranks of the three youngest winners across all matches?'
NL tokens: [b'what', b'are', b'the', b'names', b'and', b'ranks', b'of', b'the', b'three', b'youngest', b'winners', b'across', b'all', b'matches', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'and', b'ranks', b'of', b'the', b'three', b'youngest', b'winners', b'across', b'all', b'matches', b'?']
['[CLS]', 'what', 'are', 'the', 'names', 'and', 'ranks', 'of', 'the', 'three', 'youngest', 'winners', 'across', 'all', 'matches', '?', '[SEP]', '*', '[unused50]', 'players', '[unused51]', 'player', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'hand', '[unused51]', 'birth', 'date', '[unused51]', 'country', 'code', '[unused50]', 'matches', '[unused51]', 'best', 'of', '[unused51]', 'draw', 'size', '[unused51]', 'loser', 'age', '[unused51]', 'loser', 'entry', '[unused51]', 'loser', 'hand', '[unused51]', 'loser', 'h', '##t', '[unused51]', 'loser', 'id', '[unused51]', 'loser', 'ioc', '[unused51]', 'loser', 'name', '[unused51]', 'loser', 'rank', '[unused51]', 'loser', 'rank', 'points', '[unused51]', 'loser', 'seed', '[unused51]', 'match', 'nu', '##m', '[unused51]', 'minutes', '[unused51]', 'round', '[unused51]', 'score', '[unused51]', 'surface', '[unused51]', 'tour', '##ney', 'date', '[unused51]', 'tour', '##ney', 'id', '[unused51]', 'tour', '##ney', 'level', '[unused51]', 'tour', '##ney', 'name', '[unused51]', 'winner', 'age', '[unused51]', 'winner', 'entry', '[unused51]', 'winner', 'hand', '[unused51]', 'winner', 'h', '##t', '[unused51]', 'winner', 'id', '[unused51]', 'winner', 'ioc', '[unused51]', 'winner', 'name', '[unused51]', 'winner', 'rank', '[unused51]', 'winner', 'rank', 'points', '[unused51]', 'winner', 'seed', '[unused51]', 'year', '[unused50]', 'rankings', '[unused51]', 'ranking', 'date', '[unused51]', 'ranking', '[unused51]', 'player', 'id', '[unused51]', 'ranking', 'points', '[unused51]', 'tours', '[SEP]']
Target 0: b'SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3'
Target TF-P tokens: from matches select distinct matches.winner_name , matches.winner_rank order by matches.winner_age limit 3

[WRONG] [medium] Pred 0:	b'SELECT matches.winner_name, matches.winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY players.birth_date LIMIT 3' (-0.000) (length=17)
[WRONG] [medium] Pred 1:	b'SELECT matches.winner_name, matches.winner_rank FROM players JOIN matches ON matches.winner_id = players.player_id ORDER BY players.birth_date LIMIT 3' (-2.358) (length=17)
[WRONG] [medium] Pred 2:	b'SELECT matches.winner_name, matches.winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY players.birth_date ASC LIMIT 3' (-2.446) (length=18)
[WRONG] [medium] Pred 3:	b'SELECT matches.winner_name, matches.winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY matches.winner_age LIMIT 3' (-2.975) (length=17)
[WRONG] [medium] Pred 4:	b'SELECT players.first_name, matches.winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY players.birth_date LIMIT 3' (-3.121) (length=17)
[WRONG] [medium] Pred 5:	b'SELECT matches.winner_name, matches.winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY players.birth_date DESC LIMIT 3' (-3.401) (length=18)
[WRONG] [medium] Pred 6:	b'SELECT matches.winner_name, matches.winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY players.birth_date LIMIT 3' (-3.508) (length=19)
[WRONG] [medium] Pred 7:	b'SELECT DISTINCT matches.winner_name, matches.winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY players.birth_date LIMIT 3' (-3.551) (length=18)
[WRONG] [medium] Pred 8:	b'SELECT matches.winner_name, matches.winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY (players.birth_date - "three")' (-3.706) (length=17)
[WRONG] [medium] Pred 9:	b'SELECT matches.winner_name, matches.winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY matches.winner_seed LIMIT 3' (-3.777) (length=17)
[WRONG] [medium] Pred 10:	b'SELECT matches.winner_name, matches.winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY players.birth_date < "three"' (-3.976) (length=17)
[WRONG] [medium] Pred 11:	b'SELECT matches.winner_name, matches.winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY players.birth_date <= 3' (-3.991) (length=17)
Error Case 152

Parsing error: from (from WTA Championships "select count (*) intersect from matches where matches.winner_hand =" left "select count (*)"
ERROR: table "matches" in field expression matches.winner_hand is not in the current scope
Parsing error: from (from matches where matches.winner_hand = "WTA Championships" select matches.winner_id intersect from left select count (*)
Parsing error: from (from WTA Championships "select count (*) intersect from WTA Championships" select count (*)
Parsing error: from (from the VALUE "select count (*) intersect from matches where matches.winner_hand =" left "select count (*)"
ERROR: table "matches" in field expression matches.winner_hand is not in the current scope
Parsing error: from (from matches where matches.winner_hand = "WTA Championships" select matches.winner_id intersect from WTA WTA Championships "select count (*)"
Parsing error: from (from matches where matches.winner_hand = "WTA Championships" select matches.winner_id intersect from WTA Championships "select count (*)"
Parsing error: from (from the VALUE "select count (*) intersect from WTA Championships" select count (*)
Parsing error: from (from WTA Championships "select count (*) intersect from left select count (*)"
ERROR: table "matches" in field expression matches.winner_hand is not in the current scope
Parsing error: from (from the VALUE intersect from WTA Championships "select count (*) intersect from matches where matches.winner_hand =" left "select count (*)"
Parsing error: from (from the VALUE select count (*) intersect from WTA Championships "select count (*)"
Parsing error: from (from the VALUE select count (*) intersect from matches where matches.winner_hand = "left" select count (*)
Parsing error: from (from many select count (*) intersect from WTA Championships "select count (*)"
Example 485
wta_1
 +-- players (players)
 |   +-- player_id (player id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- hand (hand)
 |   +-- birth_date (birth date)
 |   +-- country_code (country code)
 +-- matches (matches)
 |   +-- best_of (best of)
 |   +-- draw_size (draw size)
 |   +-- loser_age (loser age)
 |   +-- loser_entry (loser entry)
 |   +-- loser_hand (loser hand)
 |   +-- loser_ht (loser ht)
 |   +-- loser_id (loser id) [FOREIGN]
 |   +-- loser_ioc (loser ioc)
 |   +-- loser_name (loser name)
 |   +-- loser_rank (loser rank)
 |   +-- loser_rank_points (loser rank points)
 |   +-- loser_seed (loser seed)
 |   +-- match_num (match num)
 |   +-- minutes (minutes)
 |   +-- round (round)
 |   +-- score (score)
 |   +-- surface (surface)
 |   +-- tourney_date (tourney date)
 |   +-- tourney_id (tourney id)
 |   +-- tourney_level (tourney level)
 |   +-- tourney_name (tourney name)
 |   +-- winner_age (winner age)
 |   +-- winner_entry (winner entry)
 |   +-- winner_hand (winner hand)
 |   +-- winner_ht (winner ht)
 |   +-- winner_id (winner id) [FOREIGN]
 |   +-- winner_ioc (winner ioc)
 |   +-- winner_name (winner name)
 |   +-- winner_rank (winner rank)
 |   +-- winner_rank_points (winner rank points)
 |   +-- winner_seed (winner seed)
 |   +-- year (year)
 +-- rankings (rankings)
     +-- ranking_date (ranking date)
     +-- ranking (ranking)
     +-- player_id (player id) [FOREIGN]
     +-- ranking_points (ranking points)
     +-- tours (tours)
NL: b'How many different winners both participated in the WTA Championships and were left handed?'
NL tokens: [b'how', b'many', b'different', b'winners', b'both', b'participated', b'in', b'the', b'wta', b'championships', b'and', b'were', b'left', b'handed', b'?']
NL tokens (original): [b'How', b'many', b'different', b'winners', b'both', b'participated', b'in', b'the', b'WTA', b'Championships', b'and', b'were', b'left', b'handed', b'?']
['[CLS]', 'how', 'many', 'different', 'winners', 'both', 'participated', 'in', 'the', 'wta', 'championships', 'and', 'were', 'left', 'handed', '?', '[SEP]', '*', '[unused50]', 'players', '[unused51]', 'player', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'hand', '[unused51]', 'birth', 'date', '[unused51]', 'country', 'code', '[unused50]', 'matches', '[unused51]', 'best', 'of', '[unused51]', 'draw', 'size', '[unused51]', 'loser', 'age', '[unused51]', 'loser', 'entry', '[unused51]', 'loser', 'hand', '[unused51]', 'loser', 'h', '##t', '[unused51]', 'loser', 'id', '[unused51]', 'loser', 'ioc', '[unused51]', 'loser', 'name', '[unused51]', 'loser', 'rank', '[unused51]', 'loser', 'rank', 'points', '[unused51]', 'loser', 'seed', '[unused51]', 'match', 'nu', '##m', '[unused51]', 'minutes', '[unused51]', 'round', '[unused51]', 'score', '[unused51]', 'surface', '[unused51]', 'tour', '##ney', 'date', '[unused51]', 'tour', '##ney', 'id', '[unused51]', 'tour', '##ney', 'level', '[unused51]', 'tour', '##ney', 'name', '[unused49]', 'wta', 'championships', '[unused51]', 'winner', 'age', '[unused51]', 'winner', 'entry', '[unused51]', 'winner', 'hand', '[unused51]', 'winner', 'h', '##t', '[unused51]', 'winner', 'id', '[unused51]', 'winner', 'ioc', '[unused51]', 'winner', 'name', '[unused51]', 'winner', 'rank', '[unused51]', 'winner', 'rank', 'points', '[unused51]', 'winner', 'seed', '[unused51]', 'year', '[unused50]', 'rankings', '[unused51]', 'ranking', 'date', '[unused51]', 'ranking', '[unused51]', 'player', 'id', '[unused51]', 'ranking', 'points', '[unused51]', 'tours', '[SEP]']
Target 0: b"SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"
Target TF-P tokens: from matches where matches.tourney_name = "WTA Championships" and matches.winner_hand = "VALUE" select count (distinct matches.winner_name)

[WRONG] [medium] Pred 0:	b'SELECT COUNT(*) FROM (SELECT matches.winner_id FROM matches WHERE matches.winner_hand = "WTA Championships" INTERSECT SELECT matches.winner_id FROM matches WHERE matches.winner_hand = "left")' (-0.991) (length=31)
Error Case 153

Example 486
wta_1
 +-- players (players)
 |   +-- player_id (player id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- hand (hand)
 |   +-- birth_date (birth date)
 |   +-- country_code (country code)
 +-- matches (matches)
 |   +-- best_of (best of)
 |   +-- draw_size (draw size)
 |   +-- loser_age (loser age)
 |   +-- loser_entry (loser entry)
 |   +-- loser_hand (loser hand)
 |   +-- loser_ht (loser ht)
 |   +-- loser_id (loser id) [FOREIGN]
 |   +-- loser_ioc (loser ioc)
 |   +-- loser_name (loser name)
 |   +-- loser_rank (loser rank)
 |   +-- loser_rank_points (loser rank points)
 |   +-- loser_seed (loser seed)
 |   +-- match_num (match num)
 |   +-- minutes (minutes)
 |   +-- round (round)
 |   +-- score (score)
 |   +-- surface (surface)
 |   +-- tourney_date (tourney date)
 |   +-- tourney_id (tourney id)
 |   +-- tourney_level (tourney level)
 |   +-- tourney_name (tourney name)
 |   +-- winner_age (winner age)
 |   +-- winner_entry (winner entry)
 |   +-- winner_hand (winner hand)
 |   +-- winner_ht (winner ht)
 |   +-- winner_id (winner id) [FOREIGN]
 |   +-- winner_ioc (winner ioc)
 |   +-- winner_name (winner name)
 |   +-- winner_rank (winner rank)
 |   +-- winner_rank_points (winner rank points)
 |   +-- winner_seed (winner seed)
 |   +-- year (year)
 +-- rankings (rankings)
     +-- ranking_date (ranking date)
     +-- ranking (ranking)
     +-- player_id (player id) [FOREIGN]
     +-- ranking_points (ranking points)
     +-- tours (tours)
NL: b'Find the number of left handed winners who participated in the WTA Championships.'
NL tokens: [b'find', b'the', b'number', b'of', b'left', b'handed', b'winners', b'who', b'participated', b'in', b'the', b'wta', b'championships', b'.']
NL tokens (original): [b'Find', b'the', b'number', b'of', b'left', b'handed', b'winners', b'who', b'participated', b'in', b'the', b'WTA', b'Championships', b'.']
 47%|████▋     | 61/130 [07:37<08:46,  7.63s/it]['[CLS]', 'find', 'the', 'number', 'of', 'left', 'handed', 'winners', 'who', 'participated', 'in', 'the', 'wta', 'championships', '.', '[SEP]', '*', '[unused50]', 'players', '[unused51]', 'player', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'hand', '[unused51]', 'birth', 'date', '[unused51]', 'country', 'code', '[unused50]', 'matches', '[unused51]', 'best', 'of', '[unused51]', 'draw', 'size', '[unused51]', 'loser', 'age', '[unused51]', 'loser', 'entry', '[unused51]', 'loser', 'hand', '[unused51]', 'loser', 'h', '##t', '[unused51]', 'loser', 'id', '[unused51]', 'loser', 'ioc', '[unused51]', 'loser', 'name', '[unused51]', 'loser', 'rank', '[unused51]', 'loser', 'rank', 'points', '[unused51]', 'loser', 'seed', '[unused51]', 'match', 'nu', '##m', '[unused51]', 'minutes', '[unused51]', 'round', '[unused51]', 'score', '[unused51]', 'surface', '[unused51]', 'tour', '##ney', 'date', '[unused51]', 'tour', '##ney', 'id', '[unused51]', 'tour', '##ney', 'level', '[unused51]', 'tour', '##ney', 'name', '[unused49]', 'wta', 'championships', '[unused51]', 'winner', 'age', '[unused51]', 'winner', 'entry', '[unused51]', 'winner', 'hand', '[unused51]', 'winner', 'h', '##t', '[unused51]', 'winner', 'id', '[unused51]', 'winner', 'ioc', '[unused51]', 'winner', 'name', '[unused51]', 'winner', 'rank', '[unused51]', 'winner', 'rank', 'points', '[unused51]', 'winner', 'seed', '[unused51]', 'year', '[unused50]', 'rankings', '[unused51]', 'ranking', 'date', '[unused51]', 'ranking', '[unused51]', 'player', 'id', '[unused51]', 'ranking', 'points', '[unused51]', 'tours', '[SEP]']
Target 0: b"SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"
Target TF-P tokens: from matches where matches.tourney_name = "WTA Championships" and matches.winner_hand = "VALUE" select count (distinct matches.winner_name)

[WRONG] [medium] Pred 0:	b'SELECT COUNT(*) FROM players JOIN matches ON matches.winner_id = players.player_id WHERE players.hand = "left" AND matches.winner_hand = "WTA Championships"' (-0.537) (length=27)
[WRONG] [medium] Pred 1:	b'SELECT COUNT(*) FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.winner_hand = "left" AND matches.winner_hand = "WTA Championships"' (-0.770) (length=27)
[WRONG] [medium] Pred 2:	b'SELECT COUNT(*) FROM players JOIN matches ON matches.winner_id = players.player_id WHERE players.hand = "left" AND matches.winner_rank = "WTA Championships"' (-1.138) (length=27)
[WRONG] [medium] Pred 3:	b'SELECT COUNT(*) FROM players WHERE players.hand = "left" AND players.player_id = "WTA Championships"' (-1.203) (length=21)
[WRONG] [medium] Pred 4:	b'SELECT COUNT(*) FROM players JOIN matches ON matches.winner_id = players.player_id WHERE players.hand = "left" AND matches.winner_ioc = "WTA Championships"' (-1.310) (length=27)
[WRONG] [medium] Pred 5:	b'SELECT COUNT(*) FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.winner_rank = "left" AND matches.winner_hand = "WTA Championships"' (-1.373) (length=27)
[WRONG] [medium] Pred 6:	b'SELECT COUNT(*) FROM players JOIN matches ON matches.winner_id = players.player_id WHERE players.hand = "WTA Championships" AND matches.winner_hand = "WTA Championships"' (-1.375) (length=28)
[WRONG] [medium] Pred 7:	b'SELECT COUNT(*) FROM players JOIN matches ON matches.winner_id = players.player_id WHERE players.hand = "left" AND matches.year = "WTA Championships"' (-1.388) (length=27)
[WRONG] [medium] Pred 8:	b'SELECT COUNT(*) FROM players JOIN matches ON matches.winner_id = players.player_id WHERE players.hand = "left" AND matches.winner_rank_points = "WTA Championships"' (-1.436) (length=27)
[WRONG] [medium] Pred 9:	b'SELECT COUNT(*) FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.winner_hand = "left" AND matches.winner_ioc = "WTA Championships"' (-1.453) (length=27)
[WRONG] [medium] Pred 10:	b'SELECT COUNT(*) FROM players JOIN matches ON matches.winner_id = players.player_id WHERE players.hand = "left" AND matches.winner_ht = "WTA Championships"' (-1.613) (length=27)
[WRONG] [medium] Pred 11:	b'SELECT COUNT(*) FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.winner_hand = "left" AND matches.winner_rank = "WTA Championships"' (-1.655) (length=27)
[WRONG] [medium] Pred 12:	b'SELECT COUNT(*) FROM players JOIN matches ON matches.winner_id = players.player_id WHERE players.hand = "left" AND matches.winner_seed = "WTA Championships"' (-1.694) (length=27)
[WRONG] [medium] Pred 13:	b'SELECT COUNT(*) FROM players JOIN matches ON matches.winner_id = players.player_id WHERE players.hand = "left" AND matches.winner_name = "WTA Championships"' (-1.714) (length=27)
[WRONG] [medium] Pred 14:	b'SELECT COUNT(*) FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.winner_hand = "WTA Championships"' (-2.137) (length=21)
[WRONG] [medium] Pred 15:	b'SELECT COUNT(*) FROM matches WHERE matches.winner_hand = "left" AND matches.winner_hand = "WTA Championships"' (-2.166) (length=21)
Error Case 154

Parsing error: from battle select battle.name intersect , battle select battle.date , battle.result
Parsing error: from battle select battle.name) , battle.date , battle.result
Parsing error: from battle select battle.name (battle.date , battle.result
Example 493
battle_death
 +-- battle (battle)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- date (date)
 |   +-- bulgarian_commander (bulgarian commander)
 |   +-- latin_commander (latin commander)
 |   +-- result (result)
 +-- ship (ship)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- lost_in_battle (lost in battle) [FOREIGN]
 |   +-- name (name)
 |   +-- tonnage (tonnage)
 |   +-- ship_type (ship type)
 |   +-- location (location)
 |   +-- disposition_of_ship (disposition of ship)
 +-- death (death)
     +-- id (id) [PRIMARY]
     +-- caused_by_ship_id (caused by ship id) [FOREIGN]
     +-- note (note)
     +-- killed (killed)
     +-- injured (injured)
NL: b'List the name, date and result of each battle.'
NL tokens: [b'list', b'the', b'name', b',', b'date', b'and', b'result', b'of', b'each', b'battle', b'.']
NL tokens (original): [b'List', b'the', b'name', b',', b'date', b'and', b'result', b'of', b'each', b'battle', b'.']
['[CLS]', 'list', 'the', 'name', ',', 'date', 'and', 'result', 'of', 'each', 'battle', '.', '[SEP]', '*', '[unused50]', 'battle', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'date', '[unused51]', 'bulgarian', 'commander', '[unused51]', 'latin', 'commander', '[unused51]', 'result', '[unused50]', 'ship', '[unused51]', 'lost', 'in', 'battle', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'ton', '##nage', '[unused51]', 'ship', 'type', '[unused51]', 'location', '[unused51]', 'disposition', 'of', 'ship', '[unused50]', 'death', '[unused51]', 'caused', 'by', 'ship', 'id', '[unused51]', 'id', '[unused51]', 'note', '[unused51]', 'killed', '[unused51]', 'injured', '[SEP]']
Target 0: b'SELECT name ,  date FROM battle'
Target TF-P tokens: from battle select battle.name , battle.date

[WRONG] [medium] Pred 0:	b'SELECT battle.name, battle.date, battle.result FROM battle' (-0.000) (length=9)
[WRONG] [medium] Pred 1:	b'SELECT battle.name, battle.date, battle.result FROM battle WHERE battle.result = "VALUE"' (-4.894) (length=15)
[WRONG] [medium] Pred 2:	b'SELECT battle.name, battle.date, battle.result FROM battle WHERE battle.result = ", VALUE"' (-5.430) (length=16)
[WRONG] [medium] Pred 3:	b'SELECT battle.name, battle.date, battle.result FROM battle WHERE battle.result = name' (-5.507) (length=15)
[WRONG] [medium] Pred 4:	b'SELECT battle.name, battle.date, battle.result FROM battle JOIN battle ON battle.id = battle.id' (-5.690) (length=15)
[WRONG] [medium] Pred 5:	b'SELECT battle.name, battle.date, battle.result FROM battle' (-5.702) (length=11)
[WRONG] [medium] Pred 6:	b'SELECT battle.name, battle.date, SUM(battle.result) FROM battle GROUP BY battle.date' (-6.300) (length=14)
[WRONG] [medium] Pred 7:	b'SELECT battle.name, battle.date, battle.result FROM battle GROUP BY battle.date' (-6.401) (length=11)
 48%|████▊     | 62/130 [07:42<07:31,  6.63s/it][WRONG] [medium] Pred 8:	b'SELECT battle.name, battle.date, battle.result FROM battle WHERE battle.result' (-6.827) (length=11)
[WRONG] [medium] Pred 9:	b'SELECT battle.name, battle.date, battle.result FROM battle WHERE battle.date' (-7.285) (length=11)
[WRONG] [medium] Pred 10:	b'SELECT battle.name, battle.date, battle.result FROM battle ORDER BY battle.date' (-7.353) (length=11)
[WRONG] [medium] Pred 11:	b'SELECT battle.name, battle.date, battle.result FROM battle ORDER BY battle.result' (-7.565) (length=11)
[WRONG] [medium] Pred 12:	b'SELECT battle.id, battle.date, battle.result FROM battle' (-8.218) (length=9)
Error Case 155

Parsing error: from death group by death.caused_by_ship_id select max (death.killed) , min (death.killed)) select death.caused_by_ship_id , death.caused_by_ship_id
Parsing error: from death group by death.caused_by_ship_id select max (death.killed) , min (death.killed)) select death.caused_by_ship_id , death.killed
Parsing error: from death group by death.caused_by_ship_id select max (death.killed) , min (death.killed)) select death.caused_by_ship_id , death.note
Parsing error: from death group by death.caused_by_ship_id select max (death.killed) , min (death.killed)) , death.caused_by_ship_id
Example 494
battle_death
 +-- battle (battle)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- date (date)
 |   +-- bulgarian_commander (bulgarian commander)
 |   +-- latin_commander (latin commander)
 |   +-- result (result)
 +-- ship (ship)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- lost_in_battle (lost in battle) [FOREIGN]
 |   +-- name (name)
 |   +-- tonnage (tonnage)
 |   +-- ship_type (ship type)
 |   +-- location (location)
 |   +-- disposition_of_ship (disposition of ship)
 +-- death (death)
     +-- id (id) [PRIMARY]
     +-- caused_by_ship_id (caused by ship id) [FOREIGN]
     +-- note (note)
     +-- killed (killed)
     +-- injured (injured)
NL: b'What is maximum and minimum death toll caused each time?'
NL tokens: [b'what', b'is', b'maximum', b'and', b'minimum', b'death', b'toll', b'caused', b'each', b'time', b'?']
NL tokens (original): [b'What', b'is', b'maximum', b'and', b'minimum', b'death', b'toll', b'caused', b'each', b'time', b'?']
['[CLS]', 'what', 'is', 'maximum', 'and', 'minimum', 'death', 'toll', 'caused', 'each', 'time', '?', '[SEP]', '*', '[unused50]', 'battle', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'date', '[unused51]', 'bulgarian', 'commander', '[unused51]', 'latin', 'commander', '[unused51]', 'result', '[unused50]', 'ship', '[unused51]', 'lost', 'in', 'battle', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'ton', '##nage', '[unused51]', 'ship', 'type', '[unused51]', 'location', '[unused51]', 'disposition', 'of', 'ship', '[unused50]', 'death', '[unused51]', 'caused', 'by', 'ship', 'id', '[unused51]', 'id', '[unused51]', 'note', '[unused51]', 'killed', '[unused51]', 'injured', '[SEP]']
Target 0: b'SELECT max(killed) ,  min(killed) FROM death'
Target TF-P tokens: from death select max (death.killed) , min (death.killed)

[WRONG] [medium] Pred 0:	b'SELECT MAX(death.killed), MIN(death.killed), death.caused_by_ship_id FROM death GROUP BY death.caused_by_ship_id' (-0.000) (length=17)
[WRONG] [medium] Pred 1:	b'SELECT MAX(death.killed), MIN(death.killed), death.killed FROM death GROUP BY death.caused_by_ship_id' (-2.338) (length=17)
[WRONG] [medium] Pred 2:	b'SELECT MAX(death.killed), MIN(death.killed), death.id FROM death GROUP BY death.caused_by_ship_id' (-3.150) (length=17)
[WRONG] [medium] Pred 3:	b'SELECT MAX(death.killed), MIN(death.killed), death.caused_by_ship_id FROM death GROUP BY death.caused_by_ship_id' (-3.257) (length=19)
[WRONG] [medium] Pred 4:	b'SELECT MAX(death.killed), MIN(death.killed), death.note FROM death GROUP BY death.caused_by_ship_id' (-3.562) (length=17)
[CORRE] [medium] Pred 5:	b'SELECT MAX(death.killed), MIN(death.killed) FROM death' (-3.624) (length=13)
Error Case 156

Parsing error: from death group by death.caused_by_ship_id select avg (death.injured)) select avg (death.injured) , death.caused_by_ship_id
Parsing error: from death group by is select avg (death.injured) , death.caused_by_ship_id
Example 495
battle_death
 +-- battle (battle)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- date (date)
 |   +-- bulgarian_commander (bulgarian commander)
 |   +-- latin_commander (latin commander)
 |   +-- result (result)
 +-- ship (ship)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- lost_in_battle (lost in battle) [FOREIGN]
 |   +-- name (name)
 |   +-- tonnage (tonnage)
 |   +-- ship_type (ship type)
 |   +-- location (location)
 |   +-- disposition_of_ship (disposition of ship)
 +-- death (death)
     +-- id (id) [PRIMARY]
     +-- caused_by_ship_id (caused by ship id) [FOREIGN]
     +-- note (note)
     +-- killed (killed)
     +-- injured (injured)
NL: b'What is the average number of injuries caused each time?'
NL tokens: [b'what', b'is', b'the', b'average', b'number', b'of', b'injuries', b'caused', b'each', b'time', b'?']
NL tokens (original): [b'What', b'is', b'the', b'average', b'number', b'of', b'injuries', b'caused', b'each', b'time', b'?']
['[CLS]', 'what', 'is', 'the', 'average', 'number', 'of', 'injuries', 'caused', 'each', 'time', '?', '[SEP]', '*', '[unused50]', 'battle', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'date', '[unused51]', 'bulgarian', 'commander', '[unused51]', 'latin', 'commander', '[unused51]', 'result', '[unused50]', 'ship', '[unused51]', 'lost', 'in', 'battle', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'ton', '##nage', '[unused51]', 'ship', 'type', '[unused51]', 'location', '[unused51]', 'disposition', 'of', 'ship', '[unused50]', 'death', '[unused51]', 'caused', 'by', 'ship', 'id', '[unused51]', 'id', '[unused51]', 'note', '[unused51]', 'killed', '[unused51]', 'injured', '[SEP]']
Target 0: b'SELECT avg(injured) FROM death'
Target TF-P tokens: from death select avg (death.injured)

[WRONG] [easy] Pred 0:	b'SELECT AVG(death.injured), death.caused_by_ship_id FROM death GROUP BY death.caused_by_ship_id' (-0.006) (length=12)
[WRONG] [easy] Pred 1:	b'SELECT death.caused_by_ship_id, AVG(death.injured) FROM death GROUP BY death.caused_by_ship_id' (-1.912) (length=12)
[WRONG] [easy] Pred 2:	b'SELECT AVG(death.injured), death.caused_by_ship_id FROM death GROUP BY death.injured' (-3.940) (length=12)
[WRONG] [easy] Pred 3:	b'SELECT AVG(death.injured), death.injured FROM death GROUP BY death.caused_by_ship_id' (-4.136) (length=12)
[WRONG] [easy] Pred 4:	b'SELECT AVG(death.injured), death.caused_by_ship_id FROM death GROUP BY death.caused_by_ship_id' (-4.157) (length=14)
[WRONG] [easy] Pred 5:	b'SELECT AVG(death.injured), death.caused_by_ship_id FROM death GROUP BY "average"' (-4.220) (length=12)
[WRONG] [easy] Pred 6:	b'SELECT AVG(death.injured), death.id FROM death GROUP BY death.caused_by_ship_id' (-4.337) (length=12)
[WRONG] [easy] Pred 7:	b'SELECT death.injured, AVG(death.injured) FROM death GROUP BY death.caused_by_ship_id' (-4.452) (length=12)
[WRONG] [easy] Pred 8:	b'SELECT AVG(death.injured), death.caused_by_ship_id FROM death GROUP BY "battle"' (-4.469) (length=12)
[WRONG] [easy] Pred 9:	b'SELECT AVG(death.injured), death.caused_by_ship_id FROM death GROUP BY "What"' (-4.558) (length=12)
[WRONG] [easy] Pred 10:	b'SELECT AVG(death.injured), death.caused_by_ship_id FROM death GROUP BY "number"' (-4.585) (length=12)
[WRONG] [easy] Pred 11:	b'SELECT MIN(death.injured), death.caused_by_ship_id FROM death GROUP BY death.caused_by_ship_id' (-4.618) (length=12)
[WRONG] [easy] Pred 12:	b'SELECT AVG(death.injured), death.caused_by_ship_id FROM death GROUP BY death.id' (-4.669) (length=12)
[WRONG] [easy] Pred 13:	b'SELECT AVG(death.injured) FROM death GROUP BY death.caused_by_ship_id' (-4.858) (length=10)
Error Case 157

ERROR: Join condition does not match with table: ['death', {'join': 'battle', 'on': {'eq': ['battle.id', 'battle.name']}}]
ERROR: Join condition does not match with table: ['death', {'join': 'battle', 'on': {'eq': ['battle.id', 'battle.id']}}]
 48%|████▊     | 63/130 [07:46<06:34,  5.89s/it]ERROR: Join condition does not match with table: ['death', {'join': 'battle', 'on': {'eq': ['battle.id', 'battle.name']}}]
ERROR: Join condition does not match with table: ['battle', {'join': 'death', 'on': {'eq': ['battle.id', 'battle.name']}}]
ERROR: Join condition does not match with table: ['death', {'join': 'battle', 'on': {'eq': ['battle.id', 'battle.name']}}]
string indices must be integers
string indices must be integers
Example 499
battle_death
 +-- battle (battle)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- date (date)
 |   +-- bulgarian_commander (bulgarian commander)
 |   +-- latin_commander (latin commander)
 |   +-- result (result)
 +-- ship (ship)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- lost_in_battle (lost in battle) [FOREIGN]
 |   +-- name (name)
 |   +-- tonnage (tonnage)
 |   +-- ship_type (ship type)
 |   +-- location (location)
 |   +-- disposition_of_ship (disposition of ship)
 +-- death (death)
     +-- id (id) [PRIMARY]
     +-- caused_by_ship_id (caused by ship id) [FOREIGN]
     +-- note (note)
     +-- killed (killed)
     +-- injured (injured)
NL: b'What are the ids and names of the battles that led to more than 10 people killed in total.'
NL tokens: [b'what', b'are', b'the', b'id', b'##s', b'and', b'names', b'of', b'the', b'battles', b'that', b'led', b'to', b'more', b'than', b'10', b'people', b'killed', b'in', b'total', b'.']
NL tokens (original): [b'What', b'are', b'the', b'id', b'##s', b'and', b'names', b'of', b'the', b'battles', b'that', b'led', b'to', b'more', b'than', b'10', b'people', b'killed', b'in', b'total', b'.']
['[CLS]', 'what', 'are', 'the', 'id', '##s', 'and', 'names', 'of', 'the', 'battles', 'that', 'led', 'to', 'more', 'than', '10', 'people', 'killed', 'in', 'total', '.', '[SEP]', '*', '[unused50]', 'battle', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'date', '[unused51]', 'bulgarian', 'commander', '[unused51]', 'latin', 'commander', '[unused51]', 'result', '[unused50]', 'ship', '[unused51]', 'lost', 'in', 'battle', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'ton', '##nage', '[unused51]', 'ship', 'type', '[unused51]', 'location', '[unused51]', 'disposition', 'of', 'ship', '[unused50]', 'death', '[unused51]', 'caused', 'by', 'ship', 'id', '[unused51]', 'id', '[unused51]', 'note', '[unused51]', 'killed', '[unused51]', 'injured', '[SEP]']
Target 0: b'SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10'
Target TF-P tokens: from battle join ship on battle.id = ship.lost_in_battle join death on ship.id = death.caused_by_ship_id group by battle.id having sum (death.killed) > 10 select battle.id , battle.name

[WRONG] [hard] Pred 0:	b'SELECT battle.id, battle.name FROM battle JOIN death ON battle.id = death.caused_by_ship_id GROUP BY battle.id HAVING SUM(death.killed) > 10' (-0.056) (length=22)
[WRONG] [hard] Pred 1:	b'SELECT battle.id, battle.name FROM death JOIN battle ON death.caused_by_ship_id = battle.id GROUP BY battle.id HAVING SUM(death.killed) > 10' (-0.520) (length=22)
[WRONG] [hard] Pred 2:	b'SELECT battle.id, battle.name FROM death JOIN battle ON battle.id = death.caused_by_ship_id GROUP BY battle.id HAVING SUM(death.killed) > 10' (-0.844) (length=22)
[WRONG] [hard] Pred 3:	b'SELECT battle.id, battle.name FROM death JOIN battle ON battle.id = death.id GROUP BY battle.id HAVING SUM(death.killed) > 10' (-1.658) (length=22)
[WRONG] [hard] Pred 4:	b'SELECT battle.id, battle.name FROM death JOIN battle ON death.id = battle.id GROUP BY battle.id HAVING SUM(death.killed) > 10' (-1.664) (length=22)
[WRONG] [hard] Pred 5:	b'SELECT battle.id, battle.name FROM battle JOIN death ON battle.id = death.caused_by_ship_id WHERE death.killed > 10' (-1.800) (length=17)
[WRONG] [hard] Pred 6:	b'SELECT battle.id, battle.name FROM battle JOIN death ON battle.id = death.caused_by_ship_id WHERE death.killed > 10 OR death.killed > 10' (-2.458) (length=21)
[WRONG] [hard] Pred 7:	b'SELECT battle.id, battle.name FROM death JOIN battle ON death.caused_by_ship_id = battle.id WHERE death.killed > 10' (-2.768) (length=17)
[WRONG] [hard] Pred 8:	b'SELECT battle.id, battle.name FROM death JOIN battle ON battle.id = death.caused_by_ship_id WHERE death.killed > 10' (-2.915) (length=17)
Error Case 158

Example 500
battle_death
 +-- battle (battle)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- date (date)
 |   +-- bulgarian_commander (bulgarian commander)
 |   +-- latin_commander (latin commander)
 |   +-- result (result)
 +-- ship (ship)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- lost_in_battle (lost in battle) [FOREIGN]
 |   +-- name (name)
 |   +-- tonnage (tonnage)
 |   +-- ship_type (ship type)
 |   +-- location (location)
 |   +-- disposition_of_ship (disposition of ship)
 +-- death (death)
     +-- id (id) [PRIMARY]
     +-- caused_by_ship_id (caused by ship id) [FOREIGN]
     +-- note (note)
     +-- killed (killed)
     +-- injured (injured)
NL: b'What is the ship id and name that caused most total injuries?'
NL tokens: [b'what', b'is', b'the', b'ship', b'id', b'and', b'name', b'that', b'caused', b'most', b'total', b'injuries', b'?']
NL tokens (original): [b'What', b'is', b'the', b'ship', b'id', b'and', b'name', b'that', b'caused', b'most', b'total', b'injuries', b'?']
['[CLS]', 'what', 'is', 'the', 'ship', 'id', 'and', 'name', 'that', 'caused', 'most', 'total', 'injuries', '?', '[SEP]', '*', '[unused50]', 'battle', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'date', '[unused51]', 'bulgarian', 'commander', '[unused51]', 'latin', 'commander', '[unused51]', 'result', '[unused50]', 'ship', '[unused51]', 'lost', 'in', 'battle', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'ton', '##nage', '[unused51]', 'ship', 'type', '[unused51]', 'location', '[unused51]', 'disposition', 'of', 'ship', '[unused50]', 'death', '[unused51]', 'caused', 'by', 'ship', 'id', '[unused51]', 'id', '[unused51]', 'note', '[unused51]', 'killed', '[unused51]', 'injured', '[SEP]']
Target 0: b'SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from death join ship on death.caused_by_ship_id = ship.id group by ship.id select ship.id , ship.name order by count (*) desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT ship.id, ship.name FROM ship JOIN death ON ship.lost_in_battle = death.caused_by_ship_id GROUP BY ship.id ORDER BY SUM(death.injured) DESC LIMIT 1' (-0.091) (length=23)
[CORRE] [extra] Pred 1:	b'SELECT ship.id, ship.name FROM ship JOIN death ON ship.lost_in_battle = death.caused_by_ship_id GROUP BY ship.id ORDER BY COUNT(*) DESC LIMIT 1' (-0.211) (length=23)
Error Case 159

ERROR: table "battle" in field expression battle.id is not in the current scope
ERROR: table "battle" in field expression battle.id is not in the current scope
Example 505
battle_death
 +-- battle (battle)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- date (date)
 |   +-- bulgarian_commander (bulgarian commander)
 |   +-- latin_commander (latin commander)
 |   +-- result (result)
 +-- ship (ship)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- lost_in_battle (lost in battle) [FOREIGN]
 |   +-- name (name)
 |   +-- tonnage (tonnage)
 |   +-- ship_type (ship type)
 |   +-- location (location)
 |   +-- disposition_of_ship (disposition of ship)
 +-- death (death)
     +-- id (id) [PRIMARY]
     +-- caused_by_ship_id (caused by ship id) [FOREIGN]
     +-- note (note)
     +-- killed (killed)
     +-- injured (injured)
NL: b"Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'."
NL tokens: [b'show', b'names', b',', b'results', b'and', b'bulgarian', b'commanders', b'of', b'the', b'battles', b'with', b'no', b'ships', b'lost', b'in', b'the', b"'", b'english', b'channel', b"'", b'.']
NL tokens (original): [b'Show', b'names', b',', b'results', b'and', b'bulgarian', b'commanders', b'of', b'the', b'battles', b'with', b'no', b'ships', b'lost', b'in', b'the', b"'", b'English', b'Channel', b"'", b'.']
['[CLS]', 'show', 'names', ',', 'results', 'and', 'bulgarian', 'commanders', 'of', 'the', 'battles', 'with', 'no', 'ships', 'lost', 'in', 'the', "'", 'english', 'channel', "'", '.', '[SEP]', '*', '[unused50]', 'battle', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'date', '[unused51]', 'bulgarian', 'commander', '[unused51]', 'latin', 'commander', '[unused51]', 'result', '[unused50]', 'ship', '[unused51]', 'lost', 'in', 'battle', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'ton', '##nage', '[unused51]', 'ship', 'type', '[unused51]', 'location', '[unused49]', 'english', 'channel', '[unused51]', 'disposition', 'of', 'ship', '[unused50]', 'death', '[unused51]', 'caused', 'by', 'ship', 'id', '[unused51]', 'id', '[unused51]', 'note', '[unused51]', 'killed', '[unused51]', 'injured', '[SEP]']
Target 0: b"SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'"
Target TF-P tokens: from battle select battle.name , battle.result , battle.bulgarian_commander except from battle join ship on battle.id = ship.lost_in_battle where ship.location = "English Channel" select battle.name , battle.result , battle.bulgarian_commander

[WRONG] [extra] Pred 0:	b'SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle WHERE battle.id NOT IN (SELECT ship.id FROM ship WHERE ship.location = "English Channel")' (-0.620) (length=26)
[WRONG] [extra] Pred 1:	b'SELECT battle.name, battle.result, battle.latin_commander FROM battle WHERE battle.id NOT IN (SELECT ship.id FROM ship WHERE ship.location = "English Channel")' (-1.331) (length=26)
[CORRE] [extra] Pred 2:	b'SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle EXCEPT SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.location = "English Channel"' (-1.648) (length=31)
Error Case 160

Parsing error: from death where death.killed like like % "% East %" select death.note
Example 506
battle_death
 +-- battle (battle)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- date (date)
 |   +-- bulgarian_commander (bulgarian commander)
 |   +-- latin_commander (latin commander)
 |   +-- result (result)
 +-- ship (ship)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- lost_in_battle (lost in battle) [FOREIGN]
 |   +-- name (name)
 |   +-- tonnage (tonnage)
 |   +-- ship_type (ship type)
 |   +-- location (location)
 |   +-- disposition_of_ship (disposition of ship)
 +-- death (death)
     +-- id (id) [PRIMARY]
     +-- caused_by_ship_id (caused by ship id) [FOREIGN]
     +-- note (note)
     +-- killed (killed)
     +-- injured (injured)
NL: b"What are the notes of the death events which has substring 'East'?"
NL tokens: [b'what', b'are', b'the', b'notes', b'of', b'the', b'death', b'events', b'which', b'has', b'sub', b'##st', b'##ring', b"'", b'east', b"'", b'?']
NL tokens (original): [b'What', b'are', b'the', b'notes', b'of', b'the', b'death', b'events', b'which', b'has', b'sub', b'##st', b'##ring', b"'", b'East', b"'", b'?']
['[CLS]', 'what', 'are', 'the', 'notes', 'of', 'the', 'death', 'events', 'which', 'has', 'sub', '##st', '##ring', "'", 'east', "'", '?', '[SEP]', '*', '[unused50]', 'battle', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'date', '[unused51]', 'bulgarian', 'commander', '[unused51]', 'latin', 'commander', '[unused51]', 'result', '[unused50]', 'ship', '[unused51]', 'lost', 'in', 'battle', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'ton', '##nage', '[unused51]', 'ship', 'type', '[unused51]', 'location', '[unused51]', 'disposition', 'of', 'ship', '[unused50]', 'death', '[unused51]', 'caused', 'by', 'ship', 'id', '[unused51]', 'id', '[unused51]', 'note', '[unused51]', 'killed', '[unused51]', 'injured', '[SEP]']
Target 0: b"SELECT note FROM death WHERE note LIKE '%East%'"
Target TF-P tokens: from death where death.note like "% East %" select death.note

[WRONG] [medium] Pred 0:	b'SELECT death.note FROM death WHERE death.killed LIKE "% East %"' (-0.000) (length=13)
[WRONG] [medium] Pred 1:	b'SELECT death.note FROM death WHERE death.killed LIKE "% East %" AND death.killed LIKE "% East %"' (-3.588) (length=21)
[WRONG] [medium] Pred 2:	b'SELECT death.note FROM death WHERE death.killed LIKE "% East %" OR death.killed LIKE "% East %"' (-3.678) (length=21)
[WRONG] [medium] Pred 3:	b'SELECT death.note FROM death JOIN death ON death.killed = death.caused_by_ship_id WHERE death.killed LIKE "% East %"' (-3.905) (length=19)
[WRONG] [medium] Pred 4:	b'SELECT death.note FROM death JOIN death ON death.killed = death.id WHERE death.killed LIKE "% East %"' (-4.014) (length=19)
[WRONG] [medium] Pred 5:	b'SELECT death.note FROM death WHERE death.killed LIKE "East %"' (-4.376) (length=12)
[WRONG] [medium] Pred 6:	b'SELECT death.note FROM death WHERE death.killed LIKE "like East %"' (-4.545) (length=13)
[WRONG] [medium] Pred 7:	b'SELECT death.note FROM death WHERE MOD(death.killed, "East %")' (-4.965) (length=12)
[WRONG] [medium] Pred 8:	b'SELECT death.note, death.killed FROM death WHERE death.killed LIKE "% East %"' (-4.988) (length=15)
[WRONG] [medium] Pred 9:	b'SELECT death.note FROM death WHERE death.killed <= "East %"' (-5.059) (length=12)
[CORRE] [medium] Pred 10:	b'SELECT death.note FROM death WHERE death.note LIKE "% East %"' (-5.132) (length=13)
Error Case 161

Parsing error: from Addresses where Addresses.line_1 = 1 select Addresses.other_address_details intersect from Addresses where Addresses.line_1 = line 2 VALUE VALUE "select Addresses.other_address_details"
Parsing error: from Addresses where Addresses.line_1 = 1 select Addresses.other_address_details intersect from Addresses where Addresses.line_1 = line line 2 "select Addresses.other_address_details"
Example 507
student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b'what are all the addresses including line 1 and line 2?'
NL tokens: [b'what', b'are', b'all', b'the', b'addresses', b'including', b'line', b'1', b'and', b'line', b'2', b'?']
NL tokens (original): [b'what', b'are', b'all', b'the', b'addresses', b'including', b'line', b'1', b'and', b'line', b'2', b'?']
['[CLS]', 'what', 'are', 'all', 'the', 'addresses', 'including', 'line', '1', 'and', 'line', '2', '?', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b'SELECT line_1 ,  line_2 FROM addresses'
Target TF-P tokens: from Addresses select Addresses.line_1 , Addresses.line_2

[WRONG] [medium] Pred 0:	b'SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_1 = 1 INTERSECT SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_1 = line 2' (-0.363) (length=21)
[WRONG] [medium] Pred 1:	b'SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_1 = 1 INTERSECT SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_1 = 2' (-0.377) (length=20)
[WRONG] [medium] Pred 2:	b'SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 = 1 INTERSECT SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_1 = line 2' (-0.395) (length=21)
[WRONG] [medium] Pred 3:	b'SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 = 1 INTERSECT SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_1 = 2' (-0.491) (length=20)
[WRONG] [medium] Pred 4:	b'SELECT Addresses.address_id FROM Addresses WHERE Addresses.line_1 = 1 INTERSECT SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_1 = 2' (-0.598) (length=20)
[WRONG] [medium] Pred 5:	b'SELECT Addresses.address_id FROM Addresses WHERE Addresses.line_1 = 1 INTERSECT SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_2 = 2' (-0.614) (length=20)
[WRONG] [medium] Pred 6:	b'SELECT Addresses.address_id FROM Addresses WHERE Addresses.line_1 = 1 INTERSECT SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_1 = line 2' (-0.637) (length=21)
[WRONG] [medium] Pred 7:	b'SELECT Addresses.address_id FROM Addresses WHERE Addresses.line_1 = 1 INTERSECT SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_2 = line 2' (-0.649) (length=21)
[WRONG] [medium] Pred 8:	b'SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_1 = 1 INTERSECT SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_1 = 2' (-0.706) (length=18)
[WRONG] [medium] Pred 9:	b'SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 = 1 INTERSECT SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_1 = 2' (-0.993) (length=18)
 49%|████▉     | 64/130 [07:51<06:10,  5.61s/it] 50%|█████     | 65/130 [07:52<04:50,  4.46s/it][WRONG] [medium] Pred 10:	b'SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_1 = 1 INTERSECT SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_2 = line 2' (-1.027) (length=21)
[WRONG] [medium] Pred 11:	b'SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_1 = 1 INTERSECT SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_2 = 2' (-1.050) (length=20)
[WRONG] [medium] Pred 12:	b'SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 = 1 INTERSECT SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_1 = "line"' (-1.406) (length=18)
[WRONG] [medium] Pred 13:	b'SELECT Addresses.line_1 FROM Addresses WHERE Addresses.line_1 = 1 INTERSECT SELECT Addresses.other_address_details FROM Addresses WHERE Addresses.line_1 = 1' (-1.472) (length=18)
Error Case 162

Example 520
student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b'How many different degrees are offered?'
NL tokens: [b'how', b'many', b'different', b'degrees', b'are', b'offered', b'?']
NL tokens (original): [b'How', b'many', b'different', b'degrees', b'are', b'offered', b'?']
['[CLS]', 'how', 'many', 'different', 'degrees', 'are', 'offered', '?', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b'SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs'
Target TF-P tokens: from Degree_Programs select count (distinct Degree_Programs.degree_summary_name)

[WRONG] [easy] Pred 0:	b'SELECT COUNT(DISTINCT Student_Enrolment.degree_program_id) FROM Student_Enrolment' (-0.295) (length=9)
[CORRE] [easy] Pred 1:	b'SELECT COUNT(DISTINCT Degree_Programs.degree_summary_name) FROM Degree_Programs' (-1.833) (length=9)
Error Case 163

Parsing error: from Courses join Sections on Courses.course_id = Sections.course_id group by Courses.course_id having count (*) except from Courses join Sections on Courses.course_id = Sections.course_id group by Courses.course_id having count (*) < 2 select Courses.course_name , Courses.course_id
Parsing error: from Courses join Sections on Courses.course_id = Sections.course_id group by Courses.course_id having count (*) limit 2 select Courses.course_name , Courses.course_id
Parsing error: from Courses join Sections on Courses.course_id = Sections.course_id group by Courses.course_id having count (*) between 2 select Courses.course_name , Courses.course_id
Parsing error: from Courses join Sections on Courses.course_id = Sections.course_id group by Courses.course_id having count (*) except from Courses join Sections on Courses.course_id = Sections.course_id group by Courses.course_id having count (*) limit 2 select Courses.course_name , Courses.course_id
Parsing error: from Courses join Sections on Courses.course_id = Sections.course_id group by Courses.course_id having count (*) having limit 2 select Courses.course_name , Courses.course_id
Example 526
student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b'What are the names and ids of every course with less than 2 sections?'
NL tokens: [b'what', b'are', b'the', b'names', b'and', b'id', b'##s', b'of', b'every', b'course', b'with', b'less', b'than', b'2', b'sections', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'and', b'id', b'##s', b'of', b'every', b'course', b'with', b'less', b'than', b'2', b'sections', b'?']
['[CLS]', 'what', 'are', 'the', 'names', 'and', 'id', '##s', 'of', 'every', 'course', 'with', 'less', 'than', '2', 'sections', '?', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b'SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2'
Target TF-P tokens: from Courses join Sections on Courses.course_id = Sections.course_id group by Courses.course_id having count (*) <= 2 select Courses.course_name , Courses.course_id

[WRONG] [medium] Pred 0:	b'SELECT Courses.course_name, Courses.course_id FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_id HAVING COUNT(*) < 2' (-0.570) (length=22)
[WRONG] [medium] Pred 1:	b'SELECT Courses.course_name, Courses.course_id FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Sections.course_id HAVING COUNT(*) < 2' (-1.638) (length=22)
[WRONG] [medium] Pred 2:	b'SELECT Courses.course_name, Courses.course_id FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id EXCEPT SELECT Courses.course_name, Courses.course_id FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_id HAVING COUNT(*) < 2' (-2.503) (length=35)
[WRONG] [medium] Pred 3:	b'SELECT Courses.course_name, Courses.course_id FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id UNION SELECT Courses.course_name, Courses.course_id FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_id HAVING COUNT(*) < 2' (-2.777) (length=35)
[WRONG] [medium] Pred 4:	b'SELECT Courses.course_name, Courses.course_id FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_id HAVING COUNT(*) > 2' (-3.553) (length=22)
[WRONG] [medium] Pred 5:	b'SELECT Courses.course_name, Courses.course_id FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_id HAVING COUNT(*) != 2' (-3.878) (length=22)
[WRONG] [medium] Pred 6:	b'SELECT Courses.course_name FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_id HAVING COUNT(*) < 2' (-4.032) (length=20)
[WRONG] [medium] Pred 7:	b'SELECT Courses.course_name, Courses.course_id FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id WHERE Sections.section_name < 2' (-4.167) (length=17)
 51%|█████     | 66/130 [07:55<04:11,  3.93s/it][CORRE] [medium] Pred 8:	b'SELECT Courses.course_name, Courses.course_id FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Courses.course_id HAVING COUNT(*) <= 2' (-4.172) (length=22)
Error Case 164

Example 530
student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b'For each semester, what is the name and id of the one with the most students registered?'
NL tokens: [b'for', b'each', b'semester', b',', b'what', b'is', b'the', b'name', b'and', b'id', b'of', b'the', b'one', b'with', b'the', b'most', b'students', b'registered', b'?']
NL tokens (original): [b'For', b'each', b'semester', b',', b'what', b'is', b'the', b'name', b'and', b'id', b'of', b'the', b'one', b'with', b'the', b'most', b'students', b'registered', b'?']
['[CLS]', 'for', 'each', 'semester', ',', 'what', 'is', 'the', 'name', 'and', 'id', 'of', 'the', 'one', 'with', 'the', 'most', 'students', 'registered', '?', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b'SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from Semesters join Student_Enrolment on Semesters.semester_id = Student_Enrolment.semester_id group by Semesters.semester_id select Semesters.semester_name , Semesters.semester_id order by count (*) desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT Semesters.semester_name, Semesters.semester_id FROM Semesters JOIN Students ON Semesters.semester_id = Students.current_address_id GROUP BY Semesters.semester_id ORDER BY COUNT(*) DESC LIMIT 1' (-0.945) (length=23)
[WRONG] [extra] Pred 1:	b'SELECT Semesters.semester_name, Semesters.semester_id FROM Semesters JOIN Students ON Semesters.semester_id = Students.permanent_address_id GROUP BY Semesters.semester_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.154) (length=23)
[CORRE] [extra] Pred 2:	b'SELECT Semesters.semester_name, Semesters.semester_id FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY Semesters.semester_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.727) (length=23)
Error Case 165

ERROR: Join condition does not match with table: ['Student_Enrolment', {'join': 'Courses', 'on': {'eq': ['Student_Enrolment.degree_program_id', 'Courses.course_id']}}, {'join': 'Students', 'on': {'eq': ['Student_Enrolment.semester_id', 'Courses.course_id']}}]
ERROR: Join condition does not match with table: ['Student_Enrolment', {'join': 'Courses', 'on': {'eq': ['Student_Enrolment.degree_program_id', 'Courses.course_id']}}, {'join': 'Students', 'on': {'eq': ['Student_Enrolment.semester_id', 'Courses.course_id']}}]
ERROR: Join condition does not match with table: ['Student_Enrolment', {'join': 'Courses', 'on': {'eq': ['Student_Enrolment.degree_program_id', 'Courses.course_id']}}, {'join': 'Students', 'on': {'eq': ['Student_Enrolment.semester_id', 'Courses.course_id']}}]
Parsing error: from Student_Enrolment join Courses on Student_Enrolment.degree_program_id = Courses.course_id union count Students on Student_Enrolment.semester_id = Courses.course_id group by Student_Enrolment.student_enrolment_id having count (*) = 2 select Students.first_name , Students.middle_name , Student_Enrolment.semester_id
ERROR: Join condition does not match with table: ['Student_Enrolment', {'join': 'Courses', 'on': {'eq': ['Student_Enrolment.degree_program_id', 'Courses.course_id']}}, {'join': 'Students', 'on': {'eq': ['Student_Enrolment.semester_id', 'Courses.course_id']}}]
Parsing error: from Student_Enrolment join Courses on Student_Enrolment.degree_program_id = Courses.course_id union count Students on Student_Enrolment.semester_id = Courses.course_id group by Student_Enrolment.student_enrolment_id having count (*) = 2 select Students.first_name , Students.middle_name , Student_Enrolment.student_enrolment_id
ERROR: Join condition does not match with table: ['Student_Enrolment', {'join': 'Courses', 'on': {'eq': ['Student_Enrolment.degree_program_id', 'Courses.course_id']}}, {'join': 'Students', 'on': {'eq': ['Student_Enrolment.semester_id', 'Courses.course_id']}}]
Parsing error: from Student_Enrolment join Courses on Student_Enrolment.degree_program_id = Courses.course_id union count Students on Student_Enrolment.semester_id = Courses.course_id group by Student_Enrolment.degree_program_id having count (*) = 2 select Students.first_name , Students.middle_name , Student_Enrolment.semester_id
Parsing error: from Student_Enrolment join Courses on Student_Enrolment.degree_program_id = Courses.course_id union count Students on Student_Enrolment.semester_id = Courses.course_id group by Student_Enrolment.student_enrolment_id having count (*) = 2 select Students.first_name , Students.last_name , Student_Enrolment.semester_id
ERROR: Join condition does not match with table: ['Student_Enrolment', {'join': 'Courses', 'on': {'eq': ['Student_Enrolment.degree_program_id', 'Courses.course_id']}}, {'join': 'Students', 'on': {'eq': ['Student_Enrolment.semester_id', 'Courses.course_id']}}]
Parsing error: from Student_Enrolment join Courses on Student_Enrolment.degree_program_id = Courses.course_id union count Students on Student_Enrolment.semester_id = Courses.course_id group by Courses.course_id having count (*) = 2 select Students.first_name , Students.middle_name , Student_Enrolment.semester_id
ERROR: Join condition does not match with table: ['Student_Enrolment_Courses', {'join': 'Students', 'on': {'eq': ['Student_Enrolment.degree_program_id', 'Students.student_id']}}]
ERROR: Join condition does not match with table: ['Student_Enrolment_Courses', {'join': 'Students', 'on': {'eq': ['Student_Enrolment.degree_program_id', 'Students.student_id']}}]
Example 533
student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b'Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.'
NL tokens: [b'who', b'are', b'enrolled', b'in', b'2', b'degree', b'programs', b'in', b'one', b'semester', b'?', b'list', b'the', b'first', b'name', b',', b'middle', b'name', b'and', b'last', b'name', b'and', b'the', b'id', b'.']
NL tokens (original): [b'Who', b'are', b'enrolled', b'in', b'2', b'degree', b'programs', b'in', b'one', b'semester', b'?', b'List', b'the', b'first', b'name', b',', b'middle', b'name', b'and', b'last', b'name', b'and', b'the', b'id', b'.']
['[CLS]', 'who', 'are', 'enrolled', 'in', '2', 'degree', 'programs', 'in', 'one', 'semester', '?', 'list', 'the', 'first', 'name', ',', 'middle', 'name', 'and', 'last', 'name', 'and', 'the', 'id', '.', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b'SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2'
Target TF-P tokens: from Students join Student_Enrolment on Students.student_id = Student_Enrolment.student_id group by Students.student_id having count (*) = 2 select Students.first_name , Students.middle_name , Students.last_name , Students.student_id

[WRONG] [medium] Pred 0:	b'SELECT Students.first_name, Students.middle_name, Student_Enrolment.semester_id FROM Student_Enrolment JOIN Students ON Student_Enrolment.degree_program_id = Students.student_id GROUP BY Student_Enrolment.degree_program_id HAVING COUNT(*) = 2' (-2.635) (length=24)
[WRONG] [medium] Pred 1:	b'SELECT Students.first_name, Students.middle_name, Student_Enrolment.student_enrolment_id FROM Student_Enrolment JOIN Students ON Student_Enrolment.degree_program_id = Students.student_id GROUP BY Student_Enrolment.degree_program_id HAVING COUNT(*) = 2' (-2.823) (length=24)
[WRONG] [medium] Pred 2:	b'SELECT Students.first_name, Students.last_name, Student_Enrolment.semester_id FROM Student_Enrolment JOIN Students ON Student_Enrolment.degree_program_id = Students.student_id GROUP BY Student_Enrolment.degree_program_id HAVING COUNT(*) = 2' (-3.020) (length=24)
Error Case 166

ERROR: Join condition does not match with table: ['Student_Enrolment_Courses', {'join': 'Students', 'on': {'eq': ['Student_Enrolment.student_id', 'Students.student_id']}}]
Parsing error: from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id group by Student_Enrolment.student_id select Students.first_name , Students.middle_name , Students.last_name , count (*) union from Students on Student_Enrolment.student_id = Students.student_id group by Student_Enrolment.student_id having count (*) = 2 select Students.first_name , Students.middle_name , Students.last_name
Parsing error: from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id group by Student_Enrolment.student_id having count (*) = 2 select Students.first_name , Students.middle_name , Students.last_name union from Students on Student_Enrolment.student_id = Students.student_id group by Student_Enrolment.student_id having count (*) = 2 select Students.first_name , Students.middle_name , Students.last_name
ERROR: Join condition does not match with table: ['Student_Enrolment_Courses', {'join': 'Students', 'on': {'eq': ['Student_Enrolment.student_id', 'Students.student_id']}}]
ERROR: Join condition does not match with table: ['Students', {'join': 'Students', 'on': {'eq': ['Student_Enrolment.student_id', 'Students.student_id']}}]
Parsing error: from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id group by Student_Enrolment.student_id having count (*) = 2 select Students.first_name , Students.middle_name , Students.last_name count (*)
Example 534
student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b'What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?'
NL tokens: [b'what', b'are', b'the', b'first', b',', b'middle', b',', b'and', b'last', b'names', b',', b'along', b'with', b'the', b'id', b'##s', b',', b'of', b'all', b'students', b'who', b'enrolled', b'in', b'2', b'degree', b'programs', b'in', b'one', b'semester', b'?']
NL tokens (original): [b'What', b'are', b'the', b'first', b',', b'middle', b',', b'and', b'last', b'names', b',', b'along', b'with', b'the', b'id', b'##s', b',', b'of', b'all', b'students', b'who', b'enrolled', b'in', b'2', b'degree', b'programs', b'in', b'one', b'semester', b'?']
['[CLS]', 'what', 'are', 'the', 'first', ',', 'middle', ',', 'and', 'last', 'names', ',', 'along', 'with', 'the', 'id', '##s', ',', 'of', 'all', 'students', 'who', 'enrolled', 'in', '2', 'degree', 'programs', 'in', 'one', 'semester', '?', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b'SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2'
Target TF-P tokens: from Students join Student_Enrolment on Students.student_id = Student_Enrolment.student_id group by Students.student_id having count (*) = 2 select Students.first_name , Students.middle_name , Students.last_name , Students.student_id

[WRONG] [medium] Pred 0:	b'SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id HAVING COUNT(*) = 2' (-0.001) (length=24)
[WRONG] [medium] Pred 1:	b'SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id HAVING COUNT(*) = 2 UNION SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id HAVING COUNT(*) = 2' (-0.679) (length=48)
[WRONG] [medium] Pred 2:	b'SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id HAVING COUNT(*) = 2 INTERSECT SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id HAVING COUNT(*) = 2' (-1.114) (length=48)
 52%|█████▏    | 67/130 [08:05<06:05,  5.80s/it][WRONG] [medium] Pred 3:	b'SELECT Students.first_name, Students.middle_name, Students.last_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id UNION SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id HAVING COUNT(*) = 2' (-1.153) (length=46)
[WRONG] [medium] Pred 4:	b'SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id HAVING COUNT(*) = 2 UNION SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id HAVING COUNT(*) >= 2' (-1.517) (length=48)
[WRONG] [medium] Pred 5:	b'SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id HAVING COUNT(*) = 2 UNION SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id HAVING COUNT(*) = "one"' (-1.595) (length=48)
[WRONG] [medium] Pred 6:	b'SELECT Students.first_name, Students.middle_name, Students.last_name, Student_Enrolment.semester_id FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 2' (-1.610) (length=27)
[WRONG] [medium] Pred 7:	b'SELECT Students.first_name, Students.middle_name, Students.last_name, Student_Enrolment.semester_id FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id HAVING COUNT(*) = 2' (-1.679) (length=26)
[WRONG] [medium] Pred 8:	b'SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id HAVING COUNT(*) = 2 UNION SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id' (-1.830) (length=41)
[WRONG] [medium] Pred 9:	b'SELECT Students.first_name, Students.middle_name, Students.last_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 2' (-1.916) (length=30)
Error Case 167

ERROR: Join condition does not match with table: ['Student_Enrolment', {'join': 'Degree_Programs', 'on': {'eq': ['Student_Enrolment.degree_program_id', 'Degree_Programs.degree_program_id']}}, {'join': 'Students', 'on': {'eq': ['Student_Enrolment.student_id', 'Degree_Programs.degree_program_id']}}]
ERROR: Join condition does not match with table: ['Student_Enrolment', {'join': 'Degree_Programs', 'on': {'eq': ['Student_Enrolment.degree_program_id', 'Degree_Programs.degree_program_id']}}, {'join': 'Students', 'on': {'eq': ['Student_Enrolment.student_id', 'Degree_Programs.degree_program_id']}}]
'on'
'on'
ERROR: Join condition does not match with table: ['Student_Enrolment', {'join': 'Degree_Programs', 'on': {'eq': ['Student_Enrolment.degree_program_id', 'Degree_Programs.degree_program_id']}}, {'join': 'Students', 'on': {'eq': ['Student_Enrolment.student_id', 'Degree_Programs.degree_program_id']}}]
ERROR: table "Students" in field expression Students.first_name is not in the current scope
ERROR: table "Students" in field expression Students.first_name is not in the current scope
ERROR: table "Students" in field expression Students.first_name is not in the current scope
ERROR: Join condition does not match with table: ['Student_Enrolment_Courses', {'join': 'Students', 'on': {'eq': ['Student_Enrolment.semester_id', 'Courses.course_id']}}]
ERROR: table "Courses" in field expression Courses.course_id is not in the current scope
ERROR: table "Courses" in field expression Courses.course_id is not in the current scope
ERROR: Join condition does not match with table: ['Student_Enrolment_Courses', {'join': 'Students', 'on': {'eq': ['Student_Enrolment.semester_id', 'Courses.course_id']}}]
ERROR: table "Courses" in field expression Courses.course_id is not in the current scope
ERROR: Join condition does not match with table: ['Student_Enrolment_Courses', {'join': 'Students', 'on': {'eq': ['Student_Enrolment.semester_id', 'Courses.course_id']}}]
ERROR: Join condition does not match with table: ['Student_Enrolment_Courses', {'join': 'Students', 'on': {'eq': ['Student_Enrolment.semester_id', 'Courses.course_id']}}]
ERROR: Join condition does not match with table: ['Student_Enrolment', {'join': 'Students', 'on': {'eq': ['Student_Enrolment.semester_id', 'Courses.course_id']}}]
ERROR: Join condition does not match with table: ['Student_Enrolment_Courses', {'join': 'Students', 'on': {'eq': ['Student_Enrolment.semester_id', 'Courses.course_id']}}]
ERROR: Join condition does not match with table: ['Student_Enrolment', {'join': 'Students', 'on': {'eq': ['Student_Enrolment.semester_id', 'Courses.course_id']}}]
ERROR: Join condition does not match with table: ['Student_Enrolment_Courses', {'join': 'Students', 'on': {'eq': ['Student_Enrolment.semester_id', 'Courses.course_id']}}]
ERROR: Join condition does not match with table: ['Student_Enrolment_Courses', {'join': 'Students', 'on': {'eq': ['Student_Enrolment_Courses.student_enrolment_id', 'Courses.course_id']}}]
ERROR: table "Students" in field expression Students.first_name is not in the current scope
Example 536
student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b'What are the first, middle, and last names for everybody enrolled in a Bachelors program?'
NL tokens: [b'what', b'are', b'the', b'first', b',', b'middle', b',', b'and', b'last', b'names', b'for', b'everybody', b'enrolled', b'in', b'a', b'bachelor', b'##s', b'program', b'?']
NL tokens (original): [b'What', b'are', b'the', b'first', b',', b'middle', b',', b'and', b'last', b'names', b'for', b'everybody', b'enrolled', b'in', b'a', b'Bachelor', b'##s', b'program', b'?']
['[CLS]', 'what', 'are', 'the', 'first', ',', 'middle', ',', 'and', 'last', 'names', 'for', 'everybody', 'enrolled', 'in', 'a', 'bachelor', '##s', 'program', '?', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b"SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"
Target TF-P tokens: from Students join Student_Enrolment on Students.student_id = Student_Enrolment.student_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where Degree_Programs.degree_summary_name = "Bachelor" select distinct Students.first_name , Students.middle_name , Students.last_name

[WRONG] hard Pred 0:	No valid output! (0.000)
Error Case 168

Parsing error: from Courses join Student_Enrolment_Courses on Courses.course_id = Student_Enrolment_Courses.course_id group by Transcripts group by Courses.course_name select Courses.course_name order by count (*) desc limit 1
Parsing error: from Courses join Student_Enrolment_Courses on Courses.course_id = Student_Enrolment_Courses.course_id group by Students group by Courses.course_name select Courses.course_name order by count (*) desc limit 1
Parsing error: from Courses join Student_Enrolment_Courses on Courses.course_id = Student_Enrolment_Courses.course_id group by Transcript_Contents group by Courses.course_name select Courses.course_name order by count (*) desc limit 1
Parsing error: from Courses join Student_Enrolment_Courses on Courses.course_id = Student_Enrolment_Courses.course_id group by in (Student_Enrolment_Courses.student_enrolment_id) order by count (*) desc limit 1
Example 537
student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b'Find the kind of program which most number of students are enrolled in?'
NL tokens: [b'find', b'the', b'kind', b'of', b'program', b'which', b'most', b'number', b'of', b'students', b'are', b'enrolled', b'in', b'?']
NL tokens (original): [b'Find', b'the', b'kind', b'of', b'program', b'which', b'most', b'number', b'of', b'students', b'are', b'enrolled', b'in', b'?']
['[CLS]', 'find', 'the', 'kind', 'of', 'program', 'which', 'most', 'number', 'of', 'students', 'are', 'enrolled', 'in', '?', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b'SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from Degree_Programs join Student_Enrolment on Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id group by Degree_Programs.degree_summary_name select Degree_Programs.degree_summary_name order by count (*) desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_name ORDER BY COUNT(*) DESC LIMIT 1' (-0.038) (length=21)
[WRONG] [extra] Pred 1:	b'SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Student_Enrolment_Courses.student_enrolment_id ORDER BY COUNT(*) DESC LIMIT 1' (-0.474) (length=21)
[WRONG] [extra] Pred 2:	b'SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Student_Enrolment_Courses.course_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.238) (length=21)
[WRONG] [extra] Pred 3:	b'SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Student_Enrolment_Courses.student_course_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.282) (length=21)
[WRONG] [extra] Pred 4:	b'SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.other_details ORDER BY COUNT(*) DESC LIMIT 1' (-1.389) (length=21)
[WRONG] [extra] Pred 5:	b'SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY "Transcripts" ORDER BY COUNT(*) DESC LIMIT 1' (-1.676) (length=21)
[WRONG] [extra] Pred 6:	b'SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY "Find" ORDER BY COUNT(*) DESC LIMIT 1' (-1.937) (length=21)
[WRONG] [extra] Pred 7:	b'SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_description ORDER BY COUNT(*) DESC LIMIT 1' (-1.973) (length=21)
[WRONG] [extra] Pred 8:	b'SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY "the" ORDER BY COUNT(*) DESC LIMIT 1' (-2.118) (length=21)
[WRONG] [extra] Pred 9:	b'SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY "enrolled" ORDER BY COUNT(*) DESC LIMIT 1' (-2.314) (length=21)
[WRONG] [extra] Pred 10:	b'SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.357) (length=21)
[WRONG] [extra] Pred 11:	b'SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY "of" ORDER BY COUNT(*) DESC LIMIT 1' (-2.393) (length=21)
Error Case 169

ERROR: Join condition does not match with table: ['Courses', {'join': 'Student_Enrolment_Courses', 'on': {'eq': ['Courses.course_id', 'Student_Enrolment_Courses.course_id']}}, {'join': 'Degree_Programs', 'on': {'eq': ['Student_Enrolment_Courses.course_id', 'Courses.course_id']}}]
ERROR: Join condition does not match with table: ['Courses', {'join': 'Student_Enrolment_Courses', 'on': {'eq': ['Courses.course_id', 'Student_Enrolment_Courses.course_id']}}, {'join': 'Degree_Programs', 'on': {'eq': ['Student_Enrolment_Courses.student_enrolment_id', 'Courses.course_id']}}]
ERROR: Join condition does not match with table: ['Courses', {'join': 'Student_Enrolment_Courses', 'on': {'eq': ['Courses.course_id', 'Student_Enrolment_Courses.course_id']}}, {'join': 'Degree_Programs', 'on': {'eq': ['Student_Enrolment_Courses.course_id', 'Courses.course_id']}}]
Parsing error: from Degree_Programs join Student_Enrolment_Courses on Degree_Programs.degree_program_id = Student_Enrolment_Courses.course_id group by Degree_Programs.degree_summary_name select Degree_Programs.degree_summary_name order by count (*) desc limit limit 1
Parsing error: from Degree_Programs join Student_Enrolment_Courses on Degree_Programs.degree_program_id = Student_Enrolment_Courses.course_id group by Degree_Programs.degree_summary_name select Degree_Programs.degree_summary_name order by count (*) desc desc limit 1
Parsing error: from Courses join Student_Enrolment_Courses on Courses.course_id = Student_Enrolment_Courses.course_id join Degree_Programs on Student_Enrolment_Courses.student_enrolment_id = Degree_Programs.degree_program_id group by Degree_Programs.degree_summary_name select Degree_Programs.degree_summary_name order by count (*) desc limit limit 1
Parsing error: from Courses join Student_Enrolment_Courses on Courses.course_id = Student_Enrolment_Courses.course_id join Degree_Programs on Student_Enrolment_Courses.course_id = Degree_Programs.degree_program_id group by Degree_Programs.degree_summary_name select Degree_Programs.degree_summary_name order by count (*) desc limit limit 1
ERROR: table "Courses" in field expression Courses.course_name is not in the current scope
ERROR: table "Courses" in field expression Courses.course_name is not in the current scope
Example 538
student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b'What is the degree summary name that has the most number of students enrolled?'
NL tokens: [b'what', b'is', b'the', b'degree', b'summary', b'name', b'that', b'has', b'the', b'most', b'number', b'of', b'students', b'enrolled', b'?']
NL tokens (original): [b'What', b'is', b'the', b'degree', b'summary', b'name', b'that', b'has', b'the', b'most', b'number', b'of', b'students', b'enrolled', b'?']
['[CLS]', 'what', 'is', 'the', 'degree', 'summary', 'name', 'that', 'has', 'the', 'most', 'number', 'of', 'students', 'enrolled', '?', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b'SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from Degree_Programs join Student_Enrolment on Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id group by Degree_Programs.degree_summary_name select Degree_Programs.degree_summary_name order by count (*) desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Student_Enrolment_Courses ON Degree_Programs.degree_program_id = Student_Enrolment_Courses.course_id GROUP BY Degree_Programs.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1' (-1.153) (length=21)
[WRONG] [extra] Pred 1:	b'SELECT Degree_Programs.degree_summary_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id JOIN Degree_Programs ON Student_Enrolment_Courses.student_enrolment_id = Degree_Programs.degree_program_id GROUP BY Degree_Programs.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1' (-2.390) (length=27)
[WRONG] [extra] Pred 2:	b'SELECT Degree_Programs.degree_summary_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id JOIN Degree_Programs ON Student_Enrolment_Courses.course_id = Degree_Programs.degree_program_id GROUP BY Degree_Programs.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1' (-2.505) (length=27)
[WRONG] [extra] Pred 3:	b'SELECT Degree_Programs.degree_summary_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id JOIN Degree_Programs ON Student_Enrolment_Courses.student_course_id = Degree_Programs.degree_program_id GROUP BY Degree_Programs.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1' (-3.158) (length=27)
[WRONG] [extra] Pred 4:	b'SELECT Degree_Programs.degree_summary_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id JOIN Degree_Programs ON Courses.course_name = Degree_Programs.degree_program_id GROUP BY Degree_Programs.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1' (-3.404) (length=27)
[WRONG] [extra] Pred 5:	b'SELECT Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Student_Enrolment_Courses ON Degree_Programs.degree_program_id = Student_Enrolment_Courses.course_id GROUP BY Student_Enrolment_Courses.student_enrolment_id ORDER BY COUNT(*) DESC LIMIT 1' (-3.672) (length=21)
[WRONG] [extra] Pred 6:	b'SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id WHERE Student_Enrolment_Courses.student_enrolment_id = (SELECT Student_Enrolment_Courses.student_enrolment_id FROM Student_Enrolment_Courses GROUP BY Student_Enrolment_Courses.student_enrolment_id ORDER BY COUNT(*) DESC LIMIT 1)' (-8.095) (length=30)
Error Case 170

Example 539
student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b'Find the program which most number of students are enrolled in. List both the id and the summary.'
NL tokens: [b'find', b'the', b'program', b'which', b'most', b'number', b'of', b'students', b'are', b'enrolled', b'in', b'.', b'list', b'both', b'the', b'id', b'and', b'the', b'summary', b'.']
NL tokens (original): [b'Find', b'the', b'program', b'which', b'most', b'number', b'of', b'students', b'are', b'enrolled', b'in', b'.', b'List', b'both', b'the', b'id', b'and', b'the', b'summary', b'.']
['[CLS]', 'find', 'the', 'program', 'which', 'most', 'number', 'of', 'students', 'are', 'enrolled', 'in', '.', 'list', 'both', 'the', 'id', 'and', 'the', 'summary', '.', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b'SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from Degree_Programs join Student_Enrolment on Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id group by Degree_Programs.degree_program_id select Degree_Programs.degree_program_id , Degree_Programs.degree_summary_name order by count (*) desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT Student_Enrolment_Courses.student_course_id, Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Student_Enrolment_Courses.course_id ORDER BY COUNT(*) DESC LIMIT 1' (-0.144) (length=23)
[WRONG] [extra] Pred 1:	b'SELECT Courses.course_name, Student_Enrolment_Courses.student_enrolment_id FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Student_Enrolment_Courses.course_id ORDER BY COUNT(*) DESC LIMIT 1' (-0.520) (length=23)
[WRONG] [extra] Pred 2:	b'SELECT Student_Enrolment_Courses.course_id, Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Student_Enrolment_Courses.course_id ORDER BY COUNT(*) DESC LIMIT 1' (-0.706) (length=23)
[WRONG] [extra] Pred 3:	b'SELECT Student_Enrolment_Courses.student_course_id, Courses.course_name FROM Student_Enrolment_Courses JOIN Courses ON Student_Enrolment_Courses.course_id = Courses.course_id GROUP BY Student_Enrolment_Courses.course_id ORDER BY COUNT(*) DESC LIMIT 1' (-0.721) (length=23)
[WRONG] [extra] Pred 4:	b'SELECT Courses.course_name, Student_Enrolment_Courses.course_id FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Student_Enrolment_Courses.course_id ORDER BY COUNT(*) DESC LIMIT 1' (-0.929) (length=23)
[WRONG] [extra] Pred 5:	b'SELECT Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.student_enrolment_id FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Student_Enrolment_Courses.course_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.104) (length=23)
[WRONG] [extra] Pred 6:	b'SELECT Student_Enrolment_Courses.student_course_id, Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Student_Enrolment_Courses.student_course_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.156) (length=23)
[WRONG] [extra] Pred 7:	b'SELECT Student_Enrolment_Courses.course_id, Courses.course_name FROM Student_Enrolment_Courses JOIN Courses ON Student_Enrolment_Courses.course_id = Courses.course_id GROUP BY Student_Enrolment_Courses.course_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.173) (length=23)
[WRONG] [extra] Pred 8:	b'SELECT Courses.course_name, Student_Enrolment_Courses.student_enrolment_id FROM Student_Enrolment_Courses JOIN Courses ON Student_Enrolment_Courses.course_id = Courses.course_id GROUP BY Student_Enrolment_Courses.course_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.215) (length=23)
[WRONG] [extra] Pred 9:	b'SELECT Student_Enrolment_Courses.student_course_id, Courses.other_details FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Student_Enrolment_Courses.course_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.359) (length=23)
[WRONG] [extra] Pred 10:	b'SELECT Courses.course_name, Student_Enrolment_Courses.student_enrolment_id FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Student_Enrolment_Courses.student_course_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.480) (length=23)
[WRONG] [extra] Pred 11:	b'SELECT Student_Enrolment_Courses.student_course_id, Student_Enrolment_Courses.student_enrolment_id FROM Student_Enrolment_Courses JOIN Courses ON Student_Enrolment_Courses.course_id = Courses.course_id GROUP BY Student_Enrolment_Courses.course_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.503) (length=23)
[WRONG] [extra] Pred 12:	b'SELECT Courses.course_name, Student_Enrolment_Courses.course_id FROM Student_Enrolment_Courses JOIN Courses ON Student_Enrolment_Courses.course_id = Courses.course_id GROUP BY Student_Enrolment_Courses.course_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.530) (length=23)
[WRONG] [extra] Pred 13:	b'SELECT Courses.course_name, Student_Enrolment_Courses.student_course_id FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Student_Enrolment_Courses.course_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.674) (length=23)
[WRONG] [extra] Pred 14:	b'SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Student_Enrolment_Courses.course_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.685) (length=23)
[WRONG] [extra] Pred 15:	b'SELECT Student_Enrolment_Courses.student_course_id, Courses.course_description FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Student_Enrolment_Courses.course_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.824) (length=23)
Error Case 171

Example 541
student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b'Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.'
NL tokens: [b'which', b'student', b'has', b'enrolled', b'for', b'the', b'most', b'times', b'in', b'any', b'program', b'?', b'list', b'the', b'id', b',', b'first', b'name', b',', b'middle', b'name', b',', b'last', b'name', b',', b'the', b'number', b'of', b'enrollment', b'##s', b'and', b'student', b'id', b'.']
NL tokens (original): [b'Which', b'student', b'has', b'enrolled', b'for', b'the', b'most', b'times', b'in', b'any', b'program', b'?', b'List', b'the', b'id', b',', b'first', b'name', b',', b'middle', b'name', b',', b'last', b'name', b',', b'the', b'number', b'of', b'enrollment', b'##s', b'and', b'student', b'id', b'.']
['[CLS]', 'which', 'student', 'has', 'enrolled', 'for', 'the', 'most', 'times', 'in', 'any', 'program', '?', 'list', 'the', 'id', ',', 'first', 'name', ',', 'middle', 'name', ',', 'last', 'name', ',', 'the', 'number', 'of', 'enrollment', '##s', 'and', 'student', 'id', '.', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b'SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from Students join Student_Enrolment on Students.student_id = Student_Enrolment.student_id group by Students.student_id select Students.student_id , Students.first_name , Students.middle_name , Students.last_name , count (*) , Students.student_id order by count (*) desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT Students.first_name, Students.last_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-0.007) (length=28)
[WRONG] [extra] Pred 1:	b'SELECT Student_Enrolment.student_id, Students.first_name, Students.last_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-0.529) (length=30)
[WRONG] [extra] Pred 2:	b'SELECT Student_Enrolment.student_id, Students.first_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.399) (length=28)
[WRONG] [extra] Pred 3:	b'SELECT Students.first_name, Students.last_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id UNION SELECT Student_Enrolment.student_id, Students.first_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.503) (length=48)
[WRONG] [extra] Pred 4:	b'SELECT Students.first_name, Students.last_name, COUNT(*), Student_Enrolment.student_id FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.680) (length=30)
[WRONG] [extra] Pred 5:	b'SELECT Students.first_name, COUNT(*), Student_Enrolment.student_id FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.696) (length=28)
[WRONG] [extra] Pred 6:	b'SELECT Student_Enrolment.student_id, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.751) (length=28)
[WRONG] [extra] Pred 7:	b'SELECT Students.first_name, Students.middle_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.997) (length=28)
[WRONG] [extra] Pred 8:	b'SELECT Student_Enrolment.student_id, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.076) (length=26)
[WRONG] [extra] Pred 9:	b'SELECT Student_Enrolment.student_id, Students.middle_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.123) (length=28)
[WRONG] [extra] Pred 10:	b'SELECT Student_Enrolment.student_id, Students.first_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.155) (length=25)
[WRONG] [extra] Pred 11:	b'SELECT Students.first_name, Students.last_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id UNION SELECT Student_Enrolment.student_id, Students.first_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id' (-2.256) (length=40)
[WRONG] [extra] Pred 12:	b'SELECT Students.first_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.397) (length=26)
[WRONG] [extra] Pred 13:	b'SELECT Students.first_name, Students.last_name, COUNT(*) + Student_Enrolment.student_id FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.534) (length=30)
[WRONG] [extra] Pred 14:	b'SELECT Students.first_name, Students.last_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) ASC LIMIT 1' (-2.670) (length=28)
[WRONG] [extra] Pred 15:	b'SELECT Students.first_name, Students.last_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) LIMIT 1' (-2.671) (length=27)
Error Case 172

Example 542
student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b'What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?'
NL tokens: [b'what', b'is', b'the', b'first', b',', b'middle', b',', b'and', b'last', b'name', b',', b'along', b'with', b'the', b'id', b'and', b'number', b'of', b'enrollment', b'##s', b',', b'for', b'the', b'student', b'who', b'enrolled', b'the', b'most', b'in', b'any', b'program', b'?']
NL tokens (original): [b'What', b'is', b'the', b'first', b',', b'middle', b',', b'and', b'last', b'name', b',', b'along', b'with', b'the', b'id', b'and', b'number', b'of', b'enrollment', b'##s', b',', b'for', b'the', b'student', b'who', b'enrolled', b'the', b'most', b'in', b'any', b'program', b'?']
['[CLS]', 'what', 'is', 'the', 'first', ',', 'middle', ',', 'and', 'last', 'name', ',', 'along', 'with', 'the', 'id', 'and', 'number', 'of', 'enrollment', '##s', ',', 'for', 'the', 'student', 'who', 'enrolled', 'the', 'most', 'in', 'any', 'program', '?', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b'SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from Students join Student_Enrolment on Students.student_id = Student_Enrolment.student_id group by Students.student_id select Students.student_id , Students.first_name , Students.middle_name , Students.last_name , count (*) , Students.student_id order by count (*) desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT Students.first_name, Students.middle_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-0.145) (length=28)
[WRONG] [extra] Pred 1:	b'SELECT Students.first_name, Students.middle_name, Students.last_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-0.204) (length=30)
[WRONG] [extra] Pred 2:	b'SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.213) (length=25)
[WRONG] [extra] Pred 3:	b'SELECT Students.first_name, Students.middle_name, Student_Enrolment.student_enrolment_id FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.567) (length=25)
 52%|█████▏    | 68/130 [08:28<11:16, 10.92s/it][WRONG] [extra] Pred 4:	b'SELECT Students.first_name, Students.middle_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id UNION SELECT Students.first_name, Students.middle_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.774) (length=48)
[WRONG] [extra] Pred 5:	b'SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id UNION SELECT Students.first_name, Students.middle_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.832) (length=45)
[WRONG] [extra] Pred 6:	b'SELECT Students.first_name, Students.last_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.957) (length=28)
[WRONG] [extra] Pred 7:	b'SELECT Students.first_name, Students.middle_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id UNION SELECT Students.first_name, Students.last_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.100) (length=48)
[WRONG] [extra] Pred 8:	b'SELECT Students.first_name, COUNT(*), Student_Enrolment.student_id FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.199) (length=28)
[WRONG] [extra] Pred 9:	b'SELECT Students.first_name, Students.middle_name, Student_Enrolment.student_id FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.222) (length=25)
[WRONG] [extra] Pred 10:	b'SELECT Students.first_name, Students.middle_name, Students.last_name + COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.268) (length=30)
[WRONG] [extra] Pred 11:	b'SELECT Students.first_name, Students.middle_name, COUNT(*), Student_Enrolment.student_id FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.384) (length=30)
[WRONG] [extra] Pred 12:	b'SELECT Students.first_name, Students.middle_name, Students.last_name, COUNT(*), Student_Enrolment.student_id FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.577) (length=32)
[WRONG] [extra] Pred 13:	b'SELECT Students.first_name, Students.middle_name, Students.last_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) ASC LIMIT 1' (-2.645) (length=30)
[WRONG] [extra] Pred 14:	b'SELECT Students.first_name, Students.middle_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) ASC LIMIT 1' (-2.791) (length=28)
[WRONG] [extra] Pred 15:	b'SELECT Students.first_name, COUNT(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.904) (length=26)
Error Case 173

ERROR: Join condition does not match with table: ['Addresses', {'join': 'Student_Enrolment', 'on': {'eq': ['Students.student_id', 'Student_Enrolment.student_id']}}]
ERROR: table "Students" in field expression Students.student_id is not in the current scope
ERROR: table "Students" in field expression Students.student_id is not in the current scope
ERROR: table "Students" in field expression Students.student_id is not in the current scope
ERROR: Join condition does not match with table: ['Addresses', {'join': 'Student_Enrolment', 'on': {'eq': ['Students.student_id', 'Student_Enrolment.student_id']}}, {'join': 'Degree_Programs', 'on': {'eq': ['Student_Enrolment.degree_program_id', 'Degree_Programs.degree_program_id']}}]
ERROR: Join condition does not match with table: ['Addresses', {'join': 'Student_Enrolment', 'on': {'eq': ['Students.student_id', 'Student_Enrolment.student_id']}}]
ERROR: Join condition does not match with table: ['Addresses', {'join': 'Student_Enrolment', 'on': {'eq': ['Students.student_id', 'Student_Enrolment.student_id']}}]
ERROR: Join condition does not match with table: ['Addresses', {'join': 'Student_Enrolment', 'on': {'eq': ['Students.student_id', 'Student_Enrolment.student_id']}}]
ERROR: Join condition does not match with table: ['Addresses', {'join': 'Student_Enrolment', 'on': {'eq': ['Students.student_id', 'Student_Enrolment.student_id']}}]
ERROR: table "Students" in field expression Students.last_name is not in the current scope
ERROR: table "Students" in field expression Students.last_name is not in the current scope
ERROR: table "Students" in field expression Students.last_name is not in the current scope
Example 549
student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b'Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.'
NL tokens: [b'find', b'the', b'last', b'name', b'of', b'the', b'students', b'who', b'currently', b'live', b'in', b'the', b'state', b'of', b'north', b'carolina', b'but', b'have', b'not', b'registered', b'in', b'any', b'degree', b'program', b'.']
NL tokens (original): [b'Find', b'the', b'last', b'name', b'of', b'the', b'students', b'who', b'currently', b'live', b'in', b'the', b'state', b'of', b'North', b'Carolina', b'but', b'have', b'not', b'registered', b'in', b'any', b'degree', b'program', b'.']
['[CLS]', 'find', 'the', 'last', 'name', 'of', 'the', 'students', 'who', 'currently', 'live', 'in', 'the', 'state', 'of', 'north', 'carolina', 'but', 'have', 'not', 'registered', 'in', 'any', 'degree', 'program', '.', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b"SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"
Target TF-P tokens: from Students join Addresses on Students.current_address_id = Addresses.address_id where Addresses.state_province_county = "North VALUE VALUE VALUE" select Students.last_name except from Students join Student_Enrolment on Students.student_id = Student_Enrolment.student_id select distinct Students.last_name

[WRONG] [extra] Pred 0:	b'SELECT Students.last_name FROM Students WHERE Students.current_address_id IN (SELECT Addresses.address_id FROM Addresses WHERE Addresses.state_province_county = "North Carolina")' (-2.351) (length=21)
[WRONG] [extra] Pred 1:	b'SELECT Students.last_name FROM Students WHERE Students.student_id IN (SELECT Addresses.address_id FROM Addresses WHERE Addresses.state_province_county = "North Carolina")' (-2.737) (length=21)
[WRONG] [extra] Pred 2:	b'SELECT Students.last_name FROM Students WHERE Students.permanent_address_id IN (SELECT Addresses.address_id FROM Addresses WHERE Addresses.state_province_county = "North Carolina")' (-2.858) (length=21)
[WRONG] [extra] Pred 3:	b'SELECT Students.last_name FROM Students WHERE Students.current_address_id = (SELECT Addresses.address_id FROM Addresses WHERE Addresses.state_province_county = "North Carolina")' (-2.931) (length=21)
Error Case 174

ERROR: table "Students" in field expression Students.student_id is not in the current scope
ERROR: table "Students" in field expression Students.student_id is not in the current scope
ERROR: table "Students" in field expression Students.last_name is not in the current scope
ERROR: table "Students" in field expression Students.last_name is not in the current scope
ERROR: table "Students" in field expression Students.last_name is not in the current scope
Parsing error: from Students where Students.student_id = in (from Addresses where Addresses.state_province_county = "North Carolina" select Students.student_id) select Students.last_name
ERROR: table "Students" in field expression Students.last_name is not in the current scope
Parsing error: from Students where Students.student_id = in (from Student_Enrolment where Student_Enrolment.degree_program_id = "North Carolina" select Student_Enrolment.student_id) select Students.last_name
ERROR: table "Students" in field expression Students.last_name is not in the current scope
ERROR: table "Students" in field expression Students.last_name is not in the current scope
Parsing error: from Students where Students.student_id = "North Carolina" select Students.last_name except from Addresses where Addresses.state_province_county = "registered in (*)"
Parsing error: from Students where Students.student_id = "North Carolina" select Students.last_name except from Students where Students.student_id not in (from Addresses where Degree_Programs on Degree_Programs select Addresses.address_id) select Students.last_name
ERROR: table "Students" in field expression Students.student_id is not in the current scope
Example 550
student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b'What are the last name of the students who live in North Carolina but have not registered in any degree programs?'
NL tokens: [b'what', b'are', b'the', b'last', b'name', b'of', b'the', b'students', b'who', b'live', b'in', b'north', b'carolina', b'but', b'have', b'not', b'registered', b'in', b'any', b'degree', b'programs', b'?']
NL tokens (original): [b'What', b'are', b'the', b'last', b'name', b'of', b'the', b'students', b'who', b'live', b'in', b'North', b'Carolina', b'but', b'have', b'not', b'registered', b'in', b'any', b'degree', b'programs', b'?']
['[CLS]', 'what', 'are', 'the', 'last', 'name', 'of', 'the', 'students', 'who', 'live', 'in', 'north', 'carolina', 'but', 'have', 'not', 'registered', 'in', 'any', 'degree', 'programs', '?', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b"SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"
Target TF-P tokens: from Students join Addresses on Students.current_address_id = Addresses.address_id where Addresses.state_province_county = "North VALUE VALUE VALUE" select Students.last_name except from Students join Student_Enrolment on Students.student_id = Student_Enrolment.student_id select distinct Students.last_name

 53%|█████▎    | 69/130 [08:38<10:51, 10.68s/it][WRONG] [extra] Pred 0:	b'SELECT Students.last_name FROM Students WHERE Students.student_id = "North Carolina" EXCEPT SELECT Students.last_name FROM Students WHERE Students.student_id NOT IN (SELECT Student_Enrolment.student_id FROM Student_Enrolment)' (-1.911) (length=27)
[WRONG] [extra] Pred 1:	b'SELECT Students.last_name FROM Students WHERE Students.student_id = "North Carolina" EXCEPT SELECT Students.last_name FROM Students WHERE Students.student_id NOT IN (SELECT Addresses.address_id FROM Addresses WHERE Addresses.state_province_county = "North Carolina")' (-2.166) (length=34)
[WRONG] [extra] Pred 2:	b'SELECT Students.last_name FROM Students WHERE Students.student_id IN (SELECT Student_Enrolment.student_id FROM Student_Enrolment WHERE Student_Enrolment.degree_program_id = "North Carolina")' (-2.363) (length=21)
Error Case 175

ERROR: table "Students" in field expression Students.date_first_registered is not in the current scope
Parsing error: from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id group by Student_Enrolment.student_id select Students.first_name , Students.middle_name , Students.last_name order by (Students.date_first_registered-Student_Enrolment_Courses limit 1
Parsing error: from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id select Students.first_name , Students.middle_name , Students.last_name select Students.first_name , Students.middle_name , Students.last_name order by Students.date_first_registered limit 1
Parsing error: from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id select Students.first_name , Students.middle_name , Students.last_name select Students.first_name , Students.middle_name , Students.last_name
Example 557
student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b'Who is the earliest graduate of the school? List the first name, middle name and last name.'
NL tokens: [b'who', b'is', b'the', b'earliest', b'graduate', b'of', b'the', b'school', b'?', b'list', b'the', b'first', b'name', b',', b'middle', b'name', b'and', b'last', b'name', b'.']
NL tokens (original): [b'Who', b'is', b'the', b'earliest', b'graduate', b'of', b'the', b'school', b'?', b'List', b'the', b'first', b'name', b',', b'middle', b'name', b'and', b'last', b'name', b'.']
['[CLS]', 'who', 'is', 'the', 'earliest', 'graduate', 'of', 'the', 'school', '?', 'list', 'the', 'first', 'name', ',', 'middle', 'name', 'and', 'last', 'name', '.', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b'SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1'
Target TF-P tokens: from Students select Students.first_name , Students.middle_name , Students.last_name order by Students.date_left asc limit 1

[WRONG] [medium] Pred 0:	b'SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id ORDER BY Students.date_first_registered LIMIT 1' (-0.001) (length=19)
[WRONG] [medium] Pred 1:	b'SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id ORDER BY Students.date_left LIMIT 1' (-1.565) (length=19)
[WRONG] [medium] Pred 2:	b'SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id WHERE Students.date_first_registered = (SELECT MIN(Students.date_first_registered) FROM Students)' (-1.949) (length=27)
[WRONG] [medium] Pred 3:	b'SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_enrolment_id = Students.student_id ORDER BY Students.date_first_registered LIMIT 1' (-2.227) (length=19)
[WRONG] [medium] Pred 4:	b'SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id WHERE Students.date_first_registered = (SELECT MIN(Students.date_left) FROM Students)' (-2.431) (length=27)
[WRONG] [medium] Pred 5:	b'SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY (Students.date_first_registered - Students.last_name) LIMIT 1' (-2.501) (length=25)
[WRONG] [medium] Pred 6:	b'SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY MAX(Students.date_first_registered) LIMIT 1' (-2.773) (length=24)
[WRONG] [medium] Pred 7:	b'SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY (Students.date_first_registered - "Student_Enrolment") LIMIT 1' (-2.846) (length=25)
[WRONG] [medium] Pred 8:	b'SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id ORDER BY Students.date_first_registered LIMIT 1' (-2.966) (length=21)
[WRONG] [medium] Pred 9:	b'SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.semester_id = Students.student_id ORDER BY Students.date_first_registered LIMIT 1' (-3.034) (length=19)
[WRONG] [medium] Pred 10:	b'SELECT DISTINCT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id ORDER BY Students.date_first_registered LIMIT 1' (-3.257) (length=20)
[WRONG] [medium] Pred 11:	b'SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id ORDER BY Students.date_first_registered ASC LIMIT 1' (-3.262) (length=20)
Error Case 176

Example 559
student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b'Whose permanent address is different from his or her current address? List his or her first name.'
NL tokens: [b'whose', b'permanent', b'address', b'is', b'different', b'from', b'his', b'or', b'her', b'current', b'address', b'?', b'list', b'his', b'or', b'her', b'first', b'name', b'.']
NL tokens (original): [b'Whose', b'permanent', b'address', b'is', b'different', b'from', b'his', b'or', b'her', b'current', b'address', b'?', b'List', b'his', b'or', b'her', b'first', b'name', b'.']
 54%|█████▍    | 70/130 [08:45<09:22,  9.37s/it]['[CLS]', 'whose', 'permanent', 'address', 'is', 'different', 'from', 'his', 'or', 'her', 'current', 'address', '?', 'list', 'his', 'or', 'her', 'first', 'name', '.', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b'SELECT first_name FROM Students WHERE current_address_id != permanent_address_id'
Target TF-P tokens: from Students where Students.current_address_id != Students.permanent_address_id select Students.first_name

[WRONG] [easy] Pred 0:	b'SELECT DISTINCT Students.first_name FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id' (-0.000) (length=12)
[WRONG] [easy] Pred 1:	b'SELECT Students.first_name FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id GROUP BY Students.permanent_address_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.869) (length=21)
[WRONG] [easy] Pred 2:	b'SELECT DISTINCT Students.first_name FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id WHERE Addresses.line_1 = "no"' (-2.943) (length=18)
[WRONG] [easy] Pred 3:	b'SELECT DISTINCT Students.first_name FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id WHERE Addresses.line_1 = "VALUE"' (-3.232) (length=18)
[WRONG] [easy] Pred 4:	b'SELECT DISTINCT Students.first_name FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id WHERE Addresses.line_2 = "no"' (-3.342) (length=18)
[WRONG] [easy] Pred 5:	b'SELECT DISTINCT Students.first_name FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id' (-3.356) (length=12)
[WRONG] [easy] Pred 6:	b'SELECT DISTINCT Students.first_name FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id WHERE Addresses.city = "no"' (-3.380) (length=18)
[WRONG] [easy] Pred 7:	b'SELECT Students.first_name, COUNT(*) FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id GROUP BY Students.permanent_address_id' (-3.465) (length=18)
[WRONG] [easy] Pred 8:	b'SELECT DISTINCT Students.first_name FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id WHERE Addresses.other_address_details = "no"' (-3.471) (length=18)
[WRONG] [easy] Pred 9:	b'SELECT DISTINCT Students.first_name FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id WHERE Addresses.line_3 = "no"' (-3.489) (length=18)
[WRONG] [easy] Pred 10:	b'SELECT DISTINCT Students.first_name FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id WHERE Addresses.city = "VALUE"' (-3.527) (length=18)
[WRONG] [easy] Pred 11:	b'SELECT DISTINCT Students.first_name FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id WHERE Addresses.line_2 = "VALUE"' (-3.580) (length=18)
[WRONG] [easy] Pred 12:	b'SELECT Students.first_name FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id GROUP BY Students.permanent_address_id ORDER BY DISTINCT Students.first_name' (-3.615) (length=16)
[WRONG] [easy] Pred 13:	b'SELECT DISTINCT Students.first_name FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id WHERE Students.current_address_id = 0' (-3.736) (length=16)
[WRONG] [easy] Pred 14:	b'SELECT Students.first_name FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id GROUP BY Students.permanent_address_id ORDER BY COUNT(*) DESC' (-3.740) (length=19)
[WRONG] [easy] Pred 15:	b'SELECT DISTINCT Students.first_name FROM Students' (-3.827) (length=6)
Error Case 177

Example 560
student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b'What is the first name of the student whose permanent address is different from his or her current one?'
NL tokens: [b'what', b'is', b'the', b'first', b'name', b'of', b'the', b'student', b'whose', b'permanent', b'address', b'is', b'different', b'from', b'his', b'or', b'her', b'current', b'one', b'?']
NL tokens (original): [b'What', b'is', b'the', b'first', b'name', b'of', b'the', b'student', b'whose', b'permanent', b'address', b'is', b'different', b'from', b'his', b'or', b'her', b'current', b'one', b'?']
['[CLS]', 'what', 'is', 'the', 'first', 'name', 'of', 'the', 'student', 'whose', 'permanent', 'address', 'is', 'different', 'from', 'his', 'or', 'her', 'current', 'one', '?', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b'SELECT first_name FROM Students WHERE current_address_id != permanent_address_id'
Target TF-P tokens: from Students where Students.current_address_id != Students.permanent_address_id select Students.first_name

[WRONG] [easy] Pred 0:	b'SELECT Students.first_name FROM Students WHERE Students.permanent_address_id IN (SELECT Students.permanent_address_id FROM Students WHERE Students.current_address_id = 0)' (-0.263) (length=18)
[WRONG] [easy] Pred 1:	b'SELECT Students.first_name FROM Students WHERE Students.permanent_address_id IN (SELECT Students.permanent_address_id FROM Students WHERE Students.current_address_id = 1)' (-0.508) (length=20)
[WRONG] [easy] Pred 2:	b'SELECT Students.first_name FROM Students WHERE Students.permanent_address_id IN (SELECT Students.permanent_address_id FROM Students WHERE Students.current_address_id = "current")' (-0.542) (length=20)
[WRONG] [easy] Pred 3:	b'SELECT Students.first_name FROM Students WHERE Students.permanent_address_id IN (SELECT Students.permanent_address_id FROM Students WHERE Students.current_address_id = 1)' (-0.550) (length=18)
[WRONG] [easy] Pred 4:	b'SELECT Students.first_name FROM Students WHERE Students.current_address_id IN (SELECT Students.permanent_address_id FROM Students WHERE Students.current_address_id = 0)' (-0.555) (length=18)
[WRONG] [easy] Pred 5:	b'SELECT Students.first_name FROM Students WHERE Students.current_address_id IN (SELECT Students.permanent_address_id FROM Students WHERE Students.current_address_id = 1)' (-0.804) (length=20)
[WRONG] [easy] Pred 6:	b'SELECT Students.first_name FROM Students WHERE Students.current_address_id IN (SELECT Students.permanent_address_id FROM Students WHERE Students.current_address_id = "current")' (-0.841) (length=20)
[WRONG] [easy] Pred 7:	b'SELECT Students.first_name FROM Students WHERE Students.permanent_address_id IN (SELECT Students.permanent_address_id FROM Students WHERE Students.current_address_id = 0)' (-0.853) (length=20)
[WRONG] [easy] Pred 8:	b'SELECT Students.first_name FROM Students WHERE Students.current_address_id IN (SELECT Students.permanent_address_id FROM Students WHERE Students.current_address_id = 1)' (-0.900) (length=18)
[WRONG] [easy] Pred 9:	b'SELECT Students.first_name FROM Students WHERE Students.permanent_address_id IN (SELECT Students.current_address_id FROM Students WHERE Students.current_address_id = 0)' (-0.971) (length=18)
[WRONG] [easy] Pred 10:	b'SELECT Students.first_name FROM Students WHERE Students.permanent_address_id IN (SELECT Students.permanent_address_id FROM Students)' (-1.055) (length=14)
[WRONG] [easy] Pred 11:	b'SELECT Students.first_name FROM Students WHERE Students.current_address_id IN (SELECT Students.permanent_address_id FROM Students WHERE Students.current_address_id = 0)' (-1.124) (length=20)
[WRONG] [easy] Pred 12:	b'SELECT Students.first_name FROM Students WHERE Students.permanent_address_id IN (SELECT Students.permanent_address_id FROM Students GROUP BY Students.permanent_address_id)' (-1.201) (length=16)
[WRONG] [easy] Pred 13:	b'SELECT Students.first_name FROM Students WHERE Students.permanent_address_id IN (SELECT Students.current_address_id FROM Students WHERE Students.current_address_id = 1)' (-1.258) (length=18)
[WRONG] [easy] Pred 14:	b'SELECT Students.first_name FROM Students WHERE Students.permanent_address_id IN (SELECT Students.permanent_address_id FROM Students WHERE Students.current_address_id = 4)' (-1.275) (length=18)
[WRONG] [easy] Pred 15:	b'SELECT Students.first_name FROM Students WHERE Students.current_address_id IN (SELECT Students.permanent_address_id FROM Students)' (-1.377) (length=14)
Error Case 178

ERROR: table "Students" in field expression Students.current_address_id is not in the current scope
ERROR: table "Students" in field expression Students.current_address_id is not in the current scope
ERROR: table "Students" in field expression Students.current_address_id is not in the current scope
ERROR: table "Students" in field expression Students.current_address_id is not in the current scope
ERROR: table "Students" in field expression Students.current_address_id is not in the current scope
Example 561
student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b'Which address holds the most number of students currently? List the address id and all lines.'
NL tokens: [b'which', b'address', b'holds', b'the', b'most', b'number', b'of', b'students', b'currently', b'?', b'list', b'the', b'address', b'id', b'and', b'all', b'lines', b'.']
NL tokens (original): [b'Which', b'address', b'holds', b'the', b'most', b'number', b'of', b'students', b'currently', b'?', b'List', b'the', b'address', b'id', b'and', b'all', b'lines', b'.']
['[CLS]', 'which', 'address', 'holds', 'the', 'most', 'number', 'of', 'students', 'currently', '?', 'list', 'the', 'address', 'id', 'and', 'all', 'lines', '.', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b'SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from Addresses join Students on Addresses.address_id = Students.current_address_id group by Addresses.address_id select Addresses.address_id , Addresses.line_1 , Addresses.line_2 order by count (*) desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT Addresses.address_id, Addresses.line_1 FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id GROUP BY Addresses.address_id ORDER BY COUNT(*) DESC LIMIT 1' (-0.002) (length=23)
[WRONG] [extra] Pred 1:	b'SELECT Addresses.address_id, Addresses.line_1 FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id GROUP BY Students.current_address_id ORDER BY COUNT(*) DESC LIMIT 1' (-0.952) (length=23)
[WRONG] [extra] Pred 2:	b'SELECT Addresses.address_id, Addresses.line_2 FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id GROUP BY Addresses.address_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.773) (length=23)
[WRONG] [extra] Pred 3:	b'SELECT Addresses.address_id, Addresses.line_3 FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id GROUP BY Addresses.address_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.195) (length=23)
[WRONG] [extra] Pred 4:	b'SELECT Addresses.other_address_details, Addresses.line_1 FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id GROUP BY Students.current_address_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.338) (length=23)
[WRONG] [extra] Pred 5:	b'SELECT Addresses.address_id, Addresses.line_2 FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id GROUP BY Students.current_address_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.489) (length=23)
[WRONG] [extra] Pred 6:	b'SELECT Students.current_address_id, Addresses.line_1 FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id GROUP BY Students.current_address_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.602) (length=23)
[WRONG] [extra] Pred 7:	b'SELECT Addresses.other_address_details, Addresses.line_2 FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id GROUP BY Students.current_address_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.743) (length=23)
[WRONG] [extra] Pred 8:	b'SELECT Addresses.address_id, Addresses.line_1 FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id GROUP BY Addresses.address_id ORDER BY Students.current_address_id DESC LIMIT 1' (-2.752) (length=28)
[WRONG] [extra] Pred 9:	b'SELECT Addresses.address_id, Addresses.line_3 FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id GROUP BY Students.current_address_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.843) (length=23)
[WRONG] [extra] Pred 10:	b'SELECT COUNT(*), Addresses.line_1 FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id GROUP BY Addresses.address_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.854) (length=26)
Error Case 179

Parsing error: from Transcripts select Transcripts.transcript_date , (Transcripts select Transcripts.transcript_date order by Transcripts.transcript_date limit 1
Parsing error: from Transcripts select Transcripts.transcript_date , (Transcripts.transcript_id-Transcripts.other_details order by Transcripts.transcript_date limit 1
Parsing error: from Transcripts select Transcripts.transcript_date , (Transcripts order by Transcripts.transcript_date limit 1
Parsing error: from Transcripts select Transcripts.transcript_date , (*-Transcripts.other_details order by Transcripts.transcript_date limit 1
Example 566
 55%|█████▍    | 71/130 [08:54<09:04,  9.23s/it]student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b'What is the earliest date of a transcript release, and what details can you tell me?'
NL tokens: [b'what', b'is', b'the', b'earliest', b'date', b'of', b'a', b'transcript', b'release', b',', b'and', b'what', b'details', b'can', b'you', b'tell', b'me', b'?']
NL tokens (original): [b'What', b'is', b'the', b'earliest', b'date', b'of', b'a', b'transcript', b'release', b',', b'and', b'what', b'details', b'can', b'you', b'tell', b'me', b'?']
['[CLS]', 'what', 'is', 'the', 'earliest', 'date', 'of', 'a', 'transcript', 'release', ',', 'and', 'what', 'details', 'can', 'you', 'tell', 'me', '?', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b'SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1'
Target TF-P tokens: from Transcripts select Transcripts.transcript_date , Transcripts.other_details order by Transcripts.transcript_date asc limit 1

[WRONG] [medium] Pred 0:	b'SELECT Transcripts.transcript_date, (Transcripts.transcript_date - Transcripts.other_details) FROM Transcripts ORDER BY (Transcripts.transcript_date - Transcripts.other_details) LIMIT 1' (-0.162) (length=19)
[WRONG] [medium] Pred 1:	b'SELECT Transcripts.transcript_date, (Transcripts.transcript_date - Transcripts.other_details) FROM Transcripts ORDER BY Transcripts.transcript_date LIMIT 1' (-0.858) (length=15)
[WRONG] [medium] Pred 2:	b'SELECT Transcripts.transcript_date, (Transcripts.transcript_id - Transcripts.other_details) FROM Transcripts ORDER BY (Transcripts.transcript_date - Transcripts.other_details) LIMIT 1' (-0.906) (length=19)
[WRONG] [medium] Pred 3:	b'SELECT Transcripts.transcript_date, (Transcripts.transcript_date - Transcripts.other_details) FROM Transcripts ORDER BY (Transcripts.transcript_date - Transcripts.transcript_date) LIMIT 1' (-1.206) (length=19)
[CORRE] [medium] Pred 4:	b'SELECT Transcripts.transcript_date, Transcripts.other_details FROM Transcripts ORDER BY Transcripts.transcript_date LIMIT 1' (-1.494) (length=11)
Error Case 180

Example 571
student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b'How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.'
NL tokens: [b'how', b'many', b'times', b'at', b'most', b'can', b'a', b'course', b'enrollment', b'result', b'show', b'in', b'different', b'transcript', b'##s', b'?', b'also', b'show', b'the', b'course', b'enrollment', b'id', b'.']
NL tokens (original): [b'How', b'many', b'times', b'at', b'most', b'can', b'a', b'course', b'enrollment', b'result', b'show', b'in', b'different', b'transcript', b'##s', b'?', b'Also', b'show', b'the', b'course', b'enrollment', b'id', b'.']
['[CLS]', 'how', 'many', 'times', 'at', 'most', 'can', 'a', 'course', 'enrollment', 'result', 'show', 'in', 'different', 'transcript', '##s', '?', 'also', 'show', 'the', 'course', 'enrollment', 'id', '.', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b'SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from Transcript_Contents group by Transcript_Contents.student_course_id select count (*) , Transcript_Contents.student_course_id order by count (*) desc limit 1

[WRONG] [hard] Pred 0:	b'SELECT COUNT(*), Student_Enrolment_Courses.student_enrolment_id FROM Transcripts JOIN Student_Enrolment_Courses ON Transcripts.transcript_id = Student_Enrolment_Courses.student_enrolment_id GROUP BY Student_Enrolment_Courses.student_enrolment_id ORDER BY COUNT(*) DESC LIMIT 1' (-0.267) (length=26)
[WRONG] [hard] Pred 1:	b'SELECT COUNT(*), Transcripts.transcript_id FROM Transcripts JOIN Student_Enrolment_Courses ON Transcripts.transcript_id = Student_Enrolment_Courses.student_enrolment_id GROUP BY Transcripts.transcript_id ORDER BY COUNT(*) DESC LIMIT 1' (-0.299) (length=26)
[WRONG] [hard] Pred 2:	b'SELECT COUNT(*), Student_Enrolment_Courses.student_enrolment_id FROM Transcripts JOIN Student_Enrolment_Courses ON Transcripts.transcript_id = Student_Enrolment_Courses.student_enrolment_id GROUP BY Transcripts.transcript_id ORDER BY COUNT(*) DESC LIMIT 1' (-0.442) (length=26)
[WRONG] [hard] Pred 3:	b'SELECT COUNT(*), Transcripts.transcript_id FROM Transcripts JOIN Student_Enrolment_Courses ON Transcripts.transcript_id = Student_Enrolment_Courses.student_enrolment_id GROUP BY Student_Enrolment_Courses.student_enrolment_id ORDER BY COUNT(*) DESC LIMIT 1' (-0.570) (length=26)
[WRONG] [hard] Pred 4:	b'SELECT COUNT(*), Transcripts.other_details FROM Transcripts JOIN Student_Enrolment_Courses ON Transcripts.transcript_id = Student_Enrolment_Courses.student_enrolment_id GROUP BY Transcripts.transcript_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.371) (length=26)
[WRONG] [hard] Pred 5:	b'SELECT COUNT(*), Student_Enrolment_Courses.student_enrolment_id FROM Transcripts JOIN Student_Enrolment_Courses ON Transcripts.transcript_id = Student_Enrolment_Courses.student_enrolment_id GROUP BY Student_Enrolment_Courses.student_course_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.428) (length=26)
[WRONG] [hard] Pred 6:	b'SELECT COUNT(*), Transcripts.other_details FROM Transcripts JOIN Student_Enrolment_Courses ON Transcripts.transcript_id = Student_Enrolment_Courses.student_enrolment_id GROUP BY Student_Enrolment_Courses.student_enrolment_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.471) (length=26)
[WRONG] [hard] Pred 7:	b'SELECT COUNT(*), Transcripts.transcript_id FROM Transcripts JOIN Student_Enrolment_Courses ON Transcripts.transcript_id = Student_Enrolment_Courses.student_enrolment_id GROUP BY Student_Enrolment_Courses.student_course_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.521) (length=26)
[WRONG] [hard] Pred 8:	b'SELECT COUNT(*), Student_Enrolment_Courses.student_enrolment_id FROM Transcripts JOIN Student_Enrolment_Courses ON Transcripts.transcript_id = Student_Enrolment_Courses.student_enrolment_id GROUP BY Student_Enrolment_Courses.student_enrolment_id ORDER BY COUNT(*) ASC LIMIT 1' (-1.604) (length=26)
[WRONG] [hard] Pred 9:	b'SELECT COUNT(*), Transcripts.transcript_id FROM Transcripts JOIN Student_Enrolment_Courses ON Transcripts.transcript_id = Student_Enrolment_Courses.student_enrolment_id GROUP BY Transcripts.transcript_id ORDER BY COUNT(*) ASC LIMIT 1' (-1.745) (length=26)
[WRONG] [hard] Pred 10:	b'SELECT COUNT(*), Student_Enrolment_Courses.student_enrolment_id FROM Transcripts JOIN Student_Enrolment_Courses ON Transcripts.transcript_id = Student_Enrolment_Courses.student_enrolment_id GROUP BY Transcripts.transcript_id ORDER BY COUNT(*) ASC LIMIT 1' (-1.905) (length=26)
[WRONG] [hard] Pred 11:	b'SELECT Transcripts.transcript_id, COUNT(*) FROM Transcripts GROUP BY "Transcripts" ORDER BY COUNT(*) DESC LIMIT 1' (-1.907) (length=20)
[WRONG] [hard] Pred 12:	b'SELECT COUNT(*), Student_Enrolment_Courses.student_enrolment_id FROM Student_Enrolment_Courses GROUP BY Student_Enrolment_Courses.student_enrolment_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.951) (length=20)
[WRONG] [hard] Pred 13:	b'SELECT COUNT(*), Transcripts.transcript_id FROM Transcripts JOIN Student_Enrolment_Courses ON Transcripts.transcript_id = Student_Enrolment_Courses.student_enrolment_id GROUP BY Transcripts.transcript_id ORDER BY Student_Enrolment_Courses.student_enrolment_id DESC LIMIT 1' (-1.964) (length=23)
[WRONG] [hard] Pred 14:	b'SELECT COUNT(*), Student_Enrolment_Courses.student_enrolment_id FROM Transcripts JOIN Student_Enrolment_Courses ON Transcripts.transcript_id = Student_Enrolment_Courses.student_enrolment_id GROUP BY Transcripts.transcript_id ORDER BY Student_Enrolment_Courses.student_enrolment_id DESC LIMIT 1' (-1.996) (length=23)
[WRONG] [hard] Pred 15:	b'SELECT Student_Enrolment_Courses.student_enrolment_id, COUNT(*) FROM Student_Enrolment_Courses GROUP BY Student_Enrolment_Courses.student_enrolment_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.122) (length=20)
Error Case 181

ERROR: Join condition does not match with table: ['Transcripts', {'join': 'Student_Enrolment_Courses', 'on': {'eq': ['Student_Enrolment_Courses.student_course_id', 'Student_Enrolment_Courses.course_id']}}]
ERROR: Join condition does not match with table: ['Transcripts', {'join': 'Student_Enrolment_Courses', 'on': {'eq': ['Student_Enrolment_Courses.student_course_id', 'Student_Enrolment_Courses.course_id']}}]
ERROR: Join condition does not match with table: ['Transcripts', {'join': 'Student_Enrolment_Courses', 'on': {'eq': ['Student_Enrolment_Courses.student_course_id', 'Student_Enrolment_Courses.course_id']}}]
ERROR: Join condition does not match with table: ['Transcripts', {'join': 'Student_Enrolment_Courses', 'on': {'eq': ['Student_Enrolment_Courses.student_course_id', 'Student_Enrolment_Courses.course_id']}}]
ERROR: Join condition does not match with table: ['Transcripts', {'join': 'Student_Enrolment_Courses', 'on': {'eq': ['Student_Enrolment_Courses.student_course_id', 'Student_Enrolment_Courses.course_id']}}]
Example 572
student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b"What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?"
NL tokens: [b'what', b'is', b'the', b'maximum', b'number', b'of', b'times', b'that', b'a', b'course', b'shows', b'up', b'in', b'different', b'transcript', b'##s', b'and', b'what', b'is', b'that', b'course', b"'", b's', b'enrollment', b'id', b'?']
NL tokens (original): [b'What', b'is', b'the', b'maximum', b'number', b'of', b'times', b'that', b'a', b'course', b'shows', b'up', b'in', b'different', b'transcript', b'##s', b'and', b'what', b'is', b'that', b'course', b"'", b's', b'enrollment', b'id', b'?']
['[CLS]', 'what', 'is', 'the', 'maximum', 'number', 'of', 'times', 'that', 'a', 'course', 'shows', 'up', 'in', 'different', 'transcript', '##s', 'and', 'what', 'is', 'that', 'course', "'", 's', 'enrollment', 'id', '?', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b'SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from Transcript_Contents group by Transcript_Contents.student_course_id select count (*) , Transcript_Contents.student_course_id order by count (*) desc limit 1

[WRONG] [hard] Pred 0:	b'SELECT Student_Enrolment_Courses.course_id, COUNT(*) FROM Student_Enrolment_Courses GROUP BY Student_Enrolment_Courses.course_id ORDER BY COUNT(*) DESC LIMIT 1' (-0.446) (length=20)
[WRONG] [hard] Pred 1:	b'SELECT Transcripts.transcript_id, COUNT(*) FROM Transcripts JOIN Student_Enrolment_Courses ON Transcripts.transcript_id = Student_Enrolment_Courses.course_id GROUP BY Student_Enrolment_Courses.course_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.473) (length=26)
[WRONG] [hard] Pred 2:	b'SELECT Transcripts.transcript_id, Student_Enrolment_Courses.student_enrolment_id FROM Transcripts JOIN Student_Enrolment_Courses ON Transcripts.transcript_id = Student_Enrolment_Courses.course_id GROUP BY Student_Enrolment_Courses.course_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.729) (length=23)
[WRONG] [hard] Pred 3:	b'SELECT Transcripts.transcript_id, COUNT(*) FROM Transcripts JOIN Student_Enrolment_Courses ON Transcripts.transcript_id = Student_Enrolment_Courses.course_id GROUP BY Transcripts.transcript_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.940) (length=26)
[WRONG] [hard] Pred 4:	b'SELECT Student_Enrolment_Courses.student_enrolment_id, COUNT(*) FROM Transcripts JOIN Student_Enrolment_Courses ON Transcripts.transcript_id = Student_Enrolment_Courses.course_id GROUP BY Student_Enrolment_Courses.course_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.101) (length=26)
[WRONG] [hard] Pred 5:	b'SELECT Student_Enrolment_Courses.course_id, COUNT(*) FROM Transcripts JOIN Student_Enrolment_Courses ON Transcripts.transcript_id = Student_Enrolment_Courses.course_id GROUP BY Student_Enrolment_Courses.course_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.191) (length=26)
[WRONG] [hard] Pred 6:	b'SELECT Student_Enrolment_Courses.student_enrolment_id, COUNT(*) FROM Student_Enrolment_Courses JOIN Courses ON Student_Enrolment_Courses.course_id = Courses.course_id GROUP BY Student_Enrolment_Courses.course_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.218) (length=26)
[WRONG] [hard] Pred 7:	b'SELECT Transcripts.transcript_id, Student_Enrolment_Courses.student_enrolment_id FROM Transcripts JOIN Student_Enrolment_Courses ON Transcripts.transcript_id = Student_Enrolment_Courses.course_id GROUP BY Transcripts.transcript_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.235) (length=23)
[WRONG] [hard] Pred 8:	b'SELECT Student_Enrolment_Courses.course_id, COUNT(*) FROM Student_Enrolment_Courses JOIN Courses ON Student_Enrolment_Courses.course_id = Courses.course_id GROUP BY Student_Enrolment_Courses.course_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.278) (length=26)
[WRONG] [hard] Pred 9:	b'SELECT Student_Enrolment_Courses.student_enrolment_id, COUNT(*) FROM Student_Enrolment_Courses GROUP BY Student_Enrolment_Courses.course_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.534) (length=20)
[WRONG] [hard] Pred 10:	b'SELECT Transcripts.transcript_id, Student_Enrolment_Courses.course_id FROM Transcripts JOIN Student_Enrolment_Courses ON Transcripts.transcript_id = Student_Enrolment_Courses.course_id GROUP BY Student_Enrolment_Courses.course_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.555) (length=23)
Error Case 182

Parsing error: from Transcripts join Transcript_Contents on Transcripts.transcript_id = Transcript_Contents.transcript_id group by Transcripts.transcript_id select Transcripts.transcript_date , order by count (*) asc limit 1
Example 573
student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b'Show the date of the transcript which shows the least number of results, also list the id.'
NL tokens: [b'show', b'the', b'date', b'of', b'the', b'transcript', b'which', b'shows', b'the', b'least', b'number', b'of', b'results', b',', b'also', b'list', b'the', b'id', b'.']
NL tokens (original): [b'Show', b'the', b'date', b'of', b'the', b'transcript', b'which', b'shows', b'the', b'least', b'number', b'of', b'results', b',', b'also', b'list', b'the', b'id', b'.']
['[CLS]', 'show', 'the', 'date', 'of', 'the', 'transcript', 'which', 'shows', 'the', 'least', 'number', 'of', 'results', ',', 'also', 'list', 'the', 'id', '.', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b'SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1'
Target TF-P tokens: from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id group by Transcript_Contents.transcript_id select Transcripts.transcript_date , Transcript_Contents.transcript_id order by count (*) asc limit 1

[WRONG] [extra] Pred 0:	b'SELECT Transcripts.transcript_date, COUNT(*) FROM Transcripts JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id GROUP BY Transcripts.transcript_id ORDER BY COUNT(*) ASC LIMIT 1' (-0.005) (length=26)
[WRONG] [extra] Pred 1:	b'SELECT Transcripts.transcript_date, Transcripts.transcript_id FROM Transcripts ORDER BY Transcripts.transcript_date ASC LIMIT 1' (-1.440) (length=12)
[CORRE] [extra] Pred 2:	b'SELECT Transcripts.transcript_date, Transcripts.transcript_id FROM Transcripts JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id GROUP BY Transcripts.transcript_id ORDER BY COUNT(*) ASC LIMIT 1' (-1.594) (length=23)
Error Case 183

ERROR: Join condition does not match with table: ['Semesters', {'join': 'Student_Enrolment_Courses', 'on': {'eq': ['Semesters.semester_id', 'Student_Enrolment.semester_id']}}]
Parsing error: from Semesters join Student_Enrolment on Semesters.semester_id = Student_Enrolment.semester_id join Students on Student_Enrolment.student_id = Students.student_id where Student_Enrolment_Courses on Student_Enrolment_Courses.student_course_id = Students.student_id where Students.middle_name = "Bachelor" select Semesters.semester_name intersect from Semesters join Student_Enrolment_Courses on Semesters.semester_id = Student_Enrolment.semester_id where Student_Enrolment_Courses.student_enrolment_id = 1 select Semesters.semester_name
ERROR: Join condition does not match with table: ['Semesters', {'join': 'Student_Enrolment_Courses', 'on': {'eq': ['Semesters.semester_id', 'Student_Enrolment.semester_id']}}]
Parsing error: from Semesters join Student_Enrolment on Semesters.semester_id = Student_Enrolment.semester_id join Students on Student_Enrolment.student_id = Students.student_id where Student_Enrolment_Courses on Student_Enrolment_Courses.student_course_id = Students.student_id where Students.middle_name = "Bachelor" select Semesters.semester_name intersect from Semesters join Student_Enrolment_Courses on Semesters.semester_id = Student_Enrolment.semester_id where Student_Enrolment_Courses.student_enrolment_id = 1 select Semesters.semester_name intersect from Semesters join Student_Enrolment_Courses on Semesters.semester_id = Student_Enrolment.semester_id where Student_Enrolment_Courses.student_enrolment_id = 1 select Semesters.semester_name
ERROR: Join condition does not match with table: ['Semesters', {'join': 'Student_Enrolment_Courses', 'on': {'eq': ['Semesters.semester_id', 'Student_Enrolment.semester_id']}}]
ERROR: Join condition does not match with table: ['Semesters', {'join': 'Student_Enrolment_Courses', 'on': {'eq': ['Semesters.semester_id', 'Student_Enrolment.semester_id']}}]
Parsing error: from Semesters join Student_Enrolment on Semesters.semester_id = Student_Enrolment.semester_id join Students on Student_Enrolment.student_id = Students.student_id where Student_Enrolment_Courses on Student_Enrolment_Courses.student_course_id = Students.student_id where Students.middle_name = "Bachelor" select Semesters.semester_name intersect from Semesters join Student_Enrolment on Semesters.semester_id = Student_Enrolment.semester_id where Student_Enrolment_Courses.student_enrolment_id = 1 select Semesters.semester_name
Parsing error: from Semesters join Student_Enrolment on Semesters.semester_id = Student_Enrolment.semester_id join Students on Student_Enrolment.student_id = Students.student_id where Student_Enrolment_Courses on Student_Enrolment_Courses.student_enrolment_id = Semesters.semester_id where Students.middle_name = "Bachelor" select Semesters.semester_name intersect from Semesters join Student_Enrolment_Courses on Semesters.semester_id = Student_Enrolment.semester_id where Student_Enrolment_Courses.student_enrolment_id = 1 select Semesters.semester_name
ERROR: Join condition does not match with table: ['Semesters', {'join': 'Student_Enrolment_Courses', 'on': {'eq': ['Semesters.semester_id', 'Student_Enrolment.semester_id']}}]
ERROR: table "Student_Enrolment_Courses" in field expression Student_Enrolment_Courses.student_enrolment_id is not in the current scope
ERROR: Join condition does not match with table: ['Semesters', {'join': 'Student_Enrolment_Courses', 'on': {'eq': ['Semesters.semester_id', 'Student_Enrolment.semester_id']}}]
Parsing error: from Semesters join Student_Enrolment on Semesters.semester_id = Student_Enrolment.semester_id join Students on Student_Enrolment.student_id = Students.student_id where Student_Enrolment_Courses on Student_Enrolment_Courses.student_enrolment_id = Semesters.semester_id where Student_Enrolment.student_id = 1 select Semesters.semester_name intersect from Semesters join Student_Enrolment_Courses on Semesters.semester_id = Student_Enrolment.semester_id where Student_Enrolment_Courses.student_enrolment_id = 1 select Semesters.semester_name
Parsing error: from Semesters join Student_Enrolment on Semesters.semester_id = Student_Enrolment.semester_id join Students on Student_Enrolment.student_id = Students.student_id where Student_Enrolment_Courses on Student_Enrolment_Courses.student_enrolment_id = Semesters.semester_id where Students.middle_name = "Bachelor" select Semesters.semester_name intersect from Semesters join Student_Enrolment on Semesters.semester_id = Student_Enrolment.semester_id where Student_Enrolment_Courses.student_enrolment_id = 1 select Semesters.semester_name
ERROR: Join condition does not match with table: ['Semesters', {'join': 'Student_Enrolment_Courses', 'on': {'eq': ['Semesters.semester_id', 'Student_Enrolment.semester_id']}}]
ERROR: Join condition does not match with table: ['Semesters', {'join': 'Student_Enrolment_Courses', 'on': {'eq': ['Semesters.semester_id', 'Student_Enrolment.semester_id']}}]
ERROR: Join condition does not match with table: ['Semesters', {'join': 'Student_Enrolment_Courses', 'on': {'eq': ['Semesters.semester_id', 'Student_Enrolment.semester_id']}}]
Example 575
student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b'Find the semester when both Master students and Bachelor students got enrolled in.'
NL tokens: [b'find', b'the', b'semester', b'when', b'both', b'master', b'students', b'and', b'bachelor', b'students', b'got', b'enrolled', b'in', b'.']
NL tokens (original): [b'Find', b'the', b'semester', b'when', b'both', b'Master', b'students', b'and', b'Bachelor', b'students', b'got', b'enrolled', b'in', b'.']
 55%|█████▌    | 72/130 [09:04<09:10,  9.49s/it]['[CLS]', 'find', 'the', 'semester', 'when', 'both', 'master', 'students', 'and', 'bachelor', 'students', 'got', 'enrolled', 'in', '.', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused49]', 'bachelor', '[unused49]', 'master', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b"SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'"
Target TF-P tokens: from Degree_Programs join Student_Enrolment on Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id where Degree_Programs.degree_summary_name = "Master" select distinct Student_Enrolment.semester_id intersect from Degree_Programs join Student_Enrolment on Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id where Degree_Programs.degree_summary_name = "Bachelor" select distinct Student_Enrolment.semester_id

[WRONG] extra Pred 0:	No valid output! (0.000)
Error Case 184

ERROR: table "Student_Enrolment_Courses" in field expression Student_Enrolment_Courses.student_enrolment_id is not in the current scope
ERROR: table "Student_Enrolment_Courses" in field expression Student_Enrolment_Courses.student_enrolment_id is not in the current scope
ERROR: table "Student_Enrolment_Courses" in field expression Student_Enrolment_Courses.student_enrolment_id is not in the current scope
Parsing error: from Student_Enrolment_Courses where Student_Enrolment_Courses.course_id in (from Student_Enrolment select Student_Enrolment.semester_id = VALUE select Student_Enrolment.semester_id
ERROR: table "Student_Enrolment_Courses" in field expression Student_Enrolment_Courses.course_id is not in the current scope
ERROR: table "Student_Enrolment" in field expression Student_Enrolment.semester_id is not in the current scope
Parsing error: from Student_Enrolment select Student_Enrolment.semester_id intersect from Student_Enrolment select Student_Enrolment.semester_id = enrolled select Student_Enrolment.semester_id
ERROR: table "Student_Enrolment_Courses" in field expression Student_Enrolment_Courses.course_id is not in the current scope
ERROR: table "Student_Enrolment" in field expression Student_Enrolment.semester_id is not in the current scope
ERROR: table "Student_Enrolment_Courses" in field expression Student_Enrolment_Courses.course_id is not in the current scope
Example 576
student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b'What is the id of the semester that had both Masters and Bachelors students enrolled?'
NL tokens: [b'what', b'is', b'the', b'id', b'of', b'the', b'semester', b'that', b'had', b'both', b'masters', b'and', b'bachelor', b'##s', b'students', b'enrolled', b'?']
NL tokens (original): [b'What', b'is', b'the', b'id', b'of', b'the', b'semester', b'that', b'had', b'both', b'Masters', b'and', b'Bachelor', b'##s', b'students', b'enrolled', b'?']
['[CLS]', 'what', 'is', 'the', 'id', 'of', 'the', 'semester', 'that', 'had', 'both', 'masters', 'and', 'bachelor', '##s', 'students', 'enrolled', '?', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b"SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'"
Target TF-P tokens: from Degree_Programs join Student_Enrolment on Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id where Degree_Programs.degree_summary_name = "VALUE" select distinct Student_Enrolment.semester_id intersect from Degree_Programs join Student_Enrolment on Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id where Degree_Programs.degree_summary_name = "Bachelor" select distinct Student_Enrolment.semester_id

[WRONG] [extra] Pred 0:	b'SELECT Student_Enrolment.semester_id FROM Student_Enrolment WHERE Student_Enrolment.student_id = "VALUE" INTERSECT SELECT Student_Enrolment.semester_id FROM Student_Enrolment' (-1.505) (length=16)
[WRONG] [extra] Pred 1:	b'SELECT Student_Enrolment.semester_id FROM Student_Enrolment INTERSECT SELECT Student_Enrolment.semester_id FROM Student_Enrolment' (-1.631) (length=10)
[WRONG] [extra] Pred 2:	b'SELECT Semesters.semester_id FROM Semesters JOIN Student_Enrolment_Courses ON Semesters.semester_id = Student_Enrolment_Courses.course_id WHERE Student_Enrolment_Courses.student_enrolment_id = "VALUE" INTERSECT SELECT Student_Enrolment.semester_id FROM Student_Enrolment' (-1.926) (length=20)
[WRONG] [extra] Pred 3:	b'SELECT Student_Enrolment.semester_id FROM Student_Enrolment INTERSECT SELECT Student_Enrolment.semester_id FROM Student_Enrolment INTERSECT SELECT Student_Enrolment.semester_id FROM Student_Enrolment' (-2.030) (length=15)
[WRONG] [extra] Pred 4:	b'SELECT Student_Enrolment.semester_id FROM Student_Enrolment INTERSECT SELECT Student_Enrolment.semester_id FROM Student_Enrolment WHERE Student_Enrolment.student_id = "VALUE"' (-2.464) (length=14)
[WRONG] [extra] Pred 5:	b'SELECT Semesters.semester_id FROM Semesters JOIN Student_Enrolment_Courses ON Semesters.semester_id = Student_Enrolment_Courses.course_id WHERE Student_Enrolment_Courses.student_enrolment_id = "VALUE" INTERSECT SELECT Student_Enrolment.semester_id FROM Student_Enrolment WHERE Student_Enrolment.student_id = "VALUE"' (-2.852) (length=26)
Error Case 185

Parsing error: from Addresses join Students select distinct Addresses.address_id = Students.current_address_id select distinct Addresses.other_address_details
Example 578
student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b'What are the different addresses that have students living there?'
NL tokens: [b'what', b'are', b'the', b'different', b'addresses', b'that', b'have', b'students', b'living', b'there', b'?']
NL tokens (original): [b'What', b'are', b'the', b'different', b'addresses', b'that', b'have', b'students', b'living', b'there', b'?']
['[CLS]', 'what', 'are', 'the', 'different', 'addresses', 'that', 'have', 'students', 'living', 'there', '?', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b'SELECT count(DISTINCT current_address_id) FROM Students'
Target TF-P tokens: from Students select count (distinct Students.current_address_id)

[WRONG] [easy] Pred 0:	b'SELECT DISTINCT Addresses.other_address_details FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id' (-0.189) (length=12)
[WRONG] [easy] Pred 1:	b'SELECT DISTINCT Addresses.other_address_details FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id' (-0.282) (length=12)
[WRONG] [easy] Pred 2:	b'SELECT DISTINCT Addresses.line_1 FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id' (-3.469) (length=12)
[WRONG] [easy] Pred 3:	b'SELECT DISTINCT Addresses.line_1 FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id' (-3.776) (length=12)
[WRONG] [easy] Pred 4:	b'SELECT DISTINCT Students.ssn FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id' (-3.984) (length=12)
[WRONG] [easy] Pred 5:	b'SELECT DISTINCT Students.permanent_address_id FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id' (-4.044) (length=12)
[WRONG] [easy] Pred 6:	b'SELECT DISTINCT Students.permanent_address_id FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id' (-4.141) (length=12)
[WRONG] [easy] Pred 7:	b'SELECT DISTINCT Students.ssn FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id' (-4.156) (length=12)
[WRONG] [easy] Pred 8:	b'SELECT DISTINCT Addresses.address_id FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id' (-4.174) (length=12)
[WRONG] [easy] Pred 9:	b'SELECT COUNT(*) FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id' (-4.442) (length=14)
[WRONG] [easy] Pred 10:	b'SELECT DISTINCT Addresses.city FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id' (-4.624) (length=12)
[WRONG] [easy] Pred 11:	b'SELECT DISTINCT Students.email_address FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id' (-4.818) (length=12)
[WRONG] [easy] Pred 12:	b'SELECT DISTINCT Addresses.city FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id' (-4.876) (length=12)
[WRONG] [easy] Pred 13:	b'SELECT DISTINCT Students.other_student_details FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id' (-4.882) (length=12)
[WRONG] [easy] Pred 14:	b'SELECT DISTINCT Addresses.address_id FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id' (-4.957) (length=12)
Error Case 186

Parsing error: from Sections where Students on h "select Sections.section_name"
Parsing error: from Sections where Semesters on h "select Sections.section_name"
Parsing error: from Sections where Transcripts on h "select Sections.section_name"
Example 581
student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b'Describe the section h.'
NL tokens: [b'describe', b'the', b'section', b'h', b'.']
NL tokens (original): [b'Describe', b'the', b'section', b'h', b'.']
['[CLS]', 'describe', 'the', 'section', 'h', '.', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b"SELECT section_description FROM Sections WHERE section_name  =  'h'"
Target TF-P tokens: from Sections where Sections.section_name = "h" select Sections.section_description

[WRONG] [easy] Pred 0:	b'SELECT Sections.section_name FROM Sections WHERE Sections.section_description = "h"' (-0.399) (length=11)
[WRONG] [easy] Pred 1:	b'SELECT Sections.section_name FROM Sections WHERE Sections.section_name = "h"' (-0.486) (length=11)
[WRONG] [easy] Pred 2:	b'SELECT Sections.section_name FROM Sections WHERE Sections.other_details = "h"' (-0.666) (length=11)
[WRONG] [easy] Pred 3:	b'SELECT Sections.section_name FROM Sections WHERE Sections.section_description LIKE "h : %"' (-0.879) (length=13)
[WRONG] [easy] Pred 4:	b'SELECT Sections.section_name FROM Sections WHERE Sections.section_description LIKE "h %"' (-1.043) (length=12)
[WRONG] [easy] Pred 5:	b'SELECT Sections.section_name FROM Sections WHERE Sections.course_id = "h"' (-1.120) (length=11)
[WRONG] [easy] Pred 6:	b'SELECT Sections.section_name FROM Sections WHERE Sections.section_id = "h"' (-1.124) (length=11)
[WRONG] [easy] Pred 7:	b'SELECT Sections.section_name FROM Sections WHERE Sections.section_id = "h"' (-1.453) (length=9)
[WRONG] [easy] Pred 8:	b'SELECT Sections.section_name FROM Sections WHERE Sections.section_name LIKE "h : %"' (-1.462) (length=13)
[WRONG] [easy] Pred 9:	b'SELECT Sections.section_name FROM Sections WHERE Sections.section_description LIKE "% h %"' (-1.696) (length=13)
[WRONG] [easy] Pred 10:	b'SELECT Sections.section_name FROM Sections WHERE Sections.other_details LIKE "h %"' (-1.781) (length=12)
[WRONG] [easy] Pred 11:	b'SELECT Sections.section_name FROM Sections WHERE Sections.section_name LIKE "% h %"' (-1.839) (length=13)
[WRONG] [easy] Pred 12:	b'SELECT Sections.section_name FROM Sections WHERE Sections.course_id = "h"' (-2.242) (length=9)
Error Case 187

leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (<unknown>, line 1)
leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (<unknown>, line 1)
leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (<unknown>, line 1)
leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (<unknown>, line 1)
leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (<unknown>, line 1)
Parsing error: from Addresses join Students on Addresses.address_id = Students.permanent_address_id where Addresses.country = "Haiti"70 "or Students.cell_mobile_number = 09700166582 select Students.first_name"
Parsing error: from Addresses join Students on Addresses.address_id = Students.permanent_address_id join.on Students.permanent_address_id = Addresses.address_id where Addresses.country = "Haiti" or Students.cell_mobile_number = 09700166582 select Students.first_name
Parsing error: from Addresses join Students on Addresses.address_id = Students.permanent_address_id where Addresses.country = "Haiti"70 "or Students.cell_mobile_number = 09700166582" select Students.first_name
leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (<unknown>, line 1)
leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (<unknown>, line 1)
leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (<unknown>, line 1)
leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (<unknown>, line 1)
leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (<unknown>, line 1)
leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (<unknown>, line 1)
leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (<unknown>, line 1)
Example 583
student_transcripts_tracking
 +-- Addresses (addresses)
 |   +-- address_id (address id) [PRIMARY] [FOREIGN]
 |   +-- line_1 (line 1)
 |   +-- line_2 (line 2)
 |   +-- line_3 (line 3)
 |   +-- city (city)
 |   +-- zip_postcode (zip postcode)
 |   +-- state_province_county (state province county)
 |   +-- country (country)
 |   +-- other_address_details (other address details)
 +-- Courses (courses)
 |   +-- course_id (course id) [PRIMARY] [FOREIGN]
 |   +-- course_name (course name)
 |   +-- course_description (course description)
 |   +-- other_details (other details)
 +-- Departments (departments)
 |   +-- department_id (department id) [PRIMARY] [FOREIGN]
 |   +-- department_name (department name)
 |   +-- department_description (department description)
 |   +-- other_details (other details)
 +-- Degree_Programs (degree programs)
 |   +-- degree_program_id (degree program id) [PRIMARY] [FOREIGN]
 |   +-- department_id (department id) [FOREIGN]
 |   +-- degree_summary_name (degree summary name)
 |   +-- degree_summary_description (degree summary description)
 |   +-- other_details (other details)
 +-- Sections (sections)
 |   +-- section_id (section id) [PRIMARY]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- section_name (section name)
 |   +-- section_description (section description)
 |   +-- other_details (other details)
 +-- Semesters (semesters)
 |   +-- semester_id (semester id) [PRIMARY] [FOREIGN]
 |   +-- semester_name (semester name)
 |   +-- semester_description (semester description)
 |   +-- other_details (other details)
 +-- Students (students)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- current_address_id (current address id) [FOREIGN]
 |   +-- permanent_address_id (permanent address id) [FOREIGN]
 |   +-- first_name (first name)
 |   +-- middle_name (middle name)
 |   +-- last_name (last name)
 |   +-- cell_mobile_number (cell mobile number)
 |   +-- email_address (email address)
 |   +-- ssn (ssn)
 |   +-- date_first_registered (date first registered)
 |   +-- date_left (date left)
 |   +-- other_student_details (other student details)
 +-- Student_Enrolment (student enrolment)
 |   +-- student_enrolment_id (student enrolment id) [PRIMARY] [FOREIGN]
 |   +-- degree_program_id (degree program id) [FOREIGN]
 |   +-- semester_id (semester id) [FOREIGN]
 |   +-- student_id (student id) [FOREIGN]
 |   +-- other_details (other details)
 +-- Student_Enrolment_Courses (student enrolment courses)
 |   +-- student_course_id (student course id) [PRIMARY] [FOREIGN]
 |   +-- course_id (course id) [FOREIGN]
 |   +-- student_enrolment_id (student enrolment id) [FOREIGN]
 +-- Transcripts (transcripts)
 |   +-- transcript_id (transcript id) [PRIMARY] [FOREIGN]
 |   +-- transcript_date (transcript date)
 |   +-- other_details (other details)
 +-- Transcript_Contents (transcript contents)
     +-- student_course_id (student course id) [FOREIGN]
     +-- transcript_id (transcript id) [FOREIGN]
NL: b'Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .'
NL tokens: [b'find', b'the', b'first', b'name', b'of', b'the', b'students', b'who', b'permanently', b'live', b'in', b'the', b'country', b'haiti', b'or', b'have', b'the', b'cell', b'phone', b'number', b'09', b'##70', b'##01', b'##66', b'##58', b'##2', b'.']
NL tokens (original): [b'Find', b'the', b'first', b'name', b'of', b'the', b'students', b'who', b'permanently', b'live', b'in', b'the', b'country', b'Haiti', b'or', b'have', b'the', b'cell', b'phone', b'number', b'09', b'##70', b'##01', b'##66', b'##58', b'##2', b'.']
 56%|█████▌    | 73/130 [09:12<08:41,  9.15s/it] 57%|█████▋    | 74/130 [09:15<06:44,  7.22s/it] 58%|█████▊    | 75/130 [09:17<05:09,  5.63s/it]['[CLS]', 'find', 'the', 'first', 'name', 'of', 'the', 'students', 'who', 'permanently', 'live', 'in', 'the', 'country', 'haiti', 'or', 'have', 'the', 'cell', 'phone', 'number', '09', '##70', '##01', '##66', '##58', '##2', '.', '[SEP]', '*', '[unused50]', 'addresses', '[unused51]', 'address', 'id', '[unused51]', 'line', '1', '[unused51]', 'line', '2', '[unused51]', 'line', '3', '[unused51]', 'city', '[unused51]', 'zip', 'post', '##code', '[unused51]', 'state', 'province', 'county', '[unused51]', 'country', '[unused49]', 'haiti', '[unused51]', 'other', 'address', 'details', '[unused50]', 'courses', '[unused51]', 'course', 'id', '[unused51]', 'course', 'name', '[unused51]', 'course', 'description', '[unused51]', 'other', 'details', '[unused50]', 'departments', '[unused51]', 'department', 'id', '[unused51]', 'department', 'name', '[unused51]', 'department', 'description', '[unused51]', 'other', 'details', '[unused50]', 'degree', 'programs', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'department', 'id', '[unused51]', 'degree', 'summary', 'name', '[unused51]', 'degree', 'summary', 'description', '[unused51]', 'other', 'details', '[unused50]', 'sections', '[unused51]', 'section', 'id', '[unused51]', 'course', 'id', '[unused51]', 'section', 'name', '[unused51]', 'section', 'description', '[unused51]', 'other', 'details', '[unused50]', 'semester', '##s', '[unused51]', 'semester', 'id', '[unused51]', 'semester', 'name', '[unused51]', 'semester', 'description', '[unused51]', 'other', 'details', '[unused50]', 'students', '[unused51]', 'student', 'id', '[unused51]', 'current', 'address', 'id', '[unused51]', 'permanent', 'address', 'id', '[unused51]', 'first', 'name', '[unused51]', 'middle', 'name', '[unused51]', 'last', 'name', '[unused51]', 'cell', 'mobile', 'number', '[unused51]', 'email', 'address', '[unused51]', 'ss', '##n', '[unused51]', 'date', 'first', 'registered', '[unused51]', 'date', 'left', '[unused51]', 'other', 'student', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused51]', 'degree', 'program', 'id', '[unused51]', 'semester', 'id', '[unused51]', 'student', 'id', '[unused51]', 'other', 'details', '[unused50]', 'student', 'en', '##rol', '##ment', 'courses', '[unused51]', 'student', 'course', 'id', '[unused51]', 'course', 'id', '[unused51]', 'student', 'en', '##rol', '##ment', 'id', '[unused50]', 'transcript', '##s', '[unused51]', 'transcript', 'id', '[unused51]', 'transcript', 'date', '[unused51]', 'other', 'details', '[unused50]', 'transcript', 'contents', '[unused51]', 'student', 'course', 'id', '[unused51]', 'transcript', 'id', '[SEP]']
Target 0: b"select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'"
Target TF-P tokens: from Students join Addresses on Students.permanent_address_id = Addresses.address_id where Addresses.country = "Haiti" or Students.cell_mobile_number = "09700166582" select Students.first_name

[WRONG] [hard] Pred 0:	b'SELECT Students.first_name FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id WHERE Addresses.country = "Haiti" OR Addresses.country = 09700166582' (-1.925) (length=28)
Error Case 188

leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (<unknown>, line 1)
leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (<unknown>, line 1)
leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (<unknown>, line 1)
leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (<unknown>, line 1)
leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (<unknown>, line 1)
leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (<unknown>, line 1)
leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (<unknown>, line 1)
leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (<unknown>, line 1)
leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers (<unknown>, line 1)
Parsing error: from Addresses join Students on Addresses.address_id = Students.permanent_address_id where Addresses.country = "Haiti"70 "or Students.cell_mobile_number =" 09700166582 "select Students.first_name"
Parsing error: from Addresses join Students on Addresses.address_id = Students.permanent_address_id where Addresses.country = "Haiti"70 "or Students.cell_mobile_number = 09700166582" select Students.first_name
Parsing error: from TV_Channel join TV_series on TV_Channel.id = TV_series.Channel limit TV_series on TV_Channel.id = TV_series.Channel where TV_Channel.series_name = "Sky Radio" select TV_Channel.Package_Option
Example 602
tvshow
 +-- TV_Channel (tv channel)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- series_name (series name)
 |   +-- Country (country)
 |   +-- Language (language)
 |   +-- Content (content)
 |   +-- Pixel_aspect_ratio_PAR (pixel aspect ratio par)
 |   +-- Hight_definition_TV (hight definition tv)
 |   +-- Pay_per_view_PPV (pay per view ppv)
 |   +-- Package_Option (package option)
 +-- TV_series (tv series)
 |   +-- id (id) [PRIMARY]
 |   +-- Episode (episode)
 |   +-- Air_Date (air date)
 |   +-- Rating (rating)
 |   +-- Share (share)
 |   +-- 18_49_Rating_Share (18 49 rating share)
 |   +-- Viewers_m (viewers m)
 |   +-- Weekly_Rank (weekly rank)
 |   +-- Channel (channel) [FOREIGN]
 +-- Cartoon (cartoon)
     +-- id (id) [PRIMARY]
     +-- Title (title)
     +-- Directed_by (directed by)
     +-- Written_by (written by)
     +-- Original_air_date (original air date)
     +-- Production_code (production code)
     +-- Channel (channel) [FOREIGN]
NL: b'What are the Package Options of the TV Channels whose series names are Sky Radio?'
NL tokens: [b'what', b'are', b'the', b'package', b'options', b'of', b'the', b'tv', b'channels', b'whose', b'series', b'names', b'are', b'sky', b'radio', b'?']
NL tokens (original): [b'What', b'are', b'the', b'Package', b'Options', b'of', b'the', b'TV', b'Channels', b'whose', b'series', b'names', b'are', b'Sky', b'Radio', b'?']
['[CLS]', 'what', 'are', 'the', 'package', 'options', 'of', 'the', 'tv', 'channels', 'whose', 'series', 'names', 'are', 'sky', 'radio', '?', '[SEP]', '*', '[unused50]', 'tv', 'channel', '[unused51]', 'id', '[unused51]', 'series', 'name', '[unused49]', 'sky', 'radio', '[unused51]', 'country', '[unused51]', 'language', '[unused51]', 'content', '[unused51]', 'pixel', 'aspect', 'ratio', 'par', '[unused51]', 'high', '##t', 'definition', 'tv', '[unused51]', 'pay', 'per', 'view', 'pp', '##v', '[unused51]', 'package', 'option', '[unused49]', 'option', '[unused50]', 'tv', 'series', '[unused51]', 'id', '[unused51]', 'episode', '[unused51]', 'air', 'date', '[unused51]', 'rating', '[unused51]', 'share', '[unused51]', '18', '49', 'rating', 'share', '[unused51]', 'viewers', 'm', '[unused51]', 'weekly', 'rank', '[unused51]', 'channel', '[unused50]', 'cartoon', '[unused51]', 'id', '[unused51]', 'title', '[unused51]', 'directed', 'by', '[unused51]', 'written', 'by', '[unused51]', 'original', 'air', 'date', '[unused51]', 'production', 'code', '[unused51]', 'channel', '[SEP]']
Target 0: b'SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio"'
Target TF-P tokens: from TV_Channel where TV_Channel.series_name = "Sky Radio" select TV_Channel.Package_Option

[WRONG] [easy] Pred 0:	b'SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = "Sky Radio"' (-0.000) (length=18)
 58%|█████▊    | 76/130 [09:19<04:10,  4.64s/it][WRONG] [easy] Pred 1:	b'SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = "Sky Radio" INTERSECT SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = "Sky Radio"' (-2.231) (length=36)
[WRONG] [easy] Pred 2:	b'SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = "Sky Radio"' (-2.459) (length=24)
[WRONG] [easy] Pred 3:	b'SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = "Sky Radio" AND TV_series.Channel = "Sky Radio"' (-2.828) (length=25)
[WRONG] [easy] Pred 4:	b'SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = "Sky Radio" AND TV_series.Channel = "TV"' (-3.151) (length=24)
[WRONG] [easy] Pred 5:	b'SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = "Sky Radio" OR TV_Channel.series_name = "Sky Radio"' (-3.195) (length=25)
[WRONG] [easy] Pred 6:	b'SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"' (-3.756) (length=18)
[CORRE] [easy] Pred 7:	b'SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.series_name = "Sky Radio"' (-3.911) (length=12)
Error Case 189

ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_Channel.series_name']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_Channel.series_name']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_Channel.Content']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_series.id', 'TV_series.id']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_Channel.series_name']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_Channel.Content']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_series.id', 'TV_series.Air_Date']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_series.id', 'TV_series.18_49_Rating_Share']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_Channel.Content']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}]
Example 609
tvshow
 +-- TV_Channel (tv channel)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- series_name (series name)
 |   +-- Country (country)
 |   +-- Language (language)
 |   +-- Content (content)
 |   +-- Pixel_aspect_ratio_PAR (pixel aspect ratio par)
 |   +-- Hight_definition_TV (hight definition tv)
 |   +-- Pay_per_view_PPV (pay per view ppv)
 |   +-- Package_Option (package option)
 +-- TV_series (tv series)
 |   +-- id (id) [PRIMARY]
 |   +-- Episode (episode)
 |   +-- Air_Date (air date)
 |   +-- Rating (rating)
 |   +-- Share (share)
 |   +-- 18_49_Rating_Share (18 49 rating share)
 |   +-- Viewers_m (viewers m)
 |   +-- Weekly_Rank (weekly rank)
 |   +-- Channel (channel) [FOREIGN]
 +-- Cartoon (cartoon)
     +-- id (id) [PRIMARY]
     +-- Title (title)
     +-- Directed_by (directed by)
     +-- Written_by (written by)
     +-- Original_air_date (original air date)
     +-- Production_code (production code)
     +-- Channel (channel) [FOREIGN]
NL: b'What is the TV Channel that shows the cartoon "The Rise of the Blue Beetle!"? List the TV Channel\'s series name.'
NL tokens: [b'what', b'is', b'the', b'tv', b'channel', b'that', b'shows', b'the', b'cartoon', b'"', b'the', b'rise', b'of', b'the', b'blue', b'beetle', b'!', b'"', b'?', b'list', b'the', b'tv', b'channel', b"'", b's', b'series', b'name', b'.']
NL tokens (original): [b'What', b'is', b'the', b'TV', b'Channel', b'that', b'shows', b'the', b'cartoon', b'"', b'The', b'Rise', b'of', b'the', b'Blue', b'Beetle', b'!', b'"', b'?', b'List', b'the', b'TV', b'Channel', b"'", b's', b'series', b'name', b'.']
['[CLS]', 'what', 'is', 'the', 'tv', 'channel', 'that', 'shows', 'the', 'cartoon', '"', 'the', 'rise', 'of', 'the', 'blue', 'beetle', '!', '"', '?', 'list', 'the', 'tv', 'channel', "'", 's', 'series', 'name', '.', '[SEP]', '*', '[unused50]', 'tv', 'channel', '[unused51]', 'id', '[unused51]', 'series', 'name', '[unused51]', 'country', '[unused51]', 'language', '[unused51]', 'content', '[unused51]', 'pixel', 'aspect', 'ratio', 'par', '[unused51]', 'high', '##t', 'definition', 'tv', '[unused51]', 'pay', 'per', 'view', 'pp', '##v', '[unused51]', 'package', 'option', '[unused50]', 'tv', 'series', '[unused51]', 'id', '[unused51]', 'episode', '[unused51]', 'air', 'date', '[unused51]', 'rating', '[unused51]', 'share', '[unused51]', '18', '49', 'rating', 'share', '[unused51]', 'viewers', 'm', '[unused51]', 'weekly', 'rank', '[unused51]', 'channel', '[unused50]', 'cartoon', '[unused51]', 'id', '[unused51]', 'title', '[unused49]', 'the', 'rise', 'of', 'the', 'blue', 'beetle', '!', '[unused51]', 'directed', 'by', '[unused51]', 'written', 'by', '[unused51]', 'original', 'air', 'date', '[unused51]', 'production', 'code', '[unused51]', 'channel', '[SEP]']
Target 0: b'SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!"'
Target TF-P tokens: from TV_Channel join Cartoon on TV_Channel.id = Cartoon.Channel where Cartoon.Title = "the Rise of the Blue Beetle !" select TV_Channel.series_name

[WRONG] [medium] Pred 0:	b'SELECT TV_series.Channel FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.Title = "the Rise of the Blue Beetle !"' (-0.284) (length=29)
[WRONG] [medium] Pred 1:	b'SELECT TV_series.Channel FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.Title = "Rise of the Blue Beetle !"' (-0.716) (length=28)
[WRONG] [medium] Pred 2:	b'SELECT TV_series.Channel FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.id WHERE Cartoon.Title = "the Rise of the Blue Beetle !"' (-0.946) (length=29)
Error Case 190

ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.id']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.18_49_Rating_Share']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_Channel.Content']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.Share']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.18_49_Rating_Share']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.id']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_Channel.Pay_per_view_PPV']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_Channel.Hight_definition_TV']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.id']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.18_49_Rating_Share']}}]
Example 610
tvshow
 +-- TV_Channel (tv channel)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- series_name (series name)
 |   +-- Country (country)
 |   +-- Language (language)
 |   +-- Content (content)
 |   +-- Pixel_aspect_ratio_PAR (pixel aspect ratio par)
 |   +-- Hight_definition_TV (hight definition tv)
 |   +-- Pay_per_view_PPV (pay per view ppv)
 |   +-- Package_Option (package option)
 +-- TV_series (tv series)
 |   +-- id (id) [PRIMARY]
 |   +-- Episode (episode)
 |   +-- Air_Date (air date)
 |   +-- Rating (rating)
 |   +-- Share (share)
 |   +-- 18_49_Rating_Share (18 49 rating share)
 |   +-- Viewers_m (viewers m)
 |   +-- Weekly_Rank (weekly rank)
 |   +-- Channel (channel) [FOREIGN]
 +-- Cartoon (cartoon)
     +-- id (id) [PRIMARY]
     +-- Title (title)
     +-- Directed_by (directed by)
     +-- Written_by (written by)
     +-- Original_air_date (original air date)
     +-- Production_code (production code)
     +-- Channel (channel) [FOREIGN]
NL: b'What is the series name of the TV Channel that shows the cartoon "The Rise of the Blue Beetle"?'
NL tokens: [b'what', b'is', b'the', b'series', b'name', b'of', b'the', b'tv', b'channel', b'that', b'shows', b'the', b'cartoon', b'"', b'the', b'rise', b'of', b'the', b'blue', b'beetle', b'"', b'?']
NL tokens (original): [b'What', b'is', b'the', b'series', b'name', b'of', b'the', b'TV', b'Channel', b'that', b'shows', b'the', b'cartoon', b'"', b'The', b'Rise', b'of', b'the', b'Blue', b'Beetle', b'"', b'?']
['[CLS]', 'what', 'is', 'the', 'series', 'name', 'of', 'the', 'tv', 'channel', 'that', 'shows', 'the', 'cartoon', '"', 'the', 'rise', 'of', 'the', 'blue', 'beetle', '"', '?', '[SEP]', '*', '[unused50]', 'tv', 'channel', '[unused51]', 'id', '[unused51]', 'series', 'name', '[unused51]', 'country', '[unused51]', 'language', '[unused51]', 'content', '[unused51]', 'pixel', 'aspect', 'ratio', 'par', '[unused51]', 'high', '##t', 'definition', 'tv', '[unused51]', 'pay', 'per', 'view', 'pp', '##v', '[unused51]', 'package', 'option', '[unused50]', 'tv', 'series', '[unused51]', 'id', '[unused51]', 'episode', '[unused51]', 'air', 'date', '[unused51]', 'rating', '[unused51]', 'share', '[unused51]', '18', '49', 'rating', 'share', '[unused51]', 'viewers', 'm', '[unused51]', 'weekly', 'rank', '[unused51]', 'channel', '[unused50]', 'cartoon', '[unused51]', 'id', '[unused51]', 'title', '[unused49]', 'the', 'rise', 'of', 'the', 'blue', 'beetle', '!', '[unused51]', 'directed', 'by', '[unused51]', 'written', 'by', '[unused51]', 'original', 'air', 'date', '[unused51]', 'production', 'code', '[unused51]', 'channel', '[SEP]']
Target 0: b'SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!"'
Target TF-P tokens: from TV_Channel join Cartoon on TV_Channel.id = Cartoon.Channel where Cartoon.Title = "the Rise of the Blue Beetle !" select TV_Channel.series_name

[WRONG] [medium] Pred 0:	b'SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.id WHERE Cartoon.Title = "the Rise of the Blue Beetle"' (-0.367) (length=28)
[WRONG] [medium] Pred 1:	b'SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.id WHERE Cartoon.Title = "Rise of the Blue Beetle"' (-0.732) (length=27)
[WRONG] [medium] Pred 2:	b'SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.id WHERE Cartoon.Title = "the of the Blue Beetle"' (-0.884) (length=27)
Error Case 191

ERROR: Join condition does not match with table: ['Cartoon', {'join': 'TV_series', 'on': {'eq': ['Cartoon.id', 'Cartoon.Channel']}}, {'join': 'TV_Channel', 'on': {'eq': ['TV_series.Channel', 'TV_Channel.id']}}]
ERROR: Join condition does not match with table: ['Cartoon', {'join': 'TV_series', 'on': {'eq': ['Cartoon.id', 'Cartoon.Channel']}}, {'join': 'TV_Channel', 'on': {'eq': ['Cartoon.Channel', 'TV_Channel.id']}}]
ERROR: invalid JOIN field "Cartoon": ['Cartoon', {'join': 'TV_series', 'on': {'eq': ['TV_series.Channel', 'Cartoon']}}, {'join': 'TV_Channel', 'on': {'eq': ['TV_series.Channel', 'TV_Channel.id']}}]
ERROR: invalid JOIN field "Cartoon": ['Cartoon', {'join': 'TV_series', 'on': {'eq': ['TV_series.Channel', 'Cartoon']}}, {'join': 'TV_Channel', 'on': {'eq': ['Cartoon.Channel', 'TV_Channel.id']}}]
ERROR: Join condition does not match with table: ['Cartoon', {'join': 'TV_series', 'on': {'eq': ['TV_series.Channel', 'TV_series.id']}}, {'join': 'TV_Channel', 'on': {'eq': ['TV_series.Channel', 'TV_Channel.id']}}]
ERROR: Join condition does not match with table: ['Cartoon', {'join': 'TV_series', 'on': {'eq': ['TV_series.Channel', 'TV_series.id']}}, {'join': 'TV_Channel', 'on': {'eq': ['Cartoon.Channel', 'TV_Channel.id']}}]
ERROR: invalid JOIN field "TV_series": ['Cartoon', {'join': 'TV_series', 'on': {'eq': ['Cartoon.id', 'TV_series']}}, {'join': 'TV_Channel', 'on': {'eq': ['TV_series.Channel', 'TV_Channel.id']}}]
Example 611
tvshow
 +-- TV_Channel (tv channel)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- series_name (series name)
 |   +-- Country (country)
 |   +-- Language (language)
 |   +-- Content (content)
 |   +-- Pixel_aspect_ratio_PAR (pixel aspect ratio par)
 |   +-- Hight_definition_TV (hight definition tv)
 |   +-- Pay_per_view_PPV (pay per view ppv)
 |   +-- Package_Option (package option)
 +-- TV_series (tv series)
 |   +-- id (id) [PRIMARY]
 |   +-- Episode (episode)
 |   +-- Air_Date (air date)
 |   +-- Rating (rating)
 |   +-- Share (share)
 |   +-- 18_49_Rating_Share (18 49 rating share)
 |   +-- Viewers_m (viewers m)
 |   +-- Weekly_Rank (weekly rank)
 |   +-- Channel (channel) [FOREIGN]
 +-- Cartoon (cartoon)
     +-- id (id) [PRIMARY]
     +-- Title (title)
     +-- Directed_by (directed by)
     +-- Written_by (written by)
     +-- Original_air_date (original air date)
     +-- Production_code (production code)
     +-- Channel (channel) [FOREIGN]
NL: b'List the title of all  Cartoons showed on TV Channel with series name "Sky Radio".'
NL tokens: [b'list', b'the', b'title', b'of', b'all', b'cartoons', b'showed', b'on', b'tv', b'channel', b'with', b'series', b'name', b'"', b'sky', b'radio', b'"', b'.']
NL tokens (original): [b'List', b'the', b'title', b'of', b'all', b'Cartoons', b'showed', b'on', b'TV', b'Channel', b'with', b'series', b'name', b'"', b'Sky', b'Radio', b'"', b'.']
['[CLS]', 'list', 'the', 'title', 'of', 'all', 'cartoons', 'showed', 'on', 'tv', 'channel', 'with', 'series', 'name', '"', 'sky', 'radio', '"', '.', '[SEP]', '*', '[unused50]', 'tv', 'channel', '[unused51]', 'id', '[unused51]', 'series', 'name', '[unused49]', 'sky', 'radio', '[unused51]', 'country', '[unused51]', 'language', '[unused51]', 'content', '[unused51]', 'pixel', 'aspect', 'ratio', 'par', '[unused51]', 'high', '##t', 'definition', 'tv', '[unused51]', 'pay', 'per', 'view', 'pp', '##v', '[unused51]', 'package', 'option', '[unused50]', 'tv', 'series', '[unused51]', 'id', '[unused51]', 'episode', '[unused51]', 'air', 'date', '[unused51]', 'rating', '[unused51]', 'share', '[unused51]', '18', '49', 'rating', 'share', '[unused51]', 'viewers', 'm', '[unused51]', 'weekly', 'rank', '[unused51]', 'channel', '[unused50]', 'cartoon', '[unused51]', 'id', '[unused51]', 'title', '[unused51]', 'directed', 'by', '[unused51]', 'written', 'by', '[unused51]', 'original', 'air', 'date', '[unused51]', 'production', 'code', '[unused51]', 'channel', '[SEP]']
Target 0: b'SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio"'
Target TF-P tokens: from TV_Channel join Cartoon on TV_Channel.id = Cartoon.Channel where TV_Channel.series_name = "Sky Radio" select Cartoon.Title

[WRONG] [medium] Pred 0:	b'SELECT Cartoon.Title FROM Cartoon JOIN TV_series ON Cartoon.id = TV_series.Channel JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"' (-0.312) (length=24)
[WRONG] [medium] Pred 1:	b'SELECT Cartoon.Title FROM Cartoon JOIN TV_series ON Cartoon.id = TV_series.Channel JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"' (-0.490) (length=24)
[WRONG] [medium] Pred 2:	b'SELECT Cartoon.Title FROM TV_series JOIN Cartoon ON TV_series.Channel = Cartoon.id JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"' (-1.636) (length=24)
[WRONG] [medium] Pred 3:	b'SELECT Cartoon.Title FROM Cartoon JOIN TV_series ON TV_series.Channel = Cartoon.id JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"' (-1.730) (length=24)
[WRONG] [medium] Pred 4:	b'SELECT Cartoon.Title FROM Cartoon JOIN TV_series ON TV_series.Channel = Cartoon.id JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"' (-1.793) (length=24)
[WRONG] [medium] Pred 5:	b'SELECT Cartoon.Title FROM TV_series JOIN Cartoon ON TV_series.Channel = Cartoon.id JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"' (-1.798) (length=24)
[WRONG] [medium] Pred 6:	b'SELECT Cartoon.Title FROM Cartoon JOIN TV_series ON Cartoon.id = TV_series.Channel JOIN TV_Channel ON TV_Channel.id = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"' (-2.109) (length=24)
[WRONG] [medium] Pred 7:	b'SELECT Cartoon.Title FROM Cartoon JOIN TV_series ON Cartoon.id = TV_series.Channel JOIN TV_Channel ON TV_Channel.id = Cartoon.Channel WHERE TV_Channel.series_name = "Sky Radio"' (-2.281) (length=24)
[WRONG] [medium] Pred 8:	b'SELECT Cartoon.Title FROM Cartoon JOIN TV_series ON Cartoon.id = TV_series.Episode JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"' (-2.412) (length=24)
Error Case 192

Example 612
tvshow
 +-- TV_Channel (tv channel)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- series_name (series name)
 |   +-- Country (country)
 |   +-- Language (language)
 |   +-- Content (content)
 |   +-- Pixel_aspect_ratio_PAR (pixel aspect ratio par)
 |   +-- Hight_definition_TV (hight definition tv)
 |   +-- Pay_per_view_PPV (pay per view ppv)
 |   +-- Package_Option (package option)
 +-- TV_series (tv series)
 |   +-- id (id) [PRIMARY]
 |   +-- Episode (episode)
 |   +-- Air_Date (air date)
 |   +-- Rating (rating)
 |   +-- Share (share)
 |   +-- 18_49_Rating_Share (18 49 rating share)
 |   +-- Viewers_m (viewers m)
 |   +-- Weekly_Rank (weekly rank)
 |   +-- Channel (channel) [FOREIGN]
 +-- Cartoon (cartoon)
     +-- id (id) [PRIMARY]
     +-- Title (title)
     +-- Directed_by (directed by)
     +-- Written_by (written by)
     +-- Original_air_date (original air date)
     +-- Production_code (production code)
     +-- Channel (channel) [FOREIGN]
NL: b'What is the title of all the cartools that are on the TV Channel with the series name "Sky Radio"?'
NL tokens: [b'what', b'is', b'the', b'title', b'of', b'all', b'the', b'cart', b'##ool', b'##s', b'that', b'are', b'on', b'the', b'tv', b'channel', b'with', b'the', b'series', b'name', b'"', b'sky', b'radio', b'"', b'?']
NL tokens (original): [b'What', b'is', b'the', b'title', b'of', b'all', b'the', b'cart', b'##ool', b'##s', b'that', b'are', b'on', b'the', b'TV', b'Channel', b'with', b'the', b'series', b'name', b'"', b'Sky', b'Radio', b'"', b'?']
['[CLS]', 'what', 'is', 'the', 'title', 'of', 'all', 'the', 'cart', '##ool', '##s', 'that', 'are', 'on', 'the', 'tv', 'channel', 'with', 'the', 'series', 'name', '"', 'sky', 'radio', '"', '?', '[SEP]', '*', '[unused50]', 'tv', 'channel', '[unused51]', 'id', '[unused51]', 'series', 'name', '[unused49]', 'sky', 'radio', '[unused51]', 'country', '[unused51]', 'language', '[unused51]', 'content', '[unused51]', 'pixel', 'aspect', 'ratio', 'par', '[unused51]', 'high', '##t', 'definition', 'tv', '[unused51]', 'pay', 'per', 'view', 'pp', '##v', '[unused51]', 'package', 'option', '[unused50]', 'tv', 'series', '[unused51]', 'id', '[unused51]', 'episode', '[unused51]', 'air', 'date', '[unused51]', 'rating', '[unused51]', 'share', '[unused51]', '18', '49', 'rating', 'share', '[unused51]', 'viewers', 'm', '[unused51]', 'weekly', 'rank', '[unused51]', 'channel', '[unused50]', 'cartoon', '[unused51]', 'id', '[unused51]', 'title', '[unused51]', 'directed', 'by', '[unused51]', 'written', 'by', '[unused51]', 'original', 'air', 'date', '[unused51]', 'production', 'code', '[unused51]', 'channel', '[SEP]']
Target 0: b'SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio"'
Target TF-P tokens: from TV_Channel join Cartoon on TV_Channel.id = Cartoon.Channel where TV_Channel.series_name = "Sky Radio" select Cartoon.Title

[WRONG] [medium] Pred 0:	b'SELECT TV_Channel.Content FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"' (-1.581) (length=18)
 59%|█████▉    | 77/130 [09:30<05:40,  6.42s/it][WRONG] [medium] Pred 1:	b'SELECT TV_series.Channel FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"' (-2.259) (length=18)
[WRONG] [medium] Pred 2:	b'SELECT TV_Channel.Content FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = "Sky Radio"' (-2.619) (length=18)
[WRONG] [medium] Pred 3:	b'SELECT TV_Channel.Pixel_aspect_ratio_PAR FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"' (-2.661) (length=18)
[WRONG] [medium] Pred 4:	b'SELECT TV_series.id FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"' (-2.840) (length=18)
[WRONG] [medium] Pred 5:	b'SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"' (-2.860) (length=18)
[WRONG] [medium] Pred 6:	b'SELECT TV_series.Rating FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"' (-2.959) (length=18)
[WRONG] [medium] Pred 7:	b'SELECT TV_Channel.Package_Option FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"' (-3.152) (length=18)
[WRONG] [medium] Pred 8:	b'SELECT TV_Channel.Language FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"' (-3.193) (length=18)
[WRONG] [medium] Pred 9:	b'SELECT TV_Channel.Content FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio" AND TV_series.Channel = "TV"' (-3.425) (length=24)
[WRONG] [medium] Pred 10:	b'SELECT TV_series.Viewers_m FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"' (-3.443) (length=18)
[WRONG] [medium] Pred 11:	b'SELECT TV_Channel.Content FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio" AND TV_series.Channel = "Sky Radio"' (-3.545) (length=25)
[WRONG] [medium] Pred 12:	b'SELECT TV_Channel.Content FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio" AND TV_Channel.Content = "TV"' (-3.720) (length=24)
[WRONG] [medium] Pred 13:	b'SELECT TV_Channel.Content FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN TV_Channel ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.series_name = "Sky Radio"' (-3.878) (length=24)
[WRONG] [medium] Pred 14:	b'SELECT TV_Channel.Content FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id JOIN TV_series ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio"' (-3.913) (length=24)
[WRONG] [medium] Pred 15:	b'SELECT TV_Channel.Pixel_aspect_ratio_PAR FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio" AND TV_series.Channel = "TV"' (-4.146) (length=24)
Error Case 193

Example 616
tvshow
 +-- TV_Channel (tv channel)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- series_name (series name)
 |   +-- Country (country)
 |   +-- Language (language)
 |   +-- Content (content)
 |   +-- Pixel_aspect_ratio_PAR (pixel aspect ratio par)
 |   +-- Hight_definition_TV (hight definition tv)
 |   +-- Pay_per_view_PPV (pay per view ppv)
 |   +-- Package_Option (package option)
 +-- TV_series (tv series)
 |   +-- id (id) [PRIMARY]
 |   +-- Episode (episode)
 |   +-- Air_Date (air date)
 |   +-- Rating (rating)
 |   +-- Share (share)
 |   +-- 18_49_Rating_Share (18 49 rating share)
 |   +-- Viewers_m (viewers m)
 |   +-- Weekly_Rank (weekly rank)
 |   +-- Channel (channel) [FOREIGN]
 +-- Cartoon (cartoon)
     +-- id (id) [PRIMARY]
     +-- Title (title)
     +-- Directed_by (directed by)
     +-- Written_by (written by)
     +-- Original_air_date (original air date)
     +-- Production_code (production code)
     +-- Channel (channel) [FOREIGN]
NL: b'What are 3 most highly rated episodes in the TV series table and what were those ratings?'
NL tokens: [b'what', b'are', b'3', b'most', b'highly', b'rated', b'episodes', b'in', b'the', b'tv', b'series', b'table', b'and', b'what', b'were', b'those', b'ratings', b'?']
NL tokens (original): [b'What', b'are', b'3', b'most', b'highly', b'rated', b'episodes', b'in', b'the', b'TV', b'series', b'table', b'and', b'what', b'were', b'those', b'ratings', b'?']
['[CLS]', 'what', 'are', '3', 'most', 'highly', 'rated', 'episodes', 'in', 'the', 'tv', 'series', 'table', 'and', 'what', 'were', 'those', 'ratings', '?', '[SEP]', '*', '[unused50]', 'tv', 'channel', '[unused51]', 'id', '[unused51]', 'series', 'name', '[unused51]', 'country', '[unused51]', 'language', '[unused51]', 'content', '[unused51]', 'pixel', 'aspect', 'ratio', 'par', '[unused51]', 'high', '##t', 'definition', 'tv', '[unused51]', 'pay', 'per', 'view', 'pp', '##v', '[unused51]', 'package', 'option', '[unused50]', 'tv', 'series', '[unused51]', 'id', '[unused51]', 'episode', '[unused51]', 'air', 'date', '[unused51]', 'rating', '[unused51]', 'share', '[unused51]', '18', '49', 'rating', 'share', '[unused51]', 'viewers', 'm', '[unused51]', 'weekly', 'rank', '[unused51]', 'channel', '[unused50]', 'cartoon', '[unused51]', 'id', '[unused51]', 'title', '[unused51]', 'directed', 'by', '[unused51]', 'written', 'by', '[unused51]', 'original', 'air', 'date', '[unused51]', 'production', 'code', '[unused51]', 'channel', '[SEP]']
Target 0: b'SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3'
Target TF-P tokens: from TV_series select TV_series.Episode , TV_series.Rating order by TV_series.Rating desc limit 3

[WRONG] [medium] Pred 0:	b'SELECT TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3' (-0.185) (length=12)
[CORRE] [medium] Pred 1:	b'SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3' (-0.296) (length=12)
Error Case 194

Example 623
tvshow
 +-- TV_Channel (tv channel)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- series_name (series name)
 |   +-- Country (country)
 |   +-- Language (language)
 |   +-- Content (content)
 |   +-- Pixel_aspect_ratio_PAR (pixel aspect ratio par)
 |   +-- Hight_definition_TV (hight definition tv)
 |   +-- Pay_per_view_PPV (pay per view ppv)
 |   +-- Package_Option (package option)
 +-- TV_series (tv series)
 |   +-- id (id) [PRIMARY]
 |   +-- Episode (episode)
 |   +-- Air_Date (air date)
 |   +-- Rating (rating)
 |   +-- Share (share)
 |   +-- 18_49_Rating_Share (18 49 rating share)
 |   +-- Viewers_m (viewers m)
 |   +-- Weekly_Rank (weekly rank)
 |   +-- Channel (channel) [FOREIGN]
 +-- Cartoon (cartoon)
     +-- id (id) [PRIMARY]
     +-- Title (title)
     +-- Directed_by (directed by)
     +-- Written_by (written by)
     +-- Original_air_date (original air date)
     +-- Production_code (production code)
     +-- Channel (channel) [FOREIGN]
NL: b'What is the TV Channel of TV series with Episode "A Love of a Lifetime"? List the TV Channel\'s series name.'
NL tokens: [b'what', b'is', b'the', b'tv', b'channel', b'of', b'tv', b'series', b'with', b'episode', b'"', b'a', b'love', b'of', b'a', b'lifetime', b'"', b'?', b'list', b'the', b'tv', b'channel', b"'", b's', b'series', b'name', b'.']
NL tokens (original): [b'What', b'is', b'the', b'TV', b'Channel', b'of', b'TV', b'series', b'with', b'Episode', b'"', b'A', b'Love', b'of', b'a', b'Lifetime', b'"', b'?', b'List', b'the', b'TV', b'Channel', b"'", b's', b'series', b'name', b'.']
 60%|██████    | 78/130 [09:32<04:26,  5.13s/it]['[CLS]', 'what', 'is', 'the', 'tv', 'channel', 'of', 'tv', 'series', 'with', 'episode', '"', 'a', 'love', 'of', 'a', 'lifetime', '"', '?', 'list', 'the', 'tv', 'channel', "'", 's', 'series', 'name', '.', '[SEP]', '*', '[unused50]', 'tv', 'channel', '[unused51]', 'id', '[unused51]', 'series', 'name', '[unused51]', 'country', '[unused51]', 'language', '[unused51]', 'content', '[unused51]', 'pixel', 'aspect', 'ratio', 'par', '[unused51]', 'high', '##t', 'definition', 'tv', '[unused51]', 'pay', 'per', 'view', 'pp', '##v', '[unused51]', 'package', 'option', '[unused50]', 'tv', 'series', '[unused51]', 'id', '[unused51]', 'episode', '[unused49]', 'a', 'love', 'of', 'a', 'lifetime', '[unused51]', 'air', 'date', '[unused51]', 'rating', '[unused51]', 'share', '[unused51]', '18', '49', 'rating', 'share', '[unused51]', 'viewers', 'm', '[unused51]', 'weekly', 'rank', '[unused51]', 'channel', '[unused50]', 'cartoon', '[unused51]', 'id', '[unused51]', 'title', '[unused51]', 'directed', 'by', '[unused51]', 'written', 'by', '[unused51]', 'original', 'air', 'date', '[unused51]', 'production', 'code', '[unused51]', 'channel', '[SEP]']
Target 0: b'SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime"'
Target TF-P tokens: from TV_Channel join TV_series on TV_Channel.id = TV_series.Channel where TV_series.Episode = "A Love of A Lifetime" select TV_Channel.series_name

[WRONG] [medium] Pred 0:	b'SELECT TV_series.Channel FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = "A Love of A Lifetime"' (-0.113) (length=21)
[WRONG] [medium] Pred 1:	b'SELECT TV_series.Channel FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = "A Love of A Lifetime"' (-0.201) (length=21)
[WRONG] [medium] Pred 2:	b'SELECT TV_series.Channel FROM TV_series WHERE TV_series.Episode = "A Love of A Lifetime"' (-1.172) (length=15)
[WRONG] [medium] Pred 3:	b'SELECT TV_series.Channel, TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = "A Love of A Lifetime"' (-1.794) (length=23)
[WRONG] [medium] Pred 4:	b'SELECT TV_series.Channel FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = "A Love of A Lifetime" INTERSECT SELECT TV_series.Channel FROM TV_series WHERE TV_series.Episode = "A Love of A Lifetime"' (-1.811) (length=36)
[WRONG] [medium] Pred 5:	b'SELECT TV_series.Channel, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = "A Love of A Lifetime"' (-1.843) (length=23)
[CORRE] [medium] Pred 6:	b'SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = "A Love of A Lifetime"' (-2.293) (length=21)
Error Case 195

Parsing error: from TV_series where TV_series.Episode = "A Love of A Lifetime" select ?
Example 624
tvshow
 +-- TV_Channel (tv channel)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- series_name (series name)
 |   +-- Country (country)
 |   +-- Language (language)
 |   +-- Content (content)
 |   +-- Pixel_aspect_ratio_PAR (pixel aspect ratio par)
 |   +-- Hight_definition_TV (hight definition tv)
 |   +-- Pay_per_view_PPV (pay per view ppv)
 |   +-- Package_Option (package option)
 +-- TV_series (tv series)
 |   +-- id (id) [PRIMARY]
 |   +-- Episode (episode)
 |   +-- Air_Date (air date)
 |   +-- Rating (rating)
 |   +-- Share (share)
 |   +-- 18_49_Rating_Share (18 49 rating share)
 |   +-- Viewers_m (viewers m)
 |   +-- Weekly_Rank (weekly rank)
 |   +-- Channel (channel) [FOREIGN]
 +-- Cartoon (cartoon)
     +-- id (id) [PRIMARY]
     +-- Title (title)
     +-- Directed_by (directed by)
     +-- Written_by (written by)
     +-- Original_air_date (original air date)
     +-- Production_code (production code)
     +-- Channel (channel) [FOREIGN]
NL: b'What is the name of the series that has the episode "A Love of a Lifetime"?'
NL tokens: [b'what', b'is', b'the', b'name', b'of', b'the', b'series', b'that', b'has', b'the', b'episode', b'"', b'a', b'love', b'of', b'a', b'lifetime', b'"', b'?']
NL tokens (original): [b'What', b'is', b'the', b'name', b'of', b'the', b'series', b'that', b'has', b'the', b'episode', b'"', b'A', b'Love', b'of', b'a', b'Lifetime', b'"', b'?']
['[CLS]', 'what', 'is', 'the', 'name', 'of', 'the', 'series', 'that', 'has', 'the', 'episode', '"', 'a', 'love', 'of', 'a', 'lifetime', '"', '?', '[SEP]', '*', '[unused50]', 'tv', 'channel', '[unused51]', 'id', '[unused51]', 'series', 'name', '[unused51]', 'country', '[unused51]', 'language', '[unused51]', 'content', '[unused51]', 'pixel', 'aspect', 'ratio', 'par', '[unused51]', 'high', '##t', 'definition', 'tv', '[unused51]', 'pay', 'per', 'view', 'pp', '##v', '[unused51]', 'package', 'option', '[unused50]', 'tv', 'series', '[unused51]', 'id', '[unused51]', 'episode', '[unused49]', 'a', 'love', 'of', 'a', 'lifetime', '[unused51]', 'air', 'date', '[unused51]', 'rating', '[unused51]', 'share', '[unused51]', '18', '49', 'rating', 'share', '[unused51]', 'viewers', 'm', '[unused51]', 'weekly', 'rank', '[unused51]', 'channel', '[unused50]', 'cartoon', '[unused51]', 'id', '[unused51]', 'title', '[unused51]', 'directed', 'by', '[unused51]', 'written', 'by', '[unused51]', 'original', 'air', 'date', '[unused51]', 'production', 'code', '[unused51]', 'channel', '[SEP]']
Target 0: b'SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime"'
Target TF-P tokens: from TV_Channel join TV_series on TV_Channel.id = TV_series.Channel where TV_series.Episode = "A Love of A Lifetime" select TV_Channel.series_name

[WRONG] [medium] Pred 0:	b'SELECT TV_series.id FROM TV_series WHERE TV_series.Episode = "A Love of A Lifetime"' (-0.849) (length=15)
[WRONG] [medium] Pred 1:	b'SELECT TV_series.Episode FROM TV_series WHERE TV_series.Episode = "A Love of A Lifetime"' (-1.217) (length=15)
[WRONG] [medium] Pred 2:	b'SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = "A Love of A Lifetime"' (-2.166) (length=15)
[WRONG] [medium] Pred 3:	b'SELECT TV_series.Share FROM TV_series WHERE TV_series.Episode = "A Love of A Lifetime"' (-2.311) (length=15)
[WRONG] [medium] Pred 4:	b'SELECT "TV_series.18_49_Rating_Share" FROM TV_series WHERE TV_series.Episode = "A Love of A Lifetime"' (-2.459) (length=15)
[WRONG] [medium] Pred 5:	b'SELECT TV_series.Channel FROM TV_series WHERE TV_series.Episode = "A Love of A Lifetime"' (-2.473) (length=15)
[WRONG] [medium] Pred 6:	b'SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = "A Love of A Lifetime"' (-2.563) (length=15)
[WRONG] [medium] Pred 7:	b'SELECT TV_series.Rating FROM TV_series WHERE TV_series.Episode = "A Love of A Lifetime"' (-2.600) (length=15)
[WRONG] [medium] Pred 8:	b'SELECT TV_series.Viewers_m FROM TV_series WHERE TV_series.Episode = "A Love of A Lifetime"' (-3.006) (length=15)
[WRONG] [medium] Pred 9:	b'SELECT CARTOON(*) FROM TV_series WHERE TV_series.Episode = "A Love of A Lifetime"' (-3.066) (length=18)
[WRONG] [medium] Pred 10:	b'SELECT TV_CHANNEL(TV_series.id) FROM TV_series WHERE TV_series.Episode = "A Love of A Lifetime"' (-3.596) (length=18)
[WRONG] [medium] Pred 11:	b'SELECT TV_series.id FROM TV_series WHERE TV_series.Episode = "A Love of A Lifetime" AND TV_series.Episode = "A Love of A Lifetime"' (-3.651) (length=25)
[WRONG] [medium] Pred 12:	b'SELECT "" FROM TV_series WHERE TV_series.Episode = "A Love of A Lifetime"' (-3.756) (length=15)
[WRONG] [medium] Pred 13:	b'SELECT TV_CHANNEL(*) FROM TV_series WHERE TV_series.Episode = "A Love of A Lifetime"' (-3.769) (length=18)
[WRONG] [medium] Pred 14:	b'SELECT * FROM TV_series WHERE TV_series.Episode = "A Love of A Lifetime"' (-3.828) (length=15)
Error Case 196

ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_series.Channel', 'TV_series.id']}}]
ERROR: Join condition does not match with table: ['Cartoon', {'join': 'TV_series', 'on': {'eq': ['TV_series.Channel', 'TV_series.Channel']}}]
Example 629
tvshow
 +-- TV_Channel (tv channel)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- series_name (series name)
 |   +-- Country (country)
 |   +-- Language (language)
 |   +-- Content (content)
 |   +-- Pixel_aspect_ratio_PAR (pixel aspect ratio par)
 |   +-- Hight_definition_TV (hight definition tv)
 |   +-- Pay_per_view_PPV (pay per view ppv)
 |   +-- Package_Option (package option)
 +-- TV_series (tv series)
 |   +-- id (id) [PRIMARY]
 |   +-- Episode (episode)
 |   +-- Air_Date (air date)
 |   +-- Rating (rating)
 |   +-- Share (share)
 |   +-- 18_49_Rating_Share (18 49 rating share)
 |   +-- Viewers_m (viewers m)
 |   +-- Weekly_Rank (weekly rank)
 |   +-- Channel (channel) [FOREIGN]
 +-- Cartoon (cartoon)
     +-- id (id) [PRIMARY]
     +-- Title (title)
     +-- Directed_by (directed by)
     +-- Written_by (written by)
     +-- Original_air_date (original air date)
     +-- Production_code (production code)
     +-- Channel (channel) [FOREIGN]
NL: b'Find the production code and channel of the most recently aired cartoon .'
NL tokens: [b'find', b'the', b'production', b'code', b'and', b'channel', b'of', b'the', b'most', b'recently', b'aired', b'cartoon', b'.']
NL tokens (original): [b'Find', b'the', b'production', b'code', b'and', b'channel', b'of', b'the', b'most', b'recently', b'aired', b'cartoon', b'.']
['[CLS]', 'find', 'the', 'production', 'code', 'and', 'channel', 'of', 'the', 'most', 'recently', 'aired', 'cartoon', '.', '[SEP]', '*', '[unused50]', 'tv', 'channel', '[unused51]', 'id', '[unused51]', 'series', 'name', '[unused51]', 'country', '[unused51]', 'language', '[unused51]', 'content', '[unused51]', 'pixel', 'aspect', 'ratio', 'par', '[unused51]', 'high', '##t', 'definition', 'tv', '[unused51]', 'pay', 'per', 'view', 'pp', '##v', '[unused51]', 'package', 'option', '[unused50]', 'tv', 'series', '[unused51]', 'id', '[unused51]', 'episode', '[unused51]', 'air', 'date', '[unused51]', 'rating', '[unused51]', 'share', '[unused51]', '18', '49', 'rating', 'share', '[unused51]', 'viewers', 'm', '[unused51]', 'weekly', 'rank', '[unused51]', 'channel', '[unused50]', 'cartoon', '[unused51]', 'id', '[unused51]', 'title', '[unused51]', 'directed', 'by', '[unused51]', 'written', 'by', '[unused51]', 'original', 'air', 'date', '[unused51]', 'production', 'code', '[unused51]', 'channel', '[SEP]']
Target 0: b'select production_code ,  channel from cartoon order by original_air_date desc limit 1'
Target TF-P tokens: from Cartoon select Cartoon.Production_code , Cartoon.Channel order by Cartoon.Original_air_date desc limit 1

[WRONG] [medium] Pred 0:	b'SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon JOIN TV_series ON Cartoon.Channel = TV_series.Channel ORDER BY TV_series.Air_Date DESC LIMIT 1' (-2.890) (length=18)
[CORRE] [medium] Pred 1:	b'SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon ORDER BY Cartoon.Original_air_date DESC LIMIT 1' (-3.564) (length=12)
Error Case 197

Example 630
tvshow
 +-- TV_Channel (tv channel)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- series_name (series name)
 |   +-- Country (country)
 |   +-- Language (language)
 |   +-- Content (content)
 |   +-- Pixel_aspect_ratio_PAR (pixel aspect ratio par)
 |   +-- Hight_definition_TV (hight definition tv)
 |   +-- Pay_per_view_PPV (pay per view ppv)
 |   +-- Package_Option (package option)
 +-- TV_series (tv series)
 |   +-- id (id) [PRIMARY]
 |   +-- Episode (episode)
 |   +-- Air_Date (air date)
 |   +-- Rating (rating)
 |   +-- Share (share)
 |   +-- 18_49_Rating_Share (18 49 rating share)
 |   +-- Viewers_m (viewers m)
 |   +-- Weekly_Rank (weekly rank)
 |   +-- Channel (channel) [FOREIGN]
 +-- Cartoon (cartoon)
     +-- id (id) [PRIMARY]
     +-- Title (title)
     +-- Directed_by (directed by)
     +-- Written_by (written by)
     +-- Original_air_date (original air date)
     +-- Production_code (production code)
     +-- Channel (channel) [FOREIGN]
NL: b'What is the produdction code and channel of the most recent cartoon ?'
NL tokens: [b'what', b'is', b'the', b'pro', b'##du', b'##dc', b'##tion', b'code', b'and', b'channel', b'of', b'the', b'most', b'recent', b'cartoon', b'?']
NL tokens (original): [b'What', b'is', b'the', b'pro', b'##du', b'##dc', b'##tion', b'code', b'and', b'channel', b'of', b'the', b'most', b'recent', b'cartoon', b'?']
['[CLS]', 'what', 'is', 'the', 'pro', '##du', '##dc', '##tion', 'code', 'and', 'channel', 'of', 'the', 'most', 'recent', 'cartoon', '?', '[SEP]', '*', '[unused50]', 'tv', 'channel', '[unused51]', 'id', '[unused51]', 'series', 'name', '[unused51]', 'country', '[unused51]', 'language', '[unused51]', 'content', '[unused51]', 'pixel', 'aspect', 'ratio', 'par', '[unused51]', 'high', '##t', 'definition', 'tv', '[unused51]', 'pay', 'per', 'view', 'pp', '##v', '[unused51]', 'package', 'option', '[unused50]', 'tv', 'series', '[unused51]', 'id', '[unused51]', 'episode', '[unused51]', 'air', 'date', '[unused51]', 'rating', '[unused51]', 'share', '[unused51]', '18', '49', 'rating', 'share', '[unused51]', 'viewers', 'm', '[unused51]', 'weekly', 'rank', '[unused51]', 'channel', '[unused50]', 'cartoon', '[unused51]', 'id', '[unused51]', 'title', '[unused51]', 'directed', 'by', '[unused51]', 'written', 'by', '[unused51]', 'original', 'air', 'date', '[unused51]', 'production', 'code', '[unused51]', 'channel', '[SEP]']
Target 0: b'select production_code ,  channel from cartoon order by original_air_date desc limit 1'
Target TF-P tokens: from Cartoon select Cartoon.Production_code , Cartoon.Channel order by Cartoon.Original_air_date desc limit 1

[WRONG] [medium] Pred 0:	b'SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon ORDER BY Cartoon.Production_code DESC LIMIT 1' (-0.007) (length=12)
[WRONG] [medium] Pred 1:	b'SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon ORDER BY Cartoon.Title DESC LIMIT 1' (-1.355) (length=12)
[WRONG] [medium] Pred 2:	b'SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon ORDER BY Cartoon.Directed_by DESC LIMIT 1' (-2.123) (length=12)
[WRONG] [medium] Pred 3:	b'SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon ORDER BY Cartoon.id DESC LIMIT 1' (-2.742) (length=12)
[CORRE] [medium] Pred 4:	b'SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon ORDER BY Cartoon.Original_air_date DESC LIMIT 1' (-2.755) (length=12)
Error Case 198

ERROR: invalid JOIN field "{'from': 'TV_Channel', 'select': {'value': {'max': 'TV_Channel.Hight_definition_TV'}}}": ['TV_Channel', {'join': 'TV_series', 'on': {'and': [{'eq': ['TV_Channel.id', 'TV_series.Channel']}, {'eq': ['TV_Channel.Hight_definition_TV', {'from': 'TV_Channel', 'select': {'value': {'max': 'TV_Channel.Hight_definition_TV'}}}]}]}}]
ERROR: table "TV_Channel" in field expression TV_Channel.Hight_definition_TV is not in the current scope
Parsing error: from TV_Channel join TV_series on TV_Channel.id = TV_series.Channel where TV_Channel.Hight_definition_TV = (from TV_Channel select TV_Channel.id order by TV_Channel.Hight_definition_TV = 1 select TV_Channel.Package_Option , TV_Channel.series_name
Parsing error: from TV_Channel join TV_series on TV_Channel.id = TV_series.Channel select TV_Channel.Package_Option , TV_Channel.series_name order by TV_Channel.Hight_definition_TV = limit 1
Example 631
 61%|██████    | 79/130 [09:37<04:18,  5.07s/it]tvshow
 +-- TV_Channel (tv channel)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- series_name (series name)
 |   +-- Country (country)
 |   +-- Language (language)
 |   +-- Content (content)
 |   +-- Pixel_aspect_ratio_PAR (pixel aspect ratio par)
 |   +-- Hight_definition_TV (hight definition tv)
 |   +-- Pay_per_view_PPV (pay per view ppv)
 |   +-- Package_Option (package option)
 +-- TV_series (tv series)
 |   +-- id (id) [PRIMARY]
 |   +-- Episode (episode)
 |   +-- Air_Date (air date)
 |   +-- Rating (rating)
 |   +-- Share (share)
 |   +-- 18_49_Rating_Share (18 49 rating share)
 |   +-- Viewers_m (viewers m)
 |   +-- Weekly_Rank (weekly rank)
 |   +-- Channel (channel) [FOREIGN]
 +-- Cartoon (cartoon)
     +-- id (id) [PRIMARY]
     +-- Title (title)
     +-- Directed_by (directed by)
     +-- Written_by (written by)
     +-- Original_air_date (original air date)
     +-- Production_code (production code)
     +-- Channel (channel) [FOREIGN]
NL: b'Find the package choice and series name of the TV channel that has high definition TV.'
NL tokens: [b'find', b'the', b'package', b'choice', b'and', b'series', b'name', b'of', b'the', b'tv', b'channel', b'that', b'has', b'high', b'definition', b'tv', b'.']
NL tokens (original): [b'Find', b'the', b'package', b'choice', b'and', b'series', b'name', b'of', b'the', b'TV', b'channel', b'that', b'has', b'high', b'definition', b'TV', b'.']
['[CLS]', 'find', 'the', 'package', 'choice', 'and', 'series', 'name', 'of', 'the', 'tv', 'channel', 'that', 'has', 'high', 'definition', 'tv', '.', '[SEP]', '*', '[unused50]', 'tv', 'channel', '[unused51]', 'id', '[unused51]', 'series', 'name', '[unused51]', 'country', '[unused51]', 'language', '[unused51]', 'content', '[unused51]', 'pixel', 'aspect', 'ratio', 'par', '[unused51]', 'high', '##t', 'definition', 'tv', '[unused51]', 'pay', 'per', 'view', 'pp', '##v', '[unused51]', 'package', 'option', '[unused50]', 'tv', 'series', '[unused51]', 'id', '[unused51]', 'episode', '[unused51]', 'air', 'date', '[unused51]', 'rating', '[unused51]', 'share', '[unused51]', '18', '49', 'rating', 'share', '[unused51]', 'viewers', 'm', '[unused51]', 'weekly', 'rank', '[unused51]', 'channel', '[unused50]', 'cartoon', '[unused51]', 'id', '[unused51]', 'title', '[unused51]', 'directed', 'by', '[unused51]', 'written', 'by', '[unused51]', 'original', 'air', 'date', '[unused51]', 'production', 'code', '[unused51]', 'channel', '[SEP]']
Target 0: b'SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"'
Target TF-P tokens: from TV_Channel where TV_Channel.Hight_definition_TV = "yes" select TV_Channel.Package_Option , TV_Channel.series_name

[WRONG] [medium] Pred 0:	b'SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = (SELECT MAX(TV_Channel.Hight_definition_TV) FROM TV_Channel)' (-0.005) (length=25)
[WRONG] [medium] Pred 1:	b'SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel ORDER BY TV_Channel.Hight_definition_TV DESC LIMIT 1' (-0.921) (length=18)
[WRONG] [medium] Pred 2:	b'SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = 1' (-1.819) (length=17)
[WRONG] [medium] Pred 3:	b'SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = (SELECT MAX(TV_Channel.Hight_definition_TV) FROM TV_Channel)' (-1.901) (length=31)
[WRONG] [medium] Pred 4:	b'SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = 1 ORDER BY TV_Channel.Hight_definition_TV DESC LIMIT 1' (-2.090) (length=22)
[WRONG] [medium] Pred 5:	b'SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel GROUP BY TV_series.Channel ORDER BY MAX(TV_Channel.Hight_definition_TV) DESC LIMIT 1' (-2.120) (length=23)
[WRONG] [medium] Pred 6:	b'SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = (SELECT TV_Channel.id FROM TV_Channel ORDER BY TV_Channel.Hight_definition_TV DESC LIMIT 1)' (-2.266) (length=27)
[WRONG] [medium] Pred 7:	b'SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel ORDER BY TV_Channel.Hight_definition_TV DESC LIMIT 1' (-2.293) (length=12)
[WRONG] [medium] Pred 8:	b'SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = "TV"' (-2.554) (length=19)
[WRONG] [medium] Pred 9:	b'SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel GROUP BY TV_series.Channel ORDER BY COUNT(*) DESC LIMIT 1' (-2.600) (length=23)
[WRONG] [medium] Pred 10:	b'SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = (SELECT MAX(TV_Channel.Hight_definition_TV) FROM TV_Channel) ORDER BY TV_Channel.Hight_definition_TV DESC LIMIT 1' (-2.610) (length=30)
[WRONG] [medium] Pred 11:	b'SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = (SELECT MAX(TV_Channel.Hight_definition_TV) FROM TV_Channel)' (-3.075) (length=19)
Error Case 199

Example 632
tvshow
 +-- TV_Channel (tv channel)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- series_name (series name)
 |   +-- Country (country)
 |   +-- Language (language)
 |   +-- Content (content)
 |   +-- Pixel_aspect_ratio_PAR (pixel aspect ratio par)
 |   +-- Hight_definition_TV (hight definition tv)
 |   +-- Pay_per_view_PPV (pay per view ppv)
 |   +-- Package_Option (package option)
 +-- TV_series (tv series)
 |   +-- id (id) [PRIMARY]
 |   +-- Episode (episode)
 |   +-- Air_Date (air date)
 |   +-- Rating (rating)
 |   +-- Share (share)
 |   +-- 18_49_Rating_Share (18 49 rating share)
 |   +-- Viewers_m (viewers m)
 |   +-- Weekly_Rank (weekly rank)
 |   +-- Channel (channel) [FOREIGN]
 +-- Cartoon (cartoon)
     +-- id (id) [PRIMARY]
     +-- Title (title)
     +-- Directed_by (directed by)
     +-- Written_by (written by)
     +-- Original_air_date (original air date)
     +-- Production_code (production code)
     +-- Channel (channel) [FOREIGN]
NL: b'What are the package options and the name of the series for the TV Channel that supports high definition TV?'
NL tokens: [b'what', b'are', b'the', b'package', b'options', b'and', b'the', b'name', b'of', b'the', b'series', b'for', b'the', b'tv', b'channel', b'that', b'supports', b'high', b'definition', b'tv', b'?']
NL tokens (original): [b'What', b'are', b'the', b'package', b'options', b'and', b'the', b'name', b'of', b'the', b'series', b'for', b'the', b'TV', b'Channel', b'that', b'supports', b'high', b'definition', b'TV', b'?']
['[CLS]', 'what', 'are', 'the', 'package', 'options', 'and', 'the', 'name', 'of', 'the', 'series', 'for', 'the', 'tv', 'channel', 'that', 'supports', 'high', 'definition', 'tv', '?', '[SEP]', '*', '[unused50]', 'tv', 'channel', '[unused51]', 'id', '[unused51]', 'series', 'name', '[unused51]', 'country', '[unused51]', 'language', '[unused51]', 'content', '[unused51]', 'pixel', 'aspect', 'ratio', 'par', '[unused51]', 'high', '##t', 'definition', 'tv', '[unused51]', 'pay', 'per', 'view', 'pp', '##v', '[unused51]', 'package', 'option', '[unused49]', 'option', '[unused50]', 'tv', 'series', '[unused51]', 'id', '[unused51]', 'episode', '[unused51]', 'air', 'date', '[unused51]', 'rating', '[unused51]', 'share', '[unused51]', '18', '49', 'rating', 'share', '[unused51]', 'viewers', 'm', '[unused51]', 'weekly', 'rank', '[unused51]', 'channel', '[unused50]', 'cartoon', '[unused51]', 'id', '[unused51]', 'title', '[unused51]', 'directed', 'by', '[unused51]', 'written', 'by', '[unused51]', 'original', 'air', 'date', '[unused51]', 'production', 'code', '[unused51]', 'channel', '[SEP]']
Target 0: b'SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"'
Target TF-P tokens: from TV_Channel where TV_Channel.Hight_definition_TV = "yes" select TV_Channel.Package_Option , TV_Channel.series_name

[WRONG] [medium] Pred 0:	b'SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = "TV"' (-0.078) (length=19)
[WRONG] [medium] Pred 1:	b'SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = "high VALUE"' (-0.529) (length=20)
[WRONG] [medium] Pred 2:	b'SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.Hight_definition_TV = "TV"' (-0.584) (length=19)
[WRONG] [medium] Pred 3:	b'SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = "high TV"' (-0.650) (length=20)
[WRONG] [medium] Pred 4:	b'SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.Hight_definition_TV = "high TV"' (-0.723) (length=20)
[WRONG] [medium] Pred 5:	b'SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.Hight_definition_TV = "high VALUE"' (-0.999) (length=20)
[WRONG] [medium] Pred 6:	b'SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = "high"' (-1.735) (length=19)
[WRONG] [medium] Pred 7:	b'SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = "definition TV"' (-1.912) (length=20)
[WRONG] [medium] Pred 8:	b'SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = 1' (-1.990) (length=17)
[WRONG] [medium] Pred 9:	b'SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = "VALUE"' (-2.066) (length=17)
[WRONG] [medium] Pred 10:	b'SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.Hight_definition_TV = "VALUE"' (-2.096) (length=17)
[WRONG] [medium] Pred 11:	b'SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = (SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = "TV")' (-2.180) (length=22)
[WRONG] [medium] Pred 12:	b'SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.Hight_definition_TV = "yes"' (-2.270) (length=19)
[WRONG] [medium] Pred 13:	b'SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.Hight_definition_TV = 1' (-2.395) (length=17)
[WRONG] [medium] Pred 14:	b'SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = "yes"' (-2.445) (length=19)
[CORRE] [medium] Pred 15:	b'SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = "yes"' (-3.085) (length=13)
Error Case 200

ERROR: Join condition does not match with table: ['Cartoon', {'join': 'TV_series', 'on': {'eq': ['Cartoon.Channel', 'Cartoon.id']}}, {'join': 'TV_Channel', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}]
ERROR: Join condition does not match with table: ['Cartoon', {'join': 'TV_series', 'on': {'eq': ['Cartoon.Channel', 'Cartoon.id']}}, {'join': 'TV_Channel', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}]
ERROR: Join condition does not match with table: ['Cartoon', {'join': 'TV_series', 'on': {'eq': ['Cartoon.Channel', 'Cartoon.id']}}, {'join': 'TV_Channel', 'on': {'eq': ['Cartoon.Channel', 'TV_Channel.id']}}]
ERROR: Join condition does not match with table: ['Cartoon', {'join': 'TV_series', 'on': {'eq': ['Cartoon.Channel', 'Cartoon.id']}}, {'join': 'TV_Channel', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}]
ERROR: Join condition does not match with table: ['Cartoon', {'join': 'TV_series', 'on': {'eq': ['Cartoon.Channel', 'Cartoon.id']}}, {'join': 'TV_Channel', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}]
ERROR: Join condition does not match with table: ['Cartoon', {'join': 'TV_series', 'on': {'eq': ['Cartoon.Channel', 'Cartoon.id']}}, {'join': 'TV_Channel', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}]
ERROR: Join condition does not match with table: ['Cartoon', {'join': 'TV_series', 'on': {'eq': ['Cartoon.Channel', 'Cartoon.id']}}, {'join': 'TV_Channel', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}]
Example 634
tvshow
 +-- TV_Channel (tv channel)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- series_name (series name)
 |   +-- Country (country)
 |   +-- Language (language)
 |   +-- Content (content)
 |   +-- Pixel_aspect_ratio_PAR (pixel aspect ratio par)
 |   +-- Hight_definition_TV (hight definition tv)
 |   +-- Pay_per_view_PPV (pay per view ppv)
 |   +-- Package_Option (package option)
 +-- TV_series (tv series)
 |   +-- id (id) [PRIMARY]
 |   +-- Episode (episode)
 |   +-- Air_Date (air date)
 |   +-- Rating (rating)
 |   +-- Share (share)
 |   +-- 18_49_Rating_Share (18 49 rating share)
 |   +-- Viewers_m (viewers m)
 |   +-- Weekly_Rank (weekly rank)
 |   +-- Channel (channel) [FOREIGN]
 +-- Cartoon (cartoon)
     +-- id (id) [PRIMARY]
     +-- Title (title)
     +-- Directed_by (directed by)
     +-- Written_by (written by)
     +-- Original_air_date (original air date)
     +-- Production_code (production code)
     +-- Channel (channel) [FOREIGN]
NL: b'What are the countries that have cartoons on TV that were written by Todd Casey?'
NL tokens: [b'what', b'are', b'the', b'countries', b'that', b'have', b'cartoons', b'on', b'tv', b'that', b'were', b'written', b'by', b'todd', b'casey', b'?']
NL tokens (original): [b'What', b'are', b'the', b'countries', b'that', b'have', b'cartoons', b'on', b'TV', b'that', b'were', b'written', b'by', b'Todd', b'Casey', b'?']
['[CLS]', 'what', 'are', 'the', 'countries', 'that', 'have', 'cartoons', 'on', 'tv', 'that', 'were', 'written', 'by', 'todd', 'casey', '?', '[SEP]', '*', '[unused50]', 'tv', 'channel', '[unused51]', 'id', '[unused51]', 'series', 'name', '[unused51]', 'country', '[unused51]', 'language', '[unused51]', 'content', '[unused51]', 'pixel', 'aspect', 'ratio', 'par', '[unused51]', 'high', '##t', 'definition', 'tv', '[unused51]', 'pay', 'per', 'view', 'pp', '##v', '[unused51]', 'package', 'option', '[unused50]', 'tv', 'series', '[unused51]', 'id', '[unused51]', 'episode', '[unused51]', 'air', 'date', '[unused51]', 'rating', '[unused51]', 'share', '[unused51]', '18', '49', 'rating', 'share', '[unused51]', 'viewers', 'm', '[unused51]', 'weekly', 'rank', '[unused51]', 'channel', '[unused50]', 'cartoon', '[unused51]', 'id', '[unused51]', 'title', '[unused51]', 'directed', 'by', '[unused51]', 'written', 'by', '[unused49]', 'todd', 'casey', '[unused51]', 'original', 'air', 'date', '[unused51]', 'production', 'code', '[unused51]', 'channel', '[SEP]']
Target 0: b"SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
Target TF-P tokens: from TV_Channel join Cartoon on TV_Channel.id = Cartoon.Channel where Cartoon.Written_by = "Todd Casey" select TV_Channel.Country

[WRONG] [medium] Pred 0:	b'SELECT TV_Channel.Country FROM Cartoon JOIN TV_series ON TV_series.Channel = Cartoon.id JOIN TV_Channel ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = "Todd Casey" AND Cartoon.Written_by = "TV"' (-1.472) (length=30)
[WRONG] [medium] Pred 1:	b'SELECT TV_Channel.Country FROM Cartoon JOIN TV_series ON TV_series.Channel = Cartoon.id JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = "Todd Casey" AND Cartoon.Written_by = "TV"' (-1.494) (length=30)
[WRONG] [medium] Pred 2:	b'SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = "Todd Casey" AND Cartoon.Written_by = "TV"' (-1.667) (length=24)
[WRONG] [medium] Pred 3:	b'SELECT TV_Channel.Country FROM Cartoon JOIN TV_series ON TV_series.Channel = Cartoon.id JOIN TV_Channel ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = "Todd Casey" AND TV_Channel.Content = "TV"' (-1.737) (length=30)
[WRONG] [medium] Pred 4:	b'SELECT TV_Channel.Country FROM Cartoon JOIN TV_series ON TV_series.Channel = Cartoon.id JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = "Todd Casey" AND TV_Channel.Content = "TV"' (-1.741) (length=30)
[WRONG] [medium] Pred 5:	b'SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = "Todd Casey" AND TV_Channel.Content = "TV"' (-1.832) (length=24)
[WRONG] [medium] Pred 6:	b'SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = "Todd Casey" AND Cartoon.Written_by = "TV"' (-2.086) (length=24)
[WRONG] [medium] Pred 7:	b'SELECT TV_Channel.Country FROM Cartoon JOIN TV_series ON TV_series.Channel = Cartoon.id JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = "Todd Casey"' (-2.173) (length=24)
[WRONG] [medium] Pred 8:	b'SELECT DISTINCT TV_Channel.Country FROM Cartoon JOIN TV_series ON TV_series.Channel = Cartoon.id JOIN TV_Channel ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = "Todd Casey" AND Cartoon.Written_by = "TV"' (-2.863) (length=31)
Error Case 201

ERROR: table "TV_Channel" in field expression TV_Channel.Country is not in the current scope
Parsing error: from Cartoon select except from *) except from Cartoon where Cartoon.Written_by = "Todd Casey" select Cartoon.Channel
Parsing error: from Cartoon select TV_series except distinct Cartoon.Channel except from Cartoon where Cartoon.Written_by = "Todd Casey" select Cartoon.Channel
Parsing error: from Cartoon select TV_series except distinct Cartoon.Title except from Cartoon where Cartoon.Written_by = "Todd Casey" select Cartoon.Channel
Parsing error: from Cartoon select except from * except from Cartoon where Cartoon.Written_by = "Todd Casey" select Cartoon.Channel
Example 636
tvshow
 +-- TV_Channel (tv channel)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- series_name (series name)
 |   +-- Country (country)
 |   +-- Language (language)
 |   +-- Content (content)
 |   +-- Pixel_aspect_ratio_PAR (pixel aspect ratio par)
 |   +-- Hight_definition_TV (hight definition tv)
 |   +-- Pay_per_view_PPV (pay per view ppv)
 |   +-- Package_Option (package option)
 +-- TV_series (tv series)
 |   +-- id (id) [PRIMARY]
 |   +-- Episode (episode)
 |   +-- Air_Date (air date)
 |   +-- Rating (rating)
 |   +-- Share (share)
 |   +-- 18_49_Rating_Share (18 49 rating share)
 |   +-- Viewers_m (viewers m)
 |   +-- Weekly_Rank (weekly rank)
 |   +-- Channel (channel) [FOREIGN]
 +-- Cartoon (cartoon)
     +-- id (id) [PRIMARY]
     +-- Title (title)
     +-- Directed_by (directed by)
     +-- Written_by (written by)
     +-- Original_air_date (original air date)
     +-- Production_code (production code)
     +-- Channel (channel) [FOREIGN]
NL: b'What are the countries that are not playing cartoons written by Todd Casey?'
NL tokens: [b'what', b'are', b'the', b'countries', b'that', b'are', b'not', b'playing', b'cartoons', b'written', b'by', b'todd', b'casey', b'?']
NL tokens (original): [b'What', b'are', b'the', b'countries', b'that', b'are', b'not', b'playing', b'cartoons', b'written', b'by', b'Todd', b'Casey', b'?']
['[CLS]', 'what', 'are', 'the', 'countries', 'that', 'are', 'not', 'playing', 'cartoons', 'written', 'by', 'todd', 'casey', '?', '[SEP]', '*', '[unused50]', 'tv', 'channel', '[unused51]', 'id', '[unused51]', 'series', 'name', '[unused51]', 'country', '[unused51]', 'language', '[unused51]', 'content', '[unused51]', 'pixel', 'aspect', 'ratio', 'par', '[unused51]', 'high', '##t', 'definition', 'tv', '[unused51]', 'pay', 'per', 'view', 'pp', '##v', '[unused51]', 'package', 'option', '[unused50]', 'tv', 'series', '[unused51]', 'id', '[unused51]', 'episode', '[unused51]', 'air', 'date', '[unused51]', 'rating', '[unused51]', 'share', '[unused51]', '18', '49', 'rating', 'share', '[unused51]', 'viewers', 'm', '[unused51]', 'weekly', 'rank', '[unused51]', 'channel', '[unused50]', 'cartoon', '[unused51]', 'id', '[unused51]', 'title', '[unused51]', 'directed', 'by', '[unused51]', 'written', 'by', '[unused49]', 'todd', 'casey', '[unused51]', 'original', 'air', 'date', '[unused51]', 'production', 'code', '[unused51]', 'channel', '[SEP]']
Target 0: b"SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
Target TF-P tokens: from TV_Channel select TV_Channel.Country except from TV_Channel join Cartoon on TV_Channel.id = Cartoon.Channel where Cartoon.Written_by = "Todd Casey" select TV_Channel.Country

[WRONG] [hard] Pred 0:	b'SELECT TV_Channel.Country FROM TV_Channel EXCEPT SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Written_by = "Todd Casey"' (-4.020) (length=17)
[WRONG] [hard] Pred 1:	b'SELECT Cartoon.Channel FROM Cartoon EXCEPT SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Written_by = "Todd Casey"' (-4.144) (length=17)
[WRONG] [hard] Pred 2:	b'SELECT * FROM Cartoon EXCEPT SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Written_by = "Todd Casey"' (-4.224) (length=17)
[WRONG] [hard] Pred 3:	b'SELECT Cartoon.Original_air_date FROM Cartoon EXCEPT SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Written_by = "Todd Casey"' (-4.245) (length=17)
[WRONG] [hard] Pred 4:	b'SELECT TV_Channel.Country FROM TV_Channel EXCEPT SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Written_by = "Todd Casey"' (-4.527) (length=17)
[WRONG] [hard] Pred 5:	b'SELECT Cartoon.Production_code FROM Cartoon EXCEPT SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Written_by = "Todd Casey"' (-4.589) (length=17)
[WRONG] [hard] Pred 6:	b'SELECT * FROM Cartoon EXCEPT SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Written_by = "Todd Casey"' (-4.597) (length=17)
[WRONG] [hard] Pred 7:	b'SELECT "What" FROM Cartoon EXCEPT SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Written_by = "Todd Casey"' (-4.602) (length=17)
[WRONG] [hard] Pred 8:	b'SELECT Cartoon.Title FROM Cartoon EXCEPT SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Written_by = "Todd Casey"' (-4.661) (length=17)
[WRONG] [hard] Pred 9:	b'SELECT Cartoon.Channel FROM Cartoon EXCEPT SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Written_by = "Todd Casey"' (-4.728) (length=17)
[WRONG] [hard] Pred 10:	b'SELECT Cartoon.Original_air_date FROM Cartoon EXCEPT SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Written_by = "Todd Casey"' (-4.796) (length=17)
Error Case 202

ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_series.id', 'Cartoon.id']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.Viewers_m']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Title']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.Viewers_m']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_series.id', 'Cartoon.id']}}]
ERROR: Join condition does not match with table: ['TV_series', {'join': 'Cartoon', 'on': {'eq': ['TV_series.Channel', 'TV_Channel.id']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.18_49_Rating_Share']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.18_49_Rating_Share']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_Channel.Content']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_series.id', 'Cartoon.id']}}]
Example 637
tvshow
 +-- TV_Channel (tv channel)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- series_name (series name)
 |   +-- Country (country)
 |   +-- Language (language)
 |   +-- Content (content)
 |   +-- Pixel_aspect_ratio_PAR (pixel aspect ratio par)
 |   +-- Hight_definition_TV (hight definition tv)
 |   +-- Pay_per_view_PPV (pay per view ppv)
 |   +-- Package_Option (package option)
 +-- TV_series (tv series)
 |   +-- id (id) [PRIMARY]
 |   +-- Episode (episode)
 |   +-- Air_Date (air date)
 |   +-- Rating (rating)
 |   +-- Share (share)
 |   +-- 18_49_Rating_Share (18 49 rating share)
 |   +-- Viewers_m (viewers m)
 |   +-- Weekly_Rank (weekly rank)
 |   +-- Channel (channel) [FOREIGN]
 +-- Cartoon (cartoon)
     +-- id (id) [PRIMARY]
     +-- Title (title)
     +-- Directed_by (directed by)
     +-- Written_by (written by)
     +-- Original_air_date (original air date)
     +-- Production_code (production code)
     +-- Channel (channel) [FOREIGN]
NL: b'Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?'
NL tokens: [b'find', b'the', b'series', b'name', b'and', b'country', b'of', b'the', b'tv', b'channel', b'that', b'is', b'playing', b'some', b'cartoons', b'directed', b'by', b'ben', b'jones', b'and', b'michael', b'chang', b'?']
NL tokens (original): [b'Find', b'the', b'series', b'name', b'and', b'country', b'of', b'the', b'tv', b'channel', b'that', b'is', b'playing', b'some', b'cartoons', b'directed', b'by', b'Ben', b'Jones', b'and', b'Michael', b'Chang', b'?']
['[CLS]', 'find', 'the', 'series', 'name', 'and', 'country', 'of', 'the', 'tv', 'channel', 'that', 'is', 'playing', 'some', 'cartoons', 'directed', 'by', 'ben', 'jones', 'and', 'michael', 'chang', '?', '[SEP]', '*', '[unused50]', 'tv', 'channel', '[unused51]', 'id', '[unused51]', 'series', 'name', '[unused51]', 'country', '[unused51]', 'language', '[unused51]', 'content', '[unused51]', 'pixel', 'aspect', 'ratio', 'par', '[unused51]', 'high', '##t', 'definition', 'tv', '[unused51]', 'pay', 'per', 'view', 'pp', '##v', '[unused51]', 'package', 'option', '[unused50]', 'tv', 'series', '[unused51]', 'id', '[unused51]', 'episode', '[unused51]', 'air', 'date', '[unused51]', 'rating', '[unused51]', 'share', '[unused51]', '18', '49', 'rating', 'share', '[unused51]', 'viewers', 'm', '[unused51]', 'weekly', 'rank', '[unused51]', 'channel', '[unused50]', 'cartoon', '[unused51]', 'id', '[unused51]', 'title', '[unused51]', 'directed', 'by', '[unused49]', 'michael', 'chang', '[unused49]', 'ben', 'jones', '[unused51]', 'written', 'by', '[unused51]', 'original', 'air', 'date', '[unused51]', 'production', 'code', '[unused51]', 'channel', '[SEP]']
Target 0: b"SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'"
Target TF-P tokens: from TV_Channel join Cartoon on TV_Channel.id = Cartoon.Channel where Cartoon.Directed_by = "Michael Chang" select TV_Channel.series_name , TV_Channel.Country intersect from TV_Channel join Cartoon on TV_Channel.id = Cartoon.Channel where Cartoon.Directed_by = "Ben Jones" select TV_Channel.series_name , TV_Channel.Country

[WRONG] [extra] Pred 0:	b'SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = "Ben Jones" INTERSECT SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.Directed_by = "Michael Chang"' (-0.251) (length=52)
[WRONG] [extra] Pred 1:	b'SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = "Ben Jones" INTERSECT SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = "Michael Chang"' (-0.348) (length=52)
[WRONG] [extra] Pred 2:	b'SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = "Ben Jones" INTERSECT SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Title WHERE Cartoon.Directed_by = "Michael Chang"' (-0.381) (length=52)
[WRONG] [extra] Pred 3:	b'SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.Directed_by = "Ben Jones" INTERSECT SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.Directed_by = "Michael Chang"' (-0.494) (length=52)
 62%|██████▏   | 80/130 [09:57<07:59,  9.60s/it][WRONG] [extra] Pred 4:	b'SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = "Ben Jones" INTERSECT SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.Directed_by = "Michael Chang"' (-0.550) (length=52)
Error Case 203

ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.Viewers_m']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.Viewers_m']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_series.id', 'Cartoon.id']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_Channel.Content']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.18_49_Rating_Share']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.Viewers_m']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_series.id', 'Cartoon.id']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.Viewers_m']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.Viewers_m']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.Viewers_m']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.Viewers_m']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.Viewers_m']}}]
Example 638
tvshow
 +-- TV_Channel (tv channel)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- series_name (series name)
 |   +-- Country (country)
 |   +-- Language (language)
 |   +-- Content (content)
 |   +-- Pixel_aspect_ratio_PAR (pixel aspect ratio par)
 |   +-- Hight_definition_TV (hight definition tv)
 |   +-- Pay_per_view_PPV (pay per view ppv)
 |   +-- Package_Option (package option)
 +-- TV_series (tv series)
 |   +-- id (id) [PRIMARY]
 |   +-- Episode (episode)
 |   +-- Air_Date (air date)
 |   +-- Rating (rating)
 |   +-- Share (share)
 |   +-- 18_49_Rating_Share (18 49 rating share)
 |   +-- Viewers_m (viewers m)
 |   +-- Weekly_Rank (weekly rank)
 |   +-- Channel (channel) [FOREIGN]
 +-- Cartoon (cartoon)
     +-- id (id) [PRIMARY]
     +-- Title (title)
     +-- Directed_by (directed by)
     +-- Written_by (written by)
     +-- Original_air_date (original air date)
     +-- Production_code (production code)
     +-- Channel (channel) [FOREIGN]
NL: b'What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?'
NL tokens: [b'what', b'is', b'the', b'series', b'name', b'and', b'country', b'of', b'all', b'tv', b'channels', b'that', b'are', b'playing', b'cartoons', b'directed', b'by', b'ben', b'jones', b'and', b'cartoons', b'directed', b'by', b'michael', b'chang', b'?']
NL tokens (original): [b'What', b'is', b'the', b'series', b'name', b'and', b'country', b'of', b'all', b'TV', b'channels', b'that', b'are', b'playing', b'cartoons', b'directed', b'by', b'Ben', b'Jones', b'and', b'cartoons', b'directed', b'by', b'Michael', b'Chang', b'?']
['[CLS]', 'what', 'is', 'the', 'series', 'name', 'and', 'country', 'of', 'all', 'tv', 'channels', 'that', 'are', 'playing', 'cartoons', 'directed', 'by', 'ben', 'jones', 'and', 'cartoons', 'directed', 'by', 'michael', 'chang', '?', '[SEP]', '*', '[unused50]', 'tv', 'channel', '[unused51]', 'id', '[unused51]', 'series', 'name', '[unused51]', 'country', '[unused51]', 'language', '[unused51]', 'content', '[unused51]', 'pixel', 'aspect', 'ratio', 'par', '[unused51]', 'high', '##t', 'definition', 'tv', '[unused51]', 'pay', 'per', 'view', 'pp', '##v', '[unused51]', 'package', 'option', '[unused50]', 'tv', 'series', '[unused51]', 'id', '[unused51]', 'episode', '[unused51]', 'air', 'date', '[unused51]', 'rating', '[unused51]', 'share', '[unused51]', '18', '49', 'rating', 'share', '[unused51]', 'viewers', 'm', '[unused51]', 'weekly', 'rank', '[unused51]', 'channel', '[unused50]', 'cartoon', '[unused51]', 'id', '[unused51]', 'title', '[unused51]', 'directed', 'by', '[unused49]', 'michael', 'chang', '[unused49]', 'ben', 'jones', '[unused51]', 'written', 'by', '[unused51]', 'original', 'air', 'date', '[unused51]', 'production', 'code', '[unused51]', 'channel', '[SEP]']
Target 0: b"SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'"
Target TF-P tokens: from TV_Channel join Cartoon on TV_Channel.id = Cartoon.Channel where Cartoon.Directed_by = "Michael Chang" select TV_Channel.series_name , TV_Channel.Country intersect from TV_Channel join Cartoon on TV_Channel.id = Cartoon.Channel where Cartoon.Directed_by = "Ben Jones" select TV_Channel.series_name , TV_Channel.Country

[WRONG] [extra] Pred 0:	b'SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = "Ben Jones" INTERSECT SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.Directed_by = "Michael Chang"' (-0.215) (length=52)
[WRONG] [extra] Pred 1:	b'SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.Directed_by = "Ben Jones" INTERSECT SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.Directed_by = "Michael Chang"' (-0.256) (length=52)
[WRONG] [extra] Pred 2:	b'SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.id WHERE Cartoon.Directed_by = "Ben Jones" INTERSECT SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_series.id = Cartoon.id WHERE Cartoon.Directed_by = "Michael Chang"' (-0.400) (length=52)
Error Case 204

argument of type 'int' is not iterable
Parsing error: from TV_Channel group by TV_Channel group by TV_Channel.id having count (*) > 2 select TV_Channel.id
Parsing error: from TV_Channel group by TV_Channel.id having count (*) having > 2 select TV_Channel.id
Example 642
tvshow
 +-- TV_Channel (tv channel)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- series_name (series name)
 |   +-- Country (country)
 |   +-- Language (language)
 |   +-- Content (content)
 |   +-- Pixel_aspect_ratio_PAR (pixel aspect ratio par)
 |   +-- Hight_definition_TV (hight definition tv)
 |   +-- Pay_per_view_PPV (pay per view ppv)
 |   +-- Package_Option (package option)
 +-- TV_series (tv series)
 |   +-- id (id) [PRIMARY]
 |   +-- Episode (episode)
 |   +-- Air_Date (air date)
 |   +-- Rating (rating)
 |   +-- Share (share)
 |   +-- 18_49_Rating_Share (18 49 rating share)
 |   +-- Viewers_m (viewers m)
 |   +-- Weekly_Rank (weekly rank)
 |   +-- Channel (channel) [FOREIGN]
 +-- Cartoon (cartoon)
     +-- id (id) [PRIMARY]
     +-- Title (title)
     +-- Directed_by (directed by)
     +-- Written_by (written by)
     +-- Original_air_date (original air date)
     +-- Production_code (production code)
     +-- Channel (channel) [FOREIGN]
NL: b'What are the ids of all tv channels that have more than 2 TV channels?'
NL tokens: [b'what', b'are', b'the', b'id', b'##s', b'of', b'all', b'tv', b'channels', b'that', b'have', b'more', b'than', b'2', b'tv', b'channels', b'?']
NL tokens (original): [b'What', b'are', b'the', b'id', b'##s', b'of', b'all', b'tv', b'channels', b'that', b'have', b'more', b'than', b'2', b'TV', b'channels', b'?']
['[CLS]', 'what', 'are', 'the', 'id', '##s', 'of', 'all', 'tv', 'channels', 'that', 'have', 'more', 'than', '2', 'tv', 'channels', '?', '[SEP]', '*', '[unused50]', 'tv', 'channel', '[unused51]', 'id', '[unused51]', 'series', 'name', '[unused51]', 'country', '[unused51]', 'language', '[unused51]', 'content', '[unused51]', 'pixel', 'aspect', 'ratio', 'par', '[unused51]', 'high', '##t', 'definition', 'tv', '[unused51]', 'pay', 'per', 'view', 'pp', '##v', '[unused51]', 'package', 'option', '[unused50]', 'tv', 'series', '[unused51]', 'id', '[unused51]', 'episode', '[unused51]', 'air', 'date', '[unused51]', 'rating', '[unused51]', 'share', '[unused51]', '18', '49', 'rating', 'share', '[unused51]', 'viewers', 'm', '[unused51]', 'weekly', 'rank', '[unused51]', 'channel', '[unused50]', 'cartoon', '[unused51]', 'id', '[unused51]', 'title', '[unused51]', 'directed', 'by', '[unused51]', 'written', 'by', '[unused51]', 'original', 'air', 'date', '[unused51]', 'production', 'code', '[unused51]', 'channel', '[SEP]']
Target 0: b'SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2'
Target TF-P tokens: from TV_Channel group by TV_Channel.Country having count (*) > 2 select TV_Channel.id

[WRONG] [easy] Pred 0:	b'SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING COUNT(*) > 2' (-0.000) (length=14)
[WRONG] [easy] Pred 1:	b'SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING COUNT(*) > 2 INTERSECT SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING COUNT(*) > 2' (-2.608) (length=28)
[WRONG] [easy] Pred 2:	b'SELECT TV_Channel.id FROM TV_Channel GROUP BY "TV_Channel" HAVING COUNT(*) > 2' (-2.705) (length=14)
[WRONG] [easy] Pred 3:	b'SELECT TV_Channel.id FROM TV_Channel INTERSECT SELECT TV_Channel.id FROM TV_Channel GROUP BY "TV_Channel" HAVING COUNT(*) > 2' (-3.015) (length=19)
[WRONG] [easy] Pred 4:	b'SELECT TV_Channel.id FROM TV_Channel UNION SELECT TV_Channel.id FROM TV_Channel GROUP BY "TV_Channel" HAVING COUNT(*) > 2' (-3.107) (length=19)
[WRONG] [easy] Pred 5:	b'SELECT TV_Channel.id FROM TV_Channel UNION SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.Content HAVING COUNT(*) > 2' (-3.721) (length=19)
[WRONG] [easy] Pred 6:	b'SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING COUNT(*) > 2 ORDER BY COUNT(*)' (-3.808) (length=19)
[WRONG] [easy] Pred 7:	b'SELECT TV_Channel.id, COUNT(*) FROM TV_Channel GROUP BY TV_Channel.id HAVING COUNT(*) > 2' (-4.242) (length=19)
[WRONG] [easy] Pred 8:	b'SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING COUNT(*) >= 2' (-4.541) (length=14)
[WRONG] [easy] Pred 9:	b'SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING COUNT(*) < 2' (-4.775) (length=14)
[WRONG] [easy] Pred 10:	b'SELECT TV_Channel.id, TV_Channel.Content FROM TV_Channel GROUP BY TV_Channel.id HAVING COUNT(*) > 2' (-4.860) (length=16)
[WRONG] [easy] Pred 11:	b'SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING COUNT(*) > 2 ORDER BY COUNT(*) DESC' (-4.978) (length=20)
[WRONG] [easy] Pred 12:	b'SELECT TV_Channel.id FROM TV_Channel UNION SELECT TV_Channel.id FROM TV_Channel GROUP BY 2' (-5.050) (length=12)
Error Case 205

ERROR: Join condition does not match with table: ['TV_series', {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}]
ERROR: Join condition does not match with table: ['TV_series', {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}]
ERROR: Join condition does not match with table: ['TV_series', {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}]
ERROR: Join condition does not match with table: ['TV_series', {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}]
Parsing error: from TV_Channel no TV_Channel.id not in (from TV_series join Cartoon on TV_Channel.id = Cartoon.Channel where Cartoon.Directed_by = "Ben Jones" select Cartoon.Channel) select TV_Channel.Package_Option
Parsing error: from TV_Channel and TV_Channel.id not in (from TV_series join Cartoon on TV_Channel.id = Cartoon.Channel where Cartoon.Directed_by = "Ben Jones" select Cartoon.Channel) select TV_Channel.Package_Option
Parsing error: from TV_Channel select TV_Channel.Package_Option except from TV_Channel join Cartoon on TV_Channel.id = Cartoon.Channel limit Cartoon on TV_Channel.id = Cartoon.Title where Cartoon.Directed_by = "Ben Jones" select TV_Channel.Package_Option
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}]
ERROR: Join condition does not match with table: ['TV_series', {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}]
ERROR: Join condition does not match with table: ['TV_series', {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}]
Example 645
tvshow
 +-- TV_Channel (tv channel)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- series_name (series name)
 |   +-- Country (country)
 |   +-- Language (language)
 |   +-- Content (content)
 |   +-- Pixel_aspect_ratio_PAR (pixel aspect ratio par)
 |   +-- Hight_definition_TV (hight definition tv)
 |   +-- Pay_per_view_PPV (pay per view ppv)
 |   +-- Package_Option (package option)
 +-- TV_series (tv series)
 |   +-- id (id) [PRIMARY]
 |   +-- Episode (episode)
 |   +-- Air_Date (air date)
 |   +-- Rating (rating)
 |   +-- Share (share)
 |   +-- 18_49_Rating_Share (18 49 rating share)
 |   +-- Viewers_m (viewers m)
 |   +-- Weekly_Rank (weekly rank)
 |   +-- Channel (channel) [FOREIGN]
 +-- Cartoon (cartoon)
     +-- id (id) [PRIMARY]
     +-- Title (title)
     +-- Directed_by (directed by)
     +-- Written_by (written by)
     +-- Original_air_date (original air date)
     +-- Production_code (production code)
     +-- Channel (channel) [FOREIGN]
NL: b'find the package option of the tv channel that do not have any cartoon directed by Ben Jones.'
NL tokens: [b'find', b'the', b'package', b'option', b'of', b'the', b'tv', b'channel', b'that', b'do', b'not', b'have', b'any', b'cartoon', b'directed', b'by', b'ben', b'jones', b'.']
NL tokens (original): [b'find', b'the', b'package', b'option', b'of', b'the', b'tv', b'channel', b'that', b'do', b'not', b'have', b'any', b'cartoon', b'directed', b'by', b'Ben', b'Jones', b'.']
['[CLS]', 'find', 'the', 'package', 'option', 'of', 'the', 'tv', 'channel', 'that', 'do', 'not', 'have', 'any', 'cartoon', 'directed', 'by', 'ben', 'jones', '.', '[SEP]', '*', '[unused50]', 'tv', 'channel', '[unused51]', 'id', '[unused51]', 'series', 'name', '[unused51]', 'country', '[unused51]', 'language', '[unused51]', 'content', '[unused51]', 'pixel', 'aspect', 'ratio', 'par', '[unused51]', 'high', '##t', 'definition', 'tv', '[unused51]', 'pay', 'per', 'view', 'pp', '##v', '[unused51]', 'package', 'option', '[unused49]', 'option', '[unused50]', 'tv', 'series', '[unused51]', 'id', '[unused51]', 'episode', '[unused51]', 'air', 'date', '[unused51]', 'rating', '[unused51]', 'share', '[unused51]', '18', '49', 'rating', 'share', '[unused51]', 'viewers', 'm', '[unused51]', 'weekly', 'rank', '[unused51]', 'channel', '[unused50]', 'cartoon', '[unused51]', 'id', '[unused51]', 'title', '[unused51]', 'directed', 'by', '[unused49]', 'ben', 'jones', '[unused51]', 'written', 'by', '[unused51]', 'original', 'air', 'date', '[unused51]', 'production', 'code', '[unused51]', 'channel', '[SEP]']
Target 0: b"SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')"
Target TF-P tokens: from TV_Channel where TV_Channel.id not in (from Cartoon where Cartoon.Directed_by = "Ben Jones" select Cartoon.Channel) select TV_Channel.Package_Option

[WRONG] [hard] Pred 0:	b'SELECT TV_Channel.Package_Option FROM TV_Channel EXCEPT SELECT TV_Channel.Package_Option FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = "Ben Jones"' (-0.334) (length=23)
[WRONG] [hard] Pred 1:	b'SELECT TV_Channel.Package_Option FROM TV_Channel EXCEPT SELECT TV_Channel.Package_Option FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Title WHERE Cartoon.Directed_by = "Ben Jones"' (-2.456) (length=29)
[WRONG] [hard] Pred 2:	b'SELECT TV_Channel.Package_Option FROM TV_Channel EXCEPT SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.id IN (SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = "Ben Jones")' (-2.463) (length=26)
[WRONG] [hard] Pred 3:	b'SELECT TV_Channel.Package_Option FROM TV_Channel EXCEPT SELECT TV_Channel.Package_Option FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = "Ben Jones"' (-2.577) (length=29)
[WRONG] [hard] Pred 4:	b'SELECT TV_Channel.Package_Option FROM TV_Channel EXCEPT SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = "Ben Jones"' (-2.645) (length=29)
[WRONG] [hard] Pred 5:	b'SELECT TV_Channel.Package_Option FROM TV_Channel EXCEPT SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Title WHERE Cartoon.Directed_by = "Ben Jones"' (-2.682) (length=29)
Error Case 206

ERROR: Join condition does not match with table: ['TV_series', {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}]
Parsing error: from TV_Channel select TV_Channel.Package_Option except from TV_Channel join Cartoon on TV_Channel.id = Cartoon.Channel limit Cartoon on TV_Channel.id = Cartoon.Title where Cartoon.Directed_by = "Ben Jones" select TV_Channel.Package_Option
ERROR: Join condition does not match with table: ['TV_series', {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'Cartoon.Channel']}}]
ERROR: Join condition does not match with table: ['TV_series', {'join': 'Cartoon', 'on': {'eq': ['Cartoon.Channel', 'TV_Channel.id']}}]
ERROR: Join condition does not match with table: ['TV_Channel', {'join': 'TV_series', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}, {'join': 'Cartoon', 'on': {'eq': ['TV_Channel.id', 'TV_series.Channel']}}]
Parsing error: from TV_Channel select TV_Channel.Package_Option != TV_series join Cartoon on TV_Channel.id = Cartoon.Channel where Cartoon.Directed_by = "Ben Jones" select TV_Channel.Package_Option
Parsing error: from TV_Channel select TV_Channel.Package_Option != TV_series join Cartoon on Cartoon.Channel = TV_Channel.id where Cartoon.Directed_by = "Ben Jones" select TV_Channel.Package_Option
Example 646
tvshow
 +-- TV_Channel (tv channel)
 |   +-- id (id) [PRIMARY] [FOREIGN]
 |   +-- series_name (series name)
 |   +-- Country (country)
 |   +-- Language (language)
 |   +-- Content (content)
 |   +-- Pixel_aspect_ratio_PAR (pixel aspect ratio par)
 |   +-- Hight_definition_TV (hight definition tv)
 |   +-- Pay_per_view_PPV (pay per view ppv)
 |   +-- Package_Option (package option)
 +-- TV_series (tv series)
 |   +-- id (id) [PRIMARY]
 |   +-- Episode (episode)
 |   +-- Air_Date (air date)
 |   +-- Rating (rating)
 |   +-- Share (share)
 |   +-- 18_49_Rating_Share (18 49 rating share)
 |   +-- Viewers_m (viewers m)
 |   +-- Weekly_Rank (weekly rank)
 |   +-- Channel (channel) [FOREIGN]
 +-- Cartoon (cartoon)
     +-- id (id) [PRIMARY]
     +-- Title (title)
     +-- Directed_by (directed by)
     +-- Written_by (written by)
     +-- Original_air_date (original air date)
     +-- Production_code (production code)
     +-- Channel (channel) [FOREIGN]
NL: b'What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?'
NL tokens: [b'what', b'are', b'the', b'package', b'options', b'of', b'all', b'tv', b'channels', b'that', b'are', b'not', b'playing', b'any', b'cartoons', b'directed', b'by', b'ben', b'jones', b'?']
NL tokens (original): [b'What', b'are', b'the', b'package', b'options', b'of', b'all', b'tv', b'channels', b'that', b'are', b'not', b'playing', b'any', b'cartoons', b'directed', b'by', b'Ben', b'Jones', b'?']
['[CLS]', 'what', 'are', 'the', 'package', 'options', 'of', 'all', 'tv', 'channels', 'that', 'are', 'not', 'playing', 'any', 'cartoons', 'directed', 'by', 'ben', 'jones', '?', '[SEP]', '*', '[unused50]', 'tv', 'channel', '[unused51]', 'id', '[unused51]', 'series', 'name', '[unused51]', 'country', '[unused51]', 'language', '[unused51]', 'content', '[unused51]', 'pixel', 'aspect', 'ratio', 'par', '[unused51]', 'high', '##t', 'definition', 'tv', '[unused51]', 'pay', 'per', 'view', 'pp', '##v', '[unused51]', 'package', 'option', '[unused49]', 'option', '[unused50]', 'tv', 'series', '[unused51]', 'id', '[unused51]', 'episode', '[unused51]', 'air', 'date', '[unused51]', 'rating', '[unused51]', 'share', '[unused51]', '18', '49', 'rating', 'share', '[unused51]', 'viewers', 'm', '[unused51]', 'weekly', 'rank', '[unused51]', 'channel', '[unused50]', 'cartoon', '[unused51]', 'id', '[unused51]', 'title', '[unused51]', 'directed', 'by', '[unused49]', 'ben', 'jones', '[unused51]', 'written', 'by', '[unused51]', 'original', 'air', 'date', '[unused51]', 'production', 'code', '[unused51]', 'channel', '[SEP]']
Target 0: b"SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')"
Target TF-P tokens: from TV_Channel where TV_Channel.id not in (from Cartoon where Cartoon.Directed_by = "Ben Jones" select Cartoon.Channel) select TV_Channel.Package_Option

[WRONG] [hard] Pred 0:	b'SELECT TV_Channel.Package_Option FROM TV_Channel EXCEPT SELECT TV_Channel.Package_Option FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = "Ben Jones"' (-0.671) (length=23)
[WRONG] [hard] Pred 1:	b'SELECT TV_Channel.Package_Option FROM TV_Channel EXCEPT SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.id IN (SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = "Ben Jones")' (-2.539) (length=26)
[WRONG] [hard] Pred 2:	b'SELECT TV_Channel.Package_Option FROM TV_Channel EXCEPT SELECT TV_Channel.Package_Option FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Title WHERE Cartoon.Directed_by = "Ben Jones"' (-2.557) (length=29)
 62%|██████▏   | 81/130 [10:07<07:56,  9.72s/it] 63%|██████▎   | 82/130 [10:07<05:32,  6.92s/it] 64%|██████▍   | 83/130 [10:08<03:54,  4.99s/it] 65%|██████▍   | 84/130 [10:10<03:08,  4.09s/it] 65%|██████▌   | 85/130 [10:10<02:15,  3.02s/it] 66%|██████▌   | 86/130 [10:12<01:59,  2.71s/it][WRONG] [hard] Pred 3:	b'SELECT TV_Channel.Package_Option FROM TV_Channel EXCEPT SELECT TV_Channel.Package_Option FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = "Ben Jones"' (-2.715) (length=29)
[WRONG] [hard] Pred 4:	b'SELECT TV_Channel.Package_Option FROM TV_Channel EXCEPT SELECT TV_Channel.Package_Option FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Directed_by WHERE Cartoon.Directed_by = "Ben Jones"' (-2.936) (length=29)
[WRONG] [hard] Pred 5:	b'SELECT TV_Channel.Package_Option FROM TV_Channel EXCEPT SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Title WHERE Cartoon.Directed_by = "Ben Jones"' (-2.983) (length=29)
[WRONG] [hard] Pred 6:	b'SELECT TV_Channel.Package_Option FROM TV_Channel EXCEPT SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = "Ben Jones"' (-2.986) (length=29)
[WRONG] [hard] Pred 7:	b'SELECT TV_Channel.Package_Option != TV_Channel.id FROM TV_Channel EXCEPT SELECT TV_Channel.Package_Option FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = "Ben Jones"' (-3.021) (length=25)
[WRONG] [hard] Pred 8:	b'SELECT TV_Channel.id FROM TV_Channel EXCEPT SELECT TV_Channel.Package_Option FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = "Ben Jones"' (-3.224) (length=23)
Error Case 207

Example 664
poker_player
 +-- poker_player (poker player)
 |   +-- Poker_Player_ID (poker player id) [PRIMARY]
 |   +-- People_ID (people id) [FOREIGN]
 |   +-- Final_Table_Made (final table made)
 |   +-- Best_Finish (best finish)
 |   +-- Money_Rank (money rank)
 |   +-- Earnings (earnings)
 +-- people (people)
     +-- People_ID (people id) [PRIMARY] [FOREIGN]
     +-- Nationality (nationality)
     +-- Name (name)
     +-- Birth_Date (birth date)
     +-- Height (height)
NL: b'What are the names of poker players, ordered ascending by the number of final tables they have made?'
NL tokens: [b'what', b'are', b'the', b'names', b'of', b'poker', b'players', b',', b'ordered', b'ascending', b'by', b'the', b'number', b'of', b'final', b'tables', b'they', b'have', b'made', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'of', b'poker', b'players', b',', b'ordered', b'ascending', b'by', b'the', b'number', b'of', b'final', b'tables', b'they', b'have', b'made', b'?']
['[CLS]', 'what', 'are', 'the', 'names', 'of', 'poker', 'players', ',', 'ordered', 'ascending', 'by', 'the', 'number', 'of', 'final', 'tables', 'they', 'have', 'made', '?', '[SEP]', '*', '[unused50]', 'poker', 'player', '[unused51]', 'poker', 'player', 'id', '[unused51]', 'people', 'id', '[unused51]', 'final', 'table', 'made', '[unused51]', 'best', 'finish', '[unused51]', 'money', 'rank', '[unused51]', 'earnings', '[unused50]', 'people', '[unused51]', 'people', 'id', '[unused51]', 'nationality', '[unused51]', 'name', '[unused51]', 'birth', 'date', '[unused51]', 'height', '[SEP]']
Target 0: b'SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made'
Target TF-P tokens: from people join poker_player on people.People_ID = poker_player.People_ID select people.Name order by poker_player.Final_Table_Made

[WRONG] [medium] Pred 0:	b'SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY people.Name ORDER BY COUNT(*) ASC' (-0.048) (length=19)
[WRONG] [medium] Pred 1:	b'SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY people.Name ORDER BY SUM(poker_player.Final_Table_Made) ASC' (-0.442) (length=19)
[WRONG] [medium] Pred 2:	b'SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY people.Name ORDER BY AVG(poker_player.Final_Table_Made) ASC' (-0.900) (length=19)
[WRONG] [medium] Pred 3:	b'SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY people.Name ORDER BY SUM(poker_player.Final_Table_Made)' (-1.059) (length=18)
[WRONG] [medium] Pred 4:	b'SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID GROUP BY people.Name ORDER BY AVG(poker_player.Final_Table_Made)' (-1.832) (length=18)
[CORRE] [medium] Pred 5:	b'SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Final_Table_Made ASC' (-2.233) (length=14)
Error Case 208

Parsing error: from people select people.Name except from people join poker_player on people.People_ID = poker_player.People_ID where poker_player on people.People_ID = poker_player.People_ID select people.Name
Example 684
poker_player
 +-- poker_player (poker player)
 |   +-- Poker_Player_ID (poker player id) [PRIMARY]
 |   +-- People_ID (people id) [FOREIGN]
 |   +-- Final_Table_Made (final table made)
 |   +-- Best_Finish (best finish)
 |   +-- Money_Rank (money rank)
 |   +-- Earnings (earnings)
 +-- people (people)
     +-- People_ID (people id) [PRIMARY] [FOREIGN]
     +-- Nationality (nationality)
     +-- Name (name)
     +-- Birth_Date (birth date)
     +-- Height (height)
NL: b'What are the names of people who do not play poker?'
NL tokens: [b'what', b'are', b'the', b'names', b'of', b'people', b'who', b'do', b'not', b'play', b'poker', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'of', b'people', b'who', b'do', b'not', b'play', b'poker', b'?']
['[CLS]', 'what', 'are', 'the', 'names', 'of', 'people', 'who', 'do', 'not', 'play', 'poker', '?', '[SEP]', '*', '[unused50]', 'poker', 'player', '[unused51]', 'poker', 'player', 'id', '[unused51]', 'people', 'id', '[unused51]', 'final', 'table', 'made', '[unused51]', 'best', 'finish', '[unused51]', 'money', 'rank', '[unused51]', 'earnings', '[unused50]', 'people', '[unused51]', 'people', 'id', '[unused51]', 'nationality', '[unused51]', 'name', '[unused51]', 'birth', 'date', '[unused51]', 'height', '[SEP]']
Target 0: b'SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)'
Target TF-P tokens: from people where people.People_ID not in (from poker_player select poker_player.People_ID) select people.Name

[WRONG] [hard] Pred 0:	b'SELECT people.Name FROM people EXCEPT SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID' (-0.000) (length=16)
[WRONG] [hard] Pred 1:	b'SELECT people.Name FROM people EXCEPT SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Final_Table_Made = "poker"' (-3.078) (length=22)
[WRONG] [hard] Pred 2:	b'SELECT people.Name FROM people EXCEPT SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID' (-3.467) (length=16)
[WRONG] [hard] Pred 3:	b'SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID EXCEPT SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID' (-3.563) (length=22)
[WRONG] [hard] Pred 4:	b'SELECT people.Name FROM people EXCEPT SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID' (-3.672) (length=18)
[WRONG] [hard] Pred 5:	b'SELECT people.Name FROM people EXCEPT SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Poker_Player_ID = "poker"' (-3.730) (length=22)
[CORRE] [hard] Pred 6:	b'SELECT people.Name FROM people WHERE people.People_ID NOT IN (SELECT poker_player.People_ID FROM poker_player)' (-3.780) (length=15)
Error Case 209

ERROR: Join condition does not match with table: ['VOTES', {'join': 'AREA_CODE_STATE', 'on': {'eq': ['VOTES.state', 'VOTES.contestant_number']}}]
ERROR: Join condition does not match with table: ['VOTES', {'join': 'AREA_CODE_STATE', 'on': {'eq': ['VOTES.state', 'VOTES.contestant_number']}}]
 67%|██████▋   | 87/130 [10:17<02:19,  3.25s/it] 68%|██████▊   | 88/130 [10:19<02:03,  2.93s/it]Parsing error: from VOTES where VOTES.state = "CA" : VOTES.created = (from VOTES where VOTES.state = "CA" select VOTES.created) select VOTES.created
Parsing error: from VOTES where VOTES.state = "CA" select VOTES.created order by VOTES.created desc "1"
Example 691
voter_1
 +-- AREA_CODE_STATE (area code state)
 |   +-- area_code (area code) [PRIMARY]
 |   +-- state (state) [FOREIGN]
 +-- CONTESTANTS (contestants)
 |   +-- contestant_number (contestant number) [PRIMARY] [FOREIGN]
 |   +-- contestant_name (contestant name)
 +-- VOTES (votes)
     +-- vote_id (vote id) [PRIMARY]
     +-- phone_number (phone number)
     +-- state (state) [FOREIGN]
     +-- contestant_number (contestant number) [FOREIGN]
     +-- created (created)
NL: b"What is last date created of votes from the state 'CA'?"
NL tokens: [b'what', b'is', b'last', b'date', b'created', b'of', b'votes', b'from', b'the', b'state', b"'", b'ca', b"'", b'?']
NL tokens (original): [b'What', b'is', b'last', b'date', b'created', b'of', b'votes', b'from', b'the', b'state', b"'", b'CA', b"'", b'?']
['[CLS]', 'what', 'is', 'last', 'date', 'created', 'of', 'votes', 'from', 'the', 'state', "'", 'ca', "'", '?', '[SEP]', '*', '[unused50]', 'area', 'code', 'state', '[unused51]', 'area', 'code', '[unused51]', 'state', '[unused49]', 'ca', '[unused50]', 'contestants', '[unused51]', 'contestant', 'number', '[unused51]', 'contestant', 'name', '[unused50]', 'votes', '[unused51]', 'vote', 'id', '[unused51]', 'phone', 'number', '[unused51]', 'state', '[unused49]', 'ca', '[unused51]', 'contestant', 'number', '[unused51]', 'created', '[SEP]']
Target 0: b"SELECT max(created) FROM votes WHERE state  =  'CA'"
Target TF-P tokens: from VOTES where VOTES.state = "CA" select max (VOTES.created)

[WRONG] [easy] Pred 0:	b'SELECT VOTES.created FROM VOTES WHERE VOTES.state = "CA" ORDER BY VOTES.created DESC LIMIT 1' (-0.000) (length=16)
[WRONG] [easy] Pred 1:	b'SELECT VOTES.created FROM VOTES WHERE VOTES.state = "CA" AND VOTES.created = (SELECT VOTES.created FROM VOTES WHERE VOTES.state = "CA")' (-1.791) (length=26)
[WRONG] [easy] Pred 2:	b'SELECT VOTES.created FROM VOTES WHERE VOTES.state = "CA" AND VOTES.created = (SELECT MAX(VOTES.created) FROM VOTES WHERE VOTES.state = "CA")' (-2.485) (length=29)
[WRONG] [easy] Pred 3:	b'SELECT VOTES.created FROM VOTES WHERE VOTES.state = "CA" ORDER BY VOTES.created ASC LIMIT 1' (-2.677) (length=16)
[WRONG] [easy] Pred 4:	b'SELECT VOTES.created FROM VOTES WHERE VOTES.state = "CA" AND VOTES.created = (SELECT VOTES.state FROM VOTES WHERE VOTES.state = "CA")' (-2.882) (length=26)
[WRONG] [easy] Pred 5:	b'SELECT VOTES.created FROM VOTES WHERE VOTES.state = "CA" ORDER BY VOTES.created UNION SELECT VOTES.created FROM VOTES WHERE VOTES.state = "CA"' (-2.965) (length=24)
[WRONG] [easy] Pred 6:	b'SELECT VOTES.created FROM VOTES JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.area_code WHERE AREA_CODE_STATE.state = "CA" ORDER BY VOTES.created DESC LIMIT 1' (-3.221) (length=22)
[WRONG] [easy] Pred 7:	b'SELECT VOTES.created FROM VOTES WHERE VOTES.state = "CA" GROUP BY VOTES.created ORDER BY COUNT(*) DESC LIMIT 1' (-3.266) (length=21)
[WRONG] [easy] Pred 8:	b'SELECT VOTES.created FROM VOTES JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.area_code WHERE VOTES.state = "CA" ORDER BY VOTES.created DESC LIMIT 1' (-3.267) (length=22)
[WRONG] [easy] Pred 9:	b'SELECT VOTES.created FROM VOTES WHERE VOTES.state = "CA" ORDER BY VOTES.created DESC LIMIT 1' (-3.609) (length=18)
[WRONG] [easy] Pred 10:	b'SELECT VOTES.created FROM VOTES WHERE VOTES.state = "CA" ORDER BY VOTES.created' (-3.634) (length=13)
[WRONG] [easy] Pred 11:	b'SELECT VOTES.created FROM VOTES WHERE VOTES.state = "CA" ORDER BY VOTES.created LIMIT 1' (-3.901) (length=15)
Error Case 210

Example 695
voter_1
 +-- AREA_CODE_STATE (area code state)
 |   +-- area_code (area code) [PRIMARY]
 |   +-- state (state) [FOREIGN]
 +-- CONTESTANTS (contestants)
 |   +-- contestant_number (contestant number) [PRIMARY] [FOREIGN]
 |   +-- contestant_name (contestant name)
 +-- VOTES (votes)
     +-- vote_id (vote id) [PRIMARY]
     +-- phone_number (phone number)
     +-- state (state) [FOREIGN]
     +-- contestant_number (contestant number) [FOREIGN]
     +-- created (created)
NL: b'Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?'
NL tokens: [b'of', b'all', b'the', b'contestants', b'who', b'got', b'voted', b',', b'what', b'is', b'the', b'contestant', b'number', b'and', b'name', b'of', b'the', b'contestant', b'who', b'got', b'least', b'votes', b'?']
NL tokens (original): [b'Of', b'all', b'the', b'contestants', b'who', b'got', b'voted', b',', b'what', b'is', b'the', b'contestant', b'number', b'and', b'name', b'of', b'the', b'contestant', b'who', b'got', b'least', b'votes', b'?']
['[CLS]', 'of', 'all', 'the', 'contestants', 'who', 'got', 'voted', ',', 'what', 'is', 'the', 'contestant', 'number', 'and', 'name', 'of', 'the', 'contestant', 'who', 'got', 'least', 'votes', '?', '[SEP]', '*', '[unused50]', 'area', 'code', 'state', '[unused51]', 'area', 'code', '[unused51]', 'state', '[unused50]', 'contestants', '[unused51]', 'contestant', 'number', '[unused51]', 'contestant', 'name', '[unused50]', 'votes', '[unused51]', 'vote', 'id', '[unused51]', 'phone', 'number', '[unused51]', 'state', '[unused51]', 'contestant', 'number', '[unused51]', 'created', '[SEP]']
Target 0: b'SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1'
Target TF-P tokens: from CONTESTANTS join VOTES on CONTESTANTS.contestant_number = VOTES.contestant_number group by CONTESTANTS.contestant_number select CONTESTANTS.contestant_number , CONTESTANTS.contestant_name order by count (*) asc limit 1

[WRONG] [extra] Pred 0:	b'SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number ORDER BY VOTES.vote_id ASC LIMIT 1' (-0.051) (length=18)
[WRONG] [extra] Pred 1:	b'SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number ORDER BY VOTES.vote_id LIMIT 1' (-0.482) (length=17)
[WRONG] [extra] Pred 2:	b'SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number ORDER BY VOTES.contestant_number ASC LIMIT 1' (-0.883) (length=18)
[CORRE] [extra] Pred 3:	b'SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number GROUP BY CONTESTANTS.contestant_number ORDER BY COUNT(*) ASC LIMIT 1' (-1.247) (length=23)
Error Case 211

ERROR: Join condition does not match with table: ['VOTES', {'join': 'AREA_CODE_STATE', 'on': {'eq': ['VOTES.contestant_number', 'CONTESTANTS.contestant_number']}}]
ERROR: Join condition does not match with table: ['VOTES', {'join': 'AREA_CODE_STATE', 'on': {'eq': ['VOTES.contestant_number', 'CONTESTANTS.contestant_number']}}]
Example 707
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
 68%|██████▊   | 89/130 [10:21<01:52,  2.74s/it]NL: b'How much surface area do the countires in the Carribean cover together?'
NL tokens: [b'how', b'much', b'surface', b'area', b'do', b'the', b'count', b'##ire', b'##s', b'in', b'the', b'carr', b'##ibe', b'##an', b'cover', b'together', b'?']
NL tokens (original): [b'How', b'much', b'surface', b'area', b'do', b'the', b'count', b'##ire', b'##s', b'in', b'the', b'Carr', b'##ibe', b'##an', b'cover', b'together', b'?']
['[CLS]', 'how', 'much', 'surface', 'area', 'do', 'the', 'count', '##ire', '##s', 'in', 'the', 'carr', '##ibe', '##an', 'cover', 'together', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"'
Target TF-P tokens: from country where country.Region = "VALUE" select sum (country.SurfaceArea)

[WRONG] [easy] Pred 0:	b'SELECT COUNT(*) FROM country' (-0.254) (length=8)
[WRONG] [easy] Pred 1:	b'SELECT COUNT(*) FROM country WHERE country.IndepYear = "Carribe VALUE"' (-0.736) (length=16)
[CORRE] [easy] Pred 2:	b'SELECT SUM(country.SurfaceArea) FROM country WHERE country.Region = "Carribe VALUE"' (-0.737) (length=16)
Error Case 212

ERROR: table "city" in field expression city.Name is not in the current scope
ERROR: table "city" in field expression city.Name is not in the current scope
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['country.Code2', 'country.Code']}}]
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['country.GNPOld', 'country.Code']}}]
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['country.GNP', 'country.Code']}}]
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['country.Code', 'country.Code2']}}]
Parsing error: from countrylanguage limit country on countrylanguage.CountryCode = country.Code where country.Name = "Aruba" group by countrylanguage.Language select countrylanguage.Language order by count (*) desc limit 1
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['country.IndepYear', 'country.Code']}}]
Parsing error: from countrylanguage limit country on country.GNPOld = country.Code where country.Name = "Aruba" group by countrylanguage.Language select countrylanguage.Language order by count (*) desc limit 1
Parsing error: from countrylanguage join country on countrylanguage.CountryCode = country.Code where country.Name = "Aruba" VALUE count (*) order by count (*) desc limit 1
Parsing error: from countrylanguage y "group by countrylanguage.Language select countrylanguage.Language order by count (*) desc limit 1"
Example 712
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Which language is the most popular in Aruba?'
NL tokens: [b'which', b'language', b'is', b'the', b'most', b'popular', b'in', b'ar', b'##uba', b'?']
NL tokens (original): [b'Which', b'language', b'is', b'the', b'most', b'popular', b'in', b'Ar', b'##uba', b'?']
['[CLS]', 'which', 'language', 'is', 'the', 'most', 'popular', 'in', 'ar', '##uba', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused49]', 'ar', '##uba', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused49]', 'ar', '##uba', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1'
Target TF-P tokens: from country join countrylanguage on country.Code = countrylanguage.CountryCode where country.Name = "Aruba" select countrylanguage.Language order by countrylanguage.Percentage desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = "Aruba" GROUP BY countrylanguage.Language ORDER BY COUNT(*) DESC LIMIT 1' (-2.029) (length=28)
[WRONG] [extra] Pred 1:	b'SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code2 WHERE country.Name = "Aruba" GROUP BY countrylanguage.Language ORDER BY COUNT(*) DESC LIMIT 1' (-2.326) (length=28)
[WRONG] [extra] Pred 2:	b'SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.LocalName = "Aruba" GROUP BY countrylanguage.Language ORDER BY COUNT(*) DESC LIMIT 1' (-2.826) (length=28)
[WRONG] [extra] Pred 3:	b'SELECT countrylanguage.Language FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.Code2 WHERE country.Name = "Aruba" GROUP BY countrylanguage.Language ORDER BY COUNT(*) DESC LIMIT 1' (-2.884) (length=28)
[WRONG] [extra] Pred 4:	b'SELECT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language ORDER BY COUNT(*) DESC LIMIT 1' (-3.842) (length=15)
[WRONG] [extra] Pred 5:	b'SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = "Aruba" GROUP BY countrylanguage.Language ORDER BY COUNT(*) LIMIT 1' (-4.430) (length=27)
Error Case 213

ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
Parsing error: from country where country.LocalName = "Aruba" y count (*)
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
Parsing error: from country where country.LocalName = "Aruba" VALUE count (*)
Parsing error: from country where country.LocalName = "Aruba" 1 count (*)
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
Example 713
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What language is predominantly spoken in Aruba?'
NL tokens: [b'what', b'language', b'is', b'predominantly', b'spoken', b'in', b'ar', b'##uba', b'?']
NL tokens (original): [b'What', b'language', b'is', b'predominantly', b'spoken', b'in', b'Ar', b'##uba', b'?']
['[CLS]', 'what', 'language', 'is', 'predominantly', 'spoken', 'in', 'ar', '##uba', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused49]', 'ar', '##uba', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused49]', 'ar', '##uba', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1'
Target TF-P tokens: from country join countrylanguage on country.Code = countrylanguage.CountryCode where country.Name = "Aruba" select countrylanguage.Language order by countrylanguage.Percentage desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.LocalName = "Aruba" GROUP BY countrylanguage.Language' (-2.733) (length=20)
[WRONG] [extra] Pred 1:	b'SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.LocalName = "Aruba"' (-3.148) (length=18)
[WRONG] [extra] Pred 2:	b'SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.LocalName = "Aruba" GROUP BY countrylanguage.Language ORDER BY COUNT(*) DESC LIMIT 1' (-3.264) (length=28)
[WRONG] [extra] Pred 3:	b'SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.LocalName = "Aruba" GROUP BY countrylanguage.Language HAVING COUNT(*) = 1' (-3.446) (length=27)
[WRONG] [extra] Pred 4:	b'SELECT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language HAVING COUNT(*) = 1' (-3.926) (length=14)
[WRONG] [extra] Pred 5:	b'SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.LocalName = "Aruba" GROUP BY countrylanguage.Language HAVING AVG(*) = 1' (-4.046) (length=27)
[WRONG] [extra] Pred 6:	b'SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.LocalName = "Aruba" GROUP BY countrylanguage.Language ORDER BY COUNT(*) = 1' (-4.125) (length=27)
[WRONG] [extra] Pred 7:	b'SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.LocalName = "Aruba" GROUP BY countrylanguage.Language HAVING AVG(countrylanguage.Language) = 1' (-4.148) (length=27)
[WRONG] [extra] Pred 8:	b'SELECT countrylanguage.Language, COUNT(*) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.LocalName = "Aruba" GROUP BY countrylanguage.Language' (-4.515) (length=25)
Error Case 214

Example 719
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b"How long is the people's average life expectancy in Central Africa?"
NL tokens: [b'how', b'long', b'is', b'the', b'people', b"'", b's', b'average', b'life', b'expect', b'##ancy', b'in', b'central', b'africa', b'?']
NL tokens (original): [b'How', b'long', b'is', b'the', b'people', b"'", b's', b'average', b'life', b'expect', b'##ancy', b'in', b'Central', b'Africa', b'?']
['[CLS]', 'how', 'long', 'is', 'the', 'people', "'", 's', 'average', 'life', 'expect', '##ancy', 'in', 'central', 'africa', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused49]', 'central', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused49]', 'africa', '[unused51]', 'region', '[unused49]', 'central', 'africa', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"'
Target TF-P tokens: from country where country.Region = "Central Africa" select avg (country.LifeExpectancy)

 69%|██████▉   | 90/130 [10:26<02:13,  3.34s/it] 70%|███████   | 91/130 [10:28<01:59,  3.06s/it][WRONG] [easy] Pred 0:	b'SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent = "Central Africa"' (-0.004) (length=15)
[CORRE] [easy] Pred 1:	b'SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Region = "Central Africa"' (-1.208) (length=15)
Error Case 215

Example 721
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Give the name of the country in Asia with the lowest life expectancy.'
NL tokens: [b'give', b'the', b'name', b'of', b'the', b'country', b'in', b'asia', b'with', b'the', b'lowest', b'life', b'expect', b'##ancy', b'.']
NL tokens (original): [b'Give', b'the', b'name', b'of', b'the', b'country', b'in', b'Asia', b'with', b'the', b'lowest', b'life', b'expect', b'##ancy', b'.']
['[CLS]', 'give', 'the', 'name', 'of', 'the', 'country', 'in', 'asia', 'with', 'the', 'lowest', 'life', 'expect', '##ancy', '.', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused49]', 'asia', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1'
Target TF-P tokens: from country where country.Continent = "Asia" select country.Name order by country.LifeExpectancy limit 1

[WRONG] [hard] Pred 0:	b'SELECT country.Name FROM country WHERE country.Continent = "Asia" AND country.LifeExpectancy = (SELECT MIN(country.LifeExpectancy) FROM country WHERE country.Continent = "Asia")' (-0.006) (length=29)
[CORRE] [hard] Pred 1:	b'SELECT country.Name FROM country WHERE country.Continent = "Asia" ORDER BY country.LifeExpectancy LIMIT 1' (-0.959) (length=15)
Error Case 216

Example 728
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'How many people live in Gelderland district?'
NL tokens: [b'how', b'many', b'people', b'live', b'in', b'gel', b'##der', b'##land', b'district', b'?']
NL tokens (original): [b'How', b'many', b'people', b'live', b'in', b'Gel', b'##der', b'##land', b'district', b'?']
['[CLS]', 'how', 'many', 'people', 'live', 'in', 'gel', '##der', '##land', 'district', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused49]', 'gel', '##der', '##land', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT sum(Population) FROM city WHERE District  =  "Gelderland"'
Target TF-P tokens: from city where city.District = "Gelderland" select sum (city.Population)

[WRONG] [easy] Pred 0:	b'SELECT city.Population FROM city WHERE city.District = "Gelderland"' (-0.000) (length=13)
[CORRE] [easy] Pred 1:	b'SELECT SUM(city.Population) FROM city WHERE city.District = "Gelderland"' (-2.517) (length=16)
Error Case 217

Parsing error: from country join and country.Code = total where country.GovernmentForm = "US" select avg (country.GNP) , avg (country.Population)
Parsing error: from country join total = "average" select avg (country.GNP) , avg (country.Population)
Parsing error: from country join total = "total territory" select avg (country.GNP) , avg (country.Population)
Parsing error: from country join total = "average =" select avg (country.GNP) , avg (country.Population)
Example 730
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What is the average GNP and total population in all nations whose government is US territory?'
NL tokens: [b'what', b'is', b'the', b'average', b'g', b'##np', b'and', b'total', b'population', b'in', b'all', b'nations', b'whose', b'government', b'is', b'us', b'territory', b'?']
NL tokens (original): [b'What', b'is', b'the', b'average', b'G', b'##NP', b'and', b'total', b'population', b'in', b'all', b'nations', b'whose', b'government', b'is', b'US', b'territory', b'?']
 71%|███████   | 92/130 [10:33<02:10,  3.45s/it]['[CLS]', 'what', 'is', 'the', 'average', 'g', '##np', 'and', 'total', 'population', 'in', 'all', 'nations', 'whose', 'government', 'is', 'us', 'territory', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused49]', 'us', 'territory', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused49]', 'us', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"'
Target TF-P tokens: from country where country.GovernmentForm = "US territory" select avg (country.GNP) , sum (country.Population)

[WRONG] [medium] Pred 0:	b'SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.GovernmentForm = "US"' (-0.000) (length=19)
[WRONG] [medium] Pred 1:	b'SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.GovernmentForm = "US VALUE"' (-1.760) (length=20)
[WRONG] [medium] Pred 2:	b'SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.GovernmentForm = "US territory"' (-2.084) (length=20)
[WRONG] [medium] Pred 3:	b'SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.GovernmentForm = "US0"' (-2.329) (length=20)
[WRONG] [medium] Pred 4:	b'SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.GovernmentForm = "US US"' (-2.338) (length=20)
[WRONG] [medium] Pred 5:	b'SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.Continent = "US VALUE"' (-2.706) (length=20)
[WRONG] [medium] Pred 6:	b'SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.GovernmentForm = "US"' (-2.736) (length=24)
[WRONG] [medium] Pred 7:	b'SELECT AVG(country.GNP), AVG(country.Population), SUM(country.Population) FROM country WHERE country.GovernmentForm = "US"' (-2.750) (length=24)
[WRONG] [medium] Pred 8:	b'SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.GovernmentForm = "US :"' (-2.974) (length=20)
[WRONG] [medium] Pred 9:	b'SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.Continent = "US"' (-2.984) (length=19)
[WRONG] [medium] Pred 10:	b'SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.GovernmentForm = "US ="' (-3.089) (length=20)
[CORRE] [medium] Pred 11:	b'SELECT AVG(country.GNP), SUM(country.Population) FROM country WHERE country.GovernmentForm = "US"' (-3.286) (length=19)
Error Case 218

Example 731
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Give the mean GNP and total population of nations which are considered US territory.'
NL tokens: [b'give', b'the', b'mean', b'g', b'##np', b'and', b'total', b'population', b'of', b'nations', b'which', b'are', b'considered', b'us', b'territory', b'.']
NL tokens (original): [b'Give', b'the', b'mean', b'G', b'##NP', b'and', b'total', b'population', b'of', b'nations', b'which', b'are', b'considered', b'US', b'territory', b'.']
['[CLS]', 'give', 'the', 'mean', 'g', '##np', 'and', 'total', 'population', 'of', 'nations', 'which', 'are', 'considered', 'us', 'territory', '.', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused49]', 'us', 'territory', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused49]', 'us', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"'
Target TF-P tokens: from country where country.GovernmentForm = "US territory" select avg (country.GNP) , sum (country.Population)

[WRONG] [medium] Pred 0:	b'SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.GovernmentForm = "US territory"' (-0.046) (length=20)
[WRONG] [medium] Pred 1:	b'SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.Continent = "US territory"' (-0.389) (length=20)
[WRONG] [medium] Pred 2:	b'SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.GovernmentForm = "US US"' (-1.150) (length=20)
[WRONG] [medium] Pred 3:	b'SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.GovernmentForm = "US US VALUE"' (-1.342) (length=21)
[WRONG] [medium] Pred 4:	b'SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.GovernmentForm = "US VALUE"' (-1.422) (length=20)
[WRONG] [medium] Pred 5:	b'SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.Continent = "US US VALUE"' (-1.569) (length=21)
[WRONG] [medium] Pred 6:	b'SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.Continent = "US US"' (-1.594) (length=20)
[WRONG] [medium] Pred 7:	b'SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.Continent = "US VALUE"' (-2.167) (length=20)
[WRONG] [medium] Pred 8:	b'SELECT AVG(country.GNP), AVG(country.Population) FROM country WHERE country.GovernmentForm = "US"' (-2.423) (length=19)
[CORRE] [medium] Pred 9:	b'SELECT AVG(country.GNP), SUM(country.Population) FROM country WHERE country.GovernmentForm = "US territory"' (-2.491) (length=20)
Error Case 219

Example 737
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'How many languages are spoken in Aruba?'
NL tokens: [b'how', b'many', b'languages', b'are', b'spoken', b'in', b'ar', b'##uba', b'?']
NL tokens (original): [b'How', b'many', b'languages', b'are', b'spoken', b'in', b'Ar', b'##uba', b'?']
['[CLS]', 'how', 'many', 'languages', 'are', 'spoken', 'in', 'ar', '##uba', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused49]', 'ar', '##uba', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused49]', 'ar', '##uba', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"'
Target TF-P tokens: from country join countrylanguage on country.Code = countrylanguage.CountryCode where country.Name = "Aruba" select count (countrylanguage.Language)

[WRONG] [medium] Pred 0:	b'SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.LocalName = "Aruba"' (-2.617) (length=22)
[CORRE] [medium] Pred 1:	b'SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = "Aruba"' (-3.031) (length=22)
Error Case 220

ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Continent']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Continent']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Continent']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Continent']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Code2']}}]
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Code2']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.GNPOld']}}]
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.GNPOld']}}]
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
Example 738
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'How many official languages does Afghanistan have?'
NL tokens: [b'how', b'many', b'official', b'languages', b'does', b'afghanistan', b'have', b'?']
NL tokens (original): [b'How', b'many', b'official', b'languages', b'does', b'Afghanistan', b'have', b'?']
['[CLS]', 'how', 'many', 'official', 'languages', 'does', 'afghanistan', 'have', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused49]', 'afghanistan', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"'
Target TF-P tokens: from country join countrylanguage on country.Code = countrylanguage.CountryCode where country.Name = "Afghanistan" and countrylanguage.IsOfficial = "t" select count (*)

[WRONG] [medium] Pred 0:	b'SELECT COUNT(*) FROM country WHERE country.Name = "Afghanistan"' (-0.549) (length=14)
[WRONG] [medium] Pred 1:	b'SELECT COUNT(country.Code) FROM country WHERE country.Name = "Afghanistan"' (-2.722) (length=14)
[WRONG] [medium] Pred 2:	b'SELECT COUNT(countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = "Afghanistan"' (-3.436) (length=20)
[WRONG] [medium] Pred 3:	b'SELECT COUNT(countrylanguage.IsOfficial) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = "Afghanistan"' (-3.544) (length=20)
[WRONG] [medium] Pred 4:	b'SELECT COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = "Afghanistan"' (-3.769) (length=20)
Error Case 221

ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Code2']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Continent']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Code2']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Continent']}}]
Example 739
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'How many official languages are spoken in Afghanistan?'
NL tokens: [b'how', b'many', b'official', b'languages', b'are', b'spoken', b'in', b'afghanistan', b'?']
NL tokens (original): [b'How', b'many', b'official', b'languages', b'are', b'spoken', b'in', b'Afghanistan', b'?']
['[CLS]', 'how', 'many', 'official', 'languages', 'are', 'spoken', 'in', 'afghanistan', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused49]', 'afghanistan', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"'
Target TF-P tokens: from country join countrylanguage on country.Code = countrylanguage.CountryCode where country.Name = "Afghanistan" and countrylanguage.IsOfficial = "t" select count (*)

[WRONG] [medium] Pred 0:	b'SELECT COUNT(*) FROM country WHERE country.Name = "Afghanistan"' (-1.513) (length=14)
[WRONG] [medium] Pred 1:	b'SELECT COUNT(DISTINCT countrylanguage.IsOfficial) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = "Afghanistan"' (-3.337) (length=21)
[WRONG] [medium] Pred 2:	b'SELECT COUNT(countrylanguage.IsOfficial) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = "Afghanistan"' (-3.369) (length=20)
[WRONG] [medium] Pred 3:	b'SELECT COUNT(DISTINCT countrylanguage.IsOfficial) FROM countrylanguage JOIN country ON countrylanguage.Language = country.Code WHERE country.Name = "Afghanistan"' (-3.369) (length=21)
[WRONG] [medium] Pred 4:	b'SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = "Afghanistan"' (-3.553) (length=21)
[WRONG] [medium] Pred 5:	b'SELECT COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = "Afghanistan"' (-3.577) (length=20)
[WRONG] [medium] Pred 6:	b'SELECT COUNT(countrylanguage.IsOfficial) FROM countrylanguage JOIN country ON countrylanguage.Language = country.Code WHERE country.Name = "Afghanistan"' (-3.585) (length=20)
[WRONG] [medium] Pred 7:	b'SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage JOIN country ON countrylanguage.Language = country.Code WHERE country.Name = "Afghanistan"' (-3.629) (length=21)
[WRONG] [medium] Pred 8:	b'SELECT COUNT(*) FROM countrylanguage JOIN country ON countrylanguage.Language = country.Code WHERE country.Name = "Afghanistan"' (-3.632) (length=20)
[WRONG] [medium] Pred 9:	b'SELECT COUNT(*) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = "Afghanistan"' (-3.931) (length=20)
Error Case 222

Example 742
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Which continent has the most diverse languages?'
NL tokens: [b'which', b'continent', b'has', b'the', b'most', b'diverse', b'languages', b'?']
NL tokens (original): [b'Which', b'continent', b'has', b'the', b'most', b'diverse', b'languages', b'?']
['[CLS]', 'which', 'continent', 'has', 'the', 'most', 'diverse', 'languages', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1'
Target TF-P tokens: from country join countrylanguage on country.Code = countrylanguage.CountryCode group by country.Continent select country.Continent order by count (*) desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT country.Continent FROM country GROUP BY country.Continent ORDER BY COUNT(*) DESC LIMIT 1' (-0.003) (length=15)
 72%|███████▏  | 93/130 [10:39<02:37,  4.27s/it][CORRE] [extra] Pred 1:	b'SELECT country.Continent FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Continent ORDER BY COUNT(*) DESC LIMIT 1' (-0.987) (length=21)
Error Case 223

ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: table "countrylanguage" in field expression countrylanguage.Language is not in the current scope
Parsing error: from country join countrylanguage on countrylanguage.CountryCode = countrylanguage.CountryCode where countrylanguage.Language = "English" intersect from countrylanguage where countrylanguage.Language = "Dutch" select count (*)
Parsing error: from country join countrylanguage on countrylanguage.CountryCode = countrylanguage.CountryCode where countrylanguage.Language = "English" intersect "Dutch" select count (*)
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
Parsing error: from countrylanguage where countrylanguage.Language = "English" intersect from countrylanguage where countrylanguage.Language = "Dutch" select count (*)
Parsing error: from country join countrylanguage on country.Code = countrylanguage.CountryCode where countrylanguage.Language = "English" intersect "Dutch" select count (*)
Example 744
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'How many countries speak both English and Dutch?'
NL tokens: [b'how', b'many', b'countries', b'speak', b'both', b'english', b'and', b'dutch', b'?']
NL tokens (original): [b'How', b'many', b'countries', b'speak', b'both', b'English', b'and', b'Dutch', b'?']
['[CLS]', 'how', 'many', 'countries', 'speak', 'both', 'english', 'and', 'dutch', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused49]', 'english', '[unused49]', 'dutch', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")'
Target TF-P tokens: from (from country join countrylanguage on country.Code = countrylanguage.CountryCode where countrylanguage.Language = "English" select country.Name intersect from country join countrylanguage on country.Code = countrylanguage.CountryCode where countrylanguage.Language = "Dutch" select country.Name) select count (*)

[WRONG] [easy] Pred 0:	b'SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.Language = "English" INTERSECT SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.Language = "Dutch"' (-0.442) (length=28)
[WRONG] [easy] Pred 1:	b'SELECT COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = "English" INTERSECT SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.Language = "Dutch"' (-1.272) (length=34)
[WRONG] [easy] Pred 2:	b'SELECT COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = "English"' (-1.433) (length=20)
[WRONG] [easy] Pred 3:	b'SELECT COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = "English" AND countrylanguage.Language = "Dutch"' (-1.615) (length=26)
[WRONG] [easy] Pred 4:	b'SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.Language = "English"' (-1.654) (length=14)
[WRONG] [easy] Pred 5:	b'SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.Language = "English" AND countrylanguage.Language = "Dutch"' (-1.798) (length=20)
[WRONG] [easy] Pred 6:	b'SELECT COUNT(*) FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.Continent WHERE countrylanguage.Language = "English"' (-2.699) (length=20)
Error Case 224

ERROR: table "countrylanguage" in field expression countrylanguage.Language is not in the current scope
Parsing error: from countrylanguage where countrylanguage.Language = "English" intersect from countrylanguage where countrylanguage.Language = "Dutch" select count (*)
ERROR: table "countrylanguage" in field expression countrylanguage.Language is not in the current scope
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
Parsing error: from (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode intersect from country where countrylanguage.Language = "Dutch" select count (*)
ERROR: table "countrylanguage" in field expression countrylanguage.Language is not in the current scope
Parsing error: from (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode intersect from countrylanguage where countrylanguage.Language = "Dutch" select count (*)
Parsing error: from countrylanguage where countrylanguage.Language = "English" select count (*) count (*)
Example 745
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What is the number of nations that use English and Dutch?'
NL tokens: [b'what', b'is', b'the', b'number', b'of', b'nations', b'that', b'use', b'english', b'and', b'dutch', b'?']
NL tokens (original): [b'What', b'is', b'the', b'number', b'of', b'nations', b'that', b'use', b'English', b'and', b'Dutch', b'?']
['[CLS]', 'what', 'is', 'the', 'number', 'of', 'nations', 'that', 'use', 'english', 'and', 'dutch', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused49]', 'english', '[unused49]', 'dutch', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")'
Target TF-P tokens: from (from country join countrylanguage on country.Code = countrylanguage.CountryCode where countrylanguage.Language = "English" select country.Name intersect from country join countrylanguage on country.Code = countrylanguage.CountryCode where countrylanguage.Language = "Dutch" select country.Name) select count (*)

[WRONG] [easy] Pred 0:	b'SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.Language = "English" INTERSECT SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.Language = "Dutch"' (-0.408) (length=28)
[WRONG] [easy] Pred 1:	b'SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.Language = "English"' (-0.494) (length=14)
[WRONG] [easy] Pred 2:	b'SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.Language = "English" AND countrylanguage.Language = "Dutch"' (-0.773) (length=20)
[WRONG] [easy] Pred 3:	b'SELECT COUNT(*) FROM (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English" INTERSECT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "Dutch")' (-1.127) (length=30)
[WRONG] [easy] Pred 4:	b'SELECT COUNT(*) FROM (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English" INTERSECT SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.Language = "Dutch")' (-1.668) (length=33)
[WRONG] [easy] Pred 5:	b'SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.Language = "English" OR countrylanguage.Language = "Dutch"' (-2.095) (length=20)
[WRONG] [easy] Pred 6:	b'SELECT COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = "English" AND countrylanguage.Language = "Dutch"' (-2.134) (length=26)
[WRONG] [easy] Pred 7:	b'SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.Language = "English" UNION SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.Language = "Dutch"' (-2.270) (length=28)
Error Case 225

ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: table "countrylanguage" in field expression countrylanguage.Language is not in the current scope
ERROR: table "countrylanguage" in field expression countrylanguage.Language is not in the current scope
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: table "countrylanguage" in field expression countrylanguage.Language is not in the current scope
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: table "countrylanguage" in field expression countrylanguage.Language is not in the current scope
ERROR: table "countrylanguage" in field expression countrylanguage.Language is not in the current scope
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
Parsing error: from country intersect countrylanguage where countrylanguage.Language = "English" select country.Name intersect from country where countrylanguage.Language = "French" select country.Name
Parsing error: from country intersect countrylanguage where countrylanguage.Language = "English" select country.Name intersect from country where countrylanguage.Language = "official" select country.Name
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Code2']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Code2']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.IsOfficial']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.IsOfficial']}}]
ERROR: table "countrylanguage" in field expression countrylanguage.IsOfficial is not in the current scope
ERROR: table "countrylanguage" in field expression countrylanguage.Language is not in the current scope
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.GNP']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.GNP']}}]
Parsing error: from country except countrylanguage where countrylanguage.Language = "English" select country.Name intersect from country where countrylanguage.Language = "French" select country.Name
Example 748
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What are the names of nations where both English and French are official languages?'
NL tokens: [b'what', b'are', b'the', b'names', b'of', b'nations', b'where', b'both', b'english', b'and', b'french', b'are', b'official', b'languages', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'of', b'nations', b'where', b'both', b'English', b'and', b'French', b'are', b'official', b'languages', b'?']
['[CLS]', 'what', 'are', 'the', 'names', 'of', 'nations', 'where', 'both', 'english', 'and', 'french', 'are', 'official', 'languages', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused49]', 'english', '[unused49]', 'french', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"'
Target TF-P tokens: from country join countrylanguage on country.Code = countrylanguage.CountryCode where countrylanguage.Language = "English" and countrylanguage.IsOfficial = "t" select country.Name intersect from country join countrylanguage on country.Code = countrylanguage.CountryCode where countrylanguage.Language = "French" and countrylanguage.IsOfficial = "t" select country.Name

[WRONG] extra Pred 0:	No valid output! (0.000)
Error Case 226

ERROR: table "countrylanguage" in field expression countrylanguage.Language is not in the current scope
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
Parsing error: from country intersect countrylanguage where countrylanguage.Language = "English" select country.Name intersect from country where countrylanguage.Language = "French" select country.Name
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: table "countrylanguage" in field expression countrylanguage.Language is not in the current scope
ERROR: table "countrylanguage" in field expression countrylanguage.IsOfficial is not in the current scope
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: table "countrylanguage" in field expression countrylanguage.Language is not in the current scope
ERROR: table "countrylanguage" in field expression countrylanguage.Language is not in the current scope
ERROR: table "country" in field expression country.Name is not in the current scope
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
Example 749
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Give the names of countries with English and French as official languages.'
NL tokens: [b'give', b'the', b'names', b'of', b'countries', b'with', b'english', b'and', b'french', b'as', b'official', b'languages', b'.']
NL tokens (original): [b'Give', b'the', b'names', b'of', b'countries', b'with', b'English', b'and', b'French', b'as', b'official', b'languages', b'.']
['[CLS]', 'give', 'the', 'names', 'of', 'countries', 'with', 'english', 'and', 'french', 'as', 'official', 'languages', '.', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused49]', 'english', '[unused49]', 'french', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"'
 72%|███████▏  | 94/130 [10:53<04:21,  7.27s/it]Target TF-P tokens: from country join countrylanguage on country.Code = countrylanguage.CountryCode where countrylanguage.Language = "English" and countrylanguage.IsOfficial = "t" select country.Name intersect from country join countrylanguage on country.Code = countrylanguage.CountryCode where countrylanguage.Language = "French" and countrylanguage.IsOfficial = "t" select country.Name

[WRONG] [extra] Pred 0:	b'SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = "English" INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = "French"' (-1.064) (length=34)
[WRONG] [extra] Pred 1:	b'SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = "English" INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = "French"' (-1.552) (length=34)
[WRONG] [extra] Pred 2:	b'SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = "English" INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.IsOfficial' (-1.671) (length=28)
Error Case 227

ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Code2']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.IsOfficial']}}]
Parsing error: from country intersect countrylanguage on countrylanguage.CountryCode = countrylanguage.CountryCode where countrylanguage.Language = "English" or countrylanguage.Language = "Dutch" select country.Name
Parsing error: from country from countrylanguage on countrylanguage.CountryCode = countrylanguage.CountryCode where countrylanguage.Language = "English" or countrylanguage.Language = "Dutch" select country.Name
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.IndepYear']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Code2']}}]
Parsing error: from country except countrylanguage on countrylanguage.CountryCode = countrylanguage.CountryCode where countrylanguage.Language = "English" or countrylanguage.Language = "Dutch" select country.Name
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
Example 754
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What are the countries where either English or Dutch is the official language ?'
NL tokens: [b'what', b'are', b'the', b'countries', b'where', b'either', b'english', b'or', b'dutch', b'is', b'the', b'official', b'language', b'?']
NL tokens (original): [b'What', b'are', b'the', b'countries', b'where', b'either', b'English', b'or', b'Dutch', b'is', b'the', b'official', b'language', b'?']
['[CLS]', 'what', 'are', 'the', 'countries', 'where', 'either', 'english', 'or', 'dutch', 'is', 'the', 'official', 'language', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused49]', 'english', '[unused49]', 'dutch', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "english" and isofficial  =  "t" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "dutch" and isofficial  =  "t"'
Target TF-P tokens: from country join countrylanguage on country.Code = countrylanguage.CountryCode where countrylanguage.Language = "English" and countrylanguage.IsOfficial = "t" select country.Name union from country join countrylanguage on country.Code = countrylanguage.CountryCode where countrylanguage.Language = "Dutch" and countrylanguage.IsOfficial = "t" select country.Name

[WRONG] [extra] Pred 0:	b'SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = "English" OR countrylanguage.Language = "Dutch"' (-1.416) (length=23)
[WRONG] [extra] Pred 1:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English" OR countrylanguage.Language = "Dutch"' (-1.941) (length=17)
[WRONG] [extra] Pred 2:	b'SELECT country.Name FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = "English" OR countrylanguage.Language = "Dutch"' (-2.759) (length=23)
[WRONG] [extra] Pred 3:	b'SELECT countrylanguage.CountryCode FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = "English" OR countrylanguage.Language = "Dutch"' (-3.099) (length=23)
[WRONG] [extra] Pred 4:	b'SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.IsOfficial WHERE countrylanguage.Language = "English" OR countrylanguage.Language = "Dutch"' (-3.495) (length=23)
[WRONG] [extra] Pred 5:	b'SELECT country.Name FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.IndepYear WHERE countrylanguage.Language = "English" OR countrylanguage.Language = "Dutch"' (-3.506) (length=23)
[WRONG] [extra] Pred 6:	b'SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = "English" OR countrylanguage.IsOfficial = "Dutch"' (-3.812) (length=23)
Error Case 228

ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
Parsing error: from country from countrylanguage on countrylanguage.CountryCode = countrylanguage.CountryCode where countrylanguage.Language = "English" or countrylanguage.Language = "Dutch" select country.Name
Parsing error: from country on country.Name union from countrylanguage where countrylanguage.Language = "English" or countrylanguage.Language = "Dutch" select country.Name
Parsing error: from country intersect countrylanguage on countrylanguage.CountryCode = countrylanguage.CountryCode where countrylanguage.Language = "English" or countrylanguage.Language = "Dutch" select country.Name
ERROR: invalid JOIN field "either": ['country', {'join': 'countrylanguage', 'on': {'or': [{'eq': ['countrylanguage.CountryCode', 'either']}, {'eq': ['countrylanguage.Language', 'English']}, {'eq': ['countrylanguage.Language', 'Dutch']}]}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Code2']}}]
Parsing error: from country except countrylanguage on countrylanguage.CountryCode = countrylanguage.CountryCode where countrylanguage.Language = "English" or countrylanguage.Language = "Dutch" select country.Name
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.IndepYear']}}]
ERROR: invalid JOIN field "either": ['country', {'join': 'countrylanguage', 'on': {'or': [{'eq': ['countrylanguage.CountryCode', 'either']}, {'eq': ['countrylanguage.Language', 'English']}, {'eq': ['countrylanguage.IsOfficial', 'Dutch']}]}}]
Parsing error: from country on country.Name union from countrylanguage where countrylanguage.Language = "English" or countrylanguage.IsOfficial = "Dutch" select country.Name
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.GNP']}}]
Example 755
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Which countries have either English or Dutch as an official language?'
NL tokens: [b'which', b'countries', b'have', b'either', b'english', b'or', b'dutch', b'as', b'an', b'official', b'language', b'?']
NL tokens (original): [b'Which', b'countries', b'have', b'either', b'English', b'or', b'Dutch', b'as', b'an', b'official', b'language', b'?']
['[CLS]', 'which', 'countries', 'have', 'either', 'english', 'or', 'dutch', 'as', 'an', 'official', 'language', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused49]', 'english', '[unused49]', 'dutch', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND IsOfficial  =  "T" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch" AND IsOfficial  =  "T"'
Target TF-P tokens: from country join countrylanguage on country.Code = countrylanguage.CountryCode where countrylanguage.Language = "English" and countrylanguage.IsOfficial = "t" select * union from country join countrylanguage on country.Code = countrylanguage.CountryCode where countrylanguage.Language = "Dutch" and countrylanguage.IsOfficial = "t" select *

[WRONG] [extra] Pred 0:	b'SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = "English" OR countrylanguage.Language = "Dutch"' (-0.775) (length=23)
[WRONG] [extra] Pred 1:	b'SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = "English" OR countrylanguage.IsOfficial = "Dutch"' (-2.508) (length=23)
[WRONG] [extra] Pred 2:	b'SELECT country.Name FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = "English" OR countrylanguage.Language = "Dutch"' (-3.222) (length=23)
[WRONG] [extra] Pred 3:	b'SELECT country.Name FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.Continent WHERE countrylanguage.Language = "English" OR countrylanguage.Language = "Dutch"' (-3.371) (length=23)
Error Case 229

ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Capital']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Code2']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.Language']}}]
ERROR: invalid JOIN field "country": ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country']}}]
ERROR: invalid JOIN field "country": ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'country']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.IndepYear']}}]
Example 758
 73%|███████▎  | 95/130 [11:04<04:48,  8.23s/it]world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Which languages are spoken by only one country in republic governments?'
NL tokens: [b'which', b'languages', b'are', b'spoken', b'by', b'only', b'one', b'country', b'in', b'republic', b'governments', b'?']
NL tokens (original): [b'Which', b'languages', b'are', b'spoken', b'by', b'only', b'one', b'country', b'in', b'republic', b'governments', b'?']
['[CLS]', 'which', 'languages', 'are', 'spoken', 'by', 'only', 'one', 'country', 'in', 'republic', 'governments', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused49]', 'republic', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1'
Target TF-P tokens: from country join countrylanguage on country.Code = countrylanguage.CountryCode where country.GovernmentForm = "republic" group by countrylanguage.Language having count (*) = 1 select countrylanguage.Language

[WRONG] [hard] Pred 0:	b'SELECT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language HAVING COUNT(*) = 1' (-0.000) (length=14)
[WRONG] [hard] Pred 1:	b'SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY countrylanguage.Language HAVING COUNT(*) = 1' (-2.162) (length=20)
[WRONG] [hard] Pred 2:	b'SELECT countrylanguage.Language FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.Code2 GROUP BY countrylanguage.Language HAVING COUNT(*) = 1' (-2.899) (length=20)
[WRONG] [hard] Pred 3:	b'SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.Language = country.Code GROUP BY countrylanguage.Language HAVING COUNT(*) = 1' (-2.981) (length=20)
[WRONG] [hard] Pred 4:	b'SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.Language GROUP BY countrylanguage.Language HAVING COUNT(*) = 1' (-3.006) (length=20)
[WRONG] [hard] Pred 5:	b'SELECT countrylanguage.Language FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.Capital GROUP BY countrylanguage.Language HAVING COUNT(*) = 1' (-3.090) (length=20)
[WRONG] [hard] Pred 6:	b'SELECT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language ORDER BY COUNT(*) = 1' (-4.311) (length=14)
[WRONG] [hard] Pred 7:	b'SELECT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language HAVING COUNT(*) = "one"' (-4.455) (length=14)
[WRONG] [hard] Pred 8:	b'SELECT DISTINCT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language HAVING COUNT(*) = 1' (-4.504) (length=15)
Error Case 230

ERROR: table "city" in field expression city.Population is not in the current scope
Parsing error: from city where city.Population = (from city where city.ID = (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select max (city.Population)) and largest (city.Population) order by city.Population desc limit 1
Parsing error: from city where city.Population = (from city where city.ID = (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select max (city.Population)) and the (city.Population) order by city.Population desc limit 1
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'city', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: table "city" in field expression city.ID is not in the current scope
ERROR: invalid JOIN field "largest": ['countrylanguage', {'join': 'city', 'on': {'eq': ['largest', 'city.ID']}}]
Parsing error: from city where city.Population = (from city where city.ID = (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select max (city.Population)) and largest "largest" select city.Name
Parsing error: from city where city.Population = (from city where city.ID = (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select max (city.Population)) and largest "English" select city.Name
Parsing error: from city where city.Population = (from city where city.Population = (from countrylanguage join countrylanguage on countrylanguage.CountryCode = countrylanguage.CountryCode where countrylanguage.Language = "English" select max (city.Population)) select city.Name
Example 760
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Find the city with the largest population that uses English.'
NL tokens: [b'find', b'the', b'city', b'with', b'the', b'largest', b'population', b'that', b'uses', b'english', b'.']
NL tokens (original): [b'Find', b'the', b'city', b'with', b'the', b'largest', b'population', b'that', b'uses', b'English', b'.']
['[CLS]', 'find', 'the', 'city', 'with', 'the', 'largest', 'population', 'that', 'uses', 'english', '.', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused49]', 'english', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1'
Target TF-P tokens: from city join countrylanguage on city.CountryCode = countrylanguage.CountryCode where countrylanguage.Language = "English" select city.Name , city.Population order by city.Population desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT city.Name FROM city WHERE city.Population = (SELECT MAX(city.Population) FROM city WHERE city.ID = (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")) AND city.ID = (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")' (-1.228) (length=47)
[WRONG] [extra] Pred 1:	b'SELECT city.Name FROM city WHERE city.Population = (SELECT MAX(city.Population) FROM city WHERE city.ID = (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")) AND LARGEST(city.Population) = (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")' (-1.459) (length=50)
[WRONG] [extra] Pred 2:	b'SELECT city.Name FROM city WHERE city.Population = (SELECT MAX(city.Population) FROM countrylanguage JOIN city ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = "English")' (-1.690) (length=29)
[WRONG] [extra] Pred 3:	b'SELECT city.Name FROM city WHERE city.Population = (SELECT MAX(city.Population) FROM city WHERE city.ID = (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")) AND LARGEST(city.Population) = 1' (-1.692) (length=39)
[WRONG] [extra] Pred 4:	b'SELECT city.Name FROM city WHERE city.Population = (SELECT MAX(city.Population) FROM city WHERE city.ID = (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")) AND THE(city.Population) = 1' (-1.800) (length=39)
[WRONG] [extra] Pred 5:	b'SELECT city.Name FROM city WHERE city.Population = (SELECT MAX(city.Population) FROM city WHERE city.ID = (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English"))' (-1.816) (length=32)
[WRONG] [extra] Pred 6:	b'SELECT city.Name FROM city WHERE city.Population = (SELECT MAX(city.Population) FROM city WHERE city.CountryCode = "English")' (-1.838) (length=23)
Error Case 231

ERROR: table "city" in field expression city.Population is not in the current scope
ERROR: invalid JOIN field "most": ['countrylanguage', {'join': 'city', 'on': {'eq': ['most', 'city.ID']}}]
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'city', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
Parsing error: from city where city.Population = (from city where city.Population = (from countrylanguage join countrylanguage on countrylanguage.CountryCode = countrylanguage.CountryCode where countrylanguage.Language = "English" select max (city.Population)) select city.Name
Parsing error: from city where city.Population = (from countrylanguage join city on most = city.ID where countrylanguage.Language = "English" select city.Name) select max (city.Population)) and city.ID = (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select city.Name
ERROR: table "city" in field expression city.ID is not in the current scope
Parsing error: from city where city.Population = (from city where city.Population = (from countrylanguage join city on countrylanguage.CountryCode = countrylanguage.CountryCode where countrylanguage.Language = "English" select max (city.Population)) select city.Name
Parsing error: from city where city.Population = (from city where city.ID = (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select max (city.Population)) and most "English" select city.Name
ERROR: invalid JOIN field "populace": ['countrylanguage', {'join': 'city', 'on': {'eq': ['populace', 'city.ID']}}]
ERROR: invalid JOIN field "What": ['countrylanguage', {'join': 'city', 'on': {'eq': ['What', 'city.ID']}}]
ERROR: invalid JOIN field "most": ['countrylanguage', {'join': 'city', 'on': {'eq': ['most', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'city', 'on': {'eq': ['city.CountryCode', 'city.ID']}}]
Example 761
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What is the most populace city that speaks English?'
NL tokens: [b'what', b'is', b'the', b'most', b'populace', b'city', b'that', b'speaks', b'english', b'?']
NL tokens (original): [b'What', b'is', b'the', b'most', b'populace', b'city', b'that', b'speaks', b'English', b'?']
['[CLS]', 'what', 'is', 'the', 'most', 'populace', 'city', 'that', 'speaks', 'english', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused49]', 'english', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1'
Target TF-P tokens: from city join countrylanguage on city.CountryCode = countrylanguage.CountryCode where countrylanguage.Language = "English" select city.Name , city.Population order by city.Population desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT city.Name FROM city WHERE city.Population = (SELECT MAX(city.Population) FROM city WHERE city.ID = (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")) AND city.ID = (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")' (-0.577) (length=47)
[WRONG] [extra] Pred 1:	b'SELECT city.Name FROM city WHERE city.Population = (SELECT MAX(city.Population) FROM city WHERE city.ID = (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")) AND city.Name = "English"' (-0.864) (length=38)
[WRONG] [extra] Pred 2:	b'SELECT city.Name FROM city WHERE city.Population = (SELECT MAX(city.Population) FROM countrylanguage JOIN city ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = "English")' (-0.977) (length=29)
[WRONG] [extra] Pred 3:	b'SELECT city.Name FROM city WHERE city.Population = (SELECT MAX(city.Population) FROM countrylanguage JOIN city ON countrylanguage.CountryCode = city.CountryCode WHERE countrylanguage.Language = "English")' (-1.171) (length=29)
Error Case 232

ERROR: Join condition does not match with table: ['country', {'join': 'city', 'on': {'eq': ['country.Code', 'country.GNPOld']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'city', 'on': {'eq': ['country.Code', 'country.GNP']}}]
Parsing error: from country where country.Continent = "asian" and country.LifeExpectancy = (from country and country.Continent = "asian" select max (country.Region)) select country.Name , country.Population , country.LifeExpectancy
ERROR: Join condition does not match with table: ['country', {'join': 'city', 'on': {'eq': ['country.Code', 'country.GNPOld']}}]
Parsing error: from country join country.Continent = "asian" and country.LifeExpectancy = (from country where country.Continent = "asian" select max (country.Region)) select country.Name , country.Population , country.LifeExpectancy
Parsing error: from country where country.Continent = "asian" and country.LifeExpectancy = (from country where country.Continent = "asian" select max (country.Region)) select country.Name , country.Population avg country.LifeExpectancy
Example 762
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Find the name, population and expected life length of asian country with the largest area?'
NL tokens: [b'find', b'the', b'name', b',', b'population', b'and', b'expected', b'life', b'length', b'of', b'asian', b'country', b'with', b'the', b'largest', b'area', b'?']
NL tokens (original): [b'Find', b'the', b'name', b',', b'population', b'and', b'expected', b'life', b'length', b'of', b'asian', b'country', b'with', b'the', b'largest', b'area', b'?']
['[CLS]', 'find', 'the', 'name', ',', 'population', 'and', 'expected', 'life', 'length', 'of', 'asian', 'country', 'with', 'the', 'largest', 'area', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused49]', 'asia', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1'
Target TF-P tokens: from country where country.Continent = "VALUE" select country.Name , country.Population , country.LifeExpectancy order by country.SurfaceArea desc limit 1

[WRONG] [hard] Pred 0:	b'SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = "asian" AND country.LifeExpectancy = (SELECT MAX(country.Region) FROM country WHERE country.Continent = "asian")' (-0.000) (length=33)
[WRONG] [hard] Pred 1:	b'SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = "asian" AND country.LifeExpectancy = (SELECT MAX(country.LifeExpectancy) FROM country WHERE country.Continent = "asian")' (-1.002) (length=33)
[WRONG] [hard] Pred 2:	b'SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = "asian" AND country.Population = (SELECT MAX(country.Region) FROM country WHERE country.Continent = "asian")' (-1.360) (length=33)
[WRONG] [hard] Pred 3:	b'SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = "asian" AND country.Region = (SELECT MAX(country.Region) FROM country WHERE country.Continent = "asian")' (-1.494) (length=33)
[WRONG] [hard] Pred 4:	b'SELECT country.Name, country.Population FROM country WHERE country.Continent = "asian" AND country.LifeExpectancy = (SELECT MAX(country.Region) FROM country WHERE country.Continent = "asian")' (-1.572) (length=31)
[WRONG] [hard] Pred 5:	b'SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = "asian" AND country.LifeExpectancy = (SELECT MAX(country.Population) FROM country WHERE country.Continent = "asian")' (-2.060) (length=33)
[WRONG] [hard] Pred 6:	b'SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = "asian" AND country.LifeExpectancy <= (SELECT MAX(country.Region) FROM country WHERE country.Continent = "asian")' (-2.061) (length=33)
[WRONG] [hard] Pred 7:	b'SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = "asian" AND country.LifeExpectancy = (SELECT MIN(country.Region) FROM country WHERE country.Continent = "asian")' (-2.217) (length=33)
[WRONG] [hard] Pred 8:	b'SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = "asian" AND country.LifeExpectancy = (SELECT MAX(country.Region) FROM country GROUP BY country.Continent)' (-2.241) (length=29)
[WRONG] [hard] Pred 9:	b'SELECT country.Name, country.Population, country.GNPOld FROM country WHERE country.Continent = "asian" AND country.LifeExpectancy = (SELECT MAX(country.Region) FROM country WHERE country.Continent = "asian")' (-2.318) (length=33)
Error Case 233

ERROR: Join condition does not match with table: ['country', {'join': 'city', 'on': {'eq': ['country.Code', 'country.GNP']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'city', 'on': {'eq': ['country.Code', 'country.GNP']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'city', 'on': {'eq': ['country.Code', 'country.GNPOld']}}, {'join': 'country', 'on': {'eq': ['country.Code', 'country.GNP']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'city', 'on': {'eq': ['country.Code', 'country.GNP']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'city', 'on': {'eq': ['country.Code', 'country.GNPOld']}}, {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'city', 'on': {'eq': ['country.Code', 'country.GNPOld']}}, {'join': 'country', 'on': {'eq': ['country.Code', 'country.GNP']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'city', 'on': {'eq': ['country.Code', 'country.GNPOld']}}, {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.GNP']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'city', 'on': {'eq': ['country.Code', 'country.GNPOld']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'city', 'on': {'eq': ['country.Code', 'country.GNPOld']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'city', 'on': {'eq': ['country.Code', 'country.GNPOld']}}, {'join': 'country', 'on': {'eq': ['country.Code', 'country.GNP']}}]
Parsing error: from country where country.Continent = "Asian" select country.Name , country.Population , country.LifeExpectancy order by country.Continent = "Asian" select country.Name , country.Population , country.LifeExpectancy
ERROR: Join condition does not match with table: ['country', {'join': 'city', 'on': {'eq': ['country.Code', 'country.GNP']}}]
Example 763
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What are the name, population, and life expectancy of the largest Asian country by land?'
NL tokens: [b'what', b'are', b'the', b'name', b',', b'population', b',', b'and', b'life', b'expect', b'##ancy', b'of', b'the', b'largest', b'asian', b'country', b'by', b'land', b'?']
NL tokens (original): [b'What', b'are', b'the', b'name', b',', b'population', b',', b'and', b'life', b'expect', b'##ancy', b'of', b'the', b'largest', b'Asian', b'country', b'by', b'land', b'?']
['[CLS]', 'what', 'are', 'the', 'name', ',', 'population', ',', 'and', 'life', 'expect', '##ancy', 'of', 'the', 'largest', 'asian', 'country', 'by', 'land', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused49]', 'asia', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1'
Target TF-P tokens: from country where country.Continent = "VALUE" select country.Name , country.Population , country.LifeExpectancy order by country.SurfaceArea desc limit 1

[WRONG] [hard] Pred 0:	b'SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = "Asian" ORDER BY country.LifeExpectancy DESC LIMIT 1' (-0.126) (length=20)
[WRONG] [hard] Pred 1:	b'SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = "Asian" ORDER BY country.Population DESC LIMIT 1' (-0.266) (length=20)
[WRONG] [hard] Pred 2:	b'SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = "Asian" ORDER BY country.Region DESC LIMIT 1' (-0.465) (length=20)
[WRONG] [hard] Pred 3:	b'SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = "Asian" ORDER BY country.Continent,country.Population DESC LIMIT 1' (-1.442) (length=22)
Error Case 234

Parsing error: from country where country.Continent is in (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select avg (country.LifeExpectancy)
ERROR: table "country" in field expression country.Code is not in the current scope
ERROR: table "country" in field expression country.Continent is not in the current scope
ERROR: table "country" in field expression country.Code is not in the current scope
Parsing error: from country where country.Continent not = "English" select avg (country.LifeExpectancy)
Parsing error: from country where country.Continent is = "English" select avg (country.LifeExpectancy)
Example 764
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What is average life expectancy in the countries where English is not the official language?'
NL tokens: [b'what', b'is', b'average', b'life', b'expect', b'##ancy', b'in', b'the', b'countries', b'where', b'english', b'is', b'not', b'the', b'official', b'language', b'?']
NL tokens (original): [b'What', b'is', b'average', b'life', b'expect', b'##ancy', b'in', b'the', b'countries', b'where', b'English', b'is', b'not', b'the', b'official', b'language', b'?']
['[CLS]', 'what', 'is', 'average', 'life', 'expect', '##ancy', 'in', 'the', 'countries', 'where', 'english', 'is', 'not', 'the', 'official', 'language', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused49]', 'english', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")'
Target TF-P tokens: from country where country.Name not in (from country join countrylanguage on country.Code = countrylanguage.CountryCode where countrylanguage.Language = "English" and countrylanguage.IsOfficial = "t" select country.Name) select avg (country.LifeExpectancy)

[WRONG] [extra] Pred 0:	b'SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")' (-0.726) (length=24)
[WRONG] [extra] Pred 1:	b'SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent = "English"' (-1.330) (length=14)
[WRONG] [extra] Pred 2:	b'SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Code NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")' (-1.469) (length=24)
[WRONG] [extra] Pred 3:	b'SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Name NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")' (-1.548) (length=24)
[WRONG] [extra] Pred 4:	b'SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "official")' (-1.585) (length=24)
[WRONG] [extra] Pred 5:	b'SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent != "English"' (-1.999) (length=14)
[WRONG] [extra] Pred 6:	b'SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Name NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "official")' (-2.219) (length=24)
[WRONG] [extra] Pred 7:	b'SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent = "English"' (-2.307) (length=14)
[WRONG] [extra] Pred 8:	b'SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "the")' (-2.427) (length=24)
[WRONG] [extra] Pred 9:	b'SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Name = "English"' (-3.184) (length=14)
Error Case 235

ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
Parsing error: from country where country.Continent is in (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select avg (country.LifeExpectancy)
Parsing error: from country where country.Continent is in (from countrylanguage where countrylanguage.Language = "official" select countrylanguage.CountryCode) select avg (country.LifeExpectancy)
Parsing error: from country where country.Continent not = "English" select avg (country.LifeExpectancy)
Parsing error: from country from countrylanguage where countrylanguage.Language = "English" select avg (country.LifeExpectancy)
Parsing error: from country where country.Continent is = "English" select avg (country.LifeExpectancy)
Example 765
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Give the mean life expectancy of countries in which English is not the official language.'
NL tokens: [b'give', b'the', b'mean', b'life', b'expect', b'##ancy', b'of', b'countries', b'in', b'which', b'english', b'is', b'not', b'the', b'official', b'language', b'.']
NL tokens (original): [b'Give', b'the', b'mean', b'life', b'expect', b'##ancy', b'of', b'countries', b'in', b'which', b'English', b'is', b'not', b'the', b'official', b'language', b'.']
['[CLS]', 'give', 'the', 'mean', 'life', 'expect', '##ancy', 'of', 'countries', 'in', 'which', 'english', 'is', 'not', 'the', 'official', 'language', '.', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused49]', 'english', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")'
Target TF-P tokens: from country where country.Name not in (from country join countrylanguage on country.Code = countrylanguage.CountryCode where countrylanguage.Language = "English" and countrylanguage.IsOfficial = "t" select country.Name) select avg (country.LifeExpectancy)

[WRONG] [extra] Pred 0:	b'SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")' (-2.061) (length=24)
[WRONG] [extra] Pred 1:	b'SELECT AVG(country.LifeExpectancy) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = "English"' (-2.538) (length=20)
[WRONG] [extra] Pred 2:	b'SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "official")' (-2.738) (length=24)
[WRONG] [extra] Pred 3:	b'SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent != "English"' (-3.039) (length=14)
[WRONG] [extra] Pred 4:	b'SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent = "English"' (-3.115) (length=14)
[WRONG] [extra] Pred 5:	b'SELECT AVG(country.LifeExpectancy) FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.Continent WHERE countrylanguage.Language = "English"' (-3.199) (length=20)
[WRONG] [extra] Pred 6:	b'SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "the official")' (-3.711) (length=25)
[WRONG] [extra] Pred 7:	b'SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent = "English"' (-3.853) (length=14)
[WRONG] [extra] Pred 8:	b'SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Continent IS NULL' (-4.515) (length=12)
[WRONG] [extra] Pred 9:	b'SELECT AVG(country.LifeExpectancy) FROM country WHERE country.GNP IS NULL' (-4.588) (length=12)
Error Case 236

ERROR: table "country" in field expression country.Continent is not in the current scope
ERROR: table "country" in field expression country.Code is not in the current scope
Parsing error: from country where country.Continent not = (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select sum (country.Population)
ERROR: table "countrylanguage" in field expression countrylanguage.CountryCode is not in the current scope
Parsing error: from country where country.Continent is in (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select sum (country.Population)
Parsing error: from country where country.Continent not in (from countrylanguage where countrylanguage.Language = "English" select country) select countrylanguage.CountryCode) select sum (country.Population)
Parsing error: from country where country.Continent except (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select sum (country.Population)
Parsing error: from country where country.Continent not = (from countrylanguage where countrylanguage.Language = "English" select country.Continent) select sum (country.Population)
Parsing error: from country where country.Continent having in (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select sum (country.Population)
ERROR: table "country" in field expression country.Continent is not in the current scope
Parsing error: from country where country.Continent not = "English" select sum (country.Population)
Example 766
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What is the total number of people living in the nations that do not use English?'
NL tokens: [b'what', b'is', b'the', b'total', b'number', b'of', b'people', b'living', b'in', b'the', b'nations', b'that', b'do', b'not', b'use', b'english', b'?']
NL tokens (original): [b'What', b'is', b'the', b'total', b'number', b'of', b'people', b'living', b'in', b'the', b'nations', b'that', b'do', b'not', b'use', b'English', b'?']
['[CLS]', 'what', 'is', 'the', 'total', 'number', 'of', 'people', 'living', 'in', 'the', 'nations', 'that', 'do', 'not', 'use', 'english', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused49]', 'english', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")'
Target TF-P tokens: from country where country.Name not in (from country join countrylanguage on country.Code = countrylanguage.CountryCode where countrylanguage.Language = "English" select country.Name) select sum (country.Population)

[WRONG] [extra] Pred 0:	b'SELECT SUM(country.Population) FROM country WHERE country.Continent NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")' (-0.046) (length=24)
[WRONG] [extra] Pred 1:	b'SELECT SUM(country.Population) FROM country WHERE country.Continent != "English"' (-1.167) (length=14)
[WRONG] [extra] Pred 2:	b'SELECT SUM(country.Population) FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.Continent WHERE countrylanguage.Language != "English"' (-2.110) (length=20)
[WRONG] [extra] Pred 3:	b'SELECT SUM(country.Population), country.Continent FROM country WHERE country.Continent NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")' (-2.384) (length=26)
[WRONG] [extra] Pred 4:	b'SELECT SUM(country.Population) FROM country WHERE country.Continent IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")' (-2.735) (length=23)
Error Case 237

Parsing error: from country where country.Continent not in (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select where countrylanguage.Language = "English" select count (*)
Parsing error: from country where country.Continent not in (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select where countrylanguage.Language = "English" select sum (country.Population)
ERROR: table "country" in field expression country.Code is not in the current scope
ERROR: table "country" in field expression country.Continent is not in the current scope
Parsing error: from country where country.Continent not in (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select where country.Population)
Example 767
 74%|███████▍  | 96/130 [12:04<13:36, 24.02s/it]world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'How many people live in countries that do not speak English?'
NL tokens: [b'how', b'many', b'people', b'live', b'in', b'countries', b'that', b'do', b'not', b'speak', b'english', b'?']
NL tokens (original): [b'How', b'many', b'people', b'live', b'in', b'countries', b'that', b'do', b'not', b'speak', b'English', b'?']
['[CLS]', 'how', 'many', 'people', 'live', 'in', 'countries', 'that', 'do', 'not', 'speak', 'english', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused49]', 'english', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")'
Target TF-P tokens: from country where country.Name not in (from country join countrylanguage on country.Code = countrylanguage.CountryCode where countrylanguage.Language = "English" select country.Name) select sum (country.Population)

[WRONG] [extra] Pred 0:	b'SELECT SUM(country.Population) FROM country WHERE country.Continent NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")' (-0.140) (length=24)
[WRONG] [extra] Pred 1:	b'SELECT COUNT(*) FROM country WHERE country.Continent NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")' (-0.208) (length=24)
[WRONG] [extra] Pred 2:	b'SELECT COUNT(DISTINCT country.Population) FROM country WHERE country.Continent NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")' (-1.082) (length=25)
[WRONG] [extra] Pred 3:	b'SELECT COUNT(*) FROM country WHERE country.Continent != "English"' (-1.246) (length=14)
[WRONG] [extra] Pred 4:	b'SELECT SUM(country.Population) FROM country WHERE country.Code NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")' (-1.710) (length=24)
[WRONG] [extra] Pred 5:	b'SELECT COUNT(*) FROM country WHERE country.Code NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")' (-1.768) (length=24)
[WRONG] [extra] Pred 6:	b'SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.CountryCode NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")' (-1.909) (length=24)
[WRONG] [extra] Pred 7:	b'SELECT SUM(country.Population) FROM country WHERE country.GNPOld NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")' (-2.022) (length=24)
[WRONG] [extra] Pred 8:	b'SELECT COUNT(*) FROM country WHERE country.GNPOld NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")' (-2.125) (length=24)
[WRONG] [extra] Pred 9:	b'SELECT SUM(country.Population) FROM country WHERE country.Continent != "English"' (-2.244) (length=14)
[WRONG] [extra] Pred 10:	b'SELECT DISTINCT country.Population FROM country WHERE country.Continent NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")' (-2.338) (length=22)
Error Case 238

ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Capital']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Code2']}}]
ERROR: invalid JOIN field "country": ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: invalid JOIN field "country": ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'country']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Code2']}}, {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Code2']}}]
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
Parsing error: from country join countrylanguage on country.Code = country on countrylanguage.CountryCode = countrylanguage.CountryCode where country.HeadOfState = "Beatrix" select countrylanguage.IsOfficial
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.GNP']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Capital']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.IndepYear']}}]
Example 768
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What is the official language spoken in the country whose head of state is Beatrix?'
NL tokens: [b'what', b'is', b'the', b'official', b'language', b'spoken', b'in', b'the', b'country', b'whose', b'head', b'of', b'state', b'is', b'beat', b'##rix', b'?']
NL tokens (original): [b'What', b'is', b'the', b'official', b'language', b'spoken', b'in', b'the', b'country', b'whose', b'head', b'of', b'state', b'is', b'Beat', b'##rix', b'?']
['[CLS]', 'what', 'is', 'the', 'official', 'language', 'spoken', 'in', 'the', 'country', 'whose', 'head', 'of', 'state', 'is', 'beat', '##rix', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused49]', 'beat', '##rix', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"'
Target TF-P tokens: from country join countrylanguage on country.Code = countrylanguage.CountryCode where country.HeadOfState = "Beatrix" and countrylanguage.IsOfficial = "t" select countrylanguage.Language

[WRONG] [medium] Pred 0:	b'SELECT countrylanguage.IsOfficial FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.HeadOfState = "Beatrix"' (-0.578) (length=18)
[WRONG] [medium] Pred 1:	b'SELECT countrylanguage.IsOfficial FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.Capital WHERE country.HeadOfState = "Beatrix"' (-2.286) (length=18)
[WRONG] [medium] Pred 2:	b'SELECT countrylanguage.IsOfficial FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.Code2 WHERE country.HeadOfState = "Beatrix"' (-2.610) (length=18)
[WRONG] [medium] Pred 3:	b'SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.HeadOfState = "Beatrix"' (-2.873) (length=18)
Error Case 239

ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Capital']}}]
ERROR: invalid JOIN field "country": ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'country']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}, {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Capital']}}]
ERROR: invalid JOIN field "country": ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Code2']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Capital']}}]
Example 769
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What is the official language used in the country the name of whose head of state is Beatrix.'
NL tokens: [b'what', b'is', b'the', b'official', b'language', b'used', b'in', b'the', b'country', b'the', b'name', b'of', b'whose', b'head', b'of', b'state', b'is', b'beat', b'##rix', b'.']
NL tokens (original): [b'What', b'is', b'the', b'official', b'language', b'used', b'in', b'the', b'country', b'the', b'name', b'of', b'whose', b'head', b'of', b'state', b'is', b'Beat', b'##rix', b'.']
['[CLS]', 'what', 'is', 'the', 'official', 'language', 'used', 'in', 'the', 'country', 'the', 'name', 'of', 'whose', 'head', 'of', 'state', 'is', 'beat', '##rix', '.', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused49]', 'beat', '##rix', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"'
Target TF-P tokens: from country join countrylanguage on country.Code = countrylanguage.CountryCode where country.HeadOfState = "Beatrix" and countrylanguage.IsOfficial = "t" select countrylanguage.Language

[WRONG] [medium] Pred 0:	b'SELECT countrylanguage.IsOfficial FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.Capital WHERE country.HeadOfState = "Beatrix"' (-0.568) (length=18)
[WRONG] [medium] Pred 1:	b'SELECT countrylanguage.IsOfficial FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.HeadOfState = "Beatrix"' (-1.005) (length=18)
[WRONG] [medium] Pred 2:	b'SELECT countrylanguage.IsOfficial FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.Code2 WHERE country.HeadOfState = "Beatrix"' (-3.063) (length=18)
[WRONG] [medium] Pred 3:	b'SELECT countrylanguage.Language FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.Capital WHERE country.HeadOfState = "Beatrix"' (-3.441) (length=18)
[WRONG] [medium] Pred 4:	b'SELECT countrylanguage.IsOfficial FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = "Beatrix"' (-3.544) (length=18)
[WRONG] [medium] Pred 5:	b'SELECT countrylanguage.IsOfficial FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = "Beatrix"' (-3.559) (length=18)
[WRONG] [medium] Pred 6:	b'SELECT countrylanguage.IsOfficial FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.Name WHERE country.HeadOfState = "Beatrix"' (-3.809) (length=18)
[WRONG] [medium] Pred 7:	b'SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.HeadOfState = "Beatrix"' (-3.850) (length=18)
Error Case 240

ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Continent']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Continent']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Continent']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Continent']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Continent']}}]
ERROR: table "country" in field expression country.Name is not in the current scope
ERROR: table "country" in field expression country.Name is not in the current scope
ERROR: table "country" in field expression country.Name is not in the current scope
ERROR: table "country" in field expression country.Name is not in the current scope
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Continent']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Continent']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Continent']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Continent']}}]
Example 770
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What is the total number of unique official languages spoken in the countries that are founded before 1930?'
NL tokens: [b'what', b'is', b'the', b'total', b'number', b'of', b'unique', b'official', b'languages', b'spoken', b'in', b'the', b'countries', b'that', b'are', b'founded', b'before', b'1930', b'?']
NL tokens (original): [b'What', b'is', b'the', b'total', b'number', b'of', b'unique', b'official', b'languages', b'spoken', b'in', b'the', b'countries', b'that', b'are', b'founded', b'before', b'1930', b'?']
['[CLS]', 'what', 'is', 'the', 'total', 'number', 'of', 'unique', 'official', 'languages', 'spoken', 'in', 'the', 'countries', 'that', 'are', 'founded', 'before', '1930', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"'
Target TF-P tokens: from country join countrylanguage on country.Code = countrylanguage.CountryCode where country.IndepYear < 1930 and countrylanguage.IsOfficial = "t" select count (distinct countrylanguage.Language)

[WRONG] [medium] Pred 0:	b'SELECT COUNT(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.Continent WHERE country.Continent LIKE "% 1930 %"' (-0.435) (length=23)
[WRONG] [medium] Pred 1:	b'SELECT COUNT(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.Continent WHERE country.Name LIKE "% 1930 %"' (-0.857) (length=23)
[WRONG] [medium] Pred 2:	b'SELECT COUNT(DISTINCT countrylanguage.IsOfficial) FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.Continent WHERE country.Continent LIKE "% 1930 %"' (-1.337) (length=23)
Error Case 241

ERROR: table "country" in field expression country.IndepYear is not in the current scope
ERROR: table "country" in field expression country.IndepYear is not in the current scope
ERROR: table "country" in field expression country.IndepYear is not in the current scope
ERROR: table "country" in field expression country.IndepYear is not in the current scope
ERROR: table "country" in field expression country.IndepYear is not in the current scope
ERROR: table "country" in field expression country.IndepYear is not in the current scope
ERROR: table "country" in field expression country.IndepYear is not in the current scope
ERROR: table "country" in field expression country.IndepYear is not in the current scope
ERROR: table "country" in field expression country.IndepYear is not in the current scope
Parsing error: from country join countrylanguage on country.Code = countrylanguage.CountryCode where country.Name like "(country.IndepYear) and country.Name"
ERROR: table "country" in field expression country.IndepYear is not in the current scope
Example 771
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'For the countries founded before 1930, what is the total number of distinct official languages?'
NL tokens: [b'for', b'the', b'countries', b'founded', b'before', b'1930', b',', b'what', b'is', b'the', b'total', b'number', b'of', b'distinct', b'official', b'languages', b'?']
NL tokens (original): [b'For', b'the', b'countries', b'founded', b'before', b'1930', b',', b'what', b'is', b'the', b'total', b'number', b'of', b'distinct', b'official', b'languages', b'?']
['[CLS]', 'for', 'the', 'countries', 'founded', 'before', '1930', ',', 'what', 'is', 'the', 'total', 'number', 'of', 'distinct', 'official', 'languages', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"'
Target TF-P tokens: from country join countrylanguage on country.Code = countrylanguage.CountryCode where country.IndepYear < 1930 and countrylanguage.IsOfficial = "t" select count (distinct countrylanguage.Language)

[WRONG] [medium] Pred 0:	b'SELECT COUNT(DISTINCT countrylanguage.Language), country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 1930 GROUP BY country.Name' (-1.509) (length=23)
[WRONG] [medium] Pred 1:	b'SELECT COUNT(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name IN (SELECT country.Name FROM country WHERE country.IndepYear < 1930)' (-1.624) (length=28)
[WRONG] [medium] Pred 2:	b'SELECT COUNT(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name LIKE "(1930 %"' (-1.860) (length=23)
[WRONG] [medium] Pred 3:	b'SELECT COUNT(DISTINCT country.Name) FROM country WHERE country.IndepYear < 1930' (-2.237) (length=13)
[WRONG] [medium] Pred 4:	b'SELECT COUNT(DISTINCT country.Name) FROM country WHERE country.Name IN (SELECT country.Name FROM country WHERE country.IndepYear < 1930)' (-2.321) (length=22)
Error Case 242

Example 772
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What are the countries that have greater surface area than any country in Europe?'
NL tokens: [b'what', b'are', b'the', b'countries', b'that', b'have', b'greater', b'surface', b'area', b'than', b'any', b'country', b'in', b'europe', b'?']
NL tokens (original): [b'What', b'are', b'the', b'countries', b'that', b'have', b'greater', b'surface', b'area', b'than', b'any', b'country', b'in', b'Europe', b'?']
['[CLS]', 'what', 'are', 'the', 'countries', 'that', 'have', 'greater', 'surface', 'area', 'than', 'any', 'country', 'in', 'europe', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused49]', 'europe', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")'
Target TF-P tokens: from country where country.SurfaceArea > (from country where country.Continent = "Europe" select min (country.SurfaceArea)) select country.Name

[WRONG] [hard] Pred 0:	b'SELECT country.Name FROM country WHERE country.SurfaceArea > (SELECT MAX(country.SurfaceArea) FROM country WHERE country.Continent = "Europe")' (-0.000) (length=23)
[WRONG] [hard] Pred 1:	b'SELECT DISTINCT country.Name FROM country WHERE country.SurfaceArea > (SELECT MAX(country.SurfaceArea) FROM country WHERE country.Continent = "Europe")' (-2.130) (length=24)
[WRONG] [hard] Pred 2:	b'SELECT country.Name FROM country WHERE country.SurfaceArea > (SELECT MAX(country.SurfaceArea) FROM country WHERE country.Continent = "Europe") AND country.Continent = "Europe"' (-2.249) (length=29)
[CORRE] [hard] Pred 3:	b'SELECT country.Name FROM country WHERE country.SurfaceArea > (SELECT MIN(country.SurfaceArea) FROM country WHERE country.Continent = "Europe")' (-2.418) (length=23)
Error Case 243

Parsing error: from country where country.Region > (from country where country.Continent = "Europe" select max (country.Region)) and country.Continent = "in (*)"
Parsing error: from country where country.Region > (from country join country.Code = country.GNP where country.Continent = "Europe" select max (country.Region)) select country.Name
Example 773
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Which countries have greater area than that of any country in Europe?'
NL tokens: [b'which', b'countries', b'have', b'greater', b'area', b'than', b'that', b'of', b'any', b'country', b'in', b'europe', b'?']
NL tokens (original): [b'Which', b'countries', b'have', b'greater', b'area', b'than', b'that', b'of', b'any', b'country', b'in', b'Europe', b'?']
['[CLS]', 'which', 'countries', 'have', 'greater', 'area', 'than', 'that', 'of', 'any', 'country', 'in', 'europe', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused49]', 'europe', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")'
Target TF-P tokens: from country where country.SurfaceArea > (from country where country.Continent = "Europe" select min (country.SurfaceArea)) select country.Name

[WRONG] [hard] Pred 0:	b'SELECT country.Name FROM country WHERE country.Region > (SELECT MAX(country.Region) FROM country WHERE country.Continent = "Europe")' (-0.000) (length=23)
[WRONG] [hard] Pred 1:	b'SELECT country.Continent FROM country WHERE country.Region > (SELECT MAX(country.Region) FROM country WHERE country.Continent = "Europe")' (-1.888) (length=23)
[WRONG] [hard] Pred 2:	b'SELECT country.Region FROM country WHERE country.Region > (SELECT MAX(country.Region) FROM country WHERE country.Continent = "Europe")' (-2.109) (length=23)
[WRONG] [hard] Pred 3:	b'SELECT DISTINCT country.Name FROM country WHERE country.Region > (SELECT MAX(country.Region) FROM country WHERE country.Continent = "Europe")' (-2.323) (length=24)
[WRONG] [hard] Pred 4:	b'SELECT country.Name FROM country WHERE country.Region > (SELECT MAX(country.Region) FROM country WHERE country.Continent = "Europe") AND country.Continent = "Europe"' (-2.348) (length=29)
[WRONG] [hard] Pred 5:	b'SELECT country.Name FROM country WHERE country.Region > (SELECT MIN(country.Region) FROM country WHERE country.Continent = "Europe")' (-2.460) (length=23)
[WRONG] [hard] Pred 6:	b'SELECT country.Name FROM country WHERE country.Region > (SELECT MAX(country.Region) FROM country WHERE country.Continent = "Europe") AND country.Continent = "country"' (-2.892) (length=29)
[WRONG] [hard] Pred 7:	b'SELECT country.Name, country.Continent FROM country WHERE country.Region > (SELECT MAX(country.Region) FROM country WHERE country.Continent = "Europe")' (-2.932) (length=25)
[WRONG] [hard] Pred 8:	b'SELECT country.Name FROM country WHERE country.Region > (SELECT MAX(country.Region) FROM country WHERE country.Continent = "Europe") AND country.Continent = "any"' (-2.955) (length=29)
[WRONG] [hard] Pred 9:	b'SELECT country.Name FROM country WHERE country.Region < (SELECT MAX(country.Region) FROM country WHERE country.Continent = "Europe")' (-2.985) (length=23)
[WRONG] [hard] Pred 10:	b'SELECT country.Name FROM country WHERE country.Region > (SELECT country.Region FROM country WHERE country.Continent = "Europe")' (-2.993) (length=22)
[WRONG] [hard] Pred 11:	b'SELECT AVG(country.Region) FROM country WHERE country.Region > (SELECT MAX(country.Region) FROM country WHERE country.Continent = "Europe")' (-3.128) (length=26)
[WRONG] [hard] Pred 12:	b'SELECT country.Name FROM country WHERE country.Region > (SELECT MAX(country.Region) FROM country WHERE country.Continent = "VALUE")' (-3.163) (length=23)
[WRONG] [hard] Pred 13:	b'SELECT country.Name FROM country WHERE country.Region > (SELECT SUM(country.Region) FROM country WHERE country.Continent = "Europe")' (-3.351) (length=23)
Error Case 244

ERROR: Join condition does not match with table: ['country', {'join': 'city', 'on': {'eq': ['country.Code', 'country.GNP']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'city', 'on': {'eq': ['country.Code', 'country.GNP']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'city', 'on': {'eq': ['country.Code', 'country.GNPOld']}}]
Parsing error: from country where country.Population intersect (from country where country.Continent = "Asia" select min (country.Population)) select country.Name
Parsing error: from country where country.Population between (from country where country.Continent = "Asia" select min (country.Population)) select country.Name
Parsing error: from country where country.Population < (from country where country.Continent = "Asia" select in (country.Population)) select country.Name
Example 774
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What are the African countries that have a  population less than any country in Asia?'
NL tokens: [b'what', b'are', b'the', b'african', b'countries', b'that', b'have', b'a', b'population', b'less', b'than', b'any', b'country', b'in', b'asia', b'?']
NL tokens (original): [b'What', b'are', b'the', b'African', b'countries', b'that', b'have', b'a', b'population', b'less', b'than', b'any', b'country', b'in', b'Asia', b'?']
['[CLS]', 'what', 'are', 'the', 'african', 'countries', 'that', 'have', 'a', 'population', 'less', 'than', 'any', 'country', 'in', 'asia', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused49]', 'asia', '[unused49]', 'africa', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  "Asia")'
Target TF-P tokens: from country where country.Continent = "VALUE" and country.Population < (from country where country.Continent = "Asia" select max (country.Population)) select country.Name

[WRONG] [extra] Pred 0:	b'SELECT country.Name FROM country WHERE country.Population < (SELECT MIN(country.Population) FROM country WHERE country.Continent = "Asia")' (-0.000) (length=23)
[WRONG] [extra] Pred 1:	b'SELECT country.Name FROM country WHERE country.Population < (SELECT MIN(country.Population) FROM country WHERE country.Continent = "Asia") AND country.Continent = "African"' (-1.766) (length=29)
 75%|███████▍  | 97/130 [12:33<13:58, 25.41s/it][WRONG] [extra] Pred 2:	b'SELECT country.Name FROM country WHERE country.Population < (SELECT MIN(country.Population) FROM country WHERE country.Continent = "African")' (-1.886) (length=23)
[WRONG] [extra] Pred 3:	b'SELECT country.Name FROM country WHERE country.Population < (SELECT MIN(country.Population) FROM country WHERE country.Continent = "Asia") AND country.Continent = "Asia"' (-2.284) (length=29)
[WRONG] [extra] Pred 4:	b'SELECT DISTINCT country.Name FROM country WHERE country.Population < (SELECT MIN(country.Population) FROM country WHERE country.Continent = "Asia")' (-2.590) (length=24)
[WRONG] [extra] Pred 5:	b'SELECT country.Name FROM country WHERE country.Population < (SELECT MIN(country.Population) FROM country WHERE country.Continent = "Asia") AND country.Name = "African"' (-2.741) (length=29)
[WRONG] [extra] Pred 6:	b'SELECT country.Name FROM country WHERE country.Population < (SELECT MAX(country.Population) FROM country WHERE country.Continent = "Asia")' (-2.864) (length=23)
[WRONG] [extra] Pred 7:	b'SELECT country.Name FROM country WHERE country.Population < (SELECT AVG(country.Population) FROM country WHERE country.Continent = "Asia")' (-2.989) (length=23)
[WRONG] [extra] Pred 8:	b'SELECT country.Name, country.Continent FROM country WHERE country.Population < (SELECT MIN(country.Population) FROM country WHERE country.Continent = "Asia")' (-3.048) (length=25)
[WRONG] [extra] Pred 9:	b'SELECT country.Name FROM country WHERE country.Population <= (SELECT MIN(country.Population) FROM country WHERE country.Continent = "Asia")' (-3.359) (length=23)
Error Case 245

Example 775
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Which African countries have a smaller population than that of any country in Asia?'
NL tokens: [b'which', b'african', b'countries', b'have', b'a', b'smaller', b'population', b'than', b'that', b'of', b'any', b'country', b'in', b'asia', b'?']
NL tokens (original): [b'Which', b'African', b'countries', b'have', b'a', b'smaller', b'population', b'than', b'that', b'of', b'any', b'country', b'in', b'Asia', b'?']
['[CLS]', 'which', 'african', 'countries', 'have', 'a', 'smaller', 'population', 'than', 'that', 'of', 'any', 'country', 'in', 'asia', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused49]', 'asia', '[unused49]', 'africa', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  "Asia")'
Target TF-P tokens: from country where country.Continent = "VALUE" and country.Population < (from country where country.Continent = "Asia" select min (country.Population)) select country.Name

[WRONG] [extra] Pred 0:	b'SELECT country.Name FROM country WHERE country.Population < (SELECT MIN(country.Population) FROM country WHERE country.Continent = "Asia")' (-0.001) (length=23)
[WRONG] [extra] Pred 1:	b'SELECT country.Name FROM country WHERE country.Population < (SELECT MAX(country.Population) FROM country WHERE country.Continent = "Asia")' (-1.145) (length=23)
[CORRE] [extra] Pred 2:	b'SELECT country.Name FROM country WHERE country.Population < (SELECT MIN(country.Population) FROM country WHERE country.Continent = "Asia") AND country.Continent = "Asia"' (-1.808) (length=29)
Error Case 246

Example 776
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Which Asian countries have a population that is larger than any country in Africa?'
NL tokens: [b'which', b'asian', b'countries', b'have', b'a', b'population', b'that', b'is', b'larger', b'than', b'any', b'country', b'in', b'africa', b'?']
NL tokens (original): [b'Which', b'Asian', b'countries', b'have', b'a', b'population', b'that', b'is', b'larger', b'than', b'any', b'country', b'in', b'Africa', b'?']
['[CLS]', 'which', 'asian', 'countries', 'have', 'a', 'population', 'that', 'is', 'larger', 'than', 'any', 'country', 'in', 'africa', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused49]', 'africa', '[unused49]', 'asia', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  "Africa")'
Target TF-P tokens: from country where country.Continent = "VALUE" and country.Population > (from country where country.Continent = "Africa" select max (country.Population)) select country.Name

[WRONG] [extra] Pred 0:	b'SELECT country.Name FROM country WHERE country.Population > (SELECT MAX(country.Population) FROM country WHERE country.Continent = "Africa")' (-0.005) (length=23)
[CORRE] [extra] Pred 1:	b'SELECT country.Name FROM country WHERE country.Population > (SELECT MAX(country.Population) FROM country WHERE country.Continent = "Africa") AND country.Continent = "Asian"' (-0.803) (length=29)
Error Case 247

ERROR: Join condition does not match with table: ['country', {'join': 'city', 'on': {'eq': ['country.Code', 'country.GNP']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'city', 'on': {'eq': ['country.Code', 'country.GNPOld']}}]
Example 777
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What are the Asian countries which have a population larger than that of any country in Africa?'
NL tokens: [b'what', b'are', b'the', b'asian', b'countries', b'which', b'have', b'a', b'population', b'larger', b'than', b'that', b'of', b'any', b'country', b'in', b'africa', b'?']
NL tokens (original): [b'What', b'are', b'the', b'Asian', b'countries', b'which', b'have', b'a', b'population', b'larger', b'than', b'that', b'of', b'any', b'country', b'in', b'Africa', b'?']
['[CLS]', 'what', 'are', 'the', 'asian', 'countries', 'which', 'have', 'a', 'population', 'larger', 'than', 'that', 'of', 'any', 'country', 'in', 'africa', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused49]', 'africa', '[unused49]', 'asia', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  "Africa")'
Target TF-P tokens: from country where country.Continent = "VALUE" and country.Population > (from country where country.Continent = "Africa" select min (country.Population)) select country.Name

[WRONG] [extra] Pred 0:	b'SELECT country.Name FROM country WHERE country.Population > (SELECT MAX(country.Population) FROM country WHERE country.Continent = "Asian") AND country.Continent = "Asian"' (-0.156) (length=29)
[WRONG] [extra] Pred 1:	b'SELECT country.Name FROM country WHERE country.Population > (SELECT MAX(country.Population) FROM country WHERE country.Continent = "Asian")' (-0.173) (length=23)
[WRONG] [extra] Pred 2:	b'SELECT country.Name FROM country WHERE country.Population > (SELECT MAX(country.Population) FROM country WHERE country.Continent = "Africa")' (-0.327) (length=23)
[WRONG] [extra] Pred 3:	b'SELECT country.Name FROM country WHERE country.Population > (SELECT MAX(country.Population) FROM country WHERE country.Continent = "Asian") AND country.Continent = "Africa"' (-0.907) (length=29)
[WRONG] [extra] Pred 4:	b'SELECT country.Name FROM country WHERE country.Population > (SELECT MAX(country.Population) FROM country WHERE country.Continent = "Africa") AND country.Continent = "Asian"' (-0.921) (length=29)
[WRONG] [extra] Pred 5:	b'SELECT country.Name FROM country WHERE country.Population > (SELECT MAX(country.Population) FROM country WHERE country.Continent = "Asian") AND country.Name = "Asian"' (-1.187) (length=29)
[WRONG] [extra] Pred 6:	b'SELECT country.Name FROM country WHERE country.Population > (SELECT MAX(country.Population) FROM country WHERE country.Continent = "Asian") AND country.Name = "Africa"' (-1.607) (length=29)
[WRONG] [extra] Pred 7:	b'SELECT country.Name FROM country WHERE country.Population > (SELECT country.Name FROM country WHERE country.Continent = "Asian") AND country.Population > (SELECT MAX(country.Population) FROM country WHERE country.Continent = "Africa")' (-1.616) (length=38)
[WRONG] [extra] Pred 8:	b'SELECT country.Name FROM country WHERE country.Population > (SELECT country.Name FROM country WHERE country.Continent = "Asian") AND country.Population > (SELECT MAX(country.Population) FROM country WHERE country.Continent = "Asian")' (-1.800) (length=38)
[WRONG] [extra] Pred 9:	b'SELECT country.Name FROM country WHERE country.Population > (SELECT MAX(country.Population) FROM country WHERE country.Continent = "Africa") AND country.Name = "Asian"' (-1.813) (length=29)
[WRONG] [extra] Pred 10:	b'SELECT country.Name FROM country WHERE country.Population > (SELECT MAX(country.Population) FROM country WHERE country.Continent = "Asian") AND country.GNP IN (SELECT country.Code FROM country WHERE country.Continent = "Africa")' (-1.856) (length=38)
[WRONG] [extra] Pred 11:	b'SELECT country.Name FROM country WHERE country.Population > (SELECT MAX(country.Population) FROM country WHERE country.Continent = "Asian") AND country.GNP IN (SELECT country.Name FROM country WHERE country.Continent = "Africa")' (-2.012) (length=38)
[CORRE] [extra] Pred 12:	b'SELECT country.Name FROM country WHERE country.Population > (SELECT MIN(country.Population) FROM country WHERE country.Continent = "Asian") AND country.Continent = "Asian"' (-2.108) (length=29)
Error Case 248

ERROR: table "countrylanguage" in field expression countrylanguage.CountryCode is not in the current scope
Parsing error: from country where country.Code not = (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select country.Code
ERROR: table "countrylanguage" in field expression countrylanguage.CountryCode is not in the current scope
Parsing error: from country where country.Code not = (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select countrylanguage.CountryCode
Parsing error: from country where country.Code != in (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select country.Code
Parsing error: from country where country.Code having in (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select country.Code
Parsing error: from country where country.Code != in (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select countrylanguage.CountryCode
Parsing error: from country except country.Code except from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode
Parsing error: from country no country.Code except from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode
Example 778
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What are the country codes for countries that do not speak English?'
NL tokens: [b'what', b'are', b'the', b'country', b'codes', b'for', b'countries', b'that', b'do', b'not', b'speak', b'english', b'?']
NL tokens (original): [b'What', b'are', b'the', b'country', b'codes', b'for', b'countries', b'that', b'do', b'not', b'speak', b'English', b'?']
['[CLS]', 'what', 'are', 'the', 'country', 'codes', 'for', 'countries', 'that', 'do', 'not', 'speak', 'english', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused49]', 'english', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"'
Target TF-P tokens: from countrylanguage select countrylanguage.CountryCode except from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode

[WRONG] [hard] Pred 0:	b'SELECT country.Code FROM country WHERE country.Code NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")' (-0.213) (length=21)
[WRONG] [hard] Pred 1:	b'SELECT country.Code FROM country WHERE country.Continent != "English"' (-0.742) (length=11)
[WRONG] [hard] Pred 2:	b'SELECT country.Code FROM country WHERE country.Continent != "English" EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English"' (-0.789) (length=22)
[WRONG] [hard] Pred 3:	b'SELECT country.Code FROM country WHERE country.Continent NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")' (-1.672) (length=21)
[WRONG] [hard] Pred 4:	b'SELECT country.Code FROM country EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English"' (-1.763) (length=16)
[WRONG] [hard] Pred 5:	b'SELECT country.Code FROM country WHERE country.Code != "English"' (-2.275) (length=11)
[WRONG] [hard] Pred 6:	b'SELECT country.Code FROM country WHERE country.Continent != "English" INTERSECT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English"' (-2.503) (length=22)
Error Case 249

ERROR: table "countrylanguage" in field expression countrylanguage.CountryCode is not in the current scope
Parsing error: from country where country.Code not = (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select country.Code
Parsing error: from country where country.Code not = (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select countrylanguage.CountryCode
ERROR: table "countrylanguage" in field expression countrylanguage.CountryCode is not in the current scope
Parsing error: from country where country.Code having in (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select countrylanguage.CountryCode
Parsing error: from country where country.Code having in (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select country.Code
Parsing error: from country except country.Code except from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode
Parsing error: from country where country.Code except (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select country.Code
Parsing error: from country no country.Code not in (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select country.Code
ERROR: table "countrylanguage" in field expression countrylanguage.CountryCode is not in the current scope
Example 779
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Return the country codes for countries that do not speak English.'
NL tokens: [b'return', b'the', b'country', b'codes', b'for', b'countries', b'that', b'do', b'not', b'speak', b'english', b'.']
NL tokens (original): [b'Return', b'the', b'country', b'codes', b'for', b'countries', b'that', b'do', b'not', b'speak', b'English', b'.']
['[CLS]', 'return', 'the', 'country', 'codes', 'for', 'countries', 'that', 'do', 'not', 'speak', 'english', '.', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused49]', 'english', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"'
Target TF-P tokens: from countrylanguage select countrylanguage.CountryCode except from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode

[WRONG] [hard] Pred 0:	b'SELECT country.Code FROM country WHERE country.Code NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")' (-0.335) (length=21)
[WRONG] [hard] Pred 1:	b'SELECT country.Code FROM country WHERE country.Continent != "English"' (-2.044) (length=11)
[WRONG] [hard] Pred 2:	b'SELECT country.Code FROM country WHERE country.Continent != "English" EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English"' (-2.465) (length=22)
[WRONG] [hard] Pred 3:	b'SELECT country.Code FROM country WHERE country.Continent NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")' (-2.648) (length=21)
[WRONG] [hard] Pred 4:	b'SELECT country.Code FROM country EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English"' (-2.655) (length=16)
[WRONG] [hard] Pred 5:	b'SELECT country.Code FROM country WHERE country.Code IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")' (-2.821) (length=20)
Error Case 250

Parsing error: from countrylanguage where countrylanguage.Percentage > VALUE VALUE select countrylanguage.CountryCode except from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode
Parsing error: from countrylanguage where countrylanguage.Percentage > VALUE VALUE and countrylanguage.Language != "English" select countrylanguage.CountryCode
Example 781
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Give the country codes for countries in which people speak langauges that are not English.'
NL tokens: [b'give', b'the', b'country', b'codes', b'for', b'countries', b'in', b'which', b'people', b'speak', b'lang', b'##au', b'##ges', b'that', b'are', b'not', b'english', b'.']
NL tokens (original): [b'Give', b'the', b'country', b'codes', b'for', b'countries', b'in', b'which', b'people', b'speak', b'lang', b'##au', b'##ges', b'that', b'are', b'not', b'English', b'.']
['[CLS]', 'give', 'the', 'country', 'codes', 'for', 'countries', 'in', 'which', 'people', 'speak', 'lang', '##au', '##ges', 'that', 'are', 'not', 'english', '.', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused49]', 'english', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"'
Target TF-P tokens: from countrylanguage where countrylanguage.Language != "English" select distinct countrylanguage.CountryCode

[WRONG] [easy] Pred 0:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "langau" EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English"' (-0.063) (length=23)
[WRONG] [easy] Pred 1:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.CountryCode IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "langau" EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")' (-1.129) (length=32)
[WRONG] [easy] Pred 2:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Percentage = "langau" EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English"' (-1.585) (length=23)
[WRONG] [easy] Pred 3:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "langau VALUE" EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English"' (-1.630) (length=24)
[WRONG] [easy] Pred 4:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Percentage IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "langau" EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")' (-1.630) (length=32)
[WRONG] [easy] Pred 5:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.IsOfficial = "langau" EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English"' (-1.681) (length=23)
[WRONG] [easy] Pred 6:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "langau" AND countrylanguage.Language != "English"' (-1.987) (length=18)
[WRONG] [easy] Pred 7:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE * IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "langau" EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")' (-2.040) (length=32)
[WRONG] [easy] Pred 8:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.CountryCode = "langau" EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English"' (-2.631) (length=23)
[WRONG] [easy] Pred 9:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "lang langau" EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English"' (-2.643) (length=24)
[WRONG] [easy] Pred 10:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "langau" INTERSECT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English"' (-2.737) (length=23)
[WRONG] [easy] Pred 11:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE * = "langau" EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English"' (-2.764) (length=23)
[WRONG] [easy] Pred 12:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "langau" EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language != "English"' (-2.973) (length=23)
[WRONG] [easy] Pred 13:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Percentage = "langau" AND countrylanguage.Language != "English"' (-3.393) (length=18)
Error Case 251

ERROR: table "countrylanguage" in field expression countrylanguage.CountryCode is not in the current scope
ERROR: table "country" in field expression country.GovernmentForm is not in the current scope
ERROR: table "countrylanguage" in field expression countrylanguage.Language is not in the current scope
ERROR: table "country" in field expression country.GovernmentForm is not in the current scope
ERROR: table "country" in field expression country.GovernmentForm is not in the current scope
Parsing error: from country where country.Code not = (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) and country.GovernmentForm != "Republic" select country.Code
ERROR: table "countrylanguage" in field expression countrylanguage.Language is not in the current scope
ERROR: table "country" in field expression country.GovernmentForm is not in the current scope
Parsing error: from country where country.Code having in (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) and country.GovernmentForm != "Republic" select country.Code
Parsing error: from country where country.Code not = (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) and country.GovernmentForm != "Republic" select countrylanguage.CountryCode
ERROR: table "countrylanguage" in field expression countrylanguage.IsOfficial is not in the current scope
Example 782
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What are the codes of the countries that do not speak English and whose government forms are not Republic?'
NL tokens: [b'what', b'are', b'the', b'codes', b'of', b'the', b'countries', b'that', b'do', b'not', b'speak', b'english', b'and', b'whose', b'government', b'forms', b'are', b'not', b'republic', b'?']
NL tokens (original): [b'What', b'are', b'the', b'codes', b'of', b'the', b'countries', b'that', b'do', b'not', b'speak', b'English', b'and', b'whose', b'government', b'forms', b'are', b'not', b'Republic', b'?']
['[CLS]', 'what', 'are', 'the', 'codes', 'of', 'the', 'countries', 'that', 'do', 'not', 'speak', 'english', 'and', 'whose', 'government', 'forms', 'are', 'not', 'republic', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused49]', 'republic', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused49]', 'english', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"'
Target TF-P tokens: from country where country.GovernmentForm != "Republic" select country.Code except from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode

[WRONG] [hard] Pred 0:	b'SELECT country.Code FROM country WHERE country.Code NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English") AND country.GovernmentForm != "Republic"' (-0.113) (length=27)
[WRONG] [hard] Pred 1:	b'SELECT country.Code FROM country WHERE country.Code NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "Republic") EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "Republic"' (-0.820) (length=32)
[WRONG] [hard] Pred 2:	b'SELECT country.Code FROM country WHERE country.Code != "English" EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "Republic"' (-0.967) (length=22)
[WRONG] [hard] Pred 3:	b'SELECT country.Code FROM country WHERE country.Code NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English") EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "Republic"' (-1.215) (length=32)
[WRONG] [hard] Pred 4:	b'SELECT country.Code FROM country WHERE country.Continent != "English" EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "Republic"' (-1.544) (length=22)
Error Case 252

ERROR: table "country" in field expression country.GovernmentForm is not in the current scope
Parsing error: from country where country.Code not = (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select country.Code except from countrylanguage where countrylanguage.Language = "VALUE" select countrylanguage.CountryCode
ERROR: table "country" in field expression country.GovernmentForm is not in the current scope
ERROR: table "countrylanguage" in field expression countrylanguage.CountryCode is not in the current scope
ERROR: table "country" in field expression country.GovernmentForm is not in the current scope
Parsing error: from country where country.Code not = (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select country.Code except from countrylanguage where country.GovernmentForm = "VALUE" select countrylanguage.CountryCode
Parsing error: from country where country.Code not = (from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode) select country.Code except from countrylanguage where countrylanguage.Language = "Republics" select countrylanguage.CountryCode
Example 783
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Return the codes of countries that do not speak English and do not have Republics for governments.'
 75%|███████▌  | 98/130 [13:06<14:41, 27.54s/it]NL tokens: [b'return', b'the', b'codes', b'of', b'countries', b'that', b'do', b'not', b'speak', b'english', b'and', b'do', b'not', b'have', b'republics', b'for', b'governments', b'.']
NL tokens (original): [b'Return', b'the', b'codes', b'of', b'countries', b'that', b'do', b'not', b'speak', b'English', b'and', b'do', b'not', b'have', b'Republics', b'for', b'governments', b'.']
['[CLS]', 'return', 'the', 'codes', 'of', 'countries', 'that', 'do', 'not', 'speak', 'english', 'and', 'do', 'not', 'have', 'republics', 'for', 'governments', '.', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused49]', 'republic', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused49]', 'english', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"'
Target TF-P tokens: from country where country.GovernmentForm != "VALUE" select country.Code except from countrylanguage where countrylanguage.Language = "English" select countrylanguage.CountryCode

[WRONG] [hard] Pred 0:	b'SELECT country.Code FROM country WHERE country.Code NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English") EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "VALUE"' (-0.064) (length=32)
[WRONG] [hard] Pred 1:	b'SELECT country.Code FROM country WHERE country.Code NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English") EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "Republics"' (-0.808) (length=32)
[WRONG] [hard] Pred 2:	b'SELECT country.Code FROM country WHERE country.Code NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English") AND country.GovernmentForm != "VALUE"' (-1.005) (length=27)
[WRONG] [hard] Pred 3:	b'SELECT country.Code FROM country WHERE country.Code != "English" EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "VALUE"' (-1.155) (length=22)
[WRONG] [hard] Pred 4:	b'SELECT country.Code FROM country WHERE country.Code NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English") EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = "VALUE"' (-1.381) (length=38)
[WRONG] [hard] Pred 5:	b'SELECT country.Code FROM country WHERE country.Continent != "English" EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "VALUE"' (-1.536) (length=22)
[WRONG] [hard] Pred 6:	b'SELECT country.Code FROM country WHERE country.Code NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English") EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "VALUE1"' (-1.689) (length=33)
[WRONG] [hard] Pred 7:	b'SELECT country.Code FROM country WHERE country.Code NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English") EXCEPT SELECT country.Code FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = "VALUE"' (-1.772) (length=38)
[WRONG] [hard] Pred 8:	b'SELECT country.Code FROM country WHERE country.Code IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English") EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "VALUE"' (-1.824) (length=31)
Error Case 253

ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['city.CountryCode', 'country.Code']}}]
ERROR: table "countrylanguage" in field expression countrylanguage.Language is not in the current scope
ERROR: table "countrylanguage" in field expression countrylanguage.IsOfficial is not in the current scope
ERROR: table "countrylanguage" in field expression countrylanguage.IsOfficial is not in the current scope
ERROR: table "countrylanguage" in field expression countrylanguage.IsOfficial is not in the current scope
ERROR: table "countrylanguage" in field expression countrylanguage.Language is not in the current scope
ERROR: table "countrylanguage" in field expression countrylanguage.IsOfficial is not in the current scope
ERROR: table "countrylanguage" in field expression countrylanguage.IsOfficial is not in the current scope
ERROR: table "countrylanguage" in field expression countrylanguage.Language is not in the current scope
ERROR: table "city" in field expression city.Name is not in the current scope
ERROR: table "countrylanguage" in field expression countrylanguage.Language is not in the current scope
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['city.CountryCode', 'country.Code']}}]
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['city.CountryCode', 'country.Code']}}]
Example 784
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Which cities are in European countries where English is not the official language?'
NL tokens: [b'which', b'cities', b'are', b'in', b'european', b'countries', b'where', b'english', b'is', b'not', b'the', b'official', b'language', b'?']
NL tokens (original): [b'Which', b'cities', b'are', b'in', b'European', b'countries', b'where', b'English', b'is', b'not', b'the', b'official', b'language', b'?']
['[CLS]', 'which', 'cities', 'are', 'in', 'european', 'countries', 'where', 'english', 'is', 'not', 'the', 'official', 'language', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused49]', 'europe', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused49]', 'english', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b"SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"
Target TF-P tokens: from country join city on city.CountryCode = country.Code where country.Continent = "VALUE" and country.Name not in (from country join countrylanguage on country.Code = countrylanguage.CountryCode where countrylanguage.IsOfficial = "t" and countrylanguage.Language = "English" select country.Name) select distinct city.Name

[WRONG] [extra] Pred 0:	b'SELECT city.Name FROM city WHERE city.CountryCode IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English")' (-1.259) (length=20)
[WRONG] [extra] Pred 1:	b'SELECT city.Name FROM city WHERE city.CountryCode IN (SELECT countrylanguage.IsOfficial FROM countrylanguage WHERE countrylanguage.Language = "English")' (-2.490) (length=20)
[WRONG] [extra] Pred 2:	b'SELECT city.Name FROM city WHERE city.CountryCode IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "English") AND city.CountryCode != "European"' (-2.615) (length=26)
Error Case 254

ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['city.CountryCode', 'country.Code']}}]
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['city.CountryCode', 'country.Code']}}]
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['city.CountryCode', 'country.Code']}}]
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['city.CountryCode', 'country.Code']}}]
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['city.CountryCode', 'country.Code']}}]
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['city.CountryCode', 'country.Code']}}]
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['city.CountryCode', 'country.Code']}}]
ERROR: table "city" in field expression city.Name is not in the current scope
ERROR: table "city" in field expression city.Name is not in the current scope
ERROR: table "city" in field expression city.Name is not in the current scope
Example 785
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What are the names of cities in Europe for which English is not the official language?'
NL tokens: [b'what', b'are', b'the', b'names', b'of', b'cities', b'in', b'europe', b'for', b'which', b'english', b'is', b'not', b'the', b'official', b'language', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'of', b'cities', b'in', b'Europe', b'for', b'which', b'English', b'is', b'not', b'the', b'official', b'language', b'?']
['[CLS]', 'what', 'are', 'the', 'names', 'of', 'cities', 'in', 'europe', 'for', 'which', 'english', 'is', 'not', 'the', 'official', 'language', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused49]', 'europe', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused49]', 'english', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b"SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"
Target TF-P tokens: from country join city on city.CountryCode = country.Code where country.Continent = "Europe" and country.Name not in (from country join countrylanguage on country.Code = countrylanguage.CountryCode where countrylanguage.IsOfficial = "t" and countrylanguage.Language = "English" select country.Name) select distinct city.Name

[WRONG] [extra] Pred 0:	b'SELECT city.Name FROM city WHERE city.CountryCode = "Europe" EXCEPT SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = "English"' (-2.553) (length=28)
[WRONG] [extra] Pred 1:	b'SELECT city.Name FROM city WHERE city.CountryCode = "English" EXCEPT SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = "English"' (-3.012) (length=28)
[WRONG] [extra] Pred 2:	b'SELECT city.Name FROM city WHERE city.CountryCode = "Europe" EXCEPT SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = "official"' (-3.101) (length=28)
[WRONG] [extra] Pred 3:	b'SELECT city.Name FROM city WHERE city.CountryCode = "Europe" EXCEPT SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = "the"' (-3.301) (length=28)
[WRONG] [extra] Pred 4:	b'SELECT city.Name FROM city WHERE city.CountryCode = "Europe" AND city.CountryCode != "the"' (-3.477) (length=17)
[WRONG] [extra] Pred 5:	b'SELECT city.Name FROM city WHERE city.CountryCode = "Europe" AND city.CountryCode != "official"' (-3.624) (length=17)
Error Case 255

Parsing error: from city in distinct city.Name intersect from countrylanguage join country on city.CountryCode = country.Code where countrylanguage.Language = "Chinese" select distinct city.Name
ERROR: Join condition does not match with table: ['city', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['city', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
Example 786
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Which unique cities are in Asian countries where Chinese is the official language ?'
NL tokens: [b'which', b'unique', b'cities', b'are', b'in', b'asian', b'countries', b'where', b'chinese', b'is', b'the', b'official', b'language', b'?']
NL tokens (original): [b'Which', b'unique', b'cities', b'are', b'in', b'Asian', b'countries', b'where', b'Chinese', b'is', b'the', b'official', b'language', b'?']
['[CLS]', 'which', 'unique', 'cities', 'are', 'in', 'asian', 'countries', 'where', 'chinese', 'is', 'the', 'official', 'language', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused49]', 'asia', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused49]', 'chinese', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  \'t\' and t2.language  =  \'chinese\' and t1.continent  =  "asia"'
Target TF-P tokens: from country join countrylanguage on country.Code = countrylanguage.CountryCode join city on country.Code = city.CountryCode where countrylanguage.IsOfficial = "t" and countrylanguage.Language = "Chinese" and country.Continent = "VALUE" select distinct city.Name

[WRONG] [hard] Pred 0:	b'SELECT DISTINCT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = "Chinese" AND countrylanguage.IsOfficial = "Asian"' (-0.988) (length=24)
[WRONG] [hard] Pred 1:	b'SELECT DISTINCT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = "Asian" AND countrylanguage.IsOfficial = "Chinese"' (-0.989) (length=24)
[WRONG] [hard] Pred 2:	b'SELECT DISTINCT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = "Asian" AND countrylanguage.IsOfficial = "official"' (-2.188) (length=24)
[WRONG] [hard] Pred 3:	b'SELECT DISTINCT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = "Chinese" AND countrylanguage.IsOfficial = "Chinese"' (-2.450) (length=24)
[WRONG] [hard] Pred 4:	b'SELECT DISTINCT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = "Asian" AND countrylanguage.IsOfficial = "the"' (-2.544) (length=24)
[WRONG] [hard] Pred 5:	b'SELECT DISTINCT city.Name FROM city JOIN countrylanguage ON countrylanguage.CountryCode = city.CountryCode WHERE countrylanguage.Language = "Chinese" AND countrylanguage.IsOfficial = "Asian"' (-2.731) (length=24)
[WRONG] [hard] Pred 6:	b'SELECT DISTINCT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = "Asian" AND countrylanguage.Language = "Chinese"' (-2.802) (length=24)
[WRONG] [hard] Pred 7:	b'SELECT DISTINCT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = "Chinese" AND countrylanguage.Language = "Asian"' (-2.890) (length=24)
[WRONG] [hard] Pred 8:	b'SELECT DISTINCT city.Name FROM city JOIN countrylanguage ON countrylanguage.CountryCode = city.CountryCode WHERE countrylanguage.Language = "Asian" AND countrylanguage.IsOfficial = "Chinese"' (-3.044) (length=24)
[WRONG] [hard] Pred 9:	b'SELECT DISTINCT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = "Asian" AND countrylanguage.IsOfficial = language' (-3.127) (length=24)
[WRONG] [hard] Pred 10:	b'SELECT DISTINCT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = "Asian" AND countrylanguage.IsOfficial = "?"' (-3.284) (length=24)
[WRONG] [hard] Pred 11:	b'SELECT DISTINCT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = "Chinese" AND city.CountryCode = "Asian"' (-3.327) (length=24)
[WRONG] [hard] Pred 12:	b'SELECT DISTINCT city.Name FROM city WHERE city.CountryCode = "Asian" AND city.CountryCode = "Chinese"' (-3.983) (length=18)
Error Case 256

Parsing error: from city join city.ID = (from city where city.CountryCode = "Asia" select city.Name intersect from city join country on city.CountryCode = country.Code where country.Continent = "Chinese" select city.Name) select distinct city.Name
Parsing error: from city join city.ID = (from city where city.CountryCode = "Asia" select city.Name intersect from countrylanguage join country on city.CountryCode = country.Code where country.Continent = "Chinese" select city.Name) select distinct city.Name
Parsing error: from city join city.ID = (from city where city.CountryCode = "Asia" select city.Name intersect from countrylanguage join country on city.CountryCode = country.Code where countrylanguage.Language = "Chinese" select city.Name) select distinct city.Name
Parsing error: from city join city.ID = (from city where city.CountryCode = "Asia" select city.Name intersect from countrylanguage join country on city.CountryCode = countrylanguage.CountryCode where country.Continent = "Chinese" select city.Name) select distinct city.Name
Parsing error: from city join city.ID = (from city where city.CountryCode = "Asia" select city.Name intersect from countrylanguage join country on city.CountryCode = countrylanguage.CountryCode where countrylanguage.Language = "Chinese" select city.Name) select distinct city.Name
Parsing error: from city join city.ID = (from city where city.CountryCode = "Asia" select city.Name intersect from countrylanguage join country on countrylanguage.CountryCode = countrylanguage.CountryCode where country.Continent = "Chinese" select city.Name) select distinct city.Name
Parsing error: from city in distinct city.Name intersect from city join country on city.CountryCode = country.Code where country.Continent = "Chinese" select distinct city.Name
Parsing error: from city join city.ID = (from countrylanguage where city.CountryCode = "Asia" select countrylanguage.CountryCode intersect from countrylanguage where countrylanguage.Language = "Chinese" select city.Name) select distinct city.Name
Parsing error: from city join city.ID = (from city where city.CountryCode = "Asia" select city.Name intersect from city join country on city.CountryCode = country.Code where country.Continent = "Chinese" select city.Name
Parsing error: from city join city.ID = (from countrylanguage where city.CountryCode = "Asia" select countrylanguage.CountryCode intersect from city join country on city.CountryCode = country.Code where country.Continent = "Chinese" select city.Name
Parsing error: from city join city.ID = (from countrylanguage where city.CountryCode = "Asia" select countrylanguage.CountryCode intersect from city join country on city.CountryCode = country.Code where country.Continent = "Chinese" select city.Name) select distinct city.Name
Parsing error: from city join city.ID = (from city where city.CountryCode = "Asia" select city.Name intersect from countrylanguage where countrylanguage.Language = "Chinese" select distinct city.Name) select distinct city.Name
Parsing error: from city join city.ID = (from city where city.CountryCode = "Asia" select city.Name intersect from countrylanguage join country on city.CountryCode = country.Code where country.Continent = "Chinese" select country.Name) select distinct city.Name
Parsing error: from city intersect distinct city.Name intersect from city join country on city.CountryCode = country.Code where country.Continent = "Chinese" select distinct city.Name
Parsing error: from city join city.ID = (from city where city.CountryCode = "Asia" select city.Name intersect from countrylanguage where countrylanguage.Language = "Chinese" select city.Name) select distinct city.Name
Example 787
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Return the different names of cities that are in Asia and for which Chinese is the official language.'
NL tokens: [b'return', b'the', b'different', b'names', b'of', b'cities', b'that', b'are', b'in', b'asia', b'and', b'for', b'which', b'chinese', b'is', b'the', b'official', b'language', b'.']
NL tokens (original): [b'Return', b'the', b'different', b'names', b'of', b'cities', b'that', b'are', b'in', b'Asia', b'and', b'for', b'which', b'Chinese', b'is', b'the', b'official', b'language', b'.']
['[CLS]', 'return', 'the', 'different', 'names', 'of', 'cities', 'that', 'are', 'in', 'asia', 'and', 'for', 'which', 'chinese', 'is', 'the', 'official', 'language', '.', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused49]', 'asia', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused49]', 'chinese', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  \'T\' AND T2.Language  =  \'Chinese\' AND T1.Continent  =  "Asia"'
Target TF-P tokens: from country join countrylanguage on country.Code = countrylanguage.CountryCode join city on country.Code = city.CountryCode where countrylanguage.IsOfficial = "t" and countrylanguage.Language = "Chinese" and country.Continent = "Asia" select distinct city.Name

[WRONG] [hard] Pred 0:	b'SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = "Asia" INTERSECT SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = "Chinese"' (-2.601) (length=36)
Error Case 257

Parsing error: from country select country.Name , country.SurfaceArea select country.Name , country.SurfaceArea order by country.Population limit 1
Example 788
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What are the name, independence year, and surface area of the country with the smallest population?'
NL tokens: [b'what', b'are', b'the', b'name', b',', b'independence', b'year', b',', b'and', b'surface', b'area', b'of', b'the', b'country', b'with', b'the', b'smallest', b'population', b'?']
NL tokens (original): [b'What', b'are', b'the', b'name', b',', b'independence', b'year', b',', b'and', b'surface', b'area', b'of', b'the', b'country', b'with', b'the', b'smallest', b'population', b'?']
['[CLS]', 'what', 'are', 'the', 'name', ',', 'independence', 'year', ',', 'and', 'surface', 'area', 'of', 'the', 'country', 'with', 'the', 'smallest', 'population', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused49]', 'independence', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1'
Target TF-P tokens: from country select country.Name , country.SurfaceArea , country.IndepYear order by country.Population limit 1

[WRONG] [medium] Pred 0:	b'SELECT country.Name, country.Region, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1' (-0.219) (length=13)
[WRONG] [medium] Pred 1:	b'SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1' (-0.388) (length=13)
[WRONG] [medium] Pred 2:	b'SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1' (-0.750) (length=11)
[WRONG] [medium] Pred 3:	b'SELECT country.Name, country.Population, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1' (-0.836) (length=13)
[WRONG] [medium] Pred 4:	b'SELECT country.Name, country.SurfaceArea, country.Continent FROM country ORDER BY country.Population LIMIT 1' (-1.407) (length=13)
[WRONG] [medium] Pred 5:	b'SELECT country.Name, country.Continent, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1' (-2.036) (length=13)
[WRONG] [medium] Pred 6:	b'SELECT country.Name, country.SurfaceArea, country.Region FROM country ORDER BY country.Population LIMIT 1' (-2.191) (length=13)
[WRONG] [medium] Pred 7:	b'SELECT country.Name, country.Region, country.SurfaceArea FROM country ORDER BY country.Population ASC LIMIT 1' (-2.493) (length=14)
[WRONG] [medium] Pred 8:	b'SELECT country.Name, country.Population, country.Continent FROM country ORDER BY country.Population LIMIT 1' (-2.819) (length=13)
[WRONG] [medium] Pred 9:	b'SELECT country.Name, country.Population, country.Region FROM country ORDER BY country.Population LIMIT 1' (-2.860) (length=13)
[WRONG] [medium] Pred 10:	b'SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.Population ASC LIMIT 1' (-2.937) (length=14)
[WRONG] [medium] Pred 11:	b'SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.Population ASC LIMIT 1' (-3.142) (length=12)
[WRONG] [medium] Pred 12:	b'SELECT country.Name, country.SurfaceArea, country.Population FROM country ORDER BY country.Population LIMIT 1' (-3.197) (length=13)
[WRONG] [medium] Pred 13:	b'SELECT country.Name, country.Population, country.SurfaceArea FROM country ORDER BY country.Population ASC LIMIT 1' (-3.264) (length=14)
[WRONG] [medium] Pred 14:	b'SELECT country.Name, country.SurfaceArea, country.Code FROM country ORDER BY country.Population LIMIT 1' (-3.644) (length=13)
Error Case 258

Parsing error: from country select country.Name , country.Continent , country.SurfaceArea order by country.Population min (country.Population) limit 1
Parsing error: from country select country.Name , country.Continent , country.SurfaceArea order by country.Population < limit 1
Parsing error: from country select country.Name , country.Continent , country.SurfaceArea order by country.Population between 1 limit 1
Parsing error: from country select country.Name , country.Continent , country.SurfaceArea order by country.Population 1 limit 1
Parsing error: from country select country.Name , country.Continent , country.SurfaceArea order by country.Population <= limit 1
Parsing error: from country select country.Name , country.Continent , country.SurfaceArea order by country.Population except limit 1
Example 789
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Give the name, year of independence, and surface area of the country that has the lowest population.'
NL tokens: [b'give', b'the', b'name', b',', b'year', b'of', b'independence', b',', b'and', b'surface', b'area', b'of', b'the', b'country', b'that', b'has', b'the', b'lowest', b'population', b'.']
NL tokens (original): [b'Give', b'the', b'name', b',', b'year', b'of', b'independence', b',', b'and', b'surface', b'area', b'of', b'the', b'country', b'that', b'has', b'the', b'lowest', b'population', b'.']
['[CLS]', 'give', 'the', 'name', ',', 'year', 'of', 'independence', ',', 'and', 'surface', 'area', 'of', 'the', 'country', 'that', 'has', 'the', 'lowest', 'population', '.', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused49]', 'independence', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1'
Target TF-P tokens: from country select country.Name , country.SurfaceArea , country.IndepYear order by country.Population limit 1

[WRONG] [medium] Pred 0:	b'SELECT country.Name, country.Continent, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1' (-0.002) (length=13)
[WRONG] [medium] Pred 1:	b'SELECT country.Name, country.Continent, country.SurfaceArea FROM country ORDER BY country.Population ASC LIMIT 1' (-1.820) (length=14)
[WRONG] [medium] Pred 2:	b'SELECT country.Name, country.Region, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1' (-1.896) (length=13)
[WRONG] [medium] Pred 3:	b'SELECT country.Name, country.Continent, country.SurfaceArea FROM country ORDER BY country.Population DESC LIMIT 1' (-2.984) (length=14)
[WRONG] [medium] Pred 4:	b'SELECT country.Name, country.Continent, country.SurfaceArea FROM country ORDER BY country.Population < country.Continent LIMIT 1' (-3.557) (length=15)
[WRONG] [medium] Pred 5:	b'SELECT country.Name, country.Continent, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1' (-3.613) (length=15)
[WRONG] [medium] Pred 6:	b'SELECT country.Name, country.Region, country.SurfaceArea FROM country ORDER BY country.Population ASC LIMIT 1' (-3.682) (length=14)
[WRONG] [medium] Pred 7:	b'SELECT country.Name, country.Continent, country.SurfaceArea FROM country ORDER BY country.Population LIMIT "surface"' (-4.463) (length=13)
[WRONG] [medium] Pred 8:	b'SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.Population LIMIT 1' (-4.487) (length=13)
[WRONG] [medium] Pred 9:	b'SELECT country.Name, country.Continent, country.SurfaceArea FROM country ORDER BY country.Population <= 1' (-4.659) (length=13)
Error Case 259

Example 790
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What are the population, name and leader of the country with the largest area?'
NL tokens: [b'what', b'are', b'the', b'population', b',', b'name', b'and', b'leader', b'of', b'the', b'country', b'with', b'the', b'largest', b'area', b'?']
NL tokens (original): [b'What', b'are', b'the', b'population', b',', b'name', b'and', b'leader', b'of', b'the', b'country', b'with', b'the', b'largest', b'area', b'?']
['[CLS]', 'what', 'are', 'the', 'population', ',', 'name', 'and', 'leader', 'of', 'the', 'country', 'with', 'the', 'largest', 'area', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1'
Target TF-P tokens: from country select country.Name , country.Population , country.HeadOfState order by country.SurfaceArea desc limit 1

[WRONG] [medium] Pred 0:	b'SELECT country.Population, country.Name, country.Region FROM country ORDER BY country.Region DESC LIMIT 1' (-0.002) (length=14)
[WRONG] [medium] Pred 1:	b'SELECT country.Population, country.Name, country.Continent FROM country ORDER BY country.Region DESC LIMIT 1' (-1.561) (length=14)
[WRONG] [medium] Pred 2:	b'SELECT country.Population, country.Name, country.GNP FROM country ORDER BY country.Region DESC LIMIT 1' (-2.098) (length=14)
[WRONG] [medium] Pred 3:	b'SELECT country.Population, country.Name, country.GNPOld FROM country ORDER BY country.Region DESC LIMIT 1' (-2.319) (length=14)
[WRONG] [medium] Pred 4:	b'SELECT country.Population, country.Name, country.LifeExpectancy FROM country ORDER BY country.Region DESC LIMIT 1' (-2.391) (length=14)
[WRONG] [medium] Pred 5:	b'SELECT country.Population, country.Name, country.SurfaceArea FROM country ORDER BY country.Region DESC LIMIT 1' (-2.419) (length=14)
[WRONG] [medium] Pred 6:	b'SELECT country.Population, country.Name, country.Code2 FROM country ORDER BY country.Region DESC LIMIT 1' (-2.448) (length=14)
[WRONG] [medium] Pred 7:	b'SELECT country.Population, country.Name, country.Code FROM country ORDER BY country.Region DESC LIMIT 1' (-2.457) (length=14)
[WRONG] [medium] Pred 8:	b'SELECT country.Population, country.Name, country.Capital FROM country ORDER BY country.Region DESC LIMIT 1' (-2.845) (length=14)
[WRONG] [medium] Pred 9:	b'SELECT country.Population, country.Name FROM country ORDER BY country.Region DESC LIMIT 1' (-3.133) (length=14)
[WRONG] [medium] Pred 10:	b'SELECT country.Population, country.Name, country.HeadOfState FROM country ORDER BY country.Region DESC LIMIT 1' (-3.834) (length=14)
[WRONG] [medium] Pred 11:	b'SELECT country.Population, country.Name, country.IndepYear FROM country ORDER BY country.Region DESC LIMIT 1' (-3.944) (length=14)
[WRONG] [medium] Pred 12:	b'SELECT country.Population, country.Name, country.GovernmentForm FROM country ORDER BY country.Region DESC LIMIT 1' (-4.230) (length=14)
[WRONG] [medium] Pred 13:	b'SELECT country.Population, country.Name, "city" FROM country ORDER BY country.Region DESC LIMIT 1' (-4.275) (length=14)
[WRONG] [medium] Pred 14:	b'SELECT country.Population, country.Name, "area" FROM country ORDER BY country.Region DESC LIMIT 1' (-4.573) (length=14)
[WRONG] [medium] Pred 15:	b'SELECT country.Population, country.Name, country.LocalName FROM country ORDER BY country.Region DESC LIMIT 1' (-4.649) (length=14)
Error Case 260

ERROR: Join condition does not match with table: ['country', {'join': 'city', 'on': {'eq': ['country.Code', 'country.HeadOfState']}}]
Parsing error: from country where country.Continent = (from country where country.Continent = (from country select country.Continent order by country.Region desc limit 1) select country.Name , country.Population , country.HeadOfState
Parsing error: from country where country.Continent = (from country where country.Region = (from country select max (country.Region)) select country.Name , country.Population , country.HeadOfState
ERROR: Join condition does not match with table: ['country', {'join': 'city', 'on': {'eq': ['country.Code', 'country.HeadOfState']}}]
Parsing error: from country join city on country.Code = country.HeadOfState where country.Continent = (from country select country.Continent , country.Population , country.HeadOfState order by country.Region desc limit 1
Parsing error: from country join city on country.Code = country.HeadOfState where country.Continent = (from country select country.Code , country.Population , country.HeadOfState order by country.Region desc limit 1
Parsing error: from country order by country.Region = (from country select max (country.Region)) select country.Name , country.Population , country.HeadOfState
ERROR: Join condition does not match with table: ['country', {'join': 'city', 'on': {'eq': ['country.Code', 'country.HeadOfState']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'city', 'on': {'eq': ['country.Code', 'country.Continent']}}]
Example 791
 76%|███████▌  | 99/130 [13:27<13:13, 25.61s/it]world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Give the name, population, and head of state for the country that has the largest area.'
NL tokens: [b'give', b'the', b'name', b',', b'population', b',', b'and', b'head', b'of', b'state', b'for', b'the', b'country', b'that', b'has', b'the', b'largest', b'area', b'.']
NL tokens (original): [b'Give', b'the', b'name', b',', b'population', b',', b'and', b'head', b'of', b'state', b'for', b'the', b'country', b'that', b'has', b'the', b'largest', b'area', b'.']
['[CLS]', 'give', 'the', 'name', ',', 'population', ',', 'and', 'head', 'of', 'state', 'for', 'the', 'country', 'that', 'has', 'the', 'largest', 'area', '.', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1'
Target TF-P tokens: from country select country.Name , country.Population , country.HeadOfState order by country.SurfaceArea desc limit 1

[WRONG] [medium] Pred 0:	b'SELECT country.Name, country.Population, country.HeadOfState FROM country ORDER BY country.Region DESC LIMIT 1' (-0.000) (length=14)
[WRONG] [medium] Pred 1:	b'SELECT country.Name, country.Population, country.HeadOfState FROM country WHERE country.Region = (SELECT MAX(country.Region) FROM country)' (-2.242) (length=21)
[WRONG] [medium] Pred 2:	b'SELECT country.Name, country.Population, country.HeadOfState FROM country WHERE country.Continent = (SELECT country.Continent FROM country ORDER BY country.Region DESC LIMIT 1)' (-2.663) (length=23)
[WRONG] [medium] Pred 3:	b'SELECT country.Name, country.Population, country.Continent FROM country ORDER BY country.Region DESC LIMIT 1' (-2.909) (length=14)
[WRONG] [medium] Pred 4:	b'SELECT country.Name, country.Population, country.HeadOfState FROM country WHERE country.Continent = (SELECT country.Continent FROM country WHERE country.Region = (SELECT MAX(country.Region) FROM country))' (-3.082) (length=30)
[WRONG] [medium] Pred 5:	b'SELECT country.Name, country.Population, country.Continent FROM country GROUP BY country.Continent ORDER BY MAX(country.Region) DESC LIMIT 1' (-3.489) (length=19)
[WRONG] [medium] Pred 6:	b'SELECT country.Name, country.Population, country.HeadOfState FROM country GROUP BY country.Continent ORDER BY MAX(country.Region) DESC LIMIT 1' (-3.578) (length=19)
Error Case 261

ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Continent']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Continent']}}]
argument of type 'int' is not iterable
argument of type 'int' is not iterable
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.IndepYear']}}]
argument of type 'int' is not iterable
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Continent', 'country.Continent']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
Example 792
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.'
NL tokens: [b'return', b'the', b'country', b'name', b'and', b'the', b'numbers', b'of', b'languages', b'spoken', b'for', b'each', b'country', b'that', b'speaks', b'at', b'least', b'3', b'languages', b'.']
NL tokens (original): [b'Return', b'the', b'country', b'name', b'and', b'the', b'numbers', b'of', b'languages', b'spoken', b'for', b'each', b'country', b'that', b'speaks', b'at', b'least', b'3', b'languages', b'.']
['[CLS]', 'return', 'the', 'country', 'name', 'and', 'the', 'numbers', 'of', 'languages', 'spoken', 'for', 'each', 'country', 'that', 'speaks', 'at', 'least', '3', 'languages', '.', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2'
Target TF-P tokens: from country join countrylanguage on country.Code = countrylanguage.CountryCode group by country.Name having count (*) > 2 select count (countrylanguage.Language) , country.Name

[WRONG] [medium] Pred 0:	b'SELECT country.Name, COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(*) >= 3' (-0.044) (length=25)
[WRONG] [medium] Pred 1:	b'SELECT country.Name, COUNT(*) FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.Continent GROUP BY country.Name HAVING COUNT(*) >= 3' (-0.437) (length=25)
[WRONG] [medium] Pred 2:	b'SELECT country.Name, COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Continent HAVING COUNT(*) >= 3' (-1.207) (length=25)
[WRONG] [medium] Pred 3:	b'SELECT country.Name, COUNT(*) FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.Continent GROUP BY country.Continent HAVING COUNT(*) >= 3' (-1.507) (length=25)
[WRONG] [medium] Pred 4:	b'SELECT country.Name, COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.Language GROUP BY country.Name HAVING COUNT(*) >= 3' (-1.842) (length=25)
[WRONG] [medium] Pred 5:	b'SELECT country.Name, COUNT(*) FROM country JOIN countrylanguage ON country.Continent = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(*) >= 3' (-1.967) (length=25)
[WRONG] [medium] Pred 6:	b'SELECT country.Name, COUNT(*) FROM country GROUP BY country.Continent HAVING COUNT(*) >= 3' (-2.235) (length=19)
Error Case 262

ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Continent']}}]
argument of type 'int' is not iterable
Parsing error: from country join countrylanguage on country.Code = countrylanguage.CountryCode group by country.Name having count (*) having > 2 select country.Name , count (*)
argument of type 'int' is not iterable
Example 793
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What are the names of countries that speak more than 2 languages, as well as how many languages they speak?'
NL tokens: [b'what', b'are', b'the', b'names', b'of', b'countries', b'that', b'speak', b'more', b'than', b'2', b'languages', b',', b'as', b'well', b'as', b'how', b'many', b'languages', b'they', b'speak', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'of', b'countries', b'that', b'speak', b'more', b'than', b'2', b'languages', b',', b'as', b'well', b'as', b'how', b'many', b'languages', b'they', b'speak', b'?']
['[CLS]', 'what', 'are', 'the', 'names', 'of', 'countries', 'that', 'speak', 'more', 'than', '2', 'languages', ',', 'as', 'well', 'as', 'how', 'many', 'languages', 'they', 'speak', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2'
Target TF-P tokens: from country join countrylanguage on country.Code = countrylanguage.CountryCode group by country.Name having count (*) > 2 select count (countrylanguage.Language) , country.Name

[WRONG] [medium] Pred 0:	b'SELECT country.Name, COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(*) > 2' (-0.000) (length=25)
[WRONG] [medium] Pred 1:	b'SELECT country.Name, COUNT(*) FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.Continent GROUP BY country.Name HAVING COUNT(*) > 2' (-2.156) (length=25)
[WRONG] [medium] Pred 2:	b'SELECT country.Name, COUNT(*), countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(*) > 2' (-2.698) (length=27)
[WRONG] [medium] Pred 3:	b'SELECT country.Name, COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(*) >= 2' (-2.719) (length=25)
[WRONG] [medium] Pred 4:	b'SELECT country.Name, COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(*) < 2' (-2.741) (length=25)
[WRONG] [medium] Pred 5:	b'SELECT country.Name, COUNT(*) FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.Code GROUP BY country.Name HAVING COUNT(*) > 2' (-2.764) (length=25)
[WRONG] [medium] Pred 6:	b'SELECT country.Name, COUNT(*) FROM country JOIN countrylanguage ON country.Continent = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(*) > 2' (-2.765) (length=25)
[WRONG] [medium] Pred 7:	b'SELECT country.Name, COUNT(*) FROM country JOIN countrylanguage ON country.Name = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(*) > 2' (-2.921) (length=25)
[WRONG] [medium] Pred 8:	b'SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(*) > 2' (-3.152) (length=20)
[WRONG] [medium] Pred 9:	b'SELECT country.Continent, COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(*) > 2' (-3.180) (length=25)
[WRONG] [medium] Pred 10:	b'SELECT country.Name, COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Continent HAVING COUNT(*) > 2' (-3.190) (length=25)
Error Case 263

Parsing error: from country where country.Continent < (from country where country.Population < 72 group by country.Continent select avg (country.LifeExpectancy)) , avg (country.LifeExpectancy) , avg (country.Population) , country.Continent
Parsing error: from country where country.Continent < (from country where country.Population < 72 group by country.Continent select avg (country.LifeExpectancy)) : avg (country.LifeExpectancy) , avg (country.Population) , country.Continent
Parsing error: from country where country.Continent < (from country where country.Population < 72 group by country.Continent select avg (country.LifeExpectancy)) , avg (country.Population) , avg (country.Population) , country.Continent
Parsing error: from country where country.Continent < (from country where country.Population < 72 group by country.Continent select avg (country.LifeExpectancy)) / avg (country.LifeExpectancy) , country.Continent
Parsing error: from country where country.Continent < (from country where country.Population < 72 group by country.Continent select avg (country.LifeExpectancy)) + avg (country.LifeExpectancy) , avg (country.Population) , country.Continent
Parsing error: from country where country.Continent < (from country where country.Population < 72 group by country.Continent select avg (country.LifeExpectancy)) / avg (country.LifeExpectancy) , avg (country.Population) , country.Continent
Parsing error: from country where country.Continent < (from country where country.Population < 72 group by country.Continent select avg (country.LifeExpectancy)) and avg (country.LifeExpectancy) , country.Continent
Example 798
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?'
NL tokens: [b'find', b'the', b'average', b'life', b'expect', b'##ancy', b'and', b'total', b'population', b'for', b'each', b'continent', b'where', b'the', b'average', b'life', b'expect', b'##ancy', b'is', b'shorter', b'than', b'72', b'?']
NL tokens (original): [b'Find', b'the', b'average', b'life', b'expect', b'##ancy', b'and', b'total', b'population', b'for', b'each', b'continent', b'where', b'the', b'average', b'life', b'expect', b'##ancy', b'is', b'shorter', b'than', b'72', b'?']
['[CLS]', 'find', 'the', 'average', 'life', 'expect', '##ancy', 'and', 'total', 'population', 'for', 'each', 'continent', 'where', 'the', 'average', 'life', 'expect', '##ancy', 'is', 'shorter', 'than', '72', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72'
Target TF-P tokens: from country group by country.Continent having avg (country.LifeExpectancy) < 72 select sum (country.Population) , avg (country.LifeExpectancy) , country.Continent

[WRONG] [medium] Pred 0:	b'SELECT AVG(country.LifeExpectancy), AVG(country.Population), country.Continent FROM country WHERE country.Continent < (SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Population < 72 GROUP BY country.Continent) GROUP BY country.Continent' (-0.181) (length=35)
[WRONG] [medium] Pred 1:	b'SELECT AVG(country.LifeExpectancy), AVG(country.Population), country.Continent FROM country WHERE country.Continent < (SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Population < 72 GROUP BY country.Continent)' (-0.429) (length=33)
[WRONG] [medium] Pred 2:	b'SELECT AVG(country.LifeExpectancy), AVG(country.Population), country.Continent FROM country WHERE country.Continent < (SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Population < 72) GROUP BY country.Continent' (-0.448) (length=33)
[WRONG] [medium] Pred 3:	b'SELECT AVG(country.LifeExpectancy), AVG(country.Population), country.Continent FROM country WHERE country.Continent < "average" GROUP BY country.Continent' (-0.490) (length=23)
[WRONG] [medium] Pred 4:	b'SELECT AVG(country.LifeExpectancy), country.Continent FROM country WHERE country.Continent < (SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Population < 72 GROUP BY country.Continent) GROUP BY country.Continent' (-0.596) (length=35)
[WRONG] [medium] Pred 5:	b'SELECT AVG(country.LifeExpectancy), country.Continent FROM country WHERE country.Continent < (SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Population < 72 GROUP BY country.Continent) GROUP BY country.Continent' (-0.623) (length=30)
[WRONG] [medium] Pred 6:	b'SELECT AVG(country.LifeExpectancy), AVG(country.Population), country.Continent FROM country WHERE country.LifeExpectancy < 72 GROUP BY country.Continent' (-0.757) (length=21)
[WRONG] [medium] Pred 7:	b'SELECT AVG(country.LifeExpectancy), country.Continent FROM country WHERE country.Continent < (SELECT AVG(country.LifeExpectancy) FROM country WHERE country.Population < 72) GROUP BY country.Continent' (-0.882) (length=33)
[WRONG] [medium] Pred 8:	b'SELECT AVG(country.LifeExpectancy), country.Continent FROM country WHERE country.Continent < "average" GROUP BY country.Continent' (-1.073) (length=23)
Error Case 264

Parsing error: from country group by country.Continent having avg (country.LifeExpectancy) < 72 select country.Continent , avg (country.LifeExpectancy) intersect from country where country.Name = "VALUE / VALUE 72 select country.Continent , avg (country.LifeExpectancy)"
Example 799
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?'
NL tokens: [b'what', b'are', b'the', b'different', b'continents', b'and', b'the', b'total', b'pop', b'##uation', b'and', b'average', b'life', b'expect', b'##ancy', b'corresponding', b'to', b'each', b',', b'for', b'continents', b'that', b'have', b'an', b'average', b'life', b'expect', b'##ancy', b'less', b'than', b'72', b'?']
NL tokens (original): [b'What', b'are', b'the', b'different', b'continents', b'and', b'the', b'total', b'pop', b'##uation', b'and', b'average', b'life', b'expect', b'##ancy', b'corresponding', b'to', b'each', b',', b'for', b'continents', b'that', b'have', b'an', b'average', b'life', b'expect', b'##ancy', b'less', b'than', b'72', b'?']
 77%|███████▋  | 100/130 [13:43<11:28, 22.96s/it]['[CLS]', 'what', 'are', 'the', 'different', 'continents', 'and', 'the', 'total', 'pop', '##uation', 'and', 'average', 'life', 'expect', '##ancy', 'corresponding', 'to', 'each', ',', 'for', 'continents', 'that', 'have', 'an', 'average', 'life', 'expect', '##ancy', 'less', 'than', '72', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72'
Target TF-P tokens: from country group by country.Continent having avg (country.LifeExpectancy) < 72 select sum (country.Population) , avg (country.LifeExpectancy) , country.Continent

[WRONG] [medium] Pred 0:	b'SELECT country.Continent, AVG(country.LifeExpectancy) FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72' (-0.004) (length=19)
[WRONG] [medium] Pred 1:	b'SELECT AVG(country.LifeExpectancy), country.Continent FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72' (-1.020) (length=19)
[WRONG] [medium] Pred 2:	b'SELECT country.Continent, AVG(country.LifeExpectancy) FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72' (-1.297) (length=24)
[WRONG] [medium] Pred 3:	b'SELECT country.Continent, SUM(country.LifeExpectancy) FROM country WHERE country.LifeExpectancy < 72 GROUP BY country.Continent' (-1.592) (length=16)
[WRONG] [medium] Pred 4:	b'SELECT country.Continent, AVG(country.LifeExpectancy) FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72 INTERSECT SELECT country.Continent, SUM(country.LifeExpectancy) FROM country WHERE country.Name = "VALUE / VALUE / VALUE" GROUP BY country.Continent' (-1.636) (length=41)
[WRONG] [medium] Pred 5:	b'SELECT country.Continent, AVG(country.LifeExpectancy) FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72 INTERSECT SELECT country.Continent, SUM(country.LifeExpectancy) FROM country WHERE country.Name = "VALUE / VALUE average : VALUE" GROUP BY country.Continent' (-1.727) (length=42)
[WRONG] [medium] Pred 6:	b'SELECT country.Continent, AVG(country.LifeExpectancy) FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72 INTERSECT SELECT country.Continent, SUM(country.LifeExpectancy) FROM country WHERE country.Name = "VALUE / VALUE 72 : VALUE" GROUP BY country.Continent' (-1.744) (length=42)
[WRONG] [medium] Pred 7:	b'SELECT country.Continent, SUM(country.LifeExpectancy) FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72' (-1.788) (length=19)
[WRONG] [medium] Pred 8:	b'SELECT country.Continent, SUM(country.LifeExpectancy) < AVG(country.LifeExpectancy) FROM country GROUP BY country.Continent' (-1.850) (length=17)
[WRONG] [medium] Pred 9:	b'SELECT country.Continent, SUM(country.LifeExpectancy) FROM country GROUP BY country.Continent INTERSECT SELECT country.Continent, SUM(country.LifeExpectancy) FROM country WHERE country.LifeExpectancy < 72 GROUP BY country.Continent' (-1.937) (length=28)
[WRONG] [medium] Pred 10:	b'SELECT country.Continent, SUM(country.LifeExpectancy) FROM country GROUP BY country.Continent, 72 INTERSECT SELECT country.Continent, AVG(country.LifeExpectancy) FROM country WHERE country.Name LIKE "12 / %"' (-1.950) (length=32)
[WRONG] [medium] Pred 11:	b'SELECT country.Continent, AVG(country.LifeExpectancy) FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72 INTERSECT SELECT country.Continent, AVG(country.LifeExpectancy) FROM country WHERE country.Name = "VALUE / VALUE / VALUE" GROUP BY country.Continent' (-2.064) (length=41)
[WRONG] [medium] Pred 12:	b'SELECT country.Continent, SUM(country.LifeExpectancy) FROM country GROUP BY country.Continent INTERSECT SELECT country.Continent, AVG(country.LifeExpectancy) FROM country WHERE country.LifeExpectancy < 72 GROUP BY country.Continent' (-2.085) (length=28)
[WRONG] [medium] Pred 13:	b'SELECT country.Continent, AVG(country.LifeExpectancy) FROM country WHERE country.LifeExpectancy < 72 GROUP BY country.Continent' (-2.156) (length=21)
[WRONG] [medium] Pred 14:	b'SELECT country.Continent, AVG(country.LifeExpectancy) FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < 72 INTERSECT SELECT country.Continent, country.LifeExpectancy FROM country WHERE country.Name = "VALUE"' (-2.252) (length=32)
Error Case 265

ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Continent']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'city', 'on': {'eq': ['country.Code', 'country.Continent']}}]
Parsing error: from country select country.Name , country.Region order by country.Region desc limit with
Parsing error: from country select country.Name , country.Region select country.Region order by country.Region desc limit 5
ERROR: "country.Continent" appeared in FROM clause and is not a table
Parsing error: from country , country.Region order by country.Region desc limit 5
Parsing error: from country select country.Name , country.Region order by country.Region desc limit ?
Example 800
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What are the names and areas of countries with the top 5 largest area?'
NL tokens: [b'what', b'are', b'the', b'names', b'and', b'areas', b'of', b'countries', b'with', b'the', b'top', b'5', b'largest', b'area', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'and', b'areas', b'of', b'countries', b'with', b'the', b'top', b'5', b'largest', b'area', b'?']
 78%|███████▊  | 101/130 [13:46<08:04, 16.71s/it]['[CLS]', 'what', 'are', 'the', 'names', 'and', 'areas', 'of', 'countries', 'with', 'the', 'top', '5', 'largest', 'area', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5'
Target TF-P tokens: from country select country.Name , country.SurfaceArea order by country.SurfaceArea desc limit 5

[WRONG] [medium] Pred 0:	b'SELECT country.Name, country.Region FROM country ORDER BY country.Region DESC LIMIT 5' (-0.000) (length=12)
[WRONG] [medium] Pred 1:	b'SELECT country.Name, country.Region FROM country ORDER BY country.Region DESC LIMIT 5' (-4.115) (length=14)
[WRONG] [medium] Pred 2:	b'SELECT country.Name, country.Region FROM country ORDER BY country.Region DESC LIMIT "top"' (-4.208) (length=12)
[WRONG] [medium] Pred 3:	b'SELECT country.Name, country.Region FROM country ORDER BY country.Region DESC LIMIT "largest"' (-4.505) (length=12)
[WRONG] [medium] Pred 4:	b'SELECT country.Name, country.Region FROM country ORDER BY country.Region DESC LIMIT "area"' (-4.517) (length=12)
[WRONG] [medium] Pred 5:	b'SELECT country.Name, country.Region FROM country ORDER BY country.Region DESC LIMIT "the"' (-4.908) (length=12)
[WRONG] [medium] Pred 6:	b'SELECT country.Name, country.Region FROM country ORDER BY country.Continent DESC LIMIT 5' (-5.105) (length=12)
[WRONG] [medium] Pred 7:	b'SELECT country.Name, country.Region FROM country ORDER BY country.Region ASC LIMIT 5' (-5.794) (length=12)
[WRONG] [medium] Pred 8:	b'SELECT country.Name, country.Region FROM country ORDER BY country.SurfaceArea DESC LIMIT 5' (-5.875) (length=12)
Error Case 266

Example 801
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Return the names and surface areas of the 5 largest countries.'
NL tokens: [b'return', b'the', b'names', b'and', b'surface', b'areas', b'of', b'the', b'5', b'largest', b'countries', b'.']
NL tokens (original): [b'Return', b'the', b'names', b'and', b'surface', b'areas', b'of', b'the', b'5', b'largest', b'countries', b'.']
['[CLS]', 'return', 'the', 'names', 'and', 'surface', 'areas', 'of', 'the', '5', 'largest', 'countries', '.', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5'
Target TF-P tokens: from country select country.Name , country.SurfaceArea order by country.SurfaceArea desc limit 5

[WRONG] [medium] Pred 0:	b'SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.Region DESC LIMIT 5' (-0.005) (length=12)
[WRONG] [medium] Pred 1:	b'SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.Continent DESC LIMIT 5' (-1.461) (length=12)
[CORRE] [medium] Pred 2:	b'SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.SurfaceArea DESC LIMIT 5' (-2.206) (length=12)
Error Case 267

Example 808
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What are the names of the countries that are in the continent of Europe and have a population of 80000?'
NL tokens: [b'what', b'are', b'the', b'names', b'of', b'the', b'countries', b'that', b'are', b'in', b'the', b'continent', b'of', b'europe', b'and', b'have', b'a', b'population', b'of', b'800', b'##00', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'of', b'the', b'countries', b'that', b'are', b'in', b'the', b'continent', b'of', b'Europe', b'and', b'have', b'a', b'population', b'of', b'800', b'##00', b'?']
['[CLS]', 'what', 'are', 'the', 'names', 'of', 'the', 'countries', 'that', 'are', 'in', 'the', 'continent', 'of', 'europe', 'and', 'have', 'a', 'population', 'of', '800', '##00', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused49]', 'europe', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT Name FROM country WHERE continent  =  "Europe" AND Population  =  "80000"'
Target TF-P tokens: from country where country.Continent = "Europe" and country.Population = 80000 select country.Name

[WRONG] [medium] Pred 0:	b'SELECT country.Name FROM country WHERE country.Continent = "Europe" AND country.Population > 80000' (-0.000) (length=16)
[CORRE] [medium] Pred 1:	b'SELECT country.Name FROM country WHERE country.Continent = "Europe" AND country.Population = 80000' (-1.864) (length=16)
Error Case 268

Example 810
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?'
NL tokens: [b'what', b'is', b'the', b'total', b'population', b'and', b'average', b'area', b'of', b'countries', b'in', b'the', b'continent', b'of', b'north', b'america', b'whose', b'area', b'is', b'bigger', b'than', b'3000', b'?']
NL tokens (original): [b'What', b'is', b'the', b'total', b'population', b'and', b'average', b'area', b'of', b'countries', b'in', b'the', b'continent', b'of', b'North', b'America', b'whose', b'area', b'is', b'bigger', b'than', b'3000', b'?']
['[CLS]', 'what', 'is', 'the', 'total', 'population', 'and', 'average', 'area', 'of', 'countries', 'in', 'the', 'continent', 'of', 'north', 'america', 'whose', 'area', 'is', 'bigger', 'than', '3000', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused49]', 'north', 'america', '[unused51]', 'region', '[unused49]', 'north', 'america', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000'
Target TF-P tokens: from country where country.Continent = "North America" and country.SurfaceArea > 3000 select sum (country.Population) , avg (country.SurfaceArea)

[WRONG] [hard] Pred 0:	b'SELECT AVG(country.Population) FROM country WHERE country.Continent = "North America" AND country.Region = "North America"' (-0.098) (length=27)
[WRONG] [hard] Pred 1:	b'SELECT AVG(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.Region = "North America"' (-0.191) (length=27)
[WRONG] [hard] Pred 2:	b'SELECT AVG(country.Population) FROM country WHERE country.Continent = "North America" AND country.Region = "North America" AND country.Region > 3000' (-0.634) (length=31)
[WRONG] [hard] Pred 3:	b'SELECT AVG(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.Region = "North America" AND country.Region > 3000' (-0.637) (length=31)
[WRONG] [hard] Pred 4:	b'SELECT SUM(country.Population), AVG(country.Population) FROM country WHERE country.Continent = "North America" AND country.Region = "North America" AND country.Region > 3000' (-0.807) (length=31)
[WRONG] [hard] Pred 5:	b'SELECT AVG(country.Population) FROM country WHERE country.Continent = "North America" AND country.Region > "North America"' (-0.812) (length=27)
[WRONG] [hard] Pred 6:	b'SELECT AVG(country.Population) FROM country WHERE country.Continent = "North America" AND country.Region > 3000' (-0.866) (length=24)
[WRONG] [hard] Pred 7:	b'SELECT AVG(country.Population) FROM country WHERE country.Continent = "North America" AND country.Region = 3000' (-0.866) (length=26)
[WRONG] [hard] Pred 8:	b'SELECT AVG(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.Region > "North America"' (-0.895) (length=27)
[WRONG] [hard] Pred 9:	b'SELECT AVG(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.Region = 3000' (-0.898) (length=26)
[WRONG] [hard] Pred 10:	b'SELECT AVG(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.Region = "North America" AND country.SurfaceArea > 3000' (-0.947) (length=31)
[WRONG] [hard] Pred 11:	b'SELECT AVG(country.Population) FROM country WHERE country.Continent = "North America" AND country.Region = "North America" AND country.SurfaceArea > 3000' (-0.948) (length=31)
[WRONG] [hard] Pred 12:	b'SELECT AVG(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.Region > 3000' (-0.950) (length=24)
[WRONG] [hard] Pred 13:	b'SELECT SUM(country.Population), AVG(country.Population) FROM country WHERE country.Continent = "North America" AND country.Region = "North America" AND country.Region > 3000' (-0.971) (length=33)
[WRONG] [hard] Pred 14:	b'SELECT SUM(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.Region = "North America" AND country.Region > 3000' (-0.975) (length=31)
[WRONG] [hard] Pred 15:	b'SELECT SUM(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.Region = "North America" AND country.Region > 3000' (-1.020) (length=33)
Error Case 269

Example 811
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .'
NL tokens: [b'give', b'the', b'total', b'population', b'and', b'average', b'surface', b'area', b'corresponding', b'to', b'countries', b'in', b'north', b'america', b'that', b'have', b'a', b'surface', b'area', b'greater', b'than', b'3000', b'.']
 78%|███████▊  | 102/130 [13:56<06:57, 14.91s/it]NL tokens (original): [b'Give', b'the', b'total', b'population', b'and', b'average', b'surface', b'area', b'corresponding', b'to', b'countries', b'in', b'North', b'America', b'that', b'have', b'a', b'surface', b'area', b'greater', b'than', b'3000', b'.']
['[CLS]', 'give', 'the', 'total', 'population', 'and', 'average', 'surface', 'area', 'corresponding', 'to', 'countries', 'in', 'north', 'america', 'that', 'have', 'a', 'surface', 'area', 'greater', 'than', '3000', '.', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused49]', 'north', 'america', '[unused51]', 'region', '[unused49]', 'north', 'america', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000'
Target TF-P tokens: from country where country.Continent = "North America" and country.SurfaceArea > 3000 select sum (country.Population) , avg (country.SurfaceArea)

[WRONG] [hard] Pred 0:	b'SELECT AVG(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.SurfaceArea > 3000' (-0.164) (length=24)
[WRONG] [hard] Pred 1:	b'SELECT AVG(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.Region = "North America"' (-0.183) (length=27)
[WRONG] [hard] Pred 2:	b'SELECT AVG(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.Region = 3000' (-0.275) (length=26)
[WRONG] [hard] Pred 3:	b'SELECT AVG(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.Region = "North America" AND country.SurfaceArea > 3000' (-0.651) (length=31)
[WRONG] [hard] Pred 4:	b'SELECT AVG(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.Region = "than America"' (-1.100) (length=27)
[WRONG] [hard] Pred 5:	b'SELECT AVG(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.Region = "greater America"' (-1.673) (length=27)
[WRONG] [hard] Pred 6:	b'SELECT AVG(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.Region = "greater 3000"' (-1.715) (length=27)
[WRONG] [hard] Pred 7:	b'SELECT AVG(country.Population) FROM country WHERE country.Continent = "North America" AND country.Region = 3000' (-1.766) (length=26)
[WRONG] [hard] Pred 8:	b'SELECT AVG(country.Population) FROM country WHERE country.Continent = "North America" AND country.Region = "North America"' (-1.795) (length=27)
[WRONG] [hard] Pred 9:	b'SELECT AVG(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.Region = "than 3000"' (-1.821) (length=27)
[WRONG] [hard] Pred 10:	b'SELECT AVG(country.Population) FROM country WHERE country.Continent = "North America" AND country.SurfaceArea > 3000' (-1.827) (length=24)
[WRONG] [hard] Pred 11:	b'SELECT AVG(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.SurfaceArea > 3000 AND country.Region = "North America"' (-1.870) (length=31)
[WRONG] [hard] Pred 12:	b'SELECT AVG(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.Region = "greater America" AND country.SurfaceArea > 3000' (-1.911) (length=31)
[WRONG] [hard] Pred 13:	b'SELECT AVG(country.Population) FROM country WHERE country.Continent = "North America" AND country.Region = "North America" AND country.SurfaceArea > 3000' (-1.968) (length=31)
[WRONG] [hard] Pred 14:	b'SELECT AVG(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.SurfaceArea > 3000 AND country.Region = "North America"' (-2.024) (length=24)
[WRONG] [hard] Pred 15:	b'SELECT AVG(country.Population), AVG(country.SurfaceArea) FROM country WHERE country.Continent = "North America" AND country.Region = "greater than America"' (-2.054) (length=28)
Error Case 270

ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.GNPOld']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.GNP']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Code2']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
Example 816
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What is the language spoken by the largest percentage of people in each country?'
NL tokens: [b'what', b'is', b'the', b'language', b'spoken', b'by', b'the', b'largest', b'percentage', b'of', b'people', b'in', b'each', b'country', b'?']
NL tokens (original): [b'What', b'is', b'the', b'language', b'spoken', b'by', b'the', b'largest', b'percentage', b'of', b'people', b'in', b'each', b'country', b'?']
['[CLS]', 'what', 'is', 'the', 'language', 'spoken', 'by', 'the', 'largest', 'percentage', 'of', 'people', 'in', 'each', 'country', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode'
Target TF-P tokens: from countrylanguage group by countrylanguage.CountryCode select countrylanguage.Language , countrylanguage.CountryCode , max (countrylanguage.Percentage)

[WRONG] [medium] Pred 0:	b'SELECT countrylanguage.Language, MAX(countrylanguage.Percentage) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name' (-0.682) (length=18)
[WRONG] [medium] Pred 1:	b'SELECT countrylanguage.Language, MAX(countrylanguage.Percentage) FROM countrylanguage GROUP BY countrylanguage.Language' (-1.147) (length=12)
[WRONG] [medium] Pred 2:	b'SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name ORDER BY MAX(countrylanguage.Percentage) DESC LIMIT 1' (-1.282) (length=21)
[WRONG] [medium] Pred 3:	b'SELECT country.Name, MAX(countrylanguage.Percentage) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name' (-1.731) (length=18)
[WRONG] [medium] Pred 4:	b'SELECT countrylanguage.Language, MAX(countrylanguage.Percentage) FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.GNPOld GROUP BY country.Name' (-1.817) (length=18)
[WRONG] [medium] Pred 5:	b'SELECT countrylanguage.Language, MAX(countrylanguage.Percentage) FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.GNP GROUP BY country.Name' (-1.960) (length=18)
Error Case 271

ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Continent']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Continent']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.GNP']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.GNPOld']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.GNP']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Code2']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.GNPOld']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.IndepYear']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.GovernmentForm']}}]
Example 817
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?'
NL tokens: [b'what', b'are', b'the', b'country', b'codes', b'of', b'the', b'different', b'countries', b',', b'and', b'what', b'are', b'the', b'languages', b'spoken', b'by', b'the', b'greatest', b'percentage', b'of', b'people', b'for', b'each', b'?']
NL tokens (original): [b'What', b'are', b'the', b'country', b'codes', b'of', b'the', b'different', b'countries', b',', b'and', b'what', b'are', b'the', b'languages', b'spoken', b'by', b'the', b'greatest', b'percentage', b'of', b'people', b'for', b'each', b'?']
['[CLS]', 'what', 'are', 'the', 'country', 'codes', 'of', 'the', 'different', 'countries', ',', 'and', 'what', 'are', 'the', 'languages', 'spoken', 'by', 'the', 'greatest', 'percentage', 'of', 'people', 'for', 'each', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode'
Target TF-P tokens: from countrylanguage group by countrylanguage.CountryCode select countrylanguage.Language , countrylanguage.CountryCode , max (countrylanguage.Percentage)

[WRONG] [medium] Pred 0:	b'SELECT countrylanguage.CountryCode, MAX(countrylanguage.Percentage) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY countrylanguage.CountryCode' (-0.521) (length=18)
[WRONG] [medium] Pred 1:	b'SELECT country.Code, MAX(countrylanguage.Percentage) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY countrylanguage.CountryCode' (-0.920) (length=18)
[WRONG] [medium] Pred 2:	b'SELECT countrylanguage.CountryCode, MAX(countrylanguage.Percentage) FROM countrylanguage GROUP BY countrylanguage.CountryCode' (-1.038) (length=12)
[WRONG] [medium] Pred 3:	b'SELECT countrylanguage.CountryCode, MAX(countrylanguage.Percentage) FROM countrylanguage GROUP BY countrylanguage.CountryCode' (-1.768) (length=17)
[WRONG] [medium] Pred 4:	b'SELECT countrylanguage.CountryCode, MAX(countrylanguage.Percentage) FROM country JOIN countrylanguage ON country.Code = countrylanguage.IsOfficial GROUP BY countrylanguage.CountryCode' (-2.017) (length=18)
[WRONG] [medium] Pred 5:	b'SELECT countrylanguage.CountryCode, MAX(countrylanguage.Percentage) FROM country JOIN countrylanguage ON country.Code = countrylanguage.Language GROUP BY countrylanguage.CountryCode' (-2.036) (length=18)
[CORRE] [medium] Pred 6:	b'SELECT countrylanguage.CountryCode, MAX(countrylanguage.Percentage), countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.CountryCode' (-2.289) (length=14)
Error Case 272

ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
Example 818
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What is the total number of countries where Spanish is spoken by the largest percentage of people?'
NL tokens: [b'what', b'is', b'the', b'total', b'number', b'of', b'countries', b'where', b'spanish', b'is', b'spoken', b'by', b'the', b'largest', b'percentage', b'of', b'people', b'?']
NL tokens (original): [b'What', b'is', b'the', b'total', b'number', b'of', b'countries', b'where', b'Spanish', b'is', b'spoken', b'by', b'the', b'largest', b'percentage', b'of', b'people', b'?']
['[CLS]', 'what', 'is', 'the', 'total', 'number', 'of', 'countries', 'where', 'spanish', 'is', 'spoken', 'by', 'the', 'largest', 'percentage', 'of', 'people', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused49]', 'spanish', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode'
Target TF-P tokens: from countrylanguage where countrylanguage.Language = "Spanish" group by countrylanguage.CountryCode select count (*) , max (countrylanguage.Percentage)

[WRONG] [extra] Pred 0:	b'SELECT COUNT(*) FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.GNP WHERE countrylanguage.Language = "Spanish" AND countrylanguage.Percentage = (SELECT MAX(countrylanguage.Percentage) FROM countrylanguage WHERE countrylanguage.Language = "Spanish")' (-0.932) (length=38)
[WRONG] [extra] Pred 1:	b'SELECT COUNT(*) FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.GNP WHERE countrylanguage.Language = "Spanish" AND country.Population = (SELECT MAX(countrylanguage.Percentage) FROM countrylanguage WHERE countrylanguage.Language = "Spanish")' (-0.988) (length=38)
[WRONG] [extra] Pred 2:	b'SELECT COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = "Spanish" AND countrylanguage.Percentage = (SELECT MAX(countrylanguage.Percentage) FROM countrylanguage WHERE countrylanguage.Language = "Spanish")' (-1.041) (length=38)
[WRONG] [extra] Pred 3:	b'SELECT COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = "Spanish" AND country.Population = (SELECT MAX(countrylanguage.Percentage) FROM countrylanguage WHERE countrylanguage.Language = "Spanish")' (-1.116) (length=38)
[WRONG] [extra] Pred 4:	b'SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.Language = "Spanish" AND countrylanguage.Percentage = (SELECT MAX(countrylanguage.Percentage) FROM countrylanguage WHERE countrylanguage.Language = "Spanish")' (-1.229) (length=32)
[WRONG] [extra] Pred 5:	b'SELECT COUNT(*) FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.GNPOld WHERE countrylanguage.Language = "Spanish" AND countrylanguage.Percentage = (SELECT MAX(countrylanguage.Percentage) FROM countrylanguage WHERE countrylanguage.Language = "Spanish")' (-1.276) (length=38)
[WRONG] [extra] Pred 6:	b'SELECT COUNT(*) FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.GNPOld WHERE countrylanguage.Language = "Spanish" AND country.Population = (SELECT MAX(countrylanguage.Percentage) FROM countrylanguage WHERE countrylanguage.Language = "Spanish")' (-1.328) (length=38)
[WRONG] [extra] Pred 7:	b'SELECT COUNT(*) FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.Name WHERE countrylanguage.Language = "Spanish" AND countrylanguage.Percentage = (SELECT MAX(countrylanguage.Percentage) FROM countrylanguage WHERE countrylanguage.Language = "Spanish")' (-1.382) (length=38)
[WRONG] [extra] Pred 8:	b'SELECT COUNT(*) FROM country JOIN countrylanguage ON countrylanguage.CountryCode = country.Continent WHERE countrylanguage.Language = "Spanish" AND countrylanguage.Percentage = (SELECT MAX(countrylanguage.Percentage) FROM countrylanguage WHERE countrylanguage.Language = "Spanish")' (-1.411) (length=38)
Error Case 273

ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
Example 819
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Count the number of countries for which Spanish is the predominantly spoken language.'
NL tokens: [b'count', b'the', b'number', b'of', b'countries', b'for', b'which', b'spanish', b'is', b'the', b'predominantly', b'spoken', b'language', b'.']
NL tokens (original): [b'Count', b'the', b'number', b'of', b'countries', b'for', b'which', b'Spanish', b'is', b'the', b'predominantly', b'spoken', b'language', b'.']
['[CLS]', 'count', 'the', 'number', 'of', 'countries', 'for', 'which', 'spanish', 'is', 'the', 'predominantly', 'spoken', 'language', '.', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused49]', 'spanish', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode'
Target TF-P tokens: from countrylanguage where countrylanguage.Language = "Spanish" group by countrylanguage.CountryCode select count (*) , max (countrylanguage.Percentage)

[WRONG] [extra] Pred 0:	b'SELECT COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = "Spanish" AND country.Name = "Spanish"' (-0.336) (length=26)
[WRONG] [extra] Pred 1:	b'SELECT COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = "Spanish" AND country.Name = "predominantly"' (-0.431) (length=26)
[WRONG] [extra] Pred 2:	b'SELECT COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = "Spanish" AND country.Continent = "predominantly"' (-0.835) (length=26)
[WRONG] [extra] Pred 3:	b'SELECT COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = "Spanish" AND country.Continent = "Spanish"' (-0.892) (length=26)
[WRONG] [extra] Pred 4:	b'SELECT COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = "Spanish" AND countrylanguage.Language = "Spanish"' (-0.939) (length=26)
Error Case 274

ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: Join condition does not match with table: ['country', {'join': 'countrylanguage', 'on': {'eq': ['country.Code', 'country.Code2']}}]
ERROR: Join condition does not match with table: ['countrylanguage', {'join': 'country', 'on': {'eq': ['countrylanguage.CountryCode', 'countrylanguage.CountryCode']}}]
ERROR: table "country" in field expression country.Population is not in the current scope
Example 820
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'What are the codes of countries where Spanish is spoken by the largest percentage of people?'
NL tokens: [b'what', b'are', b'the', b'codes', b'of', b'countries', b'where', b'spanish', b'is', b'spoken', b'by', b'the', b'largest', b'percentage', b'of', b'people', b'?']
NL tokens (original): [b'What', b'are', b'the', b'codes', b'of', b'countries', b'where', b'Spanish', b'is', b'spoken', b'by', b'the', b'largest', b'percentage', b'of', b'people', b'?']
['[CLS]', 'what', 'are', 'the', 'codes', 'of', 'countries', 'where', 'spanish', 'is', 'spoken', 'by', 'the', 'largest', 'percentage', 'of', 'people', '?', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused49]', 'spanish', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode'
Target TF-P tokens: from countrylanguage where countrylanguage.Language = "Spanish" group by countrylanguage.CountryCode select countrylanguage.CountryCode , max (countrylanguage.Percentage)

[WRONG] [medium] Pred 0:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "Spanish" ORDER BY countrylanguage.Percentage DESC LIMIT 1' (-0.184) (length=16)
[WRONG] [medium] Pred 1:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "Spanish" AND countrylanguage.Percentage = (SELECT MAX(countrylanguage.Percentage) FROM countrylanguage WHERE countrylanguage.Language = "Spanish")' (-0.327) (length=29)
[WRONG] [medium] Pred 2:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "Spanish" INTERSECT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "Spanish"' (-0.605) (length=22)
[WRONG] [medium] Pred 3:	b'SELECT countrylanguage.CountryCode FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = "Spanish" AND countrylanguage.Percentage = (SELECT MAX(countrylanguage.Percentage) FROM countrylanguage WHERE countrylanguage.Language = "Spanish")' (-0.890) (length=35)
[WRONG] [medium] Pred 4:	b'SELECT countrylanguage.CountryCode FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = "Spanish" AND country.Population = (SELECT MAX(countrylanguage.Percentage) FROM countrylanguage WHERE countrylanguage.Language = "Spanish")' (-1.374) (length=35)
[WRONG] [medium] Pred 5:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "Spanish" EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "Spanish"' (-1.601) (length=22)
[WRONG] [medium] Pred 6:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "Spanish" INTERSECT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Percentage = (SELECT MAX(countrylanguage.Percentage) FROM countrylanguage WHERE countrylanguage.Language = "Spanish")' (-1.695) (length=34)
[WRONG] [medium] Pred 7:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "Spanish" INTERSECT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Percentage = (SELECT MAX(countrylanguage.Percentage) FROM countrylanguage)' (-1.792) (length=28)
[WRONG] [medium] Pred 8:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "Spanish" INTERSECT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Percentage = (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "Spanish")' (-1.896) (length=31)
[WRONG] [medium] Pred 9:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "Spanish" INTERSECT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "by"' (-2.211) (length=22)
[WRONG] [medium] Pred 10:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "Spanish" UNION SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "Spanish"' (-2.374) (length=22)
[WRONG] [medium] Pred 11:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "Spanish" INTERSECT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "the"' (-2.387) (length=22)
Error Case 275

Parsing error: from countrylanguage where countrylanguage.Language = "Spanish" and countrylanguage.Percentage = (from countrylanguage where countrylanguage.Language = "Spanish" select (countrylanguage.CountryCode) select countrylanguage.CountryCode
Parsing error: from countrylanguage where countrylanguage.Language = "Spanish" and countrylanguage.Percentage = (from countrylanguage where countrylanguage.Language = "Spanish" select = from countrylanguage select max (countrylanguage.Percentage)) select countrylanguage.CountryCode
Parsing error: from countrylanguage where countrylanguage.Language = "Spanish" and countrylanguage.Percentage = (from countrylanguage where countrylanguage.Language = "Spanish" select order by (countrylanguage.Percentage)) select countrylanguage.CountryCode
Parsing error: from countrylanguage where countrylanguage.Language = "Spanish" and countrylanguage.Percentage = (from countrylanguage where countrylanguage.Language = "Spanish" select = distinct countrylanguage.CountryCode) select countrylanguage.CountryCode
Parsing error: from countrylanguage where countrylanguage.Language = "Spanish" and countrylanguage.Percentage = (from countrylanguage where countrylanguage.Language = "Spanish" select yes "select countrylanguage.CountryCode) select countrylanguage.CountryCode"
Parsing error: from countrylanguage where countrylanguage.Language = "Spanish" and countrylanguage.Percentage = (from countrylanguage where countrylanguage.Language = "Spanish" select = (*) select countrylanguage.CountryCode
Parsing error: from countrylanguage where countrylanguage.Language = "Spanish" and countrylanguage.Percentage = (from countrylanguage where countrylanguage.Language = "Spanish" select order by (*)) select countrylanguage.CountryCode
Example 821
world_1
 +-- city (city)
 |   +-- ID (id) [PRIMARY]
 |   +-- Name (name)
 |   +-- CountryCode (country code) [FOREIGN]
 |   +-- District (district)
 |   +-- Population (population)
 +-- sqlite_sequence (sqlite sequence)
 |   +-- name (name)
 |   +-- seq (seq)
 +-- country (country)
 |   +-- Code (code) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Continent (continent)
 |   +-- Region (region)
 |   +-- SurfaceArea (surface area)
 |   +-- IndepYear (indepdent year)
 |   +-- Population (population)
 |   +-- LifeExpectancy (life expectancy)
 |   +-- GNP (gnp)
 |   +-- GNPOld (gnp old)
 |   +-- LocalName (local name)
 |   +-- GovernmentForm (government form)
 |   +-- HeadOfState (head of state)
 |   +-- Capital (capital)
 |   +-- Code2 (code2)
 +-- countrylanguage (countrylanguage)
     +-- CountryCode (countrycode) [PRIMARY] [FOREIGN]
     +-- Language (language)
     +-- IsOfficial (is official)
     +-- Percentage (percentage)
NL: b'Return the codes of countries for which Spanish is the predominantly spoken language.'
NL tokens: [b'return', b'the', b'codes', b'of', b'countries', b'for', b'which', b'spanish', b'is', b'the', b'predominantly', b'spoken', b'language', b'.']
NL tokens (original): [b'Return', b'the', b'codes', b'of', b'countries', b'for', b'which', b'Spanish', b'is', b'the', b'predominantly', b'spoken', b'language', b'.']
['[CLS]', 'return', 'the', 'codes', 'of', 'countries', 'for', 'which', 'spanish', 'is', 'the', 'predominantly', 'spoken', 'language', '.', '[SEP]', '*', '[unused50]', 'city', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'country', 'code', '[unused51]', 'district', '[unused51]', 'population', '[unused50]', 'sql', '##ite', 'sequence', '[unused51]', 'name', '[unused51]', 'se', '##q', '[unused50]', 'country', '[unused51]', 'code', '[unused51]', 'name', '[unused51]', 'continent', '[unused51]', 'region', '[unused51]', 'surface', 'area', '[unused51]', 'ind', '##ep', '##dent', 'year', '[unused51]', 'population', '[unused51]', 'life', 'expect', '##ancy', '[unused51]', 'g', '##np', '[unused51]', 'g', '##np', 'old', '[unused51]', 'local', 'name', '[unused51]', 'government', 'form', '[unused51]', 'head', 'of', 'state', '[unused51]', 'capital', '[unused51]', 'code', '##2', '[unused50]', 'country', '##lang', '##ua', '##ge', '[unused51]', 'country', '##code', '[unused51]', 'language', '[unused49]', 'spanish', '[unused51]', 'is', 'official', '[unused51]', 'percentage', '[SEP]']
Target 0: b'SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode'
 79%|███████▉  | 103/130 [14:39<10:31, 23.38s/it] 80%|████████  | 104/130 [14:40<07:08, 16.50s/it] 81%|████████  | 105/130 [14:42<05:01, 12.05s/it]Target TF-P tokens: from countrylanguage where countrylanguage.Language = "Spanish" group by countrylanguage.CountryCode select countrylanguage.CountryCode , max (countrylanguage.Percentage)

[WRONG] [medium] Pred 0:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "Spanish" AND countrylanguage.Percentage = (SELECT MAX(countrylanguage.Percentage) FROM countrylanguage WHERE countrylanguage.Language = "Spanish")' (-0.017) (length=29)
[WRONG] [medium] Pred 1:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "Spanish" AND countrylanguage.Percentage = (SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.Language = "Spanish")' (-1.065) (length=29)
[WRONG] [medium] Pred 2:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "Spanish" AND countrylanguage.IsOfficial = (SELECT MAX(countrylanguage.Percentage) FROM countrylanguage WHERE countrylanguage.Language = "Spanish")' (-1.108) (length=29)
[WRONG] [medium] Pred 3:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "Spanish" AND countrylanguage.Language = "Spanish"' (-1.110) (length=17)
[WRONG] [medium] Pred 4:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "Spanish" AND countrylanguage.Percentage = (SELECT MAX(countrylanguage.Percentage) FROM countrylanguage WHERE countrylanguage.Language = "predominantly")' (-1.133) (length=29)
[WRONG] [medium] Pred 5:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "Spanish" AND countrylanguage.Percentage = (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "Spanish")' (-1.137) (length=26)
[WRONG] [medium] Pred 6:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "Spanish" AND countrylanguage.Percentage = (SELECT MAX(countrylanguage.Language) FROM countrylanguage WHERE countrylanguage.Language = "Spanish")' (-1.211) (length=29)
[WRONG] [medium] Pred 7:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "Spanish" AND countrylanguage.IsOfficial = (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "Spanish")' (-1.292) (length=26)
[WRONG] [medium] Pred 8:	b'SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = "Spanish" AND countrylanguage.IsOfficial = "Spanish"' (-1.428) (length=17)
Error Case 276

ERROR: Join condition does not match with table: ['performance', {'join': 'orchestra', 'on': {'eq': ['performance.Orchestra_ID', 'orchestra.Orchestra_ID']}}, {'join': 'conductor', 'on': {'eq': ['orchestra.Conductor_ID', 'orchestra.Orchestra_ID']}}]
Parsing error: from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID where performance.Date in (from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID select orchestra.Conductor_ID) select conductor , orchestra.Orchestra)
ERROR: table "conductor" in field expression conductor.Name is not in the current scope
Parsing error: from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID , orchestra.Orchestra in (from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID select orchestra.Conductor_ID) select conductor , orchestra.Orchestra)
ERROR: table "conductor" in field expression conductor.Name is not in the current scope
Parsing error: from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID , orchestra.Orchestra in (from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID select orchestra.Conductor_ID) select conductor , orchestra.Orchestra
Parsing error: from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID , orchestra.Orchestra in (from performance join orchestra on orchestra.Conductor_ID = orchestra.Orchestra_ID select orchestra.Conductor_ID) select conductor , orchestra.Orchestra)
Parsing error: from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID , orchestra.Orchestra in (from performance join orchestra on orchestra.Conductor_ID = orchestra.Orchestra_ID select orchestra.Conductor_ID) select conductor , orchestra.Orchestra
Example 840
orchestra
 +-- conductor (conductor)
 |   +-- Conductor_ID (conductor id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Age (age)
 |   +-- Nationality (nationality)
 |   +-- Year_of_Work (year of work)
 +-- orchestra (orchestra)
 |   +-- Orchestra_ID (orchestra id) [PRIMARY] [FOREIGN]
 |   +-- Orchestra (orchestra)
 |   +-- Conductor_ID (conductor id) [FOREIGN]
 |   +-- Record_Company (record company)
 |   +-- Year_of_Founded (year of founded)
 |   +-- Major_Record_Format (major record format)
 +-- performance (performance)
 |   +-- Performance_ID (performance id) [PRIMARY] [FOREIGN]
 |   +-- Orchestra_ID (orchestra id) [FOREIGN]
 |   +-- Type (type)
 |   +-- Date (date)
 |   +-- Official_ratings_(millions) (official ratings (millions))
 |   +-- Weekly_rank (weekly rank)
 |   +-- Share (share)
 +-- show (show)
     +-- Show_ID (show id)
     +-- Performance_ID (performance id) [FOREIGN]
     +-- If_first_show (if first show)
     +-- Result (result)
     +-- Attendance (attendance)
NL: b'Show the names of conductors and the orchestras they have conducted.'
NL tokens: [b'show', b'the', b'names', b'of', b'conductors', b'and', b'the', b'orchestras', b'they', b'have', b'conducted', b'.']
NL tokens (original): [b'Show', b'the', b'names', b'of', b'conductors', b'and', b'the', b'orchestras', b'they', b'have', b'conducted', b'.']
['[CLS]', 'show', 'the', 'names', 'of', 'conductors', 'and', 'the', 'orchestras', 'they', 'have', 'conducted', '.', '[SEP]', '*', '[unused50]', 'conductor', '[unused51]', 'conductor', 'id', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'nationality', '[unused51]', 'year', 'of', 'work', '[unused50]', 'orchestra', '[unused51]', 'orchestra', 'id', '[unused51]', 'orchestra', '[unused51]', 'conductor', 'id', '[unused51]', 'record', 'company', '[unused51]', 'year', 'of', 'founded', '[unused51]', 'major', 'record', 'format', '[unused50]', 'performance', '[unused51]', 'performance', 'id', '[unused51]', 'orchestra', 'id', '[unused51]', 'type', '[unused51]', 'date', '[unused51]', 'official', 'ratings', '(', 'millions', ')', '[unused51]', 'weekly', 'rank', '[unused51]', 'share', '[unused50]', 'show', '[unused51]', 'show', 'id', '[unused51]', 'performance', 'id', '[unused51]', 'if', 'first', 'show', '[unused51]', 'result', '[unused51]', 'attendance', '[SEP]']
Target 0: b'SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID'
Target TF-P tokens: from conductor join orchestra on conductor.Conductor_ID = orchestra.Conductor_ID select conductor.Name , orchestra.Orchestra

[WRONG] [medium] Pred 0:	b'SELECT conductor.Name, orchestra.Orchestra FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID' (-2.382) (length=19)
[WRONG] [medium] Pred 1:	b'SELECT conductor.Name, conductor.Year_of_Work FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID' (-4.453) (length=19)
[WRONG] [medium] Pred 2:	b'SELECT conductor.Name, conductor.Age FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID' (-4.880) (length=19)
[WRONG] [medium] Pred 3:	b'SELECT conductor.Name, PERFORMANCE.OFFICIAL_RATINGS_("millions") FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID' (-4.927) (length=19)
[WRONG] [medium] Pred 4:	b'SELECT conductor.Name, orchestra.Year_of_Founded FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID' (-4.968) (length=19)
[WRONG] [medium] Pred 5:	b'SELECT "conductor", orchestra.Orchestra FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID WHERE performance.Date IN (SELECT orchestra.Conductor_ID FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID)' (-7.438) (length=28)
[WRONG] [medium] Pred 6:	b'SELECT "conductor", orchestra.Orchestra = orchestra.Orchestra FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID WHERE performance.Date IN (SELECT orchestra.Conductor_ID FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID)' (-7.727) (length=30)
[WRONG] [medium] Pred 7:	b'SELECT "conductor", orchestra.Orchestra FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID WHERE performance.Date IN (SELECT orchestra.Orchestra_ID FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID)' (-7.950) (length=28)
Error Case 277

ERROR: Join condition does not match with table: ['performance', {'join': 'orchestra', 'on': {'eq': ['performance.Orchestra_ID', 'orchestra.Orchestra_ID']}}, {'join': 'show', 'on': {'eq': ['orchestra.Orchestra_ID', 'performance.Performance_ID']}}, {'join': 'conductor', 'on': {'eq': ['orchestra.Conductor_ID', 'conductor.Conductor_ID']}}]
Parsing error: from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID.conductor on orchestra.Conductor_ID = conductor.Conductor_ID select conductor.Name , orchestra.Record_Company
Parsing error: from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID , conductor on orchestra.Conductor_ID = conductor.Conductor_ID select conductor.Name , orchestra.Record_Company
Parsing error: from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID join show on orchestra.Orchestra_ID = performance.Performance_ID , conductor on orchestra.Conductor_ID = conductor.Conductor_ID select conductor.Name , orchestra.Record_Company
ERROR: Join condition does not match with table: ['performance', {'join': 'orchestra', 'on': {'eq': ['performance.Orchestra_ID', 'orchestra.Orchestra_ID']}}, {'join': 'show', 'on': {'eq': ['orchestra.Orchestra_ID', 'performance.Performance_ID']}}, {'join': 'conductor', 'on': {'eq': ['orchestra.Conductor_ID', 'conductor.Conductor_ID']}}]
ERROR: Join condition does not match with table: ['performance', {'join': 'orchestra', 'on': {'eq': ['performance.Orchestra_ID', 'orchestra.Orchestra_ID']}}, {'join': 'show', 'on': {'eq': ['orchestra.Orchestra_ID', 'performance.Performance_ID']}}, {'join': 'conductor', 'on': {'eq': ['orchestra.Conductor_ID', 'conductor.Conductor_ID']}}]
Example 841
orchestra
 +-- conductor (conductor)
 |   +-- Conductor_ID (conductor id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Age (age)
 |   +-- Nationality (nationality)
 |   +-- Year_of_Work (year of work)
 +-- orchestra (orchestra)
 |   +-- Orchestra_ID (orchestra id) [PRIMARY] [FOREIGN]
 |   +-- Orchestra (orchestra)
 |   +-- Conductor_ID (conductor id) [FOREIGN]
 |   +-- Record_Company (record company)
 |   +-- Year_of_Founded (year of founded)
 |   +-- Major_Record_Format (major record format)
 +-- performance (performance)
 |   +-- Performance_ID (performance id) [PRIMARY] [FOREIGN]
 |   +-- Orchestra_ID (orchestra id) [FOREIGN]
 |   +-- Type (type)
 |   +-- Date (date)
 |   +-- Official_ratings_(millions) (official ratings (millions))
 |   +-- Weekly_rank (weekly rank)
 |   +-- Share (share)
 +-- show (show)
     +-- Show_ID (show id)
     +-- Performance_ID (performance id) [FOREIGN]
     +-- If_first_show (if first show)
     +-- Result (result)
     +-- Attendance (attendance)
NL: b'What are the names of conductors as well as the corresonding orchestras that they have conducted?'
NL tokens: [b'what', b'are', b'the', b'names', b'of', b'conductors', b'as', b'well', b'as', b'the', b'co', b'##rre', b'##son', b'##ding', b'orchestras', b'that', b'they', b'have', b'conducted', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'of', b'conductors', b'as', b'well', b'as', b'the', b'co', b'##rre', b'##son', b'##ding', b'orchestras', b'that', b'they', b'have', b'conducted', b'?']
['[CLS]', 'what', 'are', 'the', 'names', 'of', 'conductors', 'as', 'well', 'as', 'the', 'co', '##rre', '##son', '##ding', 'orchestras', 'that', 'they', 'have', 'conducted', '?', '[SEP]', '*', '[unused50]', 'conductor', '[unused51]', 'conductor', 'id', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'nationality', '[unused51]', 'year', 'of', 'work', '[unused50]', 'orchestra', '[unused51]', 'orchestra', 'id', '[unused51]', 'orchestra', '[unused51]', 'conductor', 'id', '[unused51]', 'record', 'company', '[unused51]', 'year', 'of', 'founded', '[unused51]', 'major', 'record', 'format', '[unused50]', 'performance', '[unused51]', 'performance', 'id', '[unused51]', 'orchestra', 'id', '[unused51]', 'type', '[unused51]', 'date', '[unused51]', 'official', 'ratings', '(', 'millions', ')', '[unused51]', 'weekly', 'rank', '[unused51]', 'share', '[unused50]', 'show', '[unused51]', 'show', 'id', '[unused51]', 'performance', 'id', '[unused51]', 'if', 'first', 'show', '[unused51]', 'result', '[unused51]', 'attendance', '[SEP]']
Target 0: b'SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID'
Target TF-P tokens: from conductor join orchestra on conductor.Conductor_ID = orchestra.Conductor_ID select conductor.Name , orchestra.Orchestra

[WRONG] [medium] Pred 0:	b'SELECT conductor.Name, orchestra.Record_Company FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID' (-0.454) (length=19)
[WRONG] [medium] Pred 1:	b'SELECT conductor.Name, conductor.Year_of_Work FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID' (-2.054) (length=19)
[WRONG] [medium] Pred 2:	b'SELECT conductor.Name, orchestra.Record_Company FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID JOIN show ON orchestra.Orchestra_ID = show.Performance_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID' (-2.623) (length=25)
[WRONG] [medium] Pred 3:	b'SELECT conductor.Name, orchestra.Record_Company FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID WHERE conductor.Year_of_Work = "well VALUE"' (-2.981) (length=26)
[WRONG] [medium] Pred 4:	b'SELECT conductor.Name, orchestra.Record_Company FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID WHERE conductor.Year_of_Work = "as VALUE"' (-3.094) (length=26)
[WRONG] [medium] Pred 5:	b'SELECT conductor.Name, orchestra.Record_Company FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID WHERE orchestra.Year_of_Founded = "well VALUE"' (-3.109) (length=26)
[WRONG] [medium] Pred 6:	b'SELECT conductor.Name, PERFORMANCE.OFFICIAL_RATINGS_("millions") FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID' (-3.355) (length=19)
[WRONG] [medium] Pred 7:	b'SELECT conductor.Name, orchestra.Orchestra FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID' (-3.375) (length=19)
[WRONG] [medium] Pred 8:	b'SELECT conductor.Name, orchestra.Year_of_Founded FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID' (-3.433) (length=19)
[WRONG] [medium] Pred 9:	b'SELECT conductor.Name, performance.Share FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID' (-3.656) (length=19)
Error Case 278

'on'
'on'
'on'
'on'
'on'
ERROR: Join condition does not match with table: ['performance', {'join': 'orchestra', 'on': {'eq': ['orchestra.Conductor_ID', 'orchestra.Orchestra_ID']}}, {'join': 'conductor', 'on': {'eq': ['orchestra.Conductor_ID', 'conductor.Conductor_ID']}}]
'on'
Parsing error: from performance join orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID group by conductor.Name having count (*) > 1 select conductor.Name intersect from performance join conductor on orchestra.Conductor_ID = conductor.Conductor_ID group by conductor.Name having count (*) having limit 1) select conductor.Name
ERROR: Join condition does not match with table: ['performance', {'join': 'orchestra', 'on': {'eq': ['performance.Orchestra_ID', 'performance.Performance_ID']}}, {'join': 'conductor', 'on': {'eq': ['orchestra.Conductor_ID', 'conductor.Conductor_ID']}}]
Parsing error: from performance (orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID group by conductor.Name having count (*) > 1 select conductor.Name
'on'
'on'
Example 842
orchestra
 +-- conductor (conductor)
 |   +-- Conductor_ID (conductor id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Age (age)
 |   +-- Nationality (nationality)
 |   +-- Year_of_Work (year of work)
 +-- orchestra (orchestra)
 |   +-- Orchestra_ID (orchestra id) [PRIMARY] [FOREIGN]
 |   +-- Orchestra (orchestra)
 |   +-- Conductor_ID (conductor id) [FOREIGN]
 |   +-- Record_Company (record company)
 |   +-- Year_of_Founded (year of founded)
 |   +-- Major_Record_Format (major record format)
 +-- performance (performance)
 |   +-- Performance_ID (performance id) [PRIMARY] [FOREIGN]
 |   +-- Orchestra_ID (orchestra id) [FOREIGN]
 |   +-- Type (type)
 |   +-- Date (date)
 |   +-- Official_ratings_(millions) (official ratings (millions))
 |   +-- Weekly_rank (weekly rank)
 |   +-- Share (share)
 +-- show (show)
     +-- Show_ID (show id)
     +-- Performance_ID (performance id) [FOREIGN]
     +-- If_first_show (if first show)
     +-- Result (result)
     +-- Attendance (attendance)
NL: b'Show the names of conductors that have conducted more than one orchestras.'
NL tokens: [b'show', b'the', b'names', b'of', b'conductors', b'that', b'have', b'conducted', b'more', b'than', b'one', b'orchestras', b'.']
NL tokens (original): [b'Show', b'the', b'names', b'of', b'conductors', b'that', b'have', b'conducted', b'more', b'than', b'one', b'orchestras', b'.']
['[CLS]', 'show', 'the', 'names', 'of', 'conductors', 'that', 'have', 'conducted', 'more', 'than', 'one', 'orchestras', '.', '[SEP]', '*', '[unused50]', 'conductor', '[unused51]', 'conductor', 'id', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'nationality', '[unused51]', 'year', 'of', 'work', '[unused50]', 'orchestra', '[unused51]', 'orchestra', 'id', '[unused51]', 'orchestra', '[unused51]', 'conductor', 'id', '[unused51]', 'record', 'company', '[unused51]', 'year', 'of', 'founded', '[unused51]', 'major', 'record', 'format', '[unused50]', 'performance', '[unused51]', 'performance', 'id', '[unused51]', 'orchestra', 'id', '[unused51]', 'type', '[unused51]', 'date', '[unused51]', 'official', 'ratings', '(', 'millions', ')', '[unused51]', 'weekly', 'rank', '[unused51]', 'share', '[unused50]', 'show', '[unused51]', 'show', 'id', '[unused51]', 'performance', 'id', '[unused51]', 'if', 'first', 'show', '[unused51]', 'result', '[unused51]', 'attendance', '[SEP]']
Target 0: b'SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1'
Target TF-P tokens: from conductor join orchestra on conductor.Conductor_ID = orchestra.Conductor_ID group by orchestra.Conductor_ID having count (*) > 1 select conductor.Name

[WRONG] [medium] Pred 0:	b'SELECT conductor.Name FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Name HAVING COUNT(*) > 1' (-3.545) (length=26)
[WRONG] [medium] Pred 1:	b'SELECT conductor.Name FROM performance JOIN orchestra ON orchestra.Conductor_ID = performance.Performance_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Name HAVING COUNT(*) > 1' (-3.586) (length=26)
[WRONG] [medium] Pred 2:	b'SELECT conductor.Name FROM performance JOIN orchestra ON orchestra.Orchestra = performance.Orchestra_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Name HAVING COUNT(*) > 1' (-3.729) (length=26)
[WRONG] [medium] Pred 3:	b'SELECT conductor.Name FROM performance JOIN orchestra ON orchestra.Orchestra = performance.Performance_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Name HAVING COUNT(*) > 1' (-4.085) (length=26)
Error Case 279

'on'
'on'
'on'
'on'
'on'
'on'
'on'
'on'
'on'
Parsing error: from performance join orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID group by conductor.Name having count (*) > 1 select conductor.Name intersect from performance join conductor on orchestra.Conductor_ID = conductor.Conductor_ID group by conductor.Name having count (*) having limit 1) select conductor.Name
'on'
Parsing error: from performance join orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID group by conductor.Name having count (*) > 1 select conductor.Name intersect from performance join conductor on orchestra.Conductor_ID = conductor.Conductor_ID group by conductor.Name having count (*) having 1
'on'
Parsing error: from performance join orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID group by conductor.Name having count (*) > 1 select conductor.Name intersect from performance join conductor on orchestra.Conductor_ID = conductor.Conductor_ID group by conductor.Name having count (*) having 1 select conductor.Name
Example 843
orchestra
 +-- conductor (conductor)
 |   +-- Conductor_ID (conductor id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Age (age)
 |   +-- Nationality (nationality)
 |   +-- Year_of_Work (year of work)
 +-- orchestra (orchestra)
 |   +-- Orchestra_ID (orchestra id) [PRIMARY] [FOREIGN]
 |   +-- Orchestra (orchestra)
 |   +-- Conductor_ID (conductor id) [FOREIGN]
 |   +-- Record_Company (record company)
 |   +-- Year_of_Founded (year of founded)
 |   +-- Major_Record_Format (major record format)
 +-- performance (performance)
 |   +-- Performance_ID (performance id) [PRIMARY] [FOREIGN]
 |   +-- Orchestra_ID (orchestra id) [FOREIGN]
 |   +-- Type (type)
 |   +-- Date (date)
 |   +-- Official_ratings_(millions) (official ratings (millions))
 |   +-- Weekly_rank (weekly rank)
 |   +-- Share (share)
 +-- show (show)
     +-- Show_ID (show id)
     +-- Performance_ID (performance id) [FOREIGN]
     +-- If_first_show (if first show)
     +-- Result (result)
     +-- Attendance (attendance)
NL: b'What are the names of conductors who have conducted at more than one orchestra?'
NL tokens: [b'what', b'are', b'the', b'names', b'of', b'conductors', b'who', b'have', b'conducted', b'at', b'more', b'than', b'one', b'orchestra', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'of', b'conductors', b'who', b'have', b'conducted', b'at', b'more', b'than', b'one', b'orchestra', b'?']
 82%|████████▏ | 106/130 [14:56<05:09, 12.89s/it]['[CLS]', 'what', 'are', 'the', 'names', 'of', 'conductors', 'who', 'have', 'conducted', 'at', 'more', 'than', 'one', 'orchestra', '?', '[SEP]', '*', '[unused50]', 'conductor', '[unused51]', 'conductor', 'id', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'nationality', '[unused51]', 'year', 'of', 'work', '[unused50]', 'orchestra', '[unused51]', 'orchestra', 'id', '[unused51]', 'orchestra', '[unused51]', 'conductor', 'id', '[unused51]', 'record', 'company', '[unused51]', 'year', 'of', 'founded', '[unused51]', 'major', 'record', 'format', '[unused50]', 'performance', '[unused51]', 'performance', 'id', '[unused51]', 'orchestra', 'id', '[unused51]', 'type', '[unused51]', 'date', '[unused51]', 'official', 'ratings', '(', 'millions', ')', '[unused51]', 'weekly', 'rank', '[unused51]', 'share', '[unused50]', 'show', '[unused51]', 'show', 'id', '[unused51]', 'performance', 'id', '[unused51]', 'if', 'first', 'show', '[unused51]', 'result', '[unused51]', 'attendance', '[SEP]']
Target 0: b'SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1'
Target TF-P tokens: from conductor join orchestra on conductor.Conductor_ID = orchestra.Conductor_ID group by orchestra.Conductor_ID having count (*) > 1 select conductor.Name

[WRONG] [medium] Pred 0:	b'SELECT conductor.Name FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Name HAVING COUNT(*) > 1' (-3.685) (length=26)
[WRONG] [medium] Pred 1:	b'SELECT conductor.Name FROM performance JOIN orchestra ON orchestra.Orchestra = performance.Performance_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Name HAVING COUNT(*) > 1' (-4.370) (length=26)
Error Case 280

'on'
ERROR: Join condition does not match with table: ['performance', {'join': 'orchestra', 'on': {'eq': ['orchestra.Conductor_ID', 'orchestra.Orchestra_ID']}}, {'join': 'conductor', 'on': {'eq': ['orchestra.Conductor_ID', 'conductor.Conductor_ID']}}]
ERROR: Join condition does not match with table: ['performance', {'join': 'orchestra', 'on': {'eq': ['performance.Orchestra_ID', 'performance.Performance_ID']}}, {'join': 'conductor', 'on': {'eq': ['orchestra.Conductor_ID', 'conductor.Conductor_ID']}}]
ERROR: Join condition does not match with table: ['performance', {'join': 'orchestra', 'on': {'eq': ['orchestra.Conductor_ID', 'orchestra.Orchestra_ID']}}, {'join': 'conductor', 'on': {'eq': ['orchestra.Conductor_ID', 'conductor.Conductor_ID']}}]
Example 845
orchestra
 +-- conductor (conductor)
 |   +-- Conductor_ID (conductor id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Age (age)
 |   +-- Nationality (nationality)
 |   +-- Year_of_Work (year of work)
 +-- orchestra (orchestra)
 |   +-- Orchestra_ID (orchestra id) [PRIMARY] [FOREIGN]
 |   +-- Orchestra (orchestra)
 |   +-- Conductor_ID (conductor id) [FOREIGN]
 |   +-- Record_Company (record company)
 |   +-- Year_of_Founded (year of founded)
 |   +-- Major_Record_Format (major record format)
 +-- performance (performance)
 |   +-- Performance_ID (performance id) [PRIMARY] [FOREIGN]
 |   +-- Orchestra_ID (orchestra id) [FOREIGN]
 |   +-- Type (type)
 |   +-- Date (date)
 |   +-- Official_ratings_(millions) (official ratings (millions))
 |   +-- Weekly_rank (weekly rank)
 |   +-- Share (share)
 +-- show (show)
     +-- Show_ID (show id)
     +-- Performance_ID (performance id) [FOREIGN]
     +-- If_first_show (if first show)
     +-- Result (result)
     +-- Attendance (attendance)
NL: b'What is the name of the conductor who has conducted the most orchestras?'
NL tokens: [b'what', b'is', b'the', b'name', b'of', b'the', b'conductor', b'who', b'has', b'conducted', b'the', b'most', b'orchestras', b'?']
NL tokens (original): [b'What', b'is', b'the', b'name', b'of', b'the', b'conductor', b'who', b'has', b'conducted', b'the', b'most', b'orchestras', b'?']
['[CLS]', 'what', 'is', 'the', 'name', 'of', 'the', 'conductor', 'who', 'has', 'conducted', 'the', 'most', 'orchestras', '?', '[SEP]', '*', '[unused50]', 'conductor', '[unused51]', 'conductor', 'id', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'nationality', '[unused51]', 'year', 'of', 'work', '[unused50]', 'orchestra', '[unused51]', 'orchestra', 'id', '[unused51]', 'orchestra', '[unused51]', 'conductor', 'id', '[unused51]', 'record', 'company', '[unused51]', 'year', 'of', 'founded', '[unused51]', 'major', 'record', 'format', '[unused50]', 'performance', '[unused51]', 'performance', 'id', '[unused51]', 'orchestra', 'id', '[unused51]', 'type', '[unused51]', 'date', '[unused51]', 'official', 'ratings', '(', 'millions', ')', '[unused51]', 'weekly', 'rank', '[unused51]', 'share', '[unused50]', 'show', '[unused51]', 'show', 'id', '[unused51]', 'performance', 'id', '[unused51]', 'if', 'first', 'show', '[unused51]', 'result', '[unused51]', 'attendance', '[SEP]']
Target 0: b'SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1'
Target TF-P tokens: from conductor join orchestra on conductor.Conductor_ID = orchestra.Conductor_ID group by orchestra.Conductor_ID select conductor.Name order by count (*) desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT conductor.Name FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1' (-2.900) (length=27)
[WRONG] [extra] Pred 1:	b'SELECT conductor.Name FROM performance JOIN orchestra ON orchestra.Orchestra = performance.Performance_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1' (-3.239) (length=27)
[WRONG] [extra] Pred 2:	b'SELECT conductor.Name FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Name ORDER BY COUNT(*) DESC LIMIT 1' (-3.299) (length=27)
[WRONG] [extra] Pred 3:	b'SELECT conductor.Name FROM performance JOIN orchestra ON orchestra.Orchestra = performance.Performance_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Name ORDER BY COUNT(*) DESC LIMIT 1' (-3.693) (length=27)
[WRONG] [extra] Pred 4:	b'SELECT conductor.Name FROM performance JOIN orchestra ON orchestra.Conductor_ID = performance.Performance_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1' (-3.848) (length=27)
[WRONG] [extra] Pred 5:	b'SELECT conductor.Name FROM performance JOIN orchestra ON orchestra.Orchestra = performance.Orchestra_ID JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1' (-3.995) (length=27)
[CORRE] [extra] Pred 6:	b'SELECT conductor.Name FROM orchestra JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1' (-4.067) (length=21)
Error Case 281

Example 855
 82%|████████▏ | 107/130 [14:58<03:40,  9.57s/it] 83%|████████▎ | 108/130 [14:59<02:33,  6.97s/it] 84%|████████▍ | 109/130 [15:01<01:52,  5.36s/it] 85%|████████▍ | 110/130 [15:01<01:18,  3.91s/it]orchestra
 +-- conductor (conductor)
 |   +-- Conductor_ID (conductor id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Age (age)
 |   +-- Nationality (nationality)
 |   +-- Year_of_Work (year of work)
 +-- orchestra (orchestra)
 |   +-- Orchestra_ID (orchestra id) [PRIMARY] [FOREIGN]
 |   +-- Orchestra (orchestra)
 |   +-- Conductor_ID (conductor id) [FOREIGN]
 |   +-- Record_Company (record company)
 |   +-- Year_of_Founded (year of founded)
 |   +-- Major_Record_Format (major record format)
 +-- performance (performance)
 |   +-- Performance_ID (performance id) [PRIMARY] [FOREIGN]
 |   +-- Orchestra_ID (orchestra id) [FOREIGN]
 |   +-- Type (type)
 |   +-- Date (date)
 |   +-- Official_ratings_(millions) (official ratings (millions))
 |   +-- Weekly_rank (weekly rank)
 |   +-- Share (share)
 +-- show (show)
     +-- Show_ID (show id)
     +-- Performance_ID (performance id) [FOREIGN]
     +-- If_first_show (if first show)
     +-- Result (result)
     +-- Attendance (attendance)
NL: b'What are the orchestras that do not have any performances?'
NL tokens: [b'what', b'are', b'the', b'orchestras', b'that', b'do', b'not', b'have', b'any', b'performances', b'?']
NL tokens (original): [b'What', b'are', b'the', b'orchestras', b'that', b'do', b'not', b'have', b'any', b'performances', b'?']
['[CLS]', 'what', 'are', 'the', 'orchestras', 'that', 'do', 'not', 'have', 'any', 'performances', '?', '[SEP]', '*', '[unused50]', 'conductor', '[unused51]', 'conductor', 'id', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'nationality', '[unused51]', 'year', 'of', 'work', '[unused50]', 'orchestra', '[unused51]', 'orchestra', 'id', '[unused51]', 'orchestra', '[unused51]', 'conductor', 'id', '[unused51]', 'record', 'company', '[unused51]', 'year', 'of', 'founded', '[unused51]', 'major', 'record', 'format', '[unused50]', 'performance', '[unused51]', 'performance', 'id', '[unused51]', 'orchestra', 'id', '[unused51]', 'type', '[unused51]', 'date', '[unused51]', 'official', 'ratings', '(', 'millions', ')', '[unused51]', 'weekly', 'rank', '[unused51]', 'share', '[unused50]', 'show', '[unused51]', 'show', 'id', '[unused51]', 'performance', 'id', '[unused51]', 'if', 'first', 'show', '[unused51]', 'result', '[unused51]', 'attendance', '[SEP]']
Target 0: b'SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)'
Target TF-P tokens: from orchestra where orchestra.Orchestra_ID not in (from performance select performance.Orchestra_ID) select orchestra.Orchestra

[WRONG] [hard] Pred 0:	b'SELECT orchestra.Orchestra FROM orchestra EXCEPT SELECT orchestra.Orchestra FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID' (-0.034) (length=16)
[CORRE] [hard] Pred 1:	b'SELECT orchestra.Orchestra FROM orchestra WHERE orchestra.Orchestra_ID NOT IN (SELECT performance.Orchestra_ID FROM performance)' (-0.658) (length=15)
Error Case 282

Example 860
orchestra
 +-- conductor (conductor)
 |   +-- Conductor_ID (conductor id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Age (age)
 |   +-- Nationality (nationality)
 |   +-- Year_of_Work (year of work)
 +-- orchestra (orchestra)
 |   +-- Orchestra_ID (orchestra id) [PRIMARY] [FOREIGN]
 |   +-- Orchestra (orchestra)
 |   +-- Conductor_ID (conductor id) [FOREIGN]
 |   +-- Record_Company (record company)
 |   +-- Year_of_Founded (year of founded)
 |   +-- Major_Record_Format (major record format)
 +-- performance (performance)
 |   +-- Performance_ID (performance id) [PRIMARY] [FOREIGN]
 |   +-- Orchestra_ID (orchestra id) [FOREIGN]
 |   +-- Type (type)
 |   +-- Date (date)
 |   +-- Official_ratings_(millions) (official ratings (millions))
 |   +-- Weekly_rank (weekly rank)
 |   +-- Share (share)
 +-- show (show)
     +-- Show_ID (show id)
     +-- Performance_ID (performance id) [FOREIGN]
     +-- If_first_show (if first show)
     +-- Result (result)
     +-- Attendance (attendance)
NL: b'Show the years in which orchestras that have given more than one performance are founded.'
NL tokens: [b'show', b'the', b'years', b'in', b'which', b'orchestras', b'that', b'have', b'given', b'more', b'than', b'one', b'performance', b'are', b'founded', b'.']
NL tokens (original): [b'Show', b'the', b'years', b'in', b'which', b'orchestras', b'that', b'have', b'given', b'more', b'than', b'one', b'performance', b'are', b'founded', b'.']
['[CLS]', 'show', 'the', 'years', 'in', 'which', 'orchestras', 'that', 'have', 'given', 'more', 'than', 'one', 'performance', 'are', 'founded', '.', '[SEP]', '*', '[unused50]', 'conductor', '[unused51]', 'conductor', 'id', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'nationality', '[unused51]', 'year', 'of', 'work', '[unused50]', 'orchestra', '[unused51]', 'orchestra', 'id', '[unused51]', 'orchestra', '[unused51]', 'conductor', 'id', '[unused51]', 'record', 'company', '[unused51]', 'year', 'of', 'founded', '[unused51]', 'major', 'record', 'format', '[unused50]', 'performance', '[unused51]', 'performance', 'id', '[unused51]', 'orchestra', 'id', '[unused51]', 'type', '[unused51]', 'date', '[unused51]', 'official', 'ratings', '(', 'millions', ')', '[unused51]', 'weekly', 'rank', '[unused51]', 'share', '[unused50]', 'show', '[unused51]', 'show', 'id', '[unused51]', 'performance', 'id', '[unused51]', 'if', 'first', 'show', '[unused51]', 'result', '[unused51]', 'attendance', '[SEP]']
Target 0: b'SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1'
Target TF-P tokens: from orchestra join performance on orchestra.Orchestra_ID = performance.Orchestra_ID group by performance.Orchestra_ID having count (*) > 1 select orchestra.Year_of_Founded

[WRONG] [medium] Pred 0:	b'SELECT orchestra.Year_of_Founded FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID GROUP BY orchestra.Year_of_Founded HAVING COUNT(*) > 1' (-0.000) (length=20)
[WRONG] [medium] Pred 1:	b'SELECT orchestra.Year_of_Founded FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID GROUP BY orchestra.Year_of_Founded HAVING COUNT(*) > 1 INTERSECT SELECT orchestra.Year_of_Founded FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID GROUP BY orchestra.Year_of_Founded HAVING COUNT(*) > 1' (-2.132) (length=40)
[CORRE] [medium] Pred 2:	b'SELECT orchestra.Year_of_Founded FROM performance JOIN orchestra ON performance.Orchestra_ID = orchestra.Orchestra_ID GROUP BY performance.Orchestra_ID HAVING COUNT(*) > 1' (-2.872) (length=20)
Error Case 283

Parsing error: from Friend on Friend.friend_id = Friend.student_id select count (*)
Parsing error: from Friend select count (*) ,
Parsing error: from Friend and Friend.friend_id = Friend.student_id select count (*)
Example 883
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'How many friends does each student have?'
NL tokens: [b'how', b'many', b'friends', b'does', b'each', b'student', b'have', b'?']
NL tokens (original): [b'How', b'many', b'friends', b'does', b'each', b'student', b'have', b'?']
['[CLS]', 'how', 'many', 'friends', 'does', 'each', 'student', 'have', '?', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT student_id ,  count(*) FROM Friend GROUP BY student_id'
Target TF-P tokens: from Friend group by Friend.student_id select Friend.student_id , count (*)

[WRONG] [medium] Pred 0:	b'SELECT COUNT(*) FROM Friend' (-0.000) (length=8)
[WRONG] [medium] Pred 1:	b'SELECT COUNT(DISTINCT Friend.student_id) FROM Friend' (-4.212) (length=9)
[WRONG] [medium] Pred 2:	b'SELECT COUNT(*) FROM Friend WHERE Friend.friend_id IN (SELECT Friend.student_id FROM Friend)' (-5.098) (length=17)
[WRONG] [medium] Pred 3:	b'SELECT COUNT(DISTINCT Friend.friend_id) FROM Friend' (-5.588) (length=9)
[WRONG] [medium] Pred 4:	b'SELECT COUNT(*) FROM Friend WHERE Friend.friend_id = 0' (-5.711) (length=12)
[WRONG] [medium] Pred 5:	b'SELECT COUNT(*), Friend.friend_id FROM Friend GROUP BY Friend.student_id' (-5.722) (length=12)
[WRONG] [medium] Pred 6:	b'SELECT COUNT(*) FROM Friend' (-5.797) (length=13)
[WRONG] [medium] Pred 7:	b'SELECT COUNT(*), Friend.friend_id FROM Friend' (-5.938) (length=10)
[WRONG] [medium] Pred 8:	b'SELECT COUNT(*) FROM Friend WHERE Friend.friend_id > 0' (-6.350) (length=12)
[WRONG] [medium] Pred 9:	b'SELECT COUNT(*), 1 FROM Friend' (-6.838) (length=10)
[WRONG] [medium] Pred 10:	b'SELECT COUNT(*), DISTINCT Friend.friend_id FROM Friend' (-7.350) (length=11)
[WRONG] [medium] Pred 11:	b'SELECT COUNT(*) FROM Friend LIMIT 1' (-7.605) (length=10)
[WRONG] [medium] Pred 12:	b'SELECT COUNT(*) FROM Friend GROUP BY Friend.student_id' (-8.161) (length=10)
Error Case 284

Parsing error: from Highschooler join Friend on Highschooler.ID = Friend.student_id group by Highschooler.name group by Highschooler.name select Highschooler.name , count (*)
Parsing error: from Highschooler join Friend on Highschooler.ID = Friend.student_id group by Highschooler.name having count (*) , Highschooler.name
Parsing error: from Highschooler , Friend on Highschooler.ID = Friend.student_id group by Highschooler.name select Highschooler.name , count (*)
Parsing error: from Highschooler join Friend on Highschooler.ID = Friend.student_id group by Highschooler.name select Highschooler.name , count (*) , group by Highschooler.name
Parsing error: from Highschooler join Friend on Highschooler.ID = Friend.student_id group by Highschooler.name select Highschooler.name , count (*) ,
Example 884
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'Show the names of high school students and their corresponding number of friends.'
NL tokens: [b'show', b'the', b'names', b'of', b'high', b'school', b'students', b'and', b'their', b'corresponding', b'number', b'of', b'friends', b'.']
NL tokens (original): [b'Show', b'the', b'names', b'of', b'high', b'school', b'students', b'and', b'their', b'corresponding', b'number', b'of', b'friends', b'.']
['[CLS]', 'show', 'the', 'names', 'of', 'high', 'school', 'students', 'and', 'their', 'corresponding', 'number', 'of', 'friends', '.', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id'
Target TF-P tokens: from Friend join Highschooler on Friend.student_id = Highschooler.ID group by Friend.student_id select Highschooler.name , count (*)

[WRONG] [medium] Pred 0:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name' (-0.000) (length=18)
[WRONG] [medium] Pred 1:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID' (-1.858) (length=18)
[WRONG] [medium] Pred 2:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name' (-2.385) (length=23)
[WRONG] [medium] Pred 3:	b'SELECT Highschooler.name, COUNT(*), Friend.friend_id FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name' (-2.526) (length=20)
[WRONG] [medium] Pred 4:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id JOIN Highschooler ON Friend.friend_id = Highschooler.ID GROUP BY Highschooler.name' (-2.692) (length=24)
[WRONG] [medium] Pred 5:	b'SELECT Highschooler.name, COUNT(*), 1 FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name' (-3.013) (length=20)
[WRONG] [medium] Pred 6:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name, Friend.friend_id' (-3.041) (length=20)
[WRONG] [medium] Pred 7:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY "Highschooler"' (-3.861) (length=18)
[WRONG] [medium] Pred 8:	b'SELECT Highschooler.name, COUNT(Friend.friend_id) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name' (-4.036) (length=18)
[WRONG] [medium] Pred 9:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name AND Friend.friend_id' (-4.088) (length=20)
[WRONG] [medium] Pred 10:	b'SELECT COUNT(*), Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID' (-4.293) (length=18)
Error Case 285

Parsing error: from Highschooler join Friend on Highschooler.ID = Friend.friend_id group by Highschooler.name group by Highschooler.name select Highschooler.name , count (*)
Example 885
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'What are the names of the high schoolers and how many friends does each have?'
NL tokens: [b'what', b'are', b'the', b'names', b'of', b'the', b'high', b'school', b'##ers', b'and', b'how', b'many', b'friends', b'does', b'each', b'have', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'of', b'the', b'high', b'school', b'##ers', b'and', b'how', b'many', b'friends', b'does', b'each', b'have', b'?']
['[CLS]', 'what', 'are', 'the', 'names', 'of', 'the', 'high', 'school', '##ers', 'and', 'how', 'many', 'friends', 'does', 'each', 'have', '?', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id'
Target TF-P tokens: from Friend join Highschooler on Friend.student_id = Highschooler.ID group by Friend.student_id select Highschooler.name , count (*)

[WRONG] [medium] Pred 0:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id GROUP BY Highschooler.name' (-0.044) (length=18)
[WRONG] [medium] Pred 1:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id GROUP BY Highschooler.ID' (-0.447) (length=18)
[WRONG] [medium] Pred 2:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name' (-1.286) (length=18)
[WRONG] [medium] Pred 3:	b'SELECT COUNT(*), Friend.friend_id FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id GROUP BY Highschooler.ID' (-1.879) (length=18)
[WRONG] [medium] Pred 4:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id GROUP BY Friend.friend_id' (-2.238) (length=18)
 85%|████████▌ | 111/130 [15:08<01:27,  4.62s/it][WRONG] [medium] Pred 5:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID' (-2.560) (length=18)
[WRONG] [medium] Pred 6:	b'SELECT Highschooler.name, COUNT(*), Friend.friend_id FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id GROUP BY Highschooler.name' (-2.579) (length=20)
[WRONG] [medium] Pred 7:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id GROUP BY Highschooler.name, Friend.friend_id' (-2.669) (length=20)
[WRONG] [medium] Pred 8:	b'SELECT COUNT(*), Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id GROUP BY Highschooler.ID' (-2.721) (length=18)
[WRONG] [medium] Pred 9:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id GROUP BY Highschooler.ID' (-2.964) (length=23)
[WRONG] [medium] Pred 10:	b'SELECT Highschooler.name, COUNT(*), Friend.friend_id FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id GROUP BY Highschooler.ID' (-3.127) (length=20)
[WRONG] [medium] Pred 11:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id GROUP BY "Highschooler"' (-3.224) (length=18)
[WRONG] [medium] Pred 12:	b'SELECT COUNT(*), Highschooler.ID FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id GROUP BY Highschooler.ID' (-3.349) (length=18)
[WRONG] [medium] Pred 13:	b'SELECT COUNT(*), Friend.friend_id FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id GROUP BY Friend.friend_id' (-3.367) (length=18)
[WRONG] [medium] Pred 14:	b'SELECT COUNT(*), Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id GROUP BY Friend.friend_id' (-3.442) (length=18)
Error Case 286

Example 886
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'What is the name of the high schooler who has the greatest number of friends?'
NL tokens: [b'what', b'is', b'the', b'name', b'of', b'the', b'high', b'school', b'##er', b'who', b'has', b'the', b'greatest', b'number', b'of', b'friends', b'?']
NL tokens (original): [b'What', b'is', b'the', b'name', b'of', b'the', b'high', b'school', b'##er', b'who', b'has', b'the', b'greatest', b'number', b'of', b'friends', b'?']
['[CLS]', 'what', 'is', 'the', 'name', 'of', 'the', 'high', 'school', '##er', 'who', 'has', 'the', 'greatest', 'number', 'of', 'friends', '?', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from Friend join Highschooler on Friend.student_id = Highschooler.ID group by Friend.student_id select Highschooler.name order by count (*) desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID ORDER BY COUNT(*) DESC LIMIT 1' (-0.018) (length=21)
[WRONG] [extra] Pred 1:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY "Highschooler" ORDER BY COUNT(*) DESC LIMIT 1' (-0.703) (length=21)
[CORRE] [extra] Pred 2:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Friend.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-0.927) (length=21)
Error Case 287

Example 888
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'Show the names of high schoolers who have at least 3 friends.'
NL tokens: [b'show', b'the', b'names', b'of', b'high', b'school', b'##ers', b'who', b'have', b'at', b'least', b'3', b'friends', b'.']
NL tokens (original): [b'Show', b'the', b'names', b'of', b'high', b'school', b'##ers', b'who', b'have', b'at', b'least', b'3', b'friends', b'.']
['[CLS]', 'show', 'the', 'names', 'of', 'high', 'school', '##ers', 'who', 'have', 'at', 'least', '3', 'friends', '.', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3'
Target TF-P tokens: from Friend join Highschooler on Friend.student_id = Highschooler.ID group by Friend.student_id having count (*) >= 3 select Highschooler.name

[WRONG] [medium] Pred 0:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING COUNT(*) >= 3' (-0.017) (length=20)
[WRONG] [medium] Pred 1:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING COUNT(*) >= 3 INTERSECT SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING COUNT(*) >= 3' (-1.793) (length=40)
[WRONG] [medium] Pred 2:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY "Highschooler" HAVING COUNT(*) >= 3' (-2.048) (length=20)
[CORRE] [medium] Pred 3:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Friend.student_id HAVING COUNT(*) >= 3' (-2.149) (length=20)
Error Case 288

argument of type 'int' is not iterable
ERROR: Join condition does not match with table: ['Highschooler', {'join': 'Friend', 'on': {'eq': ['Highschooler.ID', 'Highschooler.ID']}}]
ERROR: invalid JOIN field "Highschooler": ['Highschooler', {'join': 'Friend', 'on': {'eq': ['Highschooler.ID', 'Highschooler']}}]
Parsing error: from Highschooler join Friend on Highschooler.ID = Friend.student_id group by Highschooler.ID order by count (*) >= 3 select Highschooler.name
Example 889
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'What are the names of high schoolers who have 3 or more friends?'
NL tokens: [b'what', b'are', b'the', b'names', b'of', b'high', b'school', b'##ers', b'who', b'have', b'3', b'or', b'more', b'friends', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'of', b'high', b'school', b'##ers', b'who', b'have', b'3', b'or', b'more', b'friends', b'?']
['[CLS]', 'what', 'are', 'the', 'names', 'of', 'high', 'school', '##ers', 'who', 'have', '3', 'or', 'more', 'friends', '?', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3'
Target TF-P tokens: from Friend join Highschooler on Friend.student_id = Highschooler.ID group by Friend.student_id having count (*) >= 3 select Highschooler.name

[WRONG] [medium] Pred 0:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING COUNT(*) >= 3' (-0.159) (length=20)
[WRONG] [medium] Pred 1:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id GROUP BY Highschooler.ID HAVING COUNT(*) >= 3' (-0.357) (length=20)
[WRONG] [medium] Pred 2:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY "Highschooler" HAVING COUNT(*) >= 3' (-1.979) (length=20)
[WRONG] [medium] Pred 3:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Friend.friend_id HAVING COUNT(*) >= 3' (-2.367) (length=20)
[WRONG] [medium] Pred 4:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Friend.friend_id HAVING COUNT(*) >= 3' (-2.500) (length=22)
[WRONG] [medium] Pred 5:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id GROUP BY "Highschooler" HAVING COUNT(*) >= 3' (-2.631) (length=20)
[WRONG] [medium] Pred 6:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id GROUP BY Friend.friend_id HAVING COUNT(*) >= 3' (-2.697) (length=20)
[WRONG] [medium] Pred 7:	b'SELECT DISTINCT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING COUNT(*) >= 3' (-2.977) (length=21)
[WRONG] [medium] Pred 8:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id GROUP BY Highschooler.ID, Friend.friend_id HAVING COUNT(*) >= 3' (-3.032) (length=22)
[WRONG] [medium] Pred 9:	b'SELECT DISTINCT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id GROUP BY Highschooler.ID HAVING COUNT(*) >= 3' (-3.142) (length=21)
[CORRE] [medium] Pred 10:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Friend.student_id HAVING COUNT(*) >= 3' (-3.159) (length=20)
Error Case 289

Example 890
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b"Show the names of all of the high schooler Kyle's friends."
NL tokens: [b'show', b'the', b'names', b'of', b'all', b'of', b'the', b'high', b'school', b'##er', b'kyle', b"'", b's', b'friends', b'.']
NL tokens (original): [b'Show', b'the', b'names', b'of', b'all', b'of', b'the', b'high', b'school', b'##er', b'Kyle', b"'", b's', b'friends', b'.']
['[CLS]', 'show', 'the', 'names', 'of', 'all', 'of', 'the', 'high', 'school', '##er', 'kyle', "'", 's', 'friends', '.', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused49]', 'kyle', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"'
Target TF-P tokens: from Friend join Highschooler on Friend.student_id = Highschooler.ID join Highschooler on Friend.friend_id = Highschooler.ID where Highschooler.name = "Kyle" select Highschooler.name

[WRONG] [hard] Pred 0:	b'SELECT DISTINCT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id WHERE Highschooler.name = "Kyle"' (-0.146) (length=18)
[WRONG] [hard] Pred 1:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id WHERE Highschooler.name = "Kyle"' (-0.215) (length=17)
[CORRE] [hard] Pred 2:	b'SELECT DISTINCT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id JOIN Highschooler ON Highschooler.ID = Friend.student_id WHERE Highschooler.name = "Kyle"' (-0.820) (length=24)
Error Case 290

ERROR: Join condition does not match with table: ['Highschooler', {'join': 'Friend', 'on': {'eq': ['Friend.student_id', 'Friend.student_id']}}]
ERROR: Join condition does not match with table: ['Highschooler', {'join': 'Friend', 'on': {'eq': ['Friend.student_id', 'Friend.student_id']}}, {'join': 'Friend', 'on': {'eq': ['Friend.friend_id', 'Highschooler.ID']}}]
ERROR: invalid JOIN field "Kyle": ['Highschooler', {'join': 'Friend', 'on': {'and': [{'eq': ['Highschooler.ID', 'Friend.student_id']}, {'eq': ['Highschooler.name', 'Kyle']}]}}]
Example 891
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'Return the names of friends of the high school student Kyle.'
NL tokens: [b'return', b'the', b'names', b'of', b'friends', b'of', b'the', b'high', b'school', b'student', b'kyle', b'.']
NL tokens (original): [b'Return', b'the', b'names', b'of', b'friends', b'of', b'the', b'high', b'school', b'student', b'Kyle', b'.']
['[CLS]', 'return', 'the', 'names', 'of', 'friends', 'of', 'the', 'high', 'school', 'student', 'kyle', '.', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused49]', 'kyle', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"'
Target TF-P tokens: from Friend join Highschooler on Friend.student_id = Highschooler.ID join Highschooler on Friend.friend_id = Highschooler.ID where Highschooler.name = "Kyle" select Highschooler.name

[WRONG] [hard] Pred 0:	b'SELECT Friend.friend_id FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id WHERE Highschooler.name = "Kyle"' (-0.131) (length=17)
[WRONG] [hard] Pred 1:	b'SELECT Friend.friend_id FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.name = "Kyle"' (-0.239) (length=17)
[WRONG] [hard] Pred 2:	b'SELECT Friend.friend_id FROM Highschooler JOIN Friend ON Friend.student_id = Highschooler.ID WHERE Highschooler.name = "Kyle"' (-1.384) (length=17)
[WRONG] [hard] Pred 3:	b'SELECT Friend.friend_id FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id JOIN Highschooler ON Friend.student_id = Highschooler.ID WHERE Highschooler.name = "Kyle"' (-1.768) (length=23)
[WRONG] [hard] Pred 4:	b'SELECT Friend.friend_id FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id JOIN Highschooler ON Friend.student_id = Highschooler.ID WHERE Highschooler.name = "Kyle"' (-1.941) (length=23)
[WRONG] [hard] Pred 5:	b'SELECT Friend.friend_id FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id JOIN Friend ON Friend.friend_id = Highschooler.ID WHERE Highschooler.name = "Kyle"' (-2.008) (length=23)
[WRONG] [hard] Pred 6:	b'SELECT Friend.friend_id FROM Friend JOIN Highschooler ON Friend.student_id = Highschooler.ID WHERE Highschooler.name = "Kyle"' (-2.294) (length=17)
[WRONG] [hard] Pred 7:	b'SELECT Friend.friend_id FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id JOIN Highschooler ON Highschooler.ID = Friend.student_id WHERE Highschooler.name = "Kyle"' (-2.331) (length=23)
 86%|████████▌ | 112/130 [15:14<01:34,  5.24s/it][WRONG] [hard] Pred 8:	b'SELECT Friend.friend_id FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id JOIN Highschooler ON Highschooler.ID = Friend.student_id WHERE Highschooler.name = "Kyle"' (-2.441) (length=23)
[WRONG] [hard] Pred 9:	b'SELECT DISTINCT Friend.friend_id FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id WHERE Highschooler.name = "Kyle"' (-2.613) (length=18)
[WRONG] [hard] Pred 10:	b'SELECT DISTINCT Friend.friend_id FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.name = "Kyle"' (-2.684) (length=18)
[WRONG] [hard] Pred 11:	b'SELECT Friend.friend_id FROM Friend JOIN Friend ON Friend.friend_id = Friend.friend_id JOIN Highschooler ON Friend.student_id = Highschooler.ID WHERE Highschooler.name = "Kyle"' (-2.766) (length=23)
[WRONG] [hard] Pred 12:	b'SELECT Friend.friend_id FROM Friend JOIN Highschooler ON Friend.friend_id = Highschooler.ID WHERE Highschooler.name = "Kyle"' (-2.835) (length=17)
Error Case 291

ERROR: table "Friend" in field expression Friend.student_id is not in the current scope
Parsing error: from Friend select Friend.student_id except from Friend select Friend.student_id in Friend select Friend.student_id
Parsing error: from Friend select Friend.student_id except from Friend on Friend.friend_id =.select Friend.student_id
Parsing error: from Friend select Friend.student_id except from Friend on Friend.friend_id = friends select Friend.student_id
Parsing error: from Friend select Friend.student_id except from Friend select Friend.student_id) select Friend.student_id
Example 894
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'Show ids of all students who do not have any friends.'
NL tokens: [b'show', b'id', b'##s', b'of', b'all', b'students', b'who', b'do', b'not', b'have', b'any', b'friends', b'.']
NL tokens (original): [b'Show', b'id', b'##s', b'of', b'all', b'students', b'who', b'do', b'not', b'have', b'any', b'friends', b'.']
['[CLS]', 'show', 'id', '##s', 'of', 'all', 'students', 'who', 'do', 'not', 'have', 'any', 'friends', '.', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend'
Target TF-P tokens: from Highschooler select Highschooler.ID except from Friend select Friend.student_id

[WRONG] [hard] Pred 0:	b'SELECT Friend.student_id FROM Friend EXCEPT SELECT Friend.student_id FROM Friend' (-0.064) (length=10)
[WRONG] [hard] Pred 1:	b'SELECT Likes.student_id FROM Likes EXCEPT SELECT Friend.student_id FROM Friend' (-3.741) (length=10)
[WRONG] [hard] Pred 2:	b'SELECT Friend.student_id FROM Friend EXCEPT SELECT Friend.student_id FROM Friend INTERSECT SELECT Friend.student_id FROM Friend' (-4.738) (length=15)
[WRONG] [hard] Pred 3:	b'SELECT Friend.student_id FROM Friend EXCEPT SELECT Friend.student_id IN (*) FROM Friend' (-5.117) (length=14)
[WRONG] [hard] Pred 4:	b'SELECT Friend.student_id FROM Friend EXCEPT SELECT Friend.student_id, Friend.friend_id FROM Friend' (-5.279) (length=12)
[WRONG] [hard] Pred 5:	b'SELECT Friend.student_id FROM Friend EXCEPT SELECT Friend.student_id FROM Friend LIMIT 1' (-5.544) (length=12)
[WRONG] [hard] Pred 6:	b'SELECT Friend.student_id FROM Friend INTERSECT SELECT Friend.student_id FROM Friend' (-5.618) (length=10)
[WRONG] [hard] Pred 7:	b'SELECT DISTINCT Friend.student_id FROM Friend EXCEPT SELECT Friend.student_id FROM Friend' (-5.641) (length=11)
[WRONG] [hard] Pred 8:	b'SELECT Friend.student_id FROM Friend UNION SELECT Friend.student_id FROM Friend' (-5.944) (length=10)
[WRONG] [hard] Pred 9:	b'SELECT Friend.student_id FROM Friend EXCEPT SELECT Likes.student_id FROM Likes' (-6.045) (length=10)
[WRONG] [hard] Pred 10:	b'SELECT Friend.student_id FROM Friend EXCEPT SELECT Friend.friend_id FROM Friend' (-6.194) (length=10)
Error Case 292

Example 897
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'What are the names of students who have no friends?'
NL tokens: [b'what', b'are', b'the', b'names', b'of', b'students', b'who', b'have', b'no', b'friends', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'of', b'students', b'who', b'have', b'no', b'friends', b'?']
['[CLS]', 'what', 'are', 'the', 'names', 'of', 'students', 'who', 'have', 'no', 'friends', '?', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id'
Target TF-P tokens: from Highschooler select Highschooler.name except from Friend join Highschooler on Friend.student_id = Highschooler.ID select Highschooler.name

[WRONG] [hard] Pred 0:	b'SELECT Highschooler.name FROM Highschooler EXCEPT SELECT Friend.student_id FROM Friend' (-0.373) (length=10)
[CORRE] [hard] Pred 1:	b'SELECT Highschooler.name FROM Highschooler EXCEPT SELECT Highschooler.name FROM Friend JOIN Highschooler ON Friend.student_id = Highschooler.ID' (-0.423) (length=16)
Error Case 293

ERROR: table "Friend" in field expression Friend.student_id is not in the current scope
ERROR: table "Friend" in field expression Friend.friend_id is not in the current scope
ERROR: Join condition does not match with table: ['Highschooler', {'join': 'Friend', 'on': {'eq': ['Highschooler.ID', 'Likes.liked_id']}}]
ERROR: table "Friend" in field expression Friend.student_id is not in the current scope
Parsing error: from Highschooler intersect distinct Highschooler.ID in (from Friend select Friend.student_id) select Highschooler.ID intersect from Likes select Friend.student_id
Parsing error: from Highschooler intersect distinct Highschooler.ID in (from Friend select Friend.student_id) select Highschooler.ID intersect from Likes select Likes.liked_id
ERROR: Join condition does not match with table: ['Highschooler', {'join': 'Likes', 'on': {'eq': ['Highschooler.ID', 'Friend.student_id']}}]
ERROR: table "Friend" in field expression Friend.student_id is not in the current scope
ERROR: table "Friend" in field expression Friend.student_id is not in the current scope
ERROR: table "Friend" in field expression Friend.student_id is not in the current scope
Example 898
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'Show the ids of high schoolers who have friends and are also liked by someone else.'
NL tokens: [b'show', b'the', b'id', b'##s', b'of', b'high', b'school', b'##ers', b'who', b'have', b'friends', b'and', b'are', b'also', b'liked', b'by', b'someone', b'else', b'.']
NL tokens (original): [b'Show', b'the', b'id', b'##s', b'of', b'high', b'school', b'##ers', b'who', b'have', b'friends', b'and', b'are', b'also', b'liked', b'by', b'someone', b'else', b'.']
 87%|████████▋ | 113/130 [15:19<01:24,  5.00s/it]['[CLS]', 'show', 'the', 'id', '##s', 'of', 'high', 'school', '##ers', 'who', 'have', 'friends', 'and', 'are', 'also', 'liked', 'by', 'someone', 'else', '.', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes'
Target TF-P tokens: from Friend select Friend.student_id intersect from Likes select Likes.liked_id

[WRONG] [hard] Pred 0:	b'SELECT Highschooler.ID FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id INTERSECT SELECT Likes.liked_id FROM Likes' (-0.066) (length=16)
[WRONG] [hard] Pred 1:	b'SELECT Highschooler.ID FROM Highschooler INTERSECT SELECT Likes.liked_id FROM Likes' (-1.714) (length=10)
[WRONG] [hard] Pred 2:	b'SELECT Highschooler.ID FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id INTERSECT SELECT Likes.student_id FROM Likes' (-1.758) (length=16)
[WRONG] [hard] Pred 3:	b'SELECT Highschooler.ID FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id INTERSECT SELECT Highschooler.ID FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id INTERSECT SELECT Highschooler.ID FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id' (-1.889) (length=33)
[WRONG] [hard] Pred 4:	b'SELECT Highschooler.ID FROM Highschooler INTERSECT SELECT Friend.student_id FROM Friend' (-2.176) (length=10)
[WRONG] [hard] Pred 5:	b'SELECT Highschooler.ID FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id INTERSECT SELECT Friend.student_id FROM Friend' (-2.623) (length=16)
Error Case 294

ERROR: table "Friend" in field expression Friend.student_id is not in the current scope
Example 899
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'What are the ids of students who both have friends and are liked?'
NL tokens: [b'what', b'are', b'the', b'id', b'##s', b'of', b'students', b'who', b'both', b'have', b'friends', b'and', b'are', b'liked', b'?']
NL tokens (original): [b'What', b'are', b'the', b'id', b'##s', b'of', b'students', b'who', b'both', b'have', b'friends', b'and', b'are', b'liked', b'?']
['[CLS]', 'what', 'are', 'the', 'id', '##s', 'of', 'students', 'who', 'both', 'have', 'friends', 'and', 'are', 'liked', '?', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes'
Target TF-P tokens: from Friend select Friend.student_id intersect from Likes select Likes.liked_id

[WRONG] [hard] Pred 0:	b'SELECT Friend.student_id FROM Friend INTERSECT SELECT Likes.student_id FROM Likes' (-0.184) (length=10)
[CORRE] [hard] Pred 1:	b'SELECT Friend.student_id FROM Friend INTERSECT SELECT Likes.liked_id FROM Likes' (-0.755) (length=10)
Error Case 295

ERROR: Join condition does not match with table: ['Highschooler', {'join': 'Friend', 'on': {'eq': ['Likes.liked_id', 'Highschooler.ID']}}]
ERROR: Join condition does not match with table: ['Likes', {'join': 'Highschooler', 'on': {'eq': ['Likes.student_id', 'Highschooler.ID']}}, {'join': 'Friend', 'on': {'eq': ['Likes.liked_id', 'Highschooler.ID']}}]
ERROR: Join condition does not match with table: ['Highschooler', {'join': 'Friend', 'on': {'eq': ['Friend.friend_id', 'Friend.student_id']}}]
ERROR: Join condition does not match with table: ['Likes', {'join': 'Highschooler', 'on': {'eq': ['Likes.student_id', 'Highschooler.ID']}}, {'join': 'Friend', 'on': {'eq': ['Likes.liked_id', 'Highschooler.ID']}}]
ERROR: Join condition does not match with table: ['Highschooler', {'join': 'Friend', 'on': {'eq': ['Likes.liked_id', 'Highschooler.ID']}}]
ERROR: table "Likes" in field expression Likes.student_id is not in the current scope
Example 900
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'Show name of all students who have some friends and also are liked by someone else.'
NL tokens: [b'show', b'name', b'of', b'all', b'students', b'who', b'have', b'some', b'friends', b'and', b'also', b'are', b'liked', b'by', b'someone', b'else', b'.']
NL tokens (original): [b'Show', b'name', b'of', b'all', b'students', b'who', b'have', b'some', b'friends', b'and', b'also', b'are', b'liked', b'by', b'someone', b'else', b'.']
['[CLS]', 'show', 'name', 'of', 'all', 'students', 'who', 'have', 'some', 'friends', 'and', 'also', 'are', 'liked', 'by', 'someone', 'else', '.', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id'
Target TF-P tokens: from Friend join Highschooler on Friend.student_id = Highschooler.ID select Highschooler.name intersect from Likes join Highschooler on Likes.liked_id = Highschooler.ID select Highschooler.name

[WRONG] [hard] Pred 0:	b'SELECT Likes.student_id FROM Likes INTERSECT SELECT Likes.student_id FROM Likes INTERSECT SELECT Likes.liked_id FROM Likes' (-0.818) (length=15)
[WRONG] [hard] Pred 1:	b'SELECT Likes.student_id FROM Likes INTERSECT SELECT Likes.student_id FROM Likes' (-1.045) (length=10)
[WRONG] [hard] Pred 2:	b'SELECT Highschooler.name FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID INTERSECT SELECT Likes.student_id FROM Likes' (-1.063) (length=16)
[WRONG] [hard] Pred 3:	b'SELECT Highschooler.name FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID INTERSECT SELECT Highschooler.name FROM Highschooler JOIN Friend ON Friend.friend_id = Highschooler.ID' (-1.141) (length=22)
[WRONG] [hard] Pred 4:	b'SELECT Highschooler.name FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID INTERSECT SELECT Likes.liked_id FROM Likes' (-1.169) (length=16)
[WRONG] [hard] Pred 5:	b'SELECT Likes.student_id FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID INTERSECT SELECT Likes.liked_id FROM Likes' (-1.285) (length=16)
[WRONG] [hard] Pred 6:	b'SELECT Highschooler.name FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID INTERSECT SELECT Highschooler.name FROM Highschooler JOIN Likes ON Likes.liked_id = Highschooler.ID' (-1.417) (length=22)
[WRONG] [hard] Pred 7:	b'SELECT Likes.student_id FROM Likes INTERSECT SELECT Likes.liked_id FROM Likes' (-1.426) (length=10)
[WRONG] [hard] Pred 8:	b'SELECT Highschooler.name FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID JOIN Friend ON Friend.friend_id = Highschooler.ID INTERSECT SELECT Highschooler.name FROM Highschooler JOIN Friend ON Friend.friend_id = Highschooler.ID' (-1.458) (length=28)
[WRONG] [hard] Pred 9:	b'SELECT Likes.student_id FROM Likes JOIN Friend ON Likes.student_id = Friend.student_id INTERSECT SELECT Likes.liked_id FROM Likes' (-1.636) (length=16)
Error Case 296

Example 904
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'Show the names of high schoolers who have likes, and numbers of likes for each.'
NL tokens: [b'show', b'the', b'names', b'of', b'high', b'school', b'##ers', b'who', b'have', b'likes', b',', b'and', b'numbers', b'of', b'likes', b'for', b'each', b'.']
NL tokens (original): [b'Show', b'the', b'names', b'of', b'high', b'school', b'##ers', b'who', b'have', b'likes', b',', b'and', b'numbers', b'of', b'likes', b'for', b'each', b'.']
['[CLS]', 'show', 'the', 'names', 'of', 'high', 'school', '##ers', 'who', 'have', 'likes', ',', 'and', 'numbers', 'of', 'likes', 'for', 'each', '.', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id'
Target TF-P tokens: from Likes join Highschooler on Likes.student_id = Highschooler.ID group by Likes.student_id select Highschooler.name , count (*)

[WRONG] [medium] Pred 0:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Likes.liked_id' (-0.069) (length=18)
[WRONG] [medium] Pred 1:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name' (-0.555) (length=18)
[WRONG] [medium] Pred 2:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Likes.liked_id' (-0.590) (length=18)
[WRONG] [medium] Pred 3:	b'SELECT Highschooler.name, SUM(Likes.liked_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Likes.liked_id' (-0.872) (length=18)
[WRONG] [medium] Pred 4:	b'SELECT Highschooler.name, Likes.liked_id, COUNT(*) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Likes.liked_id' (-1.053) (length=20)
[WRONG] [medium] Pred 5:	b'SELECT Highschooler.name, SUM(Likes.liked_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name' (-1.247) (length=18)
[WRONG] [medium] Pred 6:	b'SELECT Highschooler.name, Likes.liked_id, COUNT(*) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Likes.liked_id' (-1.386) (length=20)
[WRONG] [medium] Pred 7:	b'SELECT Highschooler.name, SUM(Likes.liked_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Likes.liked_id' (-1.399) (length=18)
[WRONG] [medium] Pred 8:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID' (-1.518) (length=18)
[CORRE] [medium] Pred 9:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Likes.student_id' (-1.695) (length=18)
Error Case 297

ERROR: table "Likes" in field expression Likes.liked_id is not in the current scope
Example 905
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'What are the names of high schoolers who have likes, and how many likes does each have?'
NL tokens: [b'what', b'are', b'the', b'names', b'of', b'high', b'school', b'##ers', b'who', b'have', b'likes', b',', b'and', b'how', b'many', b'likes', b'does', b'each', b'have', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'of', b'high', b'school', b'##ers', b'who', b'have', b'likes', b',', b'and', b'how', b'many', b'likes', b'does', b'each', b'have', b'?']
['[CLS]', 'what', 'are', 'the', 'names', 'of', 'high', 'school', '##ers', 'who', 'have', 'likes', ',', 'and', 'how', 'many', 'likes', 'does', 'each', 'have', '?', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id'
Target TF-P tokens: from Likes join Highschooler on Likes.student_id = Highschooler.ID group by Likes.student_id select Highschooler.name , count (*)

[WRONG] [medium] Pred 0:	b'SELECT Highschooler.name, SUM(Likes.liked_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name' (-0.109) (length=18)
[WRONG] [medium] Pred 1:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name' (-0.256) (length=18)
[WRONG] [medium] Pred 2:	b'SELECT Highschooler.name, SUM(Likes.liked_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Highschooler.name' (-1.302) (length=18)
[WRONG] [medium] Pred 3:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Highschooler.name' (-1.432) (length=18)
[WRONG] [medium] Pred 4:	b'SELECT Highschooler.name, Likes.liked_id FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id' (-2.088) (length=13)
[WRONG] [medium] Pred 5:	b'SELECT Highschooler.name, 4, SUM(Likes.liked_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name' (-2.206) (length=20)
[WRONG] [medium] Pred 6:	b'SELECT Highschooler.name, AVG(Likes.liked_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name' (-2.501) (length=18)
[WRONG] [medium] Pred 7:	b'SELECT Highschooler.name, MAX(Likes.liked_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name' (-2.511) (length=18)
[WRONG] [medium] Pred 8:	b'SELECT Highschooler.name, 4, COUNT(*) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name' (-2.547) (length=20)
[WRONG] [medium] Pred 9:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Likes.liked_id' (-2.715) (length=18)
[WRONG] [medium] Pred 10:	b'SELECT Highschooler.name, SUM(Likes.liked_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Likes.liked_id' (-2.755) (length=18)
[WRONG] [medium] Pred 11:	b'SELECT Highschooler.name, COUNT(*) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Likes.liked_id' (-2.784) (length=18)
[WRONG] [medium] Pred 12:	b'SELECT Highschooler.name, SUM(Likes.liked_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id GROUP BY Likes.liked_id' (-2.851) (length=18)
[WRONG] [medium] Pred 13:	b'SELECT Highschooler.name, SUM(Likes.liked_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID' (-2.927) (length=18)
[WRONG] [medium] Pred 14:	b'SELECT DISTINCT Highschooler.name, Likes.liked_id FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id' (-3.143) (length=14)
Error Case 298

Parsing error: from Highschooler on Highschooler.ID = (from Likes select Likes.liked_id order by Highschooler.grade desc limit 1) select Highschooler.name order by Highschooler.name desc limit 1
Parsing error: from Highschooler order by Highschooler.ID = (from Likes select Likes.liked_id order by Highschooler.grade desc limit 1) select Highschooler.name order by Highschooler.name desc limit 1
ERROR: table "Highschooler" in field expression Highschooler.grade is not in the current scope
ERROR: table "Highschooler" in field expression Highschooler.grade is not in the current scope
Parsing error: from Highschooler on Highschooler.ID = (from Likes select Likes.liked_id order by Highschooler.grade desc limit 1) select Highschooler.name
Parsing error: from Highschooler order by Highschooler.ID = (from Likes select Likes.liked_id order by Highschooler.grade desc limit 1) select Highschooler.name
Example 906
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'What is the name of the high schooler who has the greatest number of likes?'
NL tokens: [b'what', b'is', b'the', b'name', b'of', b'the', b'high', b'school', b'##er', b'who', b'has', b'the', b'greatest', b'number', b'of', b'likes', b'?']
NL tokens (original): [b'What', b'is', b'the', b'name', b'of', b'the', b'high', b'school', b'##er', b'who', b'has', b'the', b'greatest', b'number', b'of', b'likes', b'?']
['[CLS]', 'what', 'is', 'the', 'name', 'of', 'the', 'high', 'school', '##er', 'who', 'has', 'the', 'greatest', 'number', 'of', 'likes', '?', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from Likes join Highschooler on Likes.student_id = Highschooler.ID group by Likes.student_id select Highschooler.name order by count (*) desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT Highschooler.name FROM Highschooler ORDER BY Highschooler.grade DESC LIMIT 1' (-0.030) (length=10)
[WRONG] [extra] Pred 1:	b'SELECT Highschooler.name FROM Highschooler ORDER BY Highschooler.name DESC LIMIT 1' (-1.199) (length=10)
[WRONG] [extra] Pred 2:	b'SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id ORDER BY Highschooler.grade DESC LIMIT 1' (-1.625) (length=16)
[WRONG] [extra] Pred 3:	b'SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id ORDER BY Highschooler.name DESC LIMIT 1' (-1.869) (length=16)
[WRONG] [extra] Pred 4:	b'SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id ORDER BY Likes.liked_id DESC LIMIT 1' (-2.614) (length=16)
[WRONG] [extra] Pred 5:	b'SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id ORDER BY Likes.student_id DESC LIMIT 1' (-3.784) (length=16)
[WRONG] [extra] Pred 6:	b'SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id ORDER BY Highschooler.grade DESC LIMIT 1' (-4.110) (length=16)
[WRONG] [extra] Pred 7:	b'SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id ORDER BY Highschooler.name DESC LIMIT 1' (-4.347) (length=16)
[WRONG] [extra] Pred 8:	b'SELECT Highschooler.name FROM Highschooler ORDER BY Highschooler.ID DESC LIMIT 1' (-4.469) (length=10)
[WRONG] [extra] Pred 9:	b'SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id ORDER BY Highschooler.ID DESC LIMIT 1' (-4.484) (length=16)
Error Case 299

ERROR: Join condition does not match with table: ['Highschooler', {'join': 'Likes', 'on': {'eq': ['Likes.liked_id', 'Likes.student_id']}}]
Example 907
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'Give the name of the student with the most likes.'
NL tokens: [b'give', b'the', b'name', b'of', b'the', b'student', b'with', b'the', b'most', b'likes', b'.']
NL tokens (original): [b'Give', b'the', b'name', b'of', b'the', b'student', b'with', b'the', b'most', b'likes', b'.']
['[CLS]', 'give', 'the', 'name', 'of', 'the', 'student', 'with', 'the', 'most', 'likes', '.', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from Likes join Highschooler on Likes.student_id = Highschooler.ID group by Likes.student_id select Highschooler.name order by count (*) desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id ORDER BY Likes.liked_id DESC LIMIT 1' (-0.249) (length=16)
[WRONG] [extra] Pred 1:	b'SELECT Likes.student_id FROM Likes ORDER BY Likes.liked_id DESC LIMIT 1' (-0.595) (length=10)
[WRONG] [extra] Pred 2:	b'SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id ORDER BY Likes.liked_id DESC LIMIT 1' (-0.629) (length=16)
[CORRE] [extra] Pred 3:	b'SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Likes.student_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.041) (length=21)
Error Case 300

Example 908
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'Show the names of students who have at least 2 likes.'
NL tokens: [b'show', b'the', b'names', b'of', b'students', b'who', b'have', b'at', b'least', b'2', b'likes', b'.']
NL tokens (original): [b'Show', b'the', b'names', b'of', b'students', b'who', b'have', b'at', b'least', b'2', b'likes', b'.']
['[CLS]', 'show', 'the', 'names', 'of', 'students', 'who', 'have', 'at', 'least', '2', 'likes', '.', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2'
Target TF-P tokens: from Likes join Highschooler on Likes.student_id = Highschooler.ID group by Likes.student_id having count (*) >= 2 select Highschooler.name

[WRONG] [medium] Pred 0:	b'SELECT Likes.student_id FROM Likes GROUP BY Likes.student_id HAVING COUNT(*) >= 2' (-0.024) (length=14)
[CORRE] [medium] Pred 1:	b'SELECT Highschooler.name FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID GROUP BY Likes.student_id HAVING COUNT(*) >= 2' (-0.674) (length=20)
Error Case 301

Example 910
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'Show the names of students who have a grade higher than 5 and have at least 2 friends.'
NL tokens: [b'show', b'the', b'names', b'of', b'students', b'who', b'have', b'a', b'grade', b'higher', b'than', b'5', b'and', b'have', b'at', b'least', b'2', b'friends', b'.']
NL tokens (original): [b'Show', b'the', b'names', b'of', b'students', b'who', b'have', b'a', b'grade', b'higher', b'than', b'5', b'and', b'have', b'at', b'least', b'2', b'friends', b'.']
['[CLS]', 'show', 'the', 'names', 'of', 'students', 'who', 'have', 'a', 'grade', 'higher', 'than', '5', 'and', 'have', 'at', 'least', '2', 'friends', '.', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2'
Target TF-P tokens: from Friend join Highschooler on Friend.student_id = Highschooler.ID where Highschooler.grade > 5 group by Friend.student_id having count (*) >= 2 select Highschooler.name

[WRONG] [hard] Pred 0:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 GROUP BY Friend.friend_id ORDER BY COUNT(*) >= 2' (-0.070) (length=24)
[WRONG] [hard] Pred 1:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 GROUP BY Highschooler.name HAVING COUNT(*) >= 2' (-0.393) (length=24)
[WRONG] [hard] Pred 2:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 GROUP BY Friend.friend_id INTERSECT SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade >= 2' (-0.416) (length=32)
[WRONG] [hard] Pred 3:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 GROUP BY Friend.friend_id INTERSECT SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id GROUP BY Friend.friend_id HAVING COUNT(*) >= 2' (-0.504) (length=37)
[WRONG] [hard] Pred 4:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 GROUP BY Friend.friend_id INTERSECT SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade >= 2 GROUP BY Highschooler.name HAVING COUNT(*) >= 2' (-0.599) (length=41)
[CORRE] [hard] Pred 5:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 GROUP BY Friend.student_id HAVING COUNT(*) >= 2' (-0.681) (length=24)
Error Case 302

Parsing error: from Highschooler join Friend on Highschooler.ID = Friend.student_id where Highschooler.grade > 5 group by Friend.friend_id select Highschooler.name having count (*) >= 2
Example 911
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?'
NL tokens: [b'what', b'are', b'the', b'names', b'of', b'high', b'school', b'##ers', b'who', b'have', b'a', b'grade', b'of', b'over', b'5', b'and', b'have', b'2', b'or', b'more', b'friends', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'of', b'high', b'school', b'##ers', b'who', b'have', b'a', b'grade', b'of', b'over', b'5', b'and', b'have', b'2', b'or', b'more', b'friends', b'?']
['[CLS]', 'what', 'are', 'the', 'names', 'of', 'high', 'school', '##ers', 'who', 'have', 'a', 'grade', 'of', 'over', '5', 'and', 'have', '2', 'or', 'more', 'friends', '?', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2'
Target TF-P tokens: from Friend join Highschooler on Friend.student_id = Highschooler.ID where Highschooler.grade > 5 group by Friend.student_id having count (*) >= 2 select Highschooler.name

[WRONG] [hard] Pred 0:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 INTERSECT SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id GROUP BY Friend.friend_id HAVING COUNT(*) >= 2' (-0.057) (length=35)
[WRONG] [hard] Pred 1:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 GROUP BY Friend.friend_id ORDER BY COUNT(*) >= 2' (-0.359) (length=24)
[WRONG] [hard] Pred 2:	b'SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade > 5 INTERSECT SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id GROUP BY Friend.friend_id HAVING COUNT(*) >= 2' (-0.443) (length=29)
[WRONG] [hard] Pred 3:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 AND Friend.friend_id = 2' (-0.551) (length=19)
[WRONG] [hard] Pred 4:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 GROUP BY Friend.friend_id INTERSECT SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id GROUP BY Friend.friend_id HAVING COUNT(*) >= 2' (-0.920) (length=37)
[WRONG] [hard] Pred 5:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 AND Friend.friend_id <= 2' (-0.931) (length=19)
[WRONG] [hard] Pred 6:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 INTERSECT SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id GROUP BY Highschooler.ID HAVING COUNT(*) >= 2' (-1.028) (length=35)
[WRONG] [hard] Pred 7:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 AND Friend.friend_id >= 2' (-1.198) (length=19)
[WRONG] [hard] Pred 8:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 INTERSECT SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Friend.friend_id HAVING COUNT(*) >= 2' (-1.204) (length=35)
[WRONG] [hard] Pred 9:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id WHERE Highschooler.grade > 5 INTERSECT SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id GROUP BY Friend.friend_id HAVING COUNT(*) >= 2' (-1.309) (length=35)
[WRONG] [hard] Pred 10:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 AND Highschooler.grade >= 2' (-1.634) (length=19)
[WRONG] [hard] Pred 11:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 GROUP BY Friend.friend_id ORDER BY COUNT(*) DESC LIMIT 2' (-1.648) (length=25)
[WRONG] [hard] Pred 12:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 AND Friend.friend_id LIKE COUNT(*) >= 2' (-1.740) (length=24)
 88%|████████▊ | 114/130 [15:29<01:45,  6.57s/it][WRONG] [hard] Pred 13:	b'SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 GROUP BY Friend.friend_id HAVING COUNT(*) >= 2' (-1.776) (length=24)
[WRONG] [hard] Pred 14:	b'SELECT DISTINCT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 AND Friend.friend_id = 2' (-1.879) (length=20)
Error Case 303

Example 913
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'Return the number of likes that the high schooler named Kyle has.'
NL tokens: [b'return', b'the', b'number', b'of', b'likes', b'that', b'the', b'high', b'school', b'##er', b'named', b'kyle', b'has', b'.']
NL tokens (original): [b'Return', b'the', b'number', b'of', b'likes', b'that', b'the', b'high', b'school', b'##er', b'named', b'Kyle', b'has', b'.']
['[CLS]', 'return', 'the', 'number', 'of', 'likes', 'that', 'the', 'high', 'school', '##er', 'named', 'kyle', 'has', '.', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused49]', 'kyle', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"'
Target TF-P tokens: from Likes join Highschooler on Likes.student_id = Highschooler.ID where Highschooler.name = "Kyle" select count (*)

[WRONG] [medium] Pred 0:	b'SELECT Likes.liked_id FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id WHERE Highschooler.name = "Kyle"' (-0.039) (length=17)
[CORRE] [medium] Pred 1:	b'SELECT COUNT(*) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.liked_id WHERE Highschooler.name = "Kyle"' (-0.452) (length=20)
Error Case 304

ERROR: table "Friend" in field expression Friend.friend_id is not in the current scope
ERROR: table "Friend" in field expression Friend.friend_id is not in the current scope
Parsing error: from Highschooler join Friend on Highschooler.ID = Friend.student_id where Friend.friend_id in (from Highschooler select avg (Friend.friend_id)) select intersect from Highschooler select avg (Highschooler.grade)
ERROR: table "Friend" in field expression Friend.friend_id is not in the current scope
ERROR: table "Friend" in field expression Friend.friend_id is not in the current scope
ERROR: table "Friend" in field expression Friend.friend_id is not in the current scope
Example 914
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'Find the average grade of all students who have some friends.'
NL tokens: [b'find', b'the', b'average', b'grade', b'of', b'all', b'students', b'who', b'have', b'some', b'friends', b'.']
NL tokens (original): [b'Find', b'the', b'average', b'grade', b'of', b'all', b'students', b'who', b'have', b'some', b'friends', b'.']
['[CLS]', 'find', 'the', 'average', 'grade', 'of', 'all', 'students', 'who', 'have', 'some', 'friends', '.', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)'
Target TF-P tokens: from Highschooler where Highschooler.ID in (from Friend join Highschooler on Friend.student_id = Highschooler.ID select Friend.student_id) select avg (Highschooler.grade)

[WRONG] [hard] Pred 0:	b'SELECT AVG(Highschooler.grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id' (-0.001) (length=14)
[WRONG] [hard] Pred 1:	b'SELECT AVG(Highschooler.grade) FROM Highschooler' (-2.416) (length=8)
[WRONG] [hard] Pred 2:	b'SELECT AVG(Highschooler.grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.friend_id IN (SELECT DISTINCT Highschooler.grade FROM Highschooler)' (-2.757) (length=24)
[WRONG] [hard] Pred 3:	b'SELECT AVG(Highschooler.grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.friend_id IN (SELECT DISTINCT Highschooler.ID FROM Highschooler)' (-2.801) (length=24)
[WRONG] [hard] Pred 4:	b'SELECT AVG(Highschooler.grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id JOIN Highschooler ON Friend.friend_id = Highschooler.ID' (-2.824) (length=20)
[WRONG] [hard] Pred 5:	b'SELECT DISTINCT Highschooler.grade FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.friend_id IN (SELECT AVG(Highschooler.grade) FROM Highschooler)' (-2.839) (length=24)
[WRONG] [hard] Pred 6:	b'SELECT AVG(Highschooler.grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.friend_id = 0' (-3.024) (length=18)
[WRONG] [hard] Pred 7:	b'SELECT AVG(Highschooler.grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id JOIN Friend ON Friend.friend_id = Highschooler.ID' (-3.061) (length=20)
[WRONG] [hard] Pred 8:	b'SELECT DISTINCT Highschooler.grade FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id' (-3.157) (length=12)
[WRONG] [hard] Pred 9:	b'SELECT AVG(Highschooler.grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id' (-3.226) (length=19)
Error Case 305

ERROR: table "Friend" in field expression Friend.friend_id is not in the current scope
ERROR: table "Friend" in field expression Friend.friend_id is not in the current scope
Parsing error: from Highschooler join Friend on Highschooler.ID = Friend.student_id where Friend.friend_id in (from Highschooler select avg (Friend.friend_id)) select intersect from Highschooler select avg (Highschooler.grade)
ERROR: table "Friend" in field expression Friend.friend_id is not in the current scope
Parsing error: from Highschooler join Friend on Highschooler.ID = Friend.student_id select intersect (*)
Parsing error: from Highschooler join Friend on Highschooler.ID = Friend.student_id select intersect distinct Highschooler.grade)
'on'
Example 915
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'What is the average grade of students who have friends?'
NL tokens: [b'what', b'is', b'the', b'average', b'grade', b'of', b'students', b'who', b'have', b'friends', b'?']
NL tokens (original): [b'What', b'is', b'the', b'average', b'grade', b'of', b'students', b'who', b'have', b'friends', b'?']
['[CLS]', 'what', 'is', 'the', 'average', 'grade', 'of', 'students', 'who', 'have', 'friends', '?', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)'
Target TF-P tokens: from Highschooler where Highschooler.ID in (from Friend join Highschooler on Friend.student_id = Highschooler.ID select Friend.student_id) select avg (Highschooler.grade)

[WRONG] [hard] Pred 0:	b'SELECT AVG(Highschooler.grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id' (-0.018) (length=14)
[WRONG] [hard] Pred 1:	b'SELECT AVG(Highschooler.grade) FROM Highschooler' (-1.264) (length=8)
[WRONG] [hard] Pred 2:	b'SELECT DISTINCT Highschooler.grade FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id' (-3.218) (length=12)
[WRONG] [hard] Pred 3:	b'SELECT AVG(Highschooler.grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id' (-3.222) (length=19)
[WRONG] [hard] Pred 4:	b'SELECT AVG(Highschooler.grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.friend_id = 0' (-3.762) (length=18)
[WRONG] [hard] Pred 5:	b'SELECT AVG(Highschooler.grade), Highschooler.grade FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.grade' (-3.810) (length=18)
[WRONG] [hard] Pred 6:	b'SELECT COUNT(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id' (-4.025) (length=14)
[WRONG] [hard] Pred 7:	b'SELECT AVG(Highschooler.grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.grade' (-4.409) (length=16)
[WRONG] [hard] Pred 8:	b'SELECT AVG(Friend.friend_id) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id' (-4.467) (length=14)
Error Case 306

Parsing error: from Highschooler where Highschooler.grade not in (from Friend select Friend.student_id) select min (Highschooler.grade)) select distinct Highschooler.grade
ERROR: table "Friend" in field expression Friend.student_id is not in the current scope
Parsing error: from Highschooler where Highschooler.grade not in (from Highschooler join Friend on Highschooler.ID = Friend.student_id select min (Friend.friend_id)) select min (Highschooler.grade)) select distinct Highschooler.grade
ERROR: table "Friend" in field expression Friend.student_id is not in the current scope
Parsing error: from Highschooler where Highschooler.grade is null null select distinct Highschooler.grade
ERROR: table "Friend" in field expression Friend.student_id is not in the current scope
ERROR: table "Friend" in field expression Friend.student_id is not in the current scope
ERROR: table "Friend" in field expression Friend.student_id is not in the current scope
ERROR: table "Friend" in field expression Friend.student_id is not in the current scope
Example 916
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'Find the minimum grade of students who have no friends.'
NL tokens: [b'find', b'the', b'minimum', b'grade', b'of', b'students', b'who', b'have', b'no', b'friends', b'.']
NL tokens (original): [b'Find', b'the', b'minimum', b'grade', b'of', b'students', b'who', b'have', b'no', b'friends', b'.']
['[CLS]', 'find', 'the', 'minimum', 'grade', 'of', 'students', 'who', 'have', 'no', 'friends', '.', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)'
Target TF-P tokens: from Highschooler where Highschooler.ID not in (from Friend join Highschooler on Friend.student_id = Highschooler.ID select Friend.student_id) select min (Highschooler.grade)

[WRONG] [extra] Pred 0:	b'SELECT DISTINCT Highschooler.grade FROM Highschooler WHERE Highschooler.grade NOT IN (SELECT MIN(Highschooler.grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id)' (-0.115) (length=25)
[WRONG] [extra] Pred 1:	b'SELECT MIN(Highschooler.grade) FROM Highschooler WHERE Highschooler.grade NOT IN (SELECT Friend.student_id FROM Friend)' (-0.298) (length=18)
[WRONG] [extra] Pred 2:	b'SELECT DISTINCT Highschooler.grade FROM Highschooler WHERE Highschooler.grade NOT IN (SELECT MIN(Friend.friend_id) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id)' (-0.491) (length=25)
[WRONG] [extra] Pred 3:	b'SELECT MIN(Highschooler.grade) FROM Highschooler WHERE Highschooler.grade NOT IN (SELECT MIN(Friend.friend_id) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id)' (-0.780) (length=27)
[WRONG] [extra] Pred 4:	b'SELECT DISTINCT Highschooler.name FROM Highschooler WHERE Highschooler.grade NOT IN (SELECT MIN(Highschooler.grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id)' (-1.041) (length=25)
[WRONG] [extra] Pred 5:	b'SELECT MIN(Highschooler.grade) FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT Friend.student_id FROM Friend)' (-1.260) (length=18)
[WRONG] [extra] Pred 6:	b'SELECT DISTINCT Highschooler.grade, Highschooler.grade FROM Highschooler WHERE Highschooler.grade NOT IN (SELECT MIN(Highschooler.grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id)' (-1.474) (length=27)
Error Case 307

Parsing error: from Highschooler where Highschooler.grade is null null select Highschooler.name except from Highschooler join Friend on Highschooler.ID = Friend.student_id select Highschooler.name
Parsing error: from Highschooler where Highschooler.grade is null null select Highschooler.name except from Highschooler join Friend on Highschooler.ID = Friend.student_id select Highschooler.grade
Parsing error: from Highschooler where Highschooler.grade select (from Highschooler join Friend on Highschooler.ID = Friend.student_id select min (Highschooler.grade)) select Highschooler.grade
Parsing error: from Highschooler where Highschooler.grade not in (from Highschooler join Friend on Highschooler.ID = Friend.student_id select min (Friend.friend_id)) select Friend.student_id) select distinct Highschooler.name
Parsing error: from Highschooler select Highschooler.grade except from Highschooler join Friend on Highschooler.ID = Friend.student_id select min (Highschooler.grade)) select Highschooler.grade
Parsing error: from Highschooler where Highschooler.grade is in (from Highschooler select min (Highschooler.grade)) select Highschooler.grade
Parsing error: from Highschooler where Highschooler.grade is null null select Highschooler.grade , Highschooler.grade
Example 917
network_1
 +-- Highschooler (high schooler)
 |   +-- ID (id) [PRIMARY] [FOREIGN]
 |   +-- name (name)
 |   +-- grade (grade)
 +-- Friend (friend)
 |   +-- student_id (student id) [PRIMARY] [FOREIGN]
 |   +-- friend_id (friend id) [FOREIGN]
 +-- Likes (likes)
     +-- student_id (student id) [PRIMARY] [FOREIGN]
     +-- liked_id (liked id) [FOREIGN]
NL: b'What is the lowest grade of students who do not have any friends?'
NL tokens: [b'what', b'is', b'the', b'lowest', b'grade', b'of', b'students', b'who', b'do', b'not', b'have', b'any', b'friends', b'?']
NL tokens (original): [b'What', b'is', b'the', b'lowest', b'grade', b'of', b'students', b'who', b'do', b'not', b'have', b'any', b'friends', b'?']
['[CLS]', 'what', 'is', 'the', 'lowest', 'grade', 'of', 'students', 'who', 'do', 'not', 'have', 'any', 'friends', '?', '[SEP]', '*', '[unused50]', 'high', 'school', '##er', '[unused51]', 'id', '[unused51]', 'name', '[unused51]', 'grade', '[unused50]', 'friend', '[unused51]', 'student', 'id', '[unused51]', 'friend', 'id', '[unused50]', 'likes', '[unused51]', 'student', 'id', '[unused51]', 'liked', 'id', '[SEP]']
Target 0: b'SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)'
 88%|████████▊ | 115/130 [15:45<02:19,  9.33s/it]Target TF-P tokens: from Highschooler where Highschooler.ID not in (from Friend join Highschooler on Friend.student_id = Highschooler.ID select Friend.student_id) select min (Highschooler.grade)

[WRONG] [extra] Pred 0:	b'SELECT Highschooler.grade FROM Highschooler WHERE Highschooler.grade NOT IN (SELECT MIN(Highschooler.grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id)' (-0.029) (length=24)
[WRONG] [extra] Pred 1:	b'SELECT Highschooler.grade FROM Highschooler WHERE Highschooler.grade NOT IN (SELECT MIN(Friend.friend_id) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id)' (-0.662) (length=24)
[WRONG] [extra] Pred 2:	b'SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade NOT IN (SELECT MIN(Highschooler.grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id)' (-0.769) (length=24)
[WRONG] [extra] Pred 3:	b'SELECT Highschooler.grade FROM Highschooler EXCEPT SELECT DISTINCT Highschooler.grade FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id' (-0.855) (length=17)
[WRONG] [extra] Pred 4:	b'SELECT Highschooler.grade FROM Highschooler WHERE Highschooler.grade != (SELECT MIN(Highschooler.grade) FROM Highschooler)' (-1.285) (length=17)
[WRONG] [extra] Pred 5:	b'SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade NOT IN (SELECT MIN(Friend.friend_id) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id)' (-1.306) (length=24)
[WRONG] [extra] Pred 6:	b'SELECT Highschooler.grade FROM Highschooler EXCEPT SELECT MIN(Highschooler.grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id' (-1.398) (length=19)
[WRONG] [extra] Pred 7:	b'SELECT Highschooler.grade FROM Highschooler WHERE Highschooler.grade NOT IN (SELECT MIN(Highschooler.grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id)' (-1.426) (length=26)
[WRONG] [extra] Pred 8:	b'SELECT Highschooler.ID, Highschooler.name FROM Highschooler WHERE Highschooler.grade NOT IN (SELECT MIN(Highschooler.grade) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id)' (-1.488) (length=26)
Error Case 308

ERROR: table "Dogs" in field expression Dogs.age is not in the current scope
Example 921
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'Find the average age of the dogs who went through treatments.'
NL tokens: [b'find', b'the', b'average', b'age', b'of', b'the', b'dogs', b'who', b'went', b'through', b'treatments', b'.']
NL tokens (original): [b'Find', b'the', b'average', b'age', b'of', b'the', b'dogs', b'who', b'went', b'through', b'treatments', b'.']
['[CLS]', 'find', 'the', 'average', 'age', 'of', 'the', 'dogs', 'who', 'went', 'through', 'treatments', '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )'
Target TF-P tokens: from Dogs where Dogs.dog_id in (from Treatments select Treatments.dog_id) select avg (Dogs.age)

[WRONG] [hard] Pred 0:	b'SELECT AVG(Dogs.age) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id' (-0.000) (length=14)
[WRONG] [hard] Pred 1:	b'SELECT AVG(Dogs.age) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.date_of_treatment > "VALUE-VALUE-VALUE VALUE : VALUE : VALUE"' (-2.741) (length=29)
[WRONG] [hard] Pred 2:	b'SELECT AVG(Dogs.age) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.date_arrived > "VALUE-VALUE-VALUE VALUE : VALUE : VALUE"' (-2.751) (length=29)
[WRONG] [hard] Pred 3:	b'SELECT AVG(Dogs.age) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.professional_id = (SELECT AVG(Treatments.date_of_treatment) FROM Treatments)' (-2.977) (length=26)
[WRONG] [hard] Pred 4:	b'SELECT AVG(Dogs.age) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.date_arrived > (SELECT AVG(Treatments.date_of_treatment) FROM Treatments)' (-3.022) (length=26)
[WRONG] [hard] Pred 5:	b'SELECT AVG(Dogs.age) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.date_arrived < (SELECT AVG(Treatments.date_of_treatment) FROM Treatments)' (-3.162) (length=26)
[WRONG] [hard] Pred 6:	b'SELECT AVG(Dogs.age) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.cost_of_treatment > (SELECT AVG(Treatments.date_of_treatment) FROM Treatments)' (-3.163) (length=26)
[WRONG] [hard] Pred 7:	b'SELECT AVG(Dogs.age) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.date_arrived > "VALUE : VALUE-VALUE VALUE : VALUE"' (-3.486) (length=27)
[WRONG] [hard] Pred 8:	b'SELECT AVG(Dogs.age) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.treatment_type_code = "no"' (-3.733) (length=20)
[WRONG] [hard] Pred 9:	b'SELECT AVG(Dogs.age) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Treatments.dog_id' (-3.747) (length=16)
[WRONG] [hard] Pred 10:	b'SELECT AVG(Dogs.age) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.treatment_type_code = "VALUE"' (-3.847) (length=20)
[WRONG] [hard] Pred 11:	b'SELECT AVG(Dogs.age) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.professional_id = "VALUE"' (-3.900) (length=20)
[WRONG] [hard] Pred 12:	b'SELECT AVG(Dogs.age) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.date_arrived > "VALUE : VALUE"' (-3.903) (length=22)
[WRONG] [hard] Pred 13:	b'SELECT AVG(Dogs.age) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.cost_of_treatment > "VALUE"' (-4.062) (length=18)
[WRONG] [hard] Pred 14:	b'SELECT AVG(Dogs.age) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.date_arrived > "VALUE"' (-4.278) (length=18)
Error Case 309

Parsing error: from Professionals join Treatments on Professionals.professional_id = Treatments.professional_id where Professionals.state = "Indiana" or Treatments.date_of_treatment > 2 : Professionals.last_name , Professionals.professional_id having count (*) > 2 select Professionals.professional_id , Professionals.last_name , Professionals.home_phone
Parsing error: from Professionals join Treatments on Professionals.professional_id = Treatments.professional_id where Professionals.state = "Indiana" or Treatments.date_of_treatment > 2 : Professionals.last_name , Professionals.home_phone having count (*) > 2
Parsing error: from Professionals join Treatments on Professionals.professional_id = Treatments.professional_id where Professionals.state = "Indiana" or Treatments.date_of_treatment > 2 : Professionals.last_name , Professionals.home_phone having count (*) desc limit 2
Parsing error: from Professionals join Treatments on Professionals.professional_id = Treatments.professional_id where Professionals.state = "Indiana" or Treatments.date_of_treatment > 2 : Professionals.home_phone select Professionals.professional_id , Professionals.last_name , Professionals.home_phone
Example 922
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.'
NL tokens: [b'which', b'professionals', b'live', b'in', b'the', b'state', b'of', b'indiana', b'or', b'have', b'done', b'treatment', b'on', b'more', b'than', b'2', b'treatments', b'?', b'list', b'his', b'or', b'her', b'id', b',', b'last', b'name', b'and', b'cell', b'phone', b'.']
NL tokens (original): [b'Which', b'professionals', b'live', b'in', b'the', b'state', b'of', b'Indiana', b'or', b'have', b'done', b'treatment', b'on', b'more', b'than', b'2', b'treatments', b'?', b'List', b'his', b'or', b'her', b'id', b',', b'last', b'name', b'and', b'cell', b'phone', b'.']
['[CLS]', 'which', 'professionals', 'live', 'in', 'the', 'state', 'of', 'indiana', 'or', 'have', 'done', 'treatment', 'on', 'more', 'than', '2', 'treatments', '?', 'list', 'his', 'or', 'her', 'id', ',', 'last', 'name', 'and', 'cell', 'phone', '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused49]', 'indiana', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused49]', 'indiana', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b"SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2"
Target TF-P tokens: from Professionals where Professionals.state = "Indiana" select Professionals.professional_id , Professionals.last_name , Professionals.cell_number union from Professionals join Treatments on Professionals.professional_id = Treatments.professional_id group by Professionals.professional_id having count (*) > 2 select Professionals.professional_id , Professionals.last_name , Professionals.cell_number

[WRONG] [extra] Pred 0:	b'SELECT Professionals.professional_id, Professionals.last_name, Professionals.home_phone FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = "Indiana" OR Treatments.date_of_treatment > 2' (-0.006) (length=25)
[WRONG] [extra] Pred 1:	b'SELECT Professionals.professional_id, Professionals.last_name, Professionals.home_phone FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = "Indiana" UNION SELECT Professionals.professional_id, Professionals.last_name, Professionals.home_phone FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING COUNT(*) > 2' (-0.512) (length=45)
[WRONG] [extra] Pred 2:	b'SELECT Professionals.professional_id, Professionals.last_name, Professionals.home_phone FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = "Indiana" OR Treatments.date_of_treatment > "Indiana"' (-0.907) (length=27)
[WRONG] [extra] Pred 3:	b'SELECT Professionals.professional_id, Professionals.last_name, Professionals.home_phone FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = "Indiana" OR Treatments.date_of_treatment > 2 AND Professionals.last_name = 2' (-1.046) (length=31)
[WRONG] [extra] Pred 4:	b'SELECT Professionals.professional_id, Professionals.last_name, Professionals.home_phone FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = "Indiana" OR Treatments.date_of_treatment > 2 OR COUNT(*) > 2' (-1.134) (length=32)
[WRONG] [extra] Pred 5:	b'SELECT Professionals.professional_id, Professionals.last_name, Professionals.home_phone FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = "Indiana" OR Treatments.date_of_treatment > 2 AND Professionals.home_phone HAVING COUNT(*) > 2' (-1.139) (length=34)
[WRONG] [extra] Pred 6:	b'SELECT Professionals.professional_id, Professionals.last_name, Professionals.home_phone FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = "Indiana" UNION SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING COUNT(*) > 2' (-1.149) (length=45)
[WRONG] [extra] Pred 7:	b'SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = "Indiana" OR Treatments.date_of_treatment > 2' (-1.150) (length=25)
[WRONG] [extra] Pred 8:	b'SELECT Professionals.professional_id, Professionals.last_name, Professionals.home_phone FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = "Indiana" OR Treatments.date_of_treatment > 2 AND Professionals.home_phone = 2' (-1.165) (length=29)
[WRONG] [extra] Pred 9:	b'SELECT Professionals.professional_id, Professionals.last_name, Professionals.home_phone FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = "Indiana" OR Treatments.date_of_treatment > 2 OR Professionals.home_phone = 2' (-1.236) (length=29)
[WRONG] [extra] Pred 10:	b'SELECT Professionals.professional_id, Professionals.last_name, Professionals.home_phone FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = "Indiana"' (-1.359) (length=21)
[WRONG] [extra] Pred 11:	b'SELECT Professionals.professional_id, Professionals.last_name, Professionals.home_phone FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = "Indiana" AND Treatments.date_of_treatment > 2' (-1.367) (length=25)
Error Case 310

Example 923
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.'
NL tokens: [b'find', b'the', b'id', b',', b'last', b'name', b'and', b'cell', b'phone', b'of', b'the', b'professionals', b'who', b'live', b'in', b'the', b'state', b'of', b'indiana', b'or', b'have', b'performed', b'more', b'than', b'two', b'treatments', b'.']
NL tokens (original): [b'Find', b'the', b'id', b',', b'last', b'name', b'and', b'cell', b'phone', b'of', b'the', b'professionals', b'who', b'live', b'in', b'the', b'state', b'of', b'Indiana', b'or', b'have', b'performed', b'more', b'than', b'two', b'treatments', b'.']
['[CLS]', 'find', 'the', 'id', ',', 'last', 'name', 'and', 'cell', 'phone', 'of', 'the', 'professionals', 'who', 'live', 'in', 'the', 'state', 'of', 'indiana', 'or', 'have', 'performed', 'more', 'than', 'two', 'treatments', '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused49]', 'indiana', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused49]', 'indiana', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b"SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2"
Target TF-P tokens: from Professionals where Professionals.state = "Indiana" select Professionals.professional_id , Professionals.last_name , Professionals.cell_number union from Professionals join Treatments on Professionals.professional_id = Treatments.professional_id group by Professionals.professional_id having count (*) > 2 select Professionals.professional_id , Professionals.last_name , Professionals.cell_number

[WRONG] [extra] Pred 0:	b'SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = "Indiana" OR Professionals.state = "Indiana"' (-0.077) (length=27)
[WRONG] [extra] Pred 1:	b'SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = "Indiana" OR Treatments.date_of_treatment > 2' (-0.334) (length=25)
[WRONG] [extra] Pred 2:	b'SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = "Indiana" OR Professionals.state = "Indiana" UNION SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING COUNT(*) > 2' (-0.348) (length=51)
[WRONG] [extra] Pred 3:	b'SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = "Indiana" OR Professionals.cell_number > 2' (-0.418) (length=25)
[WRONG] [extra] Pred 4:	b'SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = "Indiana" OR Professionals.state = "Indiana" GROUP BY Professionals.professional_id HAVING COUNT(*) > 2' (-0.547) (length=36)
[WRONG] [extra] Pred 5:	b'SELECT Professionals.professional_id, Professionals.last_name, Professionals.home_phone FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = "Indiana" OR Professionals.state = "Indiana" UNION SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING COUNT(*) > 2' (-0.567) (length=51)
[WRONG] [extra] Pred 6:	b'SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = "Indiana" OR Professionals.home_phone > 2' (-0.729) (length=25)
[WRONG] [extra] Pred 7:	b'SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = "Indiana" OR Professionals.state = "Indiana" UNION SELECT Professionals.professional_id, Professionals.last_name, Professionals.home_phone FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING COUNT(*) > 2' (-0.760) (length=51)
[WRONG] [extra] Pred 8:	b'SELECT Professionals.professional_id, Professionals.last_name, Professionals.home_phone FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = "Indiana" OR Professionals.state = "Indiana"' (-0.886) (length=27)
[WRONG] [extra] Pred 9:	b'SELECT Professionals.professional_id, Professionals.last_name, Professionals.home_phone FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = "Indiana" OR Professionals.state = "Indiana" UNION SELECT Professionals.professional_id, Professionals.last_name, Professionals.home_phone FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING COUNT(*) > 2' (-0.978) (length=51)
[WRONG] [extra] Pred 10:	b'SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = "Indiana" OR Treatments.date_of_treatment > "Indiana"' (-0.982) (length=27)
[WRONG] [extra] Pred 11:	b'SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = "Indiana" OR Professionals.state = "Indiana" OR Professionals.cell_number > 2' (-1.004) (length=31)
[WRONG] [extra] Pred 12:	b'SELECT Professionals.professional_id, Professionals.last_name, Professionals.home_phone FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = "Indiana" OR Treatments.date_of_treatment > 2' (-1.055) (length=25)
[WRONG] [extra] Pred 13:	b'SELECT Professionals.professional_id, Professionals.last_name, Professionals.home_phone FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = "Indiana" OR Professionals.state = "Indiana" GROUP BY Professionals.professional_id HAVING COUNT(*) > 2' (-1.057) (length=36)
[WRONG] [extra] Pred 14:	b'SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = "Indiana" OR Professionals.state = "Indiana" ORDER BY Professionals.home_phone' (-1.095) (length=29)
[WRONG] [extra] Pred 15:	b'SELECT Professionals.professional_id, Professionals.last_name, Professionals.home_phone FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = "Indiana" OR Professionals.cell_number > 2' (-1.113) (length=25)
Error Case 311

ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
Parsing error: from Dogs no Dogs.owner_id not in (from Treatments where Treatments.cost_of_treatment > 1000 select Treatments.dog_id) select Dogs.name
ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
Parsing error: from Dogs not Dogs.owner_id not in (from Treatments where Treatments.cost_of_treatment > 1000 select Treatments.dog_id) select Dogs.name
Parsing error: from Dogs not Dogs.owner_id not in (from Treatments where Treatments.cost_of_treatment > 1000 select Dogs.breed_code) select Dogs.name
Parsing error: from Dogs not Dogs.dog_id not in (from Treatments where Treatments.cost_of_treatment > 1000 select Treatments.dog_id) select Dogs.name
Parsing error: from Dogs and Dogs.owner_id not in (from Treatments where Treatments.cost_of_treatment > 1000 select Dogs.breed_code) select Dogs.name
Parsing error: from Dogs select Dogs.name no from Dogs join Treatments on Dogs.dog_id = Treatments.dog_id where Treatments.cost_of_treatment > 1000 select Dogs.name
Parsing error: from Dogs and Dogs.owner_id not in (from Treatments where Treatments.cost_of_treatment > 1000 select Treatments.dog_id) select Dogs.name
Parsing error: from Dogs no Dogs.owner_id not in (from Treatments where Treatments.cost_of_treatment > 1000 select Dogs.breed_code) select Dogs.name
Example 924
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .'
NL tokens: [b'which', b'dogs', b'have', b'not', b'cost', b'their', b'owner', b'more', b'than', b'1000', b'for', b'treatment', b'?', b'list', b'the', b'dog', b'names', b'.']
NL tokens (original): [b'Which', b'dogs', b'have', b'not', b'cost', b'their', b'owner', b'more', b'than', b'1000', b'for', b'treatment', b'?', b'List', b'the', b'dog', b'names', b'.']
['[CLS]', 'which', 'dogs', 'have', 'not', 'cost', 'their', 'owner', 'more', 'than', '1000', 'for', 'treatment', '?', 'list', 'the', 'dog', 'names', '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )'
Target TF-P tokens: from Dogs where Dogs.dog_id not in (from Treatments group by Treatments.dog_id having sum (Treatments.cost_of_treatment) > 1000 select Treatments.dog_id) select Dogs.name

[WRONG] [hard] Pred 0:	b'SELECT Dogs.name FROM Dogs EXCEPT SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.cost_of_treatment > 1000' (-0.000) (length=20)
[WRONG] [hard] Pred 1:	b'SELECT Dogs.name FROM Dogs EXCEPT SELECT DISTINCT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.cost_of_treatment > 1000' (-2.905) (length=21)
[WRONG] [hard] Pred 2:	b'SELECT Dogs.name FROM Dogs EXCEPT SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.owner_id = Treatments.dog_id WHERE Treatments.cost_of_treatment > 1000' (-3.162) (length=20)
[WRONG] [hard] Pred 3:	b'SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.cost_of_treatment > 1000' (-3.186) (length=15)
[WRONG] [hard] Pred 4:	b'SELECT Dogs.name FROM Dogs WHERE Dogs.owner_id NOT IN (SELECT Treatments.dog_id FROM Treatments WHERE Treatments.cost_of_treatment > 1000)' (-3.189) (length=19)
[WRONG] [hard] Pred 5:	b'SELECT Dogs.name FROM Dogs EXCEPT SELECT Dogs.name FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id WHERE Treatments.cost_of_treatment > 1000' (-3.563) (length=20)
Error Case 312

ERROR: table "Dogs" in field expression Dogs.age is not in the current scope
ERROR: table "Dogs" in field expression Dogs.age is not in the current scope
ERROR: Join condition does not match with table: ['Owners', {'join': 'Treatments', 'on': {'eq': ['Dogs.dog_id', 'Treatments.dog_id']}}]
Parsing error: from Dogs join Treatments on Dogs.dog_id = Treatments.dog_id except where Dogs.owner_id not in (from Owners join Treatments on Owners.owner_id = Treatments.dog_id where Treatments.cost_of_treatment > 1000 select Owners.owner_id) select Dogs.name
ERROR: Join condition does not match with table: ['Owners', {'join': 'Treatments', 'on': {'eq': ['Dogs.dog_id', 'Treatments.dog_id']}}]
ERROR: table "Treatments" in field expression Treatments.cost_of_treatment is not in the current scope
ERROR: table "Dogs" in field expression Dogs.age is not in the current scope
ERROR: table "Dogs" in field expression Dogs.dog_id is not in the current scope
Example 925
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?'
NL tokens: [b'what', b'are', b'the', b'names', b'of', b'the', b'dogs', b'for', b'which', b'the', b'owner', b'has', b'not', b'spend', b'more', b'than', b'1000', b'for', b'treatment', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'of', b'the', b'dogs', b'for', b'which', b'the', b'owner', b'has', b'not', b'spend', b'more', b'than', b'1000', b'for', b'treatment', b'?']
['[CLS]', 'what', 'are', 'the', 'names', 'of', 'the', 'dogs', 'for', 'which', 'the', 'owner', 'has', 'not', 'spend', 'more', 'than', '1000', 'for', 'treatment', '?', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )'
Target TF-P tokens: from Dogs where Dogs.dog_id not in (from Treatments group by Treatments.dog_id having sum (Treatments.cost_of_treatment) > 1000 select Treatments.dog_id) select Dogs.name

[WRONG] [hard] Pred 0:	b'SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.owner_id NOT IN (SELECT Owners.owner_id FROM Owners JOIN Treatments ON Owners.owner_id = Treatments.dog_id WHERE Treatments.cost_of_treatment > 1000)' (-0.036) (length=31)
[WRONG] [hard] Pred 1:	b'SELECT Dogs.name FROM Dogs WHERE Dogs.owner_id NOT IN (SELECT Owners.owner_id FROM Owners JOIN Treatments ON Owners.owner_id = Treatments.dog_id WHERE Treatments.cost_of_treatment > 1000)' (-0.704) (length=25)
[WRONG] [hard] Pred 2:	b'SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.age != 1000' (-0.863) (length=15)
[WRONG] [hard] Pred 3:	b'SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.owner_id IN (SELECT Owners.owner_id FROM Owners JOIN Treatments ON Owners.owner_id = Treatments.dog_id WHERE Treatments.cost_of_treatment > 1000)' (-0.973) (length=30)
[WRONG] [hard] Pred 4:	b'SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.owner_id IS NULL EXCEPT SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.age > 1000' (-1.118) (length=30)
[WRONG] [hard] Pred 5:	b'SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.age < 1000' (-1.168) (length=15)
[WRONG] [hard] Pred 6:	b'SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.owner_id != 1000' (-1.227) (length=15)
[WRONG] [hard] Pred 7:	b'SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.age IS NULL INTERSECT SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.age > 1000' (-1.267) (length=30)
Error Case 313

ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Dogs.breed_code', 'Professionals.professional_id']}}]
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Dogs.breed_code', 'Professionals.professional_id']}}]
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Dogs.breed_code', 'Professionals.professional_id']}}]
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Dogs.breed_code', 'Professionals.professional_id']}}]
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Dogs.breed_code', 'Professionals.professional_id']}}]
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Dogs.breed_code', 'Professionals.professional_id']}}]
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Dogs.breed_code', 'Professionals.professional_id']}}]
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Dogs.breed_code', 'Professionals.professional_id']}}]
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Dogs.breed_code', 'Dogs.dog_id']}}]
Example 926
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'Which first names are used for professionals or owners but are not used as dog names?'
NL tokens: [b'which', b'first', b'names', b'are', b'used', b'for', b'professionals', b'or', b'owners', b'but', b'are', b'not', b'used', b'as', b'dog', b'names', b'?']
NL tokens (original): [b'Which', b'first', b'names', b'are', b'used', b'for', b'professionals', b'or', b'owners', b'but', b'are', b'not', b'used', b'as', b'dog', b'names', b'?']
['[CLS]', 'which', 'first', 'names', 'are', 'used', 'for', 'professionals', 'or', 'owners', 'but', 'are', 'not', 'used', 'as', 'dog', 'names', '?', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs'
Target TF-P tokens: from Professionals select Professionals.first_name union from Owners select Owners.first_name except from Dogs select Dogs.name

[WRONG] [hard] Pred 0:	b'SELECT Professionals.first_name FROM Professionals UNION SELECT Professionals.first_name FROM Professionals JOIN Dogs ON Professionals.professional_id = Dogs.owner_id' (-1.162) (length=16)
[WRONG] [hard] Pred 1:	b'SELECT Professionals.first_name FROM Professionals UNION SELECT Professionals.first_name FROM Owners JOIN Professionals ON Owners.first_name = Professionals.professional_id' (-1.557) (length=16)
[WRONG] [hard] Pred 2:	b'SELECT Professionals.first_name FROM Professionals UNION SELECT Owners.first_name FROM Owners JOIN Professionals ON Owners.first_name = Professionals.professional_id' (-2.109) (length=16)
[WRONG] [hard] Pred 3:	b'SELECT Professionals.first_name FROM Professionals WHERE Professionals.role_code IS NOT NULL UNION SELECT Professionals.first_name FROM Professionals JOIN Dogs ON Professionals.professional_id = Dogs.owner_id' (-2.248) (length=21)
[WRONG] [hard] Pred 4:	b'SELECT Professionals.first_name FROM Professionals UNION SELECT Dogs.name FROM Dogs' (-2.249) (length=10)
[WRONG] [hard] Pred 5:	b'SELECT Professionals.first_name FROM Professionals UNION SELECT Owners.first_name FROM Owners' (-2.356) (length=10)
[WRONG] [hard] Pred 6:	b'SELECT Professionals.first_name FROM Professionals UNION SELECT Dogs.name FROM Professionals JOIN Dogs ON Professionals.professional_id = Dogs.owner_id' (-2.769) (length=16)
Error Case 314

ERROR: table "Professionals" in field expression Professionals.role_code is not in the current scope
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Dogs.breed_code', 'Professionals.professional_id']}}]
ERROR: table "Professionals" in field expression Professionals.role_code is not in the current scope
ERROR: Join condition does not match with table: ['Professionals', {'join': 'Dogs', 'on': {'eq': ['Professionals.role_code', 'Professionals.professional_id']}}]
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Dogs.breed_code', 'Professionals.professional_id']}}]
ERROR: Join condition does not match with table: ['Professionals', {'join': 'Owners', 'on': {'eq': ['Professionals.role_code', 'Professionals.professional_id']}}]
ERROR: Join condition does not match with table: ['Professionals', {'join': 'Dogs', 'on': {'eq': ['Professionals.role_code', 'Professionals.professional_id']}}]
ERROR: table "Professionals" in field expression Professionals.role_code is not in the current scope
 89%|████████▉ | 116/130 [16:06<03:02, 13.04s/it]ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Dogs.breed_code', 'Professionals.professional_id']}}]
ERROR: table "Professionals" in field expression Professionals.first_name is not in the current scope
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Dogs.breed_code', 'Professionals.professional_id']}}]
Example 927
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'Find the first names that are used for professionals or owners but are not used as dog names.'
NL tokens: [b'find', b'the', b'first', b'names', b'that', b'are', b'used', b'for', b'professionals', b'or', b'owners', b'but', b'are', b'not', b'used', b'as', b'dog', b'names', b'.']
NL tokens (original): [b'Find', b'the', b'first', b'names', b'that', b'are', b'used', b'for', b'professionals', b'or', b'owners', b'but', b'are', b'not', b'used', b'as', b'dog', b'names', b'.']
['[CLS]', 'find', 'the', 'first', 'names', 'that', 'are', 'used', 'for', 'professionals', 'or', 'owners', 'but', 'are', 'not', 'used', 'as', 'dog', 'names', '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs'
Target TF-P tokens: from Professionals select Professionals.first_name union from Owners select Owners.first_name except from Dogs select Dogs.name

[WRONG] [hard] Pred 0:	b'SELECT Professionals.first_name FROM Professionals UNION SELECT Owners.first_name FROM Owners' (-0.267) (length=10)
[WRONG] [hard] Pred 1:	b'SELECT Professionals.first_name FROM Professionals UNION SELECT Professionals.first_name FROM Professionals JOIN Dogs ON Professionals.professional_id = Dogs.owner_id' (-0.610) (length=16)
[WRONG] [hard] Pred 2:	b'SELECT Professionals.first_name FROM Professionals UNION SELECT Professionals.first_name FROM Professionals JOIN Dogs ON Dogs.breed_code = Professionals.professional_id WHERE Professionals.role_code = "dog VALUE"' (-1.680) (length=23)
[WRONG] [hard] Pred 3:	b'SELECT Professionals.first_name FROM Professionals UNION SELECT Professionals.first_name FROM Professionals WHERE Professionals.role_code = "dog"' (-1.763) (length=16)
[WRONG] [hard] Pred 4:	b'SELECT Professionals.first_name FROM Professionals UNION SELECT Dogs.name FROM Professionals JOIN Dogs ON Professionals.professional_id = Dogs.owner_id' (-2.378) (length=16)
Error Case 315

Example 928
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b"Which professional did not operate any treatment on dogs? List the professional's id, role and email."
NL tokens: [b'which', b'professional', b'did', b'not', b'operate', b'any', b'treatment', b'on', b'dogs', b'?', b'list', b'the', b'professional', b"'", b's', b'id', b',', b'role', b'and', b'email', b'.']
NL tokens (original): [b'Which', b'professional', b'did', b'not', b'operate', b'any', b'treatment', b'on', b'dogs', b'?', b'List', b'the', b'professional', b"'", b's', b'id', b',', b'role', b'and', b'email', b'.']
['[CLS]', 'which', 'professional', 'did', 'not', 'operate', 'any', 'treatment', 'on', 'dogs', '?', 'list', 'the', 'professional', "'", 's', 'id', ',', 'role', 'and', 'email', '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id'
Target TF-P tokens: from Professionals select Professionals.professional_id , Professionals.role_code , Professionals.email_address except from Professionals join Treatments on Professionals.professional_id = Treatments.professional_id select Professionals.professional_id , Professionals.role_code , Professionals.email_address

[WRONG] [extra] Pred 0:	b'SELECT Professionals.professional_id, Professionals.role_code, Professionals.email_address FROM Professionals' (-0.012) (length=9)
[CORRE] [extra] Pred 1:	b'SELECT Professionals.professional_id, Professionals.role_code, Professionals.email_address FROM Professionals EXCEPT SELECT Professionals.professional_id, Professionals.role_code, Professionals.email_address FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id' (-0.685) (length=24)
Error Case 316

Example 934
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'What is the name of the breed with the most dogs?'
NL tokens: [b'what', b'is', b'the', b'name', b'of', b'the', b'breed', b'with', b'the', b'most', b'dogs', b'?']
NL tokens (original): [b'What', b'is', b'the', b'name', b'of', b'the', b'breed', b'with', b'the', b'most', b'dogs', b'?']
['[CLS]', 'what', 'is', 'the', 'name', 'of', 'the', 'breed', 'with', 'the', 'most', 'dogs', '?', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from Breeds join Dogs on Breeds.breed_code = Dogs.breed_code group by Breeds.breed_name select Breeds.breed_name order by count (*) desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT Breeds.breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Dogs.breed_code ORDER BY COUNT(*) DESC LIMIT 1' (-0.002) (length=21)
[WRONG] [extra] Pred 1:	b'SELECT Breeds.breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Breeds.breed_code ORDER BY COUNT(*) DESC LIMIT 1' (-1.043) (length=21)
[WRONG] [extra] Pred 2:	b'SELECT Breeds.breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Dogs.dog_id ORDER BY COUNT(*) DESC LIMIT 1' (-1.869) (length=21)
[CORRE] [extra] Pred 3:	b'SELECT Breeds.breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Breeds.breed_name ORDER BY COUNT(*) DESC LIMIT 1' (-2.038) (length=21)
Error Case 317

Parsing error: from Dogs join Dogs.size_code = (from Breeds group by Dogs.breed_code select Dogs.breed_code order by count (*) desc limit 1) select Breeds.breed_name
Parsing error: from Dogs join Dogs.age = (from Breeds group by Dogs.breed_code select Dogs.breed_code order by count (*) desc limit 1) select Breeds.breed_name
Parsing error: from Breeds count Dogs on Breeds.breed_code = Dogs.breed_code group by Dogs.breed_code select Breeds.breed_name order by count (*) desc limit 1
Parsing error: from Dogs join Dogs.size_code = (from Breeds group by Dogs.breed_code select Breeds.breed_name order by count (*) desc limit 1
Example 935
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'Which breed do the most dogs have? Give me the breed name.'
NL tokens: [b'which', b'breed', b'do', b'the', b'most', b'dogs', b'have', b'?', b'give', b'me', b'the', b'breed', b'name', b'.']
NL tokens (original): [b'Which', b'breed', b'do', b'the', b'most', b'dogs', b'have', b'?', b'Give', b'me', b'the', b'breed', b'name', b'.']
['[CLS]', 'which', 'breed', 'do', 'the', 'most', 'dogs', 'have', '?', 'give', 'me', 'the', 'breed', 'name', '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1'
 90%|█████████ | 117/130 [16:10<02:14, 10.33s/it]Target TF-P tokens: from Breeds join Dogs on Breeds.breed_code = Dogs.breed_code group by Breeds.breed_name select Breeds.breed_name order by count (*) desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT Breeds.breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Dogs.breed_code ORDER BY COUNT(*) DESC LIMIT 1' (-0.029) (length=21)
[WRONG] [extra] Pred 1:	b'SELECT Breeds.breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Breeds.breed_code ORDER BY COUNT(*) DESC LIMIT 1' (-0.663) (length=21)
[WRONG] [extra] Pred 2:	b'SELECT Breeds.breed_name FROM Breeds GROUP BY Breeds.breed_name ORDER BY COUNT(*) DESC LIMIT 1' (-0.848) (length=15)
[WRONG] [extra] Pred 3:	b'SELECT Breeds.breed_name FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code GROUP BY Dogs.breed_code ORDER BY COUNT(*) DESC LIMIT 1' (-2.184) (length=21)
[WRONG] [extra] Pred 4:	b'SELECT Breeds.breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Dogs.name ORDER BY COUNT(*) DESC LIMIT 1' (-2.855) (length=21)
[WRONG] [extra] Pred 5:	b'SELECT Breeds.breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Dogs.dog_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.980) (length=21)
[WRONG] [extra] Pred 6:	b'SELECT Breeds.breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY "Professionals" ORDER BY COUNT(*) DESC LIMIT 1' (-3.071) (length=21)
[WRONG] [extra] Pred 7:	b'SELECT Breeds.breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY "Which" ORDER BY COUNT(*) DESC LIMIT 1' (-3.201) (length=21)
[WRONG] [extra] Pred 8:	b'SELECT Breeds.breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY "Breeds" ORDER BY COUNT(*) DESC LIMIT 1' (-3.204) (length=21)
[WRONG] [extra] Pred 9:	b'SELECT Breeds.breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY "Sizes" ORDER BY COUNT(*) DESC LIMIT 1' (-3.248) (length=21)
[WRONG] [extra] Pred 10:	b'SELECT Breeds.breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY "dogs" ORDER BY COUNT(*) DESC LIMIT 1' (-3.329) (length=21)
[WRONG] [extra] Pred 11:	b'SELECT Breeds.breed_name FROM Breeds GROUP BY Breeds.breed_code ORDER BY COUNT(*) DESC LIMIT 1' (-3.442) (length=15)
Error Case 318

'on'
ERROR: table "Owners" in field expression Owners.owner_id is not in the current scope
ERROR: table "Owners" in field expression Owners.owner_id is not in the current scope
'on'
Example 936
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.'
NL tokens: [b'which', b'owner', b'has', b'paid', b'for', b'the', b'most', b'treatments', b'on', b'his', b'or', b'her', b'dogs', b'?', b'list', b'the', b'owner', b'id', b'and', b'last', b'name', b'.']
NL tokens (original): [b'Which', b'owner', b'has', b'paid', b'for', b'the', b'most', b'treatments', b'on', b'his', b'or', b'her', b'dogs', b'?', b'List', b'the', b'owner', b'id', b'and', b'last', b'name', b'.']
['[CLS]', 'which', 'owner', 'has', 'paid', 'for', 'the', 'most', 'treatments', 'on', 'his', 'or', 'her', 'dogs', '?', 'list', 'the', 'owner', 'id', 'and', 'last', 'name', '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from Owners join Dogs on Owners.owner_id = Dogs.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id group by Owners.owner_id select Owners.owner_id , Owners.last_name order by count (*) desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Treatments ON Owners.owner_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY COUNT(*) DESC LIMIT 1' (-0.283) (length=23)
[WRONG] [extra] Pred 1:	b'SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Treatments ON Owners.owner_id = Treatments.dog_id GROUP BY Owners.owner_id UNION SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Treatments ON Owners.owner_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.410) (length=38)
[WRONG] [extra] Pred 2:	b'SELECT Owners.owner_id, Owners.last_name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Treatments ON Dogs.breed_code = Treatments.treatment_id JOIN Owners ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.613) (length=35)
[CORRE] [extra] Pred 3:	b'SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY COUNT(*) DESC LIMIT 1' (-3.035) (length=29)
Error Case 319

ERROR: table "Owners" in field expression Owners.owner_id is not in the current scope
'on'
ERROR: table "Owners" in field expression Owners.owner_id is not in the current scope
ERROR: table "Owners" in field expression Owners.owner_id is not in the current scope
ERROR: table "Owners" in field expression Owners.owner_id is not in the current scope
Parsing error: from Owners join Treatments on Owners.owner_id = Treatments.dog_id group by Owners.owner_id having count (*) desc limit 1 select Owners.owner_id , Owners.last_name order by Owners.owner_id desc limit 1
Parsing error: from Owners join Treatments on Owners.owner_id = Treatments.dog_id group by Owners.owner_id having count (*) desc limit 1 select Owners.owner_id , Owners.last_name order by Treatments.date_of_treatment desc limit 1
ERROR: table "Owners" in field expression Owners.owner_id is not in the current scope
ERROR: table "Owners" in field expression Owners.owner_id is not in the current scope
'on'
Parsing error: from Owners join Treatments on Owners.owner_id = Treatments.dog_id group by Owners.owner_id having count (*) desc limit 1 select Owners.owner_id , Owners.last_name
Example 937
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.'
NL tokens: [b'tell', b'me', b'the', b'owner', b'id', b'and', b'last', b'name', b'of', b'the', b'owner', b'who', b'spent', b'the', b'most', b'on', b'treatments', b'of', b'his', b'or', b'her', b'dogs', b'.']
NL tokens (original): [b'Tell', b'me', b'the', b'owner', b'id', b'and', b'last', b'name', b'of', b'the', b'owner', b'who', b'spent', b'the', b'most', b'on', b'treatments', b'of', b'his', b'or', b'her', b'dogs', b'.']
['[CLS]', 'tell', 'me', 'the', 'owner', 'id', 'and', 'last', 'name', 'of', 'the', 'owner', 'who', 'spent', 'the', 'most', 'on', 'treatments', 'of', 'his', 'or', 'her', 'dogs', '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1'
Target TF-P tokens: from Owners join Dogs on Owners.owner_id = Dogs.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id group by Owners.owner_id select Owners.owner_id , Owners.last_name order by count (*) desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Treatments ON Owners.owner_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY COUNT(*) DESC LIMIT 1' (-0.008) (length=23)
[WRONG] [extra] Pred 1:	b'SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.324) (length=23)
[WRONG] [extra] Pred 2:	b'SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Treatments ON Owners.owner_id = Treatments.dog_id GROUP BY Owners.owner_id HAVING COUNT(*) >= 1 ORDER BY COUNT(*) DESC LIMIT 1' (-2.602) (length=30)
[WRONG] [extra] Pred 3:	b'SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Treatments ON Owners.owner_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY SUM(Treatments.date_of_treatment) DESC LIMIT 1' (-2.982) (length=23)
[WRONG] [extra] Pred 4:	b'SELECT Owners.owner_id, Owners.last_name, COUNT(*) FROM Owners JOIN Treatments ON Owners.owner_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY COUNT(*) DESC LIMIT 1' (-3.077) (length=28)
Error Case 320

ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Owners.owner_id', 'Dogs.owner_id']}}, {'join': 'Charges', 'on': {'eq': ['Dogs.dog_id', 'Dogs.breed_code']}}]
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Owners.owner_id', 'Dogs.owner_id']}}, {'join': 'Charges', 'on': {'eq': ['Dogs.dog_id', 'Dogs.size_code']}}]
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Owners.owner_id', 'Dogs.owner_id']}}, {'join': 'Charges', 'on': {'eq': ['Dogs.dog_id', 'Dogs.owner_id']}}]
ERROR: table "Owners" in field expression Owners.owner_id is not in the current scope
ERROR: table "Owners" in field expression Owners.owner_id is not in the current scope
ERROR: table "Dogs" in field expression Dogs.owner_id is not in the current scope
ERROR: table "Dogs" in field expression Dogs.owner_id is not in the current scope
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Owners.owner_id', 'Dogs.owner_id']}}, {'join': 'Charges', 'on': {'eq': ['Dogs.dog_id', 'Dogs.breed_code']}}]
Parsing error: from Owners join Dogs on Owners.owner_id = Dogs.owner_id join Charges on Dogs.dog_id = Dogs.breed_code group by Owners.owner_id select Owners.owner_id , Owners.zip_code order by sum (Charges.charge_amount) desc limit 1 : 1
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Owners.owner_id', 'Dogs.owner_id']}}, {'join': 'Charges', 'on': {'eq': ['Dogs.dog_id', 'Dogs.breed_code']}}]
Parsing error: from Owners join Dogs on Owners.owner_id = Dogs.owner_id join Charges on Dogs.dog_id = Dogs.breed_code group by Owners.owner_id select Owners.owner_id , Owners.zip_code order by sum (Charges.charge_amount) desc desc limit 1
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Owners.owner_id', 'Dogs.owner_id']}}, {'join': 'Charges', 'on': {'eq': ['Dogs.dog_id', 'Dogs.breed_code']}}]
Parsing error: from Owners join Dogs on Owners.owner_id = Dogs.owner_id join Charges on Dogs.dog_id = Dogs.breed_code group by Owners.owner_id select Owners.owner_id , Owners.zip_code order by sum (Charges.charge_amount) desc limit 1 , Owners.zip_code
Parsing error: from Owners join Dogs on Owners.owner_id = Dogs.owner_id join Charges on Dogs.dog_id = Dogs.breed_code group by Owners.owner_id select Owners.owner_id , Owners.zip_code order by sum (Charges.charge_amount) desc 1
ERROR: table "Owners" in field expression Owners.owner_id is not in the current scope
Parsing error: from Owners join Dogs on Owners.owner_id = Dogs.owner_id where Dogs.date_arrived = (from Dogs group by Owners.owner_id select Dogs.owner_id order by sum (*) desc limit 1) select Owners.owner_id , Owners.zip_code order by Owners.zip_code desc sum 1
Example 940
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.'
NL tokens: [b'which', b'owner', b'has', b'paid', b'the', b'largest', b'amount', b'of', b'money', b'in', b'total', b'for', b'their', b'dogs', b'?', b'show', b'the', b'owner', b'id', b'and', b'zip', b'code', b'.']
NL tokens (original): [b'Which', b'owner', b'has', b'paid', b'the', b'largest', b'amount', b'of', b'money', b'in', b'total', b'for', b'their', b'dogs', b'?', b'Show', b'the', b'owner', b'id', b'and', b'zip', b'code', b'.']
['[CLS]', 'which', 'owner', 'has', 'paid', 'the', 'largest', 'amount', 'of', 'money', 'in', 'total', 'for', 'their', 'dogs', '?', 'show', 'the', 'owner', 'id', 'and', 'zip', 'code', '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1'
Target TF-P tokens: from Owners join Dogs on Owners.owner_id = Dogs.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id group by Owners.owner_id select Owners.owner_id , Owners.zip_code order by sum (Treatments.cost_of_treatment) desc limit 1

[WRONG] extra Pred 0:	No valid output! (0.000)
Error Case 321

ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Owners.owner_id', 'Dogs.owner_id']}}, {'join': 'Charges', 'on': {'eq': ['Dogs.dog_id', 'Dogs.breed_code']}}]
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Owners.owner_id', 'Dogs.owner_id']}}, {'join': 'Charges', 'on': {'eq': ['Dogs.dog_id', 'Dogs.size_code']}}]
 91%|█████████ | 118/130 [16:25<02:17, 11.48s/it]Parsing error: from Owners join Dogs on Owners.owner_id = Dogs.owner_id group by Owners.owner_id select Owners.owner_id , Owners.zip_code order by 4 sum (Dogs.owner_id) desc limit 1
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Owners.owner_id', 'Dogs.owner_id']}}, {'join': 'Sizes', 'on': {'eq': ['Dogs.dog_id', 'Dogs.breed_code']}}]
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Owners.owner_id', 'Dogs.owner_id']}}, {'join': 'Sizes', 'on': {'eq': ['Dogs.dog_id', 'Dogs.size_code']}}]
ERROR: Join condition does not match with table: ['Owners', {'join': 'Dogs', 'on': {'eq': ['Owners.owner_id', 'Dogs.owner_id']}}, {'join': 'Sizes', 'on': {'eq': ['Dogs.dog_id', 'Dogs.breed_code']}}]
Example 941
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.'
NL tokens: [b'find', b'the', b'owner', b'id', b'and', b'zip', b'code', b'of', b'the', b'owner', b'who', b'spent', b'the', b'most', b'money', b'in', b'total', b'for', b'his', b'or', b'her', b'dogs', b'.']
NL tokens (original): [b'Find', b'the', b'owner', b'id', b'and', b'zip', b'code', b'of', b'the', b'owner', b'who', b'spent', b'the', b'most', b'money', b'in', b'total', b'for', b'his', b'or', b'her', b'dogs', b'.']
['[CLS]', 'find', 'the', 'owner', 'id', 'and', 'zip', 'code', 'of', 'the', 'owner', 'who', 'spent', 'the', 'most', 'money', 'in', 'total', 'for', 'his', 'or', 'her', 'dogs', '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1'
Target TF-P tokens: from Owners join Dogs on Owners.owner_id = Dogs.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id group by Owners.owner_id select Owners.owner_id , Owners.zip_code order by sum (Treatments.cost_of_treatment) desc limit 1

[WRONG] [extra] Pred 0:	b'SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY SUM(Dogs.date_arrived) DESC LIMIT 1' (-2.151) (length=23)
[WRONG] [extra] Pred 1:	b'SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY COUNT(*) DESC LIMIT 1' (-2.266) (length=23)
[WRONG] [extra] Pred 2:	b'SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY SUM(Dogs.date_departed) DESC LIMIT 1' (-2.288) (length=23)
[WRONG] [extra] Pred 3:	b'SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY SUM(Dogs.date_adopted) DESC LIMIT 1' (-2.463) (length=23)
[WRONG] [extra] Pred 4:	b'SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY SUM(*) DESC LIMIT 1' (-2.735) (length=23)
[WRONG] [extra] Pred 5:	b'SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY SUM(Dogs.owner_id) DESC LIMIT 1' (-2.790) (length=23)
[WRONG] [extra] Pred 6:	b'SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY 4 DESC LIMIT 1' (-3.483) (length=20)
[WRONG] [extra] Pred 7:	b'SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY SUM(Dogs.date_of_birth) DESC LIMIT 1' (-3.689) (length=23)
[WRONG] [extra] Pred 8:	b'SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY SUM(Dogs.weight) DESC LIMIT 1' (-3.764) (length=23)
[WRONG] [extra] Pred 9:	b'SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY 10 DESC LIMIT 1' (-3.983) (length=20)
Error Case 322

Example 951
 92%|█████████▏| 119/130 [16:25<01:31,  8.29s/it]dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b"What are each owner's first name, last name, and the size of their dog?"
NL tokens: [b'what', b'are', b'each', b'owner', b"'", b's', b'first', b'name', b',', b'last', b'name', b',', b'and', b'the', b'size', b'of', b'their', b'dog', b'?']
NL tokens (original): [b'What', b'are', b'each', b'owner', b"'", b's', b'first', b'name', b',', b'last', b'name', b',', b'and', b'the', b'size', b'of', b'their', b'dog', b'?']
['[CLS]', 'what', 'are', 'each', 'owner', "'", 's', 'first', 'name', ',', 'last', 'name', ',', 'and', 'the', 'size', 'of', 'their', 'dog', '?', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id'
Target TF-P tokens: from Owners join Dogs on Owners.owner_id = Dogs.owner_id select Owners.first_name , Owners.last_name , Dogs.size_code

[WRONG] [medium] Pred 0:	b'SELECT Owners.first_name, Owners.last_name, MAX(Dogs.size_code) FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id' (-1.369) (length=20)
[CORRE] [medium] Pred 1:	b'SELECT Owners.first_name, Owners.last_name, Dogs.size_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id' (-1.978) (length=15)
Error Case 323

ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
Parsing error: from Dogs join Treatments on Dogs.dog_id = Treatments.dog_id where Dogs.breed_code = (from Breeds join Treatments on Breeds.breed_code = Treatments.dog_id group by Breeds.breed_code select Dogs.breed_code order by limit (*) asc limit 1) select Dogs.name , Treatments.date_of_treatment
Parsing error: from Dogs join Treatments on Dogs.dog_id = Treatments.dog_id where Dogs.breed_code = (from Breeds join Treatments on Breeds.breed_code = Treatments.dog_id group by Breeds.breed_code select Dogs.breed_code order by limit (*) limit 1) select Dogs.name , Treatments.date_of_treatment
ERROR: table "Treatments" in field expression Treatments.date_of_treatment is not in the current scope
ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
Parsing error: from Dogs join Treatments on Dogs.dog_id = Treatments.dog_id where Dogs.breed_code = (from Breeds join Treatments on Breeds.breed_code = Treatments.dog_id group by Breeds.breed_code select Dogs.breed_code order by count (*) < 1 select Dogs.name , Treatments.date_of_treatment
ERROR: table "Treatments" in field expression Treatments.date_of_treatment is not in the current scope
ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
Example 954
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'List the names of the dogs of the rarest breed and the treatment dates of them.'
NL tokens: [b'list', b'the', b'names', b'of', b'the', b'dogs', b'of', b'the', b'rare', b'##st', b'breed', b'and', b'the', b'treatment', b'dates', b'of', b'them', b'.']
NL tokens (original): [b'List', b'the', b'names', b'of', b'the', b'dogs', b'of', b'the', b'rare', b'##st', b'breed', b'and', b'the', b'treatment', b'dates', b'of', b'them', b'.']
['[CLS]', 'list', 'the', 'names', 'of', 'the', 'dogs', 'of', 'the', 'rare', '##st', 'breed', 'and', 'the', 'treatment', 'dates', 'of', 'them', '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )'
Target TF-P tokens: from Dogs join Treatments on Dogs.dog_id = Treatments.dog_id where Dogs.breed_code = (from Dogs group by Dogs.breed_code select Dogs.breed_code order by count (*) asc limit 1) select Dogs.name , Treatments.date_of_treatment

[WRONG] [extra] Pred 0:	b'SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.breed_code ORDER BY COUNT(*) ASC LIMIT 1' (-0.118) (length=23)
[WRONG] [extra] Pred 1:	b'SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.breed_code ORDER BY COUNT(*) LIMIT 1' (-1.111) (length=22)
[WRONG] [extra] Pred 2:	b'SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.breed_code ORDER BY Dogs.breed_code LIMIT 1' (-1.712) (length=19)
[WRONG] [extra] Pred 3:	b'SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.breed_code ORDER BY COUNT(*) DESC LIMIT 1' (-1.818) (length=23)
[WRONG] [extra] Pred 4:	b'SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Treatments ON Dogs.breed_code = Treatments.treatment_id GROUP BY Dogs.breed_code ORDER BY COUNT(*) ASC LIMIT 1' (-1.935) (length=29)
Error Case 324

ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
Parsing error: from Dogs + Dogs.breed_code = (from Breeds join Treatments on Breeds.breed_code = Treatments.dog_id group by Dogs.breed_code select Dogs.breed_code order by count (*) asc limit 1) select Dogs.name , Treatments.date_of_treatment union from Breeds join Treatments on Breeds.breed_code = Treatments.dog_id group by Dogs.breed_code select Dogs.name , Treatments.date_of_treatment order by count (*) asc limit 1
ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
ERROR: table "Dogs" in field expression Dogs.breed_code is not in the current scope
Example 955
 92%|█████████▏| 120/130 [16:42<01:47, 10.71s/it]dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'Which dogs are of the rarest breed? Show their names and treatment dates.'
NL tokens: [b'which', b'dogs', b'are', b'of', b'the', b'rare', b'##st', b'breed', b'?', b'show', b'their', b'names', b'and', b'treatment', b'dates', b'.']
NL tokens (original): [b'Which', b'dogs', b'are', b'of', b'the', b'rare', b'##st', b'breed', b'?', b'Show', b'their', b'names', b'and', b'treatment', b'dates', b'.']
['[CLS]', 'which', 'dogs', 'are', 'of', 'the', 'rare', '##st', 'breed', '?', 'show', 'their', 'names', 'and', 'treatment', 'dates', '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )'
Target TF-P tokens: from Dogs join Treatments on Dogs.dog_id = Treatments.dog_id where Dogs.breed_code = (from Dogs group by Dogs.breed_code select Dogs.breed_code order by count (*) asc limit 1) select Dogs.name , Treatments.date_of_treatment

[WRONG] [extra] Pred 0:	b'SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.breed_code ORDER BY COUNT(*) ASC LIMIT 1' (-0.887) (length=23)
Error Case 325

Parsing error: from Owners join Dogs select Owners.owner_id = Dogs.owner_id select Owners.last_name order by Dogs.age desc limit 1
Example 960
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'List the last name of the owner owning the youngest dog.'
NL tokens: [b'list', b'the', b'last', b'name', b'of', b'the', b'owner', b'owning', b'the', b'youngest', b'dog', b'.']
NL tokens (original): [b'List', b'the', b'last', b'name', b'of', b'the', b'owner', b'owning', b'the', b'youngest', b'dog', b'.']
['[CLS]', 'list', 'the', 'last', 'name', 'of', 'the', 'owner', 'owning', 'the', 'youngest', 'dog', '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )'
Target TF-P tokens: from Owners join Dogs on Owners.owner_id = Dogs.owner_id where Dogs.age = (from Dogs select max (Dogs.age)) select Owners.last_name

[WRONG] [extra] Pred 0:	b'SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.age DESC LIMIT 1' (-0.044) (length=16)
[WRONG] [extra] Pred 1:	b'SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.date_of_birth DESC LIMIT 1' (-0.507) (length=16)
[WRONG] [extra] Pred 2:	b'SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.age = (SELECT MAX(Dogs.age) FROM Dogs) ORDER BY Dogs.age DESC LIMIT 1' (-2.194) (length=28)
[WRONG] [extra] Pred 3:	b'SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.age = (SELECT MAX(Dogs.age) FROM Dogs) ORDER BY Dogs.date_of_birth DESC LIMIT 1' (-2.740) (length=28)
[WRONG] [extra] Pred 4:	b'SELECT Owners.last_name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id ORDER BY Dogs.age DESC LIMIT 1' (-2.856) (length=16)
[WRONG] [extra] Pred 5:	b'SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Dogs.owner_id ORDER BY MAX(Dogs.date_of_birth) DESC LIMIT 1' (-3.112) (length=21)
[WRONG] [extra] Pred 6:	b'SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Dogs.owner_id ORDER BY MAX(Dogs.age) DESC LIMIT 1' (-3.420) (length=21)
[WRONG] [extra] Pred 7:	b'SELECT Owners.last_name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id ORDER BY Dogs.date_of_birth DESC LIMIT 1' (-3.558) (length=16)
[CORRE] [extra] Pred 8:	b'SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.age = (SELECT MAX(Dogs.age) FROM Dogs)' (-4.020) (length=23)
Error Case 326

Example 961
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'Who owns the youngest dog? Give me his or her last name.'
NL tokens: [b'who', b'owns', b'the', b'youngest', b'dog', b'?', b'give', b'me', b'his', b'or', b'her', b'last', b'name', b'.']
NL tokens (original): [b'Who', b'owns', b'the', b'youngest', b'dog', b'?', b'Give', b'me', b'his', b'or', b'her', b'last', b'name', b'.']
['[CLS]', 'who', 'owns', 'the', 'youngest', 'dog', '?', 'give', 'me', 'his', 'or', 'her', 'last', 'name', '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
 93%|█████████▎| 121/130 [16:44<01:14,  8.33s/it]Target 0: b'SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )'
Target TF-P tokens: from Owners join Dogs on Owners.owner_id = Dogs.owner_id where Dogs.age = (from Dogs select max (Dogs.age)) select Owners.last_name

[WRONG] [extra] Pred 0:	b'SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.age DESC LIMIT 1' (-0.297) (length=16)
[WRONG] [extra] Pred 1:	b'SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.date_of_birth DESC LIMIT 1' (-0.431) (length=16)
[WRONG] [extra] Pred 2:	b'SELECT Owners.last_name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id ORDER BY Dogs.age DESC LIMIT 1' (-0.554) (length=16)
[WRONG] [extra] Pred 3:	b'SELECT Owners.last_name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id ORDER BY Dogs.date_of_birth DESC LIMIT 1' (-1.021) (length=16)
[CORRE] [extra] Pred 4:	b'SELECT Owners.last_name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id WHERE Dogs.age = (SELECT MAX(Dogs.age) FROM Dogs)' (-2.144) (length=23)
Error Case 327

Parsing error: from Dogs join Treatments on Dogs.dog_id = Treatments.dog_id and Professionals on Treatments.professional_id = Professionals.professional_id select count (*)
Parsing error: from Dogs join Treatments on Dogs.dog_id = Treatments.dog_id and Professionals on Dogs.owner_id = Professionals.professional_id select count (*)
Parsing error: from Dogs join Treatments on Dogs.dog_id = Treatments.dog_id : Professionals on Treatments.professional_id = Professionals.professional_id select count (*)
Parsing error: from Dogs join Treatments on Dogs.dog_id = Treatments.dog_id select distinct Treatments.professional_id) select count (*)
ERROR: Join condition does not match with table: ['Dogs', {'join': 'Treatments', 'on': {'eq': ['Dogs.dog_id', 'Dogs.breed_code']}}]
ERROR: Join condition does not match with table: ['Dogs', {'join': 'Treatments', 'on': {'eq': ['Dogs.dog_id', 'Dogs.breed_code']}}]
Example 968
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'How many professionals have performed any treatment to dogs?'
NL tokens: [b'how', b'many', b'professionals', b'have', b'performed', b'any', b'treatment', b'to', b'dogs', b'?']
NL tokens (original): [b'How', b'many', b'professionals', b'have', b'performed', b'any', b'treatment', b'to', b'dogs', b'?']
['[CLS]', 'how', 'many', 'professionals', 'have', 'performed', 'any', 'treatment', 'to', 'dogs', '?', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT count(DISTINCT professional_id) FROM Treatments'
Target TF-P tokens: from Treatments select count (distinct Treatments.professional_id)

[WRONG] [easy] Pred 0:	b'SELECT COUNT(*) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id' (-0.002) (length=14)
[WRONG] [easy] Pred 1:	b'SELECT COUNT(DISTINCT Treatments.professional_id) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id' (-1.426) (length=15)
[WRONG] [easy] Pred 2:	b'SELECT COUNT(DISTINCT Treatments.dog_id) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id' (-3.169) (length=15)
[WRONG] [easy] Pred 3:	b'SELECT COUNT(*) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Treatments.professional_id' (-4.062) (length=16)
[WRONG] [easy] Pred 4:	b'SELECT DISTINCT Treatments.professional_id FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id' (-4.361) (length=12)
[WRONG] [easy] Pred 5:	b'SELECT COUNT(*), Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id' (-4.483) (length=16)
[WRONG] [easy] Pred 6:	b'SELECT COUNT(*) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.professional_id' (-4.601) (length=14)
[WRONG] [easy] Pred 7:	b'SELECT COUNT(DISTINCT Dogs.name) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id' (-4.750) (length=15)
[WRONG] [easy] Pred 8:	b'SELECT COUNT(*), Treatments.professional_id FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Treatments.professional_id' (-4.940) (length=18)
[WRONG] [easy] Pred 9:	b'SELECT COUNT(*), Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Treatments.professional_id' (-4.984) (length=18)
Error Case 328

ERROR: Join condition does not match with table: ['Dogs', {'join': 'Treatments', 'on': {'eq': ['Dogs.breed_code', 'Dogs.dog_id']}}, {'join': 'Professionals', 'on': {'eq': ['Treatments.professional_id', 'Professionals.professional_id']}}]
ERROR: Join condition does not match with table: ['Dogs', {'join': 'Treatments', 'on': {'eq': ['Dogs.breed_code', 'Dogs.breed_code']}}, {'join': 'Professionals', 'on': {'eq': ['Treatments.professional_id', 'Professionals.professional_id']}}]
Parsing error: from Dogs join Treatments on Dogs.dog_id = Treatments.dog_id and Professionals on Treatments.professional_id = Professionals.professional_id select count (*)
ERROR: Join condition does not match with table: ['Dogs', {'join': 'Treatments', 'on': {'eq': ['Dogs.size_code', 'Dogs.dog_id']}}, {'join': 'Professionals', 'on': {'eq': ['Treatments.professional_id', 'Professionals.professional_id']}}]
Example 969
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'Find the number of professionals who have ever treated dogs.'
NL tokens: [b'find', b'the', b'number', b'of', b'professionals', b'who', b'have', b'ever', b'treated', b'dogs', b'.']
NL tokens (original): [b'Find', b'the', b'number', b'of', b'professionals', b'who', b'have', b'ever', b'treated', b'dogs', b'.']
['[CLS]', 'find', 'the', 'number', 'of', 'professionals', 'who', 'have', 'ever', 'treated', 'dogs', '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT count(DISTINCT professional_id) FROM Treatments'
Target TF-P tokens: from Treatments select count (distinct Treatments.professional_id)

[WRONG] [easy] Pred 0:	b'SELECT COUNT(*) FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id' (-0.511) (length=14)
[WRONG] [easy] Pred 1:	b'SELECT COUNT(*) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id' (-0.835) (length=20)
[WRONG] [easy] Pred 2:	b'SELECT COUNT(*) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id' (-1.824) (length=14)
[WRONG] [easy] Pred 3:	b'SELECT COUNT(*) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.first_name = "VALUE"' (-2.180) (length=26)
[WRONG] [easy] Pred 4:	b'SELECT COUNT(*) FROM Dogs JOIN Treatments ON Dogs.breed_code = Treatments.treatment_id JOIN Professionals ON Treatments.professional_id = Professionals.professional_id' (-2.578) (length=20)
[WRONG] [easy] Pred 5:	b'SELECT COUNT(*) FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.first_name = "VALUE"' (-2.648) (length=20)
[CORRE] [easy] Pred 6:	b'SELECT COUNT(DISTINCT Treatments.professional_id) FROM Treatments' (-2.784) (length=9)
Error Case 329

Example 970
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b"Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state."
NL tokens: [b'which', b'professionals', b'live', b'in', b'a', b'city', b'containing', b'the', b'sub', b'##st', b'##ring', b"'", b'west', b"'", b'?', b'list', b'his', b'or', b'her', b'role', b',', b'street', b',', b'city', b'and', b'state', b'.']
NL tokens (original): [b'Which', b'professionals', b'live', b'in', b'a', b'city', b'containing', b'the', b'sub', b'##st', b'##ring', b"'", b'West', b"'", b'?', b'List', b'his', b'or', b'her', b'role', b',', b'street', b',', b'city', b'and', b'state', b'.']
['[CLS]', 'which', 'professionals', 'live', 'in', 'a', 'city', 'containing', 'the', 'sub', '##st', '##ring', "'", 'west', "'", '?', 'list', 'his', 'or', 'her', 'role', ',', 'street', ',', 'city', 'and', 'state', '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b"SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"
Target TF-P tokens: from Professionals where Professionals.city like "% West %" select Professionals.role_code , Professionals.street , Professionals.city , Professionals.state

[WRONG] [medium] Pred 0:	b'SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.city LIKE "% West %"' (-0.124) (length=17)
[WRONG] [medium] Pred 1:	b'SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE "% West %"' (-0.246) (length=17)
[WRONG] [medium] Pred 2:	b'SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.role_code LIKE "% West %"' (-1.788) (length=17)
[WRONG] [medium] Pred 3:	b'SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.street LIKE "% West %"' (-1.794) (length=17)
[WRONG] [medium] Pred 4:	b'SELECT Professionals.role_code, Professionals.street, Professionals.city FROM Professionals WHERE Professionals.first_name LIKE "% West %"' (-1.821) (length=17)
[WRONG] [medium] Pred 5:	b'SELECT Professionals.role_code, Professionals.street, Professionals.city FROM Professionals WHERE Professionals.city LIKE "% West %"' (-1.824) (length=17)
[WRONG] [medium] Pred 6:	b'SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE "% West %"' (-2.507) (length=19)
[WRONG] [medium] Pred 7:	b'SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE "% West %" AND Professionals.city LIKE "% West %"' (-2.654) (length=25)
[WRONG] [medium] Pred 8:	b'SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.city LIKE "% West %" AND Professionals.city LIKE "% West %"' (-2.700) (length=25)
[CORRE] [medium] Pred 9:	b'SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.city LIKE "% West %"' (-2.756) (length=19)
Error Case 330

Example 971
 94%|█████████▍| 122/130 [16:51<01:02,  7.77s/it]dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b"Find the role, street, city and state of the professionals living in a city that contains the substring 'West'."
NL tokens: [b'find', b'the', b'role', b',', b'street', b',', b'city', b'and', b'state', b'of', b'the', b'professionals', b'living', b'in', b'a', b'city', b'that', b'contains', b'the', b'sub', b'##st', b'##ring', b"'", b'west', b"'", b'.']
NL tokens (original): [b'Find', b'the', b'role', b',', b'street', b',', b'city', b'and', b'state', b'of', b'the', b'professionals', b'living', b'in', b'a', b'city', b'that', b'contains', b'the', b'sub', b'##st', b'##ring', b"'", b'West', b"'", b'.']
['[CLS]', 'find', 'the', 'role', ',', 'street', ',', 'city', 'and', 'state', 'of', 'the', 'professionals', 'living', 'in', 'a', 'city', 'that', 'contains', 'the', 'sub', '##st', '##ring', "'", 'west', "'", '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b"SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"
Target TF-P tokens: from Professionals where Professionals.city like "% West %" select Professionals.role_code , Professionals.street , Professionals.city , Professionals.state

[WRONG] [medium] Pred 0:	b'SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE "% West %"' (-0.002) (length=19)
[WRONG] [medium] Pred 1:	b'SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.first_name LIKE "% West %"' (-1.249) (length=17)
[WRONG] [medium] Pred 2:	b'SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.street LIKE "% West %"' (-2.338) (length=19)
[CORRE] [medium] Pred 3:	b'SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.city LIKE "% West %"' (-2.425) (length=19)
Error Case 331

Example 976
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'How much does the most recent treatment cost?'
NL tokens: [b'how', b'much', b'does', b'the', b'most', b'recent', b'treatment', b'cost', b'?']
NL tokens (original): [b'How', b'much', b'does', b'the', b'most', b'recent', b'treatment', b'cost', b'?']
 95%|█████████▍| 123/130 [16:53<00:42,  6.04s/it]['[CLS]', 'how', 'much', 'does', 'the', 'most', 'recent', 'treatment', 'cost', '?', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1'
Target TF-P tokens: from Treatments select Treatments.cost_of_treatment order by Treatments.date_of_treatment desc limit 1

[WRONG] [medium] Pred 0:	b'SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment LIMIT 1' (-0.010) (length=9)
[CORRE] [medium] Pred 1:	b'SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment DESC LIMIT 1' (-1.422) (length=10)
Error Case 332

Parsing error: from Dogs where Dogs.abandoned_yn = yes "and Dogs.weight = 1 select Dogs.name , Dogs.age , Dogs.weight"
Parsing error: from Dogs where Dogs.abandoned_yn = yes null and Dogs.weight = 1 select Dogs.name , Dogs.age , Dogs.weight
Parsing error: from Dogs where Dogs.abandoned_yn = yes null and Dogs.weight = 0 select Dogs.name , Dogs.age , Dogs.weight
Parsing error: from Dogs where Dogs.abandoned_yn = yes null and Dogs.weight = 1 and Dogs.weight = 0 select Dogs.name , Dogs.age , Dogs.weight
Parsing error: from Dogs where Dogs.abandoned_yn = yes-no "select Dogs.name , Dogs.age , Dogs.weight"
Example 984
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.'
NL tokens: [b'list', b'the', b'dog', b'name', b',', b'age', b'and', b'weight', b'of', b'the', b'dogs', b'who', b'have', b'been', b'abandoned', b'?', b'1', b'stands', b'for', b'yes', b',', b'and', b'0', b'stands', b'for', b'no', b'.']
NL tokens (original): [b'List', b'the', b'dog', b'name', b',', b'age', b'and', b'weight', b'of', b'the', b'dogs', b'who', b'have', b'been', b'abandoned', b'?', b'1', b'stands', b'for', b'yes', b',', b'and', b'0', b'stands', b'for', b'no', b'.']
['[CLS]', 'list', 'the', 'dog', 'name', ',', 'age', 'and', 'weight', 'of', 'the', 'dogs', 'who', 'have', 'been', 'abandoned', '?', '1', 'stands', 'for', 'yes', ',', 'and', '0', 'stands', 'for', 'no', '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1'
Target TF-P tokens: from Dogs where Dogs.abandoned_yn = 1 select Dogs.name , Dogs.age , Dogs.weight

[WRONG] [medium] Pred 0:	b'SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1 INTERSECT SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = "no"' (-0.209) (length=28)
[WRONG] [medium] Pred 1:	b'SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1 AND Dogs.weight = 0' (-0.234) (length=17)
[WRONG] [medium] Pred 2:	b'SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = "yes" INTERSECT SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = "no"' (-0.705) (length=28)
[WRONG] [medium] Pred 3:	b'SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1 AND Dogs.weight = 0 AND Dogs.weight = 1' (-0.720) (length=21)
[WRONG] [medium] Pred 4:	b'SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1 AND Dogs.weight = "no"' (-0.728) (length=17)
[WRONG] [medium] Pred 5:	b'SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1 INTERSECT SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = "no" AND Dogs.weight = 0' (-0.820) (length=32)
[WRONG] [medium] Pred 6:	b'SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1 INTERSECT SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = "yes" AND Dogs.weight = "no"' (-1.002) (length=34)
[WRONG] [medium] Pred 7:	b'SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1 AND Dogs.weight = 1' (-1.075) (length=17)
[CORRE] [medium] Pred 8:	b'SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1' (-1.185) (length=13)
Error Case 333

Parsing error: from Dogs where Dogs.abandoned_yn = yes "and Dogs.weight = 1 select Dogs.name , Dogs.age , Dogs.weight"
Parsing error: from Dogs where Dogs.abandoned_yn = yes null and Dogs.weight = 1 select Dogs.name , Dogs.age , Dogs.weight
Parsing error: from Dogs where Dogs.abandoned_yn = yes null and Dogs.weight = 0 select Dogs.name , Dogs.age , Dogs.weight
Example 985
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.'
NL tokens: [b'what', b'are', b'the', b'dog', b'name', b',', b'age', b'and', b'weight', b'of', b'the', b'dogs', b'that', b'were', b'abandoned', b'?', b'note', b'that', b'1', b'stands', b'for', b'yes', b',', b'and', b'0', b'stands', b'for', b'no', b'in', b'the', b'tables', b'.']
NL tokens (original): [b'What', b'are', b'the', b'dog', b'name', b',', b'age', b'and', b'weight', b'of', b'the', b'dogs', b'that', b'were', b'abandoned', b'?', b'Note', b'that', b'1', b'stands', b'for', b'yes', b',', b'and', b'0', b'stands', b'for', b'no', b'in', b'the', b'tables', b'.']
['[CLS]', 'what', 'are', 'the', 'dog', 'name', ',', 'age', 'and', 'weight', 'of', 'the', 'dogs', 'that', 'were', 'abandoned', '?', 'note', 'that', '1', 'stands', 'for', 'yes', ',', 'and', '0', 'stands', 'for', 'no', 'in', 'the', 'tables', '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1'
Target TF-P tokens: from Dogs where Dogs.abandoned_yn = 1 select Dogs.name , Dogs.age , Dogs.weight

[WRONG] [medium] Pred 0:	b'SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1 AND Dogs.weight = 0' (-0.230) (length=17)
[WRONG] [medium] Pred 1:	b'SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1 INTERSECT SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1 AND Dogs.weight = 0' (-0.743) (length=30)
[WRONG] [medium] Pred 2:	b'SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1 INTERSECT SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = "yes" AND Dogs.weight = 0' (-0.775) (length=30)
[CORRE] [medium] Pred 3:	b'SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1' (-0.940) (length=13)
Error Case 334

Parsing error: from Dogs order by Dogs.age = (from Dogs select Dogs.age order by Dogs.date_of_birth desc limit 1
Parsing error: from Dogs select Dogs.age order by Dogs.date_of_birth desc limit 1 , Dogs.age
Parsing error: from Dogs select Dogs.age order by Dogs.date_of_birth desc limit limit 1
Parsing error: from Dogs select Dogs.age order by Dogs.date_of_birth desc limit 1 : 1
Example 988
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'What is the age of the oldest dog?'
NL tokens: [b'what', b'is', b'the', b'age', b'of', b'the', b'oldest', b'dog', b'?']
NL tokens (original): [b'What', b'is', b'the', b'age', b'of', b'the', b'oldest', b'dog', b'?']
['[CLS]', 'what', 'is', 'the', 'age', 'of', 'the', 'oldest', 'dog', '?', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT max(age) FROM Dogs'
Target TF-P tokens: from Dogs select max (Dogs.age)

[WRONG] [easy] Pred 0:	b'SELECT Dogs.age FROM Dogs ORDER BY Dogs.date_of_birth DESC LIMIT 1' (-0.003) (length=10)
[WRONG] [easy] Pred 1:	b'SELECT Dogs.age FROM Dogs ORDER BY Dogs.age DESC LIMIT 1' (-1.875) (length=10)
[WRONG] [easy] Pred 2:	b'SELECT Dogs.age FROM Dogs WHERE Dogs.date_of_birth = (SELECT MAX(Dogs.date_of_birth) FROM Dogs)' (-4.817) (length=17)
[WRONG] [easy] Pred 3:	b'SELECT Dogs.age FROM Dogs GROUP BY Dogs.age ORDER BY MAX(Dogs.date_of_birth) DESC LIMIT 1' (-5.247) (length=15)
[WRONG] [easy] Pred 4:	b'SELECT Dogs.age FROM Dogs ORDER BY Dogs.date_of_birth DESC LIMIT "oldest"' (-5.930) (length=10)
[WRONG] [easy] Pred 5:	b'SELECT Dogs.age, Dogs.date_of_birth FROM Dogs ORDER BY Dogs.date_of_birth DESC LIMIT 1' (-6.075) (length=12)
[WRONG] [easy] Pred 6:	b'SELECT Dogs.age FROM Dogs ORDER BY Dogs.date_arrived DESC LIMIT 1' (-6.106) (length=10)
[WRONG] [easy] Pred 7:	b'SELECT Dogs.age FROM Dogs ORDER BY Dogs.age DESC LIMIT 1' (-6.309) (length=12)
[WRONG] [easy] Pred 8:	b'SELECT Dogs.age FROM Dogs ORDER BY Dogs.date_of_birth ASC LIMIT 1' (-6.745) (length=10)
[WRONG] [easy] Pred 9:	b'SELECT Dogs.age FROM Dogs ORDER BY Dogs.date_of_birth DESC LIMIT "dog"' (-6.995) (length=10)
[WRONG] [easy] Pred 10:	b'SELECT Dogs.age FROM Dogs ORDER BY Dogs.date_of_birth DESC LIMIT "the"' (-7.154) (length=10)
[WRONG] [easy] Pred 11:	b'SELECT Dogs.age FROM Dogs ORDER BY Dogs.date_of_birth DESC LIMIT 3' (-7.260) (length=10)
Error Case 335

Parsing error: from Dogs order by Dogs.date_of_birth = (from Dogs select max (Dogs.date_of_birth)) select Dogs.age
Parsing error: from Dogs order by Dogs.age = (from Dogs select Dogs.age order by Dogs.date_of_birth desc limit 1
Parsing error: from Dogs select Dogs.age order by Dogs.date_of_birth desc limit 1 , Dogs.age
Parsing error: from Dogs select Dogs.age order by Dogs.date_of_birth desc limit limit 1
Example 989
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'Tell me the age of the oldest dog.'
NL tokens: [b'tell', b'me', b'the', b'age', b'of', b'the', b'oldest', b'dog', b'.']
NL tokens (original): [b'Tell', b'me', b'the', b'age', b'of', b'the', b'oldest', b'dog', b'.']
['[CLS]', 'tell', 'me', 'the', 'age', 'of', 'the', 'oldest', 'dog', '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT max(age) FROM Dogs'
Target TF-P tokens: from Dogs select max (Dogs.age)

[WRONG] [easy] Pred 0:	b'SELECT Dogs.age FROM Dogs ORDER BY Dogs.date_of_birth DESC LIMIT 1' (-0.001) (length=10)
[WRONG] [easy] Pred 1:	b'SELECT Dogs.age FROM Dogs ORDER BY Dogs.age DESC LIMIT 1' (-2.270) (length=10)
[WRONG] [easy] Pred 2:	b'SELECT Dogs.age FROM Dogs WHERE Dogs.date_of_birth = (SELECT MAX(Dogs.date_of_birth) FROM Dogs)' (-4.712) (length=17)
[WRONG] [easy] Pred 3:	b'SELECT Dogs.age FROM Dogs GROUP BY Dogs.age ORDER BY MAX(Dogs.date_of_birth) DESC LIMIT 1' (-5.377) (length=15)
[WRONG] [easy] Pred 4:	b'SELECT Dogs.age FROM Dogs ORDER BY Dogs.date_of_birth DESC LIMIT "oldest"' (-6.024) (length=10)
[WRONG] [easy] Pred 5:	b'SELECT Dogs.age, Dogs.date_of_birth FROM Dogs ORDER BY Dogs.date_of_birth DESC LIMIT 1' (-6.122) (length=12)
[WRONG] [easy] Pred 6:	b'SELECT Dogs.age FROM Dogs ORDER BY Dogs.age DESC LIMIT 1' (-6.336) (length=12)
[WRONG] [easy] Pred 7:	b'SELECT Dogs.age FROM Dogs ORDER BY Dogs.date_arrived DESC LIMIT 1' (-6.744) (length=10)
[WRONG] [easy] Pred 8:	b'SELECT Dogs.age FROM Dogs ORDER BY Dogs.date_of_birth ASC LIMIT 1' (-6.780) (length=10)
[WRONG] [easy] Pred 9:	b'SELECT Dogs.age FROM Dogs ORDER BY Dogs.date_of_birth DESC LIMIT 3' (-7.050) (length=10)
[WRONG] [easy] Pred 10:	b'SELECT Dogs.age FROM Dogs ORDER BY Dogs.date_of_birth DESC LIMIT "dog"' (-7.113) (length=10)
[WRONG] [easy] Pred 11:	b'SELECT Dogs.age FROM Dogs ORDER BY Dogs.date_of_birth DESC LIMIT "the"' (-7.393) (length=10)
Error Case 336

Parsing error: from Charges group by Charges.charge_type select Charges.charge_type , , Charges.charge_amount
Parsing error: from Charges group by Charges.charge_type select Charges.charge_type , union from Charges select Charges.charge_amount
Parsing error: from Charges group by Charges.charge_type select Charges.charge_type , union from Charges select Charges.charge_type , Charges.charge_amount
Example 990
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'How much does each charge type costs? List both charge type and amount.'
NL tokens: [b'how', b'much', b'does', b'each', b'charge', b'type', b'costs', b'?', b'list', b'both', b'charge', b'type', b'and', b'amount', b'.']
NL tokens (original): [b'How', b'much', b'does', b'each', b'charge', b'type', b'costs', b'?', b'List', b'both', b'charge', b'type', b'and', b'amount', b'.']
['[CLS]', 'how', 'much', 'does', 'each', 'charge', 'type', 'costs', '?', 'list', 'both', 'charge', 'type', 'and', 'amount', '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT charge_type ,  charge_amount FROM Charges'
Target TF-P tokens: from Charges select Charges.charge_type , Charges.charge_amount

[WRONG] [medium] Pred 0:	b'SELECT Charges.charge_type, SUM(Charges.charge_amount) FROM Charges GROUP BY Charges.charge_type' (-0.003) (length=12)
[WRONG] [medium] Pred 1:	b'SELECT Charges.charge_type, Charges.charge_amount, SUM(Charges.charge_amount) FROM Charges GROUP BY Charges.charge_type' (-1.683) (length=14)
[WRONG] [medium] Pred 2:	b'SELECT Charges.charge_type, MAX(Charges.charge_amount) FROM Charges GROUP BY Charges.charge_type' (-1.692) (length=12)
[WRONG] [medium] Pred 3:	b'SELECT Charges.charge_type, 0, SUM(Charges.charge_amount) FROM Charges GROUP BY Charges.charge_type' (-2.831) (length=14)
[WRONG] [medium] Pred 4:	b'SELECT Charges.charge_type, AVG(Charges.charge_amount) FROM Charges GROUP BY Charges.charge_type' (-3.242) (length=12)
[WRONG] [medium] Pred 5:	b'SELECT Charges.charge_type, COUNT(*) FROM Charges GROUP BY Charges.charge_type' (-3.395) (length=12)
[WRONG] [medium] Pred 6:	b'SELECT Charges.charge_type, "VALUE", SUM(Charges.charge_amount) FROM Charges GROUP BY Charges.charge_type' (-3.465) (length=14)
[WRONG] [medium] Pred 7:	b'SELECT Charges.charge_type, Charges.charge_amount, MAX(Charges.charge_amount) FROM Charges GROUP BY Charges.charge_type' (-3.575) (length=14)
[WRONG] [medium] Pred 8:	b'SELECT Charges.charge_type, 4, SUM(Charges.charge_amount) FROM Charges GROUP BY Charges.charge_type' (-3.644) (length=14)
[WRONG] [medium] Pred 9:	b'SELECT Charges.charge_type, 1, SUM(Charges.charge_amount) FROM Charges GROUP BY Charges.charge_type' (-4.067) (length=14)
[WRONG] [medium] Pred 10:	b'SELECT Charges.charge_type, Charges.charge_amount FROM Charges GROUP BY Charges.charge_type' (-4.454) (length=11)
[WRONG] [medium] Pred 11:	b'SELECT Charges.charge_type, "not", Charges.charge_amount FROM Charges GROUP BY Charges.charge_type' (-4.472) (length=11)
[WRONG] [medium] Pred 12:	b'SELECT Charges.charge_type, "(Charges.charge_amount)" FROM Charges GROUP BY Charges.charge_type' (-4.749) (length=12)
Error Case 337

Example 991
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'List each charge type and its amount.'
NL tokens: [b'list', b'each', b'charge', b'type', b'and', b'its', b'amount', b'.']
NL tokens (original): [b'List', b'each', b'charge', b'type', b'and', b'its', b'amount', b'.']
['[CLS]', 'list', 'each', 'charge', 'type', 'and', 'its', 'amount', '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
 95%|█████████▌| 124/130 [16:59<00:36,  6.15s/it]Target 0: b'SELECT charge_type ,  charge_amount FROM Charges'
Target TF-P tokens: from Charges select Charges.charge_type , Charges.charge_amount

[WRONG] [medium] Pred 0:	b'SELECT Charges.charge_type, SUM(Charges.charge_amount) FROM Charges GROUP BY Charges.charge_type' (-0.168) (length=12)
[CORRE] [medium] Pred 1:	b'SELECT Charges.charge_type, Charges.charge_amount FROM Charges' (-0.575) (length=7)
Error Case 338

Parsing error: from Charges where Charges.charge_type = (from Charges group by Charges.charge_type select Charges.charge_type order by max (Charges.charge_amount) desc limit 1) select Charges.charge_amount union from Charges select Charges.charge_amount desc limit 1
ERROR: Join condition does not match with table: ['Charges', {'join': 'Sizes', 'on': {'eq': ['Charges.charge_type', 'Charges.charge_type']}}]
Parsing error: from Charges on Charges.charge_type = (from Charges select Charges.charge_type order by Charges.charge_amount desc limit 1) select Charges.charge_amount
Example 992
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'How much does the most expensive charge type costs?'
NL tokens: [b'how', b'much', b'does', b'the', b'most', b'expensive', b'charge', b'type', b'costs', b'?']
NL tokens (original): [b'How', b'much', b'does', b'the', b'most', b'expensive', b'charge', b'type', b'costs', b'?']
['[CLS]', 'how', 'much', 'does', 'the', 'most', 'expensive', 'charge', 'type', 'costs', '?', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT max(charge_amount) FROM Charges'
Target TF-P tokens: from Charges select max (Charges.charge_amount)

[WRONG] [easy] Pred 0:	b'SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_amount DESC LIMIT 1' (-0.010) (length=10)
[WRONG] [easy] Pred 1:	b'SELECT Charges.charge_amount FROM Charges GROUP BY Charges.charge_type ORDER BY MAX(Charges.charge_amount) DESC LIMIT 1' (-1.148) (length=15)
[WRONG] [easy] Pred 2:	b'SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = (SELECT Charges.charge_type FROM Charges ORDER BY Charges.charge_amount DESC LIMIT 1)' (-1.566) (length=19)
[WRONG] [easy] Pred 3:	b'SELECT Charges.charge_type FROM Charges GROUP BY Charges.charge_type ORDER BY SUM(Charges.charge_amount) DESC LIMIT 1' (-1.604) (length=15)
[WRONG] [easy] Pred 4:	b'SELECT Charges.charge_amount FROM Charges GROUP BY Charges.charge_type ORDER BY SUM(Charges.charge_amount) DESC LIMIT 1' (-1.695) (length=15)
[WRONG] [easy] Pred 5:	b'SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = (SELECT Charges.charge_type FROM Charges GROUP BY Charges.charge_type ORDER BY MAX(Charges.charge_amount) DESC LIMIT 1)' (-1.964) (length=24)
[WRONG] [easy] Pred 6:	b'SELECT Charges.charge_type FROM Charges GROUP BY Charges.charge_type ORDER BY MAX(Charges.charge_amount) DESC LIMIT 1' (-1.972) (length=15)
[WRONG] [easy] Pred 7:	b'SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = (SELECT Charges.charge_type FROM Charges GROUP BY Charges.charge_type ORDER BY MAX(Charges.charge_amount) DESC LIMIT 1) ORDER BY Charges.charge_amount DESC LIMIT 1' (-2.502) (length=29)
[WRONG] [easy] Pred 8:	b'SELECT Charges.charge_type FROM Charges ORDER BY Charges.charge_amount DESC LIMIT 1' (-2.712) (length=10)
[WRONG] [easy] Pred 9:	b'SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = (SELECT Charges.charge_type FROM Charges GROUP BY Charges.charge_type ORDER BY MAX(Charges.charge_amount) DESC LIMIT 1) UNION SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_amount DESC LIMIT 1' (-2.823) (length=34)
[WRONG] [easy] Pred 10:	b'SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = (SELECT Charges.charge_type FROM Charges ORDER BY Charges.charge_amount DESC LIMIT 1) ORDER BY Charges.charge_amount DESC LIMIT 1' (-2.886) (length=24)
[WRONG] [easy] Pred 11:	b'SELECT Charges.charge_type FROM Charges WHERE Charges.charge_type = (SELECT Charges.charge_type FROM Charges GROUP BY Charges.charge_type ORDER BY MAX(Charges.charge_amount) DESC LIMIT 1)' (-3.081) (length=24)
[WRONG] [easy] Pred 12:	b'SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = (SELECT Charges.charge_type FROM Charges ORDER BY Charges.charge_type DESC LIMIT 1)' (-3.145) (length=19)
Error Case 339

Parsing error: from Charges select Charges.charge_amount order by Charges.charge_type desc limit limit 1
Parsing error: from Charges select Charges.charge_amount order by Charges.charge_amount desc limit limit 1
Parsing error: from Charges select Charges.charge_amount order by Charges.charge_type desc limit desc
Example 993
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'What is the charge amount of the most expensive charge type?'
NL tokens: [b'what', b'is', b'the', b'charge', b'amount', b'of', b'the', b'most', b'expensive', b'charge', b'type', b'?']
NL tokens (original): [b'What', b'is', b'the', b'charge', b'amount', b'of', b'the', b'most', b'expensive', b'charge', b'type', b'?']
['[CLS]', 'what', 'is', 'the', 'charge', 'amount', 'of', 'the', 'most', 'expensive', 'charge', 'type', '?', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT max(charge_amount) FROM Charges'
Target TF-P tokens: from Charges select max (Charges.charge_amount)

[WRONG] [easy] Pred 0:	b'SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_type DESC LIMIT 1' (-0.080) (length=10)
[WRONG] [easy] Pred 1:	b'SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_amount DESC LIMIT 1' (-0.636) (length=10)
[WRONG] [easy] Pred 2:	b'SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = (SELECT Charges.charge_type FROM Charges ORDER BY Charges.charge_type DESC LIMIT 1)' (-3.020) (length=19)
[WRONG] [easy] Pred 3:	b'SELECT Charges.charge_amount FROM Charges GROUP BY Charges.charge_type ORDER BY MAX(Charges.charge_amount) DESC LIMIT 1' (-3.833) (length=15)
[WRONG] [easy] Pred 4:	b'SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = (SELECT Charges.charge_type FROM Charges ORDER BY Charges.charge_type DESC LIMIT 1) ORDER BY Charges.charge_amount DESC LIMIT 1' (-3.945) (length=24)
[WRONG] [easy] Pred 5:	b'SELECT Charges.charge_amount FROM Charges GROUP BY Charges.charge_type ORDER BY COUNT(*) DESC LIMIT 1' (-4.611) (length=15)
[WRONG] [easy] Pred 6:	b'SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_type DESC LIMIT 1' (-4.683) (length=12)
[WRONG] [easy] Pred 7:	b'SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_amount DESC LIMIT 1' (-4.940) (length=12)
[WRONG] [easy] Pred 8:	b'SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_type DESC LIMIT 3' (-5.160) (length=10)
[WRONG] [easy] Pred 9:	b'SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_amount DESC LIMIT 3' (-5.546) (length=10)
[WRONG] [easy] Pred 10:	b'SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_type ASC LIMIT 1' (-5.599) (length=10)
[WRONG] [easy] Pred 11:	b'SELECT Charges.charge_amount FROM Charges WHERE Charges.charge_type = (SELECT Charges.charge_type FROM Charges ORDER BY Charges.charge_type DESC LIMIT 3)' (-5.781) (length=19)
[WRONG] [easy] Pred 12:	b'SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_amount ASC LIMIT 1' (-6.122) (length=10)
Error Case 340

Parsing error: from Breeds intersect distinct Breeds.breed_code = in (from Sizes select Sizes.size_code) select Breeds.breed_name , Sizes.size_description
Parsing error: from Breeds intersect distinct Breeds.breed_code = in (from Sizes select Sizes.size_description) select Breeds.breed_name , Sizes.size_description
Parsing error: from Breeds intersect distinct Breeds.breed_code = (from Sizes select Sizes.size_code) select Breeds.breed_name , Sizes.size_description
Parsing error: from Breeds intersect distinct Breeds.breed_code = (from Sizes select Sizes.size_description) select Breeds.breed_name , Sizes.size_description
Parsing error: from Breeds < Breeds.breed_name select Breeds.breed_name , count (*)
Parsing error: from Breeds intersect distinct Breeds.breed_code = "Sizes select Breeds.breed_name , Sizes.size_description"
Parsing error: from Breeds intersect distinct Breeds.breed_code = in (from Sizes select Sizes.size_description) select Breeds.breed_name , Sizes.size_code
Parsing error: from Breeds intersect distinct Breeds.breed_code = (from Sizes select Sizes.size_code , Sizes.size_description
Parsing error: from Breeds intersect distinct Breeds.breed_code = (from Sizes select Sizes.size_description
Example 996
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'What are all the possible breed type and size type combinations?'
NL tokens: [b'what', b'are', b'all', b'the', b'possible', b'breed', b'type', b'and', b'size', b'type', b'combinations', b'?']
NL tokens (original): [b'What', b'are', b'all', b'the', b'possible', b'breed', b'type', b'and', b'size', b'type', b'combinations', b'?']
['[CLS]', 'what', 'are', 'all', 'the', 'possible', 'breed', 'type', 'and', 'size', 'type', 'combinations', '?', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT DISTINCT breed_code ,  size_code FROM dogs'
Target TF-P tokens: from Dogs select distinct Dogs.breed_code , Dogs.size_code

[WRONG] [medium] Pred 0:	b'SELECT DISTINCT Breeds.breed_name, Sizes.size_description FROM Breeds JOIN Sizes ON Breeds.breed_code = Sizes.size_code' (-3.085) (length=14)
[WRONG] [medium] Pred 1:	b'SELECT DISTINCT Breeds.breed_name, Sizes.size_description FROM Breeds JOIN Sizes ON Breeds.breed_code = Sizes.size_description' (-3.937) (length=14)
[WRONG] [medium] Pred 2:	b'SELECT Breeds.breed_name, COUNT(*) FROM Breeds GROUP BY Breeds.breed_name' (-5.045) (length=12)
[WRONG] [medium] Pred 3:	b'SELECT DISTINCT Breeds.breed_name, Sizes.size_code FROM Breeds JOIN Sizes ON Breeds.breed_code = Sizes.size_code' (-6.729) (length=14)
[WRONG] [medium] Pred 4:	b'SELECT DISTINCT Breeds.breed_name, Breeds.breed_name FROM Breeds JOIN Sizes ON Breeds.breed_code = Sizes.size_code' (-6.946) (length=14)
[WRONG] [medium] Pred 5:	b'SELECT Breeds.breed_name FROM Breeds' (-6.946) (length=7)
[WRONG] [medium] Pred 6:	b'SELECT DISTINCT Breeds.breed_name, Breeds.breed_name FROM Breeds JOIN Sizes ON Breeds.breed_code = Sizes.size_description' (-7.266) (length=14)
Error Case 341

Parsing error: from Dogs join Sizes on Dogs.breed_code = Sizes.size_code where Dogs.date_of_birth = "VALUE distinct Dogs.breed_code , Sizes.size_description"
Parsing error: from Dogs join Sizes on Dogs.breed_code = Sizes.size_code where Dogs.date_of_birth = "VALUE distinct Dogs.breed_code , Dogs.size_code"
Parsing error: from Dogs join Sizes on Dogs.breed_code = Sizes.size_code where Dogs.date_arrived = "VALUE distinct Dogs.breed_code , Sizes.size_description"
Parsing error: from Dogs join Sizes on Dogs.breed_code = Sizes.size_code where Dogs.date_arrived = "VALUE distinct Dogs.breed_code , Dogs.size_code"
Parsing error: from Dogs join Sizes on Dogs.breed_code = Sizes.size_code where Dogs.age = "VALUE distinct Dogs.breed_code , Sizes.size_description"
Parsing error: from Dogs join Sizes on Dogs.breed_code = Sizes.size_code where Dogs.date_adopted = "VALUE distinct Dogs.breed_code , Sizes.size_description"
Parsing error: from Dogs join Sizes on Dogs.breed_code = Sizes.size_code where Dogs.age = "VALUE distinct Dogs.breed_code , Dogs.size_code"
Parsing error: from Dogs join Sizes on Dogs.breed_code = Sizes.size_code where Dogs.date_adopted = "VALUE distinct Dogs.breed_code , Dogs.size_code"
Parsing error: from Dogs join Sizes on Dogs.breed_code = Sizes.size_code where Dogs.date_of_birth = "VALUE distinct Dogs.size_code"
Parsing error: from Dogs join Sizes on Dogs.breed_code = Sizes.size_code where Dogs.date_arrived = "VALUE distinct Dogs.size_code"
Example 997
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'Find the distinct breed type and size type combinations for dogs.'
NL tokens: [b'find', b'the', b'distinct', b'breed', b'type', b'and', b'size', b'type', b'combinations', b'for', b'dogs', b'.']
NL tokens (original): [b'Find', b'the', b'distinct', b'breed', b'type', b'and', b'size', b'type', b'combinations', b'for', b'dogs', b'.']
['[CLS]', 'find', 'the', 'distinct', 'breed', 'type', 'and', 'size', 'type', 'combinations', 'for', 'dogs', '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT DISTINCT breed_code ,  size_code FROM dogs'
Target TF-P tokens: from Dogs select distinct Dogs.breed_code , Dogs.size_code

[WRONG] [medium] Pred 0:	b'SELECT DISTINCT Breeds.breed_name, Dogs.size_code FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code' (-4.755) (length=14)
[WRONG] [medium] Pred 1:	b'SELECT DISTINCT Dogs.breed_code, Sizes.size_description FROM Dogs JOIN Sizes ON Dogs.breed_code = Sizes.size_code' (-4.805) (length=14)
[WRONG] [medium] Pred 2:	b'SELECT DISTINCT Dogs.breed_code, Sizes.size_description FROM Dogs JOIN Sizes ON Dogs.size_code = Sizes.size_code' (-5.072) (length=14)
[WRONG] [medium] Pred 3:	b'SELECT DISTINCT Dogs.breed_code, Dogs.size_code FROM Dogs JOIN Sizes ON Dogs.breed_code = Sizes.size_code' (-6.305) (length=14)
[WRONG] [medium] Pred 4:	b'SELECT DISTINCT Breeds.breed_name, Sizes.size_description FROM Breeds JOIN Sizes ON Breeds.breed_code = Sizes.size_code' (-6.468) (length=14)
[WRONG] [medium] Pred 5:	b'SELECT DISTINCT Dogs.breed_code, Dogs.size_code FROM Dogs JOIN Sizes ON Dogs.size_code = Sizes.size_code' (-6.497) (length=14)
Error Case 342

Parsing error: from Professionals join Treatments on Professionals.professional_id = Treatments.professional_id where Treatments.cost_of_treatment : VALUE select Professionals.first_name , Professionals.first_name
Example 998
dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b'List the first name of all the professionals along with the description of the treatment they have done.'
NL tokens: [b'list', b'the', b'first', b'name', b'of', b'all', b'the', b'professionals', b'along', b'with', b'the', b'description', b'of', b'the', b'treatment', b'they', b'have', b'done', b'.']
NL tokens (original): [b'List', b'the', b'first', b'name', b'of', b'all', b'the', b'professionals', b'along', b'with', b'the', b'description', b'of', b'the', b'treatment', b'they', b'have', b'done', b'.']
['[CLS]', 'list', 'the', 'first', 'name', 'of', 'all', 'the', 'professionals', 'along', 'with', 'the', 'description', 'of', 'the', 'treatment', 'they', 'have', 'done', '.', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code'
Target TF-P tokens: from Professionals join Treatments on Professionals.professional_id = Treatments.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code select distinct Professionals.first_name , Treatment_Types.treatment_type_description

[WRONG] [medium] Pred 0:	b'SELECT Professionals.first_name, COUNT(*) FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id' (-4.557) (length=18)
[WRONG] [medium] Pred 1:	b'SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id' (-6.163) (length=11)
[WRONG] [medium] Pred 2:	b'SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment > "VALUE"' (-6.453) (length=17)
[WRONG] [medium] Pred 3:	b'SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment LIKE "% the %"' (-6.830) (length=21)
[WRONG] [medium] Pred 4:	b'SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment = "along VALUE"' (-7.069) (length=20)
[WRONG] [medium] Pred 5:	b'SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment = "with VALUE"' (-7.127) (length=20)
[WRONG] [medium] Pred 6:	b'SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment = "done VALUE"' (-7.172) (length=20)
[WRONG] [medium] Pred 7:	b'SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment = "the VALUE"' (-7.232) (length=20)
[WRONG] [medium] Pred 8:	b'SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment = ". VALUE"' (-7.265) (length=20)
[WRONG] [medium] Pred 9:	b'SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment = ". done"' (-7.298) (length=20)
[WRONG] [medium] Pred 10:	b'SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment = "professionals VALUE"' (-7.613) (length=20)
[WRONG] [medium] Pred 11:	b'SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment = "done"' (-7.892) (length=19)
[WRONG] [medium] Pred 12:	b'SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment = "the VALUE"' (-8.195) (length=18)
[WRONG] [medium] Pred 13:	b'SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment = "along VALUE"' (-8.212) (length=18)
[WRONG] [medium] Pred 14:	b'SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment = "done VALUE"' (-8.260) (length=18)
Error Case 343

Parsing error: from Professionals join Treatments on Professionals.professional_id = Treatments.professional_id where Treatments.treatment_type_code in (from Professionals join Treatments on Professionals.professional_id = Treatments.professional_id select Professionals.first_name , Professionals.last_name
Parsing error: from Professionals join Treatments on Professionals.professional_id = Treatments.professional_id where Treatments.treatment_type_code in (from Professionals join Treatments on Professionals.professional_id = Treatments.professional_id select Professionals.first_name , Professionals.first_name
Parsing error: from Professionals join Treatments on Professionals.professional_id = Treatments.professional_id where Treatments.treatment_type_code in (from Professionals join Treatments on Professionals.professional_id = Treatments.professional_id select Professionals.first_name , Professionals.email_address
Example 999
 96%|█████████▌| 125/130 [17:10<00:37,  7.58s/it] 97%|█████████▋| 126/130 [17:12<00:23,  5.77s/it] 98%|█████████▊| 127/130 [17:12<00:12,  4.19s/it]dog_kennels
 +-- Breeds (breeds)
 |   +-- breed_code (breed code) [PRIMARY] [FOREIGN]
 |   +-- breed_name (breed name)
 +-- Charges (charges)
 |   +-- charge_id (charge id) [PRIMARY]
 |   +-- charge_type (charge type)
 |   +-- charge_amount (charge amount)
 +-- Sizes (sizes)
 |   +-- size_code (size code) [PRIMARY] [FOREIGN]
 |   +-- size_description (size description)
 +-- Treatment_Types (treatment types)
 |   +-- treatment_type_code (treatment type code) [PRIMARY] [FOREIGN]
 |   +-- treatment_type_description (treatment type description)
 +-- Owners (owners)
 |   +-- owner_id (owner id) [PRIMARY] [FOREIGN]
 |   +-- first_name (first name)
 |   +-- last_name (last name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Dogs (dogs)
 |   +-- dog_id (dog id) [PRIMARY] [FOREIGN]
 |   +-- owner_id (owner id) [FOREIGN]
 |   +-- abandoned_yn (abandoned yes or no)
 |   +-- breed_code (breed code) [FOREIGN]
 |   +-- size_code (size code) [FOREIGN]
 |   +-- name (name)
 |   +-- age (age)
 |   +-- date_of_birth (date of birth)
 |   +-- gender (gender)
 |   +-- weight (weight)
 |   +-- date_arrived (date arrived)
 |   +-- date_adopted (date adopted)
 |   +-- date_departed (date departed)
 +-- Professionals (professionals)
 |   +-- professional_id (professional id) [PRIMARY] [FOREIGN]
 |   +-- role_code (role code)
 |   +-- first_name (first name)
 |   +-- street (street)
 |   +-- city (city)
 |   +-- state (state)
 |   +-- zip_code (zip code)
 |   +-- last_name (last name)
 |   +-- email_address (email address)
 |   +-- home_phone (home phone)
 |   +-- cell_number (cell number)
 +-- Treatments (treatments)
     +-- treatment_id (treatment id) [PRIMARY]
     +-- dog_id (dog id) [FOREIGN]
     +-- professional_id (professional id) [FOREIGN]
     +-- treatment_type_code (treatment type code) [FOREIGN]
     +-- date_of_treatment (date of treatment)
     +-- cost_of_treatment (cost of treatment)
NL: b"What are each professional's first name and description of the treatment they have performed?"
NL tokens: [b'what', b'are', b'each', b'professional', b"'", b's', b'first', b'name', b'and', b'description', b'of', b'the', b'treatment', b'they', b'have', b'performed', b'?']
NL tokens (original): [b'What', b'are', b'each', b'professional', b"'", b's', b'first', b'name', b'and', b'description', b'of', b'the', b'treatment', b'they', b'have', b'performed', b'?']
['[CLS]', 'what', 'are', 'each', 'professional', "'", 's', 'first', 'name', 'and', 'description', 'of', 'the', 'treatment', 'they', 'have', 'performed', '?', '[SEP]', '*', '[unused50]', 'breeds', '[unused51]', 'breed', 'code', '[unused51]', 'breed', 'name', '[unused50]', 'charges', '[unused51]', 'charge', 'id', '[unused51]', 'charge', 'type', '[unused51]', 'charge', 'amount', '[unused50]', 'sizes', '[unused51]', 'size', 'code', '[unused51]', 'size', 'description', '[unused50]', 'treatment', 'types', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'treatment', 'type', 'description', '[unused50]', 'owners', '[unused51]', 'owner', 'id', '[unused51]', 'first', 'name', '[unused51]', 'last', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'dogs', '[unused51]', 'dog', 'id', '[unused51]', 'owner', 'id', '[unused51]', 'abandoned', 'yes', 'or', 'no', '[unused51]', 'breed', 'code', '[unused51]', 'size', 'code', '[unused51]', 'name', '[unused51]', 'age', '[unused51]', 'date', 'of', 'birth', '[unused51]', 'gender', '[unused51]', 'weight', '[unused51]', 'date', 'arrived', '[unused51]', 'date', 'adopted', '[unused51]', 'date', 'departed', '[unused50]', 'professionals', '[unused51]', 'professional', 'id', '[unused51]', 'role', 'code', '[unused51]', 'first', 'name', '[unused51]', 'street', '[unused51]', 'city', '[unused51]', 'state', '[unused51]', 'zip', 'code', '[unused51]', 'last', 'name', '[unused51]', 'email', 'address', '[unused51]', 'home', 'phone', '[unused51]', 'cell', 'number', '[unused50]', 'treatments', '[unused51]', 'treatment', 'id', '[unused51]', 'dog', 'id', '[unused51]', 'professional', 'id', '[unused51]', 'treatment', 'type', 'code', '[unused51]', 'date', 'of', 'treatment', '[unused51]', 'cost', 'of', 'treatment', '[SEP]']
Target 0: b'SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code'
Target TF-P tokens: from Professionals join Treatments on Professionals.professional_id = Treatments.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code select distinct Professionals.first_name , Treatment_Types.treatment_type_description

[WRONG] [medium] Pred 0:	b'SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.treatment_type_code IN (SELECT Professionals.professional_id FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id)' (-5.048) (length=28)
[WRONG] [medium] Pred 1:	b'SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.date_of_treatment LIKE "% and VALUE %"' (-5.142) (length=22)
[WRONG] [medium] Pred 2:	b'SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.treatment_type_code IN (SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id)' (-5.151) (length=28)
[WRONG] [medium] Pred 3:	b'SELECT Professionals.first_name, Treatments.cost_of_treatment FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id' (-5.157) (length=13)
[WRONG] [medium] Pred 4:	b'SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment LIKE "% and VALUE %"' (-5.211) (length=22)
[WRONG] [medium] Pred 5:	b'SELECT Professionals.first_name, Treatments.date_of_treatment FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id' (-5.534) (length=13)
[WRONG] [medium] Pred 6:	b'SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.date_of_treatment LIKE "% performed %"' (-5.576) (length=21)
[WRONG] [medium] Pred 7:	b'SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.date_of_treatment LIKE "% the %"' (-5.610) (length=21)
[WRONG] [medium] Pred 8:	b'SELECT Professionals.first_name, Professionals.email_address FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id' (-5.689) (length=13)
[WRONG] [medium] Pred 9:	b'SELECT Professionals.first_name, Professionals.last_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id' (-5.729) (length=13)
[WRONG] [medium] Pred 10:	b'SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment LIKE "% performed %"' (-5.771) (length=21)
[WRONG] [medium] Pred 11:	b'SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment LIKE "% the %"' (-5.817) (length=21)
[WRONG] [medium] Pred 12:	b'SELECT Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.date_of_treatment LIKE "% have %"' (-5.873) (length=21)
Error Case 344

 98%|█████████▊| 128/130 [17:15<00:07,  3.71s/it] 99%|█████████▉| 129/130 [17:17<00:03,  3.16s/it]Parsing error: from singer join song on singer.Singer_ID = song.Singer_ID where singer.Net_Worth_Millions > than 300000 select distinct singer.Name
Parsing error: from singer join song on singer.Singer_ID = song.Singer_ID where singer.Net_Worth_Millions > 300000 : ? select distinct singer.Name
Parsing error: from singer join song on singer.Singer_ID = song.Singer_ID where singer.Net_Worth_Millions > 300000 select intersect distinct singer.Name
Example 1021
singer
 +-- singer (singer)
 |   +-- Singer_ID (singer id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Birth_Year (birth year)
 |   +-- Net_Worth_Millions (net worth millions)
 |   +-- Citizenship (citizenship)
 +-- song (song)
     +-- Song_ID (song id) [PRIMARY]
     +-- Title (title)
     +-- Singer_ID (singer id) [FOREIGN]
     +-- Sales (sales)
     +-- Highest_Position (highest position)
NL: b'what are the different names of the singers that have sales more than 300000?'
NL tokens: [b'what', b'are', b'the', b'different', b'names', b'of', b'the', b'singers', b'that', b'have', b'sales', b'more', b'than', b'3000', b'##00', b'?']
NL tokens (original): [b'what', b'are', b'the', b'different', b'names', b'of', b'the', b'singers', b'that', b'have', b'sales', b'more', b'than', b'3000', b'##00', b'?']
['[CLS]', 'what', 'are', 'the', 'different', 'names', 'of', 'the', 'singers', 'that', 'have', 'sales', 'more', 'than', '3000', '##00', '?', '[SEP]', '*', '[unused50]', 'singer', '[unused51]', 'singer', 'id', '[unused51]', 'name', '[unused51]', 'birth', 'year', '[unused51]', 'net', 'worth', 'millions', '[unused51]', 'citizenship', '[unused50]', 'song', '[unused51]', 'song', 'id', '[unused51]', 'title', '[unused51]', 'singer', 'id', '[unused51]', 'sales', '[unused51]', 'highest', 'position', '[SEP]']
Target 0: b'SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000'
Target TF-P tokens: from singer join song on singer.Singer_ID = song.Singer_ID where song.Sales > 300000 select distinct singer.Name

[WRONG] [medium] Pred 0:	b'SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Net_Worth_Millions > 300000' (-0.001) (length=17)
[WRONG] [medium] Pred 1:	b'SELECT DISTINCT singer.Name FROM singer WHERE singer.Net_Worth_Millions > 300000' (-2.198) (length=11)
[WRONG] [medium] Pred 2:	b'SELECT MIN(singer.Name) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Net_Worth_Millions > 300000' (-3.411) (length=19)
[WRONG] [medium] Pred 3:	b'SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Net_Worth_Millions > 300000' (-3.467) (length=23)
[WRONG] [medium] Pred 4:	b'SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Net_Worth_Millions > 300000 AND singer.Citizenship = "different"' (-3.673) (length=23)
[WRONG] [medium] Pred 5:	b'SELECT COUNT(DISTINCT singer.Name) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Net_Worth_Millions > 300000' (-3.766) (length=20)
[WRONG] [medium] Pred 6:	b'SELECT MIN(DISTINCT singer.Name) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Net_Worth_Millions > 300000' (-3.940) (length=20)
[WRONG] [medium] Pred 7:	b'SELECT "select distinct singer.Name" FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Net_Worth_Millions > 300000' (-4.053) (length=19)
[WRONG] [medium] Pred 8:	b'SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Net_Worth_Millions > 300000 GROUP BY singer.Name' (-4.071) (length=19)
[WRONG] [medium] Pred 9:	b'SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Net_Worth_Millions > 300000 ORDER BY singer.Name' (-4.127) (length=19)
[WRONG] [medium] Pred 10:	b'SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE singer.Net_Worth_Millions >= 300000' (-4.355) (length=17)
[CORRE] [medium] Pred 11:	b'SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000' (-4.413) (length=17)
Error Case 345

Example 1022
singer
 +-- singer (singer)
 |   +-- Singer_ID (singer id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Birth_Year (birth year)
 |   +-- Net_Worth_Millions (net worth millions)
 |   +-- Citizenship (citizenship)
 +-- song (song)
     +-- Song_ID (song id) [PRIMARY]
     +-- Title (title)
     +-- Singer_ID (singer id) [FOREIGN]
     +-- Sales (sales)
     +-- Highest_Position (highest position)
NL: b'Show the names of singers that have more than one song.'
NL tokens: [b'show', b'the', b'names', b'of', b'singers', b'that', b'have', b'more', b'than', b'one', b'song', b'.']
NL tokens (original): [b'Show', b'the', b'names', b'of', b'singers', b'that', b'have', b'more', b'than', b'one', b'song', b'.']
['[CLS]', 'show', 'the', 'names', 'of', 'singers', 'that', 'have', 'more', 'than', 'one', 'song', '.', '[SEP]', '*', '[unused50]', 'singer', '[unused51]', 'singer', 'id', '[unused51]', 'name', '[unused51]', 'birth', 'year', '[unused51]', 'net', 'worth', 'millions', '[unused51]', 'citizenship', '[unused50]', 'song', '[unused51]', 'song', 'id', '[unused51]', 'title', '[unused51]', 'singer', 'id', '[unused51]', 'sales', '[unused51]', 'highest', 'position', '[SEP]']
Target 0: b'SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1'
Target TF-P tokens: from singer join song on singer.Singer_ID = song.Singer_ID group by singer.Name having count (*) > 1 select singer.Name

[WRONG] [medium] Pred 0:	b'SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY song.Singer_ID HAVING COUNT(*) > 1' (-0.066) (length=20)
[CORRE] [medium] Pred 1:	b'SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name HAVING COUNT(*) > 1' (-0.304) (length=20)
Error Case 346

Example 1023
singer
 +-- singer (singer)
 |   +-- Singer_ID (singer id) [PRIMARY] [FOREIGN]
 |   +-- Name (name)
 |   +-- Birth_Year (birth year)
 |   +-- Net_Worth_Millions (net worth millions)
 |   +-- Citizenship (citizenship)
 +-- song (song)
     +-- Song_ID (song id) [PRIMARY]
     +-- Title (title)
     +-- Singer_ID (singer id) [FOREIGN]
     +-- Sales (sales)
     +-- Highest_Position (highest position)
NL: b'What are the names of the singers that have more than one songs?'
NL tokens: [b'what', b'are', b'the', b'names', b'of', b'the', b'singers', b'that', b'have', b'more', b'than', b'one', b'songs', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'of', b'the', b'singers', b'that', b'have', b'more', b'than', b'one', b'songs', b'?']
['[CLS]', 'what', 'are', 'the', 'names', 'of', 'the', 'singers', 'that', 'have', 'more', 'than', 'one', 'songs', '?', '[SEP]', '*', '[unused50]', 'singer', '[unused51]', 'singer', 'id', '[unused51]', 'name', '[unused51]', 'birth', 'year', '[unused51]', 'net', 'worth', 'millions', '[unused51]', 'citizenship', '[unused50]', 'song', '[unused51]', 'song', 'id', '[unused51]', 'title', '[unused51]', 'singer', 'id', '[unused51]', 'sales', '[unused51]', 'highest', 'position', '[SEP]']
Target 0: b'SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1'
Target TF-P tokens: from singer join song on singer.Singer_ID = song.Singer_ID group by singer.Name having count (*) > 1 select singer.Name

[WRONG] [medium] Pred 0:	b'SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY song.Singer_ID HAVING COUNT(*) > 1' (-0.005) (length=20)
[CORRE] [medium] Pred 1:	b'SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name HAVING COUNT(*) > 1' (-0.857) (length=20)
Error Case 347

Example 1032
real_estate_properties
 +-- Ref_Feature_Types (reference feature types)
 |   +-- feature_type_code (feature type code) [PRIMARY] [FOREIGN]
 |   +-- feature_type_name (feature type name)
 +-- Ref_Property_Types (reference property types)
 |   +-- property_type_code (property type code) [PRIMARY] [FOREIGN]
 |   +-- property_type_description (property type description)
 +-- Other_Available_Features (other available features)
 |   +-- feature_id (feature id) [PRIMARY] [FOREIGN]
 |   +-- feature_type_code (feature type code) [FOREIGN]
 |   +-- feature_name (feature name)
 |   +-- feature_description (feature description)
 +-- Properties (properties)
 |   +-- property_id (property id) [PRIMARY] [FOREIGN]
 |   +-- property_type_code (property type code) [FOREIGN]
 |   +-- date_on_market (date on market)
 |   +-- date_sold (date sold)
 |   +-- property_name (property name)
 |   +-- property_address (property address)
 |   +-- room_count (room count)
 |   +-- vendor_requested_price (vendor requested price)
 |   +-- buyer_offered_price (buyer offered price)
 |   +-- agreed_selling_price (agreed selling price)
 |   +-- apt_feature_1 (apt feature 1)
 |   +-- apt_feature_2 (apt feature 2)
 |   +-- apt_feature_3 (apt feature 3)
 |   +-- fld_feature_1 (fld feature 1)
 |   +-- fld_feature_2 (fld feature 2)
 |   +-- fld_feature_3 (fld feature 3)
 |   +-- hse_feature_1 (hse feature 1)
 |   +-- hse_feature_2 (hse feature 2)
 |   +-- hse_feature_3 (hse feature 3)
 |   +-- oth_feature_1 (oth feature 1)
 |   +-- oth_feature_2 (oth feature 2)
 |   +-- oth_feature_3 (oth feature 3)
 |   +-- shp_feature_1 (shp feature 1)
 |   +-- shp_feature_2 (shp feature 2)
 |   +-- shp_feature_3 (shp feature 3)
 |   +-- other_property_details (other property details)
 +-- Other_Property_Features (other property features)
     +-- property_id (property id) [FOREIGN]
     +-- feature_id (feature id) [FOREIGN]
     +-- property_feature_description (property feature description)
NL: b'Show the property type descriptions of properties belonging to that code.'
NL tokens: [b'show', b'the', b'property', b'type', b'descriptions', b'of', b'properties', b'belonging', b'to', b'that', b'code', b'.']
NL tokens (original): [b'Show', b'the', b'property', b'type', b'descriptions', b'of', b'properties', b'belonging', b'to', b'that', b'code', b'.']
['[CLS]', 'show', 'the', 'property', 'type', 'descriptions', 'of', 'properties', 'belonging', 'to', 'that', 'code', '.', '[SEP]', '*', '[unused50]', 'reference', 'feature', 'types', '[unused51]', 'feature', 'type', 'code', '[unused51]', 'feature', 'type', 'name', '[unused50]', 'reference', 'property', 'types', '[unused51]', 'property', 'type', 'code', '[unused51]', 'property', 'type', 'description', '[unused50]', 'other', 'available', 'features', '[unused51]', 'feature', 'id', '[unused51]', 'feature', 'type', 'code', '[unused51]', 'feature', 'name', '[unused51]', 'feature', 'description', '[unused50]', 'properties', '[unused51]', 'property', 'id', '[unused51]', 'property', 'type', 'code', '[unused51]', 'date', 'on', 'market', '[unused51]', 'date', 'sold', '[unused51]', 'property', 'name', '[unused51]', 'property', 'address', '[unused51]', 'room', 'count', '[unused51]', 'vendor', 'requested', 'price', '[unused51]', 'buyer', 'offered', 'price', '[unused51]', 'agreed', 'selling', 'price', '[unused51]', 'apt', 'feature', '1', '[unused51]', 'apt', 'feature', '2', '[unused51]', 'apt', 'feature', '3', '[unused51]', 'fl', '##d', 'feature', '1', '[unused51]', 'fl', '##d', 'feature', '2', '[unused51]', 'fl', '##d', 'feature', '3', '[unused51]', 'hs', '##e', 'feature', '1', '[unused51]', 'hs', '##e', 'feature', '2', '[unused51]', 'hs', '##e', 'feature', '3', '[unused51]', 'ot', '##h', 'feature', '1', '[unused51]', 'ot', '##h', 'feature', '2', '[unused51]', 'ot', '##h', 'feature', '3', '[unused51]', 'sh', '##p', 'feature', '1', '[unused51]', 'sh', '##p', 'feature', '2', '[unused51]', 'sh', '##p', 'feature', '3', '[unused51]', 'other', 'property', 'details', '[unused50]', 'other', 'property', 'features', '[unused51]', 'property', 'id', '[unused51]', 'feature', 'id', '[unused51]', 'property', 'feature', 'description', '[SEP]']
Target 0: b'SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code'
Target TF-P tokens: from Properties join Ref_Property_Types on Properties.property_type_code = Ref_Property_Types.property_type_code group by Properties.property_type_code select Ref_Property_Types.property_type_description

[WRONG] [medium] Pred 0:	b'SELECT Ref_Property_Types.property_type_description FROM Ref_Property_Types JOIN Properties ON Ref_Property_Types.property_type_code = Properties.property_type_code' (-0.000) (length=11)
[WRONG] [medium] Pred 1:	b'SELECT Ref_Property_Types.property_type_description FROM Ref_Property_Types JOIN Properties ON Ref_Property_Types.property_type_code = Properties.property_type_code WHERE Properties.property_name = ". ."' (-3.917) (length=18)
[WRONG] [medium] Pred 2:	b'SELECT Ref_Property_Types.property_type_description FROM Ref_Property_Types JOIN Properties ON Ref_Property_Types.property_type_code = Properties.property_type_code WHERE Properties.property_address = ". ."' (-3.924) (length=18)
[CORRE] [medium] Pred 3:	b'SELECT Ref_Property_Types.property_type_description FROM Ref_Property_Types JOIN Properties ON Ref_Property_Types.property_type_code = Properties.property_type_code GROUP BY Ref_Property_Types.property_type_code' (-4.031) (length=13)
Error Case 348

Parsing error: from Properties where Properties.room_count is > houses select Properties.property_name union from Properties where Properties.room_count > 1 select Properties.property_name
Parsing error: from Properties join Properties.property_id = Properties.property_id where Properties.room_count > 1 or Properties.room_count > 1 select Properties.property_name
Parsing error: from Properties where Properties.room_count like "or Properties.room_count > 1 select Properties.property_name"
Parsing error: from Properties where Properties.room_count > 1 or Properties.room_count > or VALUE select Properties.property_name
Parsing error: from Properties where Properties.room_count 12 1 or Properties.room_count > 1 select Properties.property_name
Parsing error: from Properties where Properties.room_count > 1 : Properties.room_count > 1 select Properties.property_name
Example 1033
100%|██████████| 130/130 [17:19<00:00,  2.86s/it]
real_estate_properties
 +-- Ref_Feature_Types (reference feature types)
 |   +-- feature_type_code (feature type code) [PRIMARY] [FOREIGN]
 |   +-- feature_type_name (feature type name)
 +-- Ref_Property_Types (reference property types)
 |   +-- property_type_code (property type code) [PRIMARY] [FOREIGN]
 |   +-- property_type_description (property type description)
 +-- Other_Available_Features (other available features)
 |   +-- feature_id (feature id) [PRIMARY] [FOREIGN]
 |   +-- feature_type_code (feature type code) [FOREIGN]
 |   +-- feature_name (feature name)
 |   +-- feature_description (feature description)
 +-- Properties (properties)
 |   +-- property_id (property id) [PRIMARY] [FOREIGN]
 |   +-- property_type_code (property type code) [FOREIGN]
 |   +-- date_on_market (date on market)
 |   +-- date_sold (date sold)
 |   +-- property_name (property name)
 |   +-- property_address (property address)
 |   +-- room_count (room count)
 |   +-- vendor_requested_price (vendor requested price)
 |   +-- buyer_offered_price (buyer offered price)
 |   +-- agreed_selling_price (agreed selling price)
 |   +-- apt_feature_1 (apt feature 1)
 |   +-- apt_feature_2 (apt feature 2)
 |   +-- apt_feature_3 (apt feature 3)
 |   +-- fld_feature_1 (fld feature 1)
 |   +-- fld_feature_2 (fld feature 2)
 |   +-- fld_feature_3 (fld feature 3)
 |   +-- hse_feature_1 (hse feature 1)
 |   +-- hse_feature_2 (hse feature 2)
 |   +-- hse_feature_3 (hse feature 3)
 |   +-- oth_feature_1 (oth feature 1)
 |   +-- oth_feature_2 (oth feature 2)
 |   +-- oth_feature_3 (oth feature 3)
 |   +-- shp_feature_1 (shp feature 1)
 |   +-- shp_feature_2 (shp feature 2)
 |   +-- shp_feature_3 (shp feature 3)
 |   +-- other_property_details (other property details)
 +-- Other_Property_Features (other property features)
     +-- property_id (property id) [FOREIGN]
     +-- feature_id (feature id) [FOREIGN]
     +-- property_feature_description (property feature description)
NL: b'What are the names of properties that are either houses or apartments with more than 1 room?'
NL tokens: [b'what', b'are', b'the', b'names', b'of', b'properties', b'that', b'are', b'either', b'houses', b'or', b'apartments', b'with', b'more', b'than', b'1', b'room', b'?']
NL tokens (original): [b'What', b'are', b'the', b'names', b'of', b'properties', b'that', b'are', b'either', b'houses', b'or', b'apartments', b'with', b'more', b'than', b'1', b'room', b'?']
['[CLS]', 'what', 'are', 'the', 'names', 'of', 'properties', 'that', 'are', 'either', 'houses', 'or', 'apartments', 'with', 'more', 'than', '1', 'room', '?', '[SEP]', '*', '[unused50]', 'reference', 'feature', 'types', '[unused51]', 'feature', 'type', 'code', '[unused51]', 'feature', 'type', 'name', '[unused50]', 'reference', 'property', 'types', '[unused51]', 'property', 'type', 'code', '[unused49]', 'apartment', '[unused49]', 'house', '[unused51]', 'property', 'type', 'description', '[unused50]', 'other', 'available', 'features', '[unused51]', 'feature', 'id', '[unused51]', 'feature', 'type', 'code', '[unused51]', 'feature', 'name', '[unused51]', 'feature', 'description', '[unused50]', 'properties', '[unused51]', 'property', 'id', '[unused51]', 'property', 'type', 'code', '[unused49]', 'apartment', '[unused49]', 'house', '[unused51]', 'date', 'on', 'market', '[unused51]', 'date', 'sold', '[unused51]', 'property', 'name', '[unused51]', 'property', 'address', '[unused51]', 'room', 'count', '[unused51]', 'vendor', 'requested', 'price', '[unused51]', 'buyer', 'offered', 'price', '[unused51]', 'agreed', 'selling', 'price', '[unused51]', 'apt', 'feature', '1', '[unused51]', 'apt', 'feature', '2', '[unused51]', 'apt', 'feature', '3', '[unused51]', 'fl', '##d', 'feature', '1', '[unused51]', 'fl', '##d', 'feature', '2', '[unused51]', 'fl', '##d', 'feature', '3', '[unused51]', 'hs', '##e', 'feature', '1', '[unused51]', 'hs', '##e', 'feature', '2', '[unused51]', 'hs', '##e', 'feature', '3', '[unused51]', 'ot', '##h', 'feature', '1', '[unused51]', 'ot', '##h', 'feature', '2', '[unused51]', 'ot', '##h', 'feature', '3', '[unused51]', 'sh', '##p', 'feature', '1', '[unused51]', 'sh', '##p', 'feature', '2', '[unused51]', 'sh', '##p', 'feature', '3', '[unused51]', 'other', 'property', 'details', '[unused50]', 'other', 'property', 'features', '[unused51]', 'property', 'id', '[unused51]', 'feature', 'id', '[unused51]', 'property', 'feature', 'description', '[SEP]']
Target 0: b'SELECT property_name FROM Properties WHERE property_type_code  =  "House" UNION SELECT property_name FROM Properties WHERE property_type_code  =  "Apartment" AND room_count  >  1'
Target TF-P tokens: from Properties where Properties.property_type_code = "VALUE" select Properties.property_name union from Properties where Properties.property_type_code = "VALUE" and Properties.room_count > 1 select Properties.property_name

[WRONG] [hard] Pred 0:	b'SELECT Properties.property_name FROM Properties WHERE Properties.room_count > 1 OR Properties.room_count > 1' (-0.041) (length=13)
[WRONG] [hard] Pred 1:	b'SELECT Properties.property_name FROM Properties WHERE Properties.room_count > 1 UNION SELECT Properties.property_name FROM Properties WHERE Properties.room_count > 1' (-0.514) (length=18)
[WRONG] [hard] Pred 2:	b'SELECT Properties.property_name FROM Properties WHERE Properties.room_count < 1 UNION SELECT Properties.property_name FROM Properties WHERE Properties.room_count > 1' (-2.405) (length=18)
[WRONG] [hard] Pred 3:	b'SELECT Properties.property_name FROM Properties WHERE Properties.room_count = 1 UNION SELECT Properties.property_name FROM Properties WHERE Properties.room_count > 1' (-2.506) (length=18)
[WRONG] [hard] Pred 4:	b'SELECT Properties.property_name FROM Properties WHERE Properties.room_count >= 1 UNION SELECT Properties.property_name FROM Properties WHERE Properties.room_count > 1' (-2.689) (length=18)
[WRONG] [hard] Pred 5:	b'SELECT Properties.property_name FROM Properties WHERE Properties.room_count > 1 UNION SELECT Properties.property_name FROM Properties WHERE Properties.room_count > 1 OR Properties.room_count > 1' (-2.928) (length=22)
[WRONG] [hard] Pred 6:	b'SELECT Properties.property_name FROM Properties WHERE Properties.room_count IS NOT NULL OR Properties.room_count > 1' (-3.152) (length=14)
[WRONG] [hard] Pred 7:	b'SELECT Properties.property_name FROM Properties WHERE Properties.room_count > 1 OR Properties.room_count > "either"' (-3.245) (length=13)
[WRONG] [hard] Pred 8:	b'SELECT Properties.property_name FROM Properties WHERE Properties.room_count > 1 + Properties.room_count > 1' (-3.870) (length=13)
[WRONG] [hard] Pred 9:	b'SELECT Properties.property_name FROM Properties WHERE Properties.room_count > 1 AND Properties.room_count > 1' (-4.001) (length=13)
Error Case 349

Model predictions saved to /home/shelunts/thesis/TabularSemantingParsing/model/spider.bridge.lstm.meta.ts.ppl-0.85.2.dn.eo.feat.bert-large-uncased.xavier-1024-400-400-8-2-0.0005-inv-sqr-0.0005-4000-6e-05-inv-sqr-3e-05-4000-0.3-0.3-0.0-0.0-1-8-0.0-0.0-res-0.2-0.0-ff-0.4-0.0/predictions.16.1.05.dev.txt
DEV set performance
Top-1 exact match: 0.662
Top-2 exact match: 0.702
Top-3 exact match: 0.718
Top-5 exact match: 0.737
Top-10 exact match: 0.764
Table error: -0.044
